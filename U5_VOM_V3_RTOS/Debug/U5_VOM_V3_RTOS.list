
U5_VOM_V3_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00030880  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031af  08030ac0  08030ac0  00031ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009da2  08033c70  08033c70  00034c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000004c8  0803da14  0803da14  0003ea14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000f0  0803dedc  0803dedc  0003eedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000018  0803dfcc  0803dfcc  0003efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  0803dfe4  0803dfe4  0003efe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0803dff0  0003f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 TouchGFX_ScratchbufferA 00000100  20000120  0803e0f4  0003f120  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferB 00000100  20000220  0803e1f4  0003f220  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012a1c  20000320  0803e2f4  0003f320  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20012d3c  0803e2f4  0003fd3c  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  0003f320  2**0
                  CONTENTS, READONLY
 14 .debug_info   000a2da2  00000000  00000000  0003f356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00010595  00000000  00000000  000e20f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003e48  00000000  00000000  000f2690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002eeb  00000000  00000000  000f64d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003de91  00000000  00000000  000f93c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004971d  00000000  00000000  00137254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00172161  00000000  00000000  00180971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c2  00000000  00000000  002f2ad2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000112f0  00000000  00000000  002f2b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  00303e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000320 	.word	0x20000320
 800025c:	00000000 	.word	0x00000000
 8000260:	08030aa8 	.word	0x08030aa8

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000324 	.word	0x20000324
 800027c:	08030aa8 	.word	0x08030aa8

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of myUiDataQueue */
  myUiDataQueueHandle = osMessageQueueNew (10, sizeof(UiData_t), &myUiDataQueue_attributes);
 8000284:	4a10      	ldr	r2, [pc, #64]	@ (80002c8 <MX_FREERTOS_Init+0x48>)
 8000286:	2108      	movs	r1, #8
 8000288:	200a      	movs	r0, #10
 800028a:	f008 fec7 	bl	800901c <osMessageQueueNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a0e      	ldr	r2, [pc, #56]	@ (80002cc <MX_FREERTOS_Init+0x4c>)
 8000292:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000294:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <MX_FREERTOS_Init+0x50>)
 8000296:	2100      	movs	r1, #0
 8000298:	480e      	ldr	r0, [pc, #56]	@ (80002d4 <MX_FREERTOS_Init+0x54>)
 800029a:	f008 fd01 	bl	8008ca0 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <MX_FREERTOS_Init+0x58>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <MX_FREERTOS_Init+0x5c>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <MX_FREERTOS_Init+0x60>)
 80002aa:	f008 fcf9 	bl	8008ca0 <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a0c      	ldr	r2, [pc, #48]	@ (80002e4 <MX_FREERTOS_Init+0x64>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* creation of mySendAdcTask */
  mySendAdcTaskHandle = osThreadNew(StartSendAdcTask, NULL, &mySendAdcTask_attributes);
 80002b4:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <MX_FREERTOS_Init+0x68>)
 80002b6:	2100      	movs	r1, #0
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <MX_FREERTOS_Init+0x6c>)
 80002ba:	f008 fcf1 	bl	8008ca0 <osThreadNew>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a0b      	ldr	r2, [pc, #44]	@ (80002f0 <MX_FREERTOS_Init+0x70>)
 80002c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	08031fb8 	.word	0x08031fb8
 80002cc:	20000348 	.word	0x20000348
 80002d0:	08031f4c 	.word	0x08031f4c
 80002d4:	080002f5 	.word	0x080002f5
 80002d8:	2000033c 	.word	0x2000033c
 80002dc:	08031f70 	.word	0x08031f70
 80002e0:	0800c237 	.word	0x0800c237
 80002e4:	20000340 	.word	0x20000340
 80002e8:	08031f94 	.word	0x08031f94
 80002ec:	08000309 	.word	0x08000309
 80002f0:	20000344 	.word	0x20000344

080002f4 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
	Setup_LCD_TouchGFX();
 80002fc:	f000 f80c 	bl	8000318 <Setup_LCD_TouchGFX>
  /* Infinite loop */
	for(;;)
	{

		osDelay(10);
 8000300:	200a      	movs	r0, #10
 8000302:	f008 fd5e 	bl	8008dc2 <osDelay>
 8000306:	e7fb      	b.n	8000300 <StartDefaultTask+0xc>

08000308 <StartSendAdcTask>:
* @retval None
*/

/* USER CODE END Header_StartSendAdcTask */
void StartSendAdcTask(void *argument)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mySendAdcTask */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(30);
 8000310:	201e      	movs	r0, #30
 8000312:	f008 fd56 	bl	8008dc2 <osDelay>
 8000316:	e7fb      	b.n	8000310 <StartSendAdcTask+0x8>

08000318 <Setup_LCD_TouchGFX>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Setup_LCD_TouchGFX()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	//Init the LCD & turn on the display.
	// initialize the display and set the initial display orientation (here is orientaton: 0Â°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
	Displ_Init(Displ_Orientat_0);
 800031c:	2000      	movs	r0, #0
 800031e:	f001 f925 	bl	800156c <Displ_Init>
	// initialize backlight and turn it on at init level
	Displ_BackLight('1');
 8000322:	2031      	movs	r0, #49	@ 0x31
 8000324:	f001 f9b8 	bl	8001698 <Displ_BackLight>
	//Call the first sync.
	touchgfxSignalVSync();
 8000328:	f017 fdbc 	bl	8017ea4 <touchgfxSignalVSync>
	//Start Sync timer for TouchGFX.
	//This timer is 25Hz -> FPS = 25. This is depending on the max speed of SPI LCD.
	//SPI max speed = 32Mhz
	//Time to stransfer 1 frame = 240x320x16(bit)/32Mhz = ~= 0.0384s. <=> Refresh rate = 1/0.0384 = ~ 26Hz.
	//So take the max FPS 25, is the best choice for this case.
	if (HAL_TIM_Base_Start_IT(&TGFX_T) != HAL_OK) {
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <Setup_LCD_TouchGFX+0x28>)
 800032e:	f007 fe39 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <Setup_LCD_TouchGFX+0x24>
		Error_Handler();
 8000338:	f000 fb18 	bl	800096c <Error_Handler>
	}
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000558 	.word	0x20000558

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f001 fa3c 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f820 	bl	8000390 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000350:	f000 f87f 	bl	8000452 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f000 fa5c 	bl	8000810 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000358:	f000 f92e 	bl	80005b8 <MX_GPDMA1_Init>
  MX_SPI1_Init();
 800035c:	f000 f99a 	bl	8000694 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000360:	f000 fa08 	bl	8000774 <MX_TIM3_Init>
  MX_CRC_Init();
 8000364:	f000 f906 	bl	8000574 <MX_CRC_Init>
  MX_ICACHE_Init();
 8000368:	f000 f980 	bl	800066c <MX_ICACHE_Init>
  MX_I2C1_Init();
 800036c:	f000 f93e 	bl	80005ec <MX_I2C1_Init>
  MX_ADC1_Init();
 8000370:	f000 f890 	bl	8000494 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 8000374:	f00b ff57 	bl	800c226 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000378:	f00b ff4e 	bl	800c218 <MX_TouchGFX_PreOSInit>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800037c:	f000 f875 	bl	800046a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000380:	f008 fc3e 	bl	8008c00 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000384:	f7ff ff7c 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000388:	f008 fc60 	bl	8008c4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <main+0x48>

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b09e      	sub	sp, #120	@ 0x78
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2260      	movs	r2, #96	@ 0x60
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f02f fd01 	bl	802fda6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]
 80003b2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003b4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80003b8:	f004 fb18 	bl	80049ec <HAL_PWREx_ControlVoltageScaling>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80003c2:	f000 fad3 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80003c6:	2312      	movs	r3, #18
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d0:	2310      	movs	r3, #16
 80003d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003d4:	2301      	movs	r3, #1
 80003d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80003d8:	2310      	movs	r3, #16
 80003da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80003dc:	2300      	movs	r3, #0
 80003de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2302      	movs	r3, #2
 80003e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003e4:	2301      	movs	r3, #1
 80003e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80003e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80003ee:	2303      	movs	r3, #3
 80003f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003f2:	2308      	movs	r3, #8
 80003f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003fa:	2302      	movs	r3, #2
 80003fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000402:	230c      	movs	r3, #12
 8000404:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	4618      	mov	r0, r3
 8000410:	f004 fbd8 	bl	8004bc4 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800041a:	f000 faa7 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	231f      	movs	r3, #31
 8000420:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000422:	2303      	movs	r3, #3
 8000424:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	2103      	movs	r1, #3
 800043a:	4618      	mov	r0, r3
 800043c:	f005 fa9e 	bl	800597c <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000446:	f000 fa91 	bl	800096c <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3778      	adds	r7, #120	@ 0x78
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000456:	2002      	movs	r0, #2
 8000458:	f004 fb54 	bl	8004b04 <HAL_PWREx_ConfigSupply>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000462:	f000 fa83 	bl	800096c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}

0800046a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* GPDMA1_Channel11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 5, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2105      	movs	r1, #5
 8000472:	2053      	movs	r0, #83	@ 0x53
 8000474:	f002 ff14 	bl	80032a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 8000478:	2053      	movs	r0, #83	@ 0x53
 800047a:	f002 ff2b 	bl	80032d4 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2105      	movs	r1, #5
 8000482:	202e      	movs	r0, #46	@ 0x2e
 8000484:	f002 ff0c 	bl	80032a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000488:	202e      	movs	r0, #46	@ 0x2e
 800048a:	f002 ff23 	bl	80032d4 <HAL_NVIC_EnableIRQ>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800049a:	463b      	mov	r3, r7
 800049c:	2220      	movs	r2, #32
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f02f fc80 	bl	802fda6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a6:	4b30      	ldr	r3, [pc, #192]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004a8:	4a30      	ldr	r2, [pc, #192]	@ (800056c <MX_ADC1_Init+0xd8>)
 80004aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80004b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80004b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004be:	4b2a      	ldr	r3, [pc, #168]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c4:	4b28      	ldr	r3, [pc, #160]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ca:	4b27      	ldr	r3, [pc, #156]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004cc:	2204      	movs	r2, #4
 80004ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d0:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d6:	4b24      	ldr	r3, [pc, #144]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80004de:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e4:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <MX_ADC1_Init+0xd4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000500:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <MX_ADC1_Init+0xd4>)
 8000502:	2200      	movs	r2, #0
 8000504:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000506:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <MX_ADC1_Init+0xd4>)
 8000508:	2200      	movs	r2, #0
 800050a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800050c:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_ADC1_Init+0xd4>)
 800050e:	2200      	movs	r2, #0
 8000510:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <MX_ADC1_Init+0xd4>)
 8000514:	2200      	movs	r2, #0
 8000516:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000518:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_ADC1_Init+0xd4>)
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000520:	4811      	ldr	r0, [pc, #68]	@ (8000568 <MX_ADC1_Init+0xd4>)
 8000522:	f001 fcab 	bl	8001e7c <HAL_ADC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800052c:	f000 fa1e 	bl	800096c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_ADC1_Init+0xdc>)
 8000532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000534:	2306      	movs	r3, #6
 8000536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800053c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000540:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000542:	2304      	movs	r3, #4
 8000544:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MX_ADC1_Init+0xd4>)
 8000550:	f001 ff5e 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800055a:	f000 fa07 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000034c 	.word	0x2000034c
 800056c:	42028000 	.word	0x42028000
 8000570:	3e008000 	.word	0x3e008000

08000574 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000578:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <MX_CRC_Init+0x3c>)
 800057a:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <MX_CRC_Init+0x40>)
 800057c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <MX_CRC_Init+0x3c>)
 8000580:	2200      	movs	r2, #0
 8000582:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <MX_CRC_Init+0x3c>)
 8000586:	2200      	movs	r2, #0
 8000588:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <MX_CRC_Init+0x3c>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <MX_CRC_Init+0x3c>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <MX_CRC_Init+0x3c>)
 8000598:	2201      	movs	r2, #1
 800059a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800059c:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <MX_CRC_Init+0x3c>)
 800059e:	f002 feff 	bl	80033a0 <HAL_CRC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005a8:	f000 f9e0 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200003d8 	.word	0x200003d8
 80005b4:	40023000 	.word	0x40023000

080005b8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <MX_GPDMA1_Init+0x30>)
 80005c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005c4:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <MX_GPDMA1_Init+0x30>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_GPDMA1_Init+0x30>)
 80005d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN GPDMA1_Init 2 */
	//handle_GPDMA1_Channel11.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
	//handle_GPDMA1_Channel11.Init.DestDataWidth  = DMA_SRC_DATAWIDTH_BYTE;
  /* USER CODE END GPDMA1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	46020c00 	.word	0x46020c00

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <MX_I2C1_Init+0x74>)
 80005f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <MX_I2C1_Init+0x78>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <MX_I2C1_Init+0x74>)
 80005f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000668 <MX_I2C1_Init+0x7c>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005fc:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000626:	480e      	ldr	r0, [pc, #56]	@ (8000660 <MX_I2C1_Init+0x74>)
 8000628:	f004 f87e 	bl	8004728 <HAL_I2C_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000632:	f000 f99b 	bl	800096c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000636:	2100      	movs	r1, #0
 8000638:	4809      	ldr	r0, [pc, #36]	@ (8000660 <MX_I2C1_Init+0x74>)
 800063a:	f004 f910 	bl	800485e <HAL_I2CEx_ConfigAnalogFilter>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000644:	f000 f992 	bl	800096c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_I2C1_Init+0x74>)
 800064c:	f004 f952 	bl	80048f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 f989 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200003fc 	.word	0x200003fc
 8000664:	40005400 	.word	0x40005400
 8000668:	20a0c4df 	.word	0x20a0c4df

0800066c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000670:	2000      	movs	r0, #0
 8000672:	f004 f98b 	bl	800498c <HAL_ICACHE_ConfigAssociativityMode>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800067c:	f000 f976 	bl	800096c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000680:	f004 f9a4 	bl	80049cc <HAL_ICACHE_Enable>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800068a:	f000 f96f 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a4:	4b31      	ldr	r3, [pc, #196]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006a6:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <MX_SPI1_Init+0xdc>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b30      	ldr	r3, [pc, #192]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006b8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006bc:	2207      	movs	r2, #7
 80006be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80006d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006d4:	4b25      	ldr	r3, [pc, #148]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006dc:	4b23      	ldr	r3, [pc, #140]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_SPI1_Init+0xd8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_SPI1_Init+0xd8>)
 8000704:	2200      	movs	r2, #0
 8000706:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_SPI1_Init+0xd8>)
 800070a:	2200      	movs	r2, #0
 800070c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_SPI1_Init+0xd8>)
 8000710:	2200      	movs	r2, #0
 8000712:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_SPI1_Init+0xd8>)
 8000716:	2200      	movs	r2, #0
 8000718:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_SPI1_Init+0xd8>)
 800071c:	2200      	movs	r2, #0
 800071e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_SPI1_Init+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_SPI1_Init+0xd8>)
 8000728:	2200      	movs	r2, #0
 800072a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_SPI1_Init+0xd8>)
 800072e:	2200      	movs	r2, #0
 8000730:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	@ (800076c <MX_SPI1_Init+0xd8>)
 8000734:	f006 fb70 	bl	8006e18 <HAL_SPI_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 800073e:	f000 f915 	bl	800096c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000746:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800074a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_SPI1_Init+0xd8>)
 8000756:	f007 fb8c 	bl	8007e72 <HAL_SPIEx_SetConfigAutonomousMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000760:	f000 f904 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000450 	.word	0x20000450
 8000770:	40013000 	.word	0x40013000

08000774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_TIM3_Init+0x94>)
 8000794:	4a1d      	ldr	r2, [pc, #116]	@ (800080c <MX_TIM3_Init+0x98>)
 8000796:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_TIM3_Init+0x94>)
 800079a:	2277      	movs	r2, #119	@ 0x77
 800079c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33333-1;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007a6:	f248 2234 	movw	r2, #33332	@ 0x8234
 80007aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b8:	4813      	ldr	r0, [pc, #76]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007ba:	f007 fb9b 	bl	8007ef4 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007c4:	f000 f8d2 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007d6:	f007 fdd5 	bl	8008384 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 f8c4 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_TIM3_Init+0x94>)
 80007f2:	f008 f893 	bl	800891c <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 f8b6 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000558 	.word	0x20000558
 800080c:	40000400 	.word	0x40000400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b37      	ldr	r3, [pc, #220]	@ (8000904 <MX_GPIO_Init+0xf4>)
 8000828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082c:	4a35      	ldr	r2, [pc, #212]	@ (8000904 <MX_GPIO_Init+0xf4>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000836:	4b33      	ldr	r3, [pc, #204]	@ (8000904 <MX_GPIO_Init+0xf4>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <MX_GPIO_Init+0xf4>)
 8000846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084a:	4a2e      	ldr	r2, [pc, #184]	@ (8000904 <MX_GPIO_Init+0xf4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000854:	4b2b      	ldr	r3, [pc, #172]	@ (8000904 <MX_GPIO_Init+0xf4>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_LED_Pin|DISPL_RST_Pin|LED_GREEN_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f240 1129 	movw	r1, #297	@ 0x129
 8000868:	4827      	ldr	r0, [pc, #156]	@ (8000908 <MX_GPIO_Init+0xf8>)
 800086a:	f003 ff2b 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000874:	4825      	ldr	r0, [pc, #148]	@ (800090c <MX_GPIO_Init+0xfc>)
 8000876:	f003 ff25 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPL_LED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = DISPL_LED_Pin|LED_GREEN_Pin;
 800087a:	2321      	movs	r3, #33	@ 0x21
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	481d      	ldr	r0, [pc, #116]	@ (8000908 <MX_GPIO_Init+0xf8>)
 8000892:	f003 fd3f 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	4816      	ldr	r0, [pc, #88]	@ (8000908 <MX_GPIO_Init+0xf8>)
 80008ae:	f003 fd31 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 80008b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	480f      	ldr	r0, [pc, #60]	@ (8000908 <MX_GPIO_Init+0xf8>)
 80008cc:	f003 fd22 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 80008d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <MX_GPIO_Init+0xfc>)
 80008ea:	f003 fd13 	bl	8004314 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_GPIO_Init+0x100>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <MX_GPIO_Init+0x100>)
 80008f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008f8:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	46020c00 	.word	0x46020c00
 8000908:	42020000 	.word	0x42020000
 800090c:	42020400 	.word	0x42020400
 8000910:	46000400 	.word	0x46000400

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d102      	bne.n	800092c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000926:	f000 ff7d 	bl	8001824 <HAL_IncTick>
			count_fps_1s = 0;
		}
	}

  /* USER CODE END Callback 1 */
}
 800092a:	e013      	b.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x40>
	else if (htim == &TGFX_T) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0c      	ldr	r2, [pc, #48]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d10f      	bne.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x40>
		touchgfxSignalVSync();
 8000934:	f017 fab6 	bl	8017ea4 <touchgfxSignalVSync>
		if(count_fps_1s++ == TOUCH_GFX_FPS)
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	4909      	ldr	r1, [pc, #36]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000940:	600a      	str	r2, [r1, #0]
 8000942:	2b19      	cmp	r3, #25
 8000944:	d106      	bne.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x40>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000946:	2120      	movs	r1, #32
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800094a:	f003 fed3 	bl	80046f4 <HAL_GPIO_TogglePin>
			count_fps_1s = 0;
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40014000 	.word	0x40014000
 8000960:	20000558 	.word	0x20000558
 8000964:	200005a4 	.word	0x200005a4
 8000968:	42020000 	.word	0x42020000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <HAL_MspInit+0x3c>)
 8000980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000984:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <HAL_MspInit+0x3c>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x3c>)
 8000990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 800099c:	f004 f902 	bl	8004ba4 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	210f      	movs	r1, #15
 80009a4:	f06f 0001 	mvn.w	r0, #1
 80009a8:	f002 fc7a 	bl	80032a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	46020c00 	.word	0x46020c00

080009b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0ba      	sub	sp, #232	@ 0xe8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	22c0      	movs	r2, #192	@ 0xc0
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f02f f9e4 	bl	802fda6 <memset>
  if(hadc->Instance==ADC1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a24      	ldr	r2, [pc, #144]	@ (8000a74 <HAL_ADC_MspInit+0xbc>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d140      	bne.n	8000a6a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80009e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009ec:	f04f 0300 	mov.w	r3, #0
 80009f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80009f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fb9b 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000a0c:	f7ff ffae 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <HAL_ADC_MspInit+0xc0>)
 8000a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a16:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <HAL_ADC_MspInit+0xc0>)
 8000a18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_ADC_MspInit+0xc0>)
 8000a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_ADC_MspInit+0xc0>)
 8000a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a34:	4a10      	ldr	r2, [pc, #64]	@ (8000a78 <HAL_ADC_MspInit+0xc0>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_ADC_MspInit+0xc0>)
 8000a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a52:	2303      	movs	r3, #3
 8000a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <HAL_ADC_MspInit+0xc4>)
 8000a66:	f003 fc55 	bl	8004314 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a6a:	bf00      	nop
 8000a6c:	37e8      	adds	r7, #232	@ 0xe8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	42028000 	.word	0x42028000
 8000a78:	46020c00 	.word	0x46020c00
 8000a7c:	42020400 	.word	0x42020400

08000a80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <HAL_CRC_MspInit+0x3c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10e      	bne.n	8000ab0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_CRC_MspInit+0x40>)
 8000a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a98:	4a09      	ldr	r2, [pc, #36]	@ (8000ac0 <HAL_CRC_MspInit+0x40>)
 8000a9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <HAL_CRC_MspInit+0x40>)
 8000aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40023000 	.word	0x40023000
 8000ac0:	46020c00 	.word	0x46020c00

08000ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	22c0      	movs	r2, #192	@ 0xc0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f02f f95e 	bl	802fda6 <memset>
  if(hi2c->Instance==I2C1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a26      	ldr	r2, [pc, #152]	@ (8000b88 <HAL_I2C_MspInit+0xc4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d144      	bne.n	8000b7e <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000af4:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fb17 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000b14:	f7ff ff2a 	bl	800096c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_I2C_MspInit+0xc8>)
 8000b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b8c <HAL_I2C_MspInit+0xc8>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_I2C_MspInit+0xc8>)
 8000b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b36:	23c0      	movs	r3, #192	@ 0xc0
 8000b38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <HAL_I2C_MspInit+0xcc>)
 8000b5c:	f003 fbda 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_I2C_MspInit+0xc8>)
 8000b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b66:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <HAL_I2C_MspInit+0xc8>)
 8000b68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b6c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_I2C_MspInit+0xc8>)
 8000b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b7e:	bf00      	nop
 8000b80:	37e8      	adds	r7, #232	@ 0xe8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	46020c00 	.word	0x46020c00
 8000b90:	42020400 	.word	0x42020400

08000b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ba      	sub	sp, #232	@ 0xe8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	22c0      	movs	r2, #192	@ 0xc0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f02f f8f6 	bl	802fda6 <memset>
  if(hspi->Instance==SPI1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf4 <HAL_SPI_MspInit+0x160>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	f040 8093 	bne.w	8000cec <HAL_SPI_MspInit+0x158>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000bd2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 faac 	bl	800613c <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 8000bea:	f7ff febf 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <HAL_SPI_MspInit+0x164>)
 8000bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000bf4:	4a40      	ldr	r2, [pc, #256]	@ (8000cf8 <HAL_SPI_MspInit+0x164>)
 8000bf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bfa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <HAL_SPI_MspInit+0x164>)
 8000c00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf8 <HAL_SPI_MspInit+0x164>)
 8000c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c12:	4a39      	ldr	r2, [pc, #228]	@ (8000cf8 <HAL_SPI_MspInit+0x164>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c1c:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <HAL_SPI_MspInit+0x164>)
 8000c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000c2a:	2382      	movs	r3, #130	@ 0x82
 8000c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c42:	2305      	movs	r3, #5
 8000c44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	482b      	ldr	r0, [pc, #172]	@ (8000cfc <HAL_SPI_MspInit+0x168>)
 8000c50:	f003 fb60 	bl	8004314 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c56:	4a2b      	ldr	r2, [pc, #172]	@ (8000d04 <HAL_SPI_MspInit+0x170>)
 8000c58:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel11.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel11.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000c60:	4b27      	ldr	r3, [pc, #156]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel11.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel11.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c70:	2208      	movs	r2, #8
 8000c72:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel11.Init.DestInc = DMA_DINC_FIXED;
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel11.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel11.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel11.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c8c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel11.Init.SrcBurstLength = 1;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel11.Init.DestBurstLength = 1;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel11.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel11.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel11.Init.Mode = DMA_NORMAL;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 8000cac:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000cae:	f002 fc69 	bl	8003584 <HAL_DMA_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000cb8:	f7ff fe58 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel11);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000cca:	2110      	movs	r1, #16
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <HAL_SPI_MspInit+0x16c>)
 8000cce:	f002 ff7b 	bl	8003bc8 <HAL_DMA_ConfigChannelAttributes>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8000cd8:	f7ff fe48 	bl	800096c <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2105      	movs	r1, #5
 8000ce0:	203b      	movs	r0, #59	@ 0x3b
 8000ce2:	f002 fadd 	bl	80032a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ce6:	203b      	movs	r0, #59	@ 0x3b
 8000ce8:	f002 faf4 	bl	80032d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cec:	bf00      	nop
 8000cee:	37e8      	adds	r7, #232	@ 0xe8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	46020c00 	.word	0x46020c00
 8000cfc:	42020000 	.word	0x42020000
 8000d00:	200004e0 	.word	0x200004e0
 8000d04:	400205d0 	.word	0x400205d0

08000d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0b      	ldr	r2, [pc, #44]	@ (8000d44 <HAL_TIM_Base_MspInit+0x3c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d10e      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_TIM_Base_MspInit+0x40>)
 8000d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d20:	4a09      	ldr	r2, [pc, #36]	@ (8000d48 <HAL_TIM_Base_MspInit+0x40>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <HAL_TIM_Base_MspInit+0x40>)
 8000d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40000400 	.word	0x40000400
 8000d48:	46020c00 	.word	0x46020c00

08000d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <HAL_InitTick+0xcc>)
 8000d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d62:	4a2d      	ldr	r2, [pc, #180]	@ (8000e18 <HAL_InitTick+0xcc>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d68:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <HAL_InitTick+0xcc>)
 8000d6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d7a:	f107 0210 	add.w	r2, r7, #16
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 f91b 	bl	8005fc0 <HAL_RCC_GetClockConfig>
  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d8a:	f005 f905 	bl	8005f98 <HAL_RCC_GetPCLK2Freq>
 8000d8e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d92:	4a22      	ldr	r2, [pc, #136]	@ (8000e1c <HAL_InitTick+0xd0>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9b      	lsrs	r3, r3, #18
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <HAL_InitTick+0xd4>)
 8000da0:	4a20      	ldr	r2, [pc, #128]	@ (8000e24 <HAL_InitTick+0xd8>)
 8000da2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <HAL_InitTick+0xd4>)
 8000da6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000daa:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 8000dac:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <HAL_InitTick+0xd4>)
 8000dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db0:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <HAL_InitTick+0xd4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_InitTick+0xd4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim15);
 8000dbe:	4818      	ldr	r0, [pc, #96]	@ (8000e20 <HAL_InitTick+0xd4>)
 8000dc0:	f007 f898 	bl	8007ef4 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000dca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d118      	bne.n	8000e04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 8000dd2:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <HAL_InitTick+0xd4>)
 8000dd4:	f007 f8e6 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000dde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10e      	bne.n	8000e04 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d808      	bhi.n	8000dfe <HAL_InitTick+0xb2>
      {
        /* Enable the TIM15 global Interrupt */
        HAL_NVIC_SetPriority(TIM15_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2045      	movs	r0, #69	@ 0x45
 8000df2:	f002 fa55 	bl	80032a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df6:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_InitTick+0xdc>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e002      	b.n	8000e04 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM15 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8000e04:	2045      	movs	r0, #69	@ 0x45
 8000e06:	f002 fa65 	bl	80032d4 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3738      	adds	r7, #56	@ 0x38
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	46020c00 	.word	0x46020c00
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	200005a8 	.word	0x200005a8
 8000e24:	40014000 	.word	0x40014000
 8000e28:	2000000c 	.word	0x2000000c

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <NMI_Handler+0x4>

08000e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <MemManage_Handler+0x4>

08000e44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <TIM3_IRQHandler+0x10>)
 8000e6a:	f007 f93b 	bl	80080e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000558 	.word	0x20000558

08000e78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <SPI1_IRQHandler+0x10>)
 8000e7e:	f006 fca5 	bl	80077cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000450 	.word	0x20000450

08000e8c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <TIM15_IRQHandler+0x10>)
 8000e92:	f007 f927 	bl	80080e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200005a8 	.word	0x200005a8

08000ea0 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <GPDMA1_Channel11_IRQHandler+0x10>)
 8000ea6:	f002 fd22 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200004e0 	.word	0x200004e0

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_kill>:

int _kill(int pid, int sig)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ece:	f02f f863 	bl	802ff98 <__errno>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2216      	movs	r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_exit>:

void _exit (int status)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe7 	bl	8000ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef6:	bf00      	nop
 8000ef8:	e7fd      	b.n	8000ef6 <_exit+0x12>

08000efa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e00a      	b.n	8000f22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0c:	f3af 8000 	nop.w
 8000f10:	4601      	mov	r1, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	60ba      	str	r2, [r7, #8]
 8000f18:	b2ca      	uxtb	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbf0      	blt.n	8000f0c <_read+0x12>
  }

  return len;
 8000f2a:	687b      	ldr	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e009      	b.n	8000f5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dbf1      	blt.n	8000f46 <_write+0x12>
  }
  return len;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_close>:

int _close(int file)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f94:	605a      	str	r2, [r3, #4]
  return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_isatty>:

int _isatty(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f02e ffc8 	bl	802ff98 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20040000 	.word	0x20040000
 8001034:	00000400 	.word	0x00000400
 8001038:	200005f4 	.word	0x200005f4
 800103c:	20012d40 	.word	0x20012d40

08001040 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <SystemInit+0x68>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104a:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <SystemInit+0x68>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <SystemInit+0x6c>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <SystemInit+0x6c>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <SystemInit+0x6c>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <SystemInit+0x6c>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <SystemInit+0x6c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <SystemInit+0x6c>)
 8001072:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001076:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800107a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <SystemInit+0x6c>)
 800107e:	2200      	movs	r2, #0
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <SystemInit+0x6c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <SystemInit+0x6c>)
 8001088:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800108c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <SystemInit+0x6c>)
 8001090:	2200      	movs	r2, #0
 8001092:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <SystemInit+0x68>)
 8001096:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800109a:	609a      	str	r2, [r3, #8]
  #endif
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	46020c00 	.word	0x46020c00

080010b0 <Displ_Transmit>:
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t *data, uint16_t dataSize,
		uint8_t isTouchGFXBuffer) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6039      	str	r1, [r7, #0]
 80010b8:	4611      	mov	r1, r2
 80010ba:	461a      	mov	r2, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	460b      	mov	r3, r1
 80010c2:	80bb      	strh	r3, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {
 80010c8:	bf00      	nop
 80010ca:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <Displ_Transmit+0xcc>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0fa      	beq.n	80010ca <Displ_Transmit+0x1a>
	}; // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback

	//Displ_Select();
	CS_L();
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010da:	4829      	ldr	r0, [pc, #164]	@ (8001180 <Displ_Transmit+0xd0>)
 80010dc:	f003 faf2 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	461a      	mov	r2, r3
 80010e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e8:	4826      	ldr	r0, [pc, #152]	@ (8001184 <Displ_Transmit+0xd4>)
 80010ea:	f003 faeb 	bl	80046c4 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer) {
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d016      	beq.n	8001122 <Displ_Transmit+0x72>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit = (uint32_t*) (data + dataSize);
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e00b      	b.n	800111a <Displ_Transmit+0x6a>
			*data32 = __REV16(*data32);
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	ba5b      	rev16	r3, r3
 800110c:	60bb      	str	r3, [r7, #8]
  return result;
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3304      	adds	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3ef      	bcc.n	8001102 <Displ_Transmit+0x52>
		if(HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize) != HAL_OK){
			while(Displ_SpiAvailable == 0);
		}
#else
#ifdef DISPLAY_SPI_DMA_MODE
	if (dataSize < DISPL_DMA_CUTOFF) {
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	2b13      	cmp	r3, #19
 8001126:	d817      	bhi.n	8001158 <Displ_Transmit+0xa8>
#endif //DISPLAY_SPI_DMA_MODE
		Displ_SpiAvailable = 0;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <Displ_Transmit+0xcc>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit(&DISPL_SPI_PORT, data, dataSize, HAL_MAX_DELAY)
 800112e:	88ba      	ldrh	r2, [r7, #4]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	6839      	ldr	r1, [r7, #0]
 8001136:	4814      	ldr	r0, [pc, #80]	@ (8001188 <Displ_Transmit+0xd8>)
 8001138:	f005 ff84 	bl	8007044 <HAL_SPI_Transmit>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <Displ_Transmit+0x96>
				!= HAL_OK) {
			while (1)
 8001142:	bf00      	nop
 8001144:	e7fd      	b.n	8001142 <Displ_Transmit+0x92>
				;	//trap error.
		}
		Displ_SpiAvailable = 1;
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <Displ_Transmit+0xcc>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
		if (isTouchGFXBuffer) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d010      	beq.n	8001174 <Displ_Transmit+0xc4>
			DisplayDriver_TransferCompleteCallback();
 8001152:	f016 fea1 	bl	8017e98 <DisplayDriver_TransferCompleteCallback>
		Displ_SpiAvailable = 0;
		if (HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize)!= HAL_OK) { while (1);}
	}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
}
 8001156:	e00d      	b.n	8001174 <Displ_Transmit+0xc4>
		Displ_SpiAvailable = 0;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <Displ_Transmit+0xcc>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize)!= HAL_OK) { while (1);}
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	461a      	mov	r2, r3
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <Displ_Transmit+0xd8>)
 8001166:	f006 f97d 	bl	8007464 <HAL_SPI_Transmit_DMA>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <Displ_Transmit+0xc4>
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <Displ_Transmit+0xc0>
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000008 	.word	0x20000008
 8001180:	42020400 	.word	0x42020400
 8001184:	42020000 	.word	0x42020000
 8001188:	20000450 	.word	0x20000450

0800118c <Displ_WriteCommand>:

/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	//Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
	CS_L();
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <Displ_WriteCommand+0x44>)
 800119e:	f003 fa91 	bl	80046c4 <HAL_GPIO_WritePin>
	DC_L();
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a8:	480a      	ldr	r0, [pc, #40]	@ (80011d4 <Displ_WriteCommand+0x48>)
 80011aa:	f003 fa8b 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISPL_SPI_PORT, &cmd, 1, 1);
 80011ae:	1df9      	adds	r1, r7, #7
 80011b0:	2301      	movs	r3, #1
 80011b2:	2201      	movs	r2, #1
 80011b4:	4808      	ldr	r0, [pc, #32]	@ (80011d8 <Displ_WriteCommand+0x4c>)
 80011b6:	f005 ff45 	bl	8007044 <HAL_SPI_Transmit>
	CS_H();
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <Displ_WriteCommand+0x44>)
 80011c2:	f003 fa7f 	bl	80046c4 <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	42020400 	.word	0x42020400
 80011d4:	42020000 	.word	0x42020000
 80011d8:	20000450 	.word	0x20000450

080011dc <Dislp_WriteData_Single>:

void Dislp_WriteData_Single(uint8_t Data) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <Dislp_WriteData_Single+0x44>)
 80011ee:	f003 fa69 	bl	80046c4 <HAL_GPIO_WritePin>
	CS_L();
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f8:	480a      	ldr	r0, [pc, #40]	@ (8001224 <Dislp_WriteData_Single+0x48>)
 80011fa:	f003 fa63 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISPL_SPI_PORT, &Data, 1, 1);
 80011fe:	1df9      	adds	r1, r7, #7
 8001200:	2301      	movs	r3, #1
 8001202:	2201      	movs	r2, #1
 8001204:	4808      	ldr	r0, [pc, #32]	@ (8001228 <Dislp_WriteData_Single+0x4c>)
 8001206:	f005 ff1d 	bl	8007044 <HAL_SPI_Transmit>
	CS_H();
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <Dislp_WriteData_Single+0x48>)
 8001212:	f003 fa57 	bl	80046c4 <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	42020000 	.word	0x42020000
 8001224:	42020400 	.word	0x42020400
 8001228:	20000450 	.word	0x20000450

0800122c <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t *buff, size_t buff_size, uint8_t isTouchGFXBuffer) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	4613      	mov	r3, r2
 8001238:	71fb      	strb	r3, [r7, #7]
	if (buff_size == 0)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <Displ_WriteData+0x24>
		return;
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	b29a      	uxth	r2, r3
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff ff31 	bl	80010b0 <Displ_Transmit>
 800124e:	e000      	b.n	8001252 <Displ_WriteData+0x26>
		return;
 8001250:	bf00      	nop
}
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <ILI9XXX_Enable>:

void ILI9XXX_Enable() {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	RST_H();
 800125c:	2201      	movs	r2, #1
 800125e:	2108      	movs	r1, #8
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <ILI9XXX_Enable+0x14>)
 8001262:	f003 fa2f 	bl	80046c4 <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	42020000 	.word	0x42020000

08001270 <ILI9XXX_SPI_Init>:
void ILI9XXX_SPI_Init() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	CS_L();
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127a:	4802      	ldr	r0, [pc, #8]	@ (8001284 <ILI9XXX_SPI_Init+0x14>)
 800127c:	f003 fa22 	bl	80046c4 <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	42020400 	.word	0x42020400

08001288 <ILI9XXX_Reset>:
void ILI9XXX_Reset() {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	RST_H();
 800128c:	2201      	movs	r2, #1
 800128e:	2108      	movs	r1, #8
 8001290:	480a      	ldr	r0, [pc, #40]	@ (80012bc <ILI9XXX_Reset+0x34>)
 8001292:	f003 fa17 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001296:	20c8      	movs	r0, #200	@ 0xc8
 8001298:	f000 fae4 	bl	8001864 <HAL_Delay>
	CS_L();
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <ILI9XXX_Reset+0x38>)
 80012a4:	f003 fa0e 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012a8:	20c8      	movs	r0, #200	@ 0xc8
 80012aa:	f000 fadb 	bl	8001864 <HAL_Delay>
	RST_H();
 80012ae:	2201      	movs	r2, #1
 80012b0:	2108      	movs	r1, #8
 80012b2:	4802      	ldr	r0, [pc, #8]	@ (80012bc <ILI9XXX_Reset+0x34>)
 80012b4:	f003 fa06 	bl	80046c4 <HAL_GPIO_WritePin>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	42020000 	.word	0x42020000
 80012c0:	42020400 	.word	0x42020400

080012c4 <ILI9XXX_Init>:
/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	ILI9XXX_Enable();
 80012c8:	f7ff ffc6 	bl	8001258 <ILI9XXX_Enable>
	ILI9XXX_SPI_Init();
 80012cc:	f7ff ffd0 	bl	8001270 <ILI9XXX_SPI_Init>
	ILI9XXX_Reset();
 80012d0:	f7ff ffda 	bl	8001288 <ILI9XXX_Reset>

	//SOFTWARE RESET
	Displ_WriteCommand(0x01);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff ff59 	bl	800118c <Displ_WriteCommand>
	HAL_Delay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012de:	f000 fac1 	bl	8001864 <HAL_Delay>

	//POWER CONTROL A
	Displ_WriteCommand(0xCB);
 80012e2:	20cb      	movs	r0, #203	@ 0xcb
 80012e4:	f7ff ff52 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x39);
 80012e8:	2039      	movs	r0, #57	@ 0x39
 80012ea:	f7ff ff77 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x2C);
 80012ee:	202c      	movs	r0, #44	@ 0x2c
 80012f0:	f7ff ff74 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ff71 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x34);
 80012fa:	2034      	movs	r0, #52	@ 0x34
 80012fc:	f7ff ff6e 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x02);
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff ff6b 	bl	80011dc <Dislp_WriteData_Single>

	//POWER CONTROL B
	Displ_WriteCommand(0xCF);
 8001306:	20cf      	movs	r0, #207	@ 0xcf
 8001308:	f7ff ff40 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff65 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xC1);
 8001312:	20c1      	movs	r0, #193	@ 0xc1
 8001314:	f7ff ff62 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x30);
 8001318:	2030      	movs	r0, #48	@ 0x30
 800131a:	f7ff ff5f 	bl	80011dc <Dislp_WriteData_Single>

	//DRIVER TIMING CONTROL A
	Displ_WriteCommand(0xE8);
 800131e:	20e8      	movs	r0, #232	@ 0xe8
 8001320:	f7ff ff34 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x85);
 8001324:	2085      	movs	r0, #133	@ 0x85
 8001326:	f7ff ff59 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff ff56 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x78);
 8001330:	2078      	movs	r0, #120	@ 0x78
 8001332:	f7ff ff53 	bl	80011dc <Dislp_WriteData_Single>

	//DRIVER TIMING CONTROL B
	Displ_WriteCommand(0xEA);
 8001336:	20ea      	movs	r0, #234	@ 0xea
 8001338:	f7ff ff28 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ff4d 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff ff4a 	bl	80011dc <Dislp_WriteData_Single>

	//POWER ON SEQUENCE CONTROL
	Displ_WriteCommand(0xED);
 8001348:	20ed      	movs	r0, #237	@ 0xed
 800134a:	f7ff ff1f 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x64);
 800134e:	2064      	movs	r0, #100	@ 0x64
 8001350:	f7ff ff44 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 8001354:	2003      	movs	r0, #3
 8001356:	f7ff ff41 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x12);
 800135a:	2012      	movs	r0, #18
 800135c:	f7ff ff3e 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x81);
 8001360:	2081      	movs	r0, #129	@ 0x81
 8001362:	f7ff ff3b 	bl	80011dc <Dislp_WriteData_Single>

	//PUMP RATIO CONTROL
	Displ_WriteCommand(0xF7);
 8001366:	20f7      	movs	r0, #247	@ 0xf7
 8001368:	f7ff ff10 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x20);
 800136c:	2020      	movs	r0, #32
 800136e:	f7ff ff35 	bl	80011dc <Dislp_WriteData_Single>

	//POWER CONTROL,VRH[5:0]
	Displ_WriteCommand(0xC0);
 8001372:	20c0      	movs	r0, #192	@ 0xc0
 8001374:	f7ff ff0a 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x23);
 8001378:	2023      	movs	r0, #35	@ 0x23
 800137a:	f7ff ff2f 	bl	80011dc <Dislp_WriteData_Single>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	Displ_WriteCommand(0xC1);
 800137e:	20c1      	movs	r0, #193	@ 0xc1
 8001380:	f7ff ff04 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x10);
 8001384:	2010      	movs	r0, #16
 8001386:	f7ff ff29 	bl	80011dc <Dislp_WriteData_Single>

	//VCM CONTROL
	Displ_WriteCommand(0xC5);
 800138a:	20c5      	movs	r0, #197	@ 0xc5
 800138c:	f7ff fefe 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x3E);
 8001390:	203e      	movs	r0, #62	@ 0x3e
 8001392:	f7ff ff23 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x28);
 8001396:	2028      	movs	r0, #40	@ 0x28
 8001398:	f7ff ff20 	bl	80011dc <Dislp_WriteData_Single>

	//VCM CONTROL 2
	Displ_WriteCommand(0xC7);
 800139c:	20c7      	movs	r0, #199	@ 0xc7
 800139e:	f7ff fef5 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x86);
 80013a2:	2086      	movs	r0, #134	@ 0x86
 80013a4:	f7ff ff1a 	bl	80011dc <Dislp_WriteData_Single>

	//MEMORY ACCESS CONTROL
	Displ_WriteCommand(0x36);
 80013a8:	2036      	movs	r0, #54	@ 0x36
 80013aa:	f7ff feef 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x48);
 80013ae:	2048      	movs	r0, #72	@ 0x48
 80013b0:	f7ff ff14 	bl	80011dc <Dislp_WriteData_Single>

	//PIXEL FORMAT
	Displ_WriteCommand(0x3A);
 80013b4:	203a      	movs	r0, #58	@ 0x3a
 80013b6:	f7ff fee9 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x55);
 80013ba:	2055      	movs	r0, #85	@ 0x55
 80013bc:	f7ff ff0e 	bl	80011dc <Dislp_WriteData_Single>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	Displ_WriteCommand(0xB1);
 80013c0:	20b1      	movs	r0, #177	@ 0xb1
 80013c2:	f7ff fee3 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff ff08 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x18);
 80013cc:	2018      	movs	r0, #24
 80013ce:	f7ff ff05 	bl	80011dc <Dislp_WriteData_Single>

	//DISPLAY FUNCTION CONTROL
	Displ_WriteCommand(0xB6);
 80013d2:	20b6      	movs	r0, #182	@ 0xb6
 80013d4:	f7ff feda 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x08);
 80013d8:	2008      	movs	r0, #8
 80013da:	f7ff feff 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x82);
 80013de:	2082      	movs	r0, #130	@ 0x82
 80013e0:	f7ff fefc 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x27);
 80013e4:	2027      	movs	r0, #39	@ 0x27
 80013e6:	f7ff fef9 	bl	80011dc <Dislp_WriteData_Single>

	//3GAMMA FUNCTION DISABLE
	Displ_WriteCommand(0xF2);
 80013ea:	20f2      	movs	r0, #242	@ 0xf2
 80013ec:	f7ff fece 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fef3 	bl	80011dc <Dislp_WriteData_Single>

	//GAMMA CURVE SELECTED
	Displ_WriteCommand(0x26);
 80013f6:	2026      	movs	r0, #38	@ 0x26
 80013f8:	f7ff fec8 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x01);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff feed 	bl	80011dc <Dislp_WriteData_Single>

	//POSITIVE GAMMA CORRECTION
	Displ_WriteCommand(0xE0);
 8001402:	20e0      	movs	r0, #224	@ 0xe0
 8001404:	f7ff fec2 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x0F);
 8001408:	200f      	movs	r0, #15
 800140a:	f7ff fee7 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 800140e:	2031      	movs	r0, #49	@ 0x31
 8001410:	f7ff fee4 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x2B);
 8001414:	202b      	movs	r0, #43	@ 0x2b
 8001416:	f7ff fee1 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0C);
 800141a:	200c      	movs	r0, #12
 800141c:	f7ff fede 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 8001420:	200e      	movs	r0, #14
 8001422:	f7ff fedb 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x08);
 8001426:	2008      	movs	r0, #8
 8001428:	f7ff fed8 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x4E);
 800142c:	204e      	movs	r0, #78	@ 0x4e
 800142e:	f7ff fed5 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xF1);
 8001432:	20f1      	movs	r0, #241	@ 0xf1
 8001434:	f7ff fed2 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x37);
 8001438:	2037      	movs	r0, #55	@ 0x37
 800143a:	f7ff fecf 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x07);
 800143e:	2007      	movs	r0, #7
 8001440:	f7ff fecc 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x10);
 8001444:	2010      	movs	r0, #16
 8001446:	f7ff fec9 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 800144a:	2003      	movs	r0, #3
 800144c:	f7ff fec6 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 8001450:	200e      	movs	r0, #14
 8001452:	f7ff fec3 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x09);
 8001456:	2009      	movs	r0, #9
 8001458:	f7ff fec0 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff febd 	bl	80011dc <Dislp_WriteData_Single>

	//NEGATIVE GAMMA CORRECTION
	Displ_WriteCommand(0xE1);
 8001462:	20e1      	movs	r0, #225	@ 0xe1
 8001464:	f7ff fe92 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff feb7 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 800146e:	200e      	movs	r0, #14
 8001470:	f7ff feb4 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x14);
 8001474:	2014      	movs	r0, #20
 8001476:	f7ff feb1 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 800147a:	2003      	movs	r0, #3
 800147c:	f7ff feae 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x11);
 8001480:	2011      	movs	r0, #17
 8001482:	f7ff feab 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x07);
 8001486:	2007      	movs	r0, #7
 8001488:	f7ff fea8 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 800148c:	2031      	movs	r0, #49	@ 0x31
 800148e:	f7ff fea5 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xC1);
 8001492:	20c1      	movs	r0, #193	@ 0xc1
 8001494:	f7ff fea2 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x48);
 8001498:	2048      	movs	r0, #72	@ 0x48
 800149a:	f7ff fe9f 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x08);
 800149e:	2008      	movs	r0, #8
 80014a0:	f7ff fe9c 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0F);
 80014a4:	200f      	movs	r0, #15
 80014a6:	f7ff fe99 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0C);
 80014aa:	200c      	movs	r0, #12
 80014ac:	f7ff fe96 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 80014b0:	2031      	movs	r0, #49	@ 0x31
 80014b2:	f7ff fe93 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x36);
 80014b6:	2036      	movs	r0, #54	@ 0x36
 80014b8:	f7ff fe90 	bl	80011dc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0F);
 80014bc:	200f      	movs	r0, #15
 80014be:	f7ff fe8d 	bl	80011dc <Dislp_WriteData_Single>

	//EXIT SLEEP
	Displ_WriteCommand(0x11);
 80014c2:	2011      	movs	r0, #17
 80014c4:	f7ff fe62 	bl	800118c <Displ_WriteCommand>
	HAL_Delay(120);
 80014c8:	2078      	movs	r0, #120	@ 0x78
 80014ca:	f000 f9cb 	bl	8001864 <HAL_Delay>

	//TURN ON DISPLAY
	Displ_WriteCommand(0x29);
 80014ce:	2029      	movs	r0, #41	@ 0x29
 80014d0:	f7ff fe5c 	bl	800118c <Displ_WriteCommand>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
	HAL_Delay(5);
#endif

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4623      	mov	r3, r4
 80014e8:	80fb      	strh	r3, [r7, #6]
 80014ea:	4603      	mov	r3, r0
 80014ec:	80bb      	strh	r3, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	807b      	strh	r3, [r7, #2]
 80014f2:	4613      	mov	r3, r2
 80014f4:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8)
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	061a      	lsls	r2, r3, #24
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001502:	431a      	orrs	r2, r3
			| ((x1 & 0xFF) << 8) | ((x1 & 0xFF00) >> 8));
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	88fa      	ldrh	r2, [r7, #6]
 800150e:	0a12      	lsrs	r2, r2, #8
 8001510:	b292      	uxth	r2, r2
 8001512:	431a      	orrs	r2, r3
	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8)
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <Displ_SetAddressWindow+0x90>)
 8001516:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8001518:	202a      	movs	r0, #42	@ 0x2a
 800151a:	f7ff fe37 	bl	800118c <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2104      	movs	r1, #4
 8001522:	4811      	ldr	r0, [pc, #68]	@ (8001568 <Displ_SetAddressWindow+0x90>)
 8001524:	f7ff fe82 	bl	800122c <Displ_WriteData>

	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8)
 8001528:	883b      	ldrh	r3, [r7, #0]
 800152a:	061a      	lsls	r2, r3, #24
 800152c:	883b      	ldrh	r3, [r7, #0]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001534:	431a      	orrs	r2, r3
			| ((y1 & 0xFF) << 8) | ((y1 & 0xFF00) >> 8));
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	88ba      	ldrh	r2, [r7, #4]
 8001540:	0a12      	lsrs	r2, r2, #8
 8001542:	b292      	uxth	r2, r2
 8001544:	431a      	orrs	r2, r3
	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8)
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <Displ_SetAddressWindow+0x90>)
 8001548:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800154a:	202b      	movs	r0, #43	@ 0x2b
 800154c:	f7ff fe1e 	bl	800118c <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2104      	movs	r1, #4
 8001554:	4804      	ldr	r0, [pc, #16]	@ (8001568 <Displ_SetAddressWindow+0x90>)
 8001556:	f7ff fe69 	bl	800122c <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 800155a:	202c      	movs	r0, #44	@ 0x2c
 800155c:	f7ff fe16 	bl	800118c <Displ_WriteCommand>
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	20000600 	.word	0x20000600

0800156c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
//		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
//		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
//	} else
	{						// otherwise leave both port permanently selected
		//HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); // select display
		CS_L();
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800157c:	4806      	ldr	r0, [pc, #24]	@ (8001598 <Displ_Init+0x2c>)
 800157e:	f003 f8a1 	bl	80046c4 <HAL_GPIO_WritePin>
		//SET_DISPL_SPI_BAUDRATE;
		//HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		//SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8001582:	f7ff fe9f 	bl	80012c4 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f807 	bl	800159c <Displ_Orientation>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	42020400 	.word	0x42020400

0800159c <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	//static uint8_t data[1];
	uint8_t data = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
	switch (orientation) {
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d833      	bhi.n	8001618 <Displ_Orientation+0x7c>
 80015b0:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <Displ_Orientation+0x1c>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015dd 	.word	0x080015dd
 80015c0:	080015f1 	.word	0x080015f1
 80015c4:	08001605 	.word	0x08001605
	case Displ_Orientat_0:
		data = ILI9XXX_MADCTL_0DEG;
 80015c8:	2388      	movs	r3, #136	@ 0x88
 80015ca:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_HEIGHT;
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <Displ_Orientation+0x98>)
 80015ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015d2:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <Displ_Orientation+0x9c>)
 80015d6:	22f0      	movs	r2, #240	@ 0xf0
 80015d8:	801a      	strh	r2, [r3, #0]
		break;
 80015da:	e01d      	b.n	8001618 <Displ_Orientation+0x7c>
	case Displ_Orientat_90:
		data = ILI9XXX_MADCTL_90DEG;
 80015dc:	23e8      	movs	r3, #232	@ 0xe8
 80015de:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_WIDTH;
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <Displ_Orientation+0x98>)
 80015e2:	22f0      	movs	r2, #240	@ 0xf0
 80015e4:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <Displ_Orientation+0x9c>)
 80015e8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015ec:	801a      	strh	r2, [r3, #0]
		break;
 80015ee:	e013      	b.n	8001618 <Displ_Orientation+0x7c>
	case Displ_Orientat_180:
		data = ILI9XXX_MADCTL_180DEG;
 80015f0:	2348      	movs	r3, #72	@ 0x48
 80015f2:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_HEIGHT;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <Displ_Orientation+0x98>)
 80015f6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015fa:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <Displ_Orientation+0x9c>)
 80015fe:	22f0      	movs	r2, #240	@ 0xf0
 8001600:	801a      	strh	r2, [r3, #0]
		break;
 8001602:	e009      	b.n	8001618 <Displ_Orientation+0x7c>
	case Displ_Orientat_270:
		data = ILI9XXX_MADCTL_270DEG;
 8001604:	2328      	movs	r3, #40	@ 0x28
 8001606:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_WIDTH;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <Displ_Orientation+0x98>)
 800160a:	22f0      	movs	r2, #240	@ 0xf0
 800160c:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <Displ_Orientation+0x9c>)
 8001610:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001614:	801a      	strh	r2, [r3, #0]
		break;
 8001616:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8001618:	2036      	movs	r0, #54	@ 0x36
 800161a:	f7ff fdb7 	bl	800118c <Displ_WriteCommand>
	Dislp_WriteData_Single(data);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fddb 	bl	80011dc <Dislp_WriteData_Single>
	current_orientation = orientation; //stores active orientation into a global variable for touch routines
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <Displ_Orientation+0xa0>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	7013      	strb	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200005fc 	.word	0x200005fc
 8001638:	200005fa 	.word	0x200005fa
 800163c:	200005f8 	.word	0x200005f8

08001640 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <HAL_SPI_ErrorCallback+0x24>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d102      	bne.n	8001658 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable = 1;
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_SPI_ErrorCallback+0x28>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
	}
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40013000 	.word	0x40013000
 8001668:	20000008 	.word	0x20000008

0800166c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <HAL_SPI_TxCpltCallback+0x24>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d104      	bne.n	8001688 <HAL_SPI_TxCpltCallback+0x1c>
		Displ_SpiAvailable = 1;
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_SPI_TxCpltCallback+0x28>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]

#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
 8001684:	f016 fc08 	bl	8017e98 <DisplayDriver_TransferCompleteCallback>
#endif
		//spiDmaTransferComplete = 0;
	}
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40013000 	.word	0x40013000
 8001694:	20000008 	.word	0x20000008

08001698 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t Displ_BackLight(uint8_t cmd) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b51      	cmp	r3, #81	@ 0x51
 80016a6:	d00a      	beq.n	80016be <Displ_BackLight+0x26>
 80016a8:	2b51      	cmp	r3, #81	@ 0x51
 80016aa:	dc16      	bgt.n	80016da <Displ_BackLight+0x42>
 80016ac:	2b46      	cmp	r3, #70	@ 0x46
 80016ae:	d008      	beq.n	80016c2 <Displ_BackLight+0x2a>
 80016b0:	2b46      	cmp	r3, #70	@ 0x46
 80016b2:	dc12      	bgt.n	80016da <Displ_BackLight+0x42>
 80016b4:	2b30      	cmp	r3, #48	@ 0x30
 80016b6:	d00a      	beq.n	80016ce <Displ_BackLight+0x36>
 80016b8:	2b31      	cmp	r3, #49	@ 0x31
 80016ba:	d002      	beq.n	80016c2 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 80016bc:	e00d      	b.n	80016da <Displ_BackLight+0x42>
		__NOP();
 80016be:	bf00      	nop
		break;
 80016c0:	e00c      	b.n	80016dc <Displ_BackLight+0x44>
		LED_H();
 80016c2:	2201      	movs	r2, #1
 80016c4:	2101      	movs	r1, #1
 80016c6:	480a      	ldr	r0, [pc, #40]	@ (80016f0 <Displ_BackLight+0x58>)
 80016c8:	f002 fffc 	bl	80046c4 <HAL_GPIO_WritePin>
		break;
 80016cc:	e006      	b.n	80016dc <Displ_BackLight+0x44>
		LED_L();
 80016ce:	2200      	movs	r2, #0
 80016d0:	2101      	movs	r1, #1
 80016d2:	4807      	ldr	r0, [pc, #28]	@ (80016f0 <Displ_BackLight+0x58>)
 80016d4:	f002 fff6 	bl	80046c4 <HAL_GPIO_WritePin>
		break;
 80016d8:	e000      	b.n	80016dc <Displ_BackLight+0x44>
		break;
 80016da:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	LED_H();
 80016dc:	2201      	movs	r2, #1
 80016de:	2101      	movs	r1, #1
 80016e0:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <Displ_BackLight+0x58>)
 80016e2:	f002 ffef 	bl	80046c4 <HAL_GPIO_WritePin>
	return 0;
 80016e6:	2300      	movs	r3, #0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	42020000 	.word	0x42020000

080016f4 <touchgfxDisplayDriverTransmitActive>:
 * @brief	TouchGFX integration: returns status of
 * 			communication to the display
 * @return	1 = there is a transmission running
 * 			0 = no transmission
 *********************************************************/
int touchgfxDisplayDriverTransmitActive() {
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	// using the flag indicating SPI port availability
	// already used to drive communication via DMA
	return (!Displ_SpiAvailable);
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <touchgfxDisplayDriverTransmitActive+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf0c      	ite	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	2300      	movne	r3, #0
 8001706:	b2db      	uxtb	r3, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008

08001718 <touchgfxDisplayDriverTransmitBlock>:
/*********************************************************
 * @brief	TouchGFX integration: write to display the
 * 			block indicated by parameters
 *********************************************************/
void touchgfxDisplayDriverTransmitBlock(const uint8_t *pixels, uint16_t x,
		uint16_t y, uint16_t w, uint16_t h) {
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	460b      	mov	r3, r1
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
	//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001732:	897a      	ldrh	r2, [r7, #10]
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	4413      	add	r3, r2
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b29c      	uxth	r4, r3
 800173e:	893a      	ldrh	r2, [r7, #8]
 8001740:	8c3b      	ldrh	r3, [r7, #32]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29b      	uxth	r3, r3
 800174a:	8939      	ldrh	r1, [r7, #8]
 800174c:	8978      	ldrh	r0, [r7, #10]
 800174e:	4622      	mov	r2, r4
 8001750:	f7ff fec2 	bl	80014d8 <Displ_SetAddressWindow>
	Displ_WriteData((uint8_t*) pixels, ((w * h) << 1), 1);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	8c3a      	ldrh	r2, [r7, #32]
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2201      	movs	r2, #1
 8001760:	4619      	mov	r1, r3
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fd62 	bl	800122c <Displ_WriteData>
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}

08001770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001772:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001774:	f7ff fc64 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <LoopForever+0x6>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <LoopForever+0xe>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	@ (80017bc <LoopForever+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800179e:	f02e fc01 	bl	802ffa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a2:	f7fe fdcf 	bl	8000344 <main>

080017a6 <LoopForever>:

LoopForever:
    b LoopForever
 80017a6:	e7fe      	b.n	80017a6 <LoopForever>
  ldr   r0, =_estack
 80017a8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80017b4:	0803dff0 	.word	0x0803dff0
  ldr r2, =_sbss
 80017b8:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 80017bc:	20012d3c 	.word	0x20012d3c

080017c0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_Init+0x50>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <HAL_Init+0x50>)
 80017ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f001 fd58 	bl	800328a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017da:	f004 fac1 	bl	8005d60 <HAL_RCC_GetSysClockFreq>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <HAL_Init+0x54>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <HAL_Init+0x58>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <HAL_Init+0x5c>)
 80017f2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017f4:	2004      	movs	r0, #4
 80017f6:	f001 fd7b 	bl	80032f0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017fa:	2004      	movs	r0, #4
 80017fc:	f7ff faa6 	bl	8000d4c <HAL_InitTick>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e002      	b.n	8001810 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800180a:	f7ff f8b5 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40022000 	.word	0x40022000
 8001818:	46020c00 	.word	0x46020c00
 800181c:	08031fd0 	.word	0x08031fd0
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000010 	.word	0x20000010
 8001848:	20000604 	.word	0x20000604

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000604 	.word	0x20000604

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000010 	.word	0x20000010

080018ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <HAL_GetREVID+0x18>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	b29b      	uxth	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e0044000 	.word	0xe0044000

080018c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <LL_ADC_SetResolution+0x3c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d104      	bne.n	8001950 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3b01      	subs	r3, #1
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f023 020c 	bic.w	r2, r3, #12
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	46021000 	.word	0x46021000

08001970 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3360      	adds	r3, #96	@ 0x60
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	430b      	orrs	r3, r1
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3360      	adds	r3, #96	@ 0x60
 80019c0:	461a      	mov	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019de:	b480      	push	{r7}
 80019e0:	b087      	sub	sp, #28
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3360      	adds	r3, #96	@ 0x60
 80019ee:	461a      	mov	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3360      	adds	r3, #96	@ 0x60
 8001a24:	461a      	mov	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3360      	adds	r3, #96	@ 0x60
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d002      	beq.n	8001ab2 <LL_ADC_SetGainCompensation+0x32>
 8001aac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ab0:	e000      	b.n	8001ab4 <LL_ADC_SetGainCompensation+0x34>
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2107      	movs	r1, #7
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	431a      	orrs	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc0 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d020      	beq.n	8001b5a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3330      	adds	r3, #48	@ 0x30
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	4413      	add	r3, r2
 8001b2a:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	211f      	movs	r1, #31
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0e9b      	lsrs	r3, r3, #26
 8001b44:	f003 011f 	and.w	r1, r3, #31
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	431a      	orrs	r2, r3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001b58:	e02b      	b.n	8001bb2 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	210f      	movs	r1, #15
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d104      	bne.n	8001b82 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	0e9b      	lsrs	r3, r3, #26
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	e010      	b.n	8001ba4 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	613b      	str	r3, [r7, #16]
  return result;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e003      	b.n	8001ba4 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	f001 011f 	and.w	r1, r1, #31
 8001baa:	408b      	lsls	r3, r1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb2:	bf00      	nop
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	46021000 	.word	0x46021000

08001bc4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	0e9b      	lsrs	r3, r3, #26
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2201      	movs	r2, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	e015      	b.n	8001c14 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	60fb      	str	r3, [r7, #12]
  return result;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2201      	movs	r2, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	401a      	ands	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b08b      	sub	sp, #44	@ 0x2c
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d20 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d042      	beq.n	8001cf6 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d104      	bne.n	8001c84 <LL_ADC_SetChannelSamplingTime+0x28>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	f003 021f 	and.w	r2, r3, #31
 8001c82:	e011      	b.n	8001ca8 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  return result;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	e003      	b.n	8001ca6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	0e5b      	lsrs	r3, r3, #25
 8001cac:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	1ad2      	subs	r2, r2, r3
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0e5b      	lsrs	r3, r3, #25
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2107      	movs	r1, #7
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001cf4:	e00e      	b.n	8001d14 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	401a      	ands	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	0219      	lsls	r1, r3, #8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	400b      	ands	r3, r1
 8001d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	615a      	str	r2, [r3, #20]
}
 8001d14:	bf00      	nop
 8001d16:	372c      	adds	r7, #44	@ 0x2c
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	46021000 	.word	0x46021000

08001d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0318 	and.w	r3, r3, #24
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d48:	40d9      	lsrs	r1, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001d52:	431a      	orrs	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	000fffff 	.word	0x000fffff

08001d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6093      	str	r3, [r2, #8]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001da4:	d101      	bne.n	8001daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001dc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <LL_ADC_IsEnabled+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_ADC_IsEnabled+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d101      	bne.n	8001e6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	@ 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e2b3      	b.n	8002404 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a8b      	ldr	r2, [pc, #556]	@ (80020d8 <HAL_ADC_Init+0x25c>)
 8001eaa:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe fd7f 	bl	80009b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <LL_ADC_IsDeepPowerDownEnabled>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff45 	bl	8001d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff7a 	bl	8001de0 <LL_ADC_IsInternalRegulatorEnabled>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d115      	bne.n	8001f1e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff5e 	bl	8001db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001efc:	4b77      	ldr	r3, [pc, #476]	@ (80020dc <HAL_ADC_Init+0x260>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	4a77      	ldr	r2, [pc, #476]	@ (80020e0 <HAL_ADC_Init+0x264>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f10:	e002      	b.n	8001f18 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f9      	bne.n	8001f12 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff5c 	bl	8001de0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10e      	bne.n	8001f4c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f32:	f043 0210 	orr.w	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f3e:	f043 0201 	orr.w	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff6c 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 8001f56:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 8244 	bne.w	80023ee <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 8240 	bne.w	80023ee <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f72:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff40 	bl	8001e08 <LL_ADC_IsEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d140      	bne.n	8002010 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a51      	ldr	r2, [pc, #324]	@ (80020d8 <HAL_ADC_Init+0x25c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d028      	beq.n	8001fea <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	@ (80020e4 <HAL_ADC_Init+0x268>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x13a>
 8001fa2:	4850      	ldr	r0, [pc, #320]	@ (80020e4 <HAL_ADC_Init+0x268>)
 8001fa4:	f7ff ff30 	bl	8001e08 <LL_ADC_IsEnabled>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf0c      	ite	eq
 8001fae:	2301      	moveq	r3, #1
 8001fb0:	2300      	movne	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	e008      	b.n	8001fc8 <HAL_ADC_Init+0x14c>
 8001fb6:	4848      	ldr	r0, [pc, #288]	@ (80020d8 <HAL_ADC_Init+0x25c>)
 8001fb8:	f7ff ff26 	bl	8001e08 <LL_ADC_IsEnabled>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d021      	beq.n	8002010 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a44      	ldr	r2, [pc, #272]	@ (80020e4 <HAL_ADC_Init+0x268>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x15e>
 8001fd6:	4a44      	ldr	r2, [pc, #272]	@ (80020e8 <HAL_ADC_Init+0x26c>)
 8001fd8:	e000      	b.n	8001fdc <HAL_ADC_Init+0x160>
 8001fda:	4a44      	ldr	r2, [pc, #272]	@ (80020ec <HAL_ADC_Init+0x270>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f7ff fc70 	bl	80018c8 <LL_ADC_SetCommonClock>
 8001fe8:	e012      	b.n	8002010 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff fc9b 	bl	8001930 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80020ec <HAL_ADC_Init+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800200a:	4938      	ldr	r1, [pc, #224]	@ (80020ec <HAL_ADC_Init+0x270>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <HAL_ADC_Init+0x25c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d010      	beq.n	800203c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002020:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002026:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800202c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002034:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002036:	4313      	orrs	r3, r2
 8002038:	623b      	str	r3, [r7, #32]
 800203a:	e030      	b.n	800209e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7f1b      	ldrb	r3, [r3, #28]
 8002040:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002048:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002050:	2a00      	cmp	r2, #0
 8002052:	d002      	beq.n	800205a <HAL_ADC_Init+0x1de>
 8002054:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002058:	e000      	b.n	800205c <HAL_ADC_Init+0x1e0>
 800205a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800205c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002062:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da04      	bge.n	8002076 <HAL_ADC_Init+0x1fa>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002074:	e001      	b.n	800207a <HAL_ADC_Init+0x1fe>
 8002076:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800207a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4918      	ldr	r1, [pc, #96]	@ (80020e4 <HAL_ADC_Init+0x268>)
 8002082:	428b      	cmp	r3, r1
 8002084:	d103      	bne.n	800208e <HAL_ADC_Init+0x212>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800208c:	e003      	b.n	8002096 <HAL_ADC_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002094:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002096:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002098:	6a3a      	ldr	r2, [r7, #32]
 800209a:	4313      	orrs	r3, r2
 800209c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d12f      	bne.n	8002108 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_ADC_Init+0x25c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	3b01      	subs	r3, #1
 80020b8:	045b      	lsls	r3, r3, #17
 80020ba:	6a3a      	ldr	r2, [r7, #32]
 80020bc:	4313      	orrs	r3, r2
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	e022      	b.n	8002108 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d111      	bne.n	80020f0 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	e018      	b.n	8002108 <HAL_ADC_Init+0x28c>
 80020d6:	bf00      	nop
 80020d8:	46021000 	.word	0x46021000
 80020dc:	20000004 	.word	0x20000004
 80020e0:	053e2d63 	.word	0x053e2d63
 80020e4:	42028000 	.word	0x42028000
 80020e8:	42028308 	.word	0x42028308
 80020ec:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a92      	ldr	r2, [pc, #584]	@ (8002358 <HAL_ADC_Init+0x4dc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d018      	beq.n	8002144 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002126:	4313      	orrs	r3, r2
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	4313      	orrs	r3, r2
 800212c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b89      	ldr	r3, [pc, #548]	@ (800235c <HAL_ADC_Init+0x4e0>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	6a39      	ldr	r1, [r7, #32]
 800213e:	430b      	orrs	r3, r1
 8002140:	60d3      	str	r3, [r2, #12]
 8002142:	e031      	b.n	80021a8 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002148:	2b00      	cmp	r3, #0
 800214a:	d009      	beq.n	8002160 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002158:	4313      	orrs	r3, r2
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	4313      	orrs	r3, r2
 800215e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	4b7e      	ldr	r3, [pc, #504]	@ (8002360 <HAL_ADC_Init+0x4e4>)
 8002168:	4013      	ands	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	6a39      	ldr	r1, [r7, #32]
 8002170:	430b      	orrs	r3, r1
 8002172:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002358 <HAL_ADC_Init+0x4dc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	f000 8093 	beq.w	80022da <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fe38 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 80021be:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fe45 	bl	8001e54 <LL_ADC_INJ_IsConversionOngoing>
 80021ca:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d161      	bne.n	8002296 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d15e      	bne.n	8002296 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7f1b      	ldrb	r3, [r3, #28]
 80021dc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4960      	ldr	r1, [pc, #384]	@ (8002364 <HAL_ADC_Init+0x4e8>)
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d102      	bne.n	80021ee <HAL_ADC_Init+0x372>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Init+0x378>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f2:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	6a39      	ldr	r1, [r7, #32]
 800220c:	430b      	orrs	r3, r1
 800220e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7ff fc2c 	bl	8001a80 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800222e:	2b01      	cmp	r3, #1
 8002230:	d11e      	bne.n	8002270 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	4b4a      	ldr	r3, [pc, #296]	@ (8002368 <HAL_ADC_Init+0x4ec>)
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002246:	0411      	lsls	r1, r2, #16
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002252:	4311      	orrs	r1, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800225e:	0892      	lsrs	r2, r2, #2
 8002260:	430a      	orrs	r2, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	611a      	str	r2, [r3, #16]
 800226e:	e007      	b.n	8002280 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10c      	bne.n	80022b8 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	f023 010f 	bic.w	r1, r3, #15
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	1e5a      	subs	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b6:	e007      	b.n	80022c8 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 020f 	bic.w	r2, r2, #15
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022cc:	f023 0303 	bic.w	r3, r3, #3
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80022d8:	e092      	b.n	8002400 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d111      	bne.n	8002308 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80022ec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80022f2:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80022f8:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_ADC_Init+0x4f0>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	69f9      	ldr	r1, [r7, #28]
 8002318:	430b      	orrs	r3, r1
 800231a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	461a      	mov	r2, r3
 8002326:	2100      	movs	r1, #0
 8002328:	f7ff fbcd 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	461a      	mov	r2, r3
 8002336:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800233a:	f7ff fbc4 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d114      	bne.n	8002370 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f062 020f 	orn	r2, r2, #15
 8002354:	629a      	str	r2, [r3, #40]	@ 0x28
 8002356:	e024      	b.n	80023a2 <HAL_ADC_Init+0x526>
 8002358:	46021000 	.word	0x46021000
 800235c:	fff0c013 	.word	0xfff0c013
 8002360:	ffde800d 	.word	0xffde800d
 8002364:	42028000 	.word	0x42028000
 8002368:	fc00f81e 	.word	0xfc00f81e
 800236c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002378:	d113      	bne.n	80023a2 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f003 031c 	and.w	r3, r3, #28
 800238c:	f06f 020f 	mvn.w	r2, #15
 8002390:	fa02 f103 	lsl.w	r1, r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	4b18      	ldr	r3, [pc, #96]	@ (800240c <HAL_ADC_Init+0x590>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10b      	bne.n	80023ca <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023bc:	f023 0303 	bic.w	r3, r3, #3
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023c8:	e01a      	b.n	8002400 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023ce:	f023 0312 	bic.w	r3, r3, #18
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023ec:	e008      	b.n	8002400 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002404:	4618      	mov	r0, r3
 8002406:	3728      	adds	r7, #40	@ 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	833ffff3 	.word	0x833ffff3

08002410 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0bc      	sub	sp, #240	@ 0xf0
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4aa8      	ldr	r2, [pc, #672]	@ (80026cc <HAL_ADC_ConfigChannel+0x2bc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d103      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800243c:	2b01      	cmp	r3, #1
 800243e:	d102      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x36>
 8002440:	2302      	movs	r3, #2
 8002442:	f000 be6d 	b.w	8003120 <HAL_ADC_ConfigChannel+0xd10>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fceb 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 864d 	bne.w	80030fa <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a99      	ldr	r2, [pc, #612]	@ (80026cc <HAL_ADC_ConfigChannel+0x2bc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	f000 83ea 	beq.w	8002c40 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d108      	bne.n	800248a <HAL_ADC_ConfigChannel+0x7a>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2201      	movs	r2, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	e01d      	b.n	80024c6 <HAL_ADC_ConfigChannel+0xb6>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 800249e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 80024a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e004      	b.n	80024bc <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80024b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2201      	movs	r2, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	69d1      	ldr	r1, [r2, #28]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f7ff fb0f 	bl	8001b04 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fc9f 	bl	8001e2e <LL_ADC_REG_IsConversionOngoing>
 80024f0:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fcab 	bl	8001e54 <LL_ADC_INJ_IsConversionOngoing>
 80024fe:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 81ed 	bne.w	80028e6 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800250c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 81e8 	bne.w	80028e6 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff fb9a 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b04      	cmp	r3, #4
 8002548:	d046      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800255a:	f7ff fa09 	bl	8001970 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	461a      	mov	r2, r3
 800256c:	f7ff fa37 	bl	80019de <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7e9b      	ldrb	r3, [r3, #26]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d11e      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <HAL_ADC_ConfigChannel+0x17e>
 8002588:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800258c:	e000      	b.n	8002590 <HAL_ADC_ConfigChannel+0x180>
 800258e:	2300      	movs	r3, #0
 8002590:	461a      	mov	r2, r3
 8002592:	f7ff fa5a 	bl	8001a4a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d102      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x19c>
 80025a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80025aa:	e000      	b.n	80025ae <HAL_ADC_ConfigChannel+0x19e>
 80025ac:	2300      	movs	r3, #0
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7ff fa30 	bl	8001a14 <LL_ADC_SetOffsetSignedSaturation>
 80025b4:	e197      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2200      	movs	r2, #0
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7ff fa42 	bl	8001a4a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2200      	movs	r2, #0
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7ff fa1f 	bl	8001a14 <LL_ADC_SetOffsetSignedSaturation>
 80025d6:	e186      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f9e7 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1f4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f9dc 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	e01e      	b.n	8002642 <HAL_ADC_ConfigChannel+0x232>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f9d1 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 800262a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_ADC_ConfigChannel+0x24a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	e018      	b.n	800268c <HAL_ADC_ConfigChannel+0x27c>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800266e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002676:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268c:	429a      	cmp	r2, r3
 800268e:	d107      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2300      	movs	r3, #0
 800269a:	2100      	movs	r1, #0
 800269c:	f7ff f968 	bl	8001970 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f983 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x2c0>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f978 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	e020      	b.n	800270e <HAL_ADC_ConfigChannel+0x2fe>
 80026cc:	46021000 	.word	0x46021000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f96b 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e004      	b.n	800270c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002702:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x316>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	e018      	b.n	8002758 <HAL_ADC_ConfigChannel+0x348>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800273a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e004      	b.n	8002758 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800274e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	2101      	movs	r1, #1
 8002768:	f7ff f902 	bl	8001970 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2102      	movs	r1, #2
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f91d 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x388>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2102      	movs	r1, #2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f912 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	e01e      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x3c6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2102      	movs	r1, #2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f907 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80027b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80027be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e004      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80027ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x3de>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	e018      	b.n	8002820 <HAL_ADC_ConfigChannel+0x410>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002802:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800280a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2300      	movs	r3, #0
 800282e:	2102      	movs	r1, #2
 8002830:	f7ff f89e 	bl	8001970 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2103      	movs	r1, #3
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f8b9 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x450>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2103      	movs	r1, #3
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f8ae 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	e01a      	b.n	8002896 <HAL_ADC_ConfigChannel+0x486>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2103      	movs	r1, #3
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f8a3 	bl	80019b2 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800287a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800287e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002886:	2320      	movs	r3, #32
 8002888:	e004      	b.n	8002894 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 800288a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x49e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	e011      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x4c2>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028be:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80028c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e003      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80028ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d107      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	2103      	movs	r1, #3
 80028e2:	f7ff f845 	bl	8001970 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fa8c 	bl	8001e08 <LL_ADC_IsEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 840e 	bne.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	461a      	mov	r2, r3
 8002906:	f7ff fa0d 	bl	8001d24 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002912:	f040 80d6 	bne.w	8002ac2 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_ADC_ConfigChannel+0x52a>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	3301      	adds	r3, #1
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2b09      	cmp	r3, #9
 8002930:	bf94      	ite	ls
 8002932:	2301      	movls	r3, #1
 8002934:	2300      	movhi	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e019      	b.n	800296e <HAL_ADC_ConfigChannel+0x55e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002948:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800294a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800294c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e003      	b.n	800295e <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2b09      	cmp	r3, #9
 8002966:	bf94      	ite	ls
 8002968:	2301      	movls	r3, #1
 800296a:	2300      	movhi	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d04d      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x5fe>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_ADC_ConfigChannel+0x57e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	3301      	adds	r3, #1
 8002986:	069b      	lsls	r3, r3, #26
 8002988:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800298c:	e015      	b.n	80029ba <HAL_ADC_ConfigChannel+0x5aa>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800299c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80029aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	069b      	lsls	r3, r3, #26
 80029b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_ADC_ConfigChannel+0x5ca>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	e017      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x5fa>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e003      	b.n	80029fe <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 80029f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	e04e      	b.n	8002aac <HAL_ADC_ConfigChannel+0x69c>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x61a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	3301      	adds	r3, #1
 8002a22:	069b      	lsls	r3, r3, #26
 8002a24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a28:	e015      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x646>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002a42:	2320      	movs	r3, #32
 8002a44:	e003      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8002a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	069b      	lsls	r3, r3, #26
 8002a52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x666>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	e017      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x696>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002aac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002abe:	f7ff f8cd 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f280 8324 	bge.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a99      	ldr	r2, [pc, #612]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x6ca>
 8002ad6:	4b99      	ldr	r3, [pc, #612]	@ (8002d3c <HAL_ADC_ConfigChannel+0x92c>)
 8002ad8:	e000      	b.n	8002adc <HAL_ADC_ConfigChannel+0x6cc>
 8002ada:	4b99      	ldr	r3, [pc, #612]	@ (8002d40 <HAL_ADC_ConfigChannel+0x930>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe ff19 	bl	8001914 <LL_ADC_GetCommonPathInternalCh>
 8002ae2:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a93      	ldr	r2, [pc, #588]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d109      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x6f4>
 8002af0:	4891      	ldr	r0, [pc, #580]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002af2:	f7ff f989 	bl	8001e08 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e008      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x706>
 8002b04:	488f      	ldr	r0, [pc, #572]	@ (8002d44 <HAL_ADC_ConfigChannel+0x934>)
 8002b06:	f7ff f97f 	bl	8001e08 <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8088 	beq.w	8002c2c <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a89      	ldr	r2, [pc, #548]	@ (8002d48 <HAL_ADC_ConfigChannel+0x938>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d132      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d12c      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a80      	ldr	r2, [pc, #512]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d005      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x738>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a80      	ldr	r2, [pc, #512]	@ (8002d44 <HAL_ADC_ConfigChannel+0x934>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	f040 82e3 	bne.w	800310e <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a7a      	ldr	r2, [pc, #488]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x746>
 8002b52:	4a7a      	ldr	r2, [pc, #488]	@ (8002d3c <HAL_ADC_ConfigChannel+0x92c>)
 8002b54:	e000      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x748>
 8002b56:	4a7a      	ldr	r2, [pc, #488]	@ (8002d40 <HAL_ADC_ConfigChannel+0x930>)
 8002b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7fe fec3 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b68:	4b78      	ldr	r3, [pc, #480]	@ (8002d4c <HAL_ADC_ConfigChannel+0x93c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	4a78      	ldr	r2, [pc, #480]	@ (8002d50 <HAL_ADC_ConfigChannel+0x940>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	3301      	adds	r3, #1
 8002b78:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002b7a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002b7c:	e002      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f9      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b8a:	e2c0      	b.n	800310e <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a70      	ldr	r2, [pc, #448]	@ (8002d54 <HAL_ADC_ConfigChannel+0x944>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d121      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11b      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a64      	ldr	r2, [pc, #400]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d005      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x7a8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a64      	ldr	r2, [pc, #400]	@ (8002d44 <HAL_ADC_ConfigChannel+0x934>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f040 82ad 	bne.w	8003112 <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x7b6>
 8002bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8002d3c <HAL_ADC_ConfigChannel+0x92c>)
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x7b8>
 8002bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d40 <HAL_ADC_ConfigChannel+0x930>)
 8002bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f7fe fe8b 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd8:	e29b      	b.n	8003112 <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5e      	ldr	r2, [pc, #376]	@ (8002d58 <HAL_ADC_ConfigChannel+0x948>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	f040 8297 	bne.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 8290 	bne.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d005      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x7fa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a50      	ldr	r2, [pc, #320]	@ (8002d44 <HAL_ADC_ConfigChannel+0x934>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	f040 8285 	bne.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d38 <HAL_ADC_ConfigChannel+0x928>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x808>
 8002c14:	4a49      	ldr	r2, [pc, #292]	@ (8002d3c <HAL_ADC_ConfigChannel+0x92c>)
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x80a>
 8002c18:	4a49      	ldr	r2, [pc, #292]	@ (8002d40 <HAL_ADC_ConfigChannel+0x930>)
 8002c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f7fe fe62 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
 8002c2a:	e273      	b.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8002c3e:	e269      	b.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f000 8191 	beq.w	8002f74 <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c5a:	d004      	beq.n	8002c66 <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002c60:	4a3e      	ldr	r2, [pc, #248]	@ (8002d5c <HAL_ADC_ConfigChannel+0x94c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d107      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe ffa8 	bl	8001bc4 <LL_ADC_REG_SetSequencerChAdd>
 8002c74:	e0b0      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	210f      	movs	r1, #15
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x896>
 8002c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	e011      	b.n	8002cca <HAL_ADC_ConfigChannel+0x8ba>
 8002ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 8002cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	6839      	ldr	r1, [r7, #0]
 8002ccc:	6849      	ldr	r1, [r1, #4]
 8002cce:	f001 011f 	and.w	r1, r1, #31
 8002cd2:	408b      	lsls	r3, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d875      	bhi.n	8002dd8 <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002cec:	f7fe fdde 	bl	80018ac <HAL_GetREVID>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf6:	d866      	bhi.n	8002dc6 <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8002cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002cfc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x90a>
 8002d04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2b13      	cmp	r3, #19
 8002d10:	bf8c      	ite	hi
 8002d12:	2301      	movhi	r3, #1
 8002d14:	2300      	movls	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e02b      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x962>
 8002d1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d1e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	61bb      	str	r3, [r7, #24]
  return result;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e018      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x958>
 8002d36:	bf00      	nop
 8002d38:	42028000 	.word	0x42028000
 8002d3c:	42028308 	.word	0x42028308
 8002d40:	46021308 	.word	0x46021308
 8002d44:	46021000 	.word	0x46021000
 8002d48:	ce080000 	.word	0xce080000
 8002d4c:	20000004 	.word	0x20000004
 8002d50:	053e2d63 	.word	0x053e2d63
 8002d54:	ca040000 	.word	0xca040000
 8002d58:	80000001 	.word	0x80000001
 8002d5c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b13      	cmp	r3, #19
 8002d6a:	bf8c      	ite	hi
 8002d6c:	2301      	movhi	r3, #1
 8002d6e:	2300      	movls	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d027      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8002d76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x986>
 8002d82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	3b09      	subs	r3, #9
 8002d8e:	2201      	movs	r2, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	e015      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x9b2>
 8002d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d9a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	60fb      	str	r3, [r7, #12]
  return result;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3b09      	subs	r3, #9
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7fe fe96 	bl	8001b04 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002de6:	f7fe ff39 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f280 8190 	bge.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a97      	ldr	r2, [pc, #604]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x9f2>
 8002dfe:	4b97      	ldr	r3, [pc, #604]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002e00:	e000      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x9f4>
 8002e02:	4b97      	ldr	r3, [pc, #604]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fd85 	bl	8001914 <LL_ADC_GetCommonPathInternalCh>
 8002e0a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a94      	ldr	r2, [pc, #592]	@ (8003064 <HAL_ADC_ConfigChannel+0xc54>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d126      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d120      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a8b      	ldr	r2, [pc, #556]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0xa22>
 8002e2e:	4a8b      	ldr	r2, [pc, #556]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002e30:	e000      	b.n	8002e34 <HAL_ADC_ConfigChannel+0xa24>
 8002e32:	4a8b      	ldr	r2, [pc, #556]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8002e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7fe fd55 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e44:	4b88      	ldr	r3, [pc, #544]	@ (8003068 <HAL_ADC_ConfigChannel+0xc58>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	4a88      	ldr	r2, [pc, #544]	@ (800306c <HAL_ADC_ConfigChannel+0xc5c>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002e56:	e002      	b.n	8002e5e <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002e64:	e067      	b.n	8002f36 <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	@ (8003070 <HAL_ADC_ConfigChannel+0xc60>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d116      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d110      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a75      	ldr	r2, [pc, #468]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0xa7a>
 8002e86:	4a75      	ldr	r2, [pc, #468]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002e88:	e000      	b.n	8002e8c <HAL_ADC_ConfigChannel+0xa7c>
 8002e8a:	4a75      	ldr	r2, [pc, #468]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8002e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f7fe fd29 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
 8002e9c:	e04b      	b.n	8002f36 <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a74      	ldr	r2, [pc, #464]	@ (8003074 <HAL_ADC_ConfigChannel+0xc64>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d116      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d110      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a67      	ldr	r2, [pc, #412]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0xab2>
 8002ebe:	4a67      	ldr	r2, [pc, #412]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0xab4>
 8002ec2:	4a67      	ldr	r2, [pc, #412]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f7fe fd0d 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
 8002ed4:	e02f      	b.n	8002f36 <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a67      	ldr	r2, [pc, #412]	@ (8003078 <HAL_ADC_ConfigChannel+0xc68>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d12a      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d124      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a62      	ldr	r2, [pc, #392]	@ (800307c <HAL_ADC_ConfigChannel+0xc6c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d11f      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a57      	ldr	r2, [pc, #348]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0xaf4>
 8002f00:	4a56      	ldr	r2, [pc, #344]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002f02:	e000      	b.n	8002f06 <HAL_ADC_ConfigChannel+0xaf6>
 8002f04:	4a56      	ldr	r2, [pc, #344]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8002f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7fe fcec 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002f16:	f7fe fcc9 	bl	80018ac <HAL_GetREVID>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f20:	d809      	bhi.n	8002f36 <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002f36:	f7fe fcb9 	bl	80018ac <HAL_GetREVID>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f40:	f040 80e8 	bne.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a4d      	ldr	r2, [pc, #308]	@ (8003080 <HAL_ADC_ConfigChannel+0xc70>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f040 80e2 	bne.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 80db 	bne.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002f72:	e0cf      	b.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002f82:	4a40      	ldr	r2, [pc, #256]	@ (8003084 <HAL_ADC_ConfigChannel+0xc74>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d106      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe fe4a 	bl	8001c2a <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f280 80ba 	bge.w	8003114 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0xb9e>
 8002faa:	4b2c      	ldr	r3, [pc, #176]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002fac:	e000      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0xba0>
 8002fae:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe fcaf 	bl	8001914 <LL_ADC_GetCommonPathInternalCh>
 8002fb6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <HAL_ADC_ConfigChannel+0xc78>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d110      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0xbc2>
 8002fce:	4a23      	ldr	r2, [pc, #140]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0xbc4>
 8002fd2:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f7fe fc85 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
 8002fe4:	e06d      	b.n	80030c2 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a28      	ldr	r2, [pc, #160]	@ (800308c <HAL_ADC_ConfigChannel+0xc7c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d110      	bne.n	8003012 <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0xbee>
 8002ffa:	4a18      	ldr	r2, [pc, #96]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8002ffc:	e000      	b.n	8003000 <HAL_ADC_ConfigChannel+0xbf0>
 8002ffe:	4a18      	ldr	r2, [pc, #96]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 8003000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003004:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fe fc6f 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
 8003010:	e057      	b.n	80030c2 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a17      	ldr	r2, [pc, #92]	@ (8003074 <HAL_ADC_ConfigChannel+0xc64>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d110      	bne.n	800303e <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0d      	ldr	r2, [pc, #52]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0xc1a>
 8003026:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8003028:	e000      	b.n	800302c <HAL_ADC_ConfigChannel+0xc1c>
 800302a:	4a0d      	ldr	r2, [pc, #52]	@ (8003060 <HAL_ADC_ConfigChannel+0xc50>)
 800302c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003030:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f7fe fc59 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
 800303c:	e041      	b.n	80030c2 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a0d      	ldr	r2, [pc, #52]	@ (8003078 <HAL_ADC_ConfigChannel+0xc68>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d13c      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a02      	ldr	r2, [pc, #8]	@ (8003058 <HAL_ADC_ConfigChannel+0xc48>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d11e      	bne.n	8003090 <HAL_ADC_ConfigChannel+0xc80>
 8003052:	4a02      	ldr	r2, [pc, #8]	@ (800305c <HAL_ADC_ConfigChannel+0xc4c>)
 8003054:	e01d      	b.n	8003092 <HAL_ADC_ConfigChannel+0xc82>
 8003056:	bf00      	nop
 8003058:	42028000 	.word	0x42028000
 800305c:	42028308 	.word	0x42028308
 8003060:	46021308 	.word	0x46021308
 8003064:	b6002000 	.word	0xb6002000
 8003068:	20000004 	.word	0x20000004
 800306c:	053e2d63 	.word	0x053e2d63
 8003070:	ba004000 	.word	0xba004000
 8003074:	80000001 	.word	0x80000001
 8003078:	b2001000 	.word	0xb2001000
 800307c:	46021000 	.word	0x46021000
 8003080:	d7200000 	.word	0xd7200000
 8003084:	80000010 	.word	0x80000010
 8003088:	ce080000 	.word	0xce080000
 800308c:	ca040000 	.word	0xca040000
 8003090:	4a25      	ldr	r2, [pc, #148]	@ (8003128 <HAL_ADC_ConfigChannel+0xd18>)
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003096:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7fe fc26 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80030a2:	f7fe fc03 	bl	80018ac <HAL_GetREVID>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ac:	d809      	bhi.n	80030c2 <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80030c2:	f7fe fbf3 	bl	80018ac <HAL_GetREVID>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030cc:	d122      	bne.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a16      	ldr	r2, [pc, #88]	@ (800312c <HAL_ADC_ConfigChannel+0xd1c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d11d      	bne.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d117      	bne.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80030f8:	e00c      	b.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030fe:	f043 0220 	orr.w	r2, r3, #32
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 800310c:	e002      	b.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003112:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 800311c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8003120:	4618      	mov	r0, r3
 8003122:	37f0      	adds	r7, #240	@ 0xf0
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	46021308 	.word	0x46021308
 800312c:	d7200000 	.word	0xd7200000

08003130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800314c:	4013      	ands	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800315c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003162:	4a04      	ldr	r2, [pc, #16]	@ (8003174 <__NVIC_SetPriorityGrouping+0x44>)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	60d3      	str	r3, [r2, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800317c:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <__NVIC_GetPriorityGrouping+0x18>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 0307 	and.w	r3, r3, #7
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db0b      	blt.n	80031be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	4907      	ldr	r1, [pc, #28]	@ (80031cc <__NVIC_EnableIRQ+0x38>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2001      	movs	r0, #1
 80031b6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	@ (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	@ (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	@ 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	@ 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ff4c 	bl	8003130 <__NVIC_SetPriorityGrouping>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032ae:	f7ff ff63 	bl	8003178 <__NVIC_GetPriorityGrouping>
 80032b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f7ff ffb3 	bl	8003224 <NVIC_EncodePriority>
 80032be:	4602      	mov	r2, r0
 80032c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff82 	bl	80031d0 <__NVIC_SetPriority>
}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff56 	bl	8003194 <__NVIC_EnableIRQ>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d844      	bhi.n	8003388 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003327 	.word	0x08003327
 8003308:	08003345 	.word	0x08003345
 800330c:	08003367 	.word	0x08003367
 8003310:	08003389 	.word	0x08003389
 8003314:	08003319 	.word	0x08003319
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003318:	4b1f      	ldr	r3, [pc, #124]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1e      	ldr	r2, [pc, #120]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	6013      	str	r3, [r2, #0]
      break;
 8003324:	e031      	b.n	800338a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003326:	4b1c      	ldr	r3, [pc, #112]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1b      	ldr	r2, [pc, #108]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003338:	4a18      	ldr	r2, [pc, #96]	@ (800339c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800333a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800333e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003342:	e022      	b.n	800338a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003350:	4b12      	ldr	r3, [pc, #72]	@ (800339c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003356:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800335a:	4a10      	ldr	r2, [pc, #64]	@ (800339c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800335c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003364:	e011      	b.n	800338a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003366:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a0b      	ldr	r2, [pc, #44]	@ (8003398 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003372:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003378:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800337c:	4a07      	ldr	r2, [pc, #28]	@ (800339c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800337e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003386:	e000      	b.n	800338a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003388:	bf00      	nop
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e010 	.word	0xe000e010
 800339c:	46020c00 	.word	0x46020c00

080033a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e054      	b.n	800345c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7f5b      	ldrb	r3, [r3, #29]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fb5c 	bl	8000a80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	791b      	ldrb	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <HAL_CRC_Init+0xc4>)
 80033dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0218 	bic.w	r2, r2, #24
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	e00c      	b.n	800340a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f834 	bl	8003468 <HAL_CRCEx_Polynomial_Set>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e028      	b.n	800345c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	795b      	ldrb	r3, [r3, #5]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	611a      	str	r2, [r3, #16]
 800341c:	e004      	b.n	8003428 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6912      	ldr	r2, [r2, #16]
 8003426:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	04c11db7 	.word	0x04c11db7

08003468 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003478:	231f      	movs	r3, #31
 800347a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
 800348a:	e063      	b.n	8003554 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800348c:	bf00      	nop
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	613a      	str	r2, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <HAL_CRCEx_Polynomial_Set+0x44>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b18      	cmp	r3, #24
 80034b0:	d846      	bhi.n	8003540 <HAL_CRCEx_Polynomial_Set+0xd8>
 80034b2:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	08003547 	.word	0x08003547
 80034bc:	08003541 	.word	0x08003541
 80034c0:	08003541 	.word	0x08003541
 80034c4:	08003541 	.word	0x08003541
 80034c8:	08003541 	.word	0x08003541
 80034cc:	08003541 	.word	0x08003541
 80034d0:	08003541 	.word	0x08003541
 80034d4:	08003541 	.word	0x08003541
 80034d8:	08003535 	.word	0x08003535
 80034dc:	08003541 	.word	0x08003541
 80034e0:	08003541 	.word	0x08003541
 80034e4:	08003541 	.word	0x08003541
 80034e8:	08003541 	.word	0x08003541
 80034ec:	08003541 	.word	0x08003541
 80034f0:	08003541 	.word	0x08003541
 80034f4:	08003541 	.word	0x08003541
 80034f8:	08003529 	.word	0x08003529
 80034fc:	08003541 	.word	0x08003541
 8003500:	08003541 	.word	0x08003541
 8003504:	08003541 	.word	0x08003541
 8003508:	08003541 	.word	0x08003541
 800350c:	08003541 	.word	0x08003541
 8003510:	08003541 	.word	0x08003541
 8003514:	08003541 	.word	0x08003541
 8003518:	0800351d 	.word	0x0800351d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b06      	cmp	r3, #6
 8003520:	d913      	bls.n	800354a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003526:	e010      	b.n	800354a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b07      	cmp	r3, #7
 800352c:	d90f      	bls.n	800354e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003532:	e00c      	b.n	800354e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d90b      	bls.n	8003552 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800353e:	e008      	b.n	8003552 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
        break;
 8003544:	e006      	b.n	8003554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003546:	bf00      	nop
 8003548:	e004      	b.n	8003554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003552:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10d      	bne.n	8003576 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 0118 	bic.w	r1, r3, #24
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
}
 8003578:	4618      	mov	r0, r3
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7fe f95e 	bl	800184c <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0db      	b.n	8003754 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	@ (800375c <HAL_DMA_Init+0x1d8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f000 809f 	beq.w	80036e6 <HAL_DMA_Init+0x162>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6c      	ldr	r2, [pc, #432]	@ (8003760 <HAL_DMA_Init+0x1dc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	f000 8099 	beq.w	80036e6 <HAL_DMA_Init+0x162>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003764 <HAL_DMA_Init+0x1e0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f000 8093 	beq.w	80036e6 <HAL_DMA_Init+0x162>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a68      	ldr	r2, [pc, #416]	@ (8003768 <HAL_DMA_Init+0x1e4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f000 808d 	beq.w	80036e6 <HAL_DMA_Init+0x162>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a66      	ldr	r2, [pc, #408]	@ (800376c <HAL_DMA_Init+0x1e8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f000 8087 	beq.w	80036e6 <HAL_DMA_Init+0x162>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a64      	ldr	r2, [pc, #400]	@ (8003770 <HAL_DMA_Init+0x1ec>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f000 8081 	beq.w	80036e6 <HAL_DMA_Init+0x162>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a62      	ldr	r2, [pc, #392]	@ (8003774 <HAL_DMA_Init+0x1f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d07b      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a61      	ldr	r2, [pc, #388]	@ (8003778 <HAL_DMA_Init+0x1f4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d076      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5f      	ldr	r2, [pc, #380]	@ (800377c <HAL_DMA_Init+0x1f8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d071      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5e      	ldr	r2, [pc, #376]	@ (8003780 <HAL_DMA_Init+0x1fc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d06c      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5c      	ldr	r2, [pc, #368]	@ (8003784 <HAL_DMA_Init+0x200>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d067      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a5b      	ldr	r2, [pc, #364]	@ (8003788 <HAL_DMA_Init+0x204>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d062      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a59      	ldr	r2, [pc, #356]	@ (800378c <HAL_DMA_Init+0x208>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d05d      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <HAL_DMA_Init+0x20c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d058      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a56      	ldr	r2, [pc, #344]	@ (8003794 <HAL_DMA_Init+0x210>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d053      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a55      	ldr	r2, [pc, #340]	@ (8003798 <HAL_DMA_Init+0x214>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04e      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a53      	ldr	r2, [pc, #332]	@ (800379c <HAL_DMA_Init+0x218>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d049      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a52      	ldr	r2, [pc, #328]	@ (80037a0 <HAL_DMA_Init+0x21c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d044      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a50      	ldr	r2, [pc, #320]	@ (80037a4 <HAL_DMA_Init+0x220>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03f      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4f      	ldr	r2, [pc, #316]	@ (80037a8 <HAL_DMA_Init+0x224>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03a      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a4d      	ldr	r2, [pc, #308]	@ (80037ac <HAL_DMA_Init+0x228>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d035      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4c      	ldr	r2, [pc, #304]	@ (80037b0 <HAL_DMA_Init+0x22c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d030      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a4a      	ldr	r2, [pc, #296]	@ (80037b4 <HAL_DMA_Init+0x230>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02b      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a49      	ldr	r2, [pc, #292]	@ (80037b8 <HAL_DMA_Init+0x234>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d026      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a47      	ldr	r2, [pc, #284]	@ (80037bc <HAL_DMA_Init+0x238>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d021      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a46      	ldr	r2, [pc, #280]	@ (80037c0 <HAL_DMA_Init+0x23c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01c      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a44      	ldr	r2, [pc, #272]	@ (80037c4 <HAL_DMA_Init+0x240>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d017      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a43      	ldr	r2, [pc, #268]	@ (80037c8 <HAL_DMA_Init+0x244>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a41      	ldr	r2, [pc, #260]	@ (80037cc <HAL_DMA_Init+0x248>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00d      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a40      	ldr	r2, [pc, #256]	@ (80037d0 <HAL_DMA_Init+0x24c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d008      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a3e      	ldr	r2, [pc, #248]	@ (80037d4 <HAL_DMA_Init+0x250>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <HAL_DMA_Init+0x162>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a3d      	ldr	r2, [pc, #244]	@ (80037d8 <HAL_DMA_Init+0x254>)
 80036e4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0206 	orr.w	r2, r2, #6
 8003704:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003706:	e00f      	b.n	8003728 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003708:	f7fe f8a0 	bl	800184c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b05      	cmp	r3, #5
 8003714:	d908      	bls.n	8003728 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2210      	movs	r2, #16
 800371a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2203      	movs	r2, #3
 8003720:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e015      	b.n	8003754 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e8      	bne.n	8003708 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 faa8 	bl	8003c8c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40020050 	.word	0x40020050
 8003760:	50020050 	.word	0x50020050
 8003764:	400200d0 	.word	0x400200d0
 8003768:	500200d0 	.word	0x500200d0
 800376c:	40020150 	.word	0x40020150
 8003770:	50020150 	.word	0x50020150
 8003774:	400201d0 	.word	0x400201d0
 8003778:	500201d0 	.word	0x500201d0
 800377c:	40020250 	.word	0x40020250
 8003780:	50020250 	.word	0x50020250
 8003784:	400202d0 	.word	0x400202d0
 8003788:	500202d0 	.word	0x500202d0
 800378c:	40020350 	.word	0x40020350
 8003790:	50020350 	.word	0x50020350
 8003794:	400203d0 	.word	0x400203d0
 8003798:	500203d0 	.word	0x500203d0
 800379c:	40020450 	.word	0x40020450
 80037a0:	50020450 	.word	0x50020450
 80037a4:	400204d0 	.word	0x400204d0
 80037a8:	500204d0 	.word	0x500204d0
 80037ac:	40020550 	.word	0x40020550
 80037b0:	50020550 	.word	0x50020550
 80037b4:	400205d0 	.word	0x400205d0
 80037b8:	500205d0 	.word	0x500205d0
 80037bc:	40020650 	.word	0x40020650
 80037c0:	50020650 	.word	0x50020650
 80037c4:	400206d0 	.word	0x400206d0
 80037c8:	500206d0 	.word	0x500206d0
 80037cc:	40020750 	.word	0x40020750
 80037d0:	50020750 	.word	0x50020750
 80037d4:	400207d0 	.word	0x400207d0
 80037d8:	500207d0 	.word	0x500207d0

080037dc <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04f      	b.n	8003894 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_DMA_Start_IT+0x26>
 80037fe:	2302      	movs	r3, #2
 8003800:	e048      	b.n	8003894 <HAL_DMA_Start_IT+0xb8>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d136      	bne.n	8003884 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fa08 	bl	8003c40 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800383e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003856:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800386e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e007      	b.n	8003894 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	@ 0x40
 8003888:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e019      	b.n	80038e2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d004      	beq.n	80038c4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e00e      	b.n	80038e2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038da:	f043 0304 	orr.w	r3, r3, #4
 80038de:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80038fe:	f023 030f 	bic.w	r3, r3, #15
 8003902:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	3b50      	subs	r3, #80	@ 0x50
 800390e:	09db      	lsrs	r3, r3, #7
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2201      	movs	r2, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 813b 	beq.w	8003ba4 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d011      	beq.n	8003960 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003952:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800396a:	2b00      	cmp	r3, #0
 800396c:	d011      	beq.n	8003992 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003984:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	f043 0202 	orr.w	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d011      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039b6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	f043 0208 	orr.w	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a1a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04c      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d045      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a50:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d12e      	bne.n	8003abc <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a6c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0202 	orr.w	r2, r2, #2
 8003a7c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	2201      	movs	r2, #1
 8003a98:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d07a      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
        }

        return;
 8003aba:	e075      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2205      	movs	r2, #5
 8003ac0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d039      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d032      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d012      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d111      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	731a      	strb	r2, [r3, #12]
 8003b20:	e008      	b.n	8003b34 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003b3c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d025      	beq.n	8003baa <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0202 	orr.w	r2, r2, #2
 8003b6c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b86:	2201      	movs	r2, #1
 8003b88:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
 8003ba2:	e002      	b.n	8003baa <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003ba8:	bf00      	nop
    }
  }
}
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e02b      	b.n	8003c34 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003be4:	f023 030f 	bic.w	r3, r3, #15
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf2:	3b50      	subs	r3, #80	@ 0x50
 8003bf4:	09db      	lsrs	r3, r3, #7
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f003 0311 	and.w	r3, r3, #17
 8003c12:	2b11      	cmp	r3, #17
 8003c14:	d106      	bne.n	8003c24 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	e006      	b.n	8003c32 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	b291      	uxth	r1, r2
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003c6c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a53      	ldr	r2, [pc, #332]	@ (8003e18 <DMA_Init+0x18c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	f000 80a0 	beq.w	8003e12 <DMA_Init+0x186>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a51      	ldr	r2, [pc, #324]	@ (8003e1c <DMA_Init+0x190>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	f000 809a 	beq.w	8003e12 <DMA_Init+0x186>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4f      	ldr	r2, [pc, #316]	@ (8003e20 <DMA_Init+0x194>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	f000 8094 	beq.w	8003e12 <DMA_Init+0x186>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a4d      	ldr	r2, [pc, #308]	@ (8003e24 <DMA_Init+0x198>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	f000 808e 	beq.w	8003e12 <DMA_Init+0x186>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4b      	ldr	r2, [pc, #300]	@ (8003e28 <DMA_Init+0x19c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	f000 8088 	beq.w	8003e12 <DMA_Init+0x186>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a49      	ldr	r2, [pc, #292]	@ (8003e2c <DMA_Init+0x1a0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	f000 8082 	beq.w	8003e12 <DMA_Init+0x186>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a47      	ldr	r2, [pc, #284]	@ (8003e30 <DMA_Init+0x1a4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d07c      	beq.n	8003e12 <DMA_Init+0x186>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a45      	ldr	r2, [pc, #276]	@ (8003e34 <DMA_Init+0x1a8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d077      	beq.n	8003e12 <DMA_Init+0x186>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a44      	ldr	r2, [pc, #272]	@ (8003e38 <DMA_Init+0x1ac>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d072      	beq.n	8003e12 <DMA_Init+0x186>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a42      	ldr	r2, [pc, #264]	@ (8003e3c <DMA_Init+0x1b0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d06d      	beq.n	8003e12 <DMA_Init+0x186>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a41      	ldr	r2, [pc, #260]	@ (8003e40 <DMA_Init+0x1b4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d068      	beq.n	8003e12 <DMA_Init+0x186>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3f      	ldr	r2, [pc, #252]	@ (8003e44 <DMA_Init+0x1b8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d063      	beq.n	8003e12 <DMA_Init+0x186>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e48 <DMA_Init+0x1bc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d05e      	beq.n	8003e12 <DMA_Init+0x186>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a3c      	ldr	r2, [pc, #240]	@ (8003e4c <DMA_Init+0x1c0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d059      	beq.n	8003e12 <DMA_Init+0x186>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	@ (8003e50 <DMA_Init+0x1c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d054      	beq.n	8003e12 <DMA_Init+0x186>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a39      	ldr	r2, [pc, #228]	@ (8003e54 <DMA_Init+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04f      	beq.n	8003e12 <DMA_Init+0x186>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <DMA_Init+0x1cc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <DMA_Init+0x186>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a36      	ldr	r2, [pc, #216]	@ (8003e5c <DMA_Init+0x1d0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <DMA_Init+0x186>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a35      	ldr	r2, [pc, #212]	@ (8003e60 <DMA_Init+0x1d4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <DMA_Init+0x186>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a33      	ldr	r2, [pc, #204]	@ (8003e64 <DMA_Init+0x1d8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <DMA_Init+0x186>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a32      	ldr	r2, [pc, #200]	@ (8003e68 <DMA_Init+0x1dc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <DMA_Init+0x186>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a30      	ldr	r2, [pc, #192]	@ (8003e6c <DMA_Init+0x1e0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <DMA_Init+0x186>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e70 <DMA_Init+0x1e4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <DMA_Init+0x186>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003e74 <DMA_Init+0x1e8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <DMA_Init+0x186>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e78 <DMA_Init+0x1ec>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <DMA_Init+0x186>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e7c <DMA_Init+0x1f0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <DMA_Init+0x186>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a29      	ldr	r2, [pc, #164]	@ (8003e80 <DMA_Init+0x1f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <DMA_Init+0x186>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a27      	ldr	r2, [pc, #156]	@ (8003e84 <DMA_Init+0x1f8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <DMA_Init+0x186>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a26      	ldr	r2, [pc, #152]	@ (8003e88 <DMA_Init+0x1fc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <DMA_Init+0x186>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a24      	ldr	r2, [pc, #144]	@ (8003e8c <DMA_Init+0x200>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <DMA_Init+0x186>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a23      	ldr	r2, [pc, #140]	@ (8003e90 <DMA_Init+0x204>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <DMA_Init+0x186>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a21      	ldr	r2, [pc, #132]	@ (8003e94 <DMA_Init+0x208>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d142      	bne.n	8003e98 <DMA_Init+0x20c>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e041      	b.n	8003e9a <DMA_Init+0x20e>
 8003e16:	bf00      	nop
 8003e18:	40020050 	.word	0x40020050
 8003e1c:	50020050 	.word	0x50020050
 8003e20:	400200d0 	.word	0x400200d0
 8003e24:	500200d0 	.word	0x500200d0
 8003e28:	40020150 	.word	0x40020150
 8003e2c:	50020150 	.word	0x50020150
 8003e30:	400201d0 	.word	0x400201d0
 8003e34:	500201d0 	.word	0x500201d0
 8003e38:	40020250 	.word	0x40020250
 8003e3c:	50020250 	.word	0x50020250
 8003e40:	400202d0 	.word	0x400202d0
 8003e44:	500202d0 	.word	0x500202d0
 8003e48:	40020350 	.word	0x40020350
 8003e4c:	50020350 	.word	0x50020350
 8003e50:	400203d0 	.word	0x400203d0
 8003e54:	500203d0 	.word	0x500203d0
 8003e58:	40020450 	.word	0x40020450
 8003e5c:	50020450 	.word	0x50020450
 8003e60:	400204d0 	.word	0x400204d0
 8003e64:	500204d0 	.word	0x500204d0
 8003e68:	40020550 	.word	0x40020550
 8003e6c:	50020550 	.word	0x50020550
 8003e70:	400205d0 	.word	0x400205d0
 8003e74:	500205d0 	.word	0x500205d0
 8003e78:	40020650 	.word	0x40020650
 8003e7c:	50020650 	.word	0x50020650
 8003e80:	400206d0 	.word	0x400206d0
 8003e84:	500206d0 	.word	0x500206d0
 8003e88:	40020750 	.word	0x40020750
 8003e8c:	50020750 	.word	0x50020750
 8003e90:	400207d0 	.word	0x400207d0
 8003e94:	500207d0 	.word	0x500207d0
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	051b      	lsls	r3, r3, #20
 8003eaa:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003eae:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003ebc:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef6:	f040 80b0 	bne.w	800405a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a82      	ldr	r2, [pc, #520]	@ (8004108 <DMA_Init+0x47c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	f000 80a0 	beq.w	8004046 <DMA_Init+0x3ba>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a80      	ldr	r2, [pc, #512]	@ (800410c <DMA_Init+0x480>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	f000 809a 	beq.w	8004046 <DMA_Init+0x3ba>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7e      	ldr	r2, [pc, #504]	@ (8004110 <DMA_Init+0x484>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	f000 8094 	beq.w	8004046 <DMA_Init+0x3ba>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7c      	ldr	r2, [pc, #496]	@ (8004114 <DMA_Init+0x488>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	f000 808e 	beq.w	8004046 <DMA_Init+0x3ba>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7a      	ldr	r2, [pc, #488]	@ (8004118 <DMA_Init+0x48c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	f000 8088 	beq.w	8004046 <DMA_Init+0x3ba>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a78      	ldr	r2, [pc, #480]	@ (800411c <DMA_Init+0x490>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	f000 8082 	beq.w	8004046 <DMA_Init+0x3ba>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a76      	ldr	r2, [pc, #472]	@ (8004120 <DMA_Init+0x494>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d07c      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a74      	ldr	r2, [pc, #464]	@ (8004124 <DMA_Init+0x498>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d077      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a73      	ldr	r2, [pc, #460]	@ (8004128 <DMA_Init+0x49c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d072      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a71      	ldr	r2, [pc, #452]	@ (800412c <DMA_Init+0x4a0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d06d      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a70      	ldr	r2, [pc, #448]	@ (8004130 <DMA_Init+0x4a4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d068      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6e      	ldr	r2, [pc, #440]	@ (8004134 <DMA_Init+0x4a8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d063      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6d      	ldr	r2, [pc, #436]	@ (8004138 <DMA_Init+0x4ac>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d05e      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6b      	ldr	r2, [pc, #428]	@ (800413c <DMA_Init+0x4b0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d059      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6a      	ldr	r2, [pc, #424]	@ (8004140 <DMA_Init+0x4b4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d054      	beq.n	8004046 <DMA_Init+0x3ba>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a68      	ldr	r2, [pc, #416]	@ (8004144 <DMA_Init+0x4b8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04f      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a67      	ldr	r2, [pc, #412]	@ (8004148 <DMA_Init+0x4bc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a65      	ldr	r2, [pc, #404]	@ (800414c <DMA_Init+0x4c0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a64      	ldr	r2, [pc, #400]	@ (8004150 <DMA_Init+0x4c4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a62      	ldr	r2, [pc, #392]	@ (8004154 <DMA_Init+0x4c8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a61      	ldr	r2, [pc, #388]	@ (8004158 <DMA_Init+0x4cc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a5f      	ldr	r2, [pc, #380]	@ (800415c <DMA_Init+0x4d0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8004160 <DMA_Init+0x4d4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <DMA_Init+0x3ba>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a5c      	ldr	r2, [pc, #368]	@ (8004164 <DMA_Init+0x4d8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <DMA_Init+0x3ba>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8004168 <DMA_Init+0x4dc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <DMA_Init+0x3ba>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a59      	ldr	r2, [pc, #356]	@ (800416c <DMA_Init+0x4e0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <DMA_Init+0x3ba>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a58      	ldr	r2, [pc, #352]	@ (8004170 <DMA_Init+0x4e4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <DMA_Init+0x3ba>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a56      	ldr	r2, [pc, #344]	@ (8004174 <DMA_Init+0x4e8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <DMA_Init+0x3ba>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a55      	ldr	r2, [pc, #340]	@ (8004178 <DMA_Init+0x4ec>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <DMA_Init+0x3ba>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a53      	ldr	r2, [pc, #332]	@ (800417c <DMA_Init+0x4f0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <DMA_Init+0x3ba>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a52      	ldr	r2, [pc, #328]	@ (8004180 <DMA_Init+0x4f4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <DMA_Init+0x3ba>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a50      	ldr	r2, [pc, #320]	@ (8004184 <DMA_Init+0x4f8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <DMA_Init+0x3be>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <DMA_Init+0x3c0>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e008      	b.n	800406c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004062:	d103      	bne.n	800406c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800406a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004072:	4b45      	ldr	r3, [pc, #276]	@ (8004188 <DMA_Init+0x4fc>)
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	430b      	orrs	r3, r1
 800407e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2200      	movs	r2, #0
 8004086:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a36      	ldr	r2, [pc, #216]	@ (8004168 <DMA_Init+0x4dc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <DMA_Init+0x44c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a35      	ldr	r2, [pc, #212]	@ (800416c <DMA_Init+0x4e0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <DMA_Init+0x44c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <DMA_Init+0x4e4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <DMA_Init+0x44c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a32      	ldr	r2, [pc, #200]	@ (8004174 <DMA_Init+0x4e8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <DMA_Init+0x44c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <DMA_Init+0x4ec>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <DMA_Init+0x44c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2f      	ldr	r2, [pc, #188]	@ (800417c <DMA_Init+0x4f0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <DMA_Init+0x44c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <DMA_Init+0x4f4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <DMA_Init+0x44c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004184 <DMA_Init+0x4f8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <DMA_Init+0x450>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <DMA_Init+0x452>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40020050 	.word	0x40020050
 800410c:	50020050 	.word	0x50020050
 8004110:	400200d0 	.word	0x400200d0
 8004114:	500200d0 	.word	0x500200d0
 8004118:	40020150 	.word	0x40020150
 800411c:	50020150 	.word	0x50020150
 8004120:	400201d0 	.word	0x400201d0
 8004124:	500201d0 	.word	0x500201d0
 8004128:	40020250 	.word	0x40020250
 800412c:	50020250 	.word	0x50020250
 8004130:	400202d0 	.word	0x400202d0
 8004134:	500202d0 	.word	0x500202d0
 8004138:	40020350 	.word	0x40020350
 800413c:	50020350 	.word	0x50020350
 8004140:	400203d0 	.word	0x400203d0
 8004144:	500203d0 	.word	0x500203d0
 8004148:	40020450 	.word	0x40020450
 800414c:	50020450 	.word	0x50020450
 8004150:	400204d0 	.word	0x400204d0
 8004154:	500204d0 	.word	0x500204d0
 8004158:	40020550 	.word	0x40020550
 800415c:	50020550 	.word	0x50020550
 8004160:	400205d0 	.word	0x400205d0
 8004164:	500205d0 	.word	0x500205d0
 8004168:	40020650 	.word	0x40020650
 800416c:	50020650 	.word	0x50020650
 8004170:	400206d0 	.word	0x400206d0
 8004174:	500206d0 	.word	0x500206d0
 8004178:	40020750 	.word	0x40020750
 800417c:	50020750 	.word	0x50020750
 8004180:	400207d0 	.word	0x400207d0
 8004184:	500207d0 	.word	0x500207d0
 8004188:	3cc03180 	.word	0x3cc03180

0800418c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_DMAEx_List_Start_IT+0x16>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e082      	b.n	80042ac <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80041ac:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d005      	beq.n	80041cc <HAL_DMAEx_List_Start_IT+0x40>
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d16a      	bne.n	800429c <HAL_DMAEx_List_Start_IT+0x110>
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d067      	beq.n	800429c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d157      	bne.n	8004288 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_DMAEx_List_Start_IT+0x5a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e062      	b.n	80042ac <HAL_DMAEx_List_Start_IT+0x120>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fa:	2202      	movs	r2, #2
 80041fc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800421a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004232:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800424a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f107 010c 	add.w	r1, r7, #12
 8004256:	2200      	movs	r2, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f82b 	bl	80042b4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4619      	mov	r1, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	0c0b      	lsrs	r3, r1, #16
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800427c:	4013      	ands	r3, r2
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	430b      	orrs	r3, r1
 8004286:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e007      	b.n	80042ac <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2240      	movs	r2, #64	@ 0x40
 80042a0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <DMA_List_GetCLLRNodeInfo+0x58>)
 80042d6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00f      	beq.n	80042fe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80042e4:	e00b      	b.n	80042fe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a08      	ldr	r2, [pc, #32]	@ (8004310 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80042f0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2205      	movs	r2, #5
 80042fc:	601a      	str	r2, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	fe010000 	.word	0xfe010000
 8004310:	f8010000 	.word	0xf8010000

08004314 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	@ 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004326:	e1ba      	b.n	800469e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 81aa 	beq.w	8004698 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a55      	ldr	r2, [pc, #340]	@ (800449c <HAL_GPIO_Init+0x188>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d15d      	bne.n	8004408 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004352:	2201      	movs	r2, #1
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	4013      	ands	r3, r2
 8004360:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0201 	and.w	r2, r3, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	4313      	orrs	r3, r2
 8004374:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800437c:	4a48      	ldr	r2, [pc, #288]	@ (80044a0 <HAL_GPIO_Init+0x18c>)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004384:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004386:	4a46      	ldr	r2, [pc, #280]	@ (80044a0 <HAL_GPIO_Init+0x18c>)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	08da      	lsrs	r2, r3, #3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	3208      	adds	r2, #8
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	220f      	movs	r2, #15
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	220b      	movs	r2, #11
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	08da      	lsrs	r2, r3, #3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3208      	adds	r2, #8
 80043d2:	69f9      	ldr	r1, [r7, #28]
 80043d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	2202      	movs	r2, #2
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e067      	b.n	80044d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x104>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b12      	cmp	r3, #18
 8004416:	d145      	bne.n	80044a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	08da      	lsrs	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3208      	adds	r2, #8
 8004420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004424:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	220f      	movs	r2, #15
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	4013      	ands	r3, r2
 800443a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	4313      	orrs	r3, r2
 8004454:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3208      	adds	r2, #8
 800445e:	69f9      	ldr	r1, [r7, #28]
 8004460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	4013      	ands	r3, r2
 800447a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	4313      	orrs	r3, r2
 8004490:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e01e      	b.n	80044d8 <HAL_GPIO_Init+0x1c4>
 800449a:	bf00      	nop
 800449c:	46020000 	.word	0x46020000
 80044a0:	08032028 	.word	0x08032028
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d00b      	beq.n	80044f8 <HAL_GPIO_Init+0x1e4>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d007      	beq.n	80044f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ec:	2b11      	cmp	r3, #17
 80044ee:	d003      	beq.n	80044f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b12      	cmp	r3, #18
 80044f6:	d130      	bne.n	800455a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	2203      	movs	r2, #3
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	4013      	ands	r3, r2
 800450e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	4313      	orrs	r3, r2
 8004520:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800452e:	2201      	movs	r2, #1
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	4013      	ands	r3, r2
 800453c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f003 0201 	and.w	r2, r3, #1
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d017      	beq.n	8004592 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	2203      	movs	r2, #3
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	4013      	ands	r3, r2
 8004578:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	4313      	orrs	r3, r2
 800458a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d07c      	beq.n	8004698 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800459e:	4a47      	ldr	r2, [pc, #284]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3318      	adds	r3, #24
 80045a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	220f      	movs	r2, #15
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	4013      	ands	r3, r2
 80045c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0a9a      	lsrs	r2, r3, #10
 80045c6:	4b3e      	ldr	r3, [pc, #248]	@ (80046c0 <HAL_GPIO_Init+0x3ac>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	f002 0203 	and.w	r2, r2, #3
 80045d0:	00d2      	lsls	r2, r2, #3
 80045d2:	4093      	lsls	r3, r2
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80045da:	4938      	ldr	r1, [pc, #224]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	3318      	adds	r3, #24
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80045e8:	4b34      	ldr	r3, [pc, #208]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800460c:	4a2b      	ldr	r2, [pc, #172]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004612:	4b2a      	ldr	r3, [pc, #168]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	43db      	mvns	r3, r3
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	4013      	ands	r3, r2
 8004620:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004636:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800463c:	4b1f      	ldr	r3, [pc, #124]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 800463e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004642:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	43db      	mvns	r3, r3
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	4013      	ands	r3, r2
 800464c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004662:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800466a:	4b14      	ldr	r3, [pc, #80]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 800466c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004670:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	43db      	mvns	r3, r3
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	4013      	ands	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004690:	4a0a      	ldr	r2, [pc, #40]	@ (80046bc <HAL_GPIO_Init+0x3a8>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3301      	adds	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f47f ae3d 	bne.w	8004328 <HAL_GPIO_Init+0x14>
  }
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	3724      	adds	r7, #36	@ 0x24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	46022000 	.word	0x46022000
 80046c0:	002f7f7f 	.word	0x002f7f7f

080046c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
 80046d0:	4613      	mov	r3, r2
 80046d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046d4:	787b      	ldrb	r3, [r7, #1]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80046e0:	e002      	b.n	80046e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80046e2:	887a      	ldrh	r2, [r7, #2]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	041a      	lsls	r2, r3, #16
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43d9      	mvns	r1, r3
 8004712:	887b      	ldrh	r3, [r7, #2]
 8004714:	400b      	ands	r3, r1
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	619a      	str	r2, [r3, #24]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e08d      	b.n	8004856 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc f9b8 	bl	8000ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	@ 0x24
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004778:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004788:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d107      	bne.n	80047a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	e006      	b.n	80047b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80047ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d108      	bne.n	80047ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047c6:	605a      	str	r2, [r3, #4]
 80047c8:	e007      	b.n	80047da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69d9      	ldr	r1, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b20      	cmp	r3, #32
 8004872:	d138      	bne.n	80048e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800487e:	2302      	movs	r3, #2
 8004880:	e032      	b.n	80048e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2224      	movs	r2, #36	@ 0x24
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b20      	cmp	r3, #32
 8004908:	d139      	bne.n	800497e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004914:	2302      	movs	r3, #2
 8004916:	e033      	b.n	8004980 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	@ 0x24
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004946:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e000      	b.n	8004980 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
  }
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
 80049a8:	e007      	b.n	80049ba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80049aa:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 0204 	bic.w	r2, r3, #4
 80049b2:	4905      	ldr	r1, [pc, #20]	@ (80049c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40030400 	.word	0x40030400

080049cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_ICACHE_Enable+0x1c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a04      	ldr	r2, [pc, #16]	@ (80049e8 <HAL_ICACHE_Enable+0x1c>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40030400 	.word	0x40030400

080049ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80049f4:	4b39      	ldr	r3, [pc, #228]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049fc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d10b      	bne.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0c:	d905      	bls.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a0e:	4b33      	ldr	r3, [pc, #204]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4a32      	ldr	r2, [pc, #200]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a18:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e057      	b.n	8004ace <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a24:	d90a      	bls.n	8004a3c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004a26:	4b2d      	ldr	r3, [pc, #180]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	4a2a      	ldr	r2, [pc, #168]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a38:	60d3      	str	r3, [r2, #12]
 8004a3a:	e007      	b.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004a3c:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004a44:	4925      	ldr	r1, [pc, #148]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a4c:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a24      	ldr	r2, [pc, #144]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	2232      	movs	r2, #50	@ 0x32
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	099b      	lsrs	r3, r3, #6
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a6a:	e002      	b.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004a72:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f3      	bne.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01b      	beq.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004a8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	2232      	movs	r2, #50	@ 0x32
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004aa8:	e002      	b.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f3      	bne.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e000      	b.n	8004ace <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	46020800 	.word	0x46020800
 8004ae0:	20000004 	.word	0x20000004
 8004ae4:	10624dd3 	.word	0x10624dd3

08004ae8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004aec:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <HAL_PWREx_GetVoltageRange+0x18>)
 8004aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	46020800 	.word	0x46020800

08004b04 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b0c:	4b22      	ldr	r3, [pc, #136]	@ (8004b98 <HAL_PWREx_ConfigSupply+0x94>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a22      	ldr	r2, [pc, #136]	@ (8004b9c <HAL_PWREx_ConfigSupply+0x98>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	2232      	movs	r2, #50	@ 0x32
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <HAL_PWREx_ConfigSupply+0x98>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d113      	bne.n	8004b58 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004b30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b36:	f023 0302 	bic.w	r3, r3, #2
 8004b3a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b3c:	e002      	b.n	8004b44 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b44:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d116      	bne.n	8004b7e <HAL_PWREx_ConfigSupply+0x7a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f3      	bne.n	8004b3e <HAL_PWREx_ConfigSupply+0x3a>
 8004b56:	e012      	b.n	8004b7e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004b58:	4b11      	ldr	r3, [pc, #68]	@ (8004ba0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ba0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b5e:	f043 0302 	orr.w	r3, r3, #2
 8004b62:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b64:	e002      	b.n	8004b6c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <HAL_PWREx_ConfigSupply+0x7a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f3      	bne.n	8004b66 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e000      	b.n	8004b8a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000004 	.word	0x20000004
 8004b9c:	10624dd3 	.word	0x10624dd3
 8004ba0:	46020800 	.word	0x46020800

08004ba4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004ba8:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <HAL_PWREx_EnableVddA+0x1c>)
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	4a04      	ldr	r2, [pc, #16]	@ (8004bc0 <HAL_PWREx_EnableVddA+0x1c>)
 8004bae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bb2:	6113      	str	r3, [r2, #16]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	46020800 	.word	0x46020800

08004bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	@ 0x38
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f000 bec8 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bde:	4b99      	ldr	r3, [pc, #612]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004be8:	4b96      	ldr	r3, [pc, #600]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 816c 	beq.w	8004ed8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_RCC_OscConfig+0x52>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	f040 80de 	bne.w	8004dca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f040 80da 	bne.w	8004dca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f000 bea5 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c28:	4b86      	ldr	r3, [pc, #536]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <HAL_RCC_OscConfig+0x7a>
 8004c34:	4b83      	ldr	r3, [pc, #524]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004c3c:	e005      	b.n	8004c4a <HAL_RCC_OscConfig+0x86>
 8004c3e:	4b81      	ldr	r3, [pc, #516]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d255      	bcs.n	8004cfa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f9e9 	bl	8006030 <RCC_SetFlashLatencyFromMSIRange>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f000 be82 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c6a:	4b76      	ldr	r3, [pc, #472]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c74:	6093      	str	r3, [r2, #8]
 8004c76:	4b73      	ldr	r3, [pc, #460]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	4970      	ldr	r1, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004c90:	d309      	bcc.n	8004ca6 <HAL_RCC_OscConfig+0xe2>
 8004c92:	4b6c      	ldr	r3, [pc, #432]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f023 021f 	bic.w	r2, r3, #31
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4969      	ldr	r1, [pc, #420]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60cb      	str	r3, [r1, #12]
 8004ca4:	e07e      	b.n	8004da4 <HAL_RCC_OscConfig+0x1e0>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da0a      	bge.n	8004cc4 <HAL_RCC_OscConfig+0x100>
 8004cae:	4b65      	ldr	r3, [pc, #404]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	015b      	lsls	r3, r3, #5
 8004cbc:	4961      	ldr	r1, [pc, #388]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60cb      	str	r3, [r1, #12]
 8004cc2:	e06f      	b.n	8004da4 <HAL_RCC_OscConfig+0x1e0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ccc:	d30a      	bcc.n	8004ce4 <HAL_RCC_OscConfig+0x120>
 8004cce:	4b5d      	ldr	r3, [pc, #372]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	029b      	lsls	r3, r3, #10
 8004cdc:	4959      	ldr	r1, [pc, #356]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60cb      	str	r3, [r1, #12]
 8004ce2:	e05f      	b.n	8004da4 <HAL_RCC_OscConfig+0x1e0>
 8004ce4:	4b57      	ldr	r3, [pc, #348]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	03db      	lsls	r3, r3, #15
 8004cf2:	4954      	ldr	r1, [pc, #336]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60cb      	str	r3, [r1, #12]
 8004cf8:	e054      	b.n	8004da4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004cfa:	4b52      	ldr	r3, [pc, #328]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4a51      	ldr	r2, [pc, #324]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d04:	6093      	str	r3, [r2, #8]
 8004d06:	4b4f      	ldr	r3, [pc, #316]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	494c      	ldr	r1, [pc, #304]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004d20:	d309      	bcc.n	8004d36 <HAL_RCC_OscConfig+0x172>
 8004d22:	4b48      	ldr	r3, [pc, #288]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f023 021f 	bic.w	r2, r3, #31
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4945      	ldr	r1, [pc, #276]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60cb      	str	r3, [r1, #12]
 8004d34:	e028      	b.n	8004d88 <HAL_RCC_OscConfig+0x1c4>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da0a      	bge.n	8004d54 <HAL_RCC_OscConfig+0x190>
 8004d3e:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	015b      	lsls	r3, r3, #5
 8004d4c:	493d      	ldr	r1, [pc, #244]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60cb      	str	r3, [r1, #12]
 8004d52:	e019      	b.n	8004d88 <HAL_RCC_OscConfig+0x1c4>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5c:	d30a      	bcc.n	8004d74 <HAL_RCC_OscConfig+0x1b0>
 8004d5e:	4b39      	ldr	r3, [pc, #228]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	029b      	lsls	r3, r3, #10
 8004d6c:	4935      	ldr	r1, [pc, #212]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60cb      	str	r3, [r1, #12]
 8004d72:	e009      	b.n	8004d88 <HAL_RCC_OscConfig+0x1c4>
 8004d74:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	03db      	lsls	r3, r3, #15
 8004d82:	4930      	ldr	r1, [pc, #192]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 f94c 	bl	8006030 <RCC_SetFlashLatencyFromMSIRange>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f000 bde5 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004da4:	f001 f8de 	bl	8005f64 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004da8:	4b27      	ldr	r3, [pc, #156]	@ (8004e48 <HAL_RCC_OscConfig+0x284>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb ffcd 	bl	8000d4c <HAL_InitTick>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 808a 	beq.w	8004ed6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dc6:	f000 bdd2 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d066      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004dde:	f7fc fd35 	bl	800184c <HAL_GetTick>
 8004de2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004de4:	e009      	b.n	8004dfa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004de6:	f7fc fd31 	bl	800184c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d902      	bls.n	8004dfa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	f000 bdba 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004dfa:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ef      	beq.n	8004de6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004e06:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004e0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e10:	6093      	str	r3, [r2, #8]
 8004e12:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	4909      	ldr	r1, [pc, #36]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004e2c:	d30e      	bcc.n	8004e4c <HAL_RCC_OscConfig+0x288>
 8004e2e:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f023 021f 	bic.w	r2, r3, #31
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4902      	ldr	r1, [pc, #8]	@ (8004e44 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60cb      	str	r3, [r1, #12]
 8004e40:	e04a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x314>
 8004e42:	bf00      	nop
 8004e44:	46020c00 	.word	0x46020c00
 8004e48:	2000000c 	.word	0x2000000c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da0a      	bge.n	8004e6a <HAL_RCC_OscConfig+0x2a6>
 8004e54:	4b98      	ldr	r3, [pc, #608]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	015b      	lsls	r3, r3, #5
 8004e62:	4995      	ldr	r1, [pc, #596]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60cb      	str	r3, [r1, #12]
 8004e68:	e036      	b.n	8004ed8 <HAL_RCC_OscConfig+0x314>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e72:	d30a      	bcc.n	8004e8a <HAL_RCC_OscConfig+0x2c6>
 8004e74:	4b90      	ldr	r3, [pc, #576]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	029b      	lsls	r3, r3, #10
 8004e82:	498d      	ldr	r1, [pc, #564]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60cb      	str	r3, [r1, #12]
 8004e88:	e026      	b.n	8004ed8 <HAL_RCC_OscConfig+0x314>
 8004e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	03db      	lsls	r3, r3, #15
 8004e98:	4987      	ldr	r1, [pc, #540]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60cb      	str	r3, [r1, #12]
 8004e9e:	e01b      	b.n	8004ed8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004ea0:	4b85      	ldr	r3, [pc, #532]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a84      	ldr	r2, [pc, #528]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004eac:	f7fc fcce 	bl	800184c <HAL_GetTick>
 8004eb0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eb4:	f7fc fcca 	bl	800184c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	f000 bd53 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004ec8:	4b7b      	ldr	r3, [pc, #492]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ef      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x2f0>
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ed6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 808b 	beq.w	8004ffc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x334>
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	2b0c      	cmp	r3, #12
 8004ef0:	d109      	bne.n	8004f06 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d17d      	bne.n	8004ffc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f000 bd34 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCC_OscConfig+0x35a>
 8004f10:	4b69      	ldr	r3, [pc, #420]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a68      	ldr	r2, [pc, #416]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	e041      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3de>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f26:	d112      	bne.n	8004f4e <HAL_RCC_OscConfig+0x38a>
 8004f28:	4b63      	ldr	r3, [pc, #396]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a62      	ldr	r2, [pc, #392]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b60      	ldr	r3, [pc, #384]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a5f      	ldr	r2, [pc, #380]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f3a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4b5d      	ldr	r3, [pc, #372]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5c      	ldr	r2, [pc, #368]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e029      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3de>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004f56:	d112      	bne.n	8004f7e <HAL_RCC_OscConfig+0x3ba>
 8004f58:	4b57      	ldr	r3, [pc, #348]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a56      	ldr	r2, [pc, #344]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	4b54      	ldr	r3, [pc, #336]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a53      	ldr	r2, [pc, #332]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	4b51      	ldr	r3, [pc, #324]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a50      	ldr	r2, [pc, #320]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e011      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3de>
 8004f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4d      	ldr	r2, [pc, #308]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b48      	ldr	r3, [pc, #288]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a47      	ldr	r2, [pc, #284]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004fa0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d014      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004faa:	f7fc fc4f 	bl	800184c <HAL_GetTick>
 8004fae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb2:	f7fc fc4b 	bl	800184c <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b64      	cmp	r3, #100	@ 0x64
 8004fbe:	d902      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	f000 bcd4 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ef      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x3ee>
 8004fd2:	e013      	b.n	8004ffc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fc3a 	bl	800184c <HAL_GetTick>
 8004fd8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fda:	e009      	b.n	8004ff0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fc fc36 	bl	800184c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	@ 0x64
 8004fe8:	d902      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	f000 bcbf 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ff0:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ef      	bne.n	8004fdc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d05f      	beq.n	80050c8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	2b04      	cmp	r3, #4
 800500c:	d005      	beq.n	800501a <HAL_RCC_OscConfig+0x456>
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d114      	bne.n	800503e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005016:	2b02      	cmp	r3, #2
 8005018:	d111      	bne.n	800503e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f000 bca3 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b23      	ldr	r3, [pc, #140]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	4920      	ldr	r1, [pc, #128]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8005038:	4313      	orrs	r3, r2
 800503a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800503c:	e044      	b.n	80050c8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d024      	beq.n	8005090 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005046:	4b1c      	ldr	r3, [pc, #112]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1b      	ldr	r2, [pc, #108]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 800504c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005050:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005052:	f7fc fbfb 	bl	800184c <HAL_GetTick>
 8005056:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005058:	e009      	b.n	800506e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fc fbf7 	bl	800184c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d902      	bls.n	800506e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	f000 bc80 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0ef      	beq.n	800505a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800507a:	4b0f      	ldr	r3, [pc, #60]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	490b      	ldr	r1, [pc, #44]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	610b      	str	r3, [r1, #16]
 800508e:	e01b      	b.n	80050c8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005090:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <HAL_RCC_OscConfig+0x4f4>)
 8005096:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800509a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800509c:	f7fc fbd6 	bl	800184c <HAL_GetTick>
 80050a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a4:	f7fc fbd2 	bl	800184c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d904      	bls.n	80050bc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	f000 bc5b 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
 80050b8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050bc:	4baf      	ldr	r3, [pc, #700]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ed      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80c8 	beq.w	8005266 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050dc:	4ba7      	ldr	r3, [pc, #668]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d111      	bne.n	800510e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ea:	4ba4      	ldr	r3, [pc, #656]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f0:	4aa2      	ldr	r2, [pc, #648]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80050f2:	f043 0304 	orr.w	r3, r3, #4
 80050f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80050fa:	4ba0      	ldr	r3, [pc, #640]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80050fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800510e:	4b9c      	ldr	r3, [pc, #624]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d119      	bne.n	800514e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800511a:	4b99      	ldr	r3, [pc, #612]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	4a98      	ldr	r2, [pc, #608]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005126:	f7fc fb91 	bl	800184c <HAL_GetTick>
 800512a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800512c:	e009      	b.n	8005142 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512e:	f7fc fb8d 	bl	800184c <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d902      	bls.n	8005142 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	f000 bc16 	b.w	800596e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005142:	4b8f      	ldr	r3, [pc, #572]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0ef      	beq.n	800512e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d05f      	beq.n	8005216 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005156:	4b89      	ldr	r3, [pc, #548]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800515c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005168:	429a      	cmp	r2, r3
 800516a:	d037      	beq.n	80051dc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e3f4      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01b      	beq.n	80051c6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800518e:	4b7b      	ldr	r3, [pc, #492]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005194:	4a79      	ldr	r2, [pc, #484]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005196:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800519a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800519e:	f7fc fb55 	bl	800184c <HAL_GetTick>
 80051a2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fc fb51 	bl	800184c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b05      	cmp	r3, #5
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e3da      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80051b8:	4b70      	ldr	r3, [pc, #448]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80051ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ef      	bne.n	80051a6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80051c6:	4b6d      	ldr	r3, [pc, #436]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80051c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	4969      	ldr	r1, [pc, #420]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80051dc:	4b67      	ldr	r3, [pc, #412]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80051de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051e2:	4a66      	ldr	r2, [pc, #408]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 80051e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80051ec:	f7fc fb2e 	bl	800184c <HAL_GetTick>
 80051f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fc fb2a 	bl	800184c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e3b3      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005206:	4b5d      	ldr	r3, [pc, #372]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800520c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ef      	beq.n	80051f4 <HAL_RCC_OscConfig+0x630>
 8005214:	e01b      	b.n	800524e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005216:	4b59      	ldr	r3, [pc, #356]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800521c:	4a57      	ldr	r2, [pc, #348]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800521e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005222:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005226:	f7fc fb11 	bl	800184c <HAL_GetTick>
 800522a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522e:	f7fc fb0d 	bl	800184c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b05      	cmp	r3, #5
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e396      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005240:	4b4e      	ldr	r3, [pc, #312]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005246:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ef      	bne.n	800522e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800524e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005252:	2b01      	cmp	r3, #1
 8005254:	d107      	bne.n	8005266 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005256:	4b49      	ldr	r3, [pc, #292]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525c:	4a47      	ldr	r2, [pc, #284]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800525e:	f023 0304 	bic.w	r3, r3, #4
 8005262:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8111 	beq.w	8005496 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b40      	ldr	r3, [pc, #256]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800527c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d111      	bne.n	80052ac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005288:	4b3c      	ldr	r3, [pc, #240]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528e:	4a3b      	ldr	r2, [pc, #236]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005298:	4b38      	ldr	r3, [pc, #224]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800529a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052ac:	4b34      	ldr	r3, [pc, #208]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d118      	bne.n	80052ea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80052b8:	4b31      	ldr	r3, [pc, #196]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	4a30      	ldr	r2, [pc, #192]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c4:	f7fc fac2 	bl	800184c <HAL_GetTick>
 80052c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052cc:	f7fc fabe 	bl	800184c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e347      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052de:	4b28      	ldr	r3, [pc, #160]	@ (8005380 <HAL_RCC_OscConfig+0x7bc>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d01f      	beq.n	8005336 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d010      	beq.n	8005324 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005302:	4b1e      	ldr	r3, [pc, #120]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005308:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800530a:	f043 0304 	orr.w	r3, r3, #4
 800530e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005312:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005318:	4a18      	ldr	r2, [pc, #96]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005322:	e018      	b.n	8005356 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005324:	4b15      	ldr	r3, [pc, #84]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800532a:	4a14      	ldr	r2, [pc, #80]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005334:	e00f      	b.n	8005356 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005336:	4b11      	ldr	r3, [pc, #68]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800533c:	4a0f      	ldr	r2, [pc, #60]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 8005348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800534c:	4a0b      	ldr	r2, [pc, #44]	@ (800537c <HAL_RCC_OscConfig+0x7b8>)
 800534e:	f023 0304 	bic.w	r3, r3, #4
 8005352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d057      	beq.n	800540e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800535e:	f7fc fa75 	bl	800184c <HAL_GetTick>
 8005362:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005364:	e00e      	b.n	8005384 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005366:	f7fc fa71 	bl	800184c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005374:	4293      	cmp	r3, r2
 8005376:	d905      	bls.n	8005384 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e2f8      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
 800537c:	46020c00 	.word	0x46020c00
 8005380:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005384:	4b9c      	ldr	r3, [pc, #624]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0e9      	beq.n	8005366 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01b      	beq.n	80053d6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800539e:	4b96      	ldr	r3, [pc, #600]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80053a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053a4:	4a94      	ldr	r2, [pc, #592]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80053a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fc fa4c 	bl	800184c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e2d3      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80053c6:	4b8c      	ldr	r3, [pc, #560]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80053c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ed      	beq.n	80053b0 <HAL_RCC_OscConfig+0x7ec>
 80053d4:	e053      	b.n	800547e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80053d6:	4b88      	ldr	r3, [pc, #544]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80053d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053dc:	4a86      	ldr	r2, [pc, #536]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80053de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fc fa30 	bl	800184c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e2b7      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053fe:	4b7e      	ldr	r3, [pc, #504]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ed      	bne.n	80053e8 <HAL_RCC_OscConfig+0x824>
 800540c:	e037      	b.n	800547e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800540e:	f7fc fa1d 	bl	800184c <HAL_GetTick>
 8005412:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005414:	e00a      	b.n	800542c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fc fa19 	bl	800184c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e2a0      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800542c:	4b72      	ldr	r3, [pc, #456]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800542e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ed      	bne.n	8005416 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800543a:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800543c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01a      	beq.n	800547e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005448:	4b6b      	ldr	r3, [pc, #428]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800544a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800544e:	4a6a      	ldr	r2, [pc, #424]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005454:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc f9f7 	bl	800184c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e27e      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005470:	4b61      	ldr	r3, [pc, #388]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1ed      	bne.n	800545a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800547e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005486:	4b5c      	ldr	r3, [pc, #368]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548c:	4a5a      	ldr	r2, [pc, #360]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800548e:	f023 0304 	bic.w	r3, r3, #4
 8005492:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d036      	beq.n	8005510 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d019      	beq.n	80054de <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80054aa:	4b53      	ldr	r3, [pc, #332]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a52      	ldr	r2, [pc, #328]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80054b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054b6:	f7fc f9c9 	bl	800184c <HAL_GetTick>
 80054ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054be:	f7fc f9c5 	bl	800184c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e24e      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80054d0:	4b49      	ldr	r3, [pc, #292]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x8fa>
 80054dc:	e018      	b.n	8005510 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80054de:	4b46      	ldr	r3, [pc, #280]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a45      	ldr	r2, [pc, #276]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80054e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054ea:	f7fc f9af 	bl	800184c <HAL_GetTick>
 80054ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054f2:	f7fc f9ab 	bl	800184c <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e234      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005504:	4b3c      	ldr	r3, [pc, #240]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d036      	beq.n	800558a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d019      	beq.n	8005558 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005524:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a33      	ldr	r2, [pc, #204]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800552a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800552e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005530:	f7fc f98c 	bl	800184c <HAL_GetTick>
 8005534:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005538:	f7fc f988 	bl	800184c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e211      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800554a:	4b2b      	ldr	r3, [pc, #172]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x974>
 8005556:	e018      	b.n	800558a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005558:	4b27      	ldr	r3, [pc, #156]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a26      	ldr	r2, [pc, #152]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 800555e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005562:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005564:	f7fc f972 	bl	800184c <HAL_GetTick>
 8005568:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800556c:	f7fc f96e 	bl	800184c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e1f7      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800557e:	4b1e      	ldr	r3, [pc, #120]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d07f      	beq.n	8005696 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559a:	2b00      	cmp	r3, #0
 800559c:	d062      	beq.n	8005664 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800559e:	4b16      	ldr	r3, [pc, #88]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4a15      	ldr	r2, [pc, #84]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055a8:	6093      	str	r3, [r2, #8]
 80055aa:	4b13      	ldr	r3, [pc, #76]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	4910      	ldr	r1, [pc, #64]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80055c4:	d309      	bcc.n	80055da <HAL_RCC_OscConfig+0xa16>
 80055c6:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f023 021f 	bic.w	r2, r3, #31
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4909      	ldr	r1, [pc, #36]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
 80055d8:	e02a      	b.n	8005630 <HAL_RCC_OscConfig+0xa6c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da0c      	bge.n	80055fc <HAL_RCC_OscConfig+0xa38>
 80055e2:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	015b      	lsls	r3, r3, #5
 80055f0:	4901      	ldr	r1, [pc, #4]	@ (80055f8 <HAL_RCC_OscConfig+0xa34>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60cb      	str	r3, [r1, #12]
 80055f6:	e01b      	b.n	8005630 <HAL_RCC_OscConfig+0xa6c>
 80055f8:	46020c00 	.word	0x46020c00
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005604:	d30a      	bcc.n	800561c <HAL_RCC_OscConfig+0xa58>
 8005606:	4ba1      	ldr	r3, [pc, #644]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	029b      	lsls	r3, r3, #10
 8005614:	499d      	ldr	r1, [pc, #628]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005616:	4313      	orrs	r3, r2
 8005618:	60cb      	str	r3, [r1, #12]
 800561a:	e009      	b.n	8005630 <HAL_RCC_OscConfig+0xa6c>
 800561c:	4b9b      	ldr	r3, [pc, #620]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	03db      	lsls	r3, r3, #15
 800562a:	4998      	ldr	r1, [pc, #608]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005630:	4b96      	ldr	r3, [pc, #600]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a95      	ldr	r2, [pc, #596]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005636:	f043 0310 	orr.w	r3, r3, #16
 800563a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800563c:	f7fc f906 	bl	800184c <HAL_GetTick>
 8005640:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005644:	f7fc f902 	bl	800184c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e18b      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005656:	4b8d      	ldr	r3, [pc, #564]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0xa80>
 8005662:	e018      	b.n	8005696 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005664:	4b89      	ldr	r3, [pc, #548]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a88      	ldr	r2, [pc, #544]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005670:	f7fc f8ec 	bl	800184c <HAL_GetTick>
 8005674:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005678:	f7fc f8e8 	bl	800184c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e171      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800568a:	4b80      	ldr	r3, [pc, #512]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8166 	beq.w	800596c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056a6:	4b79      	ldr	r3, [pc, #484]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f003 030c 	and.w	r3, r3, #12
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	f000 80f2 	beq.w	8005898 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	f040 80c5 	bne.w	8005848 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80056be:	4b73      	ldr	r3, [pc, #460]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a72      	ldr	r2, [pc, #456]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80056c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80056ca:	f7fc f8bf 	bl	800184c <HAL_GetTick>
 80056ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fc f8bb 	bl	800184c <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e144      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80056e4:	4b69      	ldr	r3, [pc, #420]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f0      	bne.n	80056d2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f0:	4b66      	ldr	r3, [pc, #408]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80056f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d111      	bne.n	8005722 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	4b63      	ldr	r3, [pc, #396]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005704:	4a61      	ldr	r2, [pc, #388]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005706:	f043 0304 	orr.w	r3, r3, #4
 800570a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800570e:	4b5f      	ldr	r3, [pc, #380]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005722:	4b5b      	ldr	r3, [pc, #364]	@ (8005890 <HAL_RCC_OscConfig+0xccc>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800572a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800572e:	d102      	bne.n	8005736 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005730:	2301      	movs	r3, #1
 8005732:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005736:	4b56      	ldr	r3, [pc, #344]	@ (8005890 <HAL_RCC_OscConfig+0xccc>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	4a55      	ldr	r2, [pc, #340]	@ (8005890 <HAL_RCC_OscConfig+0xccc>)
 800573c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005740:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005742:	4b52      	ldr	r3, [pc, #328]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005756:	3a01      	subs	r2, #1
 8005758:	0212      	lsls	r2, r2, #8
 800575a:	4311      	orrs	r1, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005760:	430a      	orrs	r2, r1
 8005762:	494a      	ldr	r1, [pc, #296]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005764:	4313      	orrs	r3, r2
 8005766:	628b      	str	r3, [r1, #40]	@ 0x28
 8005768:	4b48      	ldr	r3, [pc, #288]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800576a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800576c:	4b49      	ldr	r3, [pc, #292]	@ (8005894 <HAL_RCC_OscConfig+0xcd0>)
 800576e:	4013      	ands	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005774:	3a01      	subs	r2, #1
 8005776:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800577e:	3a01      	subs	r2, #1
 8005780:	0252      	lsls	r2, r2, #9
 8005782:	b292      	uxth	r2, r2
 8005784:	4311      	orrs	r1, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800578a:	3a01      	subs	r2, #1
 800578c:	0412      	lsls	r2, r2, #16
 800578e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005792:	4311      	orrs	r1, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005798:	3a01      	subs	r2, #1
 800579a:	0612      	lsls	r2, r2, #24
 800579c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80057a0:	430a      	orrs	r2, r1
 80057a2:	493a      	ldr	r1, [pc, #232]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80057a8:	4b38      	ldr	r3, [pc, #224]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ac:	4a37      	ldr	r2, [pc, #220]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057ae:	f023 0310 	bic.w	r3, r3, #16
 80057b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b8:	4a34      	ldr	r2, [pc, #208]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80057be:	4b33      	ldr	r3, [pc, #204]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	4a32      	ldr	r2, [pc, #200]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057c4:	f043 0310 	orr.w	r3, r3, #16
 80057c8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80057ca:	4b30      	ldr	r3, [pc, #192]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ce:	f023 020c 	bic.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d6:	492d      	ldr	r1, [pc, #180]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80057dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80057e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005890 <HAL_RCC_OscConfig+0xccc>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4a29      	ldr	r2, [pc, #164]	@ (8005890 <HAL_RCC_OscConfig+0xccc>)
 80057ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80057f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80057f8:	4b24      	ldr	r3, [pc, #144]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fe:	4a23      	ldr	r2, [pc, #140]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005808:	4b20      	ldr	r3, [pc, #128]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800580e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005812:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005814:	f7fc f81a 	bl	800184c <HAL_GetTick>
 8005818:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581c:	f7fc f816 	bl	800184c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e09f      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800582e:	4b17      	ldr	r3, [pc, #92]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800583a:	4b14      	ldr	r3, [pc, #80]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	4a13      	ldr	r2, [pc, #76]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005844:	6293      	str	r3, [r2, #40]	@ 0x28
 8005846:	e091      	b.n	800596c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005848:	4b10      	ldr	r3, [pc, #64]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0f      	ldr	r2, [pc, #60]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800584e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005852:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005854:	f7fb fffa 	bl	800184c <HAL_GetTick>
 8005858:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585c:	f7fb fff6 	bl	800184c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e07f      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800586e:	4b07      	ldr	r3, [pc, #28]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800587a:	4b04      	ldr	r3, [pc, #16]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587e:	4a03      	ldr	r2, [pc, #12]	@ (800588c <HAL_RCC_OscConfig+0xcc8>)
 8005880:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005884:	f023 0303 	bic.w	r3, r3, #3
 8005888:	6293      	str	r3, [r2, #40]	@ 0x28
 800588a:	e06f      	b.n	800596c <HAL_RCC_OscConfig+0xda8>
 800588c:	46020c00 	.word	0x46020c00
 8005890:	46020800 	.word	0x46020800
 8005894:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005898:	4b37      	ldr	r3, [pc, #220]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 800589a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800589e:	4b36      	ldr	r3, [pc, #216]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 80058a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d039      	beq.n	8005920 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d132      	bne.n	8005920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d129      	bne.n	8005920 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d122      	bne.n	8005920 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d11a      	bne.n	8005920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	0a5b      	lsrs	r3, r3, #9
 80058ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d111      	bne.n	8005920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005908:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800590a:	429a      	cmp	r2, r3
 800590c:	d108      	bne.n	8005920 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d001      	beq.n	8005924 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e024      	b.n	800596e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005924:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	08db      	lsrs	r3, r3, #3
 800592a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005932:	429a      	cmp	r2, r3
 8005934:	d01a      	beq.n	800596c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005936:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	4a0f      	ldr	r2, [pc, #60]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005942:	f7fb ff83 	bl	800184c <HAL_GetTick>
 8005946:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005948:	bf00      	nop
 800594a:	f7fb ff7f 	bl	800184c <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005952:	4293      	cmp	r3, r2
 8005954:	d0f9      	beq.n	800594a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595a:	4a07      	ldr	r2, [pc, #28]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005960:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 8005962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005964:	4a04      	ldr	r2, [pc, #16]	@ (8005978 <HAL_RCC_OscConfig+0xdb4>)
 8005966:	f043 0310 	orr.w	r3, r3, #16
 800596a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3738      	adds	r7, #56	@ 0x38
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	46020c00 	.word	0x46020c00

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e1d9      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b9b      	ldr	r3, [pc, #620]	@ (8005c00 <HAL_RCC_ClockConfig+0x284>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d910      	bls.n	80059c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b98      	ldr	r3, [pc, #608]	@ (8005c00 <HAL_RCC_ClockConfig+0x284>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 020f 	bic.w	r2, r3, #15
 80059a6:	4996      	ldr	r1, [pc, #600]	@ (8005c00 <HAL_RCC_ClockConfig+0x284>)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b94      	ldr	r3, [pc, #592]	@ (8005c00 <HAL_RCC_ClockConfig+0x284>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e1c1      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059d8:	429a      	cmp	r2, r3
 80059da:	d908      	bls.n	80059ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80059dc:	4b89      	ldr	r3, [pc, #548]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	4986      	ldr	r1, [pc, #536]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d012      	beq.n	8005a20 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	4b81      	ldr	r3, [pc, #516]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d909      	bls.n	8005a20 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	497a      	ldr	r1, [pc, #488]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	4b74      	ldr	r3, [pc, #464]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d908      	bls.n	8005a4e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005a3c:	4b71      	ldr	r3, [pc, #452]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	496e      	ldr	r1, [pc, #440]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d010      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	4b69      	ldr	r3, [pc, #420]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d908      	bls.n	8005a7c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005a6a:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 020f 	bic.w	r2, r3, #15
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	4963      	ldr	r1, [pc, #396]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80d2 	beq.w	8005c2e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d143      	bne.n	8005b1e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a96:	4b5b      	ldr	r3, [pc, #364]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d110      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005aa4:	4b57      	ldr	r3, [pc, #348]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aaa:	4a56      	ldr	r2, [pc, #344]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005ab4:	4b53      	ldr	r3, [pc, #332]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005ac6:	f7fb fec1 	bl	800184c <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005acc:	4b4e      	ldr	r3, [pc, #312]	@ (8005c08 <HAL_RCC_ClockConfig+0x28c>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005ada:	f7fb feb7 	bl	800184c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e12b      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005aec:	4b46      	ldr	r3, [pc, #280]	@ (8005c08 <HAL_RCC_ClockConfig+0x28c>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005afe:	4b41      	ldr	r3, [pc, #260]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b04:	4a3f      	ldr	r2, [pc, #252]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d121      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e112      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b26:	4b37      	ldr	r3, [pc, #220]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d115      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e106      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005b3e:	4b31      	ldr	r3, [pc, #196]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e0fa      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e0f2      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005b5e:	4b29      	ldr	r3, [pc, #164]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f023 0203 	bic.w	r2, r3, #3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4926      	ldr	r1, [pc, #152]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005b70:	f7fb fe6c 	bl	800184c <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d112      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fb fe64 	bl	800184c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e0d6      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b96:	4b1b      	ldr	r3, [pc, #108]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d1ee      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x204>
 8005ba2:	e044      	b.n	8005c2e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d112      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bae:	f7fb fe4d 	bl	800184c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e0bf      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	f003 030c 	and.w	r3, r3, #12
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d1ee      	bne.n	8005bae <HAL_RCC_ClockConfig+0x232>
 8005bd0:	e02d      	b.n	8005c2e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d123      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bdc:	f7fb fe36 	bl	800184c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e0a8      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bf2:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <HAL_RCC_ClockConfig+0x288>)
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ee      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x260>
 8005bfe:	e016      	b.n	8005c2e <HAL_RCC_ClockConfig+0x2b2>
 8005c00:	40022000 	.word	0x40022000
 8005c04:	46020c00 	.word	0x46020c00
 8005c08:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0c:	f7fb fe1e 	bl	800184c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e090      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c22:	4b4a      	ldr	r3, [pc, #296]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d1ee      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d010      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	4b43      	ldr	r3, [pc, #268]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d208      	bcs.n	8005c5c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005c4a:	4b40      	ldr	r3, [pc, #256]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 020f 	bic.w	r2, r3, #15
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	493d      	ldr	r1, [pc, #244]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d50 <HAL_RCC_ClockConfig+0x3d4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d210      	bcs.n	8005c8c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6a:	4b39      	ldr	r3, [pc, #228]	@ (8005d50 <HAL_RCC_ClockConfig+0x3d4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f023 020f 	bic.w	r2, r3, #15
 8005c72:	4937      	ldr	r1, [pc, #220]	@ (8005d50 <HAL_RCC_ClockConfig+0x3d4>)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7a:	4b35      	ldr	r3, [pc, #212]	@ (8005d50 <HAL_RCC_ClockConfig+0x3d4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e05b      	b.n	8005d44 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d010      	beq.n	8005cba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d208      	bcs.n	8005cba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ca8:	4b28      	ldr	r3, [pc, #160]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4925      	ldr	r1, [pc, #148]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d012      	beq.n	8005cec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d209      	bcs.n	8005cec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	4919      	ldr	r1, [pc, #100]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	4b13      	ldr	r3, [pc, #76]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d208      	bcs.n	8005d1a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005d08:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	490d      	ldr	r1, [pc, #52]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d1a:	f000 f821 	bl	8005d60 <HAL_RCC_GetSysClockFreq>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <HAL_RCC_ClockConfig+0x3d0>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	490a      	ldr	r1, [pc, #40]	@ (8005d54 <HAL_RCC_ClockConfig+0x3d8>)
 8005d2a:	5ccb      	ldrb	r3, [r1, r3]
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d30:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <HAL_RCC_ClockConfig+0x3dc>)
 8005d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d34:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <HAL_RCC_ClockConfig+0x3e0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fb f807 	bl	8000d4c <HAL_InitTick>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]

  return status;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	46020c00 	.word	0x46020c00
 8005d50:	40022000 	.word	0x40022000
 8005d54:	08031fd0 	.word	0x08031fd0
 8005d58:	20000004 	.word	0x20000004
 8005d5c:	2000000c 	.word	0x2000000c

08005d60 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b08b      	sub	sp, #44	@ 0x2c
 8005d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6e:	4b78      	ldr	r3, [pc, #480]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d78:	4b75      	ldr	r3, [pc, #468]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_RCC_GetSysClockFreq+0x34>
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d121      	bne.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d11e      	bne.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005d94:	4b6e      	ldr	r3, [pc, #440]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d107      	bne.n	8005db0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005da0:	4b6b      	ldr	r3, [pc, #428]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005da6:	0b1b      	lsrs	r3, r3, #12
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dae:	e005      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005db0:	4b67      	ldr	r3, [pc, #412]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	0f1b      	lsrs	r3, r3, #28
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005dbc:	4a65      	ldr	r2, [pc, #404]	@ (8005f54 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d110      	bne.n	8005dee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dd0:	e00d      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dde:	4b5e      	ldr	r3, [pc, #376]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	e004      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dea:	4b5b      	ldr	r3, [pc, #364]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005dec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	f040 80a5 	bne.w	8005f40 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005df6:	4b56      	ldr	r3, [pc, #344]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005e00:	4b53      	ldr	r3, [pc, #332]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	0a1b      	lsrs	r3, r3, #8
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005e0e:	4b50      	ldr	r3, [pc, #320]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	08db      	lsrs	r3, r3, #3
 8005e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d003      	beq.n	8005e44 <HAL_RCC_GetSysClockFreq+0xe4>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d022      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0x128>
 8005e42:	e043      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005f5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e56:	4b3e      	ldr	r3, [pc, #248]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005e66:	ed97 6a01 	vldr	s12, [r7, #4]
 8005e6a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005f60 <HAL_RCC_GetSysClockFreq+0x200>
 8005e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e86:	e046      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005f5c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005eaa:	ed97 6a01 	vldr	s12, [r7, #4]
 8005eae:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005f60 <HAL_RCC_GetSysClockFreq+0x200>
 8005eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eca:	e024      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ef4:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ef8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005f60 <HAL_RCC_GetSysClockFreq+0x200>
 8005efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f14:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005f16:	4b0e      	ldr	r3, [pc, #56]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1a:	0e1b      	lsrs	r3, r3, #24
 8005f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f20:	3301      	adds	r3, #1
 8005f22:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3a:	ee17 3a90 	vmov	r3, s15
 8005f3e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005f40:	6a3b      	ldr	r3, [r7, #32]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	372c      	adds	r7, #44	@ 0x2c
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	46020c00 	.word	0x46020c00
 8005f54:	08031fe8 	.word	0x08031fe8
 8005f58:	00f42400 	.word	0x00f42400
 8005f5c:	4b742400 	.word	0x4b742400
 8005f60:	46000000 	.word	0x46000000

08005f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005f68:	f7ff fefa 	bl	8005d60 <HAL_RCC_GetSysClockFreq>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <HAL_RCC_GetHCLKFreq+0x28>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	4906      	ldr	r1, [pc, #24]	@ (8005f90 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005f78:	5ccb      	ldrb	r3, [r1, r3]
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	4a05      	ldr	r2, [pc, #20]	@ (8005f94 <HAL_RCC_GetHCLKFreq+0x30>)
 8005f80:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005f82:	4b04      	ldr	r3, [pc, #16]	@ (8005f94 <HAL_RCC_GetHCLKFreq+0x30>)
 8005f84:	681b      	ldr	r3, [r3, #0]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	46020c00 	.word	0x46020c00
 8005f90:	08031fd0 	.word	0x08031fd0
 8005f94:	20000004 	.word	0x20000004

08005f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005f9c:	f7ff ffe2 	bl	8005f64 <HAL_RCC_GetHCLKFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b05      	ldr	r3, [pc, #20]	@ (8005fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	4903      	ldr	r1, [pc, #12]	@ (8005fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	46020c00 	.word	0x46020c00
 8005fbc:	08031fe0 	.word	0x08031fe0

08005fc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	221f      	movs	r2, #31
 8005fce:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005fd0:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <HAL_RCC_GetClockConfig+0x68>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f003 0203 	and.w	r2, r3, #3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005fdc:	4b12      	ldr	r3, [pc, #72]	@ (8006028 <HAL_RCC_GetClockConfig+0x68>)
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f003 020f 	and.w	r2, r3, #15
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <HAL_RCC_GetClockConfig+0x68>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8006028 <HAL_RCC_GetClockConfig+0x68>)
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006002:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <HAL_RCC_GetClockConfig+0x68>)
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800600e:	4b07      	ldr	r3, [pc, #28]	@ (800602c <HAL_RCC_GetClockConfig+0x6c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	46020c00 	.word	0x46020c00
 800602c:	40022000 	.word	0x40022000

08006030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006038:	4b3e      	ldr	r3, [pc, #248]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800603a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006046:	f7fe fd4f 	bl	8004ae8 <HAL_PWREx_GetVoltageRange>
 800604a:	6178      	str	r0, [r7, #20]
 800604c:	e019      	b.n	8006082 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800604e:	4b39      	ldr	r3, [pc, #228]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006054:	4a37      	ldr	r2, [pc, #220]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006056:	f043 0304 	orr.w	r3, r3, #4
 800605a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800605e:	4b35      	ldr	r3, [pc, #212]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800606c:	f7fe fd3c 	bl	8004ae8 <HAL_PWREx_GetVoltageRange>
 8006070:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006072:	4b30      	ldr	r3, [pc, #192]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006078:	4a2e      	ldr	r2, [pc, #184]	@ (8006134 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800607a:	f023 0304 	bic.w	r3, r3, #4
 800607e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006088:	d003      	beq.n	8006092 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006090:	d109      	bne.n	80060a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006098:	d202      	bcs.n	80060a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800609a:	2301      	movs	r3, #1
 800609c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800609e:	e033      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80060a4:	e030      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ac:	d208      	bcs.n	80060c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b4:	d102      	bne.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80060b6:	2303      	movs	r3, #3
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e025      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e035      	b.n	800612c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c6:	d90f      	bls.n	80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060d4:	d902      	bls.n	80060dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	e015      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80060dc:	2301      	movs	r3, #1
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	e012      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80060e2:	2300      	movs	r3, #0
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	e00f      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ee:	d109      	bne.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f6:	d102      	bne.n	80060fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80060f8:	2301      	movs	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	e004      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80060fe:	2302      	movs	r3, #2
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	e001      	b.n	8006108 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006104:	2301      	movs	r3, #1
 8006106:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006108:	4b0b      	ldr	r3, [pc, #44]	@ (8006138 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 020f 	bic.w	r2, r3, #15
 8006110:	4909      	ldr	r1, [pc, #36]	@ (8006138 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006118:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	46020c00 	.word	0x46020c00
 8006138:	40022000 	.word	0x40022000

0800613c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800613c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006140:	b0b6      	sub	sp, #216	@ 0xd8
 8006142:	af00      	add	r7, sp, #0
 8006144:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006148:	2300      	movs	r3, #0
 800614a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800614e:	2300      	movs	r3, #0
 8006150:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f002 0401 	and.w	r4, r2, #1
 8006160:	2500      	movs	r5, #0
 8006162:	ea54 0305 	orrs.w	r3, r4, r5
 8006166:	d00b      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006168:	4bc5      	ldr	r3, [pc, #788]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800616a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800616e:	f023 0103 	bic.w	r1, r3, #3
 8006172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006178:	4ac1      	ldr	r2, [pc, #772]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800617a:	430b      	orrs	r3, r1
 800617c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f002 0804 	and.w	r8, r2, #4
 800618c:	f04f 0900 	mov.w	r9, #0
 8006190:	ea58 0309 	orrs.w	r3, r8, r9
 8006194:	d00b      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006196:	4bba      	ldr	r3, [pc, #744]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800619c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80061a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	4ab6      	ldr	r2, [pc, #728]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061a8:	430b      	orrs	r3, r1
 80061aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f002 0a08 	and.w	sl, r2, #8
 80061ba:	f04f 0b00 	mov.w	fp, #0
 80061be:	ea5a 030b 	orrs.w	r3, sl, fp
 80061c2:	d00b      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80061c4:	4bae      	ldr	r3, [pc, #696]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d4:	4aaa      	ldr	r2, [pc, #680]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061d6:	430b      	orrs	r3, r1
 80061d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 0310 	and.w	r3, r2, #16
 80061e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d00b      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80061fc:	4ba0      	ldr	r3, [pc, #640]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800620a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620c:	4a9c      	ldr	r2, [pc, #624]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800620e:	430b      	orrs	r3, r1
 8006210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f002 0320 	and.w	r3, r2, #32
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800622a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d00b      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006234:	4b92      	ldr	r3, [pc, #584]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800623a:	f023 0107 	bic.w	r1, r3, #7
 800623e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006244:	4a8e      	ldr	r2, [pc, #568]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006246:	430b      	orrs	r3, r1
 8006248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800624c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006262:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006266:	460b      	mov	r3, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	d00b      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800626c:	4b84      	ldr	r3, [pc, #528]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800626e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006272:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800627a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800627c:	4a80      	ldr	r2, [pc, #512]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800627e:	430b      	orrs	r3, r1
 8006280:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006290:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800629a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d00b      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80062a4:	4b76      	ldr	r3, [pc, #472]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062b4:	4a72      	ldr	r2, [pc, #456]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80062c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d00b      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80062dc:	4b68      	ldr	r3, [pc, #416]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80062e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ec:	4a64      	ldr	r2, [pc, #400]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062ee:	430b      	orrs	r3, r1
 80062f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800630a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800630e:	460b      	mov	r3, r1
 8006310:	4313      	orrs	r3, r2
 8006312:	d00b      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006314:	4b5a      	ldr	r3, [pc, #360]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800631a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800631e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	4a56      	ldr	r2, [pc, #344]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006326:	430b      	orrs	r3, r1
 8006328:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800632c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006342:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006346:	460b      	mov	r3, r1
 8006348:	4313      	orrs	r3, r2
 800634a:	d00b      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800634c:	4b4c      	ldr	r3, [pc, #304]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800634e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006352:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800635a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635c:	4a48      	ldr	r2, [pc, #288]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800635e:	430b      	orrs	r3, r1
 8006360:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006374:	2300      	movs	r3, #0
 8006376:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800637a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800637e:	460b      	mov	r3, r1
 8006380:	4313      	orrs	r3, r2
 8006382:	d00b      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006384:	4b3e      	ldr	r3, [pc, #248]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800638a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800638e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006394:	4a3a      	ldr	r2, [pc, #232]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006396:	430b      	orrs	r3, r1
 8006398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800639c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80063a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063aa:	2300      	movs	r3, #0
 80063ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d00b      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80063b8:	4b31      	ldr	r3, [pc, #196]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80063ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80063ca:	430b      	orrs	r3, r1
 80063cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80063dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80063de:	2300      	movs	r3, #0
 80063e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80063e2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d04f      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80063ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063f4:	2b80      	cmp	r3, #128	@ 0x80
 80063f6:	d02d      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80063f8:	2b80      	cmp	r3, #128	@ 0x80
 80063fa:	d827      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x310>
 80063fc:	2b60      	cmp	r3, #96	@ 0x60
 80063fe:	d02b      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006400:	2b60      	cmp	r3, #96	@ 0x60
 8006402:	d823      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006404:	2b40      	cmp	r3, #64	@ 0x40
 8006406:	d006      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006408:	2b40      	cmp	r3, #64	@ 0x40
 800640a:	d81f      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006410:	2b20      	cmp	r3, #32
 8006412:	d011      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006414:	e01a      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006416:	4b1a      	ldr	r3, [pc, #104]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	4a19      	ldr	r2, [pc, #100]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800641c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006420:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006422:	e01a      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006428:	3308      	adds	r3, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fbc4 	bl	8006bb8 <RCCEx_PLL2_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006436:	e010      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800643c:	332c      	adds	r3, #44	@ 0x2c
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fc52 	bl	8006ce8 <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800644a:	e006      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006452:	e002      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8006454:	bf00      	nop
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8006458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d110      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006462:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006464:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006468:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800646c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006474:	4a02      	ldr	r2, [pc, #8]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006476:	430b      	orrs	r3, r1
 8006478:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800647c:	e006      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800647e:	bf00      	nop
 8006480:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006488:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800648c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800649a:	2300      	movs	r3, #0
 800649c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800649e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064a2:	460b      	mov	r3, r1
 80064a4:	4313      	orrs	r3, r2
 80064a6:	d046      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80064a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80064b4:	d028      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80064b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80064ba:	d821      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80064bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064c0:	d022      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80064c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064c6:	d81b      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80064c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064cc:	d01c      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80064ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064d2:	d815      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80064d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064d8:	d008      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064de:	d80f      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d011      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e8:	d00e      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80064ea:	e009      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064f0:	3308      	adds	r3, #8
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fb60 	bl	8006bb8 <RCCEx_PLL2_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80064fe:	e004      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006506:	e000      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8006508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006512:	4bb6      	ldr	r3, [pc, #728]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006518:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800651c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006524:	4ab1      	ldr	r2, [pc, #708]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006526:	430b      	orrs	r3, r1
 8006528:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006532:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006542:	663b      	str	r3, [r7, #96]	@ 0x60
 8006544:	2300      	movs	r3, #0
 8006546:	667b      	str	r3, [r7, #100]	@ 0x64
 8006548:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800654c:	460b      	mov	r3, r1
 800654e:	4313      	orrs	r3, r2
 8006550:	d03e      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800655a:	2b04      	cmp	r3, #4
 800655c:	d81d      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	080065a3 	.word	0x080065a3
 8006568:	08006579 	.word	0x08006579
 800656c:	08006587 	.word	0x08006587
 8006570:	080065a3 	.word	0x080065a3
 8006574:	080065a3 	.word	0x080065a3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006578:	4b9c      	ldr	r3, [pc, #624]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800657a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657c:	4a9b      	ldr	r2, [pc, #620]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800657e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006582:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006584:	e00e      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800658a:	332c      	adds	r3, #44	@ 0x2c
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fbab 	bl	8006ce8 <RCCEx_PLL3_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006598:	e004      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80065a0:	e000      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80065a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80065a4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10d      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80065ac:	4b8f      	ldr	r3, [pc, #572]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80065ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065b2:	f023 0107 	bic.w	r1, r3, #7
 80065b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065be:	4a8b      	ldr	r2, [pc, #556]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80065cc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80065d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065de:	2300      	movs	r3, #0
 80065e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065e6:	460b      	mov	r3, r1
 80065e8:	4313      	orrs	r3, r2
 80065ea:	d04a      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80065ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065f8:	d028      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x510>
 80065fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065fe:	d821      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006600:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006604:	d024      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006606:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800660a:	d81b      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800660c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006610:	d00e      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006616:	d815      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01b      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006620:	d110      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006622:	4b72      	ldr	r3, [pc, #456]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	4a71      	ldr	r2, [pc, #452]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800662e:	e012      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006634:	332c      	adds	r3, #44	@ 0x2c
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fb56 	bl	8006ce8 <RCCEx_PLL3_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006642:	e008      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800664a:	e004      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8006654:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006656:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800665e:	4b63      	ldr	r3, [pc, #396]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006664:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	4a5e      	ldr	r2, [pc, #376]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006672:	430b      	orrs	r3, r1
 8006674:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800667e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800668e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006690:	2300      	movs	r3, #0
 8006692:	657b      	str	r3, [r7, #84]	@ 0x54
 8006694:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	f000 80ba 	beq.w	8006814 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066a0:	2300      	movs	r3, #0
 80066a2:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066a6:	4b51      	ldr	r3, [pc, #324]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80066a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d113      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b4:	4b4d      	ldr	r3, [pc, #308]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80066b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ba:	4a4c      	ldr	r2, [pc, #304]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80066bc:	f043 0304 	orr.w	r3, r3, #4
 80066c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80066c4:	4b49      	ldr	r3, [pc, #292]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80066c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80066dc:	4b44      	ldr	r3, [pc, #272]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	4a43      	ldr	r2, [pc, #268]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066e8:	f7fb f8b0 	bl	800184c <HAL_GetTick>
 80066ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066f0:	e00b      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f2:	f7fb f8ab 	bl	800184c <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d903      	bls.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006708:	e005      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800670a:	4b39      	ldr	r3, [pc, #228]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ed      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8006716:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d16a      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800671e:	4b33      	ldr	r3, [pc, #204]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800672c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d023      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8006734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006738:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800673c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006740:	4293      	cmp	r3, r2
 8006742:	d01b      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006744:	4b29      	ldr	r3, [pc, #164]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800674a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800674e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006752:	4b26      	ldr	r3, [pc, #152]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006758:	4a24      	ldr	r2, [pc, #144]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800675a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800675e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006762:	4b22      	ldr	r3, [pc, #136]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006768:	4a20      	ldr	r2, [pc, #128]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800676a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006772:	4a1e      	ldr	r2, [pc, #120]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006778:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800677c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d019      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fb f860 	bl	800184c <HAL_GetTick>
 800678c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006790:	e00d      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006792:	f7fb f85b 	bl	800184c <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d903      	bls.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80067ac:	e006      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ae:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80067b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0ea      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80067bc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80067c4:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80067c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067d6:	4a05      	ldr	r2, [pc, #20]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80067d8:	430b      	orrs	r3, r1
 80067da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067de:	e00d      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80067e4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80067e8:	e008      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80067ea:	bf00      	nop
 80067ec:	46020c00 	.word	0x46020c00
 80067f0:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80067f8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067fc:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8006800:	2b01      	cmp	r3, #1
 8006802:	d107      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006804:	4bb2      	ldr	r3, [pc, #712]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800680a:	4ab1      	ldr	r2, [pc, #708]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800680c:	f023 0304 	bic.w	r3, r3, #4
 8006810:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006822:	2300      	movs	r3, #0
 8006824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006826:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800682a:	460b      	mov	r3, r1
 800682c:	4313      	orrs	r3, r2
 800682e:	d042      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006834:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006838:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800683c:	d022      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800683e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006842:	d81b      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006848:	d011      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x732>
 800684a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800684e:	d815      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d019      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006858:	d110      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800685a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800685e:	3308      	adds	r3, #8
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f9a9 	bl	8006bb8 <RCCEx_PLL2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800686c:	e00d      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800686e:	4b98      	ldr	r3, [pc, #608]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	4a97      	ldr	r2, [pc, #604]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006878:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800687a:	e006      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006882:	e002      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8006884:	bf00      	nop
 8006886:	e000      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8006888:	bf00      	nop
    }
    if (ret == HAL_OK)
 800688a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10d      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006892:	4b8f      	ldr	r3, [pc, #572]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006898:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800689c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068a4:	4a8a      	ldr	r2, [pc, #552]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80068a6:	430b      	orrs	r3, r1
 80068a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068ac:	e003      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80068b2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c4:	2300      	movs	r3, #0
 80068c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068cc:	460b      	mov	r3, r1
 80068ce:	4313      	orrs	r3, r2
 80068d0:	d02d      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80068d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068de:	d00b      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80068e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e4:	d804      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ee:	d007      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80068f6:	e004      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80068f8:	bf00      	nop
 80068fa:	e002      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80068fc:	bf00      	nop
 80068fe:	e000      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8006900:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006902:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10d      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800690a:	4b71      	ldr	r3, [pc, #452]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800690c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006910:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691c:	4a6c      	ldr	r2, [pc, #432]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800691e:	430b      	orrs	r3, r1
 8006920:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006924:	e003      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800692a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800692e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006940:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006944:	460b      	mov	r3, r1
 8006946:	4313      	orrs	r3, r2
 8006948:	d00c      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800694a:	4b61      	ldr	r3, [pc, #388]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800694c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006950:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800695c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800695e:	430b      	orrs	r3, r1
 8006960:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006970:	633b      	str	r3, [r7, #48]	@ 0x30
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
 8006976:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800697a:	460b      	mov	r3, r1
 800697c:	4313      	orrs	r3, r2
 800697e:	d019      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800698c:	d105      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800698e:	4b50      	ldr	r3, [pc, #320]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006992:	4a4f      	ldr	r2, [pc, #316]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006998:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800699a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800699c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80069a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069ac:	4a48      	ldr	r2, [pc, #288]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80069ae:	430b      	orrs	r3, r1
 80069b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80069b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80069c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069c2:	2300      	movs	r3, #0
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80069ca:	460b      	mov	r3, r1
 80069cc:	4313      	orrs	r3, r2
 80069ce:	d00c      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80069d0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80069d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069e2:	493b      	ldr	r1, [pc, #236]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80069ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	2300      	movs	r3, #0
 80069fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a00:	460b      	mov	r3, r1
 8006a02:	4313      	orrs	r3, r2
 8006a04:	d00c      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006a06:	4b32      	ldr	r3, [pc, #200]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a18:	492d      	ldr	r1, [pc, #180]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a36:	460b      	mov	r3, r1
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d00c      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006a3c:	4b24      	ldr	r3, [pc, #144]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a42:	f023 0218 	bic.w	r2, r3, #24
 8006a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a4e:	4920      	ldr	r1, [pc, #128]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	d034      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a7e:	d105      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a80:	4b13      	ldr	r3, [pc, #76]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	4a12      	ldr	r2, [pc, #72]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a8a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a98:	d108      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f889 	bl	8006bb8 <RCCEx_PLL2_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8006aac:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10f      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ab4:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006ab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ac6:	4902      	ldr	r1, [pc, #8]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006ace:	e005      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8006ad0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006ad8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006af2:	460b      	mov	r3, r1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d03a      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b04:	d00e      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b0a:	d815      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d017      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b14:	d110      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b16:	4b27      	ldr	r3, [pc, #156]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	4a26      	ldr	r2, [pc, #152]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006b22:	e00e      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b28:	3308      	adds	r3, #8
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 f844 	bl	8006bb8 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8006b40:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b42:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10d      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5c:	4915      	ldr	r1, [pc, #84]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006b64:	e003      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006b6a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	607b      	str	r3, [r7, #4]
 8006b80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d00c      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b90:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b9c:	4905      	ldr	r1, [pc, #20]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006ba4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	37d8      	adds	r7, #216	@ 0xd8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb2:	bf00      	nop
 8006bb4:	46020c00 	.word	0x46020c00

08006bb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006bc0:	4b47      	ldr	r3, [pc, #284]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a46      	ldr	r2, [pc, #280]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006bc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bcc:	f7fa fe3e 	bl	800184c <HAL_GetTick>
 8006bd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bd2:	e008      	b.n	8006be6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bd4:	f7fa fe3a 	bl	800184c <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e077      	b.n	8006cd6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006be6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6811      	ldr	r1, [r2, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6852      	ldr	r2, [r2, #4]
 8006c06:	3a01      	subs	r2, #1
 8006c08:	0212      	lsls	r2, r2, #8
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	4934      	ldr	r1, [pc, #208]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006c12:	4b33      	ldr	r3, [pc, #204]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c16:	4b33      	ldr	r3, [pc, #204]	@ (8006ce4 <RCCEx_PLL2_Config+0x12c>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6892      	ldr	r2, [r2, #8]
 8006c1e:	3a01      	subs	r2, #1
 8006c20:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	68d2      	ldr	r2, [r2, #12]
 8006c28:	3a01      	subs	r2, #1
 8006c2a:	0252      	lsls	r2, r2, #9
 8006c2c:	b292      	uxth	r2, r2
 8006c2e:	4311      	orrs	r1, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6912      	ldr	r2, [r2, #16]
 8006c34:	3a01      	subs	r2, #1
 8006c36:	0412      	lsls	r2, r2, #16
 8006c38:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006c3c:	4311      	orrs	r1, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6952      	ldr	r2, [r2, #20]
 8006c42:	3a01      	subs	r2, #1
 8006c44:	0612      	lsls	r2, r2, #24
 8006c46:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	4924      	ldr	r1, [pc, #144]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006c52:	4b23      	ldr	r3, [pc, #140]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c56:	f023 020c 	bic.w	r2, r3, #12
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	4920      	ldr	r1, [pc, #128]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006c64:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	491c      	ldr	r1, [pc, #112]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006c72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c76:	4a1a      	ldr	r2, [pc, #104]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	69d2      	ldr	r2, [r2, #28]
 8006c8e:	00d2      	lsls	r2, r2, #3
 8006c90:	4913      	ldr	r1, [pc, #76]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006c96:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	4a11      	ldr	r2, [pc, #68]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006c9c:	f043 0310 	orr.w	r3, r3, #16
 8006ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006ca8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cae:	f7fa fdcd 	bl	800184c <HAL_GetTick>
 8006cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cb4:	e008      	b.n	8006cc8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cb6:	f7fa fdc9 	bl	800184c <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e006      	b.n	8006cd6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cc8:	4b05      	ldr	r3, [pc, #20]	@ (8006ce0 <RCCEx_PLL2_Config+0x128>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0

}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	46020c00 	.word	0x46020c00
 8006ce4:	80800000 	.word	0x80800000

08006ce8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006cf0:	4b47      	ldr	r3, [pc, #284]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a46      	ldr	r2, [pc, #280]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cfa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cfc:	f7fa fda6 	bl	800184c <HAL_GetTick>
 8006d00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d04:	f7fa fda2 	bl	800184c <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e077      	b.n	8006e06 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d16:	4b3e      	ldr	r3, [pc, #248]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006d22:	4b3b      	ldr	r3, [pc, #236]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6811      	ldr	r1, [r2, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6852      	ldr	r2, [r2, #4]
 8006d36:	3a01      	subs	r2, #1
 8006d38:	0212      	lsls	r2, r2, #8
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	4934      	ldr	r1, [pc, #208]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	630b      	str	r3, [r1, #48]	@ 0x30
 8006d42:	4b33      	ldr	r3, [pc, #204]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d46:	4b33      	ldr	r3, [pc, #204]	@ (8006e14 <RCCEx_PLL3_Config+0x12c>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6892      	ldr	r2, [r2, #8]
 8006d4e:	3a01      	subs	r2, #1
 8006d50:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	68d2      	ldr	r2, [r2, #12]
 8006d58:	3a01      	subs	r2, #1
 8006d5a:	0252      	lsls	r2, r2, #9
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	4311      	orrs	r1, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6912      	ldr	r2, [r2, #16]
 8006d64:	3a01      	subs	r2, #1
 8006d66:	0412      	lsls	r2, r2, #16
 8006d68:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006d6c:	4311      	orrs	r1, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6952      	ldr	r2, [r2, #20]
 8006d72:	3a01      	subs	r2, #1
 8006d74:	0612      	lsls	r2, r2, #24
 8006d76:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	4924      	ldr	r1, [pc, #144]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006d82:	4b23      	ldr	r3, [pc, #140]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d86:	f023 020c 	bic.w	r2, r3, #12
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	4920      	ldr	r1, [pc, #128]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006d94:	4b1e      	ldr	r3, [pc, #120]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	491c      	ldr	r1, [pc, #112]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006da2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	4a1a      	ldr	r2, [pc, #104]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dae:	4b18      	ldr	r3, [pc, #96]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006db6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	69d2      	ldr	r2, [r2, #28]
 8006dbe:	00d2      	lsls	r2, r2, #3
 8006dc0:	4913      	ldr	r1, [pc, #76]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006dc6:	4b12      	ldr	r3, [pc, #72]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	4a11      	ldr	r2, [pc, #68]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006dcc:	f043 0310 	orr.w	r3, r3, #16
 8006dd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ddc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006dde:	f7fa fd35 	bl	800184c <HAL_GetTick>
 8006de2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006de4:	e008      	b.n	8006df8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006de6:	f7fa fd31 	bl	800184c <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e006      	b.n	8006e06 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006df8:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <RCCEx_PLL3_Config+0x128>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f0      	beq.n	8006de6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	46020c00 	.word	0x46020c00
 8006e14:	80800000 	.word	0x80800000

08006e18 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0fb      	b.n	8007022 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a7f      	ldr	r2, [pc, #508]	@ (800702c <HAL_SPI_Init+0x214>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <HAL_SPI_Init+0x26>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a7d      	ldr	r2, [pc, #500]	@ (8007030 <HAL_SPI_Init+0x218>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	e000      	b.n	8006e40 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006e3e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a78      	ldr	r2, [pc, #480]	@ (800702c <HAL_SPI_Init+0x214>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_SPI_Init+0x42>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a76      	ldr	r2, [pc, #472]	@ (8007030 <HAL_SPI_Init+0x218>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d105      	bne.n	8006e66 <HAL_SPI_Init+0x4e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d901      	bls.n	8006e66 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e0dd      	b.n	8007022 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 ffe8 	bl	8007e3c <SPI_GetPacketSize>
 8006e6c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a6e      	ldr	r2, [pc, #440]	@ (800702c <HAL_SPI_Init+0x214>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_SPI_Init+0x6a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6c      	ldr	r2, [pc, #432]	@ (8007030 <HAL_SPI_Init+0x218>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d102      	bne.n	8006e88 <HAL_SPI_Init+0x70>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d816      	bhi.n	8006eb6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e8c:	4a69      	ldr	r2, [pc, #420]	@ (8007034 <HAL_SPI_Init+0x21c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00e      	beq.n	8006eb0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a68      	ldr	r2, [pc, #416]	@ (8007038 <HAL_SPI_Init+0x220>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d009      	beq.n	8006eb0 <HAL_SPI_Init+0x98>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a66      	ldr	r2, [pc, #408]	@ (800703c <HAL_SPI_Init+0x224>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d004      	beq.n	8006eb0 <HAL_SPI_Init+0x98>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a65      	ldr	r2, [pc, #404]	@ (8007040 <HAL_SPI_Init+0x228>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d104      	bne.n	8006eba <HAL_SPI_Init+0xa2>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b10      	cmp	r3, #16
 8006eb4:	d901      	bls.n	8006eba <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e0b3      	b.n	8007022 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7f9 fe60 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0201 	bic.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006ef6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f00:	d119      	bne.n	8006f36 <HAL_SPI_Init+0x11e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f0a:	d103      	bne.n	8006f14 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d008      	beq.n	8006f26 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10c      	bne.n	8006f36 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f24:	d107      	bne.n	8006f36 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00f      	beq.n	8006f62 <HAL_SPI_Init+0x14a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b06      	cmp	r3, #6
 8006f48:	d90b      	bls.n	8006f62 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e007      	b.n	8006f72 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f84:	ea42 0103 	orr.w	r1, r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fde:	ea42 0103 	orr.w	r1, r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	46002000 	.word	0x46002000
 8007030:	56002000 	.word	0x56002000
 8007034:	40013000 	.word	0x40013000
 8007038:	50013000 	.word	0x50013000
 800703c:	40003800 	.word	0x40003800
 8007040:	50003800 	.word	0x50003800

08007044 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3320      	adds	r3, #32
 800705a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800705c:	f7fa fbf6 	bl	800184c <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	d001      	beq.n	8007072 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800706e:	2302      	movs	r3, #2
 8007070:	e1f3      	b.n	800745a <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_Transmit+0x3a>
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e1eb      	b.n	800745a <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_SPI_Transmit+0x4c>
 800708c:	2302      	movs	r3, #2
 800708e:	e1e4      	b.n	800745a <HAL_SPI_Transmit+0x416>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2203      	movs	r2, #3
 800709c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	88fa      	ldrh	r2, [r7, #6]
 80070ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80070e8:	d108      	bne.n	80070fc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e009      	b.n	8007110 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800710e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	88f9      	ldrh	r1, [r7, #6]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	430b      	orrs	r3, r1
 8007122:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0201 	orr.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10c      	bne.n	800715c <HAL_SPI_Transmit+0x118>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800714a:	d107      	bne.n	800715c <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800715a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	2b0f      	cmp	r3, #15
 8007162:	d95b      	bls.n	800721c <HAL_SPI_Transmit+0x1d8>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a8f      	ldr	r2, [pc, #572]	@ (80073a8 <HAL_SPI_Transmit+0x364>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d04f      	beq.n	800720e <HAL_SPI_Transmit+0x1ca>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a8e      	ldr	r2, [pc, #568]	@ (80073ac <HAL_SPI_Transmit+0x368>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d04a      	beq.n	800720e <HAL_SPI_Transmit+0x1ca>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a8c      	ldr	r2, [pc, #560]	@ (80073b0 <HAL_SPI_Transmit+0x36c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d045      	beq.n	800720e <HAL_SPI_Transmit+0x1ca>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a8b      	ldr	r2, [pc, #556]	@ (80073b4 <HAL_SPI_Transmit+0x370>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d147      	bne.n	800721c <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800718c:	e03f      	b.n	800720e <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d114      	bne.n	80071c6 <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ac:	1d1a      	adds	r2, r3, #4
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071c4:	e023      	b.n	800720e <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c6:	f7fa fb41 	bl	800184c <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d803      	bhi.n	80071de <HAL_SPI_Transmit+0x19a>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d102      	bne.n	80071e4 <HAL_SPI_Transmit+0x1a0>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d114      	bne.n	800720e <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fd5b 	bl	8007ca0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e125      	b.n	800745a <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1b9      	bne.n	800718e <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800721a:	e0f8      	b.n	800740e <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b07      	cmp	r3, #7
 8007222:	f240 80ed 	bls.w	8007400 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007226:	e05d      	b.n	80072e4 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b02      	cmp	r3, #2
 8007234:	d132      	bne.n	800729c <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d918      	bls.n	8007274 <HAL_SPI_Transmit+0x230>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d014      	beq.n	8007274 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725a:	1d1a      	adds	r2, r3, #4
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b02      	subs	r3, #2
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007272:	e037      	b.n	80072e4 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007278:	881a      	ldrh	r2, [r3, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007282:	1c9a      	adds	r2, r3, #2
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800729a:	e023      	b.n	80072e4 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729c:	f7fa fad6 	bl	800184c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d803      	bhi.n	80072b4 <HAL_SPI_Transmit+0x270>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_Transmit+0x276>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d114      	bne.n	80072e4 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 fcf0 	bl	8007ca0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e0ba      	b.n	800745a <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d19b      	bne.n	8007228 <HAL_SPI_Transmit+0x1e4>
 80072f0:	e08d      	b.n	800740e <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d15b      	bne.n	80073b8 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b03      	cmp	r3, #3
 800730a:	d918      	bls.n	800733e <HAL_SPI_Transmit+0x2fa>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007310:	2b40      	cmp	r3, #64	@ 0x40
 8007312:	d914      	bls.n	800733e <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b04      	subs	r3, #4
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800733c:	e060      	b.n	8007400 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b01      	cmp	r3, #1
 8007348:	d917      	bls.n	800737a <HAL_SPI_Transmit+0x336>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d013      	beq.n	800737a <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007356:	881a      	ldrh	r2, [r3, #0]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800736c:	b29b      	uxth	r3, r3
 800736e:	3b02      	subs	r3, #2
 8007370:	b29a      	uxth	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007378:	e042      	b.n	8007400 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3320      	adds	r3, #32
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80073a4:	e02c      	b.n	8007400 <HAL_SPI_Transmit+0x3bc>
 80073a6:	bf00      	nop
 80073a8:	40013000 	.word	0x40013000
 80073ac:	50013000 	.word	0x50013000
 80073b0:	40003800 	.word	0x40003800
 80073b4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073b8:	f7fa fa48 	bl	800184c <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d803      	bhi.n	80073d0 <HAL_SPI_Transmit+0x38c>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d102      	bne.n	80073d6 <HAL_SPI_Transmit+0x392>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d114      	bne.n	8007400 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fc62 	bl	8007ca0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e02c      	b.n	800745a <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	f47f af72 	bne.w	80072f2 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2200      	movs	r2, #0
 8007416:	2108      	movs	r1, #8
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fce1 	bl	8007de0 <SPI_WaitOnFlagUntilTimeout>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800742a:	f043 0220 	orr.w	r2, r3, #32
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fc33 	bl	8007ca0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8007458:	2300      	movs	r3, #0
  }
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop

08007464 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b01      	cmp	r3, #1
 800747c:	d001      	beq.n	8007482 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800747e:	2302      	movs	r3, #2
 8007480:	e192      	b.n	80077a8 <HAL_SPI_Transmit_DMA+0x344>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_SPI_Transmit_DMA+0x2a>
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e18a      	b.n	80077a8 <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_SPI_Transmit_DMA+0x3c>
 800749c:	2302      	movs	r3, #2
 800749e:	e183      	b.n	80077a8 <HAL_SPI_Transmit_DMA+0x344>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2203      	movs	r2, #3
 80074ac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	88fa      	ldrh	r2, [r7, #6]
 80074ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80074f8:	d108      	bne.n	800750c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e009      	b.n	8007520 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800751e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b0f      	cmp	r3, #15
 8007526:	d919      	bls.n	800755c <HAL_SPI_Transmit_DMA+0xf8>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d013      	beq.n	800755c <HAL_SPI_Transmit_DMA+0xf8>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007538:	4a9d      	ldr	r2, [pc, #628]	@ (80077b0 <HAL_SPI_Transmit_DMA+0x34c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d018      	beq.n	8007570 <HAL_SPI_Transmit_DMA+0x10c>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a9c      	ldr	r2, [pc, #624]	@ (80077b4 <HAL_SPI_Transmit_DMA+0x350>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d013      	beq.n	8007570 <HAL_SPI_Transmit_DMA+0x10c>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a9a      	ldr	r2, [pc, #616]	@ (80077b8 <HAL_SPI_Transmit_DMA+0x354>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00e      	beq.n	8007570 <HAL_SPI_Transmit_DMA+0x10c>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a99      	ldr	r2, [pc, #612]	@ (80077bc <HAL_SPI_Transmit_DMA+0x358>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d009      	beq.n	8007570 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007560:	2b07      	cmp	r3, #7
 8007562:	d90b      	bls.n	800757c <HAL_SPI_Transmit_DMA+0x118>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e115      	b.n	80077a8 <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b07      	cmp	r3, #7
 8007582:	d820      	bhi.n	80075c6 <HAL_SPI_Transmit_DMA+0x162>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d109      	bne.n	80075a4 <HAL_SPI_Transmit_DMA+0x140>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007596:	b29b      	uxth	r3, r3
 8007598:	3301      	adds	r3, #1
 800759a:	105b      	asrs	r3, r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d11e      	bne.n	80075ee <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3303      	adds	r3, #3
 80075ba:	109b      	asrs	r3, r3, #2
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075c4:	e013      	b.n	80075ee <HAL_SPI_Transmit_DMA+0x18a>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b0f      	cmp	r3, #15
 80075cc:	d80f      	bhi.n	80075ee <HAL_SPI_Transmit_DMA+0x18a>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d109      	bne.n	80075ee <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3301      	adds	r3, #1
 80075e4:	105b      	asrs	r3, r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f4:	4a72      	ldr	r2, [pc, #456]	@ (80077c0 <HAL_SPI_Transmit_DMA+0x35c>)
 80075f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075fe:	4a71      	ldr	r2, [pc, #452]	@ (80077c4 <HAL_SPI_Transmit_DMA+0x360>)
 8007600:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007608:	4a6f      	ldr	r2, [pc, #444]	@ (80077c8 <HAL_SPI_Transmit_DMA+0x364>)
 800760a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007612:	2200      	movs	r2, #0
 8007614:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007624:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b07      	cmp	r3, #7
 800762c:	d804      	bhi.n	8007638 <HAL_SPI_Transmit_DMA+0x1d4>
  {
    hspi->TxXferCount = Size;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	88fa      	ldrh	r2, [r7, #6]
 8007632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007636:	e010      	b.n	800765a <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b0f      	cmp	r3, #15
 800763e:	d806      	bhi.n	800764e <HAL_SPI_Transmit_DMA+0x1ea>
  {
    hspi->TxXferCount = Size * 2U;
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800764c:	e005      	b.n	800765a <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d02d      	beq.n	80076c6 <HAL_SPI_Transmit_DMA+0x262>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007672:	2b00      	cmp	r3, #0
 8007674:	d024      	beq.n	80076c0 <HAL_SPI_Transmit_DMA+0x25c>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f103 0220 	add.w	r2, r3, #32
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fc fd69 	bl	800418c <HAL_DMAEx_List_Start_IT>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75fb      	strb	r3, [r7, #23]
 80076be:	e014      	b.n	80076ea <HAL_SPI_Transmit_DMA+0x286>
    }
    else
    {
      status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
 80076c4:	e011      	b.n	80076ea <HAL_SPI_Transmit_DMA+0x286>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d0:	4619      	mov	r1, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3320      	adds	r3, #32
 80076d8:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076e0:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80076e2:	f7fc f87b 	bl	80037dc <HAL_DMA_Start_IT>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d011      	beq.n	8007714 <HAL_SPI_Transmit_DMA+0x2b0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076f6:	f043 0210 	orr.w	r2, r3, #16
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e049      	b.n	80077a8 <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800771a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800771c:	2b81      	cmp	r3, #129	@ 0x81
 800771e:	d108      	bne.n	8007732 <HAL_SPI_Transmit_DMA+0x2ce>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	0c1b      	lsrs	r3, r3, #16
 800772c:	041b      	lsls	r3, r3, #16
 800772e:	6053      	str	r3, [r2, #4]
 8007730:	e009      	b.n	8007746 <HAL_SPI_Transmit_DMA+0x2e2>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	041b      	lsls	r3, r3, #16
 800773c:	88f9      	ldrh	r1, [r7, #6]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	430b      	orrs	r3, r1
 8007744:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007754:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8007764:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0201 	orr.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10c      	bne.n	800779e <HAL_SPI_Transmit_DMA+0x33a>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800778c:	d107      	bne.n	800779e <HAL_SPI_Transmit_DMA+0x33a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800779c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40013000 	.word	0x40013000
 80077b4:	50013000 	.word	0x50013000
 80077b8:	40003800 	.word	0x40003800
 80077bc:	50003800 	.word	0x50003800
 80077c0:	08007c0b 	.word	0x08007c0b
 80077c4:	08007bc5 	.word	0x08007bc5
 80077c8:	08007c27 	.word	0x08007c27

080077cc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	@ 0x28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80077e4:	6a3a      	ldr	r2, [r7, #32]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80077fe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3330      	adds	r3, #48	@ 0x30
 8007806:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800780e:	2b00      	cmp	r3, #0
 8007810:	d010      	beq.n	8007834 <HAL_SPI_IRQHandler+0x68>
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f9bf 	bl	8007bb0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007832:	e19a      	b.n	8007b6a <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d113      	bne.n	8007866 <HAL_SPI_IRQHandler+0x9a>
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10e      	bne.n	8007866 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
    hspi->RxISR(hspi);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
    handled = 1UL;
 8007862:	2301      	movs	r3, #1
 8007864:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10f      	bne.n	8007890 <HAL_SPI_IRQHandler+0xc4>
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007880:	2b00      	cmp	r3, #0
 8007882:	d105      	bne.n	8007890 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
    handled = 1UL;
 800788c:	2301      	movs	r3, #1
 800788e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10f      	bne.n	80078ba <HAL_SPI_IRQHandler+0xee>
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d105      	bne.n	80078ba <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
    handled = 1UL;
 80078b6:	2301      	movs	r3, #1
 80078b8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 814f 	bne.w	8007b60 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 808b 	beq.w	80079e4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0208 	orr.w	r2, r2, #8
 80078dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699a      	ldr	r2, [r3, #24]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0210 	orr.w	r2, r2, #16
 80078ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078fc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0208 	bic.w	r2, r2, #8
 800790c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d13d      	bne.n	8007998 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800791c:	e036      	b.n	800798c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d90b      	bls.n	800793e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800792e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007930:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007936:	1d1a      	adds	r2, r3, #4
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800793c:	e01d      	b.n	800797a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b07      	cmp	r3, #7
 8007944:	d90b      	bls.n	800795e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	8812      	ldrh	r2, [r2, #0]
 800794e:	b292      	uxth	r2, r2
 8007950:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007956:	1c9a      	adds	r2, r3, #2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800795c:	e00d      	b.n	800797a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796a:	7812      	ldrb	r2, [r2, #0]
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1c2      	bne.n	800791e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f981 	bl	8007ca0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7f9 fe45 	bl	8001640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079b6:	e0d8      	b.n	8007b6a <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80079b8:	7cfb      	ldrb	r3, [r7, #19]
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	d103      	bne.n	80079c6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8e2 	bl	8007b88 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80079c4:	e0ce      	b.n	8007b64 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80079c6:	7cfb      	ldrb	r3, [r7, #19]
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d103      	bne.n	80079d4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f8d1 	bl	8007b74 <HAL_SPI_RxCpltCallback>
    return;
 80079d2:	e0c7      	b.n	8007b64 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80079d4:	7cfb      	ldrb	r3, [r7, #19]
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	f040 80c4 	bne.w	8007b64 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7f9 fe45 	bl	800166c <HAL_SPI_TxCpltCallback>
    return;
 80079e2:	e0bf      	b.n	8007b64 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80bd 	beq.w	8007b6a <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00f      	beq.n	8007a1a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a00:	f043 0204 	orr.w	r2, r3, #4
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	699a      	ldr	r2, [r3, #24]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a18:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00f      	beq.n	8007a44 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a2a:	f043 0201 	orr.w	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a42:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00f      	beq.n	8007a6e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a54:	f043 0208 	orr.w	r2, r3, #8
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00f      	beq.n	8007a98 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0220 	orr.w	r2, r2, #32
 8007a96:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d062      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8007ac0:	f023 0303 	bic.w	r3, r3, #3
 8007ac4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007acc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ad0:	d13e      	bne.n	8007b50 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ae0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d015      	beq.n	8007b18 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007af2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b70 <HAL_SPI_IRQHandler+0x3a4>)
 8007af4:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fb fecd 	bl	800389c <HAL_DMA_Abort_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d022      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b28:	4a11      	ldr	r2, [pc, #68]	@ (8007b70 <HAL_SPI_IRQHandler+0x3a4>)
 8007b2a:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fb feb2 	bl	800389c <HAL_DMA_Abort_IT>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d014      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b4e:	e00b      	b.n	8007b68 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7f9 fd71 	bl	8001640 <HAL_SPI_ErrorCallback>
    return;
 8007b5e:	e003      	b.n	8007b68 <HAL_SPI_IRQHandler+0x39c>
    return;
 8007b60:	bf00      	nop
 8007b62:	e002      	b.n	8007b6a <HAL_SPI_IRQHandler+0x39e>
    return;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <HAL_SPI_IRQHandler+0x39e>
    return;
 8007b68:	bf00      	nop
  }
}
 8007b6a:	3728      	adds	r7, #40	@ 0x28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	08007c6d 	.word	0x08007c6d

08007b74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bd0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	d011      	beq.n	8007c02 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be6:	2b81      	cmp	r3, #129	@ 0x81
 8007be8:	d103      	bne.n	8007bf2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7f9 fd3e 	bl	800166c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007bf0:	e007      	b.n	8007c02 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0208 	orr.w	r2, r2, #8
 8007c00:	611a      	str	r2, [r3, #16]
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c16:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7ff ffbf 	bl	8007b9c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c32:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7fb ffbb 	bl	8003bb0 <HAL_DMA_GetError>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d011      	beq.n	8007c64 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f82d 	bl	8007ca0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c4c:	f043 0210 	orr.w	r2, r3, #16
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7f9 fcee 	bl	8001640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7f9 fcd4 	bl	8001640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0208 	orr.w	r2, r2, #8
 8007cbe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0210 	orr.w	r2, r2, #16
 8007cce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007d02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d014      	beq.n	8007d3a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00f      	beq.n	8007d3a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0220 	orr.w	r2, r2, #32
 8007d38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d014      	beq.n	8007d70 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00f      	beq.n	8007d70 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d56:	f043 0204 	orr.w	r2, r3, #4
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d80:	f043 0201 	orr.w	r2, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699a      	ldr	r2, [r3, #24]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00f      	beq.n	8007dc4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007daa:	f043 0208 	orr.w	r2, r3, #8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dc2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007dd4:	bf00      	nop
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	4613      	mov	r3, r2
 8007dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007df0:	e010      	b.n	8007e14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007df2:	f7f9 fd2b 	bl	800184c <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d803      	bhi.n	8007e0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d102      	bne.n	8007e10 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e00f      	b.n	8007e34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d0df      	beq.n	8007df2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e48:	095b      	lsrs	r3, r3, #5
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	3307      	adds	r3, #7
 8007e5a:	08db      	lsrs	r3, r3, #3
 8007e5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	fb02 f303 	mul.w	r3, r2, r3
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d12e      	bne.n	8007ee6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e028      	b.n	8007ee8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0201 	bic.w	r2, r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007ec2:	ea42 0103 	orr.w	r1, r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e000      	b.n	8007ee8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
  }
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e049      	b.n	8007f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7f8 fef4 	bl	8000d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f000 fb50 	bl	80085d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e072      	b.n	80080a2 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a35      	ldr	r2, [pc, #212]	@ (80080b0 <HAL_TIM_Base_Start_IT+0x10c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d040      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a34      	ldr	r2, [pc, #208]	@ (80080b4 <HAL_TIM_Base_Start_IT+0x110>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d03b      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff0:	d036      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ffa:	d031      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a2d      	ldr	r2, [pc, #180]	@ (80080b8 <HAL_TIM_Base_Start_IT+0x114>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d02c      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2c      	ldr	r2, [pc, #176]	@ (80080bc <HAL_TIM_Base_Start_IT+0x118>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d027      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2a      	ldr	r2, [pc, #168]	@ (80080c0 <HAL_TIM_Base_Start_IT+0x11c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d022      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a29      	ldr	r2, [pc, #164]	@ (80080c4 <HAL_TIM_Base_Start_IT+0x120>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d01d      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a27      	ldr	r2, [pc, #156]	@ (80080c8 <HAL_TIM_Base_Start_IT+0x124>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d018      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a26      	ldr	r2, [pc, #152]	@ (80080cc <HAL_TIM_Base_Start_IT+0x128>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a24      	ldr	r2, [pc, #144]	@ (80080d0 <HAL_TIM_Base_Start_IT+0x12c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00e      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a23      	ldr	r2, [pc, #140]	@ (80080d4 <HAL_TIM_Base_Start_IT+0x130>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d009      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a21      	ldr	r2, [pc, #132]	@ (80080d8 <HAL_TIM_Base_Start_IT+0x134>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xbc>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a20      	ldr	r2, [pc, #128]	@ (80080dc <HAL_TIM_Base_Start_IT+0x138>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d115      	bne.n	800808c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	4b1e      	ldr	r3, [pc, #120]	@ (80080e0 <HAL_TIM_Base_Start_IT+0x13c>)
 8008068:	4013      	ands	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b06      	cmp	r3, #6
 8008070:	d015      	beq.n	800809e <HAL_TIM_Base_Start_IT+0xfa>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008078:	d011      	beq.n	800809e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0201 	orr.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808a:	e008      	b.n	800809e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	e000      	b.n	80080a0 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40012c00 	.word	0x40012c00
 80080b4:	50012c00 	.word	0x50012c00
 80080b8:	40000400 	.word	0x40000400
 80080bc:	50000400 	.word	0x50000400
 80080c0:	40000800 	.word	0x40000800
 80080c4:	50000800 	.word	0x50000800
 80080c8:	40000c00 	.word	0x40000c00
 80080cc:	50000c00 	.word	0x50000c00
 80080d0:	40013400 	.word	0x40013400
 80080d4:	50013400 	.word	0x50013400
 80080d8:	40014000 	.word	0x40014000
 80080dc:	50014000 	.word	0x50014000
 80080e0:	00010007 	.word	0x00010007

080080e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d020      	beq.n	8008148 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01b      	beq.n	8008148 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0202 	mvn.w	r2, #2
 8008118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fa34 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 8008134:	e005      	b.n	8008142 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa26 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fa37 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	d020      	beq.n	8008194 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01b      	beq.n	8008194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0204 	mvn.w	r2, #4
 8008164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa0e 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 8008180:	e005      	b.n	800818e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa00 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fa11 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d020      	beq.n	80081e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01b      	beq.n	80081e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f06f 0208 	mvn.w	r2, #8
 80081b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2204      	movs	r2, #4
 80081b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9e8 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 80081cc:	e005      	b.n	80081da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f9da 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f9eb 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d020      	beq.n	800822c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01b      	beq.n	800822c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0210 	mvn.w	r2, #16
 80081fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2208      	movs	r2, #8
 8008202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9c2 	bl	800859c <HAL_TIM_IC_CaptureCallback>
 8008218:	e005      	b.n	8008226 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f9b4 	bl	8008588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f9c5 	bl	80085b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00c      	beq.n	8008250 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d007      	beq.n	8008250 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0201 	mvn.w	r2, #1
 8008248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7f8 fb62 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00c      	beq.n	800827e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc1b 	bl	8008ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00c      	beq.n	80082a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800828e:	2b00      	cmp	r3, #0
 8008290:	d007      	beq.n	80082a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800829a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fc13 	bl	8008ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00c      	beq.n	80082c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d007      	beq.n	80082c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f97f 	bl	80085c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00c      	beq.n	80082ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f06f 0220 	mvn.w	r2, #32
 80082e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fbdb 	bl	8008aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00c      	beq.n	800830e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d007      	beq.n	800830e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fbe7 	bl	8008adc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00c      	beq.n	8008332 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800832a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fbdf 	bl	8008af0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00c      	beq.n	8008356 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800834e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fbd7 	bl	8008b04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00c      	beq.n	800837a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d007      	beq.n	800837a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fbcf 	bl	8008b18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008398:	2b01      	cmp	r3, #1
 800839a:	d101      	bne.n	80083a0 <HAL_TIM_ConfigClockSource+0x1c>
 800839c:	2302      	movs	r3, #2
 800839e:	e0e6      	b.n	800856e <HAL_TIM_ConfigClockSource+0x1ea>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80083be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a67      	ldr	r2, [pc, #412]	@ (8008578 <HAL_TIM_ConfigClockSource+0x1f4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	f000 80b1 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 80083e0:	4a65      	ldr	r2, [pc, #404]	@ (8008578 <HAL_TIM_ConfigClockSource+0x1f4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	f200 80b6 	bhi.w	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 80083e8:	4a64      	ldr	r2, [pc, #400]	@ (800857c <HAL_TIM_ConfigClockSource+0x1f8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	f000 80a9 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 80083f0:	4a62      	ldr	r2, [pc, #392]	@ (800857c <HAL_TIM_ConfigClockSource+0x1f8>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	f200 80ae 	bhi.w	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 80083f8:	4a61      	ldr	r2, [pc, #388]	@ (8008580 <HAL_TIM_ConfigClockSource+0x1fc>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	f000 80a1 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 8008400:	4a5f      	ldr	r2, [pc, #380]	@ (8008580 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	f200 80a6 	bhi.w	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008408:	4a5e      	ldr	r2, [pc, #376]	@ (8008584 <HAL_TIM_ConfigClockSource+0x200>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f000 8099 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 8008410:	4a5c      	ldr	r2, [pc, #368]	@ (8008584 <HAL_TIM_ConfigClockSource+0x200>)
 8008412:	4293      	cmp	r3, r2
 8008414:	f200 809e 	bhi.w	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008418:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800841c:	f000 8091 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 8008420:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008424:	f200 8096 	bhi.w	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008428:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800842c:	f000 8089 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 8008430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008434:	f200 808e 	bhi.w	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800843c:	d03e      	beq.n	80084bc <HAL_TIM_ConfigClockSource+0x138>
 800843e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008442:	f200 8087 	bhi.w	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800844a:	f000 8086 	beq.w	800855a <HAL_TIM_ConfigClockSource+0x1d6>
 800844e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008452:	d87f      	bhi.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008454:	2b70      	cmp	r3, #112	@ 0x70
 8008456:	d01a      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x10a>
 8008458:	2b70      	cmp	r3, #112	@ 0x70
 800845a:	d87b      	bhi.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 800845c:	2b60      	cmp	r3, #96	@ 0x60
 800845e:	d050      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x17e>
 8008460:	2b60      	cmp	r3, #96	@ 0x60
 8008462:	d877      	bhi.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008464:	2b50      	cmp	r3, #80	@ 0x50
 8008466:	d03c      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x15e>
 8008468:	2b50      	cmp	r3, #80	@ 0x50
 800846a:	d873      	bhi.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 800846c:	2b40      	cmp	r3, #64	@ 0x40
 800846e:	d058      	beq.n	8008522 <HAL_TIM_ConfigClockSource+0x19e>
 8008470:	2b40      	cmp	r3, #64	@ 0x40
 8008472:	d86f      	bhi.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008474:	2b30      	cmp	r3, #48	@ 0x30
 8008476:	d064      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 8008478:	2b30      	cmp	r3, #48	@ 0x30
 800847a:	d86b      	bhi.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 800847c:	2b20      	cmp	r3, #32
 800847e:	d060      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 8008480:	2b20      	cmp	r3, #32
 8008482:	d867      	bhi.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d05c      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 8008488:	2b10      	cmp	r3, #16
 800848a:	d05a      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0x1be>
 800848c:	e062      	b.n	8008554 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800849e:	f000 fa1d 	bl	80088dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	609a      	str	r2, [r3, #8]
      break;
 80084ba:	e04f      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084cc:	f000 fa06 	bl	80088dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689a      	ldr	r2, [r3, #8]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084de:	609a      	str	r2, [r3, #8]
      break;
 80084e0:	e03c      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ee:	461a      	mov	r2, r3
 80084f0:	f000 f978 	bl	80087e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2150      	movs	r1, #80	@ 0x50
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f9d1 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 8008500:	e02c      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800850e:	461a      	mov	r2, r3
 8008510:	f000 f997 	bl	8008842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2160      	movs	r1, #96	@ 0x60
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f9c1 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 8008520:	e01c      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800852e:	461a      	mov	r2, r3
 8008530:	f000 f958 	bl	80087e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2140      	movs	r1, #64	@ 0x40
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f9b1 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 8008540:	e00c      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f000 f9a8 	bl	80088a2 <TIM_ITRx_SetConfig>
      break;
 8008552:	e003      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	73fb      	strb	r3, [r7, #15]
      break;
 8008558:	e000      	b.n	800855c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800855a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800856c:	7bfb      	ldrb	r3, [r7, #15]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	00100070 	.word	0x00100070
 800857c:	00100040 	.word	0x00100040
 8008580:	00100030 	.word	0x00100030
 8008584:	00100020 	.word	0x00100020

08008588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a6e      	ldr	r2, [pc, #440]	@ (80087a4 <TIM_Base_SetConfig+0x1cc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d02b      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a6d      	ldr	r2, [pc, #436]	@ (80087a8 <TIM_Base_SetConfig+0x1d0>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d027      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085fe:	d023      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008606:	d01f      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a68      	ldr	r2, [pc, #416]	@ (80087ac <TIM_Base_SetConfig+0x1d4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d01b      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a67      	ldr	r2, [pc, #412]	@ (80087b0 <TIM_Base_SetConfig+0x1d8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d017      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a66      	ldr	r2, [pc, #408]	@ (80087b4 <TIM_Base_SetConfig+0x1dc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d013      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a65      	ldr	r2, [pc, #404]	@ (80087b8 <TIM_Base_SetConfig+0x1e0>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00f      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a64      	ldr	r2, [pc, #400]	@ (80087bc <TIM_Base_SetConfig+0x1e4>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00b      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a63      	ldr	r2, [pc, #396]	@ (80087c0 <TIM_Base_SetConfig+0x1e8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d007      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a62      	ldr	r2, [pc, #392]	@ (80087c4 <TIM_Base_SetConfig+0x1ec>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_Base_SetConfig+0x70>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a61      	ldr	r2, [pc, #388]	@ (80087c8 <TIM_Base_SetConfig+0x1f0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d108      	bne.n	800865a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800864e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a51      	ldr	r2, [pc, #324]	@ (80087a4 <TIM_Base_SetConfig+0x1cc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d043      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a50      	ldr	r2, [pc, #320]	@ (80087a8 <TIM_Base_SetConfig+0x1d0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d03f      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008670:	d03b      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008678:	d037      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a4b      	ldr	r2, [pc, #300]	@ (80087ac <TIM_Base_SetConfig+0x1d4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d033      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a4a      	ldr	r2, [pc, #296]	@ (80087b0 <TIM_Base_SetConfig+0x1d8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d02f      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a49      	ldr	r2, [pc, #292]	@ (80087b4 <TIM_Base_SetConfig+0x1dc>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d02b      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a48      	ldr	r2, [pc, #288]	@ (80087b8 <TIM_Base_SetConfig+0x1e0>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d027      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a47      	ldr	r2, [pc, #284]	@ (80087bc <TIM_Base_SetConfig+0x1e4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d023      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a46      	ldr	r2, [pc, #280]	@ (80087c0 <TIM_Base_SetConfig+0x1e8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01f      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a45      	ldr	r2, [pc, #276]	@ (80087c4 <TIM_Base_SetConfig+0x1ec>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d01b      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a44      	ldr	r2, [pc, #272]	@ (80087c8 <TIM_Base_SetConfig+0x1f0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d017      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a43      	ldr	r2, [pc, #268]	@ (80087cc <TIM_Base_SetConfig+0x1f4>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d013      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a42      	ldr	r2, [pc, #264]	@ (80087d0 <TIM_Base_SetConfig+0x1f8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00f      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a41      	ldr	r2, [pc, #260]	@ (80087d4 <TIM_Base_SetConfig+0x1fc>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00b      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a40      	ldr	r2, [pc, #256]	@ (80087d8 <TIM_Base_SetConfig+0x200>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d007      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a3f      	ldr	r2, [pc, #252]	@ (80087dc <TIM_Base_SetConfig+0x204>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <TIM_Base_SetConfig+0x112>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a3e      	ldr	r2, [pc, #248]	@ (80087e0 <TIM_Base_SetConfig+0x208>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d108      	bne.n	80086fc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a20      	ldr	r2, [pc, #128]	@ (80087a4 <TIM_Base_SetConfig+0x1cc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d023      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a1f      	ldr	r2, [pc, #124]	@ (80087a8 <TIM_Base_SetConfig+0x1d0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d01f      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a24      	ldr	r2, [pc, #144]	@ (80087c4 <TIM_Base_SetConfig+0x1ec>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d01b      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a23      	ldr	r2, [pc, #140]	@ (80087c8 <TIM_Base_SetConfig+0x1f0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d017      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a22      	ldr	r2, [pc, #136]	@ (80087cc <TIM_Base_SetConfig+0x1f4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d013      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a21      	ldr	r2, [pc, #132]	@ (80087d0 <TIM_Base_SetConfig+0x1f8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00f      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a20      	ldr	r2, [pc, #128]	@ (80087d4 <TIM_Base_SetConfig+0x1fc>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00b      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a1f      	ldr	r2, [pc, #124]	@ (80087d8 <TIM_Base_SetConfig+0x200>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d007      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a1e      	ldr	r2, [pc, #120]	@ (80087dc <TIM_Base_SetConfig+0x204>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0x198>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a1d      	ldr	r2, [pc, #116]	@ (80087e0 <TIM_Base_SetConfig+0x208>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d103      	bne.n	8008778 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	691a      	ldr	r2, [r3, #16]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b01      	cmp	r3, #1
 8008788:	d105      	bne.n	8008796 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f023 0201 	bic.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	611a      	str	r2, [r3, #16]
  }
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	50012c00 	.word	0x50012c00
 80087ac:	40000400 	.word	0x40000400
 80087b0:	50000400 	.word	0x50000400
 80087b4:	40000800 	.word	0x40000800
 80087b8:	50000800 	.word	0x50000800
 80087bc:	40000c00 	.word	0x40000c00
 80087c0:	50000c00 	.word	0x50000c00
 80087c4:	40013400 	.word	0x40013400
 80087c8:	50013400 	.word	0x50013400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	50014000 	.word	0x50014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	50014400 	.word	0x50014400
 80087dc:	40014800 	.word	0x40014800
 80087e0:	50014800 	.word	0x50014800

080087e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800880e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f023 030a 	bic.w	r3, r3, #10
 8008820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008842:	b480      	push	{r7}
 8008844:	b087      	sub	sp, #28
 8008846:	af00      	add	r7, sp, #0
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f023 0210 	bic.w	r2, r3, #16
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800886c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	031b      	lsls	r3, r3, #12
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800887e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b085      	sub	sp, #20
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80088b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f043 0307 	orr.w	r3, r3, #7
 80088c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	609a      	str	r2, [r3, #8]
}
 80088d0:	bf00      	nop
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	021a      	lsls	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	431a      	orrs	r2, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4313      	orrs	r3, r2
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	609a      	str	r2, [r3, #8]
}
 8008910:	bf00      	nop
 8008912:	371c      	adds	r7, #28
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008930:	2302      	movs	r3, #2
 8008932:	e097      	b.n	8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a45      	ldr	r2, [pc, #276]	@ (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00e      	beq.n	800897c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a44      	ldr	r2, [pc, #272]	@ (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d009      	beq.n	800897c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a42      	ldr	r2, [pc, #264]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a41      	ldr	r2, [pc, #260]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d108      	bne.n	800898e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008982:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d040      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d03b      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c8:	d036      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089d2:	d031      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a29      	ldr	r2, [pc, #164]	@ (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d02c      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a28      	ldr	r2, [pc, #160]	@ (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d027      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a26      	ldr	r2, [pc, #152]	@ (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d022      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a25      	ldr	r2, [pc, #148]	@ (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d01d      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a23      	ldr	r2, [pc, #140]	@ (8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d018      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a22      	ldr	r2, [pc, #136]	@ (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d013      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a18      	ldr	r2, [pc, #96]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00e      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a17      	ldr	r2, [pc, #92]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d009      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a1b      	ldr	r2, [pc, #108]	@ (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d004      	beq.n	8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a1a      	ldr	r2, [pc, #104]	@ (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d10c      	bne.n	8008a52 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	40012c00 	.word	0x40012c00
 8008a74:	50012c00 	.word	0x50012c00
 8008a78:	40013400 	.word	0x40013400
 8008a7c:	50013400 	.word	0x50013400
 8008a80:	40000400 	.word	0x40000400
 8008a84:	50000400 	.word	0x50000400
 8008a88:	40000800 	.word	0x40000800
 8008a8c:	50000800 	.word	0x50000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	50000c00 	.word	0x50000c00
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	50014000 	.word	0x50014000

08008aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <__NVIC_SetPriority>:
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	db0a      	blt.n	8008b56 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	490c      	ldr	r1, [pc, #48]	@ (8008b78 <__NVIC_SetPriority+0x4c>)
 8008b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b4a:	0112      	lsls	r2, r2, #4
 8008b4c:	b2d2      	uxtb	r2, r2
 8008b4e:	440b      	add	r3, r1
 8008b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b54:	e00a      	b.n	8008b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	4908      	ldr	r1, [pc, #32]	@ (8008b7c <__NVIC_SetPriority+0x50>)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	3b04      	subs	r3, #4
 8008b64:	0112      	lsls	r2, r2, #4
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	440b      	add	r3, r1
 8008b6a:	761a      	strb	r2, [r3, #24]
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	e000e100 	.word	0xe000e100
 8008b7c:	e000ed00 	.word	0xe000ed00

08008b80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b84:	4b05      	ldr	r3, [pc, #20]	@ (8008b9c <SysTick_Handler+0x1c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b88:	f002 faaa 	bl	800b0e0 <xTaskGetSchedulerState>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d001      	beq.n	8008b96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b92:	f003 f81d 	bl	800bbd0 <xPortSysTickHandler>
  }
}
 8008b96:	bf00      	nop
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	e000e010 	.word	0xe000e010

08008ba0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f06f 0004 	mvn.w	r0, #4
 8008baa:	f7ff ffbf 	bl	8008b2c <__NVIC_SetPriority>
#endif
}
 8008bae:	bf00      	nop
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bbc:	f3ef 8305 	mrs	r3, IPSR
 8008bc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bc2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	e013      	b.n	8008bf6 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8008bce:	f002 fa87 	bl	800b0e0 <xTaskGetSchedulerState>
 8008bd2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d00d      	beq.n	8008bf6 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008bda:	f3ef 8310 	mrs	r3, PRIMASK
 8008bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8008be0:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008be6:	f3ef 8311 	mrs	r3, BASEPRI
 8008bea:	607b      	str	r3, [r7, #4]
  return(result);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8008bf6:	697b      	ldr	r3, [r7, #20]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008c06:	f7ff ffd4 	bl	8008bb2 <IRQ_Context>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8008c10:	f06f 0305 	mvn.w	r3, #5
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	e012      	b.n	8008c3e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8008c18:	f002 fa62 	bl	800b0e0 <xTaskGetSchedulerState>
 8008c1c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d109      	bne.n	8008c38 <osKernelInitialize+0x38>
 8008c24:	4b08      	ldr	r3, [pc, #32]	@ (8008c48 <osKernelInitialize+0x48>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d105      	bne.n	8008c38 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c2c:	4b06      	ldr	r3, [pc, #24]	@ (8008c48 <osKernelInitialize+0x48>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	607b      	str	r3, [r7, #4]
 8008c36:	e002      	b.n	8008c3e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8008c38:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008c3e:	687b      	ldr	r3, [r7, #4]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000608 	.word	0x20000608

08008c4c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008c52:	f7ff ffae 	bl	8008bb2 <IRQ_Context>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <osKernelStart+0x18>
    stat = osErrorISR;
 8008c5c:	f06f 0305 	mvn.w	r3, #5
 8008c60:	607b      	str	r3, [r7, #4]
 8008c62:	e016      	b.n	8008c92 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8008c64:	f002 fa3c 	bl	800b0e0 <xTaskGetSchedulerState>
 8008c68:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10d      	bne.n	8008c8c <osKernelStart+0x40>
 8008c70:	4b0a      	ldr	r3, [pc, #40]	@ (8008c9c <osKernelStart+0x50>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d109      	bne.n	8008c8c <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c78:	f7ff ff92 	bl	8008ba0 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8008c7c:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <osKernelStart+0x50>)
 8008c7e:	2202      	movs	r2, #2
 8008c80:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c82:	f001 fcd7 	bl	800a634 <vTaskStartScheduler>
      stat = osOK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	607b      	str	r3, [r7, #4]
 8008c8a:	e002      	b.n	8008c92 <osKernelStart+0x46>
    } else {
      stat = osError;
 8008c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c90:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008c92:	687b      	ldr	r3, [r7, #4]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20000608 	.word	0x20000608

08008ca0 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08e      	sub	sp, #56	@ 0x38
 8008ca4:	af04      	add	r7, sp, #16
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8008cb0:	f7ff ff7f 	bl	8008bb2 <IRQ_Context>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d17e      	bne.n	8008db8 <osThreadNew+0x118>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d07b      	beq.n	8008db8 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8008cc0:	2380      	movs	r3, #128	@ 0x80
 8008cc2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008cc4:	2318      	movs	r3, #24
 8008cc6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d045      	beq.n	8008d64 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <osThreadNew+0x46>
        name = attr->name;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d008      	beq.n	8008d0c <osThreadNew+0x6c>
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	2b38      	cmp	r3, #56	@ 0x38
 8008cfe:	d805      	bhi.n	8008d0c <osThreadNew+0x6c>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e054      	b.n	8008dba <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	089b      	lsrs	r3, r3, #2
 8008d1e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00e      	beq.n	8008d46 <osThreadNew+0xa6>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2ba7      	cmp	r3, #167	@ 0xa7
 8008d2e:	d90a      	bls.n	8008d46 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d006      	beq.n	8008d46 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8008d40:	2301      	movs	r3, #1
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e010      	b.n	8008d68 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10c      	bne.n	8008d68 <osThreadNew+0xc8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d108      	bne.n	8008d68 <osThreadNew+0xc8>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	e001      	b.n	8008d68 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d110      	bne.n	8008d90 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d76:	9202      	str	r2, [sp, #8]
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	6a3a      	ldr	r2, [r7, #32]
 8008d82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f001 fa6f 	bl	800a268 <xTaskCreateStatic>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e013      	b.n	8008db8 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d110      	bne.n	8008db8 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	f107 0314 	add.w	r3, r7, #20
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f001 faaa 	bl	800a302 <xTaskCreate>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d001      	beq.n	8008db8 <osThreadNew+0x118>
            hTask = NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8008db8:	697b      	ldr	r3, [r7, #20]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3728      	adds	r7, #40	@ 0x28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8008dca:	f7ff fef2 	bl	8008bb2 <IRQ_Context>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <osDelay+0x1a>
    stat = osErrorISR;
 8008dd4:	f06f 0305 	mvn.w	r3, #5
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	e007      	b.n	8008dec <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <osDelay+0x2a>
      vTaskDelay(ticks);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fbfe 	bl	800a5e8 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b088      	sub	sp, #32
 8008dfa:	af02      	add	r7, sp, #8
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 8008e06:	f7ff fed4 	bl	8008bb2 <IRQ_Context>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d175      	bne.n	8008efc <osSemaphoreNew+0x106>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d072      	beq.n	8008efc <osSemaphoreNew+0x106>
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d86e      	bhi.n	8008efc <osSemaphoreNew+0x106>
    mem = -1;
 8008e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e22:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d015      	beq.n	8008e56 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d006      	beq.n	8008e40 <osSemaphoreNew+0x4a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2b4f      	cmp	r3, #79	@ 0x4f
 8008e38:	d902      	bls.n	8008e40 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	e00c      	b.n	8008e5a <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <osSemaphoreNew+0x64>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	613b      	str	r3, [r7, #16]
 8008e54:	e001      	b.n	8008e5a <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	d04c      	beq.n	8008efc <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d128      	bne.n	8008eba <osSemaphoreNew+0xc4>
        if (mem == 1) {
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d10a      	bne.n	8008e84 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2203      	movs	r2, #3
 8008e74:	9200      	str	r2, [sp, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	2100      	movs	r1, #0
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f000 fb2f 	bl	80094de <xQueueGenericCreateStatic>
 8008e80:	6178      	str	r0, [r7, #20]
 8008e82:	e005      	b.n	8008e90 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008e84:	2203      	movs	r2, #3
 8008e86:	2100      	movs	r1, #0
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f000 fb71 	bl	8009570 <xQueueGenericCreate>
 8008e8e:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d022      	beq.n	8008edc <osSemaphoreNew+0xe6>
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01f      	beq.n	8008edc <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	6978      	ldr	r0, [r7, #20]
 8008ea4:	f000 fc24 	bl	80096f0 <xQueueGenericSend>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d016      	beq.n	8008edc <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 8008eae:	6978      	ldr	r0, [r7, #20]
 8008eb0:	f000 ffeb 	bl	8009e8a <vQueueDelete>
            hSemaphore = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e010      	b.n	8008edc <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d108      	bne.n	8008ed2 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 fbbf 	bl	800964c <xQueueCreateCountingSemaphoreStatic>
 8008ece:	6178      	str	r0, [r7, #20]
 8008ed0:	e004      	b.n	8008edc <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 fbe4 	bl	80096a2 <xQueueCreateCountingSemaphore>
 8008eda:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00c      	beq.n	8008efc <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <osSemaphoreNew+0x106>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6978      	ldr	r0, [r7, #20]
 8008ef8:	f001 f90c 	bl	800a114 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 8008efc:	697b      	ldr	r3, [r7, #20]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008f20:	f06f 0303 	mvn.w	r3, #3
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	e034      	b.n	8008f92 <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 8008f28:	f7ff fe43 	bl	8008bb2 <IRQ_Context>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01e      	beq.n	8008f70 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 8008f38:	f06f 0303 	mvn.w	r3, #3
 8008f3c:	617b      	str	r3, [r7, #20]
 8008f3e:	e028      	b.n	8008f92 <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008f44:	f107 030c 	add.w	r3, r7, #12
 8008f48:	461a      	mov	r2, r3
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	6938      	ldr	r0, [r7, #16]
 8008f4e:	f000 ff2c 	bl	8009daa <xQueueReceiveFromISR>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d003      	beq.n	8008f60 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 8008f58:	f06f 0302 	mvn.w	r3, #2
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e018      	b.n	8008f92 <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d015      	beq.n	8008f92 <osSemaphoreAcquire+0x8a>
 8008f66:	4b0d      	ldr	r3, [pc, #52]	@ (8008f9c <osSemaphoreAcquire+0x94>)
 8008f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	e010      	b.n	8008f92 <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6938      	ldr	r0, [r7, #16]
 8008f74:	f000 fe3f 	bl	8009bf6 <xQueueSemaphoreTake>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d009      	beq.n	8008f92 <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 8008f84:	f06f 0301 	mvn.w	r3, #1
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	e002      	b.n	8008f92 <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 8008f8c:	f06f 0302 	mvn.w	r3, #2
 8008f90:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8008f92:	697b      	ldr	r3, [r7, #20]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d103      	bne.n	8008fbe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008fb6:	f06f 0303 	mvn.w	r3, #3
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	e027      	b.n	800900e <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 8008fbe:	f7ff fdf8 	bl	8008bb2 <IRQ_Context>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d016      	beq.n	8008ff6 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008fcc:	f107 030c 	add.w	r3, r7, #12
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6938      	ldr	r0, [r7, #16]
 8008fd4:	f000 fcdd 	bl	8009992 <xQueueGiveFromISR>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d003      	beq.n	8008fe6 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8008fde:	f06f 0302 	mvn.w	r3, #2
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	e013      	b.n	800900e <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d010      	beq.n	800900e <osSemaphoreRelease+0x6e>
 8008fec:	4b0a      	ldr	r3, [pc, #40]	@ (8009018 <osSemaphoreRelease+0x78>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	e00b      	b.n	800900e <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	6938      	ldr	r0, [r7, #16]
 8008ffe:	f000 fb77 	bl	80096f0 <xQueueGenericSend>
 8009002:	4603      	mov	r3, r0
 8009004:	2b01      	cmp	r3, #1
 8009006:	d002      	beq.n	800900e <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 8009008:	f06f 0302 	mvn.w	r3, #2
 800900c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800900e:	697b      	ldr	r3, [r7, #20]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af02      	add	r7, sp, #8
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800902c:	f7ff fdc1 	bl	8008bb2 <IRQ_Context>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d15f      	bne.n	80090f6 <osMessageQueueNew+0xda>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d05c      	beq.n	80090f6 <osMessageQueueNew+0xda>
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d059      	beq.n	80090f6 <osMessageQueueNew+0xda>
    mem = -1;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295
 8009046:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d029      	beq.n	80090a2 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d012      	beq.n	800907c <osMessageQueueNew+0x60>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	2b4f      	cmp	r3, #79	@ 0x4f
 800905c:	d90e      	bls.n	800907c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695a      	ldr	r2, [r3, #20]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	fb01 f303 	mul.w	r3, r1, r3
 8009072:	429a      	cmp	r2, r3
 8009074:	d302      	bcc.n	800907c <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8009076:	2301      	movs	r3, #1
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	e014      	b.n	80090a6 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d110      	bne.n	80090a6 <osMessageQueueNew+0x8a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10c      	bne.n	80090a6 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009090:	2b00      	cmp	r3, #0
 8009092:	d108      	bne.n	80090a6 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d104      	bne.n	80090a6 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]
 80090a0:	e001      	b.n	80090a6 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d10b      	bne.n	80090c4 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2100      	movs	r1, #0
 80090b6:	9100      	str	r1, [sp, #0]
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fa0f 	bl	80094de <xQueueGenericCreateStatic>
 80090c0:	6178      	str	r0, [r7, #20]
 80090c2:	e008      	b.n	80090d6 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d105      	bne.n	80090d6 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80090ca:	2200      	movs	r2, #0
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fa4e 	bl	8009570 <xQueueGenericCreate>
 80090d4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d009      	beq.n	80090f6 <osMessageQueueNew+0xda>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6978      	ldr	r0, [r7, #20]
 80090f2:	f001 f80f 	bl	800a114 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 80090f6:	697b      	ldr	r3, [r7, #20]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 8009118:	f7ff fd4b 	bl	8008bb2 <IRQ_Context>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d024      	beq.n	800916c <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <osMessageQueuePut+0x34>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <osMessageQueuePut+0x34>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 8009134:	f06f 0303 	mvn.w	r3, #3
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	e034      	b.n	80091a6 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009140:	f107 0214 	add.w	r2, r7, #20
 8009144:	2300      	movs	r3, #0
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	69b8      	ldr	r0, [r7, #24]
 800914a:	f000 fb9e 	bl	800988a <xQueueGenericSendFromISR>
 800914e:	4603      	mov	r3, r0
 8009150:	2b01      	cmp	r3, #1
 8009152:	d003      	beq.n	800915c <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 8009154:	f06f 0302 	mvn.w	r3, #2
 8009158:	61fb      	str	r3, [r7, #28]
 800915a:	e024      	b.n	80091a6 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d021      	beq.n	80091a6 <osMessageQueuePut+0xa6>
 8009162:	4b13      	ldr	r3, [pc, #76]	@ (80091b0 <osMessageQueuePut+0xb0>)
 8009164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e01c      	b.n	80091a6 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <osMessageQueuePut+0x78>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 8009178:	f06f 0303 	mvn.w	r3, #3
 800917c:	61fb      	str	r3, [r7, #28]
 800917e:	e012      	b.n	80091a6 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009180:	2300      	movs	r3, #0
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	69b8      	ldr	r0, [r7, #24]
 8009188:	f000 fab2 	bl	80096f0 <xQueueGenericSend>
 800918c:	4603      	mov	r3, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	d009      	beq.n	80091a6 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 8009198:	f06f 0301 	mvn.w	r3, #1
 800919c:	61fb      	str	r3, [r7, #28]
 800919e:	e002      	b.n	80091a6 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 80091a0:	f06f 0302 	mvn.w	r3, #2
 80091a4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 80091ca:	f7ff fcf2 	bl	8008bb2 <IRQ_Context>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d024      	beq.n	800921e <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <osMessageQueueGet+0x32>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <osMessageQueueGet+0x32>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80091e6:	f06f 0303 	mvn.w	r3, #3
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	e033      	b.n	8009256 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80091f2:	f107 0314 	add.w	r3, r7, #20
 80091f6:	461a      	mov	r2, r3
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	69b8      	ldr	r0, [r7, #24]
 80091fc:	f000 fdd5 	bl	8009daa <xQueueReceiveFromISR>
 8009200:	4603      	mov	r3, r0
 8009202:	2b01      	cmp	r3, #1
 8009204:	d003      	beq.n	800920e <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 8009206:	f06f 0302 	mvn.w	r3, #2
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	e023      	b.n	8009256 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d020      	beq.n	8009256 <osMessageQueueGet+0xa2>
 8009214:	4b12      	ldr	r3, [pc, #72]	@ (8009260 <osMessageQueueGet+0xac>)
 8009216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	e01b      	b.n	8009256 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <osMessageQueueGet+0x76>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800922a:	f06f 0303 	mvn.w	r3, #3
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	e011      	b.n	8009256 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	68b9      	ldr	r1, [r7, #8]
 8009236:	69b8      	ldr	r0, [r7, #24]
 8009238:	f000 fc21 	bl	8009a7e <xQueueReceive>
 800923c:	4603      	mov	r3, r0
 800923e:	2b01      	cmp	r3, #1
 8009240:	d009      	beq.n	8009256 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 8009248:	f06f 0301 	mvn.w	r3, #1
 800924c:	61fb      	str	r3, [r7, #28]
 800924e:	e002      	b.n	8009256 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 8009250:	f06f 0302 	mvn.w	r3, #2
 8009254:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8009256:	69fb      	ldr	r3, [r7, #28]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4a07      	ldr	r2, [pc, #28]	@ (8009290 <vApplicationGetIdleTaskMemory+0x2c>)
 8009274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4a06      	ldr	r2, [pc, #24]	@ (8009294 <vApplicationGetIdleTaskMemory+0x30>)
 800927a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2280      	movs	r2, #128	@ 0x80
 8009280:	601a      	str	r2, [r3, #0]
}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	2000060c 	.word	0x2000060c
 8009294:	200006b4 	.word	0x200006b4

08009298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4a07      	ldr	r2, [pc, #28]	@ (80092c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80092a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4a06      	ldr	r2, [pc, #24]	@ (80092c8 <vApplicationGetTimerTaskMemory+0x30>)
 80092ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2280      	movs	r2, #128	@ 0x80
 80092b4:	601a      	str	r2, [r3, #0]
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	200008b4 	.word	0x200008b4
 80092c8:	2000095c 	.word	0x2000095c

080092cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f103 0208 	add.w	r2, r3, #8
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f103 0208 	add.w	r2, r3, #8
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f103 0208 	add.w	r2, r3, #8
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8009326:	b480      	push	{r7}
 8009328:	b085      	sub	sp, #20
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933c:	d103      	bne.n	8009346 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	e00c      	b.n	8009360 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	3308      	adds	r3, #8
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	e002      	b.n	8009354 <vListInsert+0x2e>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	429a      	cmp	r2, r3
 800935e:	d2f6      	bcs.n	800934e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	601a      	str	r2, [r3, #0]
}
 800938c:	bf00      	nop
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6892      	ldr	r2, [r2, #8]
 80093ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6852      	ldr	r2, [r2, #4]
 80093b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d103      	bne.n	80093cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	1e5a      	subs	r2, r3, #1
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80093f6:	2301      	movs	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d103      	bne.n	800940c <xQueueGenericReset+0x20>
 8009404:	f002 fcf8 	bl	800bdf8 <ulSetInterruptMask>
 8009408:	bf00      	nop
 800940a:	e7fd      	b.n	8009408 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d057      	beq.n	80094c2 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8009416:	2b00      	cmp	r3, #0
 8009418:	d053      	beq.n	80094c2 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009422:	2100      	movs	r1, #0
 8009424:	fba3 2302 	umull	r2, r3, r3, r2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d000      	beq.n	800942e <xQueueGenericReset+0x42>
 800942c:	2101      	movs	r1, #1
 800942e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8009430:	2b00      	cmp	r3, #0
 8009432:	d146      	bne.n	80094c2 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8009434:	f002 fba0 	bl	800bb78 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	441a      	add	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2200      	movs	r2, #0
 8009452:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009464:	3b01      	subs	r3, #1
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800946a:	fb01 f303 	mul.w	r3, r1, r3
 800946e:	441a      	add	r2, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	22ff      	movs	r2, #255	@ 0xff
 8009478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	22ff      	movs	r2, #255	@ 0xff
 8009480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10e      	bne.n	80094a8 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d014      	beq.n	80094bc <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	3310      	adds	r3, #16
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fc10 	bl	800acbc <xTaskRemoveFromEventList>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00c      	beq.n	80094bc <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80094a2:	f002 fb57 	bl	800bb54 <vPortYield>
 80094a6:	e009      	b.n	80094bc <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	3310      	adds	r3, #16
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff ff0d 	bl	80092cc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	3324      	adds	r3, #36	@ 0x24
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff ff08 	bl	80092cc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80094bc:	f002 fb6e 	bl	800bb9c <vPortExitCritical>
 80094c0:	e001      	b.n	80094c6 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d103      	bne.n	80094d4 <xQueueGenericReset+0xe8>
 80094cc:	f002 fc94 	bl	800bdf8 <ulSetInterruptMask>
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80094de:	b580      	push	{r7, lr}
 80094e0:	b088      	sub	sp, #32
 80094e2:	af02      	add	r7, sp, #8
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <xQueueGenericCreateStatic+0x20>
 80094f6:	f002 fc7f 	bl	800bdf8 <ulSetInterruptMask>
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d029      	beq.n	8009558 <xQueueGenericCreateStatic+0x7a>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d026      	beq.n	8009558 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d020      	beq.n	8009558 <xQueueGenericCreateStatic+0x7a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d11a      	bne.n	8009558 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8009522:	2350      	movs	r3, #80	@ 0x50
 8009524:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b50      	cmp	r3, #80	@ 0x50
 800952a:	d003      	beq.n	8009534 <xQueueGenericCreateStatic+0x56>
 800952c:	f002 fc64 	bl	800bdf8 <ulSetInterruptMask>
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8009534:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009542:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4613      	mov	r3, r2
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f858 	bl	8009606 <prvInitialiseNewQueue>
 8009556:	e006      	b.n	8009566 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d103      	bne.n	8009566 <xQueueGenericCreateStatic+0x88>
 800955e:	f002 fc4b 	bl	800bdf8 <ulSetInterruptMask>
 8009562:	bf00      	nop
 8009564:	e7fd      	b.n	8009562 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009566:	697b      	ldr	r3, [r7, #20]
    }
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	@ 0x28
 8009574:	af02      	add	r7, sp, #8
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4613      	mov	r3, r2
 800957c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d032      	beq.n	80095ee <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8009588:	2100      	movs	r1, #0
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	fba3 2302 	umull	r2, r3, r3, r2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d000      	beq.n	8009598 <xQueueGenericCreate+0x28>
 8009596:	2101      	movs	r1, #1
 8009598:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800959a:	2b00      	cmp	r3, #0
 800959c:	d127      	bne.n	80095ee <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80095a6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80095aa:	d820      	bhi.n	80095ee <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	fb02 f303 	mul.w	r3, r2, r3
 80095b4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	3350      	adds	r3, #80	@ 0x50
 80095ba:	4618      	mov	r0, r3
 80095bc:	f002 fc7c 	bl	800beb8 <pvPortMalloc>
 80095c0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d019      	beq.n	80095fc <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	3350      	adds	r3, #80	@ 0x50
 80095d0:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095da:	79fa      	ldrb	r2, [r7, #7]
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	68b9      	ldr	r1, [r7, #8]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f80d 	bl	8009606 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80095ec:	e006      	b.n	80095fc <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d103      	bne.n	80095fc <xQueueGenericCreate+0x8c>
 80095f4:	f002 fc00 	bl	800bdf8 <ulSetInterruptMask>
 80095f8:	bf00      	nop
 80095fa:	e7fd      	b.n	80095f8 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80095fc:	69fb      	ldr	r3, [r7, #28]
    }
 80095fe:	4618      	mov	r0, r3
 8009600:	3720      	adds	r7, #32
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
 8009612:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e002      	b.n	8009628 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009634:	2101      	movs	r1, #1
 8009636:	69b8      	ldr	r0, [r7, #24]
 8009638:	f7ff fed8 	bl	80093ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8009644:	bf00      	nop
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af02      	add	r7, sp, #8
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d013      	beq.n	800968a <xQueueCreateCountingSemaphoreStatic+0x3e>
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	429a      	cmp	r2, r3
 8009668:	d80f      	bhi.n	800968a <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800966a:	2302      	movs	r3, #2
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff ff32 	bl	80094de <xQueueGenericCreateStatic>
 800967a:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00a      	beq.n	8009698 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8009688:	e006      	b.n	8009698 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d103      	bne.n	8009698 <xQueueCreateCountingSemaphoreStatic+0x4c>
 8009690:	f002 fbb2 	bl	800bdf8 <ulSetInterruptMask>
 8009694:	bf00      	nop
 8009696:	e7fd      	b.n	8009694 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8009698:	697b      	ldr	r3, [r7, #20]
    }
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d010      	beq.n	80096d8 <xQueueCreateCountingSemaphore+0x36>
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d80c      	bhi.n	80096d8 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096be:	2202      	movs	r2, #2
 80096c0:	2100      	movs	r1, #0
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff ff54 	bl	8009570 <xQueueGenericCreate>
 80096c8:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 80096d6:	e006      	b.n	80096e6 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d103      	bne.n	80096e6 <xQueueCreateCountingSemaphore+0x44>
 80096de:	f002 fb8b 	bl	800bdf8 <ulSetInterruptMask>
 80096e2:	bf00      	nop
 80096e4:	e7fd      	b.n	80096e2 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 80096e6:	68fb      	ldr	r3, [r7, #12]
    }
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08a      	sub	sp, #40	@ 0x28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096fe:	2300      	movs	r3, #0
 8009700:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d103      	bne.n	8009714 <xQueueGenericSend+0x24>
 800970c:	f002 fb74 	bl	800bdf8 <ulSetInterruptMask>
 8009710:	bf00      	nop
 8009712:	e7fd      	b.n	8009710 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d103      	bne.n	8009722 <xQueueGenericSend+0x32>
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <xQueueGenericSend+0x36>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <xQueueGenericSend+0x38>
 8009726:	2300      	movs	r3, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <xQueueGenericSend+0x44>
 800972c:	f002 fb64 	bl	800bdf8 <ulSetInterruptMask>
 8009730:	bf00      	nop
 8009732:	e7fd      	b.n	8009730 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d103      	bne.n	8009742 <xQueueGenericSend+0x52>
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973e:	2b01      	cmp	r3, #1
 8009740:	d101      	bne.n	8009746 <xQueueGenericSend+0x56>
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <xQueueGenericSend+0x58>
 8009746:	2300      	movs	r3, #0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d103      	bne.n	8009754 <xQueueGenericSend+0x64>
 800974c:	f002 fb54 	bl	800bdf8 <ulSetInterruptMask>
 8009750:	bf00      	nop
 8009752:	e7fd      	b.n	8009750 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009754:	f001 fcc4 	bl	800b0e0 <xTaskGetSchedulerState>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <xQueueGenericSend+0x74>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <xQueueGenericSend+0x78>
 8009764:	2301      	movs	r3, #1
 8009766:	e000      	b.n	800976a <xQueueGenericSend+0x7a>
 8009768:	2300      	movs	r3, #0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d103      	bne.n	8009776 <xQueueGenericSend+0x86>
 800976e:	f002 fb43 	bl	800bdf8 <ulSetInterruptMask>
 8009772:	bf00      	nop
 8009774:	e7fd      	b.n	8009772 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009776:	f002 f9ff 	bl	800bb78 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009782:	429a      	cmp	r2, r3
 8009784:	d302      	bcc.n	800978c <xQueueGenericSend+0x9c>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d11d      	bne.n	80097c8 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	68b9      	ldr	r1, [r7, #8]
 8009790:	6a38      	ldr	r0, [r7, #32]
 8009792:	f000 fbae 	bl	8009ef2 <prvCopyDataToQueue>
 8009796:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00a      	beq.n	80097b6 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	3324      	adds	r3, #36	@ 0x24
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 fa89 	bl	800acbc <xTaskRemoveFromEventList>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80097b0:	f002 f9d0 	bl	800bb54 <vPortYield>
 80097b4:	e004      	b.n	80097c0 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80097bc:	f002 f9ca 	bl	800bb54 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80097c0:	f002 f9ec 	bl	800bb9c <vPortExitCritical>
                return pdPASS;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e05c      	b.n	8009882 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d103      	bne.n	80097d6 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80097ce:	f002 f9e5 	bl	800bb9c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e055      	b.n	8009882 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 80097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d106      	bne.n	80097ea <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80097dc:	f107 0314 	add.w	r3, r7, #20
 80097e0:	4618      	mov	r0, r3
 80097e2:	f001 fb39 	bl	800ae58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80097e6:	2301      	movs	r3, #1
 80097e8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80097ea:	f002 f9d7 	bl	800bb9c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80097ee:	f000 ff85 	bl	800a6fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80097f2:	f002 f9c1 	bl	800bb78 <vPortEnterCritical>
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097fc:	b25b      	sxtb	r3, r3
 80097fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009802:	d103      	bne.n	800980c <xQueueGenericSend+0x11c>
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009812:	b25b      	sxtb	r3, r3
 8009814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009818:	d103      	bne.n	8009822 <xQueueGenericSend+0x132>
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009822:	f002 f9bb 	bl	800bb9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009826:	1d3a      	adds	r2, r7, #4
 8009828:	f107 0314 	add.w	r3, r7, #20
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f001 fb28 	bl	800ae84 <xTaskCheckForTimeOut>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d11d      	bne.n	8009876 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800983a:	6a38      	ldr	r0, [r7, #32]
 800983c:	f000 fc51 	bl	800a0e2 <prvIsQueueFull>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d011      	beq.n	800986a <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	3310      	adds	r3, #16
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f001 f9d8 	bl	800ac04 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009854:	6a38      	ldr	r0, [r7, #32]
 8009856:	f000 fbdc 	bl	800a012 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800985a:	f000 ff5d 	bl	800a718 <xTaskResumeAll>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d188      	bne.n	8009776 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 8009864:	f002 f976 	bl	800bb54 <vPortYield>
 8009868:	e785      	b.n	8009776 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800986a:	6a38      	ldr	r0, [r7, #32]
 800986c:	f000 fbd1 	bl	800a012 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009870:	f000 ff52 	bl	800a718 <xTaskResumeAll>
 8009874:	e77f      	b.n	8009776 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009876:	6a38      	ldr	r0, [r7, #32]
 8009878:	f000 fbcb 	bl	800a012 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800987c:	f000 ff4c 	bl	800a718 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8009880:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009882:	4618      	mov	r0, r3
 8009884:	3728      	adds	r7, #40	@ 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b08a      	sub	sp, #40	@ 0x28
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d103      	bne.n	80098aa <xQueueGenericSendFromISR+0x20>
 80098a2:	f002 faa9 	bl	800bdf8 <ulSetInterruptMask>
 80098a6:	bf00      	nop
 80098a8:	e7fd      	b.n	80098a6 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d103      	bne.n	80098b8 <xQueueGenericSendFromISR+0x2e>
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <xQueueGenericSendFromISR+0x32>
 80098b8:	2301      	movs	r3, #1
 80098ba:	e000      	b.n	80098be <xQueueGenericSendFromISR+0x34>
 80098bc:	2300      	movs	r3, #0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d103      	bne.n	80098ca <xQueueGenericSendFromISR+0x40>
 80098c2:	f002 fa99 	bl	800bdf8 <ulSetInterruptMask>
 80098c6:	bf00      	nop
 80098c8:	e7fd      	b.n	80098c6 <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d103      	bne.n	80098d8 <xQueueGenericSendFromISR+0x4e>
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <xQueueGenericSendFromISR+0x52>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <xQueueGenericSendFromISR+0x54>
 80098dc:	2300      	movs	r3, #0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d103      	bne.n	80098ea <xQueueGenericSendFromISR+0x60>
 80098e2:	f002 fa89 	bl	800bdf8 <ulSetInterruptMask>
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <xQueueGenericSendFromISR+0x5c>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098ea:	f002 fa85 	bl	800bdf8 <ulSetInterruptMask>
 80098ee:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d302      	bcc.n	8009902 <xQueueGenericSendFromISR+0x78>
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d13d      	bne.n	800997e <xQueueGenericSendFromISR+0xf4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009908:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990e:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	68b9      	ldr	r1, [r7, #8]
 8009914:	6a38      	ldr	r0, [r7, #32]
 8009916:	f000 faec 	bl	8009ef2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800991a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d112      	bne.n	800994a <xQueueGenericSendFromISR+0xc0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	d025      	beq.n	8009978 <xQueueGenericSendFromISR+0xee>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	3324      	adds	r3, #36	@ 0x24
 8009930:	4618      	mov	r0, r3
 8009932:	f001 f9c3 	bl	800acbc <xTaskRemoveFromEventList>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01d      	beq.n	8009978 <xQueueGenericSendFromISR+0xee>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01a      	beq.n	8009978 <xQueueGenericSendFromISR+0xee>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	e016      	b.n	8009978 <xQueueGenericSendFromISR+0xee>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800994a:	f000 ffe3 	bl	800a914 <uxTaskGetNumberOfTasks>
 800994e:	6138      	str	r0, [r7, #16]
 8009950:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	429a      	cmp	r2, r3
 8009958:	d90e      	bls.n	8009978 <xQueueGenericSendFromISR+0xee>
 800995a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800995e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009960:	d103      	bne.n	800996a <xQueueGenericSendFromISR+0xe0>
 8009962:	f002 fa49 	bl	800bdf8 <ulSetInterruptMask>
 8009966:	bf00      	nop
 8009968:	e7fd      	b.n	8009966 <xQueueGenericSendFromISR+0xdc>
 800996a:	7efb      	ldrb	r3, [r7, #27]
 800996c:	3301      	adds	r3, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	b25a      	sxtb	r2, r3
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8009978:	2301      	movs	r3, #1
 800997a:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800997c:	e001      	b.n	8009982 <xQueueGenericSendFromISR+0xf8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800997e:	2300      	movs	r3, #0
 8009980:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009982:	69f8      	ldr	r0, [r7, #28]
 8009984:	f002 fa45 	bl	800be12 <vClearInterruptMask>

    return xReturn;
 8009988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800998a:	4618      	mov	r0, r3
 800998c:	3728      	adds	r7, #40	@ 0x28
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b088      	sub	sp, #32
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d103      	bne.n	80099ae <xQueueGiveFromISR+0x1c>
 80099a6:	f002 fa27 	bl	800bdf8 <ulSetInterruptMask>
 80099aa:	bf00      	nop
 80099ac:	e7fd      	b.n	80099aa <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <xQueueGiveFromISR+0x2c>
 80099b6:	f002 fa1f 	bl	800bdf8 <ulSetInterruptMask>
 80099ba:	bf00      	nop
 80099bc:	e7fd      	b.n	80099ba <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d103      	bne.n	80099ce <xQueueGiveFromISR+0x3c>
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <xQueueGiveFromISR+0x40>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <xQueueGiveFromISR+0x42>
 80099d2:	2300      	movs	r3, #0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d103      	bne.n	80099e0 <xQueueGiveFromISR+0x4e>
 80099d8:	f002 fa0e 	bl	800bdf8 <ulSetInterruptMask>
 80099dc:	bf00      	nop
 80099de:	e7fd      	b.n	80099dc <xQueueGiveFromISR+0x4a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e0:	f002 fa0a 	bl	800bdf8 <ulSetInterruptMask>
 80099e4:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ea:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d239      	bcs.n	8009a6a <xQueueGiveFromISR+0xd8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099fc:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0e:	d112      	bne.n	8009a36 <xQueueGiveFromISR+0xa4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d025      	beq.n	8009a64 <xQueueGiveFromISR+0xd2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	3324      	adds	r3, #36	@ 0x24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 f94d 	bl	800acbc <xTaskRemoveFromEventList>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01d      	beq.n	8009a64 <xQueueGiveFromISR+0xd2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d01a      	beq.n	8009a64 <xQueueGiveFromISR+0xd2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2201      	movs	r2, #1
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	e016      	b.n	8009a64 <xQueueGiveFromISR+0xd2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8009a36:	f000 ff6d 	bl	800a914 <uxTaskGetNumberOfTasks>
 8009a3a:	60b8      	str	r0, [r7, #8]
 8009a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d90e      	bls.n	8009a64 <xQueueGiveFromISR+0xd2>
 8009a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a4c:	d103      	bne.n	8009a56 <xQueueGiveFromISR+0xc4>
 8009a4e:	f002 f9d3 	bl	800bdf8 <ulSetInterruptMask>
 8009a52:	bf00      	nop
 8009a54:	e7fd      	b.n	8009a52 <xQueueGiveFromISR+0xc0>
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	b25a      	sxtb	r2, r3
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8009a64:	2301      	movs	r3, #1
 8009a66:	61fb      	str	r3, [r7, #28]
 8009a68:	e001      	b.n	8009a6e <xQueueGiveFromISR+0xdc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009a6e:	6978      	ldr	r0, [r7, #20]
 8009a70:	f002 f9cf 	bl	800be12 <vClearInterruptMask>

    return xReturn;
 8009a74:	69fb      	ldr	r3, [r7, #28]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3720      	adds	r7, #32
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b08a      	sub	sp, #40	@ 0x28
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <xQueueReceive+0x22>
 8009a98:	f002 f9ae 	bl	800bdf8 <ulSetInterruptMask>
 8009a9c:	bf00      	nop
 8009a9e:	e7fd      	b.n	8009a9c <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d103      	bne.n	8009aae <xQueueReceive+0x30>
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <xQueueReceive+0x34>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <xQueueReceive+0x36>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <xQueueReceive+0x42>
 8009ab8:	f002 f99e 	bl	800bdf8 <ulSetInterruptMask>
 8009abc:	bf00      	nop
 8009abe:	e7fd      	b.n	8009abc <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ac0:	f001 fb0e 	bl	800b0e0 <xTaskGetSchedulerState>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d102      	bne.n	8009ad0 <xQueueReceive+0x52>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <xQueueReceive+0x56>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e000      	b.n	8009ad6 <xQueueReceive+0x58>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d103      	bne.n	8009ae2 <xQueueReceive+0x64>
 8009ada:	f002 f98d 	bl	800bdf8 <ulSetInterruptMask>
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009ae2:	f002 f849 	bl	800bb78 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aea:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d019      	beq.n	8009b26 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009af2:	68b9      	ldr	r1, [r7, #8]
 8009af4:	6a38      	ldr	r0, [r7, #32]
 8009af6:	f000 fa66 	bl	8009fc6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	1e5a      	subs	r2, r3, #1
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	3310      	adds	r3, #16
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f001 f8d4 	bl	800acbc <xTaskRemoveFromEventList>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009b1a:	f002 f81b 	bl	800bb54 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009b1e:	f002 f83d 	bl	800bb9c <vPortExitCritical>
                return pdPASS;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e063      	b.n	8009bee <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009b2c:	f002 f836 	bl	800bb9c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009b30:	2300      	movs	r3, #0
 8009b32:	e05c      	b.n	8009bee <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009b3a:	f107 0314 	add.w	r3, r7, #20
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 f98a 	bl	800ae58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009b44:	2301      	movs	r3, #1
 8009b46:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009b48:	f002 f828 	bl	800bb9c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009b4c:	f000 fdd6 	bl	800a6fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009b50:	f002 f812 	bl	800bb78 <vPortEnterCritical>
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b5a:	b25b      	sxtb	r3, r3
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d103      	bne.n	8009b6a <xQueueReceive+0xec>
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b70:	b25b      	sxtb	r3, r3
 8009b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b76:	d103      	bne.n	8009b80 <xQueueReceive+0x102>
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b80:	f002 f80c 	bl	800bb9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b84:	1d3a      	adds	r2, r7, #4
 8009b86:	f107 0314 	add.w	r3, r7, #20
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 f979 	bl	800ae84 <xTaskCheckForTimeOut>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d11d      	bne.n	8009bd4 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b98:	6a38      	ldr	r0, [r7, #32]
 8009b9a:	f000 fa8c 	bl	800a0b6 <prvIsQueueEmpty>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d011      	beq.n	8009bc8 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	3324      	adds	r3, #36	@ 0x24
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 f829 	bl	800ac04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009bb2:	6a38      	ldr	r0, [r7, #32]
 8009bb4:	f000 fa2d 	bl	800a012 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009bb8:	f000 fdae 	bl	800a718 <xTaskResumeAll>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d18f      	bne.n	8009ae2 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 8009bc2:	f001 ffc7 	bl	800bb54 <vPortYield>
 8009bc6:	e78c      	b.n	8009ae2 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009bc8:	6a38      	ldr	r0, [r7, #32]
 8009bca:	f000 fa22 	bl	800a012 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009bce:	f000 fda3 	bl	800a718 <xTaskResumeAll>
 8009bd2:	e786      	b.n	8009ae2 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009bd4:	6a38      	ldr	r0, [r7, #32]
 8009bd6:	f000 fa1c 	bl	800a012 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009bda:	f000 fd9d 	bl	800a718 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bde:	6a38      	ldr	r0, [r7, #32]
 8009be0:	f000 fa69 	bl	800a0b6 <prvIsQueueEmpty>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f43f af7b 	beq.w	8009ae2 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8009bec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3728      	adds	r7, #40	@ 0x28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b08a      	sub	sp, #40	@ 0x28
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <xQueueSemaphoreTake+0x24>
 8009c12:	f002 f8f1 	bl	800bdf8 <ulSetInterruptMask>
 8009c16:	bf00      	nop
 8009c18:	e7fd      	b.n	8009c16 <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <xQueueSemaphoreTake+0x34>
 8009c22:	f002 f8e9 	bl	800bdf8 <ulSetInterruptMask>
 8009c26:	bf00      	nop
 8009c28:	e7fd      	b.n	8009c26 <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c2a:	f001 fa59 	bl	800b0e0 <xTaskGetSchedulerState>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d102      	bne.n	8009c3a <xQueueSemaphoreTake+0x44>
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <xQueueSemaphoreTake+0x48>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <xQueueSemaphoreTake+0x4a>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d103      	bne.n	8009c4c <xQueueSemaphoreTake+0x56>
 8009c44:	f002 f8d8 	bl	800bdf8 <ulSetInterruptMask>
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009c4c:	f001 ff94 	bl	800bb78 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c54:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01e      	beq.n	8009c9a <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	1e5a      	subs	r2, r3, #1
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c6c:	f001 fc0a 	bl	800b484 <pvTaskIncrementMutexHeldCount>
 8009c70:	4602      	mov	r2, r0
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d009      	beq.n	8009c92 <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	3310      	adds	r3, #16
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 f81a 	bl	800acbc <xTaskRemoveFromEventList>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009c8e:	f001 ff61 	bl	800bb54 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009c92:	f001 ff83 	bl	800bb9c <vPortExitCritical>
                return pdPASS;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e083      	b.n	8009da2 <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009ca0:	f001 ff7c 	bl	800bb9c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e07c      	b.n	8009da2 <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 f8d0 	bl	800ae58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009cbc:	f001 ff6e 	bl	800bb9c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009cc0:	f000 fd1c 	bl	800a6fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009cc4:	f001 ff58 	bl	800bb78 <vPortEnterCritical>
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cce:	b25b      	sxtb	r3, r3
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	d103      	bne.n	8009cde <xQueueSemaphoreTake+0xe8>
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ce4:	b25b      	sxtb	r3, r3
 8009ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cea:	d103      	bne.n	8009cf4 <xQueueSemaphoreTake+0xfe>
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cf4:	f001 ff52 	bl	800bb9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cf8:	463a      	mov	r2, r7
 8009cfa:	f107 030c 	add.w	r3, r7, #12
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 f8bf 	bl	800ae84 <xTaskCheckForTimeOut>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d12c      	bne.n	8009d66 <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d0c:	69f8      	ldr	r0, [r7, #28]
 8009d0e:	f000 f9d2 	bl	800a0b6 <prvIsQueueEmpty>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d020      	beq.n	8009d5a <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d109      	bne.n	8009d34 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 8009d20:	f001 ff2a 	bl	800bb78 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f001 f9f7 	bl	800b11c <xTaskPriorityInherit>
 8009d2e:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8009d30:	f001 ff34 	bl	800bb9c <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	3324      	adds	r3, #36	@ 0x24
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 ff61 	bl	800ac04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009d42:	69f8      	ldr	r0, [r7, #28]
 8009d44:	f000 f965 	bl	800a012 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009d48:	f000 fce6 	bl	800a718 <xTaskResumeAll>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f47f af7c 	bne.w	8009c4c <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 8009d54:	f001 fefe 	bl	800bb54 <vPortYield>
 8009d58:	e778      	b.n	8009c4c <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009d5a:	69f8      	ldr	r0, [r7, #28]
 8009d5c:	f000 f959 	bl	800a012 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009d60:	f000 fcda 	bl	800a718 <xTaskResumeAll>
 8009d64:	e772      	b.n	8009c4c <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009d66:	69f8      	ldr	r0, [r7, #28]
 8009d68:	f000 f953 	bl	800a012 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009d6c:	f000 fcd4 	bl	800a718 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d70:	69f8      	ldr	r0, [r7, #28]
 8009d72:	f000 f9a0 	bl	800a0b6 <prvIsQueueEmpty>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f43f af67 	beq.w	8009c4c <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00d      	beq.n	8009da0 <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 8009d84:	f001 fef8 	bl	800bb78 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d88:	69f8      	ldr	r0, [r7, #28]
 8009d8a:	f000 f89a 	bl	8009ec2 <prvGetDisinheritPriorityAfterTimeout>
 8009d8e:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	6979      	ldr	r1, [r7, #20]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fad8 	bl	800b34c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8009d9c:	f001 fefe 	bl	800bb9c <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8009da0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3728      	adds	r7, #40	@ 0x28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b08a      	sub	sp, #40	@ 0x28
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d103      	bne.n	8009dc8 <xQueueReceiveFromISR+0x1e>
 8009dc0:	f002 f81a 	bl	800bdf8 <ulSetInterruptMask>
 8009dc4:	bf00      	nop
 8009dc6:	e7fd      	b.n	8009dc4 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d103      	bne.n	8009dd6 <xQueueReceiveFromISR+0x2c>
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <xQueueReceiveFromISR+0x30>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e000      	b.n	8009ddc <xQueueReceiveFromISR+0x32>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d103      	bne.n	8009de8 <xQueueReceiveFromISR+0x3e>
 8009de0:	f002 f80a 	bl	800bdf8 <ulSetInterruptMask>
 8009de4:	bf00      	nop
 8009de6:	e7fd      	b.n	8009de4 <xQueueReceiveFromISR+0x3a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009de8:	f002 f806 	bl	800bdf8 <ulSetInterruptMask>
 8009dec:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df2:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d03d      	beq.n	8009e76 <xQueueReceiveFromISR+0xcc>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e00:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	6a38      	ldr	r0, [r7, #32]
 8009e06:	f000 f8de 	bl	8009fc6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	1e5a      	subs	r2, r3, #1
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8009e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1a:	d112      	bne.n	8009e42 <xQueueReceiveFromISR+0x98>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d025      	beq.n	8009e70 <xQueueReceiveFromISR+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	3310      	adds	r3, #16
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 ff47 	bl	800acbc <xTaskRemoveFromEventList>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01d      	beq.n	8009e70 <xQueueReceiveFromISR+0xc6>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01a      	beq.n	8009e70 <xQueueReceiveFromISR+0xc6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	e016      	b.n	8009e70 <xQueueReceiveFromISR+0xc6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8009e42:	f000 fd67 	bl	800a914 <uxTaskGetNumberOfTasks>
 8009e46:	6138      	str	r0, [r7, #16]
 8009e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d90e      	bls.n	8009e70 <xQueueReceiveFromISR+0xc6>
 8009e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e58:	d103      	bne.n	8009e62 <xQueueReceiveFromISR+0xb8>
 8009e5a:	f001 ffcd 	bl	800bdf8 <ulSetInterruptMask>
 8009e5e:	bf00      	nop
 8009e60:	e7fd      	b.n	8009e5e <xQueueReceiveFromISR+0xb4>
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	3301      	adds	r3, #1
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	b25a      	sxtb	r2, r3
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8009e70:	2301      	movs	r3, #1
 8009e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e74:	e001      	b.n	8009e7a <xQueueReceiveFromISR+0xd0>
        }
        else
        {
            xReturn = pdFAIL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009e7a:	69f8      	ldr	r0, [r7, #28]
 8009e7c:	f001 ffc9 	bl	800be12 <vClearInterruptMask>

    return xReturn;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3728      	adds	r7, #40	@ 0x28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <vQueueDelete+0x1a>
 8009e9c:	f001 ffac 	bl	800bdf8 <ulSetInterruptMask>
 8009ea0:	bf00      	nop
 8009ea2:	e7fd      	b.n	8009ea0 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 f97b 	bl	800a1a0 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f002 f8ab 	bl	800c010 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009ec2:	b480      	push	{r7}
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d006      	beq.n	8009ee0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e001      	b.n	8009ee4 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
    }
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f06:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10d      	bne.n	8009f2c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d14d      	bne.n	8009fb4 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 f98d 	bl	800b23c <xTaskPriorityDisinherit>
 8009f22:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	609a      	str	r2, [r3, #8]
 8009f2a:	e043      	b.n	8009fb4 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d119      	bne.n	8009f66 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6858      	ldr	r0, [r3, #4]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	f026 f858 	bl	802fff2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4a:	441a      	add	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d32b      	bcc.n	8009fb4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]
 8009f64:	e026      	b.n	8009fb4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68d8      	ldr	r0, [r3, #12]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68b9      	ldr	r1, [r7, #8]
 8009f72:	f026 f83e 	bl	802fff2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68da      	ldr	r2, [r3, #12]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7e:	425b      	negs	r3, r3
 8009f80:	441a      	add	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d207      	bcs.n	8009fa2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689a      	ldr	r2, [r3, #8]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f9a:	425b      	negs	r3, r3
 8009f9c:	441a      	add	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d105      	bne.n	8009fb4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d002      	beq.n	8009fb4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009fbc:	697b      	ldr	r3, [r7, #20]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d018      	beq.n	800a00a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68da      	ldr	r2, [r3, #12]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe0:	441a      	add	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d303      	bcc.n	8009ffa <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68d9      	ldr	r1, [r3, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a002:	461a      	mov	r2, r3
 800a004:	6838      	ldr	r0, [r7, #0]
 800a006:	f025 fff4 	bl	802fff2 <memcpy>
    }
}
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800a01a:	f001 fdad 	bl	800bb78 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a024:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a026:	e011      	b.n	800a04c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d012      	beq.n	800a056 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3324      	adds	r3, #36	@ 0x24
 800a034:	4618      	mov	r0, r3
 800a036:	f000 fe41 	bl	800acbc <xTaskRemoveFromEventList>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800a040:	f000 ff78 	bl	800af34 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	3b01      	subs	r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dce9      	bgt.n	800a028 <prvUnlockQueue+0x16>
 800a054:	e000      	b.n	800a058 <prvUnlockQueue+0x46>
                    break;
 800a056:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	22ff      	movs	r2, #255	@ 0xff
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800a060:	f001 fd9c 	bl	800bb9c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800a064:	f001 fd88 	bl	800bb78 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a06e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a070:	e011      	b.n	800a096 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d012      	beq.n	800a0a0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3310      	adds	r3, #16
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fe1c 	bl	800acbc <xTaskRemoveFromEventList>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a08a:	f000 ff53 	bl	800af34 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
 800a090:	3b01      	subs	r3, #1
 800a092:	b2db      	uxtb	r3, r3
 800a094:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dce9      	bgt.n	800a072 <prvUnlockQueue+0x60>
 800a09e:	e000      	b.n	800a0a2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800a0a0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	22ff      	movs	r2, #255	@ 0xff
 800a0a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800a0aa:	f001 fd77 	bl	800bb9c <vPortExitCritical>
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a0be:	f001 fd5b 	bl	800bb78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d102      	bne.n	800a0d0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	e001      	b.n	800a0d4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a0d4:	f001 fd62 	bl	800bb9c <vPortExitCritical>

    return xReturn;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a0ea:	f001 fd45 	bl	800bb78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d102      	bne.n	800a100 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	e001      	b.n	800a104 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a104:	f001 fd4a 	bl	800bb9c <vPortExitCritical>

    return xReturn;
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d103      	bne.n	800a130 <vQueueAddToRegistry+0x1c>
 800a128:	f001 fe66 	bl	800bdf8 <ulSetInterruptMask>
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d024      	beq.n	800a180 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	e01e      	b.n	800a17a <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800a13c:	4a17      	ldr	r2, [pc, #92]	@ (800a19c <vQueueAddToRegistry+0x88>)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	4413      	add	r3, r2
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d105      	bne.n	800a158 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	4a12      	ldr	r2, [pc, #72]	@ (800a19c <vQueueAddToRegistry+0x88>)
 800a152:	4413      	add	r3, r2
 800a154:	60bb      	str	r3, [r7, #8]
                    break;
 800a156:	e013      	b.n	800a180 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <vQueueAddToRegistry+0x60>
 800a15e:	4a0f      	ldr	r2, [pc, #60]	@ (800a19c <vQueueAddToRegistry+0x88>)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d104      	bne.n	800a174 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	4a0b      	ldr	r2, [pc, #44]	@ (800a19c <vQueueAddToRegistry+0x88>)
 800a170:	4413      	add	r3, r2
 800a172:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3301      	adds	r3, #1
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b07      	cmp	r3, #7
 800a17e:	d9dd      	bls.n	800a13c <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000b5c 	.word	0x20000b5c

0800a1a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d103      	bne.n	800a1b6 <vQueueUnregisterQueue+0x16>
 800a1ae:	f001 fe23 	bl	800bdf8 <ulSetInterruptMask>
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	e016      	b.n	800a1ea <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a1bc:	4a0f      	ldr	r2, [pc, #60]	@ (800a1fc <vQueueUnregisterQueue+0x5c>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	4413      	add	r3, r2
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d10b      	bne.n	800a1e4 <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800a1cc:	4a0b      	ldr	r2, [pc, #44]	@ (800a1fc <vQueueUnregisterQueue+0x5c>)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a1d6:	4a09      	ldr	r2, [pc, #36]	@ (800a1fc <vQueueUnregisterQueue+0x5c>)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	4413      	add	r3, r2
 800a1de:	2200      	movs	r2, #0
 800a1e0:	605a      	str	r2, [r3, #4]
                break;
 800a1e2:	e006      	b.n	800a1f2 <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	60fb      	str	r3, [r7, #12]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b07      	cmp	r3, #7
 800a1ee:	d9e5      	bls.n	800a1bc <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000b5c 	.word	0x20000b5c

0800a200 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a210:	f001 fcb2 	bl	800bb78 <vPortEnterCritical>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a21a:	b25b      	sxtb	r3, r3
 800a21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a220:	d103      	bne.n	800a22a <vQueueWaitForMessageRestricted+0x2a>
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a230:	b25b      	sxtb	r3, r3
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a236:	d103      	bne.n	800a240 <vQueueWaitForMessageRestricted+0x40>
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a240:	f001 fcac 	bl	800bb9c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d106      	bne.n	800a25a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	3324      	adds	r3, #36	@ 0x24
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	68b9      	ldr	r1, [r7, #8]
 800a254:	4618      	mov	r0, r3
 800a256:	f000 fcf3 	bl	800ac40 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	f7ff fed9 	bl	800a012 <prvUnlockQueue>
    }
 800a260:	bf00      	nop
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08c      	sub	sp, #48	@ 0x30
 800a26c:	af04      	add	r7, sp, #16
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800a276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d103      	bne.n	800a284 <xTaskCreateStatic+0x1c>
 800a27c:	f001 fdbc 	bl	800bdf8 <ulSetInterruptMask>
 800a280:	bf00      	nop
 800a282:	e7fd      	b.n	800a280 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	2b00      	cmp	r3, #0
 800a288:	d103      	bne.n	800a292 <xTaskCreateStatic+0x2a>
 800a28a:	f001 fdb5 	bl	800bdf8 <ulSetInterruptMask>
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800a292:	23a8      	movs	r3, #168	@ 0xa8
 800a294:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2ba8      	cmp	r3, #168	@ 0xa8
 800a29a:	d003      	beq.n	800a2a4 <xTaskCreateStatic+0x3c>
 800a29c:	f001 fdac 	bl	800bdf8 <ulSetInterruptMask>
 800a2a0:	bf00      	nop
 800a2a2:	e7fd      	b.n	800a2a0 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2a4:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d023      	beq.n	800a2f4 <xTaskCreateStatic+0x8c>
 800a2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d020      	beq.n	800a2f4 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800a2b6:	22a8      	movs	r2, #168	@ 0xa8
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	69f8      	ldr	r0, [r7, #28]
 800a2bc:	f025 fd73 	bl	802fda6 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2c4:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	f107 0318 	add.w	r3, r7, #24
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	68b9      	ldr	r1, [r7, #8]
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 f856 	bl	800a398 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a2ec:	69f8      	ldr	r0, [r7, #28]
 800a2ee:	f000 f8eb 	bl	800a4c8 <prvAddNewTaskToReadyList>
 800a2f2:	e001      	b.n	800a2f8 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a2f8:	69bb      	ldr	r3, [r7, #24]
    }
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3720      	adds	r7, #32
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a302:	b580      	push	{r7, lr}
 800a304:	b08c      	sub	sp, #48	@ 0x30
 800a306:	af04      	add	r7, sp, #16
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	603b      	str	r3, [r7, #0]
 800a30e:	4613      	mov	r3, r2
 800a310:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4618      	mov	r0, r3
 800a318:	f001 fdce 	bl	800beb8 <pvPortMalloc>
 800a31c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d013      	beq.n	800a34c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a324:	20a8      	movs	r0, #168	@ 0xa8
 800a326:	f001 fdc7 	bl	800beb8 <pvPortMalloc>
 800a32a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d008      	beq.n	800a344 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800a332:	22a8      	movs	r2, #168	@ 0xa8
 800a334:	2100      	movs	r1, #0
 800a336:	69f8      	ldr	r0, [r7, #28]
 800a338:	f025 fd35 	bl	802fda6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	631a      	str	r2, [r3, #48]	@ 0x30
 800a342:	e005      	b.n	800a350 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800a344:	6978      	ldr	r0, [r7, #20]
 800a346:	f001 fe63 	bl	800c010 <vPortFree>
 800a34a:	e001      	b.n	800a350 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d017      	beq.n	800a386 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a35e:	88fa      	ldrh	r2, [r7, #6]
 800a360:	2300      	movs	r3, #0
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	9302      	str	r3, [sp, #8]
 800a368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	68b9      	ldr	r1, [r7, #8]
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 f80f 	bl	800a398 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a37a:	69f8      	ldr	r0, [r7, #28]
 800a37c:	f000 f8a4 	bl	800a4c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a380:	2301      	movs	r3, #1
 800a382:	61bb      	str	r3, [r7, #24]
 800a384:	e002      	b.n	800a38c <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a386:	f04f 33ff 	mov.w	r3, #4294967295
 800a38a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a38c:	69bb      	ldr	r3, [r7, #24]
    }
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	21a5      	movs	r1, #165	@ 0xa5
 800a3b2:	f025 fcf8 	bl	802fda6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	f023 0307 	bic.w	r3, r3, #7
 800a3ce:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <prvInitialiseNewTask+0x4a>
 800a3da:	f001 fd0d 	bl	800bdf8 <ulSetInterruptMask>
 800a3de:	bf00      	nop
 800a3e0:	e7fd      	b.n	800a3de <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01e      	beq.n	800a426 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e012      	b.n	800a414 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	7819      	ldrb	r1, [r3, #0]
 800a3f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3334      	adds	r3, #52	@ 0x34
 800a3fe:	460a      	mov	r2, r1
 800a400:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	4413      	add	r3, r2
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d006      	beq.n	800a41c <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	3301      	adds	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2b0f      	cmp	r3, #15
 800a418:	d9e9      	bls.n	800a3ee <prvInitialiseNewTask+0x56>
 800a41a:	e000      	b.n	800a41e <prvInitialiseNewTask+0x86>
            {
                break;
 800a41c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	2b37      	cmp	r3, #55	@ 0x37
 800a42a:	d903      	bls.n	800a434 <prvInitialiseNewTask+0x9c>
 800a42c:	f001 fce4 	bl	800bdf8 <ulSetInterruptMask>
 800a430:	bf00      	nop
 800a432:	e7fd      	b.n	800a430 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2b37      	cmp	r3, #55	@ 0x37
 800a438:	d901      	bls.n	800a43e <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a43a:	2337      	movs	r3, #55	@ 0x37
 800a43c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a440:	6a3a      	ldr	r2, [r7, #32]
 800a442:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	6a3a      	ldr	r2, [r7, #32]
 800a448:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44c:	3304      	adds	r3, #4
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe ff5c 	bl	800930c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	3318      	adds	r3, #24
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe ff57 	bl	800930c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a462:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a472:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	3354      	adds	r3, #84	@ 0x54
 800a478:	224c      	movs	r2, #76	@ 0x4c
 800a47a:	2100      	movs	r1, #0
 800a47c:	4618      	mov	r0, r3
 800a47e:	f025 fc92 	bl	802fda6 <memset>
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	4a0d      	ldr	r2, [pc, #52]	@ (800a4bc <prvInitialiseNewTask+0x124>)
 800a486:	659a      	str	r2, [r3, #88]	@ 0x58
 800a488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48a:	4a0d      	ldr	r2, [pc, #52]	@ (800a4c0 <prvInitialiseNewTask+0x128>)
 800a48c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a490:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c4 <prvInitialiseNewTask+0x12c>)
 800a492:	661a      	str	r2, [r3, #96]	@ 0x60
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800a494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a496:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	6938      	ldr	r0, [r7, #16]
 800a49e:	f001 fbc9 	bl	800bc34 <pxPortInitialiseStack>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d002      	beq.n	800a4b4 <prvInitialiseNewTask+0x11c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a4b4:	bf00      	nop
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20012a60 	.word	0x20012a60
 800a4c0:	20012ac8 	.word	0x20012ac8
 800a4c4:	20012b30 	.word	0x20012b30

0800a4c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a4d0:	f001 fb52 	bl	800bb78 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a4d4:	4b3e      	ldr	r3, [pc, #248]	@ (800a5d0 <prvAddNewTaskToReadyList+0x108>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	4a3d      	ldr	r2, [pc, #244]	@ (800a5d0 <prvAddNewTaskToReadyList+0x108>)
 800a4dc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a4de:	4b3d      	ldr	r3, [pc, #244]	@ (800a5d4 <prvAddNewTaskToReadyList+0x10c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d109      	bne.n	800a4fa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a4e6:	4a3b      	ldr	r2, [pc, #236]	@ (800a5d4 <prvAddNewTaskToReadyList+0x10c>)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4ec:	4b38      	ldr	r3, [pc, #224]	@ (800a5d0 <prvAddNewTaskToReadyList+0x108>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d110      	bne.n	800a516 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a4f4:	f000 fd3a 	bl	800af6c <prvInitialiseTaskLists>
 800a4f8:	e00d      	b.n	800a516 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a4fa:	4b37      	ldr	r3, [pc, #220]	@ (800a5d8 <prvAddNewTaskToReadyList+0x110>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a502:	4b34      	ldr	r3, [pc, #208]	@ (800a5d4 <prvAddNewTaskToReadyList+0x10c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d802      	bhi.n	800a516 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a510:	4a30      	ldr	r2, [pc, #192]	@ (800a5d4 <prvAddNewTaskToReadyList+0x10c>)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a516:	4b31      	ldr	r3, [pc, #196]	@ (800a5dc <prvAddNewTaskToReadyList+0x114>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a2f      	ldr	r2, [pc, #188]	@ (800a5dc <prvAddNewTaskToReadyList+0x114>)
 800a51e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a520:	4b2e      	ldr	r3, [pc, #184]	@ (800a5dc <prvAddNewTaskToReadyList+0x114>)
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a52c:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e0 <prvAddNewTaskToReadyList+0x118>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <prvAddNewTaskToReadyList+0x74>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a538:	4a29      	ldr	r2, [pc, #164]	@ (800a5e0 <prvAddNewTaskToReadyList+0x118>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a540:	4928      	ldr	r1, [pc, #160]	@ (800a5e4 <prvAddNewTaskToReadyList+0x11c>)
 800a542:	4613      	mov	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	440b      	add	r3, r1
 800a54c:	3304      	adds	r3, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	609a      	str	r2, [r3, #8]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	60da      	str	r2, [r3, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	3204      	adds	r2, #4
 800a568:	605a      	str	r2, [r3, #4]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	1d1a      	adds	r2, r3, #4
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	609a      	str	r2, [r3, #8]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4a19      	ldr	r2, [pc, #100]	@ (800a5e4 <prvAddNewTaskToReadyList+0x11c>)
 800a580:	441a      	add	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	615a      	str	r2, [r3, #20]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a58a:	4916      	ldr	r1, [pc, #88]	@ (800a5e4 <prvAddNewTaskToReadyList+0x11c>)
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	440b      	add	r3, r1
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	1c59      	adds	r1, r3, #1
 800a59a:	4812      	ldr	r0, [pc, #72]	@ (800a5e4 <prvAddNewTaskToReadyList+0x11c>)
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4403      	add	r3, r0
 800a5a6:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a5a8:	f001 faf8 	bl	800bb9c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <prvAddNewTaskToReadyList+0x110>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d008      	beq.n	800a5c6 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5b4:	4b07      	ldr	r3, [pc, #28]	@ (800a5d4 <prvAddNewTaskToReadyList+0x10c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d201      	bcs.n	800a5c6 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a5c2:	f001 fac7 	bl	800bb54 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a5c6:	bf00      	nop
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20001070 	.word	0x20001070
 800a5d4:	20000b9c 	.word	0x20000b9c
 800a5d8:	2000107c 	.word	0x2000107c
 800a5dc:	2000108c 	.word	0x2000108c
 800a5e0:	20001078 	.word	0x20001078
 800a5e4:	20000ba0 	.word	0x20000ba0

0800a5e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d010      	beq.n	800a61c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800a5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a630 <vTaskDelay+0x48>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <vTaskDelay+0x22>
 800a602:	f001 fbf9 	bl	800bdf8 <ulSetInterruptMask>
 800a606:	bf00      	nop
 800a608:	e7fd      	b.n	800a606 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800a60a:	f000 f877 	bl	800a6fc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a60e:	2100      	movs	r1, #0
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 ff4b 	bl	800b4ac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800a616:	f000 f87f 	bl	800a718 <xTaskResumeAll>
 800a61a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800a622:	f001 fa97 	bl	800bb54 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20001098 	.word	0x20001098

0800a634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a642:	463a      	mov	r2, r7
 800a644:	1d39      	adds	r1, r7, #4
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe fe0a 	bl	8009264 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	9202      	str	r2, [sp, #8]
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	2300      	movs	r3, #0
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	2300      	movs	r3, #0
 800a660:	460a      	mov	r2, r1
 800a662:	491d      	ldr	r1, [pc, #116]	@ (800a6d8 <vTaskStartScheduler+0xa4>)
 800a664:	481d      	ldr	r0, [pc, #116]	@ (800a6dc <vTaskStartScheduler+0xa8>)
 800a666:	f7ff fdff 	bl	800a268 <xTaskCreateStatic>
 800a66a:	4603      	mov	r3, r0
 800a66c:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e0 <vTaskStartScheduler+0xac>)
 800a66e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800a670:	4b1b      	ldr	r3, [pc, #108]	@ (800a6e0 <vTaskStartScheduler+0xac>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800a678:	2301      	movs	r3, #1
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e001      	b.n	800a682 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800a67e:	2300      	movs	r3, #0
 800a680:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d102      	bne.n	800a68e <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800a688:	f000 ff7e 	bl	800b588 <xTimerCreateTimerTask>
 800a68c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d113      	bne.n	800a6bc <vTaskStartScheduler+0x88>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800a694:	f001 fbb0 	bl	800bdf8 <ulSetInterruptMask>

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800a698:	4b12      	ldr	r3, [pc, #72]	@ (800a6e4 <vTaskStartScheduler+0xb0>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3354      	adds	r3, #84	@ 0x54
 800a69e:	4a12      	ldr	r2, [pc, #72]	@ (800a6e8 <vTaskStartScheduler+0xb4>)
 800a6a0:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800a6a2:	4b12      	ldr	r3, [pc, #72]	@ (800a6ec <vTaskStartScheduler+0xb8>)
 800a6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a6aa:	4b11      	ldr	r3, [pc, #68]	@ (800a6f0 <vTaskStartScheduler+0xbc>)
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6b0:	4b10      	ldr	r3, [pc, #64]	@ (800a6f4 <vTaskStartScheduler+0xc0>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800a6b6:	f001 fb47 	bl	800bd48 <xPortStartScheduler>
 800a6ba:	e007      	b.n	800a6cc <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c2:	d103      	bne.n	800a6cc <vTaskStartScheduler+0x98>
 800a6c4:	f001 fb98 	bl	800bdf8 <ulSetInterruptMask>
 800a6c8:	bf00      	nop
 800a6ca:	e7fd      	b.n	800a6c8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f8 <vTaskStartScheduler+0xc4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	08030afc 	.word	0x08030afc
 800a6dc:	0800af4d 	.word	0x0800af4d
 800a6e0:	20001094 	.word	0x20001094
 800a6e4:	20000b9c 	.word	0x20000b9c
 800a6e8:	200000b0 	.word	0x200000b0
 800a6ec:	20001090 	.word	0x20001090
 800a6f0:	2000107c 	.word	0x2000107c
 800a6f4:	20001074 	.word	0x20001074
 800a6f8:	20000014 	.word	0x20000014

0800a6fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a700:	4b04      	ldr	r3, [pc, #16]	@ (800a714 <vTaskSuspendAll+0x18>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	4a03      	ldr	r2, [pc, #12]	@ (800a714 <vTaskSuspendAll+0x18>)
 800a708:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a70a:	bf00      	nop
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	20001098 	.word	0x20001098

0800a718 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a726:	4b6b      	ldr	r3, [pc, #428]	@ (800a8d4 <xTaskResumeAll+0x1bc>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d103      	bne.n	800a736 <xTaskResumeAll+0x1e>
 800a72e:	f001 fb63 	bl	800bdf8 <ulSetInterruptMask>
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a736:	f001 fa1f 	bl	800bb78 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a73a:	4b66      	ldr	r3, [pc, #408]	@ (800a8d4 <xTaskResumeAll+0x1bc>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3b01      	subs	r3, #1
 800a740:	4a64      	ldr	r2, [pc, #400]	@ (800a8d4 <xTaskResumeAll+0x1bc>)
 800a742:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a744:	4b63      	ldr	r3, [pc, #396]	@ (800a8d4 <xTaskResumeAll+0x1bc>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 80bb 	bne.w	800a8c4 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a74e:	4b62      	ldr	r3, [pc, #392]	@ (800a8d8 <xTaskResumeAll+0x1c0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 80b6 	beq.w	800a8c4 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a758:	e08b      	b.n	800a872 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a75a:	4b60      	ldr	r3, [pc, #384]	@ (800a8dc <xTaskResumeAll+0x1c4>)
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a766:	60bb      	str	r3, [r7, #8]
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	6a12      	ldr	r2, [r2, #32]
 800a770:	609a      	str	r2, [r3, #8]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	69d2      	ldr	r2, [r2, #28]
 800a77a:	605a      	str	r2, [r3, #4]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	685a      	ldr	r2, [r3, #4]
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	3318      	adds	r3, #24
 800a784:	429a      	cmp	r2, r3
 800a786:	d103      	bne.n	800a790 <xTaskResumeAll+0x78>
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	6a1a      	ldr	r2, [r3, #32]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	605a      	str	r2, [r3, #4]
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2200      	movs	r2, #0
 800a794:	629a      	str	r2, [r3, #40]	@ 0x28
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	1e5a      	subs	r2, r3, #1
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	607b      	str	r3, [r7, #4]
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	68d2      	ldr	r2, [r2, #12]
 800a7ae:	609a      	str	r2, [r3, #8]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	6892      	ldr	r2, [r2, #8]
 800a7b8:	605a      	str	r2, [r3, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d103      	bne.n	800a7ce <xTaskResumeAll+0xb6>
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	605a      	str	r2, [r3, #4]
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	615a      	str	r2, [r3, #20]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e2:	4b3f      	ldr	r3, [pc, #252]	@ (800a8e0 <xTaskResumeAll+0x1c8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d903      	bls.n	800a7f2 <xTaskResumeAll+0xda>
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ee:	4a3c      	ldr	r2, [pc, #240]	@ (800a8e0 <xTaskResumeAll+0x1c8>)
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f6:	493b      	ldr	r1, [pc, #236]	@ (800a8e4 <xTaskResumeAll+0x1cc>)
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	3304      	adds	r3, #4
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	609a      	str	r2, [r3, #8]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	689a      	ldr	r2, [r3, #8]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	60da      	str	r2, [r3, #12]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	3204      	adds	r2, #4
 800a81e:	605a      	str	r2, [r3, #4]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	1d1a      	adds	r2, r3, #4
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	609a      	str	r2, [r3, #8]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4a2b      	ldr	r2, [pc, #172]	@ (800a8e4 <xTaskResumeAll+0x1cc>)
 800a836:	441a      	add	r2, r3
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	615a      	str	r2, [r3, #20]
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a840:	4928      	ldr	r1, [pc, #160]	@ (800a8e4 <xTaskResumeAll+0x1cc>)
 800a842:	4613      	mov	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4413      	add	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	440b      	add	r3, r1
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	1c59      	adds	r1, r3, #1
 800a850:	4824      	ldr	r0, [pc, #144]	@ (800a8e4 <xTaskResumeAll+0x1cc>)
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4403      	add	r3, r0
 800a85c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a862:	4b21      	ldr	r3, [pc, #132]	@ (800a8e8 <xTaskResumeAll+0x1d0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a868:	429a      	cmp	r2, r3
 800a86a:	d302      	bcc.n	800a872 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800a86c:	4b1f      	ldr	r3, [pc, #124]	@ (800a8ec <xTaskResumeAll+0x1d4>)
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a872:	4b1a      	ldr	r3, [pc, #104]	@ (800a8dc <xTaskResumeAll+0x1c4>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f47f af6f 	bne.w	800a75a <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a882:	f000 fc11 	bl	800b0a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a886:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f0 <xTaskResumeAll+0x1d8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d010      	beq.n	800a8b4 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a892:	f000 f84b 	bl	800a92c <xTaskIncrementTick>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800a89c:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <xTaskResumeAll+0x1d4>)
 800a89e:	2201      	movs	r2, #1
 800a8a0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1f1      	bne.n	800a892 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800a8ae:	4b10      	ldr	r3, [pc, #64]	@ (800a8f0 <xTaskResumeAll+0x1d8>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800a8ec <xTaskResumeAll+0x1d4>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a8c0:	f001 f948 	bl	800bb54 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a8c4:	f001 f96a 	bl	800bb9c <vPortExitCritical>

    return xAlreadyYielded;
 800a8c8:	693b      	ldr	r3, [r7, #16]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20001098 	.word	0x20001098
 800a8d8:	20001070 	.word	0x20001070
 800a8dc:	20001030 	.word	0x20001030
 800a8e0:	20001078 	.word	0x20001078
 800a8e4:	20000ba0 	.word	0x20000ba0
 800a8e8:	20000b9c 	.word	0x20000b9c
 800a8ec:	20001084 	.word	0x20001084
 800a8f0:	20001080 	.word	0x20001080

0800a8f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a8fa:	4b05      	ldr	r3, [pc, #20]	@ (800a910 <xTaskGetTickCount+0x1c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a900:	687b      	ldr	r3, [r7, #4]
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	20001074 	.word	0x20001074

0800a914 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800a914:	b480      	push	{r7}
 800a916:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800a918:	4b03      	ldr	r3, [pc, #12]	@ (800a928 <uxTaskGetNumberOfTasks+0x14>)
 800a91a:	681b      	ldr	r3, [r3, #0]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20001070 	.word	0x20001070

0800a92c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a936:	4b7a      	ldr	r3, [pc, #488]	@ (800ab20 <xTaskIncrementTick+0x1f4>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f040 80e6 	bne.w	800ab0c <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a940:	4b78      	ldr	r3, [pc, #480]	@ (800ab24 <xTaskIncrementTick+0x1f8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a948:	4a76      	ldr	r2, [pc, #472]	@ (800ab24 <xTaskIncrementTick+0x1f8>)
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d119      	bne.n	800a988 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800a954:	4b74      	ldr	r3, [pc, #464]	@ (800ab28 <xTaskIncrementTick+0x1fc>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <xTaskIncrementTick+0x3a>
 800a95e:	f001 fa4b 	bl	800bdf8 <ulSetInterruptMask>
 800a962:	bf00      	nop
 800a964:	e7fd      	b.n	800a962 <xTaskIncrementTick+0x36>
 800a966:	4b70      	ldr	r3, [pc, #448]	@ (800ab28 <xTaskIncrementTick+0x1fc>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	4b6f      	ldr	r3, [pc, #444]	@ (800ab2c <xTaskIncrementTick+0x200>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a6d      	ldr	r2, [pc, #436]	@ (800ab28 <xTaskIncrementTick+0x1fc>)
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	4a6d      	ldr	r2, [pc, #436]	@ (800ab2c <xTaskIncrementTick+0x200>)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	4b6d      	ldr	r3, [pc, #436]	@ (800ab30 <xTaskIncrementTick+0x204>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3301      	adds	r3, #1
 800a980:	4a6b      	ldr	r2, [pc, #428]	@ (800ab30 <xTaskIncrementTick+0x204>)
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	f000 fb90 	bl	800b0a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a988:	4b6a      	ldr	r3, [pc, #424]	@ (800ab34 <xTaskIncrementTick+0x208>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	429a      	cmp	r2, r3
 800a990:	f0c0 80a7 	bcc.w	800aae2 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a994:	4b64      	ldr	r3, [pc, #400]	@ (800ab28 <xTaskIncrementTick+0x1fc>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d104      	bne.n	800a9a8 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a99e:	4b65      	ldr	r3, [pc, #404]	@ (800ab34 <xTaskIncrementTick+0x208>)
 800a9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a4:	601a      	str	r2, [r3, #0]
                    break;
 800a9a6:	e09c      	b.n	800aae2 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a8:	4b5f      	ldr	r3, [pc, #380]	@ (800ab28 <xTaskIncrementTick+0x1fc>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d203      	bcs.n	800a9c8 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a9c0:	4a5c      	ldr	r2, [pc, #368]	@ (800ab34 <xTaskIncrementTick+0x208>)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800a9c6:	e08c      	b.n	800aae2 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	60bb      	str	r3, [r7, #8]
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	68d2      	ldr	r2, [r2, #12]
 800a9d6:	609a      	str	r2, [r3, #8]
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	6892      	ldr	r2, [r2, #8]
 800a9e0:	605a      	str	r2, [r3, #4]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d103      	bne.n	800a9f6 <xTaskIncrementTick+0xca>
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	605a      	str	r2, [r3, #4]
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	615a      	str	r2, [r3, #20]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	1e5a      	subs	r2, r3, #1
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d01e      	beq.n	800aa4c <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa12:	607b      	str	r3, [r7, #4]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	6a12      	ldr	r2, [r2, #32]
 800aa1c:	609a      	str	r2, [r3, #8]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	69d2      	ldr	r2, [r2, #28]
 800aa26:	605a      	str	r2, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	3318      	adds	r3, #24
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d103      	bne.n	800aa3c <xTaskIncrementTick+0x110>
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6a1a      	ldr	r2, [r3, #32]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	629a      	str	r2, [r3, #40]	@ 0x28
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	1e5a      	subs	r2, r3, #1
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa50:	4b39      	ldr	r3, [pc, #228]	@ (800ab38 <xTaskIncrementTick+0x20c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d903      	bls.n	800aa60 <xTaskIncrementTick+0x134>
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5c:	4a36      	ldr	r2, [pc, #216]	@ (800ab38 <xTaskIncrementTick+0x20c>)
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa64:	4935      	ldr	r1, [pc, #212]	@ (800ab3c <xTaskIncrementTick+0x210>)
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	440b      	add	r3, r1
 800aa70:	3304      	adds	r3, #4
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	603b      	str	r3, [r7, #0]
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	609a      	str	r2, [r3, #8]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	689a      	ldr	r2, [r3, #8]
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	60da      	str	r2, [r3, #12]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	3204      	adds	r2, #4
 800aa8c:	605a      	str	r2, [r3, #4]
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	1d1a      	adds	r2, r3, #4
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	609a      	str	r2, [r3, #8]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4a26      	ldr	r2, [pc, #152]	@ (800ab3c <xTaskIncrementTick+0x210>)
 800aaa4:	441a      	add	r2, r3
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	615a      	str	r2, [r3, #20]
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaae:	4923      	ldr	r1, [pc, #140]	@ (800ab3c <xTaskIncrementTick+0x210>)
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	440b      	add	r3, r1
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	1c59      	adds	r1, r3, #1
 800aabe:	481f      	ldr	r0, [pc, #124]	@ (800ab3c <xTaskIncrementTick+0x210>)
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4403      	add	r3, r0
 800aaca:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aad0:	4b1b      	ldr	r3, [pc, #108]	@ (800ab40 <xTaskIncrementTick+0x214>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	f67f af5c 	bls.w	800a994 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800aadc:	2301      	movs	r3, #1
 800aade:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aae0:	e758      	b.n	800a994 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aae2:	4b17      	ldr	r3, [pc, #92]	@ (800ab40 <xTaskIncrementTick+0x214>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae8:	4914      	ldr	r1, [pc, #80]	@ (800ab3c <xTaskIncrementTick+0x210>)
 800aaea:	4613      	mov	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	440b      	add	r3, r1
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d901      	bls.n	800aafe <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800aafa:	2301      	movs	r3, #1
 800aafc:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800aafe:	4b11      	ldr	r3, [pc, #68]	@ (800ab44 <xTaskIncrementTick+0x218>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d007      	beq.n	800ab16 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800ab06:	2301      	movs	r3, #1
 800ab08:	61fb      	str	r3, [r7, #28]
 800ab0a:	e004      	b.n	800ab16 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800ab0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ab48 <xTaskIncrementTick+0x21c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3301      	adds	r3, #1
 800ab12:	4a0d      	ldr	r2, [pc, #52]	@ (800ab48 <xTaskIncrementTick+0x21c>)
 800ab14:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800ab16:	69fb      	ldr	r3, [r7, #28]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3720      	adds	r7, #32
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20001098 	.word	0x20001098
 800ab24:	20001074 	.word	0x20001074
 800ab28:	20001028 	.word	0x20001028
 800ab2c:	2000102c 	.word	0x2000102c
 800ab30:	20001088 	.word	0x20001088
 800ab34:	20001090 	.word	0x20001090
 800ab38:	20001078 	.word	0x20001078
 800ab3c:	20000ba0 	.word	0x20000ba0
 800ab40:	20000b9c 	.word	0x20000b9c
 800ab44:	20001084 	.word	0x20001084
 800ab48:	20001080 	.word	0x20001080

0800ab4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab52:	4b26      	ldr	r3, [pc, #152]	@ (800abec <vTaskSwitchContext+0xa0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800ab5a:	4b25      	ldr	r3, [pc, #148]	@ (800abf0 <vTaskSwitchContext+0xa4>)
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800ab60:	e03f      	b.n	800abe2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800ab62:	4b23      	ldr	r3, [pc, #140]	@ (800abf0 <vTaskSwitchContext+0xa4>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab68:	4b22      	ldr	r3, [pc, #136]	@ (800abf4 <vTaskSwitchContext+0xa8>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	607b      	str	r3, [r7, #4]
 800ab6e:	e009      	b.n	800ab84 <vTaskSwitchContext+0x38>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d103      	bne.n	800ab7e <vTaskSwitchContext+0x32>
 800ab76:	f001 f93f 	bl	800bdf8 <ulSetInterruptMask>
 800ab7a:	bf00      	nop
 800ab7c:	e7fd      	b.n	800ab7a <vTaskSwitchContext+0x2e>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	607b      	str	r3, [r7, #4]
 800ab84:	491c      	ldr	r1, [pc, #112]	@ (800abf8 <vTaskSwitchContext+0xac>)
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	440b      	add	r3, r1
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0eb      	beq.n	800ab70 <vTaskSwitchContext+0x24>
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4a15      	ldr	r2, [pc, #84]	@ (800abf8 <vTaskSwitchContext+0xac>)
 800aba4:	4413      	add	r3, r2
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	605a      	str	r2, [r3, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	3308      	adds	r3, #8
 800abba:	429a      	cmp	r2, r3
 800abbc:	d104      	bne.n	800abc8 <vTaskSwitchContext+0x7c>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	605a      	str	r2, [r3, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	4a0b      	ldr	r2, [pc, #44]	@ (800abfc <vTaskSwitchContext+0xb0>)
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	4a08      	ldr	r2, [pc, #32]	@ (800abf4 <vTaskSwitchContext+0xa8>)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800abd8:	4b08      	ldr	r3, [pc, #32]	@ (800abfc <vTaskSwitchContext+0xb0>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3354      	adds	r3, #84	@ 0x54
 800abde:	4a08      	ldr	r2, [pc, #32]	@ (800ac00 <vTaskSwitchContext+0xb4>)
 800abe0:	6013      	str	r3, [r2, #0]
}
 800abe2:	bf00      	nop
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	20001098 	.word	0x20001098
 800abf0:	20001084 	.word	0x20001084
 800abf4:	20001078 	.word	0x20001078
 800abf8:	20000ba0 	.word	0x20000ba0
 800abfc:	20000b9c 	.word	0x20000b9c
 800ac00:	200000b0 	.word	0x200000b0

0800ac04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <vTaskPlaceOnEventList+0x18>
 800ac14:	f001 f8f0 	bl	800bdf8 <ulSetInterruptMask>
 800ac18:	bf00      	nop
 800ac1a:	e7fd      	b.n	800ac18 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac1c:	4b07      	ldr	r3, [pc, #28]	@ (800ac3c <vTaskPlaceOnEventList+0x38>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3318      	adds	r3, #24
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7fe fb7e 	bl	8009326 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	6838      	ldr	r0, [r7, #0]
 800ac2e:	f000 fc3d 	bl	800b4ac <prvAddCurrentTaskToDelayedList>
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000b9c 	.word	0x20000b9c

0800ac40 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d103      	bne.n	800ac5a <vTaskPlaceOnEventListRestricted+0x1a>
 800ac52:	f001 f8d1 	bl	800bdf8 <ulSetInterruptMask>
 800ac56:	bf00      	nop
 800ac58:	e7fd      	b.n	800ac56 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	4b15      	ldr	r3, [pc, #84]	@ (800acb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	61da      	str	r2, [r3, #28]
 800ac68:	4b13      	ldr	r3, [pc, #76]	@ (800acb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	6892      	ldr	r2, [r2, #8]
 800ac70:	621a      	str	r2, [r3, #32]
 800ac72:	4b11      	ldr	r3, [pc, #68]	@ (800acb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	3218      	adds	r2, #24
 800ac7c:	605a      	str	r2, [r3, #4]
 800ac7e:	4b0e      	ldr	r3, [pc, #56]	@ (800acb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f103 0218 	add.w	r2, r3, #24
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	609a      	str	r2, [r3, #8]
 800ac8a:	4b0b      	ldr	r3, [pc, #44]	@ (800acb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	629a      	str	r2, [r3, #40]	@ 0x28
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800aca2:	f04f 33ff 	mov.w	r3, #4294967295
 800aca6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	68b8      	ldr	r0, [r7, #8]
 800acac:	f000 fbfe 	bl	800b4ac <prvAddCurrentTaskToDelayedList>
    }
 800acb0:	bf00      	nop
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	20000b9c 	.word	0x20000b9c

0800acbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b088      	sub	sp, #32
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d103      	bne.n	800acda <xTaskRemoveFromEventList+0x1e>
 800acd2:	f001 f891 	bl	800bdf8 <ulSetInterruptMask>
 800acd6:	bf00      	nop
 800acd8:	e7fd      	b.n	800acd6 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	6a12      	ldr	r2, [r2, #32]
 800ace8:	609a      	str	r2, [r3, #8]
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	69d2      	ldr	r2, [r2, #28]
 800acf2:	605a      	str	r2, [r3, #4]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	3318      	adds	r3, #24
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d103      	bne.n	800ad08 <xTaskRemoveFromEventList+0x4c>
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	6a1a      	ldr	r2, [r3, #32]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	605a      	str	r2, [r3, #4]
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	1e5a      	subs	r2, r3, #1
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad18:	4b49      	ldr	r3, [pc, #292]	@ (800ae40 <xTaskRemoveFromEventList+0x184>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d15f      	bne.n	800ade0 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	68d2      	ldr	r2, [r2, #12]
 800ad2e:	609a      	str	r2, [r3, #8]
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	6892      	ldr	r2, [r2, #8]
 800ad38:	605a      	str	r2, [r3, #4]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	3304      	adds	r3, #4
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d103      	bne.n	800ad4e <xTaskRemoveFromEventList+0x92>
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	68da      	ldr	r2, [r3, #12]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	605a      	str	r2, [r3, #4]
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	2200      	movs	r2, #0
 800ad52:	615a      	str	r2, [r3, #20]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	1e5a      	subs	r2, r3, #1
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad62:	4b38      	ldr	r3, [pc, #224]	@ (800ae44 <xTaskRemoveFromEventList+0x188>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d903      	bls.n	800ad72 <xTaskRemoveFromEventList+0xb6>
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6e:	4a35      	ldr	r2, [pc, #212]	@ (800ae44 <xTaskRemoveFromEventList+0x188>)
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad76:	4934      	ldr	r1, [pc, #208]	@ (800ae48 <xTaskRemoveFromEventList+0x18c>)
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	440b      	add	r3, r1
 800ad82:	3304      	adds	r3, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	60bb      	str	r3, [r7, #8]
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	609a      	str	r2, [r3, #8]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	689a      	ldr	r2, [r3, #8]
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	3204      	adds	r2, #4
 800ad9e:	605a      	str	r2, [r3, #4]
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	1d1a      	adds	r2, r3, #4
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	609a      	str	r2, [r3, #8]
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4a24      	ldr	r2, [pc, #144]	@ (800ae48 <xTaskRemoveFromEventList+0x18c>)
 800adb6:	441a      	add	r2, r3
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	615a      	str	r2, [r3, #20]
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc0:	4921      	ldr	r1, [pc, #132]	@ (800ae48 <xTaskRemoveFromEventList+0x18c>)
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	1c59      	adds	r1, r3, #1
 800add0:	481d      	ldr	r0, [pc, #116]	@ (800ae48 <xTaskRemoveFromEventList+0x18c>)
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4403      	add	r3, r0
 800addc:	6019      	str	r1, [r3, #0]
 800adde:	e01b      	b.n	800ae18 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ade0:	4b1a      	ldr	r3, [pc, #104]	@ (800ae4c <xTaskRemoveFromEventList+0x190>)
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	613b      	str	r3, [r7, #16]
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	61da      	str	r2, [r3, #28]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	621a      	str	r2, [r3, #32]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	69ba      	ldr	r2, [r7, #24]
 800adfa:	3218      	adds	r2, #24
 800adfc:	605a      	str	r2, [r3, #4]
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	f103 0218 	add.w	r2, r3, #24
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	609a      	str	r2, [r3, #8]
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	4a10      	ldr	r2, [pc, #64]	@ (800ae4c <xTaskRemoveFromEventList+0x190>)
 800ae0c:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae4c <xTaskRemoveFromEventList+0x190>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	4a0d      	ldr	r2, [pc, #52]	@ (800ae4c <xTaskRemoveFromEventList+0x190>)
 800ae16:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ae50 <xTaskRemoveFromEventList+0x194>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d905      	bls.n	800ae32 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800ae26:	2301      	movs	r3, #1
 800ae28:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800ae2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae54 <xTaskRemoveFromEventList+0x198>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	e001      	b.n	800ae36 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800ae36:	69fb      	ldr	r3, [r7, #28]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	20001098 	.word	0x20001098
 800ae44:	20001078 	.word	0x20001078
 800ae48:	20000ba0 	.word	0x20000ba0
 800ae4c:	20001030 	.word	0x20001030
 800ae50:	20000b9c 	.word	0x20000b9c
 800ae54:	20001084 	.word	0x20001084

0800ae58 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae60:	4b06      	ldr	r3, [pc, #24]	@ (800ae7c <vTaskInternalSetTimeOutState+0x24>)
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800ae68:	4b05      	ldr	r3, [pc, #20]	@ (800ae80 <vTaskInternalSetTimeOutState+0x28>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	605a      	str	r2, [r3, #4]
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20001088 	.word	0x20001088
 800ae80:	20001074 	.word	0x20001074

0800ae84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d103      	bne.n	800ae9c <xTaskCheckForTimeOut+0x18>
 800ae94:	f000 ffb0 	bl	800bdf8 <ulSetInterruptMask>
 800ae98:	bf00      	nop
 800ae9a:	e7fd      	b.n	800ae98 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d103      	bne.n	800aeaa <xTaskCheckForTimeOut+0x26>
 800aea2:	f000 ffa9 	bl	800bdf8 <ulSetInterruptMask>
 800aea6:	bf00      	nop
 800aea8:	e7fd      	b.n	800aea6 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800aeaa:	f000 fe65 	bl	800bb78 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800aeae:	4b1f      	ldr	r3, [pc, #124]	@ (800af2c <xTaskCheckForTimeOut+0xa8>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec6:	d102      	bne.n	800aece <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	e026      	b.n	800af1c <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4b17      	ldr	r3, [pc, #92]	@ (800af30 <xTaskCheckForTimeOut+0xac>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d00a      	beq.n	800aef0 <xTaskCheckForTimeOut+0x6c>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d305      	bcc.n	800aef0 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	e015      	b.n	800af1c <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d20b      	bcs.n	800af12 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	1ad2      	subs	r2, r2, r3
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff ffa6 	bl	800ae58 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	e004      	b.n	800af1c <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800af1c:	f000 fe3e 	bl	800bb9c <vPortExitCritical>

    return xReturn;
 800af20:	697b      	ldr	r3, [r7, #20]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20001074 	.word	0x20001074
 800af30:	20001088 	.word	0x20001088

0800af34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af34:	b480      	push	{r7}
 800af36:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800af38:	4b03      	ldr	r3, [pc, #12]	@ (800af48 <vTaskMissedYield+0x14>)
 800af3a:	2201      	movs	r2, #1
 800af3c:	601a      	str	r2, [r3, #0]
}
 800af3e:	bf00      	nop
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	20001084 	.word	0x20001084

0800af4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800af54:	f000 f84a 	bl	800afec <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af58:	4b03      	ldr	r3, [pc, #12]	@ (800af68 <prvIdleTask+0x1c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d9f9      	bls.n	800af54 <prvIdleTask+0x8>
            {
                taskYIELD();
 800af60:	f000 fdf8 	bl	800bb54 <vPortYield>
        prvCheckTasksWaitingTermination();
 800af64:	e7f6      	b.n	800af54 <prvIdleTask+0x8>
 800af66:	bf00      	nop
 800af68:	20000ba0 	.word	0x20000ba0

0800af6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af72:	2300      	movs	r3, #0
 800af74:	607b      	str	r3, [r7, #4]
 800af76:	e00c      	b.n	800af92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4a12      	ldr	r2, [pc, #72]	@ (800afcc <prvInitialiseTaskLists+0x60>)
 800af84:	4413      	add	r3, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe f9a0 	bl	80092cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3301      	adds	r3, #1
 800af90:	607b      	str	r3, [r7, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b37      	cmp	r3, #55	@ 0x37
 800af96:	d9ef      	bls.n	800af78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800af98:	480d      	ldr	r0, [pc, #52]	@ (800afd0 <prvInitialiseTaskLists+0x64>)
 800af9a:	f7fe f997 	bl	80092cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800af9e:	480d      	ldr	r0, [pc, #52]	@ (800afd4 <prvInitialiseTaskLists+0x68>)
 800afa0:	f7fe f994 	bl	80092cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800afa4:	480c      	ldr	r0, [pc, #48]	@ (800afd8 <prvInitialiseTaskLists+0x6c>)
 800afa6:	f7fe f991 	bl	80092cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800afaa:	480c      	ldr	r0, [pc, #48]	@ (800afdc <prvInitialiseTaskLists+0x70>)
 800afac:	f7fe f98e 	bl	80092cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800afb0:	480b      	ldr	r0, [pc, #44]	@ (800afe0 <prvInitialiseTaskLists+0x74>)
 800afb2:	f7fe f98b 	bl	80092cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800afb6:	4b0b      	ldr	r3, [pc, #44]	@ (800afe4 <prvInitialiseTaskLists+0x78>)
 800afb8:	4a05      	ldr	r2, [pc, #20]	@ (800afd0 <prvInitialiseTaskLists+0x64>)
 800afba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afbc:	4b0a      	ldr	r3, [pc, #40]	@ (800afe8 <prvInitialiseTaskLists+0x7c>)
 800afbe:	4a05      	ldr	r2, [pc, #20]	@ (800afd4 <prvInitialiseTaskLists+0x68>)
 800afc0:	601a      	str	r2, [r3, #0]
}
 800afc2:	bf00      	nop
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000ba0 	.word	0x20000ba0
 800afd0:	20001000 	.word	0x20001000
 800afd4:	20001014 	.word	0x20001014
 800afd8:	20001030 	.word	0x20001030
 800afdc:	20001044 	.word	0x20001044
 800afe0:	2000105c 	.word	0x2000105c
 800afe4:	20001028 	.word	0x20001028
 800afe8:	2000102c 	.word	0x2000102c

0800afec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aff2:	e019      	b.n	800b028 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800aff4:	f000 fdc0 	bl	800bb78 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff8:	4b10      	ldr	r3, [pc, #64]	@ (800b03c <prvCheckTasksWaitingTermination+0x50>)
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3304      	adds	r3, #4
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe f9c7 	bl	8009398 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800b00a:	4b0d      	ldr	r3, [pc, #52]	@ (800b040 <prvCheckTasksWaitingTermination+0x54>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3b01      	subs	r3, #1
 800b010:	4a0b      	ldr	r2, [pc, #44]	@ (800b040 <prvCheckTasksWaitingTermination+0x54>)
 800b012:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800b014:	4b0b      	ldr	r3, [pc, #44]	@ (800b044 <prvCheckTasksWaitingTermination+0x58>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3b01      	subs	r3, #1
 800b01a:	4a0a      	ldr	r2, [pc, #40]	@ (800b044 <prvCheckTasksWaitingTermination+0x58>)
 800b01c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800b01e:	f000 fdbd 	bl	800bb9c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f810 	bl	800b048 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b028:	4b06      	ldr	r3, [pc, #24]	@ (800b044 <prvCheckTasksWaitingTermination+0x58>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e1      	bne.n	800aff4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20001044 	.word	0x20001044
 800b040:	20001070 	.word	0x20001070
 800b044:	20001058 	.word	0x20001058

0800b048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800b050:	4b14      	ldr	r3, [pc, #80]	@ (800b0a4 <prvDeleteTCB+0x5c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3354      	adds	r3, #84	@ 0x54
 800b056:	4618      	mov	r0, r3
 800b058:	f024 feee 	bl	802fe38 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b062:	2b00      	cmp	r3, #0
 800b064:	d108      	bne.n	800b078 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 ffd0 	bl	800c010 <vPortFree>
                vPortFree( pxTCB );
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 ffcd 	bl	800c010 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b076:	e011      	b.n	800b09c <prvDeleteTCB+0x54>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d103      	bne.n	800b08a <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 ffc4 	bl	800c010 <vPortFree>
    }
 800b088:	e008      	b.n	800b09c <prvDeleteTCB+0x54>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b090:	2b02      	cmp	r3, #2
 800b092:	d003      	beq.n	800b09c <prvDeleteTCB+0x54>
 800b094:	f000 feb0 	bl	800bdf8 <ulSetInterruptMask>
 800b098:	bf00      	nop
 800b09a:	e7fd      	b.n	800b098 <prvDeleteTCB+0x50>
    }
 800b09c:	bf00      	nop
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20000b9c 	.word	0x20000b9c

0800b0a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b0d8 <prvResetNextTaskUnblockTime+0x30>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d104      	bne.n	800b0c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b0b6:	4b09      	ldr	r3, [pc, #36]	@ (800b0dc <prvResetNextTaskUnblockTime+0x34>)
 800b0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b0be:	e005      	b.n	800b0cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b0c0:	4b05      	ldr	r3, [pc, #20]	@ (800b0d8 <prvResetNextTaskUnblockTime+0x30>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a04      	ldr	r2, [pc, #16]	@ (800b0dc <prvResetNextTaskUnblockTime+0x34>)
 800b0ca:	6013      	str	r3, [r2, #0]
}
 800b0cc:	bf00      	nop
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	20001028 	.word	0x20001028
 800b0dc:	20001090 	.word	0x20001090

0800b0e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b114 <xTaskGetSchedulerState+0x34>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	607b      	str	r3, [r7, #4]
 800b0f2:	e008      	b.n	800b106 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0f4:	4b08      	ldr	r3, [pc, #32]	@ (800b118 <xTaskGetSchedulerState+0x38>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	607b      	str	r3, [r7, #4]
 800b100:	e001      	b.n	800b106 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b102:	2300      	movs	r3, #0
 800b104:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b106:	687b      	ldr	r3, [r7, #4]
    }
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	2000107c 	.word	0x2000107c
 800b118:	20001098 	.word	0x20001098

0800b11c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b128:	2300      	movs	r3, #0
 800b12a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d079      	beq.n	800b226 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b136:	4b3e      	ldr	r3, [pc, #248]	@ (800b230 <xTaskPriorityInherit+0x114>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d269      	bcs.n	800b214 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	db06      	blt.n	800b156 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b148:	4b39      	ldr	r3, [pc, #228]	@ (800b230 <xTaskPriorityInherit+0x114>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	6959      	ldr	r1, [r3, #20]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b15e:	4613      	mov	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4a33      	ldr	r2, [pc, #204]	@ (800b234 <xTaskPriorityInherit+0x118>)
 800b168:	4413      	add	r3, r2
 800b16a:	4299      	cmp	r1, r3
 800b16c:	d14a      	bne.n	800b204 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	3304      	adds	r3, #4
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe f910 	bl	8009398 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b178:	4b2d      	ldr	r3, [pc, #180]	@ (800b230 <xTaskPriorityInherit+0x114>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b186:	4b2c      	ldr	r3, [pc, #176]	@ (800b238 <xTaskPriorityInherit+0x11c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d903      	bls.n	800b196 <xTaskPriorityInherit+0x7a>
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b192:	4a29      	ldr	r2, [pc, #164]	@ (800b238 <xTaskPriorityInherit+0x11c>)
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b19a:	4926      	ldr	r1, [pc, #152]	@ (800b234 <xTaskPriorityInherit+0x118>)
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	440b      	add	r3, r1
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	609a      	str	r2, [r3, #8]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	689a      	ldr	r2, [r3, #8]
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	60da      	str	r2, [r3, #12]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	3204      	adds	r2, #4
 800b1c2:	605a      	str	r2, [r3, #4]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	1d1a      	adds	r2, r3, #4
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	609a      	str	r2, [r3, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4a16      	ldr	r2, [pc, #88]	@ (800b234 <xTaskPriorityInherit+0x118>)
 800b1da:	441a      	add	r2, r3
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	615a      	str	r2, [r3, #20]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e4:	4913      	ldr	r1, [pc, #76]	@ (800b234 <xTaskPriorityInherit+0x118>)
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	1c59      	adds	r1, r3, #1
 800b1f4:	480f      	ldr	r0, [pc, #60]	@ (800b234 <xTaskPriorityInherit+0x118>)
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4403      	add	r3, r0
 800b200:	6019      	str	r1, [r3, #0]
 800b202:	e004      	b.n	800b20e <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b204:	4b0a      	ldr	r3, [pc, #40]	@ (800b230 <xTaskPriorityInherit+0x114>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b20e:	2301      	movs	r3, #1
 800b210:	617b      	str	r3, [r7, #20]
 800b212:	e008      	b.n	800b226 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b218:	4b05      	ldr	r3, [pc, #20]	@ (800b230 <xTaskPriorityInherit+0x114>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21e:	429a      	cmp	r2, r3
 800b220:	d201      	bcs.n	800b226 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b222:	2301      	movs	r3, #1
 800b224:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b226:	697b      	ldr	r3, [r7, #20]
    }
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20000b9c 	.word	0x20000b9c
 800b234:	20000ba0 	.word	0x20000ba0
 800b238:	20001078 	.word	0x20001078

0800b23c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b248:	2300      	movs	r3, #0
 800b24a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d070      	beq.n	800b334 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b252:	4b3b      	ldr	r3, [pc, #236]	@ (800b340 <xTaskPriorityDisinherit+0x104>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d003      	beq.n	800b264 <xTaskPriorityDisinherit+0x28>
 800b25c:	f000 fdcc 	bl	800bdf8 <ulSetInterruptMask>
 800b260:	bf00      	nop
 800b262:	e7fd      	b.n	800b260 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d103      	bne.n	800b274 <xTaskPriorityDisinherit+0x38>
 800b26c:	f000 fdc4 	bl	800bdf8 <ulSetInterruptMask>
 800b270:	bf00      	nop
 800b272:	e7fd      	b.n	800b270 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b278:	1e5a      	subs	r2, r3, #1
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b286:	429a      	cmp	r2, r3
 800b288:	d054      	beq.n	800b334 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d150      	bne.n	800b334 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	3304      	adds	r3, #4
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe f87e 	bl	8009398 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b4:	4b23      	ldr	r3, [pc, #140]	@ (800b344 <xTaskPriorityDisinherit+0x108>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d903      	bls.n	800b2c4 <xTaskPriorityDisinherit+0x88>
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	4a20      	ldr	r2, [pc, #128]	@ (800b344 <xTaskPriorityDisinherit+0x108>)
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c8:	491f      	ldr	r1, [pc, #124]	@ (800b348 <xTaskPriorityDisinherit+0x10c>)
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	440b      	add	r3, r1
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	609a      	str	r2, [r3, #8]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	689a      	ldr	r2, [r3, #8]
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	60da      	str	r2, [r3, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	3204      	adds	r2, #4
 800b2f0:	605a      	str	r2, [r3, #4]
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	1d1a      	adds	r2, r3, #4
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	609a      	str	r2, [r3, #8]
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4a10      	ldr	r2, [pc, #64]	@ (800b348 <xTaskPriorityDisinherit+0x10c>)
 800b308:	441a      	add	r2, r3
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	615a      	str	r2, [r3, #20]
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b312:	490d      	ldr	r1, [pc, #52]	@ (800b348 <xTaskPriorityDisinherit+0x10c>)
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	440b      	add	r3, r1
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	1c59      	adds	r1, r3, #1
 800b322:	4809      	ldr	r0, [pc, #36]	@ (800b348 <xTaskPriorityDisinherit+0x10c>)
 800b324:	4613      	mov	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4403      	add	r3, r0
 800b32e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b330:	2301      	movs	r3, #1
 800b332:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b334:	697b      	ldr	r3, [r7, #20]
    }
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20000b9c 	.word	0x20000b9c
 800b344:	20001078 	.word	0x20001078
 800b348:	20000ba0 	.word	0x20000ba0

0800b34c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b088      	sub	sp, #32
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b35a:	2301      	movs	r3, #1
 800b35c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	f000 8085 	beq.w	800b470 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d103      	bne.n	800b376 <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800b36e:	f000 fd43 	bl	800bdf8 <ulSetInterruptMask>
 800b372:	bf00      	nop
 800b374:	e7fd      	b.n	800b372 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d902      	bls.n	800b386 <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	61fb      	str	r3, [r7, #28]
 800b384:	e002      	b.n	800b38c <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b38a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	429a      	cmp	r2, r3
 800b394:	d06c      	beq.n	800b470 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d167      	bne.n	800b470 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b3a0:	4b35      	ldr	r3, [pc, #212]	@ (800b478 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d103      	bne.n	800b3b2 <vTaskPriorityDisinheritAfterTimeout+0x66>
 800b3aa:	f000 fd25 	bl	800bdf8 <ulSetInterruptMask>
 800b3ae:	bf00      	nop
 800b3b0:	e7fd      	b.n	800b3ae <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	db04      	blt.n	800b3d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	6959      	ldr	r1, [r3, #20]
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4a27      	ldr	r2, [pc, #156]	@ (800b47c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b3e0:	4413      	add	r3, r2
 800b3e2:	4299      	cmp	r1, r3
 800b3e4:	d144      	bne.n	800b470 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fd ffd4 	bl	8009398 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f4:	4b22      	ldr	r3, [pc, #136]	@ (800b480 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d903      	bls.n	800b404 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b400:	4a1f      	ldr	r2, [pc, #124]	@ (800b480 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b402:	6013      	str	r3, [r2, #0]
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b408:	491c      	ldr	r1, [pc, #112]	@ (800b47c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	3304      	adds	r3, #4
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	609a      	str	r2, [r3, #8]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	60da      	str	r2, [r3, #12]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	3204      	adds	r2, #4
 800b430:	605a      	str	r2, [r3, #4]
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	1d1a      	adds	r2, r3, #4
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	609a      	str	r2, [r3, #8]
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4a0d      	ldr	r2, [pc, #52]	@ (800b47c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b448:	441a      	add	r2, r3
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	615a      	str	r2, [r3, #20]
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b452:	490a      	ldr	r1, [pc, #40]	@ (800b47c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	440b      	add	r3, r1
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	1c59      	adds	r1, r3, #1
 800b462:	4806      	ldr	r0, [pc, #24]	@ (800b47c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4403      	add	r3, r0
 800b46e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b470:	bf00      	nop
 800b472:	3720      	adds	r7, #32
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	20000b9c 	.word	0x20000b9c
 800b47c:	20000ba0 	.word	0x20000ba0
 800b480:	20001078 	.word	0x20001078

0800b484 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b488:	4b07      	ldr	r3, [pc, #28]	@ (800b4a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d004      	beq.n	800b49a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b490:	4b05      	ldr	r3, [pc, #20]	@ (800b4a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b496:	3201      	adds	r2, #1
 800b498:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800b49a:	4b03      	ldr	r3, [pc, #12]	@ (800b4a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b49c:	681b      	ldr	r3, [r3, #0]
    }
 800b49e:	4618      	mov	r0, r3
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	20000b9c 	.word	0x20000b9c

0800b4ac <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b4b6:	4b2e      	ldr	r3, [pc, #184]	@ (800b570 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4bc:	4b2d      	ldr	r3, [pc, #180]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fd ff68 	bl	8009398 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d124      	bne.n	800b51a <prvAddCurrentTaskToDelayedList+0x6e>
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d021      	beq.n	800b51a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4d6:	4b28      	ldr	r3, [pc, #160]	@ (800b578 <prvAddCurrentTaskToDelayedList+0xcc>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	613b      	str	r3, [r7, #16]
 800b4dc:	4b25      	ldr	r3, [pc, #148]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	609a      	str	r2, [r3, #8]
 800b4e4:	4b23      	ldr	r3, [pc, #140]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	6892      	ldr	r2, [r2, #8]
 800b4ec:	60da      	str	r2, [r3, #12]
 800b4ee:	4b21      	ldr	r3, [pc, #132]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	3204      	adds	r2, #4
 800b4f8:	605a      	str	r2, [r3, #4]
 800b4fa:	4b1e      	ldr	r3, [pc, #120]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	1d1a      	adds	r2, r3, #4
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	609a      	str	r2, [r3, #8]
 800b504:	4b1b      	ldr	r3, [pc, #108]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a1b      	ldr	r2, [pc, #108]	@ (800b578 <prvAddCurrentTaskToDelayedList+0xcc>)
 800b50a:	615a      	str	r2, [r3, #20]
 800b50c:	4b1a      	ldr	r3, [pc, #104]	@ (800b578 <prvAddCurrentTaskToDelayedList+0xcc>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	3301      	adds	r3, #1
 800b512:	4a19      	ldr	r2, [pc, #100]	@ (800b578 <prvAddCurrentTaskToDelayedList+0xcc>)
 800b514:	6013      	str	r3, [r2, #0]
 800b516:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b518:	e026      	b.n	800b568 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4413      	add	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b522:	4b14      	ldr	r3, [pc, #80]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d209      	bcs.n	800b546 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b532:	4b12      	ldr	r3, [pc, #72]	@ (800b57c <prvAddCurrentTaskToDelayedList+0xd0>)
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	4b0f      	ldr	r3, [pc, #60]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3304      	adds	r3, #4
 800b53c:	4619      	mov	r1, r3
 800b53e:	4610      	mov	r0, r2
 800b540:	f7fd fef1 	bl	8009326 <vListInsert>
}
 800b544:	e010      	b.n	800b568 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b546:	4b0e      	ldr	r3, [pc, #56]	@ (800b580 <prvAddCurrentTaskToDelayedList+0xd4>)
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	4b0a      	ldr	r3, [pc, #40]	@ (800b574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3304      	adds	r3, #4
 800b550:	4619      	mov	r1, r3
 800b552:	4610      	mov	r0, r2
 800b554:	f7fd fee7 	bl	8009326 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800b558:	4b0a      	ldr	r3, [pc, #40]	@ (800b584 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d202      	bcs.n	800b568 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800b562:	4a08      	ldr	r2, [pc, #32]	@ (800b584 <prvAddCurrentTaskToDelayedList+0xd8>)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6013      	str	r3, [r2, #0]
}
 800b568:	bf00      	nop
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20001074 	.word	0x20001074
 800b574:	20000b9c 	.word	0x20000b9c
 800b578:	2000105c 	.word	0x2000105c
 800b57c:	2000102c 	.word	0x2000102c
 800b580:	20001028 	.word	0x20001028
 800b584:	20001090 	.word	0x20001090

0800b588 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800b58e:	2300      	movs	r3, #0
 800b590:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b592:	f000 fa5f 	bl	800ba54 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b596:	4b18      	ldr	r3, [pc, #96]	@ (800b5f8 <xTimerCreateTimerTask+0x70>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d020      	beq.n	800b5e0 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	1d39      	adds	r1, r7, #4
 800b5aa:	f107 0308 	add.w	r3, r7, #8
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fd fe72 	bl	8009298 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	9202      	str	r2, [sp, #8]
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	2302      	movs	r3, #2
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	460a      	mov	r2, r1
 800b5c6:	490d      	ldr	r1, [pc, #52]	@ (800b5fc <xTimerCreateTimerTask+0x74>)
 800b5c8:	480d      	ldr	r0, [pc, #52]	@ (800b600 <xTimerCreateTimerTask+0x78>)
 800b5ca:	f7fe fe4d 	bl	800a268 <xTaskCreateStatic>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	4a0c      	ldr	r2, [pc, #48]	@ (800b604 <xTimerCreateTimerTask+0x7c>)
 800b5d2:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800b604 <xTimerCreateTimerTask+0x7c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d103      	bne.n	800b5ee <xTimerCreateTimerTask+0x66>
 800b5e6:	f000 fc07 	bl	800bdf8 <ulSetInterruptMask>
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <xTimerCreateTimerTask+0x62>
        return xReturn;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
    }
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	200010cc 	.word	0x200010cc
 800b5fc:	08030b04 	.word	0x08030b04
 800b600:	0800b6ad 	.word	0x0800b6ad
 800b604:	200010d0 	.word	0x200010d0

0800b608 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b614:	e008      	b.n	800b628 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4413      	add	r3, r2
 800b61e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	699a      	ldr	r2, [r3, #24]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	18d1      	adds	r1, r2, r3
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f8d7 	bl	800b7e8 <prvInsertTimerInActiveList>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1ea      	bne.n	800b616 <prvReloadTimer+0xe>
        }
    }
 800b640:	bf00      	nop
 800b642:	bf00      	nop
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b656:	4b14      	ldr	r3, [pc, #80]	@ (800b6a8 <prvProcessExpiredTimer+0x5c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3304      	adds	r3, #4
 800b664:	4618      	mov	r0, r3
 800b666:	f7fd fe97 	bl	8009398 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b670:	f003 0304 	and.w	r3, r3, #4
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff ffc3 	bl	800b608 <prvReloadTimer>
 800b682:	e008      	b.n	800b696 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b68a:	f023 0301 	bic.w	r3, r3, #1
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	4798      	blx	r3
    }
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	200010c4 	.word	0x200010c4

0800b6ac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 f851 	bl	800b760 <prvGetNextExpireTime>
 800b6be:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 f805 	bl	800b6d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b6ca:	f000 f8cf 	bl	800b86c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6ce:	bf00      	nop
 800b6d0:	e7f0      	b.n	800b6b4 <prvTimerTask+0x8>
	...

0800b6d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b6de:	f7ff f80d 	bl	800a6fc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6e2:	f107 0308 	add.w	r3, r7, #8
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 f85e 	bl	800b7a8 <prvSampleTimeNow>
 800b6ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d12a      	bne.n	800b74a <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10a      	bne.n	800b710 <prvProcessTimerOrBlockTask+0x3c>
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d806      	bhi.n	800b710 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b702:	f7ff f809 	bl	800a718 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b706:	68f9      	ldr	r1, [r7, #12]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff ff9f 	bl	800b64c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b70e:	e01e      	b.n	800b74e <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d008      	beq.n	800b728 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b716:	4b10      	ldr	r3, [pc, #64]	@ (800b758 <prvProcessTimerOrBlockTask+0x84>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <prvProcessTimerOrBlockTask+0x50>
 800b720:	2301      	movs	r3, #1
 800b722:	e000      	b.n	800b726 <prvProcessTimerOrBlockTask+0x52>
 800b724:	2300      	movs	r3, #0
 800b726:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b728:	4b0c      	ldr	r3, [pc, #48]	@ (800b75c <prvProcessTimerOrBlockTask+0x88>)
 800b72a:	6818      	ldr	r0, [r3, #0]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	4619      	mov	r1, r3
 800b736:	f7fe fd63 	bl	800a200 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b73a:	f7fe ffed 	bl	800a718 <xTaskResumeAll>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800b744:	f000 fa06 	bl	800bb54 <vPortYield>
    }
 800b748:	e001      	b.n	800b74e <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800b74a:	f7fe ffe5 	bl	800a718 <xTaskResumeAll>
    }
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	200010c8 	.word	0x200010c8
 800b75c:	200010cc 	.word	0x200010cc

0800b760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b768:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a4 <prvGetNextExpireTime+0x44>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <prvGetNextExpireTime+0x16>
 800b772:	2201      	movs	r2, #1
 800b774:	e000      	b.n	800b778 <prvGetNextExpireTime+0x18>
 800b776:	2200      	movs	r2, #0
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d105      	bne.n	800b790 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b784:	4b07      	ldr	r3, [pc, #28]	@ (800b7a4 <prvGetNextExpireTime+0x44>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	e001      	b.n	800b794 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b794:	68fb      	ldr	r3, [r7, #12]
    }
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	200010c4 	.word	0x200010c4

0800b7a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b7b0:	f7ff f8a0 	bl	800a8f4 <xTaskGetTickCount>
 800b7b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e4 <prvSampleTimeNow+0x3c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d205      	bcs.n	800b7cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b7c0:	f000 f922 	bl	800ba08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]
 800b7ca:	e002      	b.n	800b7d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b7d2:	4a04      	ldr	r2, [pc, #16]	@ (800b7e4 <prvSampleTimeNow+0x3c>)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
    }
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	200010d4 	.word	0x200010d4

0800b7e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d812      	bhi.n	800b834 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	1ad2      	subs	r2, r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d302      	bcc.n	800b822 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b81c:	2301      	movs	r3, #1
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	e01b      	b.n	800b85a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b822:	4b10      	ldr	r3, [pc, #64]	@ (800b864 <prvInsertTimerInActiveList+0x7c>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	3304      	adds	r3, #4
 800b82a:	4619      	mov	r1, r3
 800b82c:	4610      	mov	r0, r2
 800b82e:	f7fd fd7a 	bl	8009326 <vListInsert>
 800b832:	e012      	b.n	800b85a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d206      	bcs.n	800b84a <prvInsertTimerInActiveList+0x62>
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d302      	bcc.n	800b84a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b844:	2301      	movs	r3, #1
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	e007      	b.n	800b85a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b84a:	4b07      	ldr	r3, [pc, #28]	@ (800b868 <prvInsertTimerInActiveList+0x80>)
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3304      	adds	r3, #4
 800b852:	4619      	mov	r1, r3
 800b854:	4610      	mov	r0, r2
 800b856:	f7fd fd66 	bl	8009326 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b85a:	697b      	ldr	r3, [r7, #20]
    }
 800b85c:	4618      	mov	r0, r3
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	200010c8 	.word	0x200010c8
 800b868:	200010c4 	.word	0x200010c4

0800b86c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b872:	e0b7      	b.n	800b9e4 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	da11      	bge.n	800b89e <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b87a:	1d3b      	adds	r3, r7, #4
 800b87c:	3304      	adds	r3, #4
 800b87e:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d103      	bne.n	800b88e <prvProcessReceivedCommands+0x22>
 800b886:	f000 fab7 	bl	800bdf8 <ulSetInterruptMask>
 800b88a:	bf00      	nop
 800b88c:	e7fd      	b.n	800b88a <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	6850      	ldr	r0, [r2, #4]
 800b896:	69fa      	ldr	r2, [r7, #28]
 800b898:	6892      	ldr	r2, [r2, #8]
 800b89a:	4611      	mov	r1, r2
 800b89c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f2c0 809f 	blt.w	800b9e4 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d004      	beq.n	800b8bc <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fd fd6e 	bl	8009398 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8bc:	463b      	mov	r3, r7
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff ff72 	bl	800b7a8 <prvSampleTimeNow>
 800b8c4:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	2b08      	cmp	r3, #8
 800b8cc:	f200 8087 	bhi.w	800b9de <prvProcessReceivedCommands+0x172>
 800b8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <prvProcessReceivedCommands+0x6c>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b8fd 	.word	0x0800b8fd
 800b8dc:	0800b8fd 	.word	0x0800b8fd
 800b8e0:	0800b965 	.word	0x0800b965
 800b8e4:	0800b979 	.word	0x0800b979
 800b8e8:	0800b9b5 	.word	0x0800b9b5
 800b8ec:	0800b8fd 	.word	0x0800b8fd
 800b8f0:	0800b8fd 	.word	0x0800b8fd
 800b8f4:	0800b965 	.word	0x0800b965
 800b8f8:	0800b979 	.word	0x0800b979
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b902:	f043 0301 	orr.w	r3, r3, #1
 800b906:	b2da      	uxtb	r2, r3
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	699b      	ldr	r3, [r3, #24]
 800b914:	18d1      	adds	r1, r2, r3
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	69b8      	ldr	r0, [r7, #24]
 800b91c:	f7ff ff64 	bl	800b7e8 <prvInsertTimerInActiveList>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d05d      	beq.n	800b9e2 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b92c:	f003 0304 	and.w	r3, r3, #4
 800b930:	2b00      	cmp	r3, #0
 800b932:	d009      	beq.n	800b948 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	4413      	add	r3, r2
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	4619      	mov	r1, r3
 800b940:	69b8      	ldr	r0, [r7, #24]
 800b942:	f7ff fe61 	bl	800b608 <prvReloadTimer>
 800b946:	e008      	b.n	800b95a <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b94e:	f023 0301 	bic.w	r3, r3, #1
 800b952:	b2da      	uxtb	r2, r3
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	69b8      	ldr	r0, [r7, #24]
 800b960:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800b962:	e03e      	b.n	800b9e2 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b96a:	f023 0301 	bic.w	r3, r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b976:	e035      	b.n	800b9e4 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b97e:	f043 0301 	orr.w	r3, r3, #1
 800b982:	b2da      	uxtb	r2, r3
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <prvProcessReceivedCommands+0x134>
 800b998:	f000 fa2e 	bl	800bdf8 <ulSetInterruptMask>
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	699a      	ldr	r2, [r3, #24]
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	18d1      	adds	r1, r2, r3
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	69b8      	ldr	r0, [r7, #24]
 800b9ae:	f7ff ff1b 	bl	800b7e8 <prvInsertTimerInActiveList>
                        break;
 800b9b2:	e017      	b.n	800b9e4 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d103      	bne.n	800b9ca <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800b9c2:	69b8      	ldr	r0, [r7, #24]
 800b9c4:	f000 fb24 	bl	800c010 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b9c8:	e00c      	b.n	800b9e4 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9d0:	f023 0301 	bic.w	r3, r3, #1
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b9dc:	e002      	b.n	800b9e4 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b9de:	bf00      	nop
 800b9e0:	e000      	b.n	800b9e4 <prvProcessReceivedCommands+0x178>
                        break;
 800b9e2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9e4:	4b07      	ldr	r3, [pc, #28]	@ (800ba04 <prvProcessReceivedCommands+0x198>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	1d39      	adds	r1, r7, #4
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe f846 	bl	8009a7e <xQueueReceive>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f47f af3d 	bne.w	800b874 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b9fa:	bf00      	nop
 800b9fc:	bf00      	nop
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	200010cc 	.word	0x200010cc

0800ba08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba0e:	e009      	b.n	800ba24 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba10:	4b0e      	ldr	r3, [pc, #56]	@ (800ba4c <prvSwitchTimerLists+0x44>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ba1a:	f04f 31ff 	mov.w	r1, #4294967295
 800ba1e:	6838      	ldr	r0, [r7, #0]
 800ba20:	f7ff fe14 	bl	800b64c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba24:	4b09      	ldr	r3, [pc, #36]	@ (800ba4c <prvSwitchTimerLists+0x44>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1f0      	bne.n	800ba10 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ba2e:	4b07      	ldr	r3, [pc, #28]	@ (800ba4c <prvSwitchTimerLists+0x44>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ba34:	4b06      	ldr	r3, [pc, #24]	@ (800ba50 <prvSwitchTimerLists+0x48>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a04      	ldr	r2, [pc, #16]	@ (800ba4c <prvSwitchTimerLists+0x44>)
 800ba3a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ba3c:	4a04      	ldr	r2, [pc, #16]	@ (800ba50 <prvSwitchTimerLists+0x48>)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6013      	str	r3, [r2, #0]
    }
 800ba42:	bf00      	nop
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	200010c4 	.word	0x200010c4
 800ba50:	200010c8 	.word	0x200010c8

0800ba54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ba5a:	f000 f88d 	bl	800bb78 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ba5e:	4b15      	ldr	r3, [pc, #84]	@ (800bab4 <prvCheckForValidListAndQueue+0x60>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d120      	bne.n	800baa8 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800ba66:	4814      	ldr	r0, [pc, #80]	@ (800bab8 <prvCheckForValidListAndQueue+0x64>)
 800ba68:	f7fd fc30 	bl	80092cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ba6c:	4813      	ldr	r0, [pc, #76]	@ (800babc <prvCheckForValidListAndQueue+0x68>)
 800ba6e:	f7fd fc2d 	bl	80092cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ba72:	4b13      	ldr	r3, [pc, #76]	@ (800bac0 <prvCheckForValidListAndQueue+0x6c>)
 800ba74:	4a10      	ldr	r2, [pc, #64]	@ (800bab8 <prvCheckForValidListAndQueue+0x64>)
 800ba76:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ba78:	4b12      	ldr	r3, [pc, #72]	@ (800bac4 <prvCheckForValidListAndQueue+0x70>)
 800ba7a:	4a10      	ldr	r2, [pc, #64]	@ (800babc <prvCheckForValidListAndQueue+0x68>)
 800ba7c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	4b11      	ldr	r3, [pc, #68]	@ (800bac8 <prvCheckForValidListAndQueue+0x74>)
 800ba84:	4a11      	ldr	r2, [pc, #68]	@ (800bacc <prvCheckForValidListAndQueue+0x78>)
 800ba86:	2110      	movs	r1, #16
 800ba88:	200a      	movs	r0, #10
 800ba8a:	f7fd fd28 	bl	80094de <xQueueGenericCreateStatic>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	4a08      	ldr	r2, [pc, #32]	@ (800bab4 <prvCheckForValidListAndQueue+0x60>)
 800ba92:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800ba94:	4b07      	ldr	r3, [pc, #28]	@ (800bab4 <prvCheckForValidListAndQueue+0x60>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d005      	beq.n	800baa8 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba9c:	4b05      	ldr	r3, [pc, #20]	@ (800bab4 <prvCheckForValidListAndQueue+0x60>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	490b      	ldr	r1, [pc, #44]	@ (800bad0 <prvCheckForValidListAndQueue+0x7c>)
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe fb36 	bl	800a114 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800baa8:	f000 f878 	bl	800bb9c <vPortExitCritical>
    }
 800baac:	bf00      	nop
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	200010cc 	.word	0x200010cc
 800bab8:	2000109c 	.word	0x2000109c
 800babc:	200010b0 	.word	0x200010b0
 800bac0:	200010c4 	.word	0x200010c4
 800bac4:	200010c8 	.word	0x200010c8
 800bac8:	20001178 	.word	0x20001178
 800bacc:	200010d8 	.word	0x200010d8
 800bad0:	08030b0c 	.word	0x08030b0c

0800bad4 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bad8:	4b0b      	ldr	r3, [pc, #44]	@ (800bb08 <vPortSetupTimerInterrupt+0x34>)
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bade:	4b0b      	ldr	r3, [pc, #44]	@ (800bb0c <vPortSetupTimerInterrupt+0x38>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bae4:	4b0a      	ldr	r3, [pc, #40]	@ (800bb10 <vPortSetupTimerInterrupt+0x3c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a0a      	ldr	r2, [pc, #40]	@ (800bb14 <vPortSetupTimerInterrupt+0x40>)
 800baea:	fba2 2303 	umull	r2, r3, r2, r3
 800baee:	099b      	lsrs	r3, r3, #6
 800baf0:	4a09      	ldr	r2, [pc, #36]	@ (800bb18 <vPortSetupTimerInterrupt+0x44>)
 800baf2:	3b01      	subs	r3, #1
 800baf4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800baf6:	4b04      	ldr	r3, [pc, #16]	@ (800bb08 <vPortSetupTimerInterrupt+0x34>)
 800baf8:	2207      	movs	r2, #7
 800bafa:	601a      	str	r2, [r3, #0]
}
 800bafc:	bf00      	nop
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	e000e010 	.word	0xe000e010
 800bb0c:	e000e018 	.word	0xe000e018
 800bb10:	20000004 	.word	0x20000004
 800bb14:	10624dd3 	.word	0x10624dd3
 800bb18:	e000e014 	.word	0xe000e014

0800bb1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800bb26:	4b0a      	ldr	r3, [pc, #40]	@ (800bb50 <prvTaskExitError+0x34>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d003      	beq.n	800bb38 <prvTaskExitError+0x1c>
 800bb30:	f000 f962 	bl	800bdf8 <ulSetInterruptMask>
 800bb34:	bf00      	nop
 800bb36:	e7fd      	b.n	800bb34 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800bb38:	f000 f95e 	bl	800bdf8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800bb3c:	bf00      	nop
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0fc      	beq.n	800bb3e <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20000018 	.word	0x20000018

0800bb54 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800bb54:	b480      	push	{r7}
 800bb56:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb58:	4b06      	ldr	r3, [pc, #24]	@ (800bb74 <vPortYield+0x20>)
 800bb5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb5e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800bb60:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800bb64:	f3bf 8f6f 	isb	sy
}
 800bb68:	bf00      	nop
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	e000ed04 	.word	0xe000ed04

0800bb78 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800bb7c:	f000 f93c 	bl	800bdf8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800bb80:	4b05      	ldr	r3, [pc, #20]	@ (800bb98 <vPortEnterCritical+0x20>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3301      	adds	r3, #1
 800bb86:	4a04      	ldr	r2, [pc, #16]	@ (800bb98 <vPortEnterCritical+0x20>)
 800bb88:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800bb8a:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800bb8e:	f3bf 8f6f 	isb	sy
}
 800bb92:	bf00      	nop
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20000018 	.word	0x20000018

0800bb9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800bba0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbcc <vPortExitCritical+0x30>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d103      	bne.n	800bbb0 <vPortExitCritical+0x14>
 800bba8:	f000 f926 	bl	800bdf8 <ulSetInterruptMask>
 800bbac:	bf00      	nop
 800bbae:	e7fd      	b.n	800bbac <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800bbb0:	4b06      	ldr	r3, [pc, #24]	@ (800bbcc <vPortExitCritical+0x30>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	4a05      	ldr	r2, [pc, #20]	@ (800bbcc <vPortExitCritical+0x30>)
 800bbb8:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800bbba:	4b04      	ldr	r3, [pc, #16]	@ (800bbcc <vPortExitCritical+0x30>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	f000 f925 	bl	800be12 <vClearInterruptMask>
    }
}
 800bbc8:	bf00      	nop
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20000018 	.word	0x20000018

0800bbd0 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbd6:	f000 f90f 	bl	800bdf8 <ulSetInterruptMask>
 800bbda:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800bbdc:	f7fe fea6 	bl	800a92c <xTaskIncrementTick>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbe6:	4b05      	ldr	r3, [pc, #20]	@ (800bbfc <xPortSysTickHandler+0x2c>)
 800bbe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbec:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f90f 	bl	800be12 <vClearInterruptMask>
}
 800bbf4:	bf00      	nop
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	e000ed04 	.word	0xe000ed04

0800bc00 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3b02      	subs	r3, #2
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800bc16:	7afb      	ldrb	r3, [r7, #11]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d102      	bne.n	800bc22 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800bc1c:	f000 f8b8 	bl	800bd90 <vRestoreContextOfFirstTask>
            break;
 800bc20:	e003      	b.n	800bc2a <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800bc22:	f000 f8e9 	bl	800bdf8 <ulSetInterruptMask>
 800bc26:	bf00      	nop
 800bc28:	e7fd      	b.n	800bc26 <vPortSVCHandler_C+0x26>
    }
}
 800bc2a:	bf00      	nop
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
	...

0800bc34 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
 800bc40:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3b04      	subs	r3, #4
 800bc46:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bc4e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	3b04      	subs	r3, #4
 800bc54:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3b04      	subs	r3, #4
 800bc60:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800bc62:	4a38      	ldr	r2, [pc, #224]	@ (800bd44 <pxPortInitialiseStack+0x110>)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800bc74:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3b04      	subs	r3, #4
 800bc7a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800bc82:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3b04      	subs	r3, #4
 800bc88:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800bc90:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3b04      	subs	r3, #4
 800bc96:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800bc9e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3b04      	subs	r3, #4
 800bca4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3b04      	subs	r3, #4
 800bcb0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800bcb8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	3b04      	subs	r3, #4
 800bcbe:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800bcc6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3b04      	subs	r3, #4
 800bccc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800bcd4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3b04      	subs	r3, #4
 800bcda:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800bce2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3b04      	subs	r3, #4
 800bce8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800bcf0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3b04      	subs	r3, #4
 800bcf6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800bcfe:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3b04      	subs	r3, #4
 800bd04:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800bd0c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3b04      	subs	r3, #4
 800bd12:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800bd1a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3b04      	subs	r3, #4
 800bd20:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800bd28:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3b04      	subs	r3, #4
 800bd2e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800bd36:	68fb      	ldr	r3, [r7, #12]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	0800bb1d 	.word	0x0800bb1d

0800bd48 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800bd4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd80 <xPortStartScheduler+0x38>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a0b      	ldr	r2, [pc, #44]	@ (800bd80 <xPortStartScheduler+0x38>)
 800bd52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd56:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800bd58:	4b09      	ldr	r3, [pc, #36]	@ (800bd80 <xPortStartScheduler+0x38>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a08      	ldr	r2, [pc, #32]	@ (800bd80 <xPortStartScheduler+0x38>)
 800bd5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd62:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800bd64:	f7ff feb6 	bl	800bad4 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800bd68:	4b06      	ldr	r3, [pc, #24]	@ (800bd84 <xPortStartScheduler+0x3c>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800bd6e:	f000 f82f 	bl	800bdd0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800bd72:	f7fe feeb 	bl	800ab4c <vTaskSwitchContext>
    prvTaskExitError();
 800bd76:	f7ff fed1 	bl	800bb1c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	e000ed20 	.word	0xe000ed20
 800bd84:	20000018 	.word	0x20000018
	...

0800bd90 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800bd90:	4a0b      	ldr	r2, [pc, #44]	@ (800bdc0 <pxCurrentTCBConst2>)
 800bd92:	6811      	ldr	r1, [r2, #0]
 800bd94:	6808      	ldr	r0, [r1, #0]
 800bd96:	c806      	ldmia	r0!, {r1, r2}
 800bd98:	f381 880b 	msr	PSPLIM, r1
 800bd9c:	2102      	movs	r1, #2
 800bd9e:	f381 8814 	msr	CONTROL, r1
 800bda2:	3020      	adds	r0, #32
 800bda4:	f380 8809 	msr	PSP, r0
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f04f 0000 	mov.w	r0, #0
 800bdb0:	f380 8811 	msr	BASEPRI, r0
 800bdb4:	4710      	bx	r2
 800bdb6:	bf00      	nop
 800bdb8:	f3af 8000 	nop.w
 800bdbc:	f3af 8000 	nop.w

0800bdc0 <pxCurrentTCBConst2>:
 800bdc0:	20000b9c 	.word	0x20000b9c
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop
	...

0800bdd0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800bdd0:	4807      	ldr	r0, [pc, #28]	@ (800bdf0 <xVTORConst>)
 800bdd2:	6800      	ldr	r0, [r0, #0]
 800bdd4:	6800      	ldr	r0, [r0, #0]
 800bdd6:	f380 8808 	msr	MSP, r0
 800bdda:	b662      	cpsie	i
 800bddc:	b661      	cpsie	f
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	df02      	svc	2
 800bde8:	bf00      	nop
 800bdea:	bf00      	nop
 800bdec:	f3af 8000 	nop.w

0800bdf0 <xVTORConst>:
 800bdf0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop

0800bdf8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800bdf8:	f3ef 8011 	mrs	r0, BASEPRI
 800bdfc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800be00:	f381 8811 	msr	BASEPRI, r1
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800be0e:	bf00      	nop
 800be10:	4618      	mov	r0, r3

0800be12 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800be12:	f380 8811 	msr	BASEPRI, r0
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800be20:	bf00      	nop
	...

0800be30 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800be30:	f3ef 8009 	mrs	r0, PSP
 800be34:	f3ef 820b 	mrs	r2, PSPLIM
 800be38:	4673      	mov	r3, lr
 800be3a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800be3e:	4a10      	ldr	r2, [pc, #64]	@ (800be80 <pxCurrentTCBConst>)
 800be40:	6811      	ldr	r1, [r2, #0]
 800be42:	6008      	str	r0, [r1, #0]
 800be44:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800be48:	f380 8811 	msr	BASEPRI, r0
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f7fe fe7a 	bl	800ab4c <vTaskSwitchContext>
 800be58:	f04f 0000 	mov.w	r0, #0
 800be5c:	f380 8811 	msr	BASEPRI, r0
 800be60:	4a07      	ldr	r2, [pc, #28]	@ (800be80 <pxCurrentTCBConst>)
 800be62:	6811      	ldr	r1, [r2, #0]
 800be64:	6808      	ldr	r0, [r1, #0]
 800be66:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800be6a:	f382 880b 	msr	PSPLIM, r2
 800be6e:	f380 8809 	msr	PSP, r0
 800be72:	4718      	bx	r3
 800be74:	f3af 8000 	nop.w
 800be78:	f3af 8000 	nop.w
 800be7c:	f3af 8000 	nop.w

0800be80 <pxCurrentTCBConst>:
 800be80:	20000b9c 	.word	0x20000b9c
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
	...

0800be90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800be90:	f01e 0f04 	tst.w	lr, #4
 800be94:	bf0c      	ite	eq
 800be96:	f3ef 8008 	mrseq	r0, MSP
 800be9a:	f3ef 8009 	mrsne	r0, PSP
 800be9e:	4904      	ldr	r1, [pc, #16]	@ (800beb0 <svchandler_address_const>)
 800bea0:	4708      	bx	r1
 800bea2:	bf00      	nop
 800bea4:	f3af 8000 	nop.w
 800bea8:	f3af 8000 	nop.w
 800beac:	f3af 8000 	nop.w

0800beb0 <svchandler_address_const>:
 800beb0:	0800bc01 	.word	0x0800bc01
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop

0800beb8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800bec4:	f7fe fc1a 	bl	800a6fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800bec8:	4b4c      	ldr	r3, [pc, #304]	@ (800bffc <pvPortMalloc+0x144>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800bed0:	f000 f8ec 	bl	800c0ac <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d012      	beq.n	800bf00 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800beda:	2208      	movs	r2, #8
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f003 0307 	and.w	r3, r3, #7
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	3308      	adds	r3, #8
 800bee6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	43db      	mvns	r3, r3
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d804      	bhi.n	800befc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	4413      	add	r3, r2
 800bef8:	607b      	str	r3, [r7, #4]
 800befa:	e001      	b.n	800bf00 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	db69      	blt.n	800bfda <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d066      	beq.n	800bfda <pvPortMalloc+0x122>
 800bf0c:	4b3c      	ldr	r3, [pc, #240]	@ (800c000 <pvPortMalloc+0x148>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d861      	bhi.n	800bfda <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800bf16:	4b3b      	ldr	r3, [pc, #236]	@ (800c004 <pvPortMalloc+0x14c>)
 800bf18:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800bf1a:	4b3a      	ldr	r3, [pc, #232]	@ (800c004 <pvPortMalloc+0x14c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf20:	e004      	b.n	800bf2c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d903      	bls.n	800bf3e <pvPortMalloc+0x86>
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1f1      	bne.n	800bf22 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800bf3e:	4b2f      	ldr	r3, [pc, #188]	@ (800bffc <pvPortMalloc+0x144>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	69fa      	ldr	r2, [r7, #28]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d048      	beq.n	800bfda <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2208      	movs	r2, #8
 800bf4e:	4413      	add	r3, r2
 800bf50:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	1ad2      	subs	r2, r2, r3
 800bf62:	2308      	movs	r3, #8
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d918      	bls.n	800bf9c <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf6a:	69fa      	ldr	r2, [r7, #28]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4413      	add	r3, r2
 800bf70:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f003 0307 	and.w	r3, r3, #7
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <pvPortMalloc+0xcc>
 800bf7c:	f7ff ff3c 	bl	800bdf8 <ulSetInterruptMask>
 800bf80:	bf00      	nop
 800bf82:	e7fd      	b.n	800bf80 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	1ad2      	subs	r2, r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f000 f8e4 	bl	800c164 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf9c:	4b18      	ldr	r3, [pc, #96]	@ (800c000 <pvPortMalloc+0x148>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	4a16      	ldr	r2, [pc, #88]	@ (800c000 <pvPortMalloc+0x148>)
 800bfa8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfaa:	4b15      	ldr	r3, [pc, #84]	@ (800c000 <pvPortMalloc+0x148>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	4b16      	ldr	r3, [pc, #88]	@ (800c008 <pvPortMalloc+0x150>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d203      	bcs.n	800bfbe <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bfb6:	4b12      	ldr	r3, [pc, #72]	@ (800c000 <pvPortMalloc+0x148>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a13      	ldr	r2, [pc, #76]	@ (800c008 <pvPortMalloc+0x150>)
 800bfbc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800bfd0:	4b0e      	ldr	r3, [pc, #56]	@ (800c00c <pvPortMalloc+0x154>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	4a0d      	ldr	r2, [pc, #52]	@ (800c00c <pvPortMalloc+0x154>)
 800bfd8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800bfda:	f7fe fb9d 	bl	800a718 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f003 0307 	and.w	r3, r3, #7
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d003      	beq.n	800bff0 <pvPortMalloc+0x138>
 800bfe8:	f7ff ff06 	bl	800bdf8 <ulSetInterruptMask>
 800bfec:	bf00      	nop
 800bfee:	e7fd      	b.n	800bfec <pvPortMalloc+0x134>
    return pvReturn;
 800bff0:	697b      	ldr	r3, [r7, #20]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3720      	adds	r7, #32
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	2000d520 	.word	0x2000d520
 800c000:	2000d524 	.word	0x2000d524
 800c004:	2000d518 	.word	0x2000d518
 800c008:	2000d528 	.word	0x2000d528
 800c00c:	2000d52c 	.word	0x2000d52c

0800c010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d03b      	beq.n	800c09a <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800c022:	2308      	movs	r3, #8
 800c024:	425b      	negs	r3, r3
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	4413      	add	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	db03      	blt.n	800c040 <vPortFree+0x30>
 800c038:	f7ff fede 	bl	800bdf8 <ulSetInterruptMask>
 800c03c:	bf00      	nop
 800c03e:	e7fd      	b.n	800c03c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <vPortFree+0x40>
 800c048:	f7ff fed6 	bl	800bdf8 <ulSetInterruptMask>
 800c04c:	bf00      	nop
 800c04e:	e7fd      	b.n	800c04c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	0fdb      	lsrs	r3, r3, #31
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d01c      	beq.n	800c09a <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d118      	bne.n	800c09a <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800c074:	f7fe fb42 	bl	800a6fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	4b09      	ldr	r3, [pc, #36]	@ (800c0a4 <vPortFree+0x94>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4413      	add	r3, r2
 800c082:	4a08      	ldr	r2, [pc, #32]	@ (800c0a4 <vPortFree+0x94>)
 800c084:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c086:	68b8      	ldr	r0, [r7, #8]
 800c088:	f000 f86c 	bl	800c164 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800c08c:	4b06      	ldr	r3, [pc, #24]	@ (800c0a8 <vPortFree+0x98>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3301      	adds	r3, #1
 800c092:	4a05      	ldr	r2, [pc, #20]	@ (800c0a8 <vPortFree+0x98>)
 800c094:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800c096:	f7fe fb3f 	bl	800a718 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	2000d524 	.word	0x2000d524
 800c0a8:	2000d530 	.word	0x2000d530

0800c0ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0b2:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800c0b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800c0b8:	4b25      	ldr	r3, [pc, #148]	@ (800c150 <prvHeapInit+0xa4>)
 800c0ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f003 0307 	and.w	r3, r3, #7
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00c      	beq.n	800c0e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3307      	adds	r3, #7
 800c0ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f023 0307 	bic.w	r3, r3, #7
 800c0d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	4a1d      	ldr	r2, [pc, #116]	@ (800c150 <prvHeapInit+0xa4>)
 800c0dc:	4413      	add	r3, r2
 800c0de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0e4:	4a1b      	ldr	r2, [pc, #108]	@ (800c154 <prvHeapInit+0xa8>)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800c0ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c154 <prvHeapInit+0xa8>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	1a9b      	subs	r3, r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f023 0307 	bic.w	r3, r3, #7
 800c106:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4a13      	ldr	r2, [pc, #76]	@ (800c158 <prvHeapInit+0xac>)
 800c10c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800c10e:	4b12      	ldr	r3, [pc, #72]	@ (800c158 <prvHeapInit+0xac>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2200      	movs	r2, #0
 800c114:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800c116:	4b10      	ldr	r3, [pc, #64]	@ (800c158 <prvHeapInit+0xac>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2200      	movs	r2, #0
 800c11c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	1ad2      	subs	r2, r2, r3
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c12c:	4b0a      	ldr	r3, [pc, #40]	@ (800c158 <prvHeapInit+0xac>)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	4a08      	ldr	r2, [pc, #32]	@ (800c15c <prvHeapInit+0xb0>)
 800c13a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	4a07      	ldr	r2, [pc, #28]	@ (800c160 <prvHeapInit+0xb4>)
 800c142:	6013      	str	r3, [r2, #0]
}
 800c144:	bf00      	nop
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	200011c8 	.word	0x200011c8
 800c154:	2000d518 	.word	0x2000d518
 800c158:	2000d520 	.word	0x2000d520
 800c15c:	2000d528 	.word	0x2000d528
 800c160:	2000d524 	.word	0x2000d524

0800c164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c16c:	4b28      	ldr	r3, [pc, #160]	@ (800c210 <prvInsertBlockIntoFreeList+0xac>)
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	e002      	b.n	800c178 <prvInsertBlockIntoFreeList+0x14>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d8f7      	bhi.n	800c172 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	4413      	add	r3, r2
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	429a      	cmp	r2, r3
 800c192:	d108      	bne.n	800c1a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	685a      	ldr	r2, [r3, #4]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	441a      	add	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	441a      	add	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d118      	bne.n	800c1ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	4b15      	ldr	r3, [pc, #84]	@ (800c214 <prvInsertBlockIntoFreeList+0xb0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d00d      	beq.n	800c1e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	441a      	add	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e008      	b.n	800c1f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c214 <prvInsertBlockIntoFreeList+0xb0>)
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	601a      	str	r2, [r3, #0]
 800c1ea:	e003      	b.n	800c1f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d002      	beq.n	800c202 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c202:	bf00      	nop
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	2000d518 	.word	0x2000d518
 800c214:	2000d520 	.word	0x2000d520

0800c218 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800c218:	b480      	push	{r7}
 800c21a:	af00      	add	r7, sp, #0
}
 800c21c:	bf00      	nop
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800c22a:	f00b f823 	bl	8017274 <touchgfx_components_init>
    touchgfx_init();
 800c22e:	f00a fff7 	bl	8017220 <touchgfx_init>
}
 800c232:	bf00      	nop
 800c234:	bd80      	pop	{r7, pc}

0800c236 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b082      	sub	sp, #8
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800c23e:	f00b f821 	bl	8017284 <touchgfx_taskEntry>
}
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
    {
 800c254:	4a04      	ldr	r2, [pc, #16]	@ (800c268 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]
    }
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4618      	mov	r0, r3
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	080320c4 	.word	0x080320c4

0800c26c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
    }
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff ffe9 	bl	800c24c <_ZN8touchgfx12FontProviderD1Ev>
 800c27a:	2104      	movs	r1, #4
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f023 fb5e 	bl	802f93e <_ZdlPvj>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800c298:	887b      	ldrh	r3, [r7, #2]
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d010      	beq.n	800c2c0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	dc13      	bgt.n	800c2ca <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d005      	beq.n	800c2b6 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800c2aa:	e00e      	b.n	800c2ca <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800c2ac:	f009 fd10 	bl	8015cd0 <_ZN17TypedTextDatabase8getFontsEv>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	e00a      	b.n	800c2cc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800c2b6:	f009 fd0b 	bl	8015cd0 <_ZN17TypedTextDatabase8getFontsEv>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	e005      	b.n	800c2cc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800c2c0:	f009 fd06 	bl	8015cd0 <_ZN17TypedTextDatabase8getFontsEv>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	e000      	b.n	800c2cc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800c2ca:	2300      	movs	r3, #0
    }
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	4a05      	ldr	r2, [pc, #20]	@ (800c2f4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff ffb1 	bl	800c24c <_ZN8touchgfx12FontProviderD1Ev>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	080320b0 	.word	0x080320b0

0800c2f8 <_ZN23ApplicationFontProviderD0Ev>:
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7ff ffe7 	bl	800c2d4 <_ZN23ApplicationFontProviderD1Ev>
 800c306:	2104      	movs	r1, #4
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f023 fb18 	bl	802f93e <_ZdlPvj>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
    {
 800c320:	4a04      	ldr	r2, [pc, #16]	@ (800c334 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	601a      	str	r2, [r3, #0]
    }
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4618      	mov	r0, r3
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	080327b4 	.word	0x080327b4

0800c338 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
    }
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff ffe9 	bl	800c318 <_ZN8touchgfx4FontD1Ev>
 800c346:	2114      	movs	r1, #20
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f023 faf8 	bl	802f93e <_ZdlPvj>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800c358:	b590      	push	{r4, r7, lr}
 800c35a:	b087      	sub	sp, #28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800c364:	887b      	ldrh	r3, [r7, #2]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d101      	bne.n	800c36e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	e010      	b.n	800c390 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	681c      	ldr	r4, [r3, #0]
 800c37e:	f107 030f 	add.w	r3, r7, #15
 800c382:	f107 0210 	add.w	r2, r7, #16
 800c386:	8879      	ldrh	r1, [r7, #2]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	47a0      	blx	r4
 800c38c:	6178      	str	r0, [r7, #20]
        return glyph;
 800c38e:	697b      	ldr	r3, [r7, #20]
    }
 800c390:	4618      	mov	r0, r3
 800c392:	371c      	adds	r7, #28
 800c394:	46bd      	mov	sp, r7
 800c396:	bd90      	pop	{r4, r7, pc}

0800c398 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	89db      	ldrh	r3, [r3, #14]
    }
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	8a1b      	ldrh	r3, [r3, #16]
    }
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	88db      	ldrh	r3, [r3, #6]
    }
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	889b      	ldrh	r3, [r3, #4]
    }
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	7a9b      	ldrb	r3, [r3, #10]
 800c404:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800c408:	b2db      	uxtb	r3, r3
    }
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800c416:	b480      	push	{r7}
 800c418:	b083      	sub	sp, #12
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	7a9b      	ldrb	r3, [r3, #10]
 800c422:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c426:	b2db      	uxtb	r3, r3
    }
 800c428:	4618      	mov	r0, r3
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
    {
        return false;
 800c43c:	2300      	movs	r3, #0
    }
 800c43e:	4618      	mov	r0, r3
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800c44a:	b480      	push	{r7}
 800c44c:	b083      	sub	sp, #12
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800c452:	f04f 0300 	mov.w	r3, #0
 800c456:	ee07 3a90 	vmov	s15, r3
    }
 800c45a:	eeb0 0a67 	vmov.f32	s0, s15
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	4a05      	ldr	r2, [pc, #20]	@ (800c488 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff ff4d 	bl	800c318 <_ZN8touchgfx4FontD1Ev>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	08033824 	.word	0x08033824

0800c48c <_ZN8touchgfx9ConstFontD0Ev>:
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7ff ffe7 	bl	800c468 <_ZN8touchgfx9ConstFontD1Ev>
 800c49a:	211c      	movs	r1, #28
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f023 fa4e 	bl	802f93e <_ZdlPvj>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	4a05      	ldr	r2, [pc, #20]	@ (800c4cc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7ff ffd3 	bl	800c468 <_ZN8touchgfx9ConstFontD1Ev>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	080320e8 	.word	0x080320e8

0800c4d0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7ff ffe7 	bl	800c4ac <_ZN8touchgfx13GeneratedFontD1Ev>
 800c4de:	212c      	movs	r1, #44	@ 0x2c
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f023 fa2c 	bl	802f93e <_ZdlPvj>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
    {
 800c4f8:	4a04      	ldr	r2, [pc, #16]	@ (800c50c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	601a      	str	r2, [r3, #0]
    }
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4618      	mov	r0, r3
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	080320d8 	.word	0x080320d8

0800c510 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
    }
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff ffe9 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
 800c51e:	2108      	movs	r1, #8
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f023 fa0c 	bl	802f93e <_ZdlPvj>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4618      	mov	r0, r3
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800c53c:	4618      	mov	r0, r3
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800c554:	4618      	mov	r0, r3
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c560:	b580      	push	{r7, lr}
 800c562:	b08e      	sub	sp, #56	@ 0x38
 800c564:	af0a      	add	r7, sp, #40	@ 0x28
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	4611      	mov	r1, r2
 800c56c:	461a      	mov	r2, r3
 800c56e:	460b      	mov	r3, r1
 800c570:	80fb      	strh	r3, [r7, #6]
 800c572:	4613      	mov	r3, r2
 800c574:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	88b9      	ldrh	r1, [r7, #4]
 800c57a:	88fa      	ldrh	r2, [r7, #6]
 800c57c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c580:	9308      	str	r3, [sp, #32]
 800c582:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c584:	9307      	str	r3, [sp, #28]
 800c586:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800c58a:	9306      	str	r3, [sp, #24]
 800c58c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c590:	9305      	str	r3, [sp, #20]
 800c592:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c596:	9304      	str	r3, [sp, #16]
 800c598:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c59c:	9303      	str	r3, [sp, #12]
 800c59e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5a2:	9302      	str	r3, [sp, #8]
 800c5a4:	7f3b      	ldrb	r3, [r7, #28]
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	8b3b      	ldrh	r3, [r7, #24]
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	f012 fbf8 	bl	801eda4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800c5b4:	4a09      	ldr	r2, [pc, #36]	@ (800c5dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5be:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5c4:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5ca:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5d0:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	080320e8 	.word	0x080320e8

0800c5e0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	69db      	ldr	r3, [r3, #28]
 800c5ee:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	889b      	ldrh	r3, [r3, #4]
 800c5f4:	0adb      	lsrs	r3, r3, #11
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4413      	add	r3, r2
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800c612:	b480      	push	{r7}
 800c614:	b089      	sub	sp, #36	@ 0x24
 800c616:	af00      	add	r7, sp, #0
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	460b      	mov	r3, r1
 800c61c:	607a      	str	r2, [r7, #4]
 800c61e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	7b1b      	ldrb	r3, [r3, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	e031      	b.n	800c696 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6a1a      	ldr	r2, [r3, #32]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	7b5b      	ldrb	r3, [r3, #13]
 800c63e:	021b      	lsls	r3, r3, #8
 800c640:	b21b      	sxth	r3, r3
 800c642:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c646:	b219      	sxth	r1, r3
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	7adb      	ldrb	r3, [r3, #11]
 800c64c:	b21b      	sxth	r3, r3
 800c64e:	430b      	orrs	r3, r1
 800c650:	b21b      	sxth	r3, r3
 800c652:	b29b      	uxth	r3, r3
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	7b1b      	ldrb	r3, [r3, #12]
 800c65e:	837b      	strh	r3, [r7, #26]
 800c660:	e013      	b.n	800c68a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	897a      	ldrh	r2, [r7, #10]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d103      	bne.n	800c674 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c672:	e010      	b.n	800c696 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	897a      	ldrh	r2, [r7, #10]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d309      	bcc.n	800c692 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c67e:	8b7b      	ldrh	r3, [r7, #26]
 800c680:	3b01      	subs	r3, #1
 800c682:	837b      	strh	r3, [r7, #26]
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	3304      	adds	r3, #4
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	8b7b      	ldrh	r3, [r7, #26]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1e8      	bne.n	800c662 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800c690:	e000      	b.n	800c694 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800c692:	bf00      	nop
        }
    }
    return 0;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3724      	adds	r7, #36	@ 0x24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 96, 12, 10, 0, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	4801      	ldr	r0, [pc, #4]	@ (800c6b0 <__tcf_0+0xc>)
 800c6aa:	f7ff feff 	bl	800c4ac <_ZN8touchgfx13GeneratedFontD1Ev>
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	2000d534 	.word	0x2000d534

0800c6b4 <_Z23getFont_verdana_10_4bppv>:
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08e      	sub	sp, #56	@ 0x38
 800c6b8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 96, 12, 10, 0, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c6ba:	4b20      	ldr	r3, [pc, #128]	@ (800c73c <_Z23getFont_verdana_10_4bppv+0x88>)
 800c6bc:	e8d3 3faf 	lda	r3, [r3]
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bf0c      	ite	eq
 800c6c8:	2301      	moveq	r3, #1
 800c6ca:	2300      	movne	r3, #0
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d030      	beq.n	800c734 <_Z23getFont_verdana_10_4bppv+0x80>
 800c6d2:	481a      	ldr	r0, [pc, #104]	@ (800c73c <_Z23getFont_verdana_10_4bppv+0x88>)
 800c6d4:	f023 f935 	bl	802f942 <__cxa_guard_acquire>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bf14      	ite	ne
 800c6de:	2301      	movne	r3, #1
 800c6e0:	2300      	moveq	r3, #0
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d025      	beq.n	800c734 <_Z23getFont_verdana_10_4bppv+0x80>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6f4:	233f      	movs	r3, #63	@ 0x3f
 800c6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f8:	4b11      	ldr	r3, [pc, #68]	@ (800c740 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800c6fa:	9308      	str	r3, [sp, #32]
 800c6fc:	4b11      	ldr	r3, [pc, #68]	@ (800c744 <_Z23getFont_verdana_10_4bppv+0x90>)
 800c6fe:	9307      	str	r3, [sp, #28]
 800c700:	2301      	movs	r3, #1
 800c702:	9306      	str	r3, [sp, #24]
 800c704:	2301      	movs	r3, #1
 800c706:	9305      	str	r3, [sp, #20]
 800c708:	2301      	movs	r3, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	2304      	movs	r3, #4
 800c70e:	9303      	str	r3, [sp, #12]
 800c710:	2300      	movs	r3, #0
 800c712:	9302      	str	r3, [sp, #8]
 800c714:	2300      	movs	r3, #0
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	230a      	movs	r3, #10
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	230c      	movs	r3, #12
 800c71e:	2260      	movs	r2, #96	@ 0x60
 800c720:	4909      	ldr	r1, [pc, #36]	@ (800c748 <_Z23getFont_verdana_10_4bppv+0x94>)
 800c722:	480a      	ldr	r0, [pc, #40]	@ (800c74c <_Z23getFont_verdana_10_4bppv+0x98>)
 800c724:	f7ff ff1c 	bl	800c560 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c728:	4809      	ldr	r0, [pc, #36]	@ (800c750 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800c72a:	f023 f953 	bl	802f9d4 <atexit>
 800c72e:	4803      	ldr	r0, [pc, #12]	@ (800c73c <_Z23getFont_verdana_10_4bppv+0x88>)
 800c730:	f023 f913 	bl	802f95a <__cxa_guard_release>
    return verdana_10_4bpp;
 800c734:	4b05      	ldr	r3, [pc, #20]	@ (800c74c <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800c736:	4618      	mov	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	2000d560 	.word	0x2000d560
 800c740:	0803da14 	.word	0x0803da14
 800c744:	0803ded0 	.word	0x0803ded0
 800c748:	0803ca6c 	.word	0x0803ca6c
 800c74c:	2000d534 	.word	0x2000d534
 800c750:	0800c6a5 	.word	0x0800c6a5

0800c754 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c754:	b580      	push	{r7, lr}
 800c756:	af00      	add	r7, sp, #0
 800c758:	4801      	ldr	r0, [pc, #4]	@ (800c760 <__tcf_0+0xc>)
 800c75a:	f7ff fea7 	bl	800c4ac <_ZN8touchgfx13GeneratedFontD1Ev>
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	2000d564 	.word	0x2000d564

0800c764 <_Z23getFont_verdana_20_4bppv>:
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08e      	sub	sp, #56	@ 0x38
 800c768:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c76a:	4b20      	ldr	r3, [pc, #128]	@ (800c7ec <_Z23getFont_verdana_20_4bppv+0x88>)
 800c76c:	e8d3 3faf 	lda	r3, [r3]
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	bf0c      	ite	eq
 800c778:	2301      	moveq	r3, #1
 800c77a:	2300      	movne	r3, #0
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d030      	beq.n	800c7e4 <_Z23getFont_verdana_20_4bppv+0x80>
 800c782:	481a      	ldr	r0, [pc, #104]	@ (800c7ec <_Z23getFont_verdana_20_4bppv+0x88>)
 800c784:	f023 f8dd 	bl	802f942 <__cxa_guard_acquire>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	bf14      	ite	ne
 800c78e:	2301      	movne	r3, #1
 800c790:	2300      	moveq	r3, #0
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b00      	cmp	r3, #0
 800c796:	d025      	beq.n	800c7e4 <_Z23getFont_verdana_20_4bppv+0x80>
 800c798:	2300      	movs	r3, #0
 800c79a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c79c:	2300      	movs	r3, #0
 800c79e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a4:	233f      	movs	r3, #63	@ 0x3f
 800c7a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a8:	4b11      	ldr	r3, [pc, #68]	@ (800c7f0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800c7aa:	9308      	str	r3, [sp, #32]
 800c7ac:	4b11      	ldr	r3, [pc, #68]	@ (800c7f4 <_Z23getFont_verdana_20_4bppv+0x90>)
 800c7ae:	9307      	str	r3, [sp, #28]
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	9306      	str	r3, [sp, #24]
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	9305      	str	r3, [sp, #20]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	2304      	movs	r3, #4
 800c7be:	9303      	str	r3, [sp, #12]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9302      	str	r3, [sp, #8]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9301      	str	r3, [sp, #4]
 800c7c8:	2314      	movs	r3, #20
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	2318      	movs	r3, #24
 800c7ce:	225f      	movs	r2, #95	@ 0x5f
 800c7d0:	4909      	ldr	r1, [pc, #36]	@ (800c7f8 <_Z23getFont_verdana_20_4bppv+0x94>)
 800c7d2:	480a      	ldr	r0, [pc, #40]	@ (800c7fc <_Z23getFont_verdana_20_4bppv+0x98>)
 800c7d4:	f7ff fec4 	bl	800c560 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c7d8:	4809      	ldr	r0, [pc, #36]	@ (800c800 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800c7da:	f023 f8fb 	bl	802f9d4 <atexit>
 800c7de:	4803      	ldr	r0, [pc, #12]	@ (800c7ec <_Z23getFont_verdana_20_4bppv+0x88>)
 800c7e0:	f023 f8bb 	bl	802f95a <__cxa_guard_release>
    return verdana_20_4bpp;
 800c7e4:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	2000d590 	.word	0x2000d590
 800c7f0:	0803da48 	.word	0x0803da48
 800c7f4:	0803ded4 	.word	0x0803ded4
 800c7f8:	0803cfac 	.word	0x0803cfac
 800c7fc:	2000d564 	.word	0x2000d564
 800c800:	0800c755 	.word	0x0800c755

0800c804 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c804:	b580      	push	{r7, lr}
 800c806:	af00      	add	r7, sp, #0
 800c808:	4801      	ldr	r0, [pc, #4]	@ (800c810 <__tcf_0+0xc>)
 800c80a:	f7ff fe4f 	bl	800c4ac <_ZN8touchgfx13GeneratedFontD1Ev>
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	2000d594 	.word	0x2000d594

0800c814 <_Z23getFont_verdana_40_4bppv>:
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08e      	sub	sp, #56	@ 0x38
 800c818:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c81a:	4b20      	ldr	r3, [pc, #128]	@ (800c89c <_Z23getFont_verdana_40_4bppv+0x88>)
 800c81c:	e8d3 3faf 	lda	r3, [r3]
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	bf0c      	ite	eq
 800c828:	2301      	moveq	r3, #1
 800c82a:	2300      	movne	r3, #0
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d030      	beq.n	800c894 <_Z23getFont_verdana_40_4bppv+0x80>
 800c832:	481a      	ldr	r0, [pc, #104]	@ (800c89c <_Z23getFont_verdana_40_4bppv+0x88>)
 800c834:	f023 f885 	bl	802f942 <__cxa_guard_acquire>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bf14      	ite	ne
 800c83e:	2301      	movne	r3, #1
 800c840:	2300      	moveq	r3, #0
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d025      	beq.n	800c894 <_Z23getFont_verdana_40_4bppv+0x80>
 800c848:	2300      	movs	r3, #0
 800c84a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c84c:	2300      	movs	r3, #0
 800c84e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c850:	2300      	movs	r3, #0
 800c852:	930a      	str	r3, [sp, #40]	@ 0x28
 800c854:	233f      	movs	r3, #63	@ 0x3f
 800c856:	9309      	str	r3, [sp, #36]	@ 0x24
 800c858:	4b11      	ldr	r3, [pc, #68]	@ (800c8a0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c85a:	9308      	str	r3, [sp, #32]
 800c85c:	4b11      	ldr	r3, [pc, #68]	@ (800c8a4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800c85e:	9307      	str	r3, [sp, #28]
 800c860:	2302      	movs	r3, #2
 800c862:	9306      	str	r3, [sp, #24]
 800c864:	2302      	movs	r3, #2
 800c866:	9305      	str	r3, [sp, #20]
 800c868:	2301      	movs	r3, #1
 800c86a:	9304      	str	r3, [sp, #16]
 800c86c:	2304      	movs	r3, #4
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	2300      	movs	r3, #0
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	2300      	movs	r3, #0
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	2328      	movs	r3, #40	@ 0x28
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	2330      	movs	r3, #48	@ 0x30
 800c87e:	225f      	movs	r2, #95	@ 0x5f
 800c880:	4909      	ldr	r1, [pc, #36]	@ (800c8a8 <_Z23getFont_verdana_40_4bppv+0x94>)
 800c882:	480a      	ldr	r0, [pc, #40]	@ (800c8ac <_Z23getFont_verdana_40_4bppv+0x98>)
 800c884:	f7ff fe6c 	bl	800c560 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c888:	4809      	ldr	r0, [pc, #36]	@ (800c8b0 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800c88a:	f023 f8a3 	bl	802f9d4 <atexit>
 800c88e:	4803      	ldr	r0, [pc, #12]	@ (800c89c <_Z23getFont_verdana_40_4bppv+0x88>)
 800c890:	f023 f863 	bl	802f95a <__cxa_guard_release>
    return verdana_40_4bpp;
 800c894:	4b05      	ldr	r3, [pc, #20]	@ (800c8ac <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800c896:	4618      	mov	r0, r3
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	2000d5c0 	.word	0x2000d5c0
 800c8a0:	0803dbec 	.word	0x0803dbec
 800c8a4:	0803ded8 	.word	0x0803ded8
 800c8a8:	0803d4e0 	.word	0x0803d4e0
 800c8ac:	2000d594 	.word	0x2000d594
 800c8b0:	0800c805 	.word	0x0800c805

0800c8b4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c8d6:	bf00      	nop
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c902:	bf00      	nop
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	460b      	mov	r3, r1
 800c918:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800c91a:	bf00      	nop
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
    {
    }
 800c92e:	bf00      	nop
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
    {
    }
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
	...

0800c950 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
    {
 800c958:	4a04      	ldr	r2, [pc, #16]	@ (800c96c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	601a      	str	r2, [r3, #0]
    }
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4618      	mov	r0, r3
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	08032270 	.word	0x08032270

0800c970 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
    }
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7ff ffe9 	bl	800c950 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c97e:	2104      	movs	r1, #4
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f022 ffdc 	bl	802f93e <_ZdlPvj>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4618      	mov	r0, r3
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
    {
    }
 800c998:	bf00      	nop
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800c9ce:	6810      	ldr	r0, [r2, #0]
 800c9d0:	6851      	ldr	r1, [r2, #4]
 800c9d2:	c303      	stmia	r3!, {r0, r1}
    }
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f011 f8da 	bl	801dba6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800c9f2:	bf00      	nop
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
	...

0800c9fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
    {
 800ca04:	4a04      	ldr	r2, [pc, #16]	@ (800ca18 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	601a      	str	r2, [r3, #0]
    }
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	08032258 	.word	0x08032258

0800ca1c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
    }
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff ffe9 	bl	800c9fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ca2a:	2104      	movs	r1, #4
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f022 ff86 	bl	802f93e <_ZdlPvj>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ca3c:	b480      	push	{r7}
 800ca3e:	af00      	add	r7, sp, #0
    {
        return instance;
 800ca40:	4b03      	ldr	r3, [pc, #12]	@ (800ca50 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ca42:	681b      	ldr	r3, [r3, #0]
    }
 800ca44:	4618      	mov	r0, r3
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	20011ffc 	.word	0x20011ffc

0800ca54 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ca54:	b480      	push	{r7}
 800ca56:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ca58:	4b0b      	ldr	r3, [pc, #44]	@ (800ca88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d008      	beq.n	800ca76 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ca64:	4b08      	ldr	r3, [pc, #32]	@ (800ca88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ca6e:	4b06      	ldr	r3, [pc, #24]	@ (800ca88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca74:	e002      	b.n	800ca7c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800ca76:	4b04      	ldr	r3, [pc, #16]	@ (800ca88 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	689b      	ldr	r3, [r3, #8]
    }
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	20011ffc 	.word	0x20011ffc

0800ca8c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800ca94:	4a07      	ldr	r2, [pc, #28]	@ (800cab4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	605a      	str	r2, [r3, #4]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	721a      	strb	r2, [r3, #8]
    {
    }
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4618      	mov	r0, r3
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	08032234 	.word	0x08032234

0800cab8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
    {
 800cac0:	4a04      	ldr	r2, [pc, #16]	@ (800cad4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	601a      	str	r2, [r3, #0]
    }
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4618      	mov	r0, r3
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr
 800cad4:	08032234 	.word	0x08032234

0800cad8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
    }
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff ffe9 	bl	800cab8 <_ZN8touchgfx10TransitionD1Ev>
 800cae6:	210c      	movs	r1, #12
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f022 ff28 	bl	802f93e <_ZdlPvj>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4618      	mov	r0, r3
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
    {
    }
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
    {
    }
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
    {
    }
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800cb3c:	f011 f80e 	bl	801db5c <_ZN8touchgfx11Application11getInstanceEv>
 800cb40:	4603      	mov	r3, r0
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	323c      	adds	r2, #60	@ 0x3c
 800cb46:	6812      	ldr	r2, [r2, #0]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	4790      	blx	r2
    }
 800cb4c:	bf00      	nop
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	683a      	ldr	r2, [r7, #0]
 800cb62:	605a      	str	r2, [r3, #4]
    }
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	4a05      	ldr	r2, [pc, #20]	@ (800cb90 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	601a      	str	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7ff fee5 	bl	800c950 <_ZN8touchgfx15UIEventListenerD1Ev>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	08033768 	.word	0x08033768

0800cb94 <_ZN8touchgfx11ApplicationD0Ev>:
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7ff ffe7 	bl	800cb70 <_ZN8touchgfx11ApplicationD1Ev>
 800cba2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f022 fec9 	bl	802f93e <_ZdlPvj>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f011 f88c 	bl	801dce0 <_ZN8touchgfx11ApplicationC1Ev>
 800cbc8:	4a09      	ldr	r2, [pc, #36]	@ (800cbf0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a04      	ldr	r2, [pc, #16]	@ (800cbf4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800cbe2:	6013      	str	r3, [r2, #0]
    }
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	080321e0 	.word	0x080321e0
 800cbf4:	20012050 	.word	0x20012050

0800cbf8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f804 	bl	800cc0e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800cc06:	bf00      	nop
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b082      	sub	sp, #8
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00f      	beq.n	800cc40 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	330c      	adds	r3, #12
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4610      	mov	r0, r2
 800cc34:	4798      	blx	r3
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e000      	b.n	800cc42 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800cc40:	2300      	movs	r3, #0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00e      	beq.n	800cc64 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3308      	adds	r3, #8
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	601a      	str	r2, [r3, #0]
    }
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	4a05      	ldr	r2, [pc, #20]	@ (800cca8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7ff ff69 	bl	800cb70 <_ZN8touchgfx11ApplicationD1Ev>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	080321e0 	.word	0x080321e0

0800ccac <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff ffe7 	bl	800cc88 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ccba:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f022 fe3d 	bl	802f93e <_ZdlPvj>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	4a08      	ldr	r2, [pc, #32]	@ (800ccfc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 fad3 	bl	800d290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff ffcb 	bl	800cc88 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	08032174 	.word	0x08032174

0800cd00 <_ZN23FrontendApplicationBaseD0Ev>:
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ffe1 	bl	800ccd0 <_ZN23FrontendApplicationBaseD1Ev>
 800cd0e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f022 fe13 	bl	802f93e <_ZdlPvj>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b082      	sub	sp, #8
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f888 	bl	800ce40 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800cd30:	bf00      	nop
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	721a      	strb	r2, [r3, #8]
    }
 800cd46:	bf00      	nop
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <_ZN13ModelListener4bindEP5Model>:
    
    virtual ~ModelListener() {}
    virtual void updateTemp(unsigned int val){}
    virtual void updateVolt(unsigned int val){}

    void bind(Model* m)
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	605a      	str	r2, [r3, #4]
    }
 800cd62:	bf00      	nop
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
	...

0800cd70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff ff1a 	bl	800cbb8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800cd84:	4a19      	ldr	r2, [pc, #100]	@ (800cdec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800cd90:	4618      	mov	r0, r3
 800cd92:	f000 f8ab 	bl	800ceec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800cda6:	f7ff fe49 	bl	800ca3c <_ZN8touchgfx3HAL11getInstanceEv>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	3208      	adds	r2, #8
 800cdb0:	6812      	ldr	r2, [r2, #0]
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800cdb8:	2000      	movs	r0, #0
 800cdba:	f008 ff11 	bl	8015be0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800cdbe:	f7ff fe49 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f01a ff34 	bl	8027c32 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800cdca:	f7ff fe43 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f01a ffa5 	bl	8027d20 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800cdd6:	f7ff fe3d 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 800cdda:	4603      	mov	r3, r0
 800cddc:	4618      	mov	r0, r3
 800cdde:	f01a ffab 	bl	8027d38 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	08032174 	.word	0x08032174

0800cdf0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	4611      	mov	r1, r2
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff ffe9 	bl	800cdf0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	605a      	str	r2, [r3, #4]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	3208      	adds	r2, #8
 800ce2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce32:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800ce40:	b590      	push	{r4, r7, lr}
 800ce42:	b089      	sub	sp, #36	@ 0x24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800ce4e:	4b10      	ldr	r3, [pc, #64]	@ (800ce90 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800ce50:	61bb      	str	r3, [r7, #24]
 800ce52:	2300      	movs	r3, #0
 800ce54:	61fb      	str	r3, [r7, #28]
 800ce56:	f107 0008 	add.w	r0, r7, #8
 800ce5a:	f107 0318 	add.w	r3, r7, #24
 800ce5e:	cb0c      	ldmia	r3, {r2, r3}
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	f000 f85f 	bl	800cf24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce66:	f107 0308 	add.w	r3, r7, #8
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f7ff ffcb 	bl	800ce08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce72:	f107 0308 	add.w	r3, r7, #8
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fa0a 	bl	800d290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800ce88:	bf00      	nop
 800ce8a:	3724      	adds	r7, #36	@ 0x24
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd90      	pop	{r4, r7, pc}
 800ce90:	0800ce95 	.word	0x0800ce95

0800ce94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af02      	add	r7, sp, #8
 800ce9a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800cea8:	461a      	mov	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	4b04      	ldr	r3, [pc, #16]	@ (800cec4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800ceb4:	4804      	ldr	r0, [pc, #16]	@ (800cec8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800ceb6:	f000 f867 	bl	800cf88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ceba:	bf00      	nop
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20012044 	.word	0x20012044
 800cec8:	20012040 	.word	0x20012040

0800cecc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	4a04      	ldr	r2, [pc, #16]	@ (800cee8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr
 800cee8:	08032258 	.word	0x08032258

0800ceec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff ffe8 	bl	800cecc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cefc:	4a08      	ldr	r2, [pc, #32]	@ (800cf20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	605a      	str	r2, [r3, #4]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	609a      	str	r2, [r3, #8]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	60da      	str	r2, [r3, #12]
    {
    }
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	080321c8 	.word	0x080321c8

0800cf24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	4639      	mov	r1, r7
 800cf30:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7ff ffc8 	bl	800cecc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf3c:	4a08      	ldr	r2, [pc, #32]	@ (800cf60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	605a      	str	r2, [r3, #4]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	463a      	mov	r2, r7
 800cf4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf52:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	080321c8 	.word	0x080321c8

0800cf64 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fd8c 	bl	800ca8c <_ZN8touchgfx10TransitionC1Ev>
 800cf74:	4a03      	ldr	r2, [pc, #12]	@ (800cf84 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	601a      	str	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	08032150 	.word	0x08032150

0800cf88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cf88:	b590      	push	{r4, r7, lr}
 800cf8a:	b08f      	sub	sp, #60	@ 0x3c
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	689a      	ldr	r2, [r3, #8]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	3320      	adds	r3, #32
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	4798      	blx	r3
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f5b3 5fb7 	cmp.w	r3, #5856	@ 0x16e0
 800cfae:	d205      	bcs.n	800cfbc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800cfb0:	4b7d      	ldr	r3, [pc, #500]	@ (800d1a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800cfb2:	4a7e      	ldr	r2, [pc, #504]	@ (800d1ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cfb4:	21a3      	movs	r1, #163	@ 0xa3
 800cfb6:	487e      	ldr	r0, [pc, #504]	@ (800d1b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cfb8:	f022 fcee 	bl	802f998 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685a      	ldr	r2, [r3, #4]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	3320      	adds	r3, #32
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4610      	mov	r0, r2
 800cfcc:	4798      	blx	r3
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b0f      	cmp	r3, #15
 800cfd2:	d805      	bhi.n	800cfe0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800cfd4:	4b77      	ldr	r3, [pc, #476]	@ (800d1b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cfd6:	4a75      	ldr	r2, [pc, #468]	@ (800d1ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cfd8:	21a4      	movs	r1, #164	@ 0xa4
 800cfda:	4875      	ldr	r0, [pc, #468]	@ (800d1b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cfdc:	f022 fcdc 	bl	802f998 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	68da      	ldr	r2, [r3, #12]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3320      	adds	r3, #32
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4610      	mov	r0, r2
 800cff0:	4798      	blx	r3
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b0b      	cmp	r3, #11
 800cff6:	d805      	bhi.n	800d004 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800cff8:	4b6f      	ldr	r3, [pc, #444]	@ (800d1b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cffa:	4a6c      	ldr	r2, [pc, #432]	@ (800d1ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cffc:	21a5      	movs	r1, #165	@ 0xa5
 800cffe:	486c      	ldr	r0, [pc, #432]	@ (800d1b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d000:	f022 fcca 	bl	802f998 <__assert_func>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d010:	f010 fda4 	bl	801db5c <_ZN8touchgfx11Application11getInstanceEv>
 800d014:	4603      	mov	r3, r0
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fce2 	bl	800c9e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d008      	beq.n	800d036 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	330c      	adds	r3, #12
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4610      	mov	r0, r2
 800d034:	4798      	blx	r3
    if (*currentTrans)
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d007      	beq.n	800d04e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	6a3b      	ldr	r3, [r7, #32]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4610      	mov	r0, r2
 800d04c:	4798      	blx	r3
    if (*currentScreen)
 800d04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d008      	beq.n	800d068 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	3314      	adds	r3, #20
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4610      	mov	r0, r2
 800d066:	4798      	blx	r3
    if (*currentPresenter)
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d008      	beq.n	800d082 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800d070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3304      	adds	r3, #4
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4610      	mov	r0, r2
 800d080:	4798      	blx	r3
    if (*currentScreen)
 800d082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d007      	beq.n	800d09a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800d08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4610      	mov	r0, r2
 800d098:	4798      	blx	r3
    if (*currentPresenter)
 800d09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d008      	beq.n	800d0b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3308      	adds	r3, #8
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4798      	blx	r3
}
 800d0b4:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 f87d 	bl	800d1bc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	200c      	movs	r0, #12
 800d0c8:	f7ff fbf4 	bl	800c8b4 <_ZnwjPv>
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f7ff ff48 	bl	800cf64 <_ZN8touchgfx12NoTransitionC1Ev>
 800d0d4:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 f880 	bl	800d1e2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	f44f 50b7 	mov.w	r0, #5856	@ 0x16e0
 800d0ea:	f7ff fbe3 	bl	800c8b4 <_ZnwjPv>
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f008 ffdf 	bl	80160b4 <_ZN11Screen1ViewC1Ev>
 800d0f6:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f882 	bl	800d208 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800d104:	4603      	mov	r3, r0
 800d106:	4619      	mov	r1, r3
 800d108:	2010      	movs	r0, #16
 800d10a:	f7ff fbd3 	bl	800c8b4 <_ZnwjPv>
 800d10e:	4604      	mov	r4, r0
 800d110:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d112:	4620      	mov	r0, r4
 800d114:	f008 ff48 	bl	8015fa8 <_ZN16Screen1PresenterC1ER11Screen1View>
 800d118:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d11e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d124:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d12a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d134:	3304      	adds	r3, #4
 800d136:	e000      	b.n	800d13a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d138:	2300      	movs	r3, #0
 800d13a:	4619      	mov	r1, r3
 800d13c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d13e:	f7ff fd95 	bl	800cc6c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d144:	3304      	adds	r3, #4
 800d146:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d148:	4618      	mov	r0, r3
 800d14a:	f7ff fe02 	bl	800cd52 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d152:	4618      	mov	r0, r3
 800d154:	f000 f86b 	bl	800d22e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800d158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15a:	61fb      	str	r3, [r7, #28]
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15e:	61bb      	str	r3, [r7, #24]
 800d160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d162:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	330c      	adds	r3, #12
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	69f8      	ldr	r0, [r7, #28]
 800d16e:	4798      	blx	r3
    newPresenter->activate();
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	69b8      	ldr	r0, [r7, #24]
 800d178:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d17a:	6979      	ldr	r1, [r7, #20]
 800d17c:	69f8      	ldr	r0, [r7, #28]
 800d17e:	f012 fa7d 	bl	801f67c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3310      	adds	r3, #16
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6978      	ldr	r0, [r7, #20]
 800d18c:	4798      	blx	r3
    newTransition->invalidate();
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3314      	adds	r3, #20
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6978      	ldr	r0, [r7, #20]
 800d198:	4798      	blx	r3
}
 800d19a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	373c      	adds	r7, #60	@ 0x3c
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd90      	pop	{r4, r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	08030b14 	.word	0x08030b14
 800d1ac:	08030ba4 	.word	0x08030ba4
 800d1b0:	08030c78 	.word	0x08030c78
 800d1b4:	08030cbc 	.word	0x08030cbc
 800d1b8:	08030d60 	.word	0x08030d60

0800d1bc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3324      	adds	r3, #36	@ 0x24
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	887a      	ldrh	r2, [r7, #2]
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	4798      	blx	r3
 800d1d8:	4603      	mov	r3, r0
    }
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b082      	sub	sp, #8
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3324      	adds	r3, #36	@ 0x24
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	887a      	ldrh	r2, [r7, #2]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	4798      	blx	r3
 800d1fe:	4603      	mov	r3, r0
    }
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3324      	adds	r3, #36	@ 0x24
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	887a      	ldrh	r2, [r7, #2]
 800d21e:	4611      	mov	r1, r2
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	4798      	blx	r3
 800d224:	4603      	mov	r3, r0
    }
 800d226:	4618      	mov	r0, r3
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800d22e:	b480      	push	{r7}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800d23e:	bf00      	nop
 800d240:	370c      	adds	r7, #12
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
	...

0800d24c <_ZN8touchgfx12NoTransitionD1Ev>:
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	4a05      	ldr	r2, [pc, #20]	@ (800d26c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fc2b 	bl	800cab8 <_ZN8touchgfx10TransitionD1Ev>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	08032150 	.word	0x08032150

0800d270 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff ffe7 	bl	800d24c <_ZN8touchgfx12NoTransitionD1Ev>
 800d27e:	210c      	movs	r1, #12
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f022 fb5c 	bl	802f93e <_ZdlPvj>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4618      	mov	r0, r3
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	4a05      	ldr	r2, [pc, #20]	@ (800d2b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff fbab 	bl	800c9fc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	080321c8 	.word	0x080321c8

0800d2b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff ffe7 	bl	800d290 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d2c2:	2110      	movs	r1, #16
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f022 fb3a 	bl	802f93e <_ZdlPvj>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	68d2      	ldr	r2, [r2, #12]
 800d2e4:	1052      	asrs	r2, r2, #1
 800d2e6:	1899      	adds	r1, r3, r2
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	e00a      	b.n	800d310 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	68d2      	ldr	r2, [r2, #12]
 800d302:	1052      	asrs	r2, r2, #1
 800d304:	4413      	add	r3, r2
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	6892      	ldr	r2, [r2, #8]
 800d30c:	4413      	add	r3, r2
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4608      	mov	r0, r1
 800d312:	4798      	blx	r3
    }
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d010      	beq.n	800d34e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d107      	bne.n	800d344 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	f003 0301 	and.w	r3, r3, #1
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d340:	2301      	movs	r3, #1
 800d342:	e000      	b.n	800d346 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800d344:	2300      	movs	r3, #0
 800d346:	2b01      	cmp	r3, #1
 800d348:	d001      	beq.n	800d34e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e000      	b.n	800d350 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800d34e:	2300      	movs	r3, #0
    }
 800d350:	4618      	mov	r0, r3
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
        : color(0)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	601a      	str	r2, [r3, #0]
    {
    }
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4618      	mov	r0, r3
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
        : color(col)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	601a      	str	r2, [r3, #0]
    {
    }
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
    {
        return color;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
    }
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800d3ae:	b480      	push	{r7}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	801a      	strh	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	805a      	strh	r2, [r3, #2]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	809a      	strh	r2, [r3, #4]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	80da      	strh	r2, [r3, #6]
    {
    }
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800d3dc:	b480      	push	{r7}
 800d3de:	b085      	sub	sp, #20
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	817b      	strh	r3, [r7, #10]
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	813b      	strh	r3, [r7, #8]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	897a      	ldrh	r2, [r7, #10]
 800d3fa:	801a      	strh	r2, [r3, #0]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	893a      	ldrh	r2, [r7, #8]
 800d400:	805a      	strh	r2, [r3, #2]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	88fa      	ldrh	r2, [r7, #6]
 800d406:	809a      	strh	r2, [r3, #4]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	8b3a      	ldrh	r2, [r7, #24]
 800d40c:	80da      	strh	r2, [r3, #6]
    {
    }
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800d424:	4a14      	ldr	r2, [pc, #80]	@ (800d478 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	601a      	str	r2, [r3, #0]
        : rect(),
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3304      	adds	r3, #4
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff ffbd 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	330c      	adds	r3, #12
 800d438:	4618      	mov	r0, r3
 800d43a:	f7ff ffb8 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4618      	mov	r0, r3
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	080337bc 	.word	0x080337bc

0800d47c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
    {
 800d484:	4a04      	ldr	r2, [pc, #16]	@ (800d498 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	601a      	str	r2, [r3, #0]
    }
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4618      	mov	r0, r3
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	080337bc 	.word	0x080337bc

0800d49c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
    }
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff ffe9 	bl	800d47c <_ZN8touchgfx8DrawableD1Ev>
 800d4aa:	2128      	movs	r1, #40	@ 0x28
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f022 fa46 	bl	802f93e <_ZdlPvj>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d005      	beq.n	800d4da <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	3314      	adds	r3, #20
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	4798      	blx	r3
        }
    }
 800d4da:	bf00      	nop
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d4ea:	2300      	movs	r3, #0
    }
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	4608      	mov	r0, r1
 800d502:	4611      	mov	r1, r2
 800d504:	461a      	mov	r2, r3
 800d506:	4603      	mov	r3, r0
 800d508:	817b      	strh	r3, [r7, #10]
 800d50a:	460b      	mov	r3, r1
 800d50c:	813b      	strh	r3, [r7, #8]
 800d50e:	4613      	mov	r3, r2
 800d510:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d512:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d516:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d51a:	4619      	mov	r1, r3
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f000 f844 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800d522:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d52a:	4619      	mov	r1, r3
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 f898 	bl	800d662 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800d532:	bf00      	nop
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800d548:	4618      	mov	r0, r3
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800d562:	4618      	mov	r0, r3
 800d564:	370c      	adds	r7, #12
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800d56e:	b480      	push	{r7}
 800d570:	b083      	sub	sp, #12
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	460b      	mov	r3, r1
 800d578:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	887a      	ldrh	r2, [r7, #2]
 800d57e:	809a      	strh	r2, [r3, #4]
    }
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	887a      	ldrh	r2, [r7, #2]
 800d59c:	80da      	strh	r2, [r3, #6]
    }
 800d59e:	bf00      	nop
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	807b      	strh	r3, [r7, #2]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3330      	adds	r3, #48	@ 0x30
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	4798      	blx	r3
        setY(y);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3334      	adds	r3, #52	@ 0x34
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d5d8:	4611      	mov	r1, r2
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	4798      	blx	r3
    }
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800d5e6:	b480      	push	{r7}
 800d5e8:	b083      	sub	sp, #12
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	887a      	ldrh	r2, [r7, #2]
 800d5f6:	811a      	strh	r2, [r3, #8]
    }
 800d5f8:	bf00      	nop
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	887a      	ldrh	r2, [r7, #2]
 800d614:	815a      	strh	r2, [r3, #10]
    }
 800d616:	bf00      	nop
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800d622:	b480      	push	{r7}
 800d624:	b083      	sub	sp, #12
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
    {
    }
 800d62a:	bf00      	nop
 800d62c:	370c      	adds	r7, #12
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d636:	b480      	push	{r7}
 800d638:	b083      	sub	sp, #12
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
 800d63e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800d662:	b580      	push	{r7, lr}
 800d664:	b082      	sub	sp, #8
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	460b      	mov	r3, r1
 800d66c:	807b      	strh	r3, [r7, #2]
 800d66e:	4613      	mov	r3, r2
 800d670:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3338      	adds	r3, #56	@ 0x38
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d67e:	4611      	mov	r1, r2
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	4798      	blx	r3
        setHeight(height);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	333c      	adds	r3, #60	@ 0x3c
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d690:	4611      	mov	r1, r2
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	4798      	blx	r3
    }
 800d696:	bf00      	nop
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d69e:	b480      	push	{r7}
 800d6a0:	b083      	sub	sp, #12
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d6a8:	bf00      	nop
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
    {
    }
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	370c      	adds	r7, #12
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr

0800d6e2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d6e2:	b480      	push	{r7}
 800d6e4:	b083      	sub	sp, #12
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	807b      	strh	r3, [r7, #2]
 800d708:	4613      	mov	r3, r2
 800d70a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3354      	adds	r3, #84	@ 0x54
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	8879      	ldrh	r1, [r7, #2]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d71c:	b292      	uxth	r2, r2
 800d71e:	1a8a      	subs	r2, r1, r2
 800d720:	b292      	uxth	r2, r2
 800d722:	b210      	sxth	r0, r2
 800d724:	8839      	ldrh	r1, [r7, #0]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d72c:	b292      	uxth	r2, r2
 800d72e:	1a8a      	subs	r2, r1, r2
 800d730:	b292      	uxth	r2, r2
 800d732:	b212      	sxth	r2, r2
 800d734:	4601      	mov	r1, r0
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	4798      	blx	r3
    }
 800d73a:	bf00      	nop
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800d742:	b480      	push	{r7}
 800d744:	b083      	sub	sp, #12
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d750:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d758:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d760:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800d762:	bf00      	nop
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800d76e:	b580      	push	{r7, lr}
 800d770:	b084      	sub	sp, #16
 800d772:	af00      	add	r7, sp, #0
 800d774:	60f8      	str	r0, [r7, #12]
 800d776:	60b9      	str	r1, [r7, #8]
 800d778:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f7ff ffe1 	bl	800d742 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	601a      	str	r2, [r3, #0]
    }
 800d78e:	bf00      	nop
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800d796:	b580      	push	{r7, lr}
 800d798:	b084      	sub	sp, #16
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	60f8      	str	r0, [r7, #12]
 800d79e:	607b      	str	r3, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	817b      	strh	r3, [r7, #10]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7ff ff8c 	bl	800d6c8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d008      	beq.n	800d7c8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff ff92 	bl	800d6e2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e000      	b.n	800d7ca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	601a      	str	r2, [r3, #0]
        }
    }
 800d7d4:	bf00      	nop
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
    {
 800d814:	4a06      	ldr	r2, [pc, #24]	@ (800d830 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	601a      	str	r2, [r3, #0]
    }
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	3304      	adds	r3, #4
 800d81e:	4618      	mov	r0, r3
 800d820:	f001 f8da 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4618      	mov	r0, r3
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	080338c8 	.word	0x080338c8

0800d834 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
    }
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff ffe5 	bl	800d80c <_ZN8touchgfx6ScreenD1Ev>
 800d842:	213c      	movs	r1, #60	@ 0x3c
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f022 f87a 	bl	802f93e <_ZdlPvj>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
    {
    }
 800d85c:	bf00      	nop
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
    {
    }
 800d870:	bf00      	nop
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
    {
    }
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
    {
    }
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	6839      	ldr	r1, [r7, #0]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f00a fd8d 	bl	80183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
	...

0800d8dc <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7ff fd98 	bl	800d41c <_ZN8touchgfx8DrawableC1Ev>
 800d8ec:	4a03      	ldr	r2, [pc, #12]	@ (800d8fc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	08032738 	.word	0x08032738

0800d900 <_ZN8touchgfx6WidgetD1Ev>:
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	4a05      	ldr	r2, [pc, #20]	@ (800d920 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff fdb3 	bl	800d47c <_ZN8touchgfx8DrawableD1Ev>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	08032738 	.word	0x08032738

0800d924 <_ZN8touchgfx6WidgetD0Ev>:
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff ffe7 	bl	800d900 <_ZN8touchgfx6WidgetD1Ev>
 800d932:	2128      	movs	r1, #40	@ 0x28
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f022 f802 	bl	802f93e <_ZdlPvj>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4618      	mov	r0, r3
 800d950:	2326      	movs	r3, #38	@ 0x26
 800d952:	461a      	mov	r2, r3
 800d954:	2100      	movs	r1, #0
 800d956:	f022 fa26 	bl	802fda6 <memset>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff ffbd 	bl	800d8dc <_ZN8touchgfx6WidgetC1Ev>
 800d962:	4a09      	ldr	r2, [pc, #36]	@ (800d988 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	22ff      	movs	r2, #255	@ 0xff
 800d96c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3328      	adds	r3, #40	@ 0x28
 800d974:	2100      	movs	r1, #0
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff fcfe 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	08033608 	.word	0x08033608

0800d98c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800d99c:	bf00      	nop
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800d9b4:	4a06      	ldr	r2, [pc, #24]	@ (800d9d0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	887a      	ldrh	r2, [r7, #2]
 800d9be:	809a      	strh	r2, [r3, #4]
    }
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	080320d8 	.word	0x080320d8

0800d9d4 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	2326      	movs	r3, #38	@ 0x26
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	f022 f9de 	bl	802fda6 <memset>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7ff ff75 	bl	800d8dc <_ZN8touchgfx6WidgetC1Ev>
 800d9f2:	4a16      	ldr	r2, [pc, #88]	@ (800da4c <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	3328      	adds	r3, #40	@ 0x28
 800d9fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff ffd1 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	3330      	adds	r3, #48	@ 0x30
 800da0a:	2100      	movs	r1, #0
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7ff fcb3 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	869a      	strh	r2, [r3, #52]	@ 0x34
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	22ff      	movs	r2, #255	@ 0xff
 800da1c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	333c      	adds	r3, #60	@ 0x3c
 800da3c:	4618      	mov	r0, r3
 800da3e:	f000 f8f0 	bl	800dc22 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	08033578 	.word	0x08033578

0800da50 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800da50:	b590      	push	{r4, r7, lr}
 800da52:	b087      	sub	sp, #28
 800da54:	af00      	add	r7, sp, #0
 800da56:	6178      	str	r0, [r7, #20]
 800da58:	460b      	mov	r3, r1
 800da5a:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800da62:	4611      	mov	r1, r2
 800da64:	4618      	mov	r0, r3
 800da66:	f7ff fdbe 	bl	800d5e6 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3384      	adds	r3, #132	@ 0x84
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	697c      	ldr	r4, [r7, #20]
 800da74:	463a      	mov	r2, r7
 800da76:	6979      	ldr	r1, [r7, #20]
 800da78:	4610      	mov	r0, r2
 800da7a:	4798      	blx	r3
 800da7c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800da80:	463a      	mov	r2, r7
 800da82:	ca07      	ldmia	r2, {r0, r1, r2}
 800da84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800da88:	bf00      	nop
 800da8a:	371c      	adds	r7, #28
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd90      	pop	{r4, r7, pc}

0800da90 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	6178      	str	r0, [r7, #20]
 800da98:	460b      	mov	r3, r1
 800da9a:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800daa2:	4611      	mov	r1, r2
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7ff fdad 	bl	800d604 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3384      	adds	r3, #132	@ 0x84
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	697c      	ldr	r4, [r7, #20]
 800dab4:	463a      	mov	r2, r7
 800dab6:	6979      	ldr	r1, [r7, #20]
 800dab8:	4610      	mov	r0, r2
 800daba:	4798      	blx	r3
 800dabc:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800dac0:	463a      	mov	r2, r7
 800dac2:	ca07      	ldmia	r2, {r0, r1, r2}
 800dac4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800dac8:	bf00      	nop
 800daca:	371c      	adds	r7, #28
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd90      	pop	{r4, r7, pc}

0800dad0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff fc67 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
    }
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	460b      	mov	r3, r1
 800daf2:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	78fa      	ldrb	r2, [r7, #3]
 800daf8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800db08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800db14:	687e      	ldr	r6, [r7, #4]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3334      	adds	r3, #52	@ 0x34
 800db1c:	681c      	ldr	r4, [r3, #0]
 800db1e:	887d      	ldrh	r5, [r7, #2]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f867 	bl	800dbf4 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800db26:	4603      	mov	r3, r0
 800db28:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800db2a:	4b1c      	ldr	r3, [pc, #112]	@ (800db9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d105      	bne.n	800db3e <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800db32:	4b1b      	ldr	r3, [pc, #108]	@ (800dba0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800db34:	4a1b      	ldr	r2, [pc, #108]	@ (800dba4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800db36:	216c      	movs	r1, #108	@ 0x6c
 800db38:	481b      	ldr	r0, [pc, #108]	@ (800dba8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800db3a:	f021 ff2d 	bl	802f998 <__assert_func>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	889a      	ldrh	r2, [r3, #4]
 800db46:	4b19      	ldr	r3, [pc, #100]	@ (800dbac <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800db48:	881b      	ldrh	r3, [r3, #0]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	bf34      	ite	cc
 800db4e:	2301      	movcc	r3, #1
 800db50:	2300      	movcs	r3, #0
 800db52:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800db54:	2b00      	cmp	r3, #0
 800db56:	d105      	bne.n	800db64 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800db58:	4b15      	ldr	r3, [pc, #84]	@ (800dbb0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800db5a:	4a12      	ldr	r2, [pc, #72]	@ (800dba4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800db5c:	216d      	movs	r1, #109	@ 0x6d
 800db5e:	4812      	ldr	r0, [pc, #72]	@ (800dba8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800db60:	f021 ff1a 	bl	802f998 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800db64:	4b13      	ldr	r3, [pc, #76]	@ (800dbb4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	4b0c      	ldr	r3, [pc, #48]	@ (800db9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800db6a:	6819      	ldr	r1, [r3, #0]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	889b      	ldrh	r3, [r3, #4]
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	440b      	add	r3, r1
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4413      	add	r3, r2
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	3230      	adds	r2, #48	@ 0x30
 800db80:	6812      	ldr	r2, [r2, #0]
 800db82:	4618      	mov	r0, r3
 800db84:	4790      	blx	r2
 800db86:	4603      	mov	r3, r0
 800db88:	1aeb      	subs	r3, r5, r3
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	b21b      	sxth	r3, r3
 800db8e:	4619      	mov	r1, r3
 800db90:	4630      	mov	r0, r6
 800db92:	47a0      	blx	r4
    }
 800db94:	bf00      	nop
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db9c:	20012054 	.word	0x20012054
 800dba0:	08030e04 	.word	0x08030e04
 800dba4:	08030e48 	.word	0x08030e48
 800dba8:	08030e84 	.word	0x08030e84
 800dbac:	20012058 	.word	0x20012058
 800dbb0:	08030ec8 	.word	0x08030ec8
 800dbb4:	2001205c 	.word	0x2001205c

0800dbb8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	807b      	strh	r3, [r7, #2]
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3330      	adds	r3, #48	@ 0x30
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800dbd6:	4610      	mov	r0, r2
 800dbd8:	4798      	blx	r3
        setBaselineY(baselineY);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3364      	adds	r3, #100	@ 0x64
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	4798      	blx	r3
    }
 800dbec:	bf00      	nop
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3328      	adds	r3, #40	@ 0x28
    }
 800dc00:	4618      	mov	r0, r3
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dc14:	2300      	movs	r3, #0
    }
 800dc16:	4618      	mov	r0, r3
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b084      	sub	sp, #16
 800dc26:	af02      	add	r7, sp, #8
 800dc28:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	f04f 33ff 	mov.w	r3, #4294967295
 800dc36:	2200      	movs	r2, #0
 800dc38:	2100      	movs	r1, #0
 800dc3a:	f7ff fbcf 	bl	800d3dc <_ZN8touchgfx4RectC1Essss>
              text(0)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	609a      	str	r2, [r3, #8]
        {
        }
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4618      	mov	r0, r3
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
	...

0800dc50 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	4a08      	ldr	r2, [pc, #32]	@ (800dc7c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	3328      	adds	r3, #40	@ 0x28
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fe fc44 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff fe48 	bl	800d900 <_ZN8touchgfx6WidgetD1Ev>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	08033578 	.word	0x08033578

0800dc80 <_ZN8touchgfx8TextAreaD0Ev>:
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7ff ffe1 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 800dc8e:	2148      	movs	r1, #72	@ 0x48
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f021 fe54 	bl	802f93e <_ZdlPvj>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
        : TextArea()
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7ff fe92 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800dcb0:	4a03      	ldr	r2, [pc, #12]	@ (800dcc0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	601a      	str	r2, [r3, #0]
    {
    }
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	08033670 	.word	0x08033670

0800dcc4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7ff fbf4 	bl	800d4bc <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800dcd4:	bf00      	nop
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff ff9b 	bl	800dc22 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	4a05      	ldr	r2, [pc, #20]	@ (800dd14 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7ff ffa3 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	08033670 	.word	0x08033670

0800dd18 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff ffe7 	bl	800dcf4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800dd26:	2148      	movs	r1, #72	@ 0x48
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f021 fe08 	bl	802f93e <_ZdlPvj>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4618      	mov	r0, r3
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7ff ffac 	bl	800dca0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800dd48:	4a05      	ldr	r2, [pc, #20]	@ (800dd60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	649a      	str	r2, [r3, #72]	@ 0x48
    {
    }
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4618      	mov	r0, r3
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	080326a8 	.word	0x080326a8

0800dd64 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 800dd74:	bf00      	nop
 800dd76:	370c      	adds	r7, #12
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff ffdd 	bl	800dd64 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800ddaa:	bf00      	nop
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
	...

0800ddb4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800ddbc:	4a06      	ldr	r2, [pc, #24]	@ (800ddd8 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	809a      	strh	r2, [r3, #4]
    {
    }
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	370c      	adds	r7, #12
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	08032688 	.word	0x08032688

0800dddc <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
    {
 800dde4:	4a04      	ldr	r2, [pc, #16]	@ (800ddf8 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	601a      	str	r2, [r3, #0]
    }
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	08032688 	.word	0x08032688

0800ddfc <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
    }
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff ffe9 	bl	800dddc <_ZN8touchgfx15AbstractPainterD1Ev>
 800de0a:	2108      	movs	r1, #8
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f021 fd96 	bl	802f93e <_ZdlPvj>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800de24:	2300      	movs	r3, #0
    }
 800de26:	4618      	mov	r0, r3
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800de32:	b480      	push	{r7}
 800de34:	b083      	sub	sp, #12
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	809a      	strh	r2, [r3, #4]
        return true;
 800de46:	2301      	movs	r3, #1
    }
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
    {
        return;
 800de5c:	bf00      	nop
    }
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
            : v(i)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	601a      	str	r2, [r3, #0]
        {
        }
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4618      	mov	r0, r3
 800de7c:	370c      	adds	r7, #12
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr

0800de86 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800de86:	b480      	push	{r7}
 800de88:	b083      	sub	sp, #12
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
        {
            return v;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
        }
 800de92:	4618      	mov	r0, r3
 800de94:	370c      	adds	r7, #12
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>:
         *
         * @param  q5 The Q5 to add to this.
         *
         * @return The result of the operation.
         */
        Q5 operator+(const Q5& q5) const
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
 800dea6:	6039      	str	r1, [r7, #0]
        {
            return Q5(v + q5.v);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	441a      	add	r2, r3
 800deb2:	f107 030c 	add.w	r3, r7, #12
 800deb6:	4611      	mov	r1, r2
 800deb8:	4618      	mov	r0, r3
 800deba:	f7ff ffd5 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800debe:	68fb      	ldr	r3, [r7, #12]
        }
 800dec0:	4618      	mov	r0, r3
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>:
         *
         * @param  q5 The Q5 to subtract from this.
         *
         * @return The result of the operation.
         */
        Q5 operator-(const Q5& q5) const
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
        {
            return Q5(v - q5.v);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	1ad2      	subs	r2, r2, r3
 800dedc:	f107 030c 	add.w	r3, r7, #12
 800dee0:	4611      	mov	r1, r2
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff ffc0 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800dee8:	68fb      	ldr	r3, [r7, #12]
        }
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor.
     */
    static Q5 muldivQ5(Q5 factor1, Q5 factor2, Q5 divisor)
 800def2:	b5b0      	push	{r4, r5, r7, lr}
 800def4:	b086      	sub	sp, #24
 800def6:	af00      	add	r7, sp, #0
 800def8:	60f8      	str	r0, [r7, #12]
 800defa:	60b9      	str	r1, [r7, #8]
 800defc:	607a      	str	r2, [r7, #4]
    {
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800defe:	f107 030c 	add.w	r3, r7, #12
 800df02:	4618      	mov	r0, r3
 800df04:	f7ff ffbf 	bl	800de86 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800df08:	4604      	mov	r4, r0
 800df0a:	f107 0308 	add.w	r3, r7, #8
 800df0e:	4618      	mov	r0, r3
 800df10:	f7ff ffb9 	bl	800de86 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800df14:	4605      	mov	r5, r0
 800df16:	1d3b      	adds	r3, r7, #4
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff ffb4 	bl	800de86 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800df1e:	4603      	mov	r3, r0
 800df20:	461a      	mov	r2, r3
 800df22:	4629      	mov	r1, r5
 800df24:	4620      	mov	r0, r4
 800df26:	f011 f85a 	bl	801efde <_ZN8touchgfx6muldivElll>
 800df2a:	4602      	mov	r2, r0
 800df2c:	f107 0314 	add.w	r3, r7, #20
 800df30:	4611      	mov	r1, r2
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff ff98 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800df38:	697b      	ldr	r3, [r7, #20]
    }
 800df3a:	4618      	mov	r0, r3
 800df3c:	3718      	adds	r7, #24
 800df3e:	46bd      	mov	sp, r7
 800df40:	bdb0      	pop	{r4, r5, r7, pc}

0800df42 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800df42:	b580      	push	{r7, lr}
 800df44:	b094      	sub	sp, #80	@ 0x50
 800df46:	af00      	add	r7, sp, #0
 800df48:	60f8      	str	r0, [r7, #12]
 800df4a:	60b9      	str	r1, [r7, #8]
 800df4c:	607a      	str	r2, [r7, #4]
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800df4e:	f107 0310 	add.w	r3, r7, #16
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	68b9      	ldr	r1, [r7, #8]
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f011 f822 	bl	801efa0 <_ZN8touchgfx6muldivElllRl>
 800df5c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (result >= 0)
 800df5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df60:	2b00      	cmp	r3, #0
 800df62:	db2f      	blt.n	800dfc4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x82>
 800df64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df66:	64bb      	str	r3, [r7, #72]	@ 0x48
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800df68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df6a:	015a      	lsls	r2, r3, #5
 800df6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800df70:	4611      	mov	r1, r2
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff ff78 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800df78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	f107 031c 	add.w	r3, r7, #28
 800df80:	2120      	movs	r1, #32
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff ff70 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	f107 0320 	add.w	r3, r7, #32
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f7ff ff69 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800df96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff ff63 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800dfa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfa4:	6a39      	ldr	r1, [r7, #32]
 800dfa6:	69f8      	ldr	r0, [r7, #28]
 800dfa8:	f7ff ffa3 	bl	800def2 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800dfac:	4603      	mov	r3, r0
 800dfae:	61bb      	str	r3, [r7, #24]
 800dfb0:	f107 0218 	add.w	r2, r7, #24
 800dfb4:	f107 0314 	add.w	r3, r7, #20
 800dfb8:	4611      	mov	r1, r2
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff ff6f 	bl	800de9e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	e02e      	b.n	800e022 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0xe0>
 800dfc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc6:	647b      	str	r3, [r7, #68]	@ 0x44
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800dfc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfca:	015a      	lsls	r2, r3, #5
 800dfcc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7ff ff48 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800dfd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800dfda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dfdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dfe0:	2120      	movs	r1, #32
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7ff ff40 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800dfe8:	693a      	ldr	r2, [r7, #16]
 800dfea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dfee:	4611      	mov	r1, r2
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff ff39 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800dff6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7ff ff33 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e002:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e004:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e006:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e008:	f7ff ff73 	bl	800def2 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800e00c:	4603      	mov	r3, r0
 800e00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e010:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e018:	4611      	mov	r1, r2
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff ff54 	bl	800dec8 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800e020:	4603      	mov	r3, r0
    }
 800e022:	4618      	mov	r0, r3
 800e024:	3750      	adds	r7, #80	@ 0x50
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
 800e02a:	b480      	push	{r7}
 800e02c:	b083      	sub	sp, #12
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
    {
        return xScale;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
 800e036:	4618      	mov	r0, r3
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
 800e042:	b480      	push	{r7}
 800e044:	b083      	sub	sp, #12
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
    {
        return yScale;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800e04e:	4618      	mov	r0, r3
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha()
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
 800e05a:	b480      	push	{r7}
 800e05c:	b083      	sub	sp, #12
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	460b      	mov	r3, r1
 800e064:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	78fa      	ldrb	r2, [r7, #3]
 800e06a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 800e06e:	bf00      	nop
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b08c      	sub	sp, #48	@ 0x30
 800e07e:	af00      	add	r7, sp, #0
 800e080:	60f8      	str	r0, [r7, #12]
 800e082:	60b9      	str	r1, [r7, #8]
 800e084:	607a      	str	r2, [r7, #4]
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	33a4      	adds	r3, #164	@ 0xa4
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	61fa      	str	r2, [r7, #28]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	61ba      	str	r2, [r7, #24]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 800e096:	69fa      	ldr	r2, [r7, #28]
 800e098:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e09a:	69b9      	ldr	r1, [r7, #24]
 800e09c:	6179      	str	r1, [r7, #20]
 800e09e:	613a      	str	r2, [r7, #16]
        return i * scale;
 800e0a0:	697a      	ldr	r2, [r7, #20]
 800e0a2:	6939      	ldr	r1, [r7, #16]
 800e0a4:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, xScale);
 800e0a8:	bf00      	nop
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e0b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e0b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0b8:	6279      	str	r1, [r7, #36]	@ 0x24
 800e0ba:	623a      	str	r2, [r7, #32]
        return i * scale;
 800e0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0be:	6a39      	ldr	r1, [r7, #32]
 800e0c0:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e0c4:	bf00      	nop
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800e0c6:	4601      	mov	r1, r0
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	4798      	blx	r3
    }
 800e0cc:	bf00      	nop
 800e0ce:	3730      	adds	r7, #48	@ 0x30
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
    virtual void setGraphRangeX(float min, float max)
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b08e      	sub	sp, #56	@ 0x38
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	ed87 0a02 	vstr	s0, [r7, #8]
 800e0e0:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	33a4      	adds	r3, #164	@ 0xa4
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	623a      	str	r2, [r7, #32]
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledX(float f) const
    {
        return float2scaled(f, xScale);
 800e0f4:	6a3a      	ldr	r2, [r7, #32]
 800e0f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e0f8:	69f9      	ldr	r1, [r7, #28]
 800e0fa:	61b9      	str	r1, [r7, #24]
 800e0fc:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800e0fe:	697a      	ldr	r2, [r7, #20]
 800e100:	ee07 2a90 	vmov	s15, r2
 800e104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e108:	ed97 7a06 	vldr	s14, [r7, #24]
 800e10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e110:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800e114:	edd7 7a04 	vldr	s15, [r7, #16]
 800e118:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e120:	db0a      	blt.n	800e138 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x64>
            return (int)(fs + 0.5f);
 800e122:	edd7 7a04 	vldr	s15, [r7, #16]
 800e126:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e12a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e12e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e132:	ee17 0a90 	vmov	r0, s15
 800e136:	e019      	b.n	800e16c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e138:	edd7 7a04 	vldr	s15, [r7, #16]
 800e13c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e140:	ee17 2a90 	vmov	r2, s15
 800e144:	3a01      	subs	r2, #1
 800e146:	edd7 7a04 	vldr	s15, [r7, #16]
 800e14a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e14e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e152:	ed97 7a04 	vldr	s14, [r7, #16]
 800e156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e15a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e15e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e166:	ee17 1a90 	vmov	r1, s15
 800e16a:	1850      	adds	r0, r2, r1
        return float2scaled(f, xScale);
 800e16c:	bf00      	nop
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	637a      	str	r2, [r7, #52]	@ 0x34
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	633a      	str	r2, [r7, #48]	@ 0x30
 800e176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e178:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e17a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e17c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800e17e:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800e180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e182:	ee07 2a90 	vmov	s15, r2
 800e186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e18a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e192:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800e196:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e19a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a2:	db0a      	blt.n	800e1ba <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0xe6>
            return (int)(fs + 0.5f);
 800e1a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e1a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e1ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1b4:	ee17 2a90 	vmov	r2, s15
 800e1b8:	e019      	b.n	800e1ee <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e1ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e1be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1c2:	ee17 2a90 	vmov	r2, s15
 800e1c6:	3a01      	subs	r2, #1
 800e1c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e1cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800e1d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1dc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e1e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e1e8:	ee17 1a90 	vmov	r1, s15
 800e1ec:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800e1ee:	bf00      	nop
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800e1f0:	4601      	mov	r1, r0
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	4798      	blx	r3
    }
 800e1f6:	bf00      	nop
 800e1f8:	3738      	adds	r7, #56	@ 0x38
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b088      	sub	sp, #32
 800e202:	af00      	add	r7, sp, #0
 800e204:	60f8      	str	r0, [r7, #12]
 800e206:	460b      	mov	r3, r1
 800e208:	607a      	str	r2, [r7, #4]
 800e20a:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	33b0      	adds	r3, #176	@ 0xb0
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	61fa      	str	r2, [r7, #28]
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, xScale);
 800e21c:	69fa      	ldr	r2, [r7, #28]
 800e21e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e220:	69b9      	ldr	r1, [r7, #24]
 800e222:	6179      	str	r1, [r7, #20]
 800e224:	613a      	str	r2, [r7, #16]
        return i * scale;
 800e226:	697a      	ldr	r2, [r7, #20]
 800e228:	6939      	ldr	r1, [r7, #16]
 800e22a:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800e22e:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800e230:	7af9      	ldrb	r1, [r7, #11]
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	4798      	blx	r3
    }
 800e236:	bf00      	nop
 800e238:	3720      	adds	r7, #32
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 800e23e:	b580      	push	{r7, lr}
 800e240:	b08a      	sub	sp, #40	@ 0x28
 800e242:	af00      	add	r7, sp, #0
 800e244:	60f8      	str	r0, [r7, #12]
 800e246:	460b      	mov	r3, r1
 800e248:	ed87 0a01 	vstr	s0, [r7, #4]
 800e24c:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	33b0      	adds	r3, #176	@ 0xb0
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	627a      	str	r2, [r7, #36]	@ 0x24
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	623a      	str	r2, [r7, #32]
        return float2scaled(f, xScale);
 800e25e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e260:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e262:	6a39      	ldr	r1, [r7, #32]
 800e264:	61f9      	str	r1, [r7, #28]
 800e266:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800e268:	69ba      	ldr	r2, [r7, #24]
 800e26a:	ee07 2a90 	vmov	s15, r2
 800e26e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e272:	ed97 7a07 	vldr	s14, [r7, #28]
 800e276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e27a:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800e27e:	edd7 7a05 	vldr	s15, [r7, #20]
 800e282:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e28a:	db0a      	blt.n	800e2a2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800e28c:	edd7 7a05 	vldr	s15, [r7, #20]
 800e290:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e294:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e29c:	ee17 2a90 	vmov	r2, s15
 800e2a0:	e019      	b.n	800e2d6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e2a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800e2a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2aa:	ee17 2a90 	vmov	r2, s15
 800e2ae:	3a01      	subs	r2, #1
 800e2b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800e2b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2bc:	ed97 7a05 	vldr	s14, [r7, #20]
 800e2c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2c4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e2c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2d0:	ee17 1a90 	vmov	r1, s15
 800e2d4:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800e2d6:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800e2d8:	7af9      	ldrb	r1, [r7, #11]
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	4798      	blx	r3
    }
 800e2de:	bf00      	nop
 800e2e0:	3728      	adds	r7, #40	@ 0x28
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b08c      	sub	sp, #48	@ 0x30
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	60f8      	str	r0, [r7, #12]
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	607a      	str	r2, [r7, #4]
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	33bc      	adds	r3, #188	@ 0xbc
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	61fa      	str	r2, [r7, #28]
 800e2fe:	68ba      	ldr	r2, [r7, #8]
 800e300:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800e302:	69fa      	ldr	r2, [r7, #28]
 800e304:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e306:	69b9      	ldr	r1, [r7, #24]
 800e308:	6179      	str	r1, [r7, #20]
 800e30a:	613a      	str	r2, [r7, #16]
        return i * scale;
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	6939      	ldr	r1, [r7, #16]
 800e310:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, yScale);
 800e314:	bf00      	nop
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e31e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e320:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e324:	6279      	str	r1, [r7, #36]	@ 0x24
 800e326:	623a      	str	r2, [r7, #32]
        return i * scale;
 800e328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e32a:	6a39      	ldr	r1, [r7, #32]
 800e32c:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800e330:	bf00      	nop
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800e332:	4601      	mov	r1, r0
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	4798      	blx	r3
    }
 800e338:	bf00      	nop
 800e33a:	3730      	adds	r7, #48	@ 0x30
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
    virtual void setGraphRangeY(float min, float max)
 800e340:	b580      	push	{r7, lr}
 800e342:	b08e      	sub	sp, #56	@ 0x38
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	ed87 0a02 	vstr	s0, [r7, #8]
 800e34c:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	33bc      	adds	r3, #188	@ 0xbc
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	623a      	str	r2, [r7, #32]
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledY(float f) const
    {
        return float2scaled(f, yScale);
 800e360:	6a3a      	ldr	r2, [r7, #32]
 800e362:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e364:	69f9      	ldr	r1, [r7, #28]
 800e366:	61b9      	str	r1, [r7, #24]
 800e368:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	ee07 2a90 	vmov	s15, r2
 800e370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e374:	ed97 7a06 	vldr	s14, [r7, #24]
 800e378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e37c:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800e380:	edd7 7a04 	vldr	s15, [r7, #16]
 800e384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38c:	db0a      	blt.n	800e3a4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x64>
            return (int)(fs + 0.5f);
 800e38e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e392:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e39e:	ee17 0a90 	vmov	r0, s15
 800e3a2:	e019      	b.n	800e3d8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e3a4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3ac:	ee17 2a90 	vmov	r2, s15
 800e3b0:	3a01      	subs	r2, #1
 800e3b2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3be:	ed97 7a04 	vldr	s14, [r7, #16]
 800e3c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3c6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e3ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e3ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3d2:	ee17 1a90 	vmov	r1, s15
 800e3d6:	1850      	adds	r0, r2, r1
        return float2scaled(f, yScale);
 800e3d8:	bf00      	nop
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	637a      	str	r2, [r7, #52]	@ 0x34
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	633a      	str	r2, [r7, #48]	@ 0x30
 800e3e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e3e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e3e8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800e3ea:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800e3ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3ee:	ee07 2a90 	vmov	s15, r2
 800e3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800e402:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	db0a      	blt.n	800e426 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0xe6>
            return (int)(fs + 0.5f);
 800e410:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e414:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e41c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e420:	ee17 2a90 	vmov	r2, s15
 800e424:	e019      	b.n	800e45a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e426:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e42a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e42e:	ee17 2a90 	vmov	r2, s15
 800e432:	3a01      	subs	r2, #1
 800e434:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e43c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e440:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800e444:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e448:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e44c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e454:	ee17 1a90 	vmov	r1, s15
 800e458:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800e45a:	bf00      	nop
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800e45c:	4601      	mov	r1, r0
 800e45e:	68f8      	ldr	r0, [r7, #12]
 800e460:	4798      	blx	r3
    }
 800e462:	bf00      	nop
 800e464:	3738      	adds	r7, #56	@ 0x38
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b088      	sub	sp, #32
 800e46e:	af00      	add	r7, sp, #0
 800e470:	60f8      	str	r0, [r7, #12]
 800e472:	460b      	mov	r3, r1
 800e474:	607a      	str	r2, [r7, #4]
 800e476:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	33c0      	adds	r3, #192	@ 0xc0
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	61fa      	str	r2, [r7, #28]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800e488:	69fa      	ldr	r2, [r7, #28]
 800e48a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e48c:	69b9      	ldr	r1, [r7, #24]
 800e48e:	6179      	str	r1, [r7, #20]
 800e490:	613a      	str	r2, [r7, #16]
        return i * scale;
 800e492:	697a      	ldr	r2, [r7, #20]
 800e494:	6939      	ldr	r1, [r7, #16]
 800e496:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800e49a:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800e49c:	7af9      	ldrb	r1, [r7, #11]
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	4798      	blx	r3
    }
 800e4a2:	bf00      	nop
 800e4a4:	3720      	adds	r7, #32
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b08a      	sub	sp, #40	@ 0x28
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	60f8      	str	r0, [r7, #12]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	ed87 0a01 	vstr	s0, [r7, #4]
 800e4b8:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	33c0      	adds	r3, #192	@ 0xc0
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	623a      	str	r2, [r7, #32]
        return float2scaled(f, yScale);
 800e4ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e4ce:	6a39      	ldr	r1, [r7, #32]
 800e4d0:	61f9      	str	r1, [r7, #28]
 800e4d2:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800e4d4:	69ba      	ldr	r2, [r7, #24]
 800e4d6:	ee07 2a90 	vmov	s15, r2
 800e4da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4de:	ed97 7a07 	vldr	s14, [r7, #28]
 800e4e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4e6:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800e4ea:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f6:	db0a      	blt.n	800e50e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800e4f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e500:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e508:	ee17 2a90 	vmov	r2, s15
 800e50c:	e019      	b.n	800e542 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800e50e:	edd7 7a05 	vldr	s15, [r7, #20]
 800e512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e516:	ee17 2a90 	vmov	r2, s15
 800e51a:	3a01      	subs	r2, #1
 800e51c:	edd7 7a05 	vldr	s15, [r7, #20]
 800e520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e528:	ed97 7a05 	vldr	s14, [r7, #20]
 800e52c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e530:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e534:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e53c:	ee17 1a90 	vmov	r1, s15
 800e540:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800e542:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800e544:	7af9      	ldrb	r1, [r7, #11]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	4798      	blx	r3
    }
 800e54a:	bf00      	nop
 800e54c:	3728      	adds	r7, #40	@ 0x28
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
    virtual int getGraphRangeXMinAsInt() const
 800e552:	b480      	push	{r7}
 800e554:	b087      	sub	sp, #28
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMinX);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	617a      	str	r2, [r7, #20]
 800e564:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	60fa      	str	r2, [r7, #12]
 800e56e:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	db0a      	blt.n	800e58c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	005a      	lsls	r2, r3, #1
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	441a      	add	r2, r3
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	fb92 f3f3 	sdiv	r3, r2, r3
 800e584:	0fda      	lsrs	r2, r3, #31
 800e586:	4413      	add	r3, r2
 800e588:	105b      	asrs	r3, r3, #1
 800e58a:	e00f      	b.n	800e5ac <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	4613      	mov	r3, r2
 800e590:	07db      	lsls	r3, r3, #31
 800e592:	1a9b      	subs	r3, r3, r2
 800e594:	005b      	lsls	r3, r3, #1
 800e596:	461a      	mov	r2, r3
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	4413      	add	r3, r2
 800e59c:	1e5a      	subs	r2, r3, #1
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	fb92 f3f3 	sdiv	r3, r2, r3
 800e5a4:	0fda      	lsrs	r2, r3, #31
 800e5a6:	4413      	add	r3, r2
 800e5a8:	105b      	asrs	r3, r3, #1
 800e5aa:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e5ac:	bf00      	nop
    }
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	371c      	adds	r7, #28
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
    virtual float getGraphRangeXMinAsFloat() const
 800e5ba:	b480      	push	{r7}
 800e5bc:	b087      	sub	sp, #28
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMinX);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	617a      	str	r2, [r7, #20]
 800e5cc:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatX(int i) const
    {
        return scaled2float(i, xScale);
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	60fa      	str	r2, [r7, #12]
 800e5d6:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	ee07 3a90 	vmov	s15, r3
 800e5de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	ee07 3a90 	vmov	s15, r3
 800e5e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800e5f0:	bf00      	nop
        return scaled2floatX(graphRangeMinX);
 800e5f2:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e5f6:	eeb0 0a67 	vmov.f32	s0, s15
 800e5fa:	371c      	adds	r7, #28
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    virtual int getGraphRangeXMinScaled() const
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
        return graphRangeMinX;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
    }
 800e612:	4618      	mov	r0, r3
 800e614:	370c      	adds	r7, #12
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr

0800e61e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
    virtual int getGraphRangeXMaxAsInt() const
 800e61e:	b480      	push	{r7}
 800e620:	b087      	sub	sp, #28
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMaxX);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	617a      	str	r2, [r7, #20]
 800e630:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e636:	693a      	ldr	r2, [r7, #16]
 800e638:	60fa      	str	r2, [r7, #12]
 800e63a:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	db0a      	blt.n	800e658 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	005a      	lsls	r2, r3, #1
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	441a      	add	r2, r3
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	fb92 f3f3 	sdiv	r3, r2, r3
 800e650:	0fda      	lsrs	r2, r3, #31
 800e652:	4413      	add	r3, r2
 800e654:	105b      	asrs	r3, r3, #1
 800e656:	e00f      	b.n	800e678 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	4613      	mov	r3, r2
 800e65c:	07db      	lsls	r3, r3, #31
 800e65e:	1a9b      	subs	r3, r3, r2
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	461a      	mov	r2, r3
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	4413      	add	r3, r2
 800e668:	1e5a      	subs	r2, r3, #1
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	fb92 f3f3 	sdiv	r3, r2, r3
 800e670:	0fda      	lsrs	r2, r3, #31
 800e672:	4413      	add	r3, r2
 800e674:	105b      	asrs	r3, r3, #1
 800e676:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800e678:	bf00      	nop
    }
 800e67a:	4618      	mov	r0, r3
 800e67c:	371c      	adds	r7, #28
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
    virtual float getGraphRangeXMaxAsFloat() const
 800e686:	b480      	push	{r7}
 800e688:	b087      	sub	sp, #28
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMaxX);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	617a      	str	r2, [r7, #20]
 800e698:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e69e:	693a      	ldr	r2, [r7, #16]
 800e6a0:	60fa      	str	r2, [r7, #12]
 800e6a2:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	ee07 3a90 	vmov	s15, r3
 800e6aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	ee07 3a90 	vmov	s15, r3
 800e6b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800e6bc:	bf00      	nop
        return scaled2floatX(graphRangeMaxX);
 800e6be:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e6c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e6c6:	371c      	adds	r7, #28
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    virtual int getGraphRangeXMaxScaled() const
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
        return graphRangeMaxX;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
    }
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
    virtual int getGraphRangeYMinAsInt() const
 800e6ea:	b480      	push	{r7}
 800e6ec:	b087      	sub	sp, #28
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMinY);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	617a      	str	r2, [r7, #20]
 800e6fc:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e702:	693a      	ldr	r2, [r7, #16]
 800e704:	60fa      	str	r2, [r7, #12]
 800e706:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	db0a      	blt.n	800e724 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	005a      	lsls	r2, r3, #1
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	441a      	add	r2, r3
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	fb92 f3f3 	sdiv	r3, r2, r3
 800e71c:	0fda      	lsrs	r2, r3, #31
 800e71e:	4413      	add	r3, r2
 800e720:	105b      	asrs	r3, r3, #1
 800e722:	e00f      	b.n	800e744 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	4613      	mov	r3, r2
 800e728:	07db      	lsls	r3, r3, #31
 800e72a:	1a9b      	subs	r3, r3, r2
 800e72c:	005b      	lsls	r3, r3, #1
 800e72e:	461a      	mov	r2, r3
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	4413      	add	r3, r2
 800e734:	1e5a      	subs	r2, r3, #1
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	fb92 f3f3 	sdiv	r3, r2, r3
 800e73c:	0fda      	lsrs	r2, r3, #31
 800e73e:	4413      	add	r3, r2
 800e740:	105b      	asrs	r3, r3, #1
 800e742:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800e744:	bf00      	nop
    }
 800e746:	4618      	mov	r0, r3
 800e748:	371c      	adds	r7, #28
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
    virtual float getGraphRangeYMinAsFloat() const
 800e752:	b480      	push	{r7}
 800e754:	b087      	sub	sp, #28
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMinY);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	617a      	str	r2, [r7, #20]
 800e764:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatY(int i) const
    {
        return scaled2float(i, yScale);
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	60fa      	str	r2, [r7, #12]
 800e76e:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	ee07 3a90 	vmov	s15, r3
 800e776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	ee07 3a90 	vmov	s15, r3
 800e780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e784:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800e788:	bf00      	nop
        return scaled2floatY(graphRangeMinY);
 800e78a:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e78e:	eeb0 0a67 	vmov.f32	s0, s15
 800e792:	371c      	adds	r7, #28
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    virtual int getGraphRangeYMinScaled() const
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
        return graphRangeMinY;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
    }
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	370c      	adds	r7, #12
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
    virtual int getGraphRangeYMaxAsInt() const
 800e7b6:	b480      	push	{r7}
 800e7b8:	b087      	sub	sp, #28
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMaxY);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	617a      	str	r2, [r7, #20]
 800e7c8:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	60fa      	str	r2, [r7, #12]
 800e7d2:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	db0a      	blt.n	800e7f0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	005a      	lsls	r2, r3, #1
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	441a      	add	r2, r3
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	fb92 f3f3 	sdiv	r3, r2, r3
 800e7e8:	0fda      	lsrs	r2, r3, #31
 800e7ea:	4413      	add	r3, r2
 800e7ec:	105b      	asrs	r3, r3, #1
 800e7ee:	e00f      	b.n	800e810 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	07db      	lsls	r3, r3, #31
 800e7f6:	1a9b      	subs	r3, r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	4413      	add	r3, r2
 800e800:	1e5a      	subs	r2, r3, #1
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	fb92 f3f3 	sdiv	r3, r2, r3
 800e808:	0fda      	lsrs	r2, r3, #31
 800e80a:	4413      	add	r3, r2
 800e80c:	105b      	asrs	r3, r3, #1
 800e80e:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800e810:	bf00      	nop
    }
 800e812:	4618      	mov	r0, r3
 800e814:	371c      	adds	r7, #28
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr

0800e81e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
    virtual float getGraphRangeYMaxAsFloat() const
 800e81e:	b480      	push	{r7}
 800e820:	b087      	sub	sp, #28
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMaxY);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	617a      	str	r2, [r7, #20]
 800e830:	613b      	str	r3, [r7, #16]
        return scaled2float(i, yScale);
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e836:	693a      	ldr	r2, [r7, #16]
 800e838:	60fa      	str	r2, [r7, #12]
 800e83a:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	ee07 3a90 	vmov	s15, r3
 800e842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	ee07 3a90 	vmov	s15, r3
 800e84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e850:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800e854:	bf00      	nop
        return scaled2floatY(graphRangeMaxY);
 800e856:	eef0 7a66 	vmov.f32	s15, s13
    }
 800e85a:	eeb0 0a67 	vmov.f32	s0, s15
 800e85e:	371c      	adds	r7, #28
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    virtual int getGraphRangeYMaxScaled() const
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
        return graphRangeMaxY;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
    }
 800e876:	4618      	mov	r0, r3
 800e878:	370c      	adds	r7, #12
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
     * @return The given data converted to a new scale.
     */
    static int convertToNewScale(int value, int oldScale, int newScale);

    /** Invalidate content. */
    virtual void invalidateContent() const
 800e882:	b580      	push	{r7, lr}
 800e884:	b082      	sub	sp, #8
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e890:	2b00      	cmp	r3, #0
 800e892:	d003      	beq.n	800e89c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x1a>
        {
            Container::invalidateContent();
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4618      	mov	r0, r3
 800e898:	f7fe fe10 	bl	800d4bc <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
     *
     * @param  x The x value.
     *
     * @return The screen x coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800e8a4:	b590      	push	{r4, r7, lr}
 800e8a6:	b089      	sub	sp, #36	@ 0x24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
    {
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	1ad4      	subs	r4, r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	3338      	adds	r3, #56	@ 0x38
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fe3a 	bl	800d53a <_ZNK8touchgfx8Drawable8getWidthEv>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800e8d0:	b299      	uxth	r1, r3
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	440b      	add	r3, r1
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	b21b      	sxth	r3, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800e8e4:	1e59      	subs	r1, r3, #1
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f7ff fb23 	bl	800df42 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	60fb      	str	r3, [r7, #12]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800e906:	83fb      	strh	r3, [r7, #30]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800e908:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e90c:	015a      	lsls	r2, r3, #5
 800e90e:	f107 0314 	add.w	r3, r7, #20
 800e912:	4611      	mov	r1, r2
 800e914:	4618      	mov	r0, r3
 800e916:	f7ff faa7 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	613b      	str	r3, [r7, #16]
 800e91e:	f107 0210 	add.w	r2, r7, #16
 800e922:	f107 030c 	add.w	r3, r7, #12
 800e926:	4611      	mov	r1, r2
 800e928:	4618      	mov	r0, r3
 800e92a:	f7ff fab8 	bl	800de9e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800e92e:	4603      	mov	r3, r0
    }
 800e930:	4618      	mov	r0, r3
 800e932:	3724      	adds	r7, #36	@ 0x24
 800e934:	46bd      	mov	sp, r7
 800e936:	bd90      	pop	{r4, r7, pc}

0800e938 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
     *
     * @param  y The y value.
     *
     * @return The screen y coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	617b      	str	r3, [r7, #20]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	3338      	adds	r3, #56	@ 0x38
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe fe02 	bl	800d554 <_ZNK8touchgfx8Drawable9getHeightEv>
 800e950:	4603      	mov	r3, r0
 800e952:	b29a      	uxth	r2, r3
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800e95a:	b299      	uxth	r1, r3
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800e962:	b29b      	uxth	r3, r3
 800e964:	440b      	add	r3, r1
 800e966:	b29b      	uxth	r3, r3
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	b21b      	sxth	r3, r3
    {
        const int16_t graphAreaHeight = getGraphAreaHeight();
 800e96e:	83fb      	strh	r3, [r7, #30]
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800e970:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	f9b2 2114 	ldrsh.w	r2, [r2, #276]	@ 0x114
 800e97a:	4413      	add	r3, r2
 800e97c:	3b01      	subs	r3, #1
 800e97e:	61bb      	str	r3, [r7, #24]
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	015a      	lsls	r2, r3, #5
 800e984:	f107 0310 	add.w	r3, r7, #16
 800e988:	4611      	mov	r1, r2
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7ff fa6c 	bl	800de68 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	60bb      	str	r3, [r7, #8]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	1ad0      	subs	r0, r2, r3
 800e99e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e9a2:	1e59      	subs	r1, r3, #1
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	f7ff fac5 	bl	800df42 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	60fb      	str	r3, [r7, #12]
 800e9bc:	f107 020c 	add.w	r2, r7, #12
 800e9c0:	f107 0308 	add.w	r3, r7, #8
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff fa7e 	bl	800dec8 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800e9cc:	4603      	mov	r3, r0
    }
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3720      	adds	r7, #32
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
	...

0800e9d8 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	4a05      	ldr	r2, [pc, #20]	@ (800e9f8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	601a      	str	r2, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe fd47 	bl	800d47c <_ZN8touchgfx8DrawableD1Ev>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	08032cc4 	.word	0x08032cc4

0800e9fc <_ZN8touchgfx9ContainerD0Ev>:
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7ff ffe7 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800ea0a:	212c      	movs	r1, #44	@ 0x2c
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f020 ff96 	bl	802f93e <_ZdlPvj>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <_ZN8touchgfx17AbstractDataGraphD1Ev>:
class AbstractDataGraph : public Container
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	4a12      	ldr	r2, [pc, #72]	@ (800ea70 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	601a      	str	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	33e8      	adds	r3, #232	@ 0xe8
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7ff ffd2 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	33bc      	adds	r3, #188	@ 0xbc
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff ffcd 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	3390      	adds	r3, #144	@ 0x90
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff ffc8 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	3364      	adds	r3, #100	@ 0x64
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7ff ffc3 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3338      	adds	r3, #56	@ 0x38
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7ff ffbe 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7ff ffba 	bl	800e9d8 <_ZN8touchgfx9ContainerD1Ev>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4618      	mov	r0, r3
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	080330f4 	.word	0x080330f4

0800ea74 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff ffcd 	bl	800ea1c <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800ea82:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f020 ff59 	bl	802f93e <_ZdlPvj>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
	...

0800ea98 <_ZN8touchgfx16DynamicDataGraphC1EsPi>:
     * Initializes a new instance of the AbstractDataGraphWithY class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Address where to store the y values of the graph.
     */
    DynamicDataGraph(int16_t capacity, int* values)
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	607a      	str	r2, [r7, #4]
 800eaa4:	817b      	strh	r3, [r7, #10]
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f00b fa64 	bl	8019f7c <_ZN8touchgfx17AbstractDataGraphC1Es>
 800eab4:	4a0f      	ldr	r2, [pc, #60]	@ (800eaf4 <_ZN8touchgfx16DynamicDataGraphC1EsPi+0x5c>)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    {
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800eae0:	3b01      	subs	r3, #1
 800eae2:	461a      	mov	r2, r3
 800eae4:	2100      	movs	r1, #0
 800eae6:	f7ff fac8 	bl	800e07a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    }
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	4618      	mov	r0, r3
 800eaee:	3710      	adds	r7, #16
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	08032f5c 	.word	0x08032f5c

0800eaf8 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @see getScale
     *
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	4613      	mov	r3, r2
 800eb04:	71fb      	strb	r3, [r7, #7]
    {
        setScaleX(scale, updateData);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3388      	adds	r3, #136	@ 0x88
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	79fa      	ldrb	r2, [r7, #7]
 800eb10:	68b9      	ldr	r1, [r7, #8]
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	4798      	blx	r3
        setScaleY(scale, updateData);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	3390      	adds	r3, #144	@ 0x90
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	79fa      	ldrb	r2, [r7, #7]
 800eb20:	68b9      	ldr	r1, [r7, #8]
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	4798      	blx	r3
    }
 800eb26:	bf00      	nop
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @return The scaling factor.
     *
     * @see setScale
     */
    virtual int getScale() const
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	b082      	sub	sp, #8
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
    {
        return getScaleY();
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3394      	adds	r3, #148	@ 0x94
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	4798      	blx	r3
 800eb42:	4603      	mov	r3, r0
    }
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
    /**
     * Gets the minimum x coordinate for the graph.
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMinScaled();
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	33d4      	adds	r3, #212	@ 0xd4
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4610      	mov	r0, r2
 800eb60:	4798      	blx	r3
 800eb62:	4603      	mov	r3, r0
    }
 800eb64:	4618      	mov	r0, r3
 800eb66:	3708      	adds	r7, #8
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
    /**
     * Gets the maximum x coordinate for the graph.
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMaxScaled();
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	33e0      	adds	r3, #224	@ 0xe0
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4610      	mov	r0, r2
 800eb80:	4798      	blx	r3
 800eb82:	4603      	mov	r3, r0
    }
 800eb84:	4618      	mov	r0, r3
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800eb8c:	b5b0      	push	{r4, r5, r7, lr}
 800eb8e:	b08c      	sub	sp, #48	@ 0x30
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	460b      	mov	r3, r1
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	72fb      	strb	r3, [r7, #11]
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	33a4      	adds	r3, #164	@ 0xa4
 800eba2:	681c      	ldr	r4, [r3, #0]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	61fb      	str	r3, [r7, #28]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	617a      	str	r2, [r7, #20]
 800ebb4:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	db0a      	blt.n	800ebd2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	005a      	lsls	r2, r3, #1
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	441a      	add	r2, r3
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebca:	0fda      	lsrs	r2, r3, #31
 800ebcc:	4413      	add	r3, r2
 800ebce:	105b      	asrs	r3, r3, #1
 800ebd0:	e00f      	b.n	800ebf2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x66>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	07db      	lsls	r3, r3, #31
 800ebd8:	1a9b      	subs	r3, r3, r2
 800ebda:	005b      	lsls	r3, r3, #1
 800ebdc:	461a      	mov	r2, r3
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	1e5a      	subs	r2, r3, #1
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebea:	0fda      	lsrs	r2, r3, #31
 800ebec:	4413      	add	r3, r2
 800ebee:	105b      	asrs	r3, r3, #1
 800ebf0:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800ebf2:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800ebf4:	425d      	negs	r5, r3
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800ebfc:	1e59      	subs	r1, r3, #1
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	62bb      	str	r3, [r7, #40]	@ 0x28
        return scaled2int(i, xScale);
 800ec06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec0c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ec0e:	623b      	str	r3, [r7, #32]
        if (i >= 0)
 800ec10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	db0a      	blt.n	800ec2c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa0>
            return ((i * 2 + scale) / scale) / 2;
 800ec16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec18:	005a      	lsls	r2, r3, #1
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	441a      	add	r2, r3
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	fb92 f3f3 	sdiv	r3, r2, r3
 800ec24:	0fda      	lsrs	r2, r3, #31
 800ec26:	4413      	add	r3, r2
 800ec28:	105b      	asrs	r3, r3, #1
 800ec2a:	e00f      	b.n	800ec4c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc0>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800ec2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec2e:	4613      	mov	r3, r2
 800ec30:	07db      	lsls	r3, r3, #31
 800ec32:	1a9b      	subs	r3, r3, r2
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	461a      	mov	r2, r3
 800ec38:	6a3b      	ldr	r3, [r7, #32]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	1e5a      	subs	r2, r3, #1
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	fb92 f3f3 	sdiv	r3, r2, r3
 800ec44:	0fda      	lsrs	r2, r3, #31
 800ec46:	4413      	add	r3, r2
 800ec48:	105b      	asrs	r3, r3, #1
 800ec4a:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800ec4c:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800ec4e:	440b      	add	r3, r1
 800ec50:	461a      	mov	r2, r3
 800ec52:	4629      	mov	r1, r5
 800ec54:	47a0      	blx	r4
    }
 800ec56:	bf00      	nop
 800ec58:	3730      	adds	r7, #48	@ 0x30
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ec5e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b082      	sub	sp, #8
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactor(scale);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	4798      	blx	r3
    }
 800ec78:	bf00      	nop
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
     * Set x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(int2scaledX(factor));
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	617a      	str	r2, [r7, #20]
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800eca0:	6939      	ldr	r1, [r7, #16]
 800eca2:	60f9      	str	r1, [r7, #12]
 800eca4:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	68b9      	ldr	r1, [r7, #8]
 800ecaa:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800ecae:	bf00      	nop
        setXAxisFactorScaled(int2scaledX(factor));
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	4798      	blx	r3
    }
 800ecb6:	bf00      	nop
 800ecb8:	3718      	adds	r7, #24
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
 800ecc6:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactor(scale);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	ed97 0a00 	vldr	s0, [r7]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	4798      	blx	r3
    }
 800ecdc:	bf00      	nop
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:

    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactorScaled(float2scaledX(factor));
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	61fa      	str	r2, [r7, #28]
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800ed02:	69fa      	ldr	r2, [r7, #28]
 800ed04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ed06:	69b9      	ldr	r1, [r7, #24]
 800ed08:	6179      	str	r1, [r7, #20]
 800ed0a:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	ee07 2a90 	vmov	s15, r2
 800ed12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed16:	ed97 7a05 	vldr	s14, [r7, #20]
 800ed1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed1e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800ed22:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2e:	db0a      	blt.n	800ed46 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
            return (int)(fs + 0.5f);
 800ed30:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed34:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ed38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed40:	ee17 2a90 	vmov	r2, s15
 800ed44:	e019      	b.n	800ed7a <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800ed46:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed4e:	ee17 2a90 	vmov	r2, s15
 800ed52:	3a01      	subs	r2, #1
 800ed54:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed60:	ed97 7a03 	vldr	s14, [r7, #12]
 800ed64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed68:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800ed6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed74:	ee17 1a90 	vmov	r1, s15
 800ed78:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800ed7a:	bf00      	nop
        setXAxisFactorScaled(float2scaledX(factor));
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	4798      	blx	r3
    }
 800ed82:	bf00      	nop
 800ed84:	3720      	adds	r7, #32
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @param  factor The x axis factor.
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	6039      	str	r1, [r7, #0]
    {
        xAxisFactor = factor;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    }
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsInt();
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	4798      	blx	r3
 800edbe:	4603      	mov	r3, r0
    }
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     * Get x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
 800edc8:	b590      	push	{r4, r7, lr}
 800edca:	b087      	sub	sp, #28
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisFactorScaled());
 800edd0:	687c      	ldr	r4, [r7, #4]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	4798      	blx	r3
 800ede0:	4603      	mov	r3, r0
 800ede2:	617c      	str	r4, [r7, #20]
 800ede4:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edea:	693a      	ldr	r2, [r7, #16]
 800edec:	60fa      	str	r2, [r7, #12]
 800edee:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	db0a      	blt.n	800ee0c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	005a      	lsls	r2, r3, #1
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	441a      	add	r2, r3
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	fb92 f3f3 	sdiv	r3, r2, r3
 800ee04:	0fda      	lsrs	r2, r3, #31
 800ee06:	4413      	add	r3, r2
 800ee08:	105b      	asrs	r3, r3, #1
 800ee0a:	e00f      	b.n	800ee2c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	4613      	mov	r3, r2
 800ee10:	07db      	lsls	r3, r3, #31
 800ee12:	1a9b      	subs	r3, r3, r2
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	461a      	mov	r2, r3
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	1e5a      	subs	r2, r3, #1
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	fb92 f3f3 	sdiv	r3, r2, r3
 800ee24:	0fda      	lsrs	r2, r3, #31
 800ee26:	4413      	add	r3, r2
 800ee28:	105b      	asrs	r3, r3, #1
 800ee2a:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800ee2c:	bf00      	nop
    }
 800ee2e:	4618      	mov	r0, r3
 800ee30:	371c      	adds	r7, #28
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd90      	pop	{r4, r7, pc}

0800ee36 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsFloat();
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	4798      	blx	r3
 800ee4c:	eef0 7a40 	vmov.f32	s15, s0
    }
 800ee50:	eeb0 0a67 	vmov.f32	s0, s15
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:

    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
 800ee5a:	b590      	push	{r4, r7, lr}
 800ee5c:	b087      	sub	sp, #28
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisFactorScaled());
 800ee62:	687c      	ldr	r4, [r7, #4]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	4798      	blx	r3
 800ee72:	4603      	mov	r3, r0
 800ee74:	617c      	str	r4, [r7, #20]
 800ee76:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee7c:	693a      	ldr	r2, [r7, #16]
 800ee7e:	60fa      	str	r2, [r7, #12]
 800ee80:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	ee07 3a90 	vmov	s15, r3
 800ee88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	ee07 3a90 	vmov	s15, r3
 800ee92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee96:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800ee9a:	bf00      	nop
        return scaled2floatX(getXAxisFactorScaled());
 800ee9c:	eef0 7a66 	vmov.f32	s15, s13
    }
 800eea0:	eeb0 0a67 	vmov.f32	s0, s15
 800eea4:	371c      	adds	r7, #28
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd90      	pop	{r4, r7, pc}

0800eeaa <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     *
     * @return The x axis factor (scaled).
     *
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
 800eeaa:	b480      	push	{r7}
 800eeac:	b083      	sub	sp, #12
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
    {
        return xAxisFactor;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
    }
 800eeb8:	4618      	mov	r0, r3
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
     * Set x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b086      	sub	sp, #24
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	617a      	str	r2, [r7, #20]
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800eee0:	697a      	ldr	r2, [r7, #20]
 800eee2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800eee4:	6939      	ldr	r1, [r7, #16]
 800eee6:	60f9      	str	r1, [r7, #12]
 800eee8:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	68b9      	ldr	r1, [r7, #8]
 800eeee:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800eef2:	bf00      	nop
        setXAxisOffsetScaled(int2scaledX(offset));
 800eef4:	4611      	mov	r1, r2
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	4798      	blx	r3
    }
 800eefa:	bf00      	nop
 800eefc:	3718      	adds	r7, #24
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b088      	sub	sp, #32
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	61fa      	str	r2, [r7, #28]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800ef20:	69fa      	ldr	r2, [r7, #28]
 800ef22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ef24:	69b9      	ldr	r1, [r7, #24]
 800ef26:	6179      	str	r1, [r7, #20]
 800ef28:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800ef2a:	693a      	ldr	r2, [r7, #16]
 800ef2c:	ee07 2a90 	vmov	s15, r2
 800ef30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef34:	ed97 7a05 	vldr	s14, [r7, #20]
 800ef38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef3c:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800ef40:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ef48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef4c:	db0a      	blt.n	800ef64 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
            return (int)(fs + 0.5f);
 800ef4e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ef56:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef5e:	ee17 2a90 	vmov	r2, s15
 800ef62:	e019      	b.n	800ef98 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800ef64:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef6c:	ee17 2a90 	vmov	r2, s15
 800ef70:	3a01      	subs	r2, #1
 800ef72:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef7e:	ed97 7a03 	vldr	s14, [r7, #12]
 800ef82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef86:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800ef8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef92:	ee17 1a90 	vmov	r1, s15
 800ef96:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800ef98:	bf00      	nop
        setXAxisOffsetScaled(float2scaledX(offset));
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	4798      	blx	r3
    }
 800efa0:	bf00      	nop
 800efa2:	3720      	adds	r7, #32
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
    {
        xAxisOffset = offset;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	683a      	ldr	r2, [r7, #0]
 800efb6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    }
 800efba:	bf00      	nop
 800efbc:	370c      	adds	r7, #12
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr

0800efc6 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     * Get x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
 800efc6:	b590      	push	{r4, r7, lr}
 800efc8:	b087      	sub	sp, #28
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisOffsetScaled());
 800efce:	687c      	ldr	r4, [r7, #4]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	4798      	blx	r3
 800efde:	4603      	mov	r3, r0
 800efe0:	617c      	str	r4, [r7, #20]
 800efe2:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	60fa      	str	r2, [r7, #12]
 800efec:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	db0a      	blt.n	800f00a <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	005a      	lsls	r2, r3, #1
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	441a      	add	r2, r3
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	fb92 f3f3 	sdiv	r3, r2, r3
 800f002:	0fda      	lsrs	r2, r3, #31
 800f004:	4413      	add	r3, r2
 800f006:	105b      	asrs	r3, r3, #1
 800f008:	e00f      	b.n	800f02a <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	4613      	mov	r3, r2
 800f00e:	07db      	lsls	r3, r3, #31
 800f010:	1a9b      	subs	r3, r3, r2
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	461a      	mov	r2, r3
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	4413      	add	r3, r2
 800f01a:	1e5a      	subs	r2, r3, #1
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	fb92 f3f3 	sdiv	r3, r2, r3
 800f022:	0fda      	lsrs	r2, r3, #31
 800f024:	4413      	add	r3, r2
 800f026:	105b      	asrs	r3, r3, #1
 800f028:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800f02a:	bf00      	nop
    }
 800f02c:	4618      	mov	r0, r3
 800f02e:	371c      	adds	r7, #28
 800f030:	46bd      	mov	sp, r7
 800f032:	bd90      	pop	{r4, r7, pc}

0800f034 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
 800f034:	b590      	push	{r4, r7, lr}
 800f036:	b087      	sub	sp, #28
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800f03c:	687c      	ldr	r4, [r7, #4]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	4798      	blx	r3
 800f04c:	4603      	mov	r3, r0
 800f04e:	617c      	str	r4, [r7, #20]
 800f050:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f056:	693a      	ldr	r2, [r7, #16]
 800f058:	60fa      	str	r2, [r7, #12]
 800f05a:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	ee07 3a90 	vmov	s15, r3
 800f062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	ee07 3a90 	vmov	s15, r3
 800f06c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f070:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800f074:	bf00      	nop
        return scaled2floatX(getXAxisOffsetScaled());
 800f076:	eef0 7a66 	vmov.f32	s15, s13
    }
 800f07a:	eeb0 0a67 	vmov.f32	s0, s15
 800f07e:	371c      	adds	r7, #28
 800f080:	46bd      	mov	sp, r7
 800f082:	bd90      	pop	{r4, r7, pc}

0800f084 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     *
     * @return The x axis offset (scaled).
     *
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
    {
        return xAxisOffset;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    }
 800f092:	4618      	mov	r0, r3
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
	...

0800f0a0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:

    virtual int indexToDataPointXScaled(int16_t index) const
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800f0ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	db06      	blt.n	800f0c2 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800f0ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	db06      	blt.n	800f0d0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>
 800f0c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f100 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x60>)
 800f0c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f104 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x64>)
 800f0c6:	f240 6133 	movw	r1, #1587	@ 0x633
 800f0ca:	480f      	ldr	r0, [pc, #60]	@ (800f108 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x68>)
 800f0cc:	f020 fc64 	bl	802f998 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f0de:	4611      	mov	r1, r2
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	4798      	blx	r3
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800f0ec:	fb03 f202 	mul.w	r2, r3, r2
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f0f6:	4413      	add	r3, r2
    }
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	08030f08 	.word	0x08030f08
 800f104:	08030f2c 	.word	0x08030f2c
 800f108:	08030f7c 	.word	0x08030f7c

0800f10c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:

    virtual int indexToDataPointYScaled(int16_t index) const
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	460b      	mov	r3, r1
 800f116:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800f118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	db06      	blt.n	800f12e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x22>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800f126:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	db06      	blt.n	800f13c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>
 800f12e:	4b0e      	ldr	r3, [pc, #56]	@ (800f168 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x5c>)
 800f130:	4a0e      	ldr	r2, [pc, #56]	@ (800f16c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x60>)
 800f132:	f240 6139 	movw	r1, #1593	@ 0x639
 800f136:	480e      	ldr	r0, [pc, #56]	@ (800f170 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x64>)
 800f138:	f020 fc2e 	bl	802f998 <__assert_func>
        return yValues[dataIndex(index)];
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 4144 	ldr.w	r4, [r3, #324]	@ 0x144
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f150:	4611      	mov	r1, r2
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	4798      	blx	r3
 800f156:	4603      	mov	r3, r0
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4423      	add	r3, r4
 800f15c:	681b      	ldr	r3, [r3, #0]
    }
 800f15e:	4618      	mov	r0, r3
 800f160:	370c      	adds	r7, #12
 800f162:	46bd      	mov	sp, r7
 800f164:	bd90      	pop	{r4, r7, pc}
 800f166:	bf00      	nop
 800f168:	08030f08 	.word	0x08030f08
 800f16c:	08030fd8 	.word	0x08030fd8
 800f170:	08030f7c 	.word	0x08030f7c

0800f174 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     *
     * @param  screenIndex Zero-based screen index.
     *
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	460b      	mov	r3, r1
 800f17e:	807b      	strh	r3, [r7, #2]
    {
        return screenIndex;
 800f180:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 800f184:	4618      	mov	r0, r3
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (int32_t)index;
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 800f190:	b590      	push	{r4, r7, lr}
 800f192:	b089      	sub	sp, #36	@ 0x24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800f1a4:	681c      	ldr	r4, [r3, #0]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	61fb      	str	r3, [r7, #28]
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1b2:	69ba      	ldr	r2, [r7, #24]
 800f1b4:	617a      	str	r2, [r7, #20]
 800f1b6:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	db0a      	blt.n	800f1d4 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	005a      	lsls	r2, r3, #1
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	441a      	add	r2, r3
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1cc:	0fda      	lsrs	r2, r3, #31
 800f1ce:	4413      	add	r3, r2
 800f1d0:	105b      	asrs	r3, r3, #1
 800f1d2:	e00f      	b.n	800f1f4 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800f1d4:	697a      	ldr	r2, [r7, #20]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	07db      	lsls	r3, r3, #31
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	461a      	mov	r2, r3
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	1e5a      	subs	r2, r3, #1
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1ec:	0fda      	lsrs	r2, r3, #31
 800f1ee:	4413      	add	r3, r2
 800f1f0:	105b      	asrs	r3, r3, #1
 800f1f2:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800f1f4:	bf00      	nop
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800f1f6:	b21b      	sxth	r3, r3
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	47a0      	blx	r4
 800f1fe:	4602      	mov	r2, r0
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800f206:	fb03 f202 	mul.w	r2, r3, r2
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f210:	4413      	add	r3, r2
    }
 800f212:	4618      	mov	r0, r3
 800f214:	3724      	adds	r7, #36	@ 0x24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd90      	pop	{r4, r7, pc}

0800f21a <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b082      	sub	sp, #8
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleX();
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4618      	mov	r0, r3
 800f226:	f7fe ff00 	bl	800e02a <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>
 800f22a:	4603      	mov	r3, r0
    }
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:

    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleY();
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fe feff 	bl	800e042 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>
 800f244:	4603      	mov	r3, r0
    }
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
 800f24e:	b580      	push	{r7, lr}
 800f250:	b082      	sub	sp, #8
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(scale);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	4798      	blx	r3
    }
 800f268:	bf00      	nop
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:

    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorScaled();
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	4798      	blx	r3
 800f286:	4603      	mov	r3, r0
    }
 800f288:	4618      	mov	r0, r3
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenXQ5(int2scaledX(index));
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	6879      	ldr	r1, [r7, #4]
 800f2aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f2ae:	6179      	str	r1, [r7, #20]
 800f2b0:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800f2b2:	697a      	ldr	r2, [r7, #20]
 800f2b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f2b6:	6939      	ldr	r1, [r7, #16]
 800f2b8:	60f9      	str	r1, [r7, #12]
 800f2ba:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800f2bc:	68fa      	ldr	r2, [r7, #12]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800f2c4:	bf00      	nop
        return valueToScreenXQ5(int2scaledX(index));
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	4798      	blx	r3
 800f2ca:	4603      	mov	r3, r0
    }
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3718      	adds	r7, #24
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 800f2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800f2e0:	687e      	ldr	r6, [r7, #4]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800f2ea:	681c      	ldr	r4, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f300:	4611      	mov	r1, r2
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	4798      	blx	r3
 800f306:	4603      	mov	r3, r0
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	442b      	add	r3, r5
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4619      	mov	r1, r3
 800f310:	4630      	mov	r0, r6
 800f312:	47a0      	blx	r4
 800f314:	4603      	mov	r3, r0
    }
 800f316:	4618      	mov	r0, r3
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f320 <_ZN8touchgfx16DynamicDataGraphD1Ev>:
class DynamicDataGraph : public AbstractDataGraph
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	4a05      	ldr	r2, [pc, #20]	@ (800f340 <_ZN8touchgfx16DynamicDataGraphD1Ev+0x20>)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	f7ff fb73 	bl	800ea1c <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	08032f5c 	.word	0x08032f5c

0800f344 <_ZN8touchgfx16DynamicDataGraphD0Ev>:
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7ff ffe7 	bl	800f320 <_ZN8touchgfx16DynamicDataGraphD1Ev>
 800f352:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f020 faf1 	bl	802f93e <_ZdlPvj>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4618      	mov	r0, r3
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
	...

0800f368 <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi>:
     * Initializes a new instance of the GraphWrapAndOverwriteData class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Pointer to memory with room for capacity elements of type T.
     */
    GraphWrapAndOverwriteData(int16_t capacity, int* values)
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	460b      	mov	r3, r1
 800f372:	607a      	str	r2, [r7, #4]
 800f374:	817b      	strh	r3, [r7, #10]
        : DynamicDataGraph(capacity, values), current(0)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fb8a 	bl	800ea98 <_ZN8touchgfx16DynamicDataGraphC1EsPi>
 800f384:	4a05      	ldr	r2, [pc, #20]	@ (800f39c <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi+0x34>)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
    {
    }
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	080333e0 	.word	0x080333e0

0800f3a0 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800f3b0:	bf00      	nop
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	78fa      	ldrb	r2, [r7, #3]
 800f3cc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800f3f6:	b590      	push	{r4, r7, lr}
 800f3f8:	b085      	sub	sp, #20
 800f3fa:	af02      	add	r7, sp, #8
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe f899 	bl	800d53a <_ZNK8touchgfx8Drawable8getWidthEv>
 800f408:	4603      	mov	r3, r0
 800f40a:	461c      	mov	r4, r3
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fe f8a0 	bl	800d554 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f414:	4603      	mov	r3, r0
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	4623      	mov	r3, r4
 800f41a:	2200      	movs	r2, #0
 800f41c:	2100      	movs	r1, #0
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7fd ffdc 	bl	800d3dc <_ZN8touchgfx4RectC1Essss>
    }
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd90      	pop	{r4, r7, pc}

0800f42c <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7fd ffb9 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
    }
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	4a05      	ldr	r2, [pc, #20]	@ (800f464 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	601a      	str	r2, [r3, #0]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4618      	mov	r0, r3
 800f456:	f7fe fa53 	bl	800d900 <_ZN8touchgfx6WidgetD1Ev>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	3708      	adds	r7, #8
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	08032ee4 	.word	0x08032ee4

0800f468 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff ffe7 	bl	800f444 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f476:	212c      	movs	r1, #44	@ 0x2c
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f020 fa60 	bl	802f93e <_ZdlPvj>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4618      	mov	r0, r3
 800f482:	3708      	adds	r7, #8
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 */
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
        : CanvasWidget()
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4618      	mov	r0, r3
 800f494:	f00a f9ee 	bl	8019874 <_ZN8touchgfx12CanvasWidgetC1Ev>
 800f498:	4a03      	ldr	r2, [pc, #12]	@ (800f4a8 <_ZN8touchgfx20AbstractGraphElementC1Ev+0x20>)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]
    {
    }
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	0803260c 	.word	0x0803260c

0800f4ac <_ZN8touchgfx20AbstractGraphElementD1Ev>:
class AbstractGraphElement : public CanvasWidget
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	4a05      	ldr	r2, [pc, #20]	@ (800f4cc <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	601a      	str	r2, [r3, #0]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff ffc1 	bl	800f444 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	0803260c 	.word	0x0803260c

0800f4d0 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ffe7 	bl	800f4ac <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800f4de:	212c      	movs	r1, #44	@ 0x2c
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f020 fa2c 	bl	802f93e <_ZdlPvj>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 * not use CWR (Canvas Widget Renderer).
 */
class AbstractGraphElementNoCWR : public AbstractGraphElement
{
public:
    AbstractGraphElementNoCWR()
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
        : color(0)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff ffc4 	bl	800f488 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800f500:	4a06      	ldr	r2, [pc, #24]	@ (800f51c <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x2c>)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	332c      	adds	r3, #44	@ 0x2c
 800f50a:	2100      	movs	r1, #0
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fd ff33 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4618      	mov	r0, r3
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	08032584 	.word	0x08032584

0800f520 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @param  newColor The new color.
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	683a      	ldr	r2, [r7, #0]
 800f52e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 800f530:	bf00      	nop
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     *
     * @return The color.
     *
     * @see setColor
     */
    virtual colortype getColor() const
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
    {
        return color;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
 800f548:	4618      	mov	r0, r3
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
    {
        return true;
 800f55e:	2301      	movs	r3, #1
    }
 800f560:	4618      	mov	r0, r3
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
     * @param [in,out] r The rectangle.
     */
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
    {
    }
 800f576:	bf00      	nop
 800f578:	370c      	adds	r7, #12
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
	...

0800f584 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>:
class AbstractGraphElementNoCWR : public AbstractGraphElement
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	4a05      	ldr	r2, [pc, #20]	@ (800f5a4 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev+0x20>)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff ff89 	bl	800f4ac <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08032584 	.word	0x08032584

0800f5a8 <_ZN8touchgfx25AbstractGraphElementNoCWRD0Ev>:
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff ffe7 	bl	800f584 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800f5b6:	2130      	movs	r1, #48	@ 0x30
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f020 f9c0 	bl	802f93e <_ZdlPvj>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
 */
class GraphElementGridBase : public AbstractGraphElementNoCWR
{
public:
    /** Default constructor. */
    GraphElementGridBase()
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7ff ff8c 	bl	800f4f0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800f5d8:	4a0a      	ldr	r2, [pc, #40]	@ (800f604 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x3c>)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	601a      	str	r2, [r3, #0]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	631a      	str	r2, [r3, #48]	@ 0x30
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	220a      	movs	r2, #10
 800f5e8:	635a      	str	r2, [r3, #52]	@ 0x34
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    {
    }
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	080332a0 	.word	0x080332a0

0800f608 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
    FORCE_INLINE_FUNCTION uint8_t getLineWidth() const
    {
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	460b      	mov	r3, r1
 800f612:	807b      	strh	r3, [r7, #2]
    {
    }
 800f614:	bf00      	nop
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @param  graph The graph.
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00b      	beq.n	800f64a <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2a>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	3380      	adds	r3, #128	@ 0x80
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	6839      	ldr	r1, [r7, #0]
 800f642:	4610      	mov	r0, r2
 800f644:	4798      	blx	r3
 800f646:	4603      	mov	r3, r0
 800f648:	e000      	b.n	800f64c <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2c>
 800f64a:	2300      	movs	r3, #0
    }
 800f64c:	4618      	mov	r0, r3
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridY : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800f65e:	6879      	ldr	r1, [r7, #4]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f668:	6179      	str	r1, [r7, #20]
 800f66a:	6839      	ldr	r1, [r7, #0]
 800f66c:	6139      	str	r1, [r7, #16]
 800f66e:	60fa      	str	r2, [r7, #12]
 800f670:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	3394      	adds	r3, #148	@ 0x94
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	6938      	ldr	r0, [r7, #16]
 800f67c:	4798      	blx	r3
 800f67e:	4603      	mov	r3, r0
 800f680:	461a      	mov	r2, r3
 800f682:	68b9      	ldr	r1, [r7, #8]
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f00a fcdd 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800f68a:	4603      	mov	r3, r0
 800f68c:	bf00      	nop
    }
 800f68e:	4618      	mov	r0, r3
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800f696:	b5b0      	push	{r4, r5, r7, lr}
 800f698:	b08a      	sub	sp, #40	@ 0x28
 800f69a:	af02      	add	r7, sp, #8
 800f69c:	60f8      	str	r0, [r7, #12]
 800f69e:	60b9      	str	r1, [r7, #8]
 800f6a0:	607a      	str	r2, [r7, #4]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	617b      	str	r3, [r7, #20]
        return leftPadding;
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	f9b3 4116 	ldrsh.w	r4, [r3, #278]	@ 0x116
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	3338      	adds	r3, #56	@ 0x38
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fd ff40 	bl	800d53a <_ZNK8touchgfx8Drawable8getWidthEv>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800f6c4:	b299      	uxth	r1, r3
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	440b      	add	r3, r1
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	b21d      	sxth	r5, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight();
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	3338      	adds	r3, #56	@ 0x38
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fd ff37 	bl	800d554 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	bf00      	nop
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	f7fd fe72 	bl	800d3dc <_ZN8touchgfx4RectC1Essss>
    }
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	3720      	adds	r7, #32
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bdb0      	pop	{r4, r5, r7, pc}

0800f700 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800f700:	b580      	push	{r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af02      	add	r7, sp, #8
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	4611      	mov	r1, r2
 800f70c:	461a      	mov	r2, r3
 800f70e:	460b      	mov	r3, r1
 800f710:	80fb      	strh	r3, [r7, #6]
 800f712:	4613      	mov	r3, r2
 800f714:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(start, pos, length, width);
 800f716:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800f71a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f71e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800f722:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	4603      	mov	r3, r0
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f7fd fe56 	bl	800d3dc <_ZN8touchgfx4RectC1Essss>
    }
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMinScaled();
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	33ec      	adds	r3, #236	@ 0xec
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6838      	ldr	r0, [r7, #0]
 800f74c:	4798      	blx	r3
 800f74e:	4603      	mov	r3, r0
    }
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMaxScaled();
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	33f8      	adds	r3, #248	@ 0xf8
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	6838      	ldr	r0, [r7, #0]
 800f76c:	4798      	blx	r3
 800f76e:	4603      	mov	r3, r0
    }
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800f78c:	4618      	mov	r0, r3
 800f78e:	3714      	adds	r7, #20
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	3338      	adds	r3, #56	@ 0x38
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fd fec5 	bl	800d53a <_ZNK8touchgfx8Drawable8getWidthEv>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800f7ba:	b299      	uxth	r1, r3
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	440b      	add	r3, r1
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	1ad3      	subs	r3, r2, r3
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 800f7d6:	b480      	push	{r7}
 800f7d8:	b085      	sub	sp, #20
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
 800f7de:	6039      	str	r1, [r7, #0]
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	60fb      	str	r3, [r7, #12]
        return topPadding;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3714      	adds	r7, #20
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b084      	sub	sp, #16
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	6039      	str	r1, [r7, #0]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	3338      	adds	r3, #56	@ 0x38
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fd fea3 	bl	800d554 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f80e:	4603      	mov	r3, r0
 800f810:	b29a      	uxth	r2, r3
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800f818:	b299      	uxth	r1, r3
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800f820:	b29b      	uxth	r3, r3
 800f822:	440b      	add	r3, r1
 800f824:	b29b      	uxth	r3, r3
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	b29b      	uxth	r3, r3
 800f82a:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 800f82c:	4618      	mov	r0, r3
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800f834:	b580      	push	{r7, lr}
 800f836:	b088      	sub	sp, #32
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenYQ5(graph, value);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	61fb      	str	r3, [r7, #28]
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	61bb      	str	r3, [r7, #24]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenYQ5(y);
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	6979      	ldr	r1, [r7, #20]
 800f858:	69b8      	ldr	r0, [r7, #24]
 800f85a:	4798      	blx	r3
 800f85c:	4603      	mov	r3, r0
 800f85e:	bf00      	nop
    }
 800f860:	4618      	mov	r0, r3
 800f862:	3720      	adds	r7, #32
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <_ZN8touchgfx16GraphElementLineC1Ev>:
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
        : lineWidth(2)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4618      	mov	r0, r3
 800f874:	f7ff fe08 	bl	800f488 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 800f878:	4a05      	ldr	r2, [pc, #20]	@ (800f890 <_ZN8touchgfx16GraphElementLineC1Ev+0x28>)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2202      	movs	r2, #2
 800f882:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
    }
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	08033224 	.word	0x08033224

0800f894 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
    {
 800f89e:	4a08      	ldr	r2, [pc, #32]	@ (800f8c0 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	601a      	str	r2, [r3, #0]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3304      	adds	r3, #4
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fd fd57 	bl	800d35c <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 f827 	bl	800f904 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	080324b8 	.word	0x080324b8

0800f8c4 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
    {
 800f8cc:	4a04      	ldr	r2, [pc, #16]	@ (800f8e0 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	601a      	str	r2, [r3, #0]
    }
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	080324b8 	.word	0x080324b8

0800f8e4 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
    }
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff ffe9 	bl	800f8c4 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f8f2:	2108      	movs	r1, #8
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f020 f822 	bl	802f93e <_ZdlPvj>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	683a      	ldr	r2, [r7, #0]
 800f912:	605a      	str	r2, [r3, #4]
    }
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fe fa42 	bl	800ddb4 <_ZN8touchgfx15AbstractPainterC1Ev>
 800f930:	4a26      	ldr	r2, [pc, #152]	@ (800f9cc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	601a      	str	r2, [r3, #0]
 800f936:	2300      	movs	r3, #0
 800f938:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800f93a:	f7fd f88b 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 800f93e:	4603      	mov	r3, r0
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	322c      	adds	r2, #44	@ 0x2c
 800f944:	6812      	ldr	r2, [r2, #0]
 800f946:	4618      	mov	r0, r3
 800f948:	4790      	blx	r2
 800f94a:	4603      	mov	r3, r0
 800f94c:	461a      	mov	r2, r3
 800f94e:	7bfb      	ldrb	r3, [r7, #15]
 800f950:	4293      	cmp	r3, r2
 800f952:	bf0c      	ite	eq
 800f954:	2301      	moveq	r3, #1
 800f956:	2300      	movne	r3, #0
 800f958:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800f95a:	f7fd f86f 	bl	800ca3c <_ZN8touchgfx3HAL11getInstanceEv>
 800f95e:	4603      	mov	r3, r0
 800f960:	4618      	mov	r0, r3
 800f962:	f7fd ff47 	bl	800d7f4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	bf14      	ite	ne
 800f96c:	2301      	movne	r3, #1
 800f96e:	2300      	moveq	r3, #0
 800f970:	b2db      	uxtb	r3, r3
 800f972:	2b00      	cmp	r3, #0
 800f974:	d01b      	beq.n	800f9ae <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800f976:	f7fd f861 	bl	800ca3c <_ZN8touchgfx3HAL11getInstanceEv>
 800f97a:	4603      	mov	r3, r0
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fd ff39 	bl	800d7f4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f982:	4603      	mov	r3, r0
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	322c      	adds	r2, #44	@ 0x2c
 800f988:	6812      	ldr	r2, [r2, #0]
 800f98a:	4618      	mov	r0, r3
 800f98c:	4790      	blx	r2
 800f98e:	4603      	mov	r3, r0
 800f990:	461a      	mov	r2, r3
 800f992:	7bfb      	ldrb	r3, [r7, #15]
 800f994:	4293      	cmp	r3, r2
 800f996:	bf0c      	ite	eq
 800f998:	2301      	moveq	r3, #1
 800f99a:	2300      	movne	r3, #0
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	7bbb      	ldrb	r3, [r7, #14]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bf14      	ite	ne
 800f9a8:	2301      	movne	r3, #1
 800f9aa:	2300      	moveq	r3, #0
 800f9ac:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800f9ae:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d105      	bne.n	800f9c0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 800f9b4:	4b06      	ldr	r3, [pc, #24]	@ (800f9d0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 800f9b6:	4a07      	ldr	r2, [pc, #28]	@ (800f9d4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 800f9b8:	212c      	movs	r1, #44	@ 0x2c
 800f9ba:	4807      	ldr	r0, [pc, #28]	@ (800f9d8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800f9bc:	f01f ffec 	bl	802f998 <__assert_func>
    }
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	08032498 	.word	0x08032498
 800f9d0:	08031028 	.word	0x08031028
 800f9d4:	08031088 	.word	0x08031088
 800f9d8:	080310c4 	.word	0x080310c4

0800f9dc <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	4a05      	ldr	r2, [pc, #20]	@ (800f9fc <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fe f9f5 	bl	800dddc <_ZN8touchgfx15AbstractPainterD1Ev>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	08032498 	.word	0x08032498

0800fa00 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff ffe7 	bl	800f9dc <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800fa0e:	2108      	movs	r1, #8
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f01f ff94 	bl	802f93e <_ZdlPvj>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff ff77 	bl	800f920 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3308      	adds	r3, #8
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7ff ff2b 	bl	800f894 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800fa3e:	4a05      	ldr	r2, [pc, #20]	@ (800fa54 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	4a04      	ldr	r2, [pc, #16]	@ (800fa58 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	609a      	str	r2, [r3, #8]
    {
    }
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	08032eac 	.word	0x08032eac
 800fa58:	08032ed0 	.word	0x08032ed0

0800fa5c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800fa5c:	b590      	push	{r4, r7, lr}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3308      	adds	r3, #8
 800fa6a:	6839      	ldr	r1, [r7, #0]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7ff ff49 	bl	800f904 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 800fa78:	f107 030c 	add.w	r3, r7, #12
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7fd fc8a 	bl	800d396 <_ZNK8touchgfx9colortypecvmEv>
 800fa82:	4603      	mov	r3, r0
 800fa84:	0a1b      	lsrs	r3, r3, #8
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800fa8c:	f023 0307 	bic.w	r3, r3, #7
 800fa90:	b29c      	uxth	r4, r3
 800fa92:	f107 030c 	add.w	r3, r7, #12
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fd fc7d 	bl	800d396 <_ZNK8touchgfx9colortypecvmEv>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	095b      	lsrs	r3, r3, #5
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	4323      	orrs	r3, r4
 800faaa:	b29c      	uxth	r4, r3
 800faac:	f107 030c 	add.w	r3, r7, #12
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fd fc70 	bl	800d396 <_ZNK8touchgfx9colortypecvmEv>
 800fab6:	4603      	mov	r3, r0
 800fab8:	08db      	lsrs	r3, r3, #3
 800faba:	b29b      	uxth	r3, r3
 800fabc:	f003 031f 	and.w	r3, r3, #31
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	4323      	orrs	r3, r4
 800fac4:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	821a      	strh	r2, [r3, #16]
    }
 800faca:	bf00      	nop
 800facc:	3714      	adds	r7, #20
 800face:	46bd      	mov	sp, r7
 800fad0:	bd90      	pop	{r4, r7, pc}

0800fad2 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800fad2:	f1a0 0008 	sub.w	r0, r0, #8
 800fad6:	e7c1      	b.n	800fa5c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

0800fad8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	4a05      	ldr	r2, [pc, #20]	@ (800faf8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	601a      	str	r2, [r3, #0]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4618      	mov	r0, r3
 800faea:	f7fd fe8f 	bl	800d80c <_ZN8touchgfx6ScreenD1Ev>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	08032464 	.word	0x08032464

0800fafc <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7ff ffe7 	bl	800fad8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800fb0a:	2140      	movs	r1, #64	@ 0x40
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f01f ff16 	bl	802f93e <_ZdlPvj>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <_ZN8touchgfx20GraphElementGridBaseD1Ev>:
class GraphElementGridBase : public AbstractGraphElementNoCWR
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	4a05      	ldr	r2, [pc, #20]	@ (800fb3c <_ZN8touchgfx20GraphElementGridBaseD1Ev+0x20>)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	601a      	str	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7ff fd29 	bl	800f584 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4618      	mov	r0, r3
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	080332a0 	.word	0x080332a0

0800fb40 <_ZN8touchgfx20GraphElementGridBaseD0Ev>:
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7ff ffe7 	bl	800fb1c <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 800fb4e:	2140      	movs	r1, #64	@ 0x40
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f01f fef4 	bl	802f93e <_ZdlPvj>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <_ZN8touchgfx17GraphElementGridYC1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff fd2c 	bl	800f5c8 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800fb70:	4a03      	ldr	r2, [pc, #12]	@ (800fb80 <_ZN8touchgfx17GraphElementGridYC1Ev+0x20>)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	080324cc 	.word	0x080324cc

0800fb84 <_ZN8touchgfx27GraphElementVerticalGapLineC1Ev>:
 * The GraphElementVerticalGapLine is used to draw a vertical line where the gap in the graph
 * is. This only makes sense to add to a GraphWrapAndOverwrite (or GraphWrapAndOverwriteData).
 *
 * @note The vertical line is drawn using LCD::fillRect for higher performance.
 */
class GraphElementVerticalGapLine : public AbstractGraphElementNoCWR
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff fcae 	bl	800f4f0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 800fb94:	4a03      	ldr	r2, [pc, #12]	@ (800fba4 <_ZN8touchgfx27GraphElementVerticalGapLineC1Ev+0x20>)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	08033358 	.word	0x08033358

0800fba8 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 800fba8:	b590      	push	{r4, r7, lr}
 800fbaa:	f2ad 7dbc 	subw	sp, sp, #1980	@ 0x7bc
 800fbae:	af02      	add	r7, sp, #8
 800fbb0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fbb4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fbb8:	6018      	str	r0, [r3, #0]
 800fbba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fbbe:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f005 fd6b 	bl	80156a0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800fbca:	4ae6      	ldr	r2, [pc, #920]	@ (800ff64 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
 800fbcc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fbd0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	601a      	str	r2, [r3, #0]
 800fbd8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fbdc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	3340      	adds	r3, #64	@ 0x40
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fd fead 	bl	800d944 <_ZN8touchgfx3BoxC1Ev>
 800fbea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fbee:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	336c      	adds	r3, #108	@ 0x6c
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fd fea4 	bl	800d944 <_ZN8touchgfx3BoxC1Ev>
 800fbfc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc00:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3398      	adds	r3, #152	@ 0x98
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fd fe9b 	bl	800d944 <_ZN8touchgfx3BoxC1Ev>
 800fc0e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc12:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	33c4      	adds	r3, #196	@ 0xc4
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe f88c 	bl	800dd38 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fc20:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc24:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7fe f882 	bl	800dd38 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fc34:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc38:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fd fec6 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fc48:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc4c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800fc56:	4618      	mov	r0, r3
 800fc58:	f005 fd5c 	bl	8015714 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EEC1Ev>
 800fc5c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc60:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff ff78 	bl	800fb60 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800fc70:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc74:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff fdf2 	bl	800f868 <_ZN8touchgfx16GraphElementLineC1Ev>
 800fc84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fc88:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f503 7472 	add.w	r4, r3, #968	@ 0x3c8
 800fc92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fc96:	2100      	movs	r1, #0
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fd fb6d 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 800fc9e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fca2:	f5a3 63ed 	sub.w	r3, r3, #1896	@ 0x768
 800fca6:	6819      	ldr	r1, [r3, #0]
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f7ff feb9 	bl	800fa20 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800fcae:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fcb2:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7ff ff61 	bl	800fb84 <_ZN8touchgfx27GraphElementVerticalGapLineC1Ev>
 800fcc2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fcc6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f005 fd1f 	bl	8015714 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EEC1Ev>
 800fcd6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fcda:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f203 53c4 	addw	r3, r3, #1476	@ 0x5c4
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff ff3b 	bl	800fb60 <_ZN8touchgfx17GraphElementGridYC1Ev>
 800fcea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fcee:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff fdb5 	bl	800f868 <_ZN8touchgfx16GraphElementLineC1Ev>
 800fcfe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd02:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f203 6434 	addw	r4, r3, #1588	@ 0x634
 800fd0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800fd10:	2100      	movs	r1, #0
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fd fb30 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 800fd18:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd1c:	f2a3 7364 	subw	r3, r3, #1892	@ 0x764
 800fd20:	6819      	ldr	r1, [r3, #0]
 800fd22:	4620      	mov	r0, r4
 800fd24:	f7ff fe7c 	bl	800fa20 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 800fd28:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd2c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff ff24 	bl	800fb84 <_ZN8touchgfx27GraphElementVerticalGapLineC1Ev>
 800fd3c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd40:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f203 637c 	addw	r3, r3, #1660	@ 0x67c
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fd fe42 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fd50:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd54:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fd fe38 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fd64:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd68:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f203 730c 	addw	r3, r3, #1804	@ 0x70c
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fd fe2e 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fd78:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd7c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f203 7354 	addw	r3, r3, #1876	@ 0x754
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fd fe24 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fd8c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fd90:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f203 739c 	addw	r3, r3, #1948	@ 0x79c
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fd fe1a 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fda0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fda4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fd fe10 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fdb4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fdb8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fd fe06 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fdc8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fdcc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f603 0374 	addw	r3, r3, #2164	@ 0x874
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fd fdfc 	bl	800d9d4 <_ZN8touchgfx8TextAreaC1Ev>
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800fddc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fde0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 800fdea:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f00c fa02 	bl	801c1f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    
    __background.setPosition(0, 0, 240, 320);
 800fdf4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fdf8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800fe02:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	23f0      	movs	r3, #240	@ 0xf0
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	f7fd fb73 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800fe12:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe16:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800fe20:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe24:	f2a3 63a6 	subw	r3, r3, #1702	@ 0x6a6
 800fe28:	2200      	movs	r2, #0
 800fe2a:	701a      	strb	r2, [r3, #0]
 800fe2c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe30:	f2a3 63a7 	subw	r3, r3, #1703	@ 0x6a7
 800fe34:	2200      	movs	r2, #0
 800fe36:	701a      	strb	r2, [r3, #0]
 800fe38:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe3c:	f5a3 63d5 	sub.w	r3, r3, #1704	@ 0x6a8
 800fe40:	2200      	movs	r2, #0
 800fe42:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800fe44:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe48:	f2a3 63a6 	subw	r3, r3, #1702	@ 0x6a6
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	041a      	lsls	r2, r3, #16
 800fe50:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe54:	f2a3 63a7 	subw	r3, r3, #1703	@ 0x6a7
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	021b      	lsls	r3, r3, #8
 800fe5c:	431a      	orrs	r2, r3
 800fe5e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe62:	f5a3 63d5 	sub.w	r3, r3, #1704	@ 0x6a8
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fe6e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800fe72:	4611      	mov	r1, r2
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7fd fa7f 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 800fe7a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe7e:	f2a3 63ac 	subw	r3, r3, #1708	@ 0x6ac
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4619      	mov	r1, r3
 800fe86:	4620      	mov	r0, r4
 800fe88:	f7fd fd80 	bl	800d98c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800fe8c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe90:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fe9a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	3340      	adds	r3, #64	@ 0x40
 800fea2:	4619      	mov	r1, r3
 800fea4:	4610      	mov	r0, r2
 800fea6:	f7fd fd09 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 320);
 800feaa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800feae:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800feb8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800febc:	9300      	str	r3, [sp, #0]
 800febe:	23f0      	movs	r3, #240	@ 0xf0
 800fec0:	2200      	movs	r2, #0
 800fec2:	2100      	movs	r1, #0
 800fec4:	f7fd fb18 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800fec8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fecc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800fed6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800feda:	f2a3 63a3 	subw	r3, r3, #1699	@ 0x6a3
 800fede:	22ff      	movs	r2, #255	@ 0xff
 800fee0:	701a      	strb	r2, [r3, #0]
 800fee2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fee6:	f2a3 63a4 	subw	r3, r3, #1700	@ 0x6a4
 800feea:	22ff      	movs	r2, #255	@ 0xff
 800feec:	701a      	strb	r2, [r3, #0]
 800feee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fef2:	f2a3 63a5 	subw	r3, r3, #1701	@ 0x6a5
 800fef6:	22ff      	movs	r2, #255	@ 0xff
 800fef8:	701a      	strb	r2, [r3, #0]
 800fefa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fefe:	f2a3 63a3 	subw	r3, r3, #1699	@ 0x6a3
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	041a      	lsls	r2, r3, #16
 800ff06:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff0a:	f2a3 63a4 	subw	r3, r3, #1700	@ 0x6a4
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	021b      	lsls	r3, r3, #8
 800ff12:	431a      	orrs	r2, r3
 800ff14:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff18:	f2a3 63a5 	subw	r3, r3, #1701	@ 0x6a5
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ff24:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fd fa24 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 800ff30:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff34:	f5a3 63d6 	sub.w	r3, r3, #1712	@ 0x6b0
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f7fd fd25 	bl	800d98c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800ff42:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff46:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff50:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	336c      	adds	r3, #108	@ 0x6c
 800ff58:	4619      	mov	r1, r3
 800ff5a:	4610      	mov	r0, r2
 800ff5c:	f7fd fcae 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
 800ff60:	e002      	b.n	800ff68 <_ZN15Screen1ViewBaseC1Ev+0x3c0>
 800ff62:	bf00      	nop
 800ff64:	08032298 	.word	0x08032298

    box2.setPosition(0, 0, 240, 97);
 800ff68:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff6c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800ff76:	2361      	movs	r3, #97	@ 0x61
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	23f0      	movs	r3, #240	@ 0xf0
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	2100      	movs	r1, #0
 800ff80:	f7fd faba 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(219, 219, 219));
 800ff84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff88:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800ff92:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ff96:	f5a3 63d4 	sub.w	r3, r3, #1696	@ 0x6a0
 800ff9a:	22db      	movs	r2, #219	@ 0xdb
 800ff9c:	701a      	strb	r2, [r3, #0]
 800ff9e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ffa2:	f2a3 63a1 	subw	r3, r3, #1697	@ 0x6a1
 800ffa6:	22db      	movs	r2, #219	@ 0xdb
 800ffa8:	701a      	strb	r2, [r3, #0]
 800ffaa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ffae:	f2a3 63a2 	subw	r3, r3, #1698	@ 0x6a2
 800ffb2:	22db      	movs	r2, #219	@ 0xdb
 800ffb4:	701a      	strb	r2, [r3, #0]
 800ffb6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ffba:	f5a3 63d4 	sub.w	r3, r3, #1696	@ 0x6a0
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	041a      	lsls	r2, r3, #16
 800ffc2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ffc6:	f2a3 63a1 	subw	r3, r3, #1697	@ 0x6a1
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	021b      	lsls	r3, r3, #8
 800ffce:	431a      	orrs	r2, r3
 800ffd0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800ffd4:	f2a3 63a2 	subw	r3, r3, #1698	@ 0x6a2
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ffe0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fd f9c6 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 800ffec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 800fff0:	f2a3 63b4 	subw	r3, r3, #1716	@ 0x6b4
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4619      	mov	r1, r3
 800fff8:	4620      	mov	r0, r4
 800fffa:	f7fd fcc7 	bl	800d98c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box2);
 800fffe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010002:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801000c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	3398      	adds	r3, #152	@ 0x98
 8010014:	4619      	mov	r1, r3
 8010016:	4610      	mov	r0, r2
 8010018:	f7fd fc50 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textAreaTemp.setXY(135, 74);
 801001c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010020:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	33c4      	adds	r3, #196	@ 0xc4
 8010028:	224a      	movs	r2, #74	@ 0x4a
 801002a:	2187      	movs	r1, #135	@ 0x87
 801002c:	4618      	mov	r0, r3
 801002e:	f7fd fabc 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textAreaTemp.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010032:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010036:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8010040:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010044:	f2a3 639d 	subw	r3, r3, #1693	@ 0x69d
 8010048:	2200      	movs	r2, #0
 801004a:	701a      	strb	r2, [r3, #0]
 801004c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010050:	f2a3 639e 	subw	r3, r3, #1694	@ 0x69e
 8010054:	2200      	movs	r2, #0
 8010056:	701a      	strb	r2, [r3, #0]
 8010058:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801005c:	f2a3 639f 	subw	r3, r3, #1695	@ 0x69f
 8010060:	2200      	movs	r2, #0
 8010062:	701a      	strb	r2, [r3, #0]
 8010064:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010068:	f2a3 639d 	subw	r3, r3, #1693	@ 0x69d
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	041a      	lsls	r2, r3, #16
 8010070:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010074:	f2a3 639e 	subw	r3, r3, #1694	@ 0x69e
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	021b      	lsls	r3, r3, #8
 801007c:	431a      	orrs	r2, r3
 801007e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010082:	f2a3 639f 	subw	r3, r3, #1695	@ 0x69f
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	4313      	orrs	r3, r2
 801008a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801008e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8010092:	4611      	mov	r1, r2
 8010094:	4618      	mov	r0, r3
 8010096:	f7fd f96f 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 801009a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801009e:	f5a3 63d7 	sub.w	r3, r3, #1720	@ 0x6b8
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	461a      	mov	r2, r3
 80100a6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80100aa:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 80100ae:	601c      	str	r4, [r3, #0]
 80100b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80100b4:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80100b8:	601a      	str	r2, [r3, #0]
        color = newColor;
 80100ba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80100be:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80100c8:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 80100cc:	6812      	ldr	r2, [r2, #0]
 80100ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80100d0:	bf00      	nop
    textAreaTemp.setLinespacing(0);
 80100d2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80100d6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 80100e0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80100e4:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 80100e8:	601a      	str	r2, [r3, #0]
 80100ea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80100ee:	f2a3 6396 	subw	r3, r3, #1686	@ 0x696
 80100f2:	2200      	movs	r2, #0
 80100f4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80100f6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80100fa:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010104:	f2a2 6296 	subw	r2, r2, #1686	@ 0x696
 8010108:	8812      	ldrh	r2, [r2, #0]
 801010a:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 801010c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010110:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3384      	adds	r3, #132	@ 0x84
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010120:	f2a2 6294 	subw	r2, r2, #1684	@ 0x694
 8010124:	6814      	ldr	r4, [r2, #0]
 8010126:	4638      	mov	r0, r7
 8010128:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801012c:	f2a2 6294 	subw	r2, r2, #1684	@ 0x694
 8010130:	6811      	ldr	r1, [r2, #0]
 8010132:	4798      	blx	r3
 8010134:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010138:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 801013c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8010140:	ca07      	ldmia	r2, {r0, r1, r2}
 8010142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010146:	bf00      	nop
    Unicode::snprintf(textAreaTempBuffer, TEXTAREATEMP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_U2NK).getText());
 8010148:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801014c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f603 04bc 	addw	r4, r3, #2236	@ 0x8bc
 8010156:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801015a:	2108      	movs	r1, #8
 801015c:	4618      	mov	r0, r3
 801015e:	f7fd fc23 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010162:	4ba4      	ldr	r3, [pc, #656]	@ (80103f4 <_ZN15Screen1ViewBaseC1Ev+0x84c>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d105      	bne.n	8010176 <_ZN15Screen1ViewBaseC1Ev+0x5ce>
 801016a:	4ba3      	ldr	r3, [pc, #652]	@ (80103f8 <_ZN15Screen1ViewBaseC1Ev+0x850>)
 801016c:	4aa3      	ldr	r2, [pc, #652]	@ (80103fc <_ZN15Screen1ViewBaseC1Ev+0x854>)
 801016e:	2160      	movs	r1, #96	@ 0x60
 8010170:	48a3      	ldr	r0, [pc, #652]	@ (8010400 <_ZN15Screen1ViewBaseC1Ev+0x858>)
 8010172:	f01f fc11 	bl	802f998 <__assert_func>
 8010176:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801017a:	f5a3 63d2 	sub.w	r3, r3, #1680	@ 0x690
 801017e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8010182:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 8010184:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010188:	f5a3 63d2 	sub.w	r3, r3, #1680	@ 0x690
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	889a      	ldrh	r2, [r3, #4]
 8010190:	4b9c      	ldr	r3, [pc, #624]	@ (8010404 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
 8010192:	881b      	ldrh	r3, [r3, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	bf34      	ite	cc
 8010198:	2301      	movcc	r3, #1
 801019a:	2300      	movcs	r3, #0
 801019c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d105      	bne.n	80101ae <_ZN15Screen1ViewBaseC1Ev+0x606>
 80101a2:	4b99      	ldr	r3, [pc, #612]	@ (8010408 <_ZN15Screen1ViewBaseC1Ev+0x860>)
 80101a4:	4a95      	ldr	r2, [pc, #596]	@ (80103fc <_ZN15Screen1ViewBaseC1Ev+0x854>)
 80101a6:	2161      	movs	r1, #97	@ 0x61
 80101a8:	4895      	ldr	r0, [pc, #596]	@ (8010400 <_ZN15Screen1ViewBaseC1Ev+0x858>)
 80101aa:	f01f fbf5 	bl	802f998 <__assert_func>
        return texts->getText(typedTextId);
 80101ae:	4b97      	ldr	r3, [pc, #604]	@ (801040c <_ZN15Screen1ViewBaseC1Ev+0x864>)
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80101b6:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 80101ba:	889b      	ldrh	r3, [r3, #4]
 80101bc:	4619      	mov	r1, r3
 80101be:	4610      	mov	r0, r2
 80101c0:	f005 fd64 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 80101c4:	4603      	mov	r3, r0
 80101c6:	bf00      	nop
 80101c8:	4a91      	ldr	r2, [pc, #580]	@ (8010410 <_ZN15Screen1ViewBaseC1Ev+0x868>)
 80101ca:	2105      	movs	r1, #5
 80101cc:	4620      	mov	r0, r4
 80101ce:	f010 fd56 	bl	8020c7e <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80101d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fc f98a 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    textAreaTemp.setWildcard(textAreaTempBuffer);
 80101dc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80101e0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 80101ea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80101ee:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f603 03bc 	addw	r3, r3, #2236	@ 0x8bc
 80101f8:	4619      	mov	r1, r3
 80101fa:	4610      	mov	r0, r2
 80101fc:	f7fd fdcc 	bl	800dd98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaTemp.resizeToCurrentText();
 8010200:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010204:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	33c4      	adds	r3, #196	@ 0xc4
 801020c:	4618      	mov	r0, r3
 801020e:	f00b f889 	bl	801b324 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O79F));
 8010212:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010216:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8010220:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010224:	210c      	movs	r1, #12
 8010226:	4618      	mov	r0, r3
 8010228:	f7fd fbbe 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 801022c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010230:	4619      	mov	r1, r3
 8010232:	4620      	mov	r0, r4
 8010234:	f00b f896 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010238:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801023c:	4618      	mov	r0, r3
 801023e:	f7fc f957 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textAreaTemp);
 8010242:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010246:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010250:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	33c4      	adds	r3, #196	@ 0xc4
 8010258:	4619      	mov	r1, r3
 801025a:	4610      	mov	r0, r2
 801025c:	f7fd fb2e 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textAreaVolt.setXY(6, 74);
 8010260:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010264:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801026e:	224a      	movs	r2, #74	@ 0x4a
 8010270:	2106      	movs	r1, #6
 8010272:	4618      	mov	r0, r3
 8010274:	f7fd f999 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textAreaVolt.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010278:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801027c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8010286:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801028a:	f2a3 6389 	subw	r3, r3, #1673	@ 0x689
 801028e:	2200      	movs	r2, #0
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010296:	f2a3 638a 	subw	r3, r3, #1674	@ 0x68a
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
 801029e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80102a2:	f2a3 638b 	subw	r3, r3, #1675	@ 0x68b
 80102a6:	2200      	movs	r2, #0
 80102a8:	701a      	strb	r2, [r3, #0]
 80102aa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80102ae:	f2a3 6389 	subw	r3, r3, #1673	@ 0x689
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	041a      	lsls	r2, r3, #16
 80102b6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80102ba:	f2a3 638a 	subw	r3, r3, #1674	@ 0x68a
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	021b      	lsls	r3, r3, #8
 80102c2:	431a      	orrs	r2, r3
 80102c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80102c8:	f2a3 638b 	subw	r3, r3, #1675	@ 0x68b
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80102d4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fd f84c 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 80102e0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80102e4:	f2a3 63bc 	subw	r3, r3, #1724	@ 0x6bc
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	461a      	mov	r2, r3
 80102ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80102f0:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 80102f4:	601c      	str	r4, [r3, #0]
 80102f6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80102fa:	f5a3 63ee 	sub.w	r3, r3, #1904	@ 0x770
 80102fe:	601a      	str	r2, [r3, #0]
        color = newColor;
 8010300:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010304:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801030e:	f5a2 62ee 	sub.w	r2, r2, #1904	@ 0x770
 8010312:	6812      	ldr	r2, [r2, #0]
 8010314:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8010316:	bf00      	nop
    textAreaVolt.setLinespacing(0);
 8010318:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801031c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8010326:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801032a:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 801032e:	601a      	str	r2, [r3, #0]
 8010330:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010334:	f2a3 6382 	subw	r3, r3, #1666	@ 0x682
 8010338:	2200      	movs	r2, #0
 801033a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801033c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010340:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801034a:	f2a2 6282 	subw	r2, r2, #1666	@ 0x682
 801034e:	8812      	ldrh	r2, [r2, #0]
 8010350:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8010352:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010356:	f5a3 63d0 	sub.w	r3, r3, #1664	@ 0x680
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	3384      	adds	r3, #132	@ 0x84
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010366:	f5a2 62d0 	sub.w	r2, r2, #1664	@ 0x680
 801036a:	6814      	ldr	r4, [r2, #0]
 801036c:	4638      	mov	r0, r7
 801036e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010372:	f5a2 62d0 	sub.w	r2, r2, #1664	@ 0x680
 8010376:	6811      	ldr	r1, [r2, #0]
 8010378:	4798      	blx	r3
 801037a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801037e:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 8010382:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8010386:	ca07      	ldmia	r2, {r0, r1, r2}
 8010388:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801038c:	bf00      	nop
    Unicode::snprintf(textAreaVoltBuffer, TEXTAREAVOLT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_D9QQ).getText());
 801038e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010392:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f603 04c6 	addw	r4, r3, #2246	@ 0x8c6
 801039c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80103a0:	210a      	movs	r1, #10
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fd fb00 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80103a8:	4b12      	ldr	r3, [pc, #72]	@ (80103f4 <_ZN15Screen1ViewBaseC1Ev+0x84c>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d105      	bne.n	80103bc <_ZN15Screen1ViewBaseC1Ev+0x814>
 80103b0:	4b11      	ldr	r3, [pc, #68]	@ (80103f8 <_ZN15Screen1ViewBaseC1Ev+0x850>)
 80103b2:	4a12      	ldr	r2, [pc, #72]	@ (80103fc <_ZN15Screen1ViewBaseC1Ev+0x854>)
 80103b4:	2160      	movs	r1, #96	@ 0x60
 80103b6:	4812      	ldr	r0, [pc, #72]	@ (8010400 <_ZN15Screen1ViewBaseC1Ev+0x858>)
 80103b8:	f01f faee 	bl	802f998 <__assert_func>
 80103bc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80103c0:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80103c4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80103c8:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 80103ca:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80103ce:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	889a      	ldrh	r2, [r3, #4]
 80103d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010404 <_ZN15Screen1ViewBaseC1Ev+0x85c>)
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	429a      	cmp	r2, r3
 80103dc:	bf34      	ite	cc
 80103de:	2301      	movcc	r3, #1
 80103e0:	2300      	movcs	r3, #0
 80103e2:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d115      	bne.n	8010414 <_ZN15Screen1ViewBaseC1Ev+0x86c>
 80103e8:	4b07      	ldr	r3, [pc, #28]	@ (8010408 <_ZN15Screen1ViewBaseC1Ev+0x860>)
 80103ea:	4a04      	ldr	r2, [pc, #16]	@ (80103fc <_ZN15Screen1ViewBaseC1Ev+0x854>)
 80103ec:	2161      	movs	r1, #97	@ 0x61
 80103ee:	4804      	ldr	r0, [pc, #16]	@ (8010400 <_ZN15Screen1ViewBaseC1Ev+0x858>)
 80103f0:	f01f fad2 	bl	802f998 <__assert_func>
 80103f4:	20012054 	.word	0x20012054
 80103f8:	08030e04 	.word	0x08030e04
 80103fc:	08031124 	.word	0x08031124
 8010400:	08030e84 	.word	0x08030e84
 8010404:	20012058 	.word	0x20012058
 8010408:	08030ec8 	.word	0x08030ec8
 801040c:	20012060 	.word	0x20012060
 8010410:	08031170 	.word	0x08031170
        return texts->getText(typedTextId);
 8010414:	4be2      	ldr	r3, [pc, #904]	@ (80107a0 <_ZN15Screen1ViewBaseC1Ev+0xbf8>)
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801041c:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8010420:	889b      	ldrh	r3, [r3, #4]
 8010422:	4619      	mov	r1, r3
 8010424:	4610      	mov	r0, r2
 8010426:	f005 fc31 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801042a:	4603      	mov	r3, r0
 801042c:	bf00      	nop
 801042e:	4add      	ldr	r2, [pc, #884]	@ (80107a4 <_ZN15Screen1ViewBaseC1Ev+0xbfc>)
 8010430:	2105      	movs	r1, #5
 8010432:	4620      	mov	r0, r4
 8010434:	f010 fc23 	bl	8020c7e <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010438:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801043c:	4618      	mov	r0, r3
 801043e:	f7fc f857 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    textAreaVolt.setWildcard(textAreaVoltBuffer);
 8010442:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010446:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8010450:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010454:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f603 03c6 	addw	r3, r3, #2246	@ 0x8c6
 801045e:	4619      	mov	r1, r3
 8010460:	4610      	mov	r0, r2
 8010462:	f7fd fc99 	bl	800dd98 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaVolt.resizeToCurrentText();
 8010466:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801046a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8010474:	4618      	mov	r0, r3
 8010476:	f00a ff55 	bl	801b324 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaVolt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J8LP));
 801047a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801047e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8010488:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801048c:	210b      	movs	r1, #11
 801048e:	4618      	mov	r0, r3
 8010490:	f7fd fa8a 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8010494:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010498:	4619      	mov	r1, r3
 801049a:	4620      	mov	r0, r4
 801049c:	f00a ff62 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80104a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fc f823 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textAreaVolt);
 80104aa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80104ae:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80104b8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80104c2:	4619      	mov	r1, r3
 80104c4:	4610      	mov	r0, r2
 80104c6:	f7fd f9f9 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea3.setXY(31, 0);
 80104ca:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80104ce:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80104d8:	2200      	movs	r2, #0
 80104da:	211f      	movs	r1, #31
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fd f864 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea3.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80104e2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80104e6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f503 74ae 	add.w	r4, r3, #348	@ 0x15c
 80104f0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80104f4:	f2a3 6375 	subw	r3, r3, #1653	@ 0x675
 80104f8:	2200      	movs	r2, #0
 80104fa:	701a      	strb	r2, [r3, #0]
 80104fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010500:	f2a3 6376 	subw	r3, r3, #1654	@ 0x676
 8010504:	2200      	movs	r2, #0
 8010506:	701a      	strb	r2, [r3, #0]
 8010508:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801050c:	f2a3 6377 	subw	r3, r3, #1655	@ 0x677
 8010510:	2200      	movs	r2, #0
 8010512:	701a      	strb	r2, [r3, #0]
 8010514:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010518:	f2a3 6375 	subw	r3, r3, #1653	@ 0x675
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	041a      	lsls	r2, r3, #16
 8010520:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010524:	f2a3 6376 	subw	r3, r3, #1654	@ 0x676
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	021b      	lsls	r3, r3, #8
 801052c:	431a      	orrs	r2, r3
 801052e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010532:	f2a3 6377 	subw	r3, r3, #1655	@ 0x677
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	4313      	orrs	r3, r2
 801053a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801053e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8010542:	4611      	mov	r1, r2
 8010544:	4618      	mov	r0, r3
 8010546:	f7fc ff17 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 801054a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801054e:	f5a3 63d8 	sub.w	r3, r3, #1728	@ 0x6c0
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	461a      	mov	r2, r3
 8010556:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801055a:	f2a3 6374 	subw	r3, r3, #1652	@ 0x674
 801055e:	601c      	str	r4, [r3, #0]
 8010560:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010564:	f2a3 7374 	subw	r3, r3, #1908	@ 0x774
 8010568:	601a      	str	r2, [r3, #0]
        color = newColor;
 801056a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801056e:	f2a3 6374 	subw	r3, r3, #1652	@ 0x674
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010578:	f2a2 7274 	subw	r2, r2, #1908	@ 0x774
 801057c:	6812      	ldr	r2, [r2, #0]
 801057e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8010580:	bf00      	nop
    textArea3.setLinespacing(0);
 8010582:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010586:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f503 72ae 	add.w	r2, r3, #348	@ 0x15c
 8010590:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010594:	f2a3 636c 	subw	r3, r3, #1644	@ 0x66c
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801059e:	f2a3 636e 	subw	r3, r3, #1646	@ 0x66e
 80105a2:	2200      	movs	r2, #0
 80105a4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80105a6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80105aa:	f2a3 636c 	subw	r3, r3, #1644	@ 0x66c
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80105b4:	f2a2 626e 	subw	r2, r2, #1646	@ 0x66e
 80105b8:	8812      	ldrh	r2, [r2, #0]
 80105ba:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 80105bc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80105c0:	f2a3 636c 	subw	r3, r3, #1644	@ 0x66c
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	3384      	adds	r3, #132	@ 0x84
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80105d0:	f2a2 626c 	subw	r2, r2, #1644	@ 0x66c
 80105d4:	6814      	ldr	r4, [r2, #0]
 80105d6:	4638      	mov	r0, r7
 80105d8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80105dc:	f2a2 626c 	subw	r2, r2, #1644	@ 0x66c
 80105e0:	6811      	ldr	r1, [r2, #0]
 80105e2:	4798      	blx	r3
 80105e4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80105e8:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 80105ec:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80105f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80105f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80105f6:	bf00      	nop
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2HIB));
 80105f8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80105fc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f503 74ae 	add.w	r4, r3, #348	@ 0x15c
 8010606:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801060a:	2109      	movs	r1, #9
 801060c:	4618      	mov	r0, r3
 801060e:	f7fd f9cb 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8010612:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010616:	4619      	mov	r1, r3
 8010618:	4620      	mov	r0, r4
 801061a:	f00a fea3 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801061e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010622:	4618      	mov	r0, r3
 8010624:	f7fb ff64 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea3);
 8010628:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801062c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010636:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8010640:	4619      	mov	r1, r3
 8010642:	4610      	mov	r0, r2
 8010644:	f7fd f93a 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    dynamicGraph1.setPosition(31, 119, 203, 76);
 8010648:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801064c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8010656:	234c      	movs	r3, #76	@ 0x4c
 8010658:	9300      	str	r3, [sp, #0]
 801065a:	23cb      	movs	r3, #203	@ 0xcb
 801065c:	2277      	movs	r2, #119	@ 0x77
 801065e:	211f      	movs	r1, #31
 8010660:	f7fc ff4a 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(10);
 8010664:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010668:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8010672:	2200      	movs	r2, #0
 8010674:	210a      	movs	r1, #10
 8010676:	4618      	mov	r0, r3
 8010678:	f7fe fa3e 	bl	800eaf8 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setXAxisFactor(1);
 801067c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010680:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 801068a:	2101      	movs	r1, #1
 801068c:	4618      	mov	r0, r3
 801068e:	f7fe faf7 	bl	800ec80 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>
    dynamicGraph1.setXAxisOffset(0);
 8010692:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010696:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80106a0:	2100      	movs	r1, #0
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fe fc0e 	bl	800eec4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 80106a8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80106ac:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80106b6:	2300      	movs	r3, #0
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	2300      	movs	r3, #0
 80106bc:	2200      	movs	r2, #0
 80106be:	2100      	movs	r1, #0
 80106c0:	f009 fc0e 	bl	8019ee0 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 80106c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80106c8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80106d2:	2300      	movs	r3, #0
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	2300      	movs	r3, #0
 80106d8:	2200      	movs	r2, #0
 80106da:	2100      	movs	r1, #0
 80106dc:	f009 fb3e 	bl	8019d5c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 4);
 80106e0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80106e4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80106ee:	2204      	movs	r2, #4
 80106f0:	2100      	movs	r1, #0
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fd fdf7 	bl	800e2e6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    dynamicGraph1MajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80106f8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80106fc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f503 7456 	add.w	r4, r3, #856	@ 0x358
 8010706:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801070a:	f2a3 6365 	subw	r3, r3, #1637	@ 0x665
 801070e:	2200      	movs	r2, #0
 8010710:	701a      	strb	r2, [r3, #0]
 8010712:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010716:	f2a3 6366 	subw	r3, r3, #1638	@ 0x666
 801071a:	2200      	movs	r2, #0
 801071c:	701a      	strb	r2, [r3, #0]
 801071e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010722:	f2a3 6367 	subw	r3, r3, #1639	@ 0x667
 8010726:	2200      	movs	r2, #0
 8010728:	701a      	strb	r2, [r3, #0]
 801072a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801072e:	f2a3 6365 	subw	r3, r3, #1637	@ 0x665
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	041a      	lsls	r2, r3, #16
 8010736:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801073a:	f2a3 6366 	subw	r3, r3, #1638	@ 0x666
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	021b      	lsls	r3, r3, #8
 8010742:	431a      	orrs	r2, r3
 8010744:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010748:	f2a3 6367 	subw	r3, r3, #1639	@ 0x667
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	4313      	orrs	r3, r2
 8010750:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010754:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8010758:	4611      	mov	r1, r2
 801075a:	4618      	mov	r0, r3
 801075c:	f7fc fe0c 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8010760:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010764:	f2a3 63c4 	subw	r3, r3, #1732	@ 0x6c4
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4619      	mov	r1, r3
 801076c:	4620      	mov	r0, r4
 801076e:	f7fe fed7 	bl	800f520 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisGrid.setInterval(2);
 8010772:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010776:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f503 7256 	add.w	r2, r3, #856	@ 0x358
 8010780:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010784:	f5a3 63cb 	sub.w	r3, r3, #1624	@ 0x658
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801078e:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 8010792:	2202      	movs	r2, #2
 8010794:	601a      	str	r2, [r3, #0]
        setIntervalScaled(abs(interval) * dataScale);
 8010796:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801079a:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 801079e:	e003      	b.n	80107a8 <_ZN15Screen1ViewBaseC1Ev+0xc00>
 80107a0:	20012060 	.word	0x20012060
 80107a4:	08031170 	.word	0x08031170
 80107a8:	6818      	ldr	r0, [r3, #0]
 80107aa:	f004 ff6a 	bl	8015682 <_ZN8touchgfx3absIiEET_S1_>
 80107ae:	4602      	mov	r2, r0
 80107b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80107b4:	f5a3 63cb 	sub.w	r3, r3, #1624	@ 0x658
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107bc:	fb03 f202 	mul.w	r2, r3, r2
 80107c0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80107c4:	f5a3 63cc 	sub.w	r3, r3, #1632	@ 0x660
 80107c8:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80107cc:	f5a1 61cb 	sub.w	r1, r1, #1624	@ 0x658
 80107d0:	6809      	ldr	r1, [r1, #0]
 80107d2:	6019      	str	r1, [r3, #0]
 80107d4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80107d8:	f2a3 6364 	subw	r3, r3, #1636	@ 0x664
 80107dc:	601a      	str	r2, [r3, #0]
        gridInterval = abs(interval);
 80107de:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80107e2:	f2a3 6364 	subw	r3, r3, #1636	@ 0x664
 80107e6:	6818      	ldr	r0, [r3, #0]
 80107e8:	f004 ff4b 	bl	8015682 <_ZN8touchgfx3absIiEET_S1_>
 80107ec:	4602      	mov	r2, r0
 80107ee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80107f2:	f5a3 63cc 	sub.w	r3, r3, #1632	@ 0x660
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 80107fa:	bf00      	nop
    }
 80107fc:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setLineWidth(1);
 80107fe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010802:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f503 7256 	add.w	r2, r3, #856	@ 0x358
 801080c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010810:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 8010814:	601a      	str	r2, [r3, #0]
 8010816:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801081a:	f2a3 6351 	subw	r3, r3, #1617	@ 0x651
 801081e:	2201      	movs	r2, #1
 8010820:	701a      	strb	r2, [r3, #0]
        lineWidth = width;
 8010822:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010826:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010830:	f2a2 6251 	subw	r2, r2, #1617	@ 0x651
 8010834:	7812      	ldrb	r2, [r2, #0]
 8010836:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 801083a:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setScale(10);
 801083c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010840:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f503 7256 	add.w	r2, r3, #856	@ 0x358
 801084a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801084e:	f5a3 63c9 	sub.w	r3, r3, #1608	@ 0x648
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010858:	f2a3 634c 	subw	r3, r3, #1612	@ 0x64c
 801085c:	220a      	movs	r2, #10
 801085e:	601a      	str	r2, [r3, #0]
        assert(scale != 0);
 8010860:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010864:	f2a3 634c 	subw	r3, r3, #1612	@ 0x64c
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <_ZN15Screen1ViewBaseC1Ev+0xcd4>
 801086e:	4bcc      	ldr	r3, [pc, #816]	@ (8010ba0 <_ZN15Screen1ViewBaseC1Ev+0xff8>)
 8010870:	4acc      	ldr	r2, [pc, #816]	@ (8010ba4 <_ZN15Screen1ViewBaseC1Ev+0xffc>)
 8010872:	f240 112f 	movw	r1, #303	@ 0x12f
 8010876:	48cc      	ldr	r0, [pc, #816]	@ (8010ba8 <_ZN15Screen1ViewBaseC1Ev+0x1000>)
 8010878:	f01f f88e 	bl	802f998 <__assert_func>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 801087c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010880:	f5a3 63c9 	sub.w	r3, r3, #1608	@ 0x648
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8010888:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801088c:	f5a3 63c9 	sub.w	r3, r3, #1608	@ 0x648
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8010894:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010898:	f2a3 634c 	subw	r3, r3, #1612	@ 0x64c
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	f009 fbd1 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80108a2:	4602      	mov	r2, r0
 80108a4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80108a8:	f5a3 63c9 	sub.w	r3, r3, #1608	@ 0x648
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 80108b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80108b4:	f5a3 63c9 	sub.w	r3, r3, #1608	@ 0x648
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80108be:	f2a2 624c 	subw	r2, r2, #1612	@ 0x64c
 80108c2:	6812      	ldr	r2, [r2, #0]
 80108c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80108c6:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 80108c8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80108cc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 80108d6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80108da:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80108e4:	4619      	mov	r1, r3
 80108e6:	4610      	mov	r0, r2
 80108e8:	f009 fa43 	bl	8019d72 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(22, 196, 33));
 80108ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80108f0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f503 7472 	add.w	r4, r3, #968	@ 0x3c8
 80108fa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80108fe:	f2a3 6342 	subw	r3, r3, #1602	@ 0x642
 8010902:	2216      	movs	r2, #22
 8010904:	701a      	strb	r2, [r3, #0]
 8010906:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801090a:	f2a3 6343 	subw	r3, r3, #1603	@ 0x643
 801090e:	22c4      	movs	r2, #196	@ 0xc4
 8010910:	701a      	strb	r2, [r3, #0]
 8010912:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010916:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 801091a:	2221      	movs	r2, #33	@ 0x21
 801091c:	701a      	strb	r2, [r3, #0]
 801091e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010922:	f2a3 6342 	subw	r3, r3, #1602	@ 0x642
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	041a      	lsls	r2, r3, #16
 801092a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801092e:	f2a3 6343 	subw	r3, r3, #1603	@ 0x643
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	021b      	lsls	r3, r3, #8
 8010936:	431a      	orrs	r2, r3
 8010938:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801093c:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	4313      	orrs	r3, r2
 8010944:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010948:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f7fc fd12 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8010954:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010958:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	4619      	mov	r1, r3
 8010960:	4620      	mov	r0, r4
 8010962:	f7ff f87b 	bl	800fa5c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 8010966:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801096a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f503 7266 	add.w	r2, r3, #920	@ 0x398
 8010974:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010978:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 8010982:	4619      	mov	r1, r3
 8010984:	4610      	mov	r0, r2
 8010986:	f7fe fd0b 	bl	800f3a0 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 801098a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801098e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f503 7266 	add.w	r2, r3, #920	@ 0x398
 8010998:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801099c:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 80109a0:	601a      	str	r2, [r3, #0]
 80109a2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80109a6:	f2a3 6341 	subw	r3, r3, #1601	@ 0x641
 80109aa:	2202      	movs	r2, #2
 80109ac:	701a      	strb	r2, [r3, #0]
        lineWidth = width;
 80109ae:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80109b2:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80109bc:	f2a2 6241 	subw	r2, r2, #1601	@ 0x641
 80109c0:	7812      	ldrb	r2, [r2, #0]
 80109c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 80109c6:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 80109c8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80109cc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 80109d6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80109da:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 80109e4:	4619      	mov	r1, r3
 80109e6:	4610      	mov	r0, r2
 80109e8:	f009 f9c3 	bl	8019d72 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1VerticalFrontline.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 80109ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80109f0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f503 7477 	add.w	r4, r3, #988	@ 0x3dc
 80109fa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80109fe:	f2a3 6337 	subw	r3, r3, #1591	@ 0x637
 8010a02:	22ff      	movs	r2, #255	@ 0xff
 8010a04:	701a      	strb	r2, [r3, #0]
 8010a06:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a0a:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8010a0e:	2200      	movs	r2, #0
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a16:	f2a3 6339 	subw	r3, r3, #1593	@ 0x639
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	701a      	strb	r2, [r3, #0]
 8010a1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a22:	f2a3 6337 	subw	r3, r3, #1591	@ 0x637
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	041a      	lsls	r2, r3, #16
 8010a2a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a2e:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	021b      	lsls	r3, r3, #8
 8010a36:	431a      	orrs	r2, r3
 8010a38:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a3c:	f2a3 6339 	subw	r3, r3, #1593	@ 0x639
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	4313      	orrs	r3, r2
 8010a44:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010a48:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fc fc92 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8010a54:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a58:	f2a3 63cc 	subw	r3, r3, #1740	@ 0x6cc
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	4620      	mov	r0, r4
 8010a62:	f7fe fd5d 	bl	800f520 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1VerticalFrontline.setGapLineWidth(1);
 8010a66:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a6a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f503 7277 	add.w	r2, r3, #988	@ 0x3dc
 8010a74:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a78:	f2a3 6334 	subw	r3, r3, #1588	@ 0x634
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a82:	f2a3 6336 	subw	r3, r3, #1590	@ 0x636
 8010a86:	2201      	movs	r2, #1
 8010a88:	801a      	strh	r2, [r3, #0]
     *
     * @see getGapLineWidth
     */
    FORCE_INLINE_FUNCTION void setGapLineWidth(uint16_t width)
    {
        lineWidth = width;
 8010a8a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010a8e:	f2a3 6334 	subw	r3, r3, #1588	@ 0x634
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010a98:	f2a2 6236 	subw	r2, r2, #1590	@ 0x636
 8010a9c:	8812      	ldrh	r2, [r2, #0]
 8010a9e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 8010aa0:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1VerticalFrontline);
 8010aa2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010aa6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8010ab0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ab4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 8010abe:	4619      	mov	r1, r3
 8010ac0:	4610      	mov	r0, r2
 8010ac2:	f009 f956 	bl	8019d72 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>


    dynamicGraph1.addDataPoint(2.95066f);
 8010ac6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010aca:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8010ad4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ad8:	f5a3 63c3 	sub.w	r3, r3, #1560	@ 0x618
 8010adc:	601a      	str	r2, [r3, #0]
 8010ade:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ae2:	f2a3 631c 	subw	r3, r3, #1564	@ 0x61c
 8010ae6:	4a31      	ldr	r2, [pc, #196]	@ (8010bac <_ZN15Screen1ViewBaseC1Ev+0x1004>)
 8010ae8:	601a      	str	r2, [r3, #0]
        return addDataPointScaled(float2scaledY(y));
 8010aea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010aee:	f5a3 63c3 	sub.w	r3, r3, #1560	@ 0x618
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010af8:	f5a3 63c4 	sub.w	r3, r3, #1568	@ 0x620
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b02:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8010b06:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010b0a:	f2a2 621c 	subw	r2, r2, #1564	@ 0x61c
 8010b0e:	6812      	ldr	r2, [r2, #0]
 8010b10:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8010b12:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b16:	f5a3 63c4 	sub.w	r3, r3, #1568	@ 0x620
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b22:	f5a3 63c5 	sub.w	r3, r3, #1576	@ 0x628
 8010b26:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8010b2a:	f2a1 6124 	subw	r1, r1, #1572	@ 0x624
 8010b2e:	6809      	ldr	r1, [r1, #0]
 8010b30:	6019      	str	r1, [r3, #0]
 8010b32:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b36:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8010b3a:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8010b3c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b40:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	ee07 3a90 	vmov	s15, r3
 8010b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b4e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b52:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8010b56:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010b5a:	f5a2 62c5 	sub.w	r2, r2, #1576	@ 0x628
 8010b5e:	ed92 7a00 	vldr	s14, [r2]
 8010b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b66:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8010b6a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b6e:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8010b72:	edd3 7a00 	vldr	s15, [r3]
 8010b76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b7e:	db17      	blt.n	8010bb0 <_ZN15Screen1ViewBaseC1Ev+0x1008>
            return (int)(fs + 0.5f);
 8010b80:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010b84:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8010b88:	edd3 7a00 	vldr	s15, [r3]
 8010b8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b98:	ee17 2a90 	vmov	r2, s15
 8010b9c:	e02e      	b.n	8010bfc <_ZN15Screen1ViewBaseC1Ev+0x1054>
 8010b9e:	bf00      	nop
 8010ba0:	08031174 	.word	0x08031174
 8010ba4:	08031180 	.word	0x08031180
 8010ba8:	080311b4 	.word	0x080311b4
 8010bac:	403cd79d 	.word	0x403cd79d
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8010bb0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010bb4:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8010bb8:	edd3 7a00 	vldr	s15, [r3]
 8010bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bc0:	ee17 3a90 	vmov	r3, s15
 8010bc4:	3b01      	subs	r3, #1
 8010bc6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010bca:	f5a2 62c6 	sub.w	r2, r2, #1584	@ 0x630
 8010bce:	edd2 7a00 	vldr	s15, [r2]
 8010bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bda:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010bde:	f5a2 62c6 	sub.w	r2, r2, #1584	@ 0x630
 8010be2:	ed92 7a00 	vldr	s14, [r2]
 8010be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bea:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8010bee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bf6:	ee17 2a90 	vmov	r2, s15
 8010bfa:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8010bfc:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8010bfe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c02:	f5a3 63c3 	sub.w	r3, r3, #1560	@ 0x618
 8010c06:	4611      	mov	r1, r2
 8010c08:	6818      	ldr	r0, [r3, #0]
 8010c0a:	f009 fa75 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8010c0e:	bf00      	nop
    dynamicGraph1.addDataPoint(3.79379f);
 8010c10:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c14:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8010c1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c22:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c2c:	f5a3 63c0 	sub.w	r3, r3, #1536	@ 0x600
 8010c30:	4ac9      	ldr	r2, [pc, #804]	@ (8010f58 <_ZN15Screen1ViewBaseC1Ev+0x13b0>)
 8010c32:	601a      	str	r2, [r3, #0]
 8010c34:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c38:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c42:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8010c46:	601a      	str	r2, [r3, #0]
 8010c48:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c4c:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8010c50:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010c54:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8010c58:	6812      	ldr	r2, [r2, #0]
 8010c5a:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8010c5c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c60:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c68:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c6c:	f2a3 630c 	subw	r3, r3, #1548	@ 0x60c
 8010c70:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8010c74:	f5a1 61c1 	sub.w	r1, r1, #1544	@ 0x608
 8010c78:	6809      	ldr	r1, [r1, #0]
 8010c7a:	6019      	str	r1, [r3, #0]
 8010c7c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c80:	f5a3 63c2 	sub.w	r3, r3, #1552	@ 0x610
 8010c84:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8010c86:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c8a:	f5a3 63c2 	sub.w	r3, r3, #1552	@ 0x610
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	ee07 3a90 	vmov	s15, r3
 8010c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c98:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010c9c:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8010ca0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010ca4:	f2a2 620c 	subw	r2, r2, #1548	@ 0x60c
 8010ca8:	ed92 7a00 	vldr	s14, [r2]
 8010cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cb0:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8010cb4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010cb8:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8010cbc:	edd3 7a00 	vldr	s15, [r3]
 8010cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc8:	db0e      	blt.n	8010ce8 <_ZN15Screen1ViewBaseC1Ev+0x1140>
            return (int)(fs + 0.5f);
 8010cca:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010cce:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8010cd2:	edd3 7a00 	vldr	s15, [r3]
 8010cd6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010cda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010ce2:	ee17 2a90 	vmov	r2, s15
 8010ce6:	e025      	b.n	8010d34 <_ZN15Screen1ViewBaseC1Ev+0x118c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8010ce8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010cec:	f2a3 6314 	subw	r3, r3, #1556	@ 0x614
 8010cf0:	edd3 7a00 	vldr	s15, [r3]
 8010cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cf8:	ee17 3a90 	vmov	r3, s15
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010d02:	f2a2 6214 	subw	r2, r2, #1556	@ 0x614
 8010d06:	edd2 7a00 	vldr	s15, [r2]
 8010d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d12:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010d16:	f2a2 6214 	subw	r2, r2, #1556	@ 0x614
 8010d1a:	ed92 7a00 	vldr	s14, [r2]
 8010d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d22:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8010d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d2e:	ee17 2a90 	vmov	r2, s15
 8010d32:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8010d34:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8010d36:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d3a:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8010d3e:	4611      	mov	r1, r2
 8010d40:	6818      	ldr	r0, [r3, #0]
 8010d42:	f009 f9d9 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8010d46:	bf00      	nop
    dynamicGraph1.addDataPoint(1.52468f);
 8010d48:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d4c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8010d56:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d5a:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8010d5e:	601a      	str	r2, [r3, #0]
 8010d60:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d64:	f2a3 53e4 	subw	r3, r3, #1508	@ 0x5e4
 8010d68:	4a7c      	ldr	r2, [pc, #496]	@ (8010f5c <_ZN15Screen1ViewBaseC1Ev+0x13b4>)
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d70:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d7a:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8010d7e:	601a      	str	r2, [r3, #0]
 8010d80:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d84:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8010d88:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010d8c:	f2a2 52e4 	subw	r2, r2, #1508	@ 0x5e4
 8010d90:	6812      	ldr	r2, [r2, #0]
 8010d92:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8010d94:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010d98:	f5a3 63bd 	sub.w	r3, r3, #1512	@ 0x5e8
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010da0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010da4:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 8010da8:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8010dac:	f2a1 51ec 	subw	r1, r1, #1516	@ 0x5ec
 8010db0:	6809      	ldr	r1, [r1, #0]
 8010db2:	6019      	str	r1, [r3, #0]
 8010db4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010db8:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8010dbc:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8010dbe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010dc2:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	ee07 3a90 	vmov	s15, r3
 8010dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010dd0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010dd4:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 8010dd8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010ddc:	f5a2 62be 	sub.w	r2, r2, #1520	@ 0x5f0
 8010de0:	ed92 7a00 	vldr	s14, [r2]
 8010de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010de8:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8010dec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010df0:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 8010df4:	edd3 7a00 	vldr	s15, [r3]
 8010df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e00:	db0e      	blt.n	8010e20 <_ZN15Screen1ViewBaseC1Ev+0x1278>
            return (int)(fs + 0.5f);
 8010e02:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010e06:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 8010e0a:	edd3 7a00 	vldr	s15, [r3]
 8010e0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010e12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e1a:	ee17 2a90 	vmov	r2, s15
 8010e1e:	e025      	b.n	8010e6c <_ZN15Screen1ViewBaseC1Ev+0x12c4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8010e20:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010e24:	f5a3 63bf 	sub.w	r3, r3, #1528	@ 0x5f8
 8010e28:	edd3 7a00 	vldr	s15, [r3]
 8010e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e30:	ee17 3a90 	vmov	r3, s15
 8010e34:	3b01      	subs	r3, #1
 8010e36:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010e3a:	f5a2 62bf 	sub.w	r2, r2, #1528	@ 0x5f8
 8010e3e:	edd2 7a00 	vldr	s15, [r2]
 8010e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e4a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010e4e:	f5a2 62bf 	sub.w	r2, r2, #1528	@ 0x5f8
 8010e52:	ed92 7a00 	vldr	s14, [r2]
 8010e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e5a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8010e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e66:	ee17 2a90 	vmov	r2, s15
 8010e6a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8010e6c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8010e6e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010e72:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8010e76:	4611      	mov	r1, r2
 8010e78:	6818      	ldr	r0, [r3, #0]
 8010e7a:	f009 f93d 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8010e7e:	bf00      	nop
    dynamicGraph1.addDataPoint(1.2278f);
 8010e80:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010e84:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8010e8e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010e92:	f2a3 53c4 	subw	r3, r3, #1476	@ 0x5c4
 8010e96:	601a      	str	r2, [r3, #0]
 8010e98:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010e9c:	f5a3 63b9 	sub.w	r3, r3, #1480	@ 0x5c8
 8010ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8010f60 <_ZN15Screen1ViewBaseC1Ev+0x13b8>)
 8010ea2:	601a      	str	r2, [r3, #0]
 8010ea4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ea8:	f2a3 53c4 	subw	r3, r3, #1476	@ 0x5c4
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010eb2:	f2a3 53cc 	subw	r3, r3, #1484	@ 0x5cc
 8010eb6:	601a      	str	r2, [r3, #0]
 8010eb8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ebc:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 8010ec0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010ec4:	f5a2 62b9 	sub.w	r2, r2, #1480	@ 0x5c8
 8010ec8:	6812      	ldr	r2, [r2, #0]
 8010eca:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8010ecc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ed0:	f2a3 53cc 	subw	r3, r3, #1484	@ 0x5cc
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ed8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010edc:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8010ee0:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8010ee4:	f5a1 61ba 	sub.w	r1, r1, #1488	@ 0x5d0
 8010ee8:	6809      	ldr	r1, [r1, #0]
 8010eea:	6019      	str	r1, [r3, #0]
 8010eec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ef0:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8010ef4:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8010ef6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010efa:	f5a3 63bb 	sub.w	r3, r3, #1496	@ 0x5d8
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	ee07 3a90 	vmov	s15, r3
 8010f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f08:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010f0c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8010f10:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010f14:	f2a2 52d4 	subw	r2, r2, #1492	@ 0x5d4
 8010f18:	ed92 7a00 	vldr	s14, [r2]
 8010f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f20:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8010f24:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010f28:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8010f2c:	edd3 7a00 	vldr	s15, [r3]
 8010f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f38:	db14      	blt.n	8010f64 <_ZN15Screen1ViewBaseC1Ev+0x13bc>
            return (int)(fs + 0.5f);
 8010f3a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010f3e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8010f42:	edd3 7a00 	vldr	s15, [r3]
 8010f46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f52:	ee17 2a90 	vmov	r2, s15
 8010f56:	e02b      	b.n	8010fb0 <_ZN15Screen1ViewBaseC1Ev+0x1408>
 8010f58:	4072cd75 	.word	0x4072cd75
 8010f5c:	3fc328b7 	.word	0x3fc328b7
 8010f60:	3f9d288d 	.word	0x3f9d288d
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8010f64:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010f68:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8010f6c:	edd3 7a00 	vldr	s15, [r3]
 8010f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f74:	ee17 3a90 	vmov	r3, s15
 8010f78:	3b01      	subs	r3, #1
 8010f7a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010f7e:	f2a2 52dc 	subw	r2, r2, #1500	@ 0x5dc
 8010f82:	edd2 7a00 	vldr	s15, [r2]
 8010f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f8e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8010f92:	f2a2 52dc 	subw	r2, r2, #1500	@ 0x5dc
 8010f96:	ed92 7a00 	vldr	s14, [r2]
 8010f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f9e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8010fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010faa:	ee17 2a90 	vmov	r2, s15
 8010fae:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8010fb0:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8010fb2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010fb6:	f2a3 53c4 	subw	r3, r3, #1476	@ 0x5c4
 8010fba:	4611      	mov	r1, r2
 8010fbc:	6818      	ldr	r0, [r3, #0]
 8010fbe:	f009 f89b 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8010fc2:	bf00      	nop
    dynamicGraph1.addDataPoint(2.02197f);
 8010fc4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010fc8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8010fd2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010fd6:	f5a3 63b5 	sub.w	r3, r3, #1448	@ 0x5a8
 8010fda:	601a      	str	r2, [r3, #0]
 8010fdc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010fe0:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 8010fe4:	4ac9      	ldr	r2, [pc, #804]	@ (801130c <_ZN15Screen1ViewBaseC1Ev+0x1764>)
 8010fe6:	601a      	str	r2, [r3, #0]
 8010fe8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010fec:	f5a3 63b5 	sub.w	r3, r3, #1448	@ 0x5a8
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8010ff6:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8010ffa:	601a      	str	r2, [r3, #0]
 8010ffc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011000:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 8011004:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011008:	f2a2 52ac 	subw	r2, r2, #1452	@ 0x5ac
 801100c:	6812      	ldr	r2, [r2, #0]
 801100e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011010:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011014:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801101c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011020:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 8011024:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011028:	f2a1 51b4 	subw	r1, r1, #1460	@ 0x5b4
 801102c:	6809      	ldr	r1, [r1, #0]
 801102e:	6019      	str	r1, [r3, #0]
 8011030:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011034:	f2a3 53bc 	subw	r3, r3, #1468	@ 0x5bc
 8011038:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801103a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801103e:	f2a3 53bc 	subw	r3, r3, #1468	@ 0x5bc
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	ee07 3a90 	vmov	s15, r3
 8011048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801104c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011050:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8011054:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011058:	f5a2 62b7 	sub.w	r2, r2, #1464	@ 0x5b8
 801105c:	ed92 7a00 	vldr	s14, [r2]
 8011060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011064:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011068:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801106c:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8011070:	edd3 7a00 	vldr	s15, [r3]
 8011074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107c:	db0e      	blt.n	801109c <_ZN15Screen1ViewBaseC1Ev+0x14f4>
            return (int)(fs + 0.5f);
 801107e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011082:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8011086:	edd3 7a00 	vldr	s15, [r3]
 801108a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801108e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011096:	ee17 2a90 	vmov	r2, s15
 801109a:	e025      	b.n	80110e8 <_ZN15Screen1ViewBaseC1Ev+0x1540>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801109c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80110a0:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 80110a4:	edd3 7a00 	vldr	s15, [r3]
 80110a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110ac:	ee17 3a90 	vmov	r3, s15
 80110b0:	3b01      	subs	r3, #1
 80110b2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80110b6:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 80110ba:	edd2 7a00 	vldr	s15, [r2]
 80110be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110c6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80110ca:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 80110ce:	ed92 7a00 	vldr	s14, [r2]
 80110d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110d6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80110da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110e2:	ee17 2a90 	vmov	r2, s15
 80110e6:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80110e8:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80110ea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80110ee:	f5a3 63b5 	sub.w	r3, r3, #1448	@ 0x5a8
 80110f2:	4611      	mov	r1, r2
 80110f4:	6818      	ldr	r0, [r3, #0]
 80110f6:	f008 ffff 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80110fa:	bf00      	nop
    dynamicGraph1.addDataPoint(0.60068f);
 80110fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011100:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 801110a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801110e:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011118:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 801111c:	4a7c      	ldr	r2, [pc, #496]	@ (8011310 <_ZN15Screen1ViewBaseC1Ev+0x1768>)
 801111e:	601a      	str	r2, [r3, #0]
 8011120:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011124:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801112e:	f2a3 5394 	subw	r3, r3, #1428	@ 0x594
 8011132:	601a      	str	r2, [r3, #0]
 8011134:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011138:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 801113c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011140:	f5a2 62b2 	sub.w	r2, r2, #1424	@ 0x590
 8011144:	6812      	ldr	r2, [r2, #0]
 8011146:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011148:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801114c:	f2a3 5394 	subw	r3, r3, #1428	@ 0x594
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011154:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011158:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 801115c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011160:	f5a1 61b3 	sub.w	r1, r1, #1432	@ 0x598
 8011164:	6809      	ldr	r1, [r1, #0]
 8011166:	6019      	str	r1, [r3, #0]
 8011168:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801116c:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8011170:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8011172:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011176:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	ee07 3a90 	vmov	s15, r3
 8011180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011184:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011188:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 801118c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011190:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 8011194:	ed92 7a00 	vldr	s14, [r2]
 8011198:	ee67 7a27 	vmul.f32	s15, s14, s15
 801119c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80111a0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80111a4:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 80111a8:	edd3 7a00 	vldr	s15, [r3]
 80111ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	db0e      	blt.n	80111d4 <_ZN15Screen1ViewBaseC1Ev+0x162c>
            return (int)(fs + 0.5f);
 80111b6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80111ba:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 80111be:	edd3 7a00 	vldr	s15, [r3]
 80111c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80111c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111ce:	ee17 2a90 	vmov	r2, s15
 80111d2:	e025      	b.n	8011220 <_ZN15Screen1ViewBaseC1Ev+0x1678>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80111d4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80111d8:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 80111dc:	edd3 7a00 	vldr	s15, [r3]
 80111e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111e4:	ee17 3a90 	vmov	r3, s15
 80111e8:	3b01      	subs	r3, #1
 80111ea:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80111ee:	f2a2 52a4 	subw	r2, r2, #1444	@ 0x5a4
 80111f2:	edd2 7a00 	vldr	s15, [r2]
 80111f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111fe:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011202:	f2a2 52a4 	subw	r2, r2, #1444	@ 0x5a4
 8011206:	ed92 7a00 	vldr	s14, [r2]
 801120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801120e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801121a:	ee17 2a90 	vmov	r2, s15
 801121e:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011220:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011222:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011226:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
 801122a:	4611      	mov	r1, r2
 801122c:	6818      	ldr	r0, [r3, #0]
 801122e:	f008 ff63 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011232:	bf00      	nop
    dynamicGraph1.addDataPoint(1.23838f);
 8011234:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011238:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011242:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011246:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
 801124a:	601a      	str	r2, [r3, #0]
 801124c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011250:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
 8011254:	4a2f      	ldr	r2, [pc, #188]	@ (8011314 <_ZN15Screen1ViewBaseC1Ev+0x176c>)
 8011256:	601a      	str	r2, [r3, #0]
 8011258:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801125c:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011266:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 801126a:	601a      	str	r2, [r3, #0]
 801126c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011270:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
 8011274:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011278:	f2a2 5274 	subw	r2, r2, #1396	@ 0x574
 801127c:	6812      	ldr	r2, [r2, #0]
 801127e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011280:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011284:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801128c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011290:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 8011294:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011298:	f2a1 517c 	subw	r1, r1, #1404	@ 0x57c
 801129c:	6809      	ldr	r1, [r1, #0]
 801129e:	6019      	str	r1, [r3, #0]
 80112a0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80112a4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 80112a8:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80112aa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80112ae:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	ee07 3a90 	vmov	s15, r3
 80112b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112bc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80112c0:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 80112c4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80112c8:	f5a2 62b0 	sub.w	r2, r2, #1408	@ 0x580
 80112cc:	ed92 7a00 	vldr	s14, [r2]
 80112d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112d4:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80112d8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80112dc:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 80112e0:	edd3 7a00 	vldr	s15, [r3]
 80112e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80112e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ec:	db14      	blt.n	8011318 <_ZN15Screen1ViewBaseC1Ev+0x1770>
            return (int)(fs + 0.5f);
 80112ee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80112f2:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 80112f6:	edd3 7a00 	vldr	s15, [r3]
 80112fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80112fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011306:	ee17 2a90 	vmov	r2, s15
 801130a:	e02b      	b.n	8011364 <_ZN15Screen1ViewBaseC1Ev+0x17bc>
 801130c:	400167f5 	.word	0x400167f5
 8011310:	3f19c62a 	.word	0x3f19c62a
 8011314:	3f9e833c 	.word	0x3f9e833c
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011318:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801131c:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8011320:	edd3 7a00 	vldr	s15, [r3]
 8011324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011328:	ee17 3a90 	vmov	r3, s15
 801132c:	3b01      	subs	r3, #1
 801132e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011332:	f5a2 62b1 	sub.w	r2, r2, #1416	@ 0x588
 8011336:	edd2 7a00 	vldr	s15, [r2]
 801133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011342:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011346:	f5a2 62b1 	sub.w	r2, r2, #1416	@ 0x588
 801134a:	ed92 7a00 	vldr	s14, [r2]
 801134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011352:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011356:	ee77 7a87 	vadd.f32	s15, s15, s14
 801135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801135e:	ee17 2a90 	vmov	r2, s15
 8011362:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011364:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011366:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801136a:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
 801136e:	4611      	mov	r1, r2
 8011370:	6818      	ldr	r0, [r3, #0]
 8011372:	f008 fec1 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011376:	bf00      	nop
    dynamicGraph1.addDataPoint(3.53298f);
 8011378:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801137c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011386:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801138a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 801138e:	601a      	str	r2, [r3, #0]
 8011390:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011394:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
 8011398:	4ac9      	ldr	r2, [pc, #804]	@ (80116c0 <_ZN15Screen1ViewBaseC1Ev+0x1b18>)
 801139a:	601a      	str	r2, [r3, #0]
 801139c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80113a0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80113aa:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80113b4:	f5a3 63ac 	sub.w	r3, r3, #1376	@ 0x560
 80113b8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80113bc:	f5a2 62ab 	sub.w	r2, r2, #1368	@ 0x558
 80113c0:	6812      	ldr	r2, [r2, #0]
 80113c2:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80113c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80113c8:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80113d4:	f2a3 5364 	subw	r3, r3, #1380	@ 0x564
 80113d8:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80113dc:	f5a1 61ac 	sub.w	r1, r1, #1376	@ 0x560
 80113e0:	6809      	ldr	r1, [r1, #0]
 80113e2:	6019      	str	r1, [r3, #0]
 80113e4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80113e8:	f5a3 63ad 	sub.w	r3, r3, #1384	@ 0x568
 80113ec:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80113ee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80113f2:	f5a3 63ad 	sub.w	r3, r3, #1384	@ 0x568
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	ee07 3a90 	vmov	s15, r3
 80113fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011400:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011404:	f2a3 536c 	subw	r3, r3, #1388	@ 0x56c
 8011408:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801140c:	f2a2 5264 	subw	r2, r2, #1380	@ 0x564
 8011410:	ed92 7a00 	vldr	s14, [r2]
 8011414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011418:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 801141c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011420:	f2a3 536c 	subw	r3, r3, #1388	@ 0x56c
 8011424:	edd3 7a00 	vldr	s15, [r3]
 8011428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011430:	db0e      	blt.n	8011450 <_ZN15Screen1ViewBaseC1Ev+0x18a8>
            return (int)(fs + 0.5f);
 8011432:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011436:	f2a3 536c 	subw	r3, r3, #1388	@ 0x56c
 801143a:	edd3 7a00 	vldr	s15, [r3]
 801143e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011442:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801144a:	ee17 2a90 	vmov	r2, s15
 801144e:	e025      	b.n	801149c <_ZN15Screen1ViewBaseC1Ev+0x18f4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011450:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011454:	f2a3 536c 	subw	r3, r3, #1388	@ 0x56c
 8011458:	edd3 7a00 	vldr	s15, [r3]
 801145c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011460:	ee17 3a90 	vmov	r3, s15
 8011464:	3b01      	subs	r3, #1
 8011466:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801146a:	f2a2 526c 	subw	r2, r2, #1388	@ 0x56c
 801146e:	edd2 7a00 	vldr	s15, [r2]
 8011472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801147a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801147e:	f2a2 526c 	subw	r2, r2, #1388	@ 0x56c
 8011482:	ed92 7a00 	vldr	s14, [r2]
 8011486:	ee77 7a67 	vsub.f32	s15, s14, s15
 801148a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801148e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011496:	ee17 2a90 	vmov	r2, s15
 801149a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 801149c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801149e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80114a2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80114a6:	4611      	mov	r1, r2
 80114a8:	6818      	ldr	r0, [r3, #0]
 80114aa:	f008 fe25 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80114ae:	bf00      	nop
    dynamicGraph1.addDataPoint(2.693f);
 80114b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80114b4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 80114be:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80114c2:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80114c6:	601a      	str	r2, [r3, #0]
 80114c8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80114cc:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 80114d0:	4a7c      	ldr	r2, [pc, #496]	@ (80116c4 <_ZN15Screen1ViewBaseC1Ev+0x1b1c>)
 80114d2:	601a      	str	r2, [r3, #0]
 80114d4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80114d8:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80114e2:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 80114e6:	601a      	str	r2, [r3, #0]
 80114e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80114ec:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80114f0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80114f4:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 80114f8:	6812      	ldr	r2, [r2, #0]
 80114fa:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80114fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011500:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011508:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801150c:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
 8011510:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011514:	f2a1 5144 	subw	r1, r1, #1348	@ 0x544
 8011518:	6809      	ldr	r1, [r1, #0]
 801151a:	6019      	str	r1, [r3, #0]
 801151c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011520:	f2a3 534c 	subw	r3, r3, #1356	@ 0x54c
 8011524:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8011526:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801152a:	f2a3 534c 	subw	r3, r3, #1356	@ 0x54c
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	ee07 3a90 	vmov	s15, r3
 8011534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011538:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801153c:	f5a3 63aa 	sub.w	r3, r3, #1360	@ 0x550
 8011540:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011544:	f5a2 62a9 	sub.w	r2, r2, #1352	@ 0x548
 8011548:	ed92 7a00 	vldr	s14, [r2]
 801154c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011550:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011554:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011558:	f5a3 63aa 	sub.w	r3, r3, #1360	@ 0x550
 801155c:	edd3 7a00 	vldr	s15, [r3]
 8011560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011568:	db0e      	blt.n	8011588 <_ZN15Screen1ViewBaseC1Ev+0x19e0>
            return (int)(fs + 0.5f);
 801156a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801156e:	f5a3 63aa 	sub.w	r3, r3, #1360	@ 0x550
 8011572:	edd3 7a00 	vldr	s15, [r3]
 8011576:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801157a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801157e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011582:	ee17 2a90 	vmov	r2, s15
 8011586:	e025      	b.n	80115d4 <_ZN15Screen1ViewBaseC1Ev+0x1a2c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011588:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801158c:	f5a3 63aa 	sub.w	r3, r3, #1360	@ 0x550
 8011590:	edd3 7a00 	vldr	s15, [r3]
 8011594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011598:	ee17 3a90 	vmov	r3, s15
 801159c:	3b01      	subs	r3, #1
 801159e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80115a2:	f5a2 62aa 	sub.w	r2, r2, #1360	@ 0x550
 80115a6:	edd2 7a00 	vldr	s15, [r2]
 80115aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115b2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80115b6:	f5a2 62aa 	sub.w	r2, r2, #1360	@ 0x550
 80115ba:	ed92 7a00 	vldr	s14, [r2]
 80115be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115c2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80115c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115ce:	ee17 2a90 	vmov	r2, s15
 80115d2:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80115d4:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80115d6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80115da:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
 80115de:	4611      	mov	r1, r2
 80115e0:	6818      	ldr	r0, [r3, #0]
 80115e2:	f008 fd89 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80115e6:	bf00      	nop
    dynamicGraph1.addDataPoint(2.07269f);
 80115e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80115ec:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 80115f6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80115fa:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80115fe:	601a      	str	r2, [r3, #0]
 8011600:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011604:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8011608:	4a2f      	ldr	r2, [pc, #188]	@ (80116c8 <_ZN15Screen1ViewBaseC1Ev+0x1b20>)
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011610:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8011614:	681a      	ldr	r2, [r3, #0]
 8011616:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801161a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 801161e:	601a      	str	r2, [r3, #0]
 8011620:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011624:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8011628:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801162c:	f5a2 62a4 	sub.w	r2, r2, #1312	@ 0x520
 8011630:	6812      	ldr	r2, [r2, #0]
 8011632:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011634:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011638:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011640:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011644:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8011648:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 801164c:	f5a1 61a5 	sub.w	r1, r1, #1320	@ 0x528
 8011650:	6809      	ldr	r1, [r1, #0]
 8011652:	6019      	str	r1, [r3, #0]
 8011654:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011658:	f5a3 63a6 	sub.w	r3, r3, #1328	@ 0x530
 801165c:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801165e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011662:	f5a3 63a6 	sub.w	r3, r3, #1328	@ 0x530
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	ee07 3a90 	vmov	s15, r3
 801166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011670:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011674:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8011678:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801167c:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 8011680:	ed92 7a00 	vldr	s14, [r2]
 8011684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011688:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 801168c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011690:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8011694:	edd3 7a00 	vldr	s15, [r3]
 8011698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a0:	db14      	blt.n	80116cc <_ZN15Screen1ViewBaseC1Ev+0x1b24>
            return (int)(fs + 0.5f);
 80116a2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80116a6:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 80116aa:	edd3 7a00 	vldr	s15, [r3]
 80116ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80116b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80116b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116ba:	ee17 2a90 	vmov	r2, s15
 80116be:	e02b      	b.n	8011718 <_ZN15Screen1ViewBaseC1Ev+0x1b70>
 80116c0:	40621c58 	.word	0x40621c58
 80116c4:	402c5a1d 	.word	0x402c5a1d
 80116c8:	4004a6f4 	.word	0x4004a6f4
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80116cc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80116d0:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 80116d4:	edd3 7a00 	vldr	s15, [r3]
 80116d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116dc:	ee17 3a90 	vmov	r3, s15
 80116e0:	3b01      	subs	r3, #1
 80116e2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80116e6:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 80116ea:	edd2 7a00 	vldr	s15, [r2]
 80116ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80116f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116f6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80116fa:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 80116fe:	ed92 7a00 	vldr	s14, [r2]
 8011702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011706:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801170a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801170e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011712:	ee17 2a90 	vmov	r2, s15
 8011716:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011718:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801171a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801171e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8011722:	4611      	mov	r1, r2
 8011724:	6818      	ldr	r0, [r3, #0]
 8011726:	f008 fce7 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801172a:	bf00      	nop
    dynamicGraph1.addDataPoint(3.08029f);
 801172c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011730:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 801173a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801173e:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8011742:	601a      	str	r2, [r3, #0]
 8011744:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011748:	f2a3 5304 	subw	r3, r3, #1284	@ 0x504
 801174c:	4ac9      	ldr	r2, [pc, #804]	@ (8011a74 <_ZN15Screen1ViewBaseC1Ev+0x1ecc>)
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011754:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801175e:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 8011762:	601a      	str	r2, [r3, #0]
 8011764:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011768:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 801176c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011770:	f2a2 5204 	subw	r2, r2, #1284	@ 0x504
 8011774:	6812      	ldr	r2, [r2, #0]
 8011776:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011778:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801177c:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011784:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011788:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 801178c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011790:	f2a1 510c 	subw	r1, r1, #1292	@ 0x50c
 8011794:	6809      	ldr	r1, [r1, #0]
 8011796:	6019      	str	r1, [r3, #0]
 8011798:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801179c:	f2a3 5314 	subw	r3, r3, #1300	@ 0x514
 80117a0:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80117a2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80117a6:	f2a3 5314 	subw	r3, r3, #1300	@ 0x514
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	ee07 3a90 	vmov	s15, r3
 80117b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80117b8:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80117bc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80117c0:	f5a2 62a2 	sub.w	r2, r2, #1296	@ 0x510
 80117c4:	ed92 7a00 	vldr	s14, [r2]
 80117c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117cc:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80117d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80117d4:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80117d8:	edd3 7a00 	vldr	s15, [r3]
 80117dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e4:	db0e      	blt.n	8011804 <_ZN15Screen1ViewBaseC1Ev+0x1c5c>
            return (int)(fs + 0.5f);
 80117e6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80117ea:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80117ee:	edd3 7a00 	vldr	s15, [r3]
 80117f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80117f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80117fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117fe:	ee17 2a90 	vmov	r2, s15
 8011802:	e025      	b.n	8011850 <_ZN15Screen1ViewBaseC1Ev+0x1ca8>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011804:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011808:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 801180c:	edd3 7a00 	vldr	s15, [r3]
 8011810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011814:	ee17 3a90 	vmov	r3, s15
 8011818:	3b01      	subs	r3, #1
 801181a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801181e:	f5a2 62a3 	sub.w	r2, r2, #1304	@ 0x518
 8011822:	edd2 7a00 	vldr	s15, [r2]
 8011826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801182e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011832:	f5a2 62a3 	sub.w	r2, r2, #1304	@ 0x518
 8011836:	ed92 7a00 	vldr	s14, [r2]
 801183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801183e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011842:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801184a:	ee17 2a90 	vmov	r2, s15
 801184e:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011850:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011852:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011856:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 801185a:	4611      	mov	r1, r2
 801185c:	6818      	ldr	r0, [r3, #0]
 801185e:	f008 fc4b 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011862:	bf00      	nop
    dynamicGraph1.addDataPoint(1.40097f);
 8011864:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011868:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011872:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011876:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011880:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8011884:	4a7c      	ldr	r2, [pc, #496]	@ (8011a78 <_ZN15Screen1ViewBaseC1Ev+0x1ed0>)
 8011886:	601a      	str	r2, [r3, #0]
 8011888:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801188c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011896:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 801189a:	601a      	str	r2, [r3, #0]
 801189c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80118a0:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 80118a4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80118a8:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80118ac:	6812      	ldr	r2, [r2, #0]
 80118ae:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80118b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80118b4:	f2a3 43ec 	subw	r3, r3, #1260	@ 0x4ec
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80118bc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80118c0:	f2a3 43f4 	subw	r3, r3, #1268	@ 0x4f4
 80118c4:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80118c8:	f5a1 619e 	sub.w	r1, r1, #1264	@ 0x4f0
 80118cc:	6809      	ldr	r1, [r1, #0]
 80118ce:	6019      	str	r1, [r3, #0]
 80118d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80118d4:	f5a3 639f 	sub.w	r3, r3, #1272	@ 0x4f8
 80118d8:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80118da:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80118de:	f5a3 639f 	sub.w	r3, r3, #1272	@ 0x4f8
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	ee07 3a90 	vmov	s15, r3
 80118e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80118f0:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 80118f4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80118f8:	f2a2 42f4 	subw	r2, r2, #1268	@ 0x4f4
 80118fc:	ed92 7a00 	vldr	s14, [r2]
 8011900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011904:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011908:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801190c:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 8011910:	edd3 7a00 	vldr	s15, [r3]
 8011914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191c:	db0e      	blt.n	801193c <_ZN15Screen1ViewBaseC1Ev+0x1d94>
            return (int)(fs + 0.5f);
 801191e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011922:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 8011926:	edd3 7a00 	vldr	s15, [r3]
 801192a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801192e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011936:	ee17 2a90 	vmov	r2, s15
 801193a:	e025      	b.n	8011988 <_ZN15Screen1ViewBaseC1Ev+0x1de0>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801193c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011940:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 8011944:	edd3 7a00 	vldr	s15, [r3]
 8011948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801194c:	ee17 3a90 	vmov	r3, s15
 8011950:	3b01      	subs	r3, #1
 8011952:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011956:	f2a2 42fc 	subw	r2, r2, #1276	@ 0x4fc
 801195a:	edd2 7a00 	vldr	s15, [r2]
 801195e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011966:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801196a:	f2a2 42fc 	subw	r2, r2, #1276	@ 0x4fc
 801196e:	ed92 7a00 	vldr	s14, [r2]
 8011972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011976:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801197a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801197e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011982:	ee17 2a90 	vmov	r2, s15
 8011986:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011988:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801198a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801198e:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8011992:	4611      	mov	r1, r2
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	f008 fbaf 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801199a:	bf00      	nop
    dynamicGraph1.addDataPoint(0.10393f);
 801199c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119a0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 80119aa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119ae:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80119b2:	601a      	str	r2, [r3, #0]
 80119b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119b8:	f2a3 43cc 	subw	r3, r3, #1228	@ 0x4cc
 80119bc:	4a2f      	ldr	r2, [pc, #188]	@ (8011a7c <_ZN15Screen1ViewBaseC1Ev+0x1ed4>)
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119c4:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119ce:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 80119d2:	601a      	str	r2, [r3, #0]
 80119d4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119d8:	f2a3 43d4 	subw	r3, r3, #1236	@ 0x4d4
 80119dc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80119e0:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80119e4:	6812      	ldr	r2, [r2, #0]
 80119e6:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80119e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119ec:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119f4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80119f8:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80119fc:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011a00:	f2a1 41d4 	subw	r1, r1, #1236	@ 0x4d4
 8011a04:	6809      	ldr	r1, [r1, #0]
 8011a06:	6019      	str	r1, [r3, #0]
 8011a08:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011a0c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8011a10:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8011a12:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011a16:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	ee07 3a90 	vmov	s15, r3
 8011a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a24:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011a28:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8011a2c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011a30:	f5a2 629b 	sub.w	r2, r2, #1240	@ 0x4d8
 8011a34:	ed92 7a00 	vldr	s14, [r2]
 8011a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a3c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011a40:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011a44:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8011a48:	edd3 7a00 	vldr	s15, [r3]
 8011a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a54:	db14      	blt.n	8011a80 <_ZN15Screen1ViewBaseC1Ev+0x1ed8>
            return (int)(fs + 0.5f);
 8011a56:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011a5a:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8011a5e:	edd3 7a00 	vldr	s15, [r3]
 8011a62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a6e:	ee17 2a90 	vmov	r2, s15
 8011a72:	e02b      	b.n	8011acc <_ZN15Screen1ViewBaseC1Ev+0x1f24>
 8011a74:	40452379 	.word	0x40452379
 8011a78:	3fb352fc 	.word	0x3fb352fc
 8011a7c:	3dd4d940 	.word	0x3dd4d940
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011a80:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011a84:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8011a88:	edd3 7a00 	vldr	s15, [r3]
 8011a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a90:	ee17 3a90 	vmov	r3, s15
 8011a94:	3b01      	subs	r3, #1
 8011a96:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011a9a:	f5a2 629c 	sub.w	r2, r2, #1248	@ 0x4e0
 8011a9e:	edd2 7a00 	vldr	s15, [r2]
 8011aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011aaa:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011aae:	f5a2 629c 	sub.w	r2, r2, #1248	@ 0x4e0
 8011ab2:	ed92 7a00 	vldr	s14, [r2]
 8011ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aba:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ac6:	ee17 2a90 	vmov	r2, s15
 8011aca:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011acc:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011ace:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ad2:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	6818      	ldr	r0, [r3, #0]
 8011ada:	f008 fb0d 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011ade:	bf00      	nop
    dynamicGraph1.addDataPoint(1.9729f);
 8011ae0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ae4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011aee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011af2:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 8011af6:	601a      	str	r2, [r3, #0]
 8011af8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011afc:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8011b00:	4ac9      	ldr	r2, [pc, #804]	@ (8011e28 <_ZN15Screen1ViewBaseC1Ev+0x2280>)
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b08:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b12:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8011b16:	601a      	str	r2, [r3, #0]
 8011b18:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b1c:	f5a3 6397 	sub.w	r3, r3, #1208	@ 0x4b8
 8011b20:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011b24:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8011b28:	6812      	ldr	r2, [r2, #0]
 8011b2a:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011b2c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b30:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b38:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b3c:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8011b40:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011b44:	f5a1 6197 	sub.w	r1, r1, #1208	@ 0x4b8
 8011b48:	6809      	ldr	r1, [r1, #0]
 8011b4a:	6019      	str	r1, [r3, #0]
 8011b4c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b50:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8011b54:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8011b56:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b5a:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	ee07 3a90 	vmov	s15, r3
 8011b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b68:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b6c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8011b70:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011b74:	f2a2 42bc 	subw	r2, r2, #1212	@ 0x4bc
 8011b78:	ed92 7a00 	vldr	s14, [r2]
 8011b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b80:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011b84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b88:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8011b8c:	edd3 7a00 	vldr	s15, [r3]
 8011b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b98:	db0e      	blt.n	8011bb8 <_ZN15Screen1ViewBaseC1Ev+0x2010>
            return (int)(fs + 0.5f);
 8011b9a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011b9e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8011ba2:	edd3 7a00 	vldr	s15, [r3]
 8011ba6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011baa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bb2:	ee17 2a90 	vmov	r2, s15
 8011bb6:	e025      	b.n	8011c04 <_ZN15Screen1ViewBaseC1Ev+0x205c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011bb8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011bbc:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8011bc0:	edd3 7a00 	vldr	s15, [r3]
 8011bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bc8:	ee17 3a90 	vmov	r3, s15
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011bd2:	f2a2 42c4 	subw	r2, r2, #1220	@ 0x4c4
 8011bd6:	edd2 7a00 	vldr	s15, [r2]
 8011bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011be2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011be6:	f2a2 42c4 	subw	r2, r2, #1220	@ 0x4c4
 8011bea:	ed92 7a00 	vldr	s14, [r2]
 8011bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bf2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bfe:	ee17 2a90 	vmov	r2, s15
 8011c02:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011c04:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011c06:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c0a:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 8011c0e:	4611      	mov	r1, r2
 8011c10:	6818      	ldr	r0, [r3, #0]
 8011c12:	f008 fa71 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011c16:	bf00      	nop
    dynamicGraph1.addDataPoint(2.16159f);
 8011c18:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c1c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011c26:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c2a:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 8011c2e:	601a      	str	r2, [r3, #0]
 8011c30:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c34:	f2a3 4394 	subw	r3, r3, #1172	@ 0x494
 8011c38:	4a7c      	ldr	r2, [pc, #496]	@ (8011e2c <_ZN15Screen1ViewBaseC1Ev+0x2284>)
 8011c3a:	601a      	str	r2, [r3, #0]
 8011c3c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c40:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c4a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8011c4e:	601a      	str	r2, [r3, #0]
 8011c50:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c54:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8011c58:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011c5c:	f2a2 4294 	subw	r2, r2, #1172	@ 0x494
 8011c60:	6812      	ldr	r2, [r2, #0]
 8011c62:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011c64:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c68:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c70:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c74:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 8011c78:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011c7c:	f2a1 419c 	subw	r1, r1, #1180	@ 0x49c
 8011c80:	6809      	ldr	r1, [r1, #0]
 8011c82:	6019      	str	r1, [r3, #0]
 8011c84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c88:	f2a3 43a4 	subw	r3, r3, #1188	@ 0x4a4
 8011c8c:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8011c8e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011c92:	f2a3 43a4 	subw	r3, r3, #1188	@ 0x4a4
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	ee07 3a90 	vmov	s15, r3
 8011c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ca0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ca4:	f5a3 6395 	sub.w	r3, r3, #1192	@ 0x4a8
 8011ca8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011cac:	f5a2 6294 	sub.w	r2, r2, #1184	@ 0x4a0
 8011cb0:	ed92 7a00 	vldr	s14, [r2]
 8011cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cb8:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011cbc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011cc0:	f5a3 6395 	sub.w	r3, r3, #1192	@ 0x4a8
 8011cc4:	edd3 7a00 	vldr	s15, [r3]
 8011cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd0:	db0e      	blt.n	8011cf0 <_ZN15Screen1ViewBaseC1Ev+0x2148>
            return (int)(fs + 0.5f);
 8011cd2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011cd6:	f5a3 6395 	sub.w	r3, r3, #1192	@ 0x4a8
 8011cda:	edd3 7a00 	vldr	s15, [r3]
 8011cde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011ce2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cea:	ee17 2a90 	vmov	r2, s15
 8011cee:	e025      	b.n	8011d3c <_ZN15Screen1ViewBaseC1Ev+0x2194>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011cf0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011cf4:	f5a3 6395 	sub.w	r3, r3, #1192	@ 0x4a8
 8011cf8:	edd3 7a00 	vldr	s15, [r3]
 8011cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d00:	ee17 3a90 	vmov	r3, s15
 8011d04:	3b01      	subs	r3, #1
 8011d06:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011d0a:	f5a2 6295 	sub.w	r2, r2, #1192	@ 0x4a8
 8011d0e:	edd2 7a00 	vldr	s15, [r2]
 8011d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d1a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011d1e:	f5a2 6295 	sub.w	r2, r2, #1192	@ 0x4a8
 8011d22:	ed92 7a00 	vldr	s14, [r2]
 8011d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d2a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d36:	ee17 2a90 	vmov	r2, s15
 8011d3a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011d3c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011d3e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011d42:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
 8011d46:	4611      	mov	r1, r2
 8011d48:	6818      	ldr	r0, [r3, #0]
 8011d4a:	f008 f9d5 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011d4e:	bf00      	nop
    dynamicGraph1.addDataPoint(1.64855f);
 8011d50:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011d54:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011d5e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011d62:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8011d66:	601a      	str	r2, [r3, #0]
 8011d68:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011d6c:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8011d70:	4a2f      	ldr	r2, [pc, #188]	@ (8011e30 <_ZN15Screen1ViewBaseC1Ev+0x2288>)
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011d78:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011d82:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8011d86:	601a      	str	r2, [r3, #0]
 8011d88:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011d8c:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8011d90:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011d94:	f5a2 628f 	sub.w	r2, r2, #1144	@ 0x478
 8011d98:	6812      	ldr	r2, [r2, #0]
 8011d9a:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011d9c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011da0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011da8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011dac:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 8011db0:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011db4:	f5a1 6190 	sub.w	r1, r1, #1152	@ 0x480
 8011db8:	6809      	ldr	r1, [r1, #0]
 8011dba:	6019      	str	r1, [r3, #0]
 8011dbc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011dc0:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 8011dc4:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8011dc6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011dca:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	ee07 3a90 	vmov	s15, r3
 8011dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dd8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ddc:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 8011de0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011de4:	f2a2 4284 	subw	r2, r2, #1156	@ 0x484
 8011de8:	ed92 7a00 	vldr	s14, [r2]
 8011dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011df0:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011df4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011df8:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 8011dfc:	edd3 7a00 	vldr	s15, [r3]
 8011e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e08:	db14      	blt.n	8011e34 <_ZN15Screen1ViewBaseC1Ev+0x228c>
            return (int)(fs + 0.5f);
 8011e0a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011e0e:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 8011e12:	edd3 7a00 	vldr	s15, [r3]
 8011e16:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011e1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e22:	ee17 2a90 	vmov	r2, s15
 8011e26:	e02b      	b.n	8011e80 <_ZN15Screen1ViewBaseC1Ev+0x22d8>
 8011e28:	3ffc87fd 	.word	0x3ffc87fd
 8011e2c:	400a577e 	.word	0x400a577e
 8011e30:	3fd303b0 	.word	0x3fd303b0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011e34:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011e38:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
 8011e3c:	edd3 7a00 	vldr	s15, [r3]
 8011e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e44:	ee17 3a90 	vmov	r3, s15
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011e4e:	f2a2 428c 	subw	r2, r2, #1164	@ 0x48c
 8011e52:	edd2 7a00 	vldr	s15, [r2]
 8011e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e5e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011e62:	f2a2 428c 	subw	r2, r2, #1164	@ 0x48c
 8011e66:	ed92 7a00 	vldr	s14, [r2]
 8011e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e6e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e7a:	ee17 2a90 	vmov	r2, s15
 8011e7e:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011e80:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011e82:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011e86:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	6818      	ldr	r0, [r3, #0]
 8011e8e:	f008 f933 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011e92:	bf00      	nop
    dynamicGraph1.addDataPoint(3.54788f);
 8011e94:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011e98:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011ea2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ea6:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8011eaa:	601a      	str	r2, [r3, #0]
 8011eac:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011eb0:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8011eb4:	4ac9      	ldr	r2, [pc, #804]	@ (80121dc <_ZN15Screen1ViewBaseC1Ev+0x2634>)
 8011eb6:	601a      	str	r2, [r3, #0]
 8011eb8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ebc:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ec6:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8011eca:	601a      	str	r2, [r3, #0]
 8011ecc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ed0:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 8011ed4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011ed8:	f2a2 425c 	subw	r2, r2, #1116	@ 0x45c
 8011edc:	6812      	ldr	r2, [r2, #0]
 8011ede:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8011ee0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ee4:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011eec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ef0:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8011ef4:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8011ef8:	f2a1 4164 	subw	r1, r1, #1124	@ 0x464
 8011efc:	6809      	ldr	r1, [r1, #0]
 8011efe:	6019      	str	r1, [r3, #0]
 8011f00:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011f04:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8011f08:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8011f0a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011f0e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	ee07 3a90 	vmov	s15, r3
 8011f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f1c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011f20:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8011f24:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011f28:	f5a2 628d 	sub.w	r2, r2, #1128	@ 0x468
 8011f2c:	ed92 7a00 	vldr	s14, [r2]
 8011f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f34:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8011f38:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011f3c:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8011f40:	edd3 7a00 	vldr	s15, [r3]
 8011f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4c:	db0e      	blt.n	8011f6c <_ZN15Screen1ViewBaseC1Ev+0x23c4>
            return (int)(fs + 0.5f);
 8011f4e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011f52:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8011f56:	edd3 7a00 	vldr	s15, [r3]
 8011f5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f66:	ee17 2a90 	vmov	r2, s15
 8011f6a:	e025      	b.n	8011fb8 <_ZN15Screen1ViewBaseC1Ev+0x2410>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8011f6c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011f70:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8011f74:	edd3 7a00 	vldr	s15, [r3]
 8011f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f7c:	ee17 3a90 	vmov	r3, s15
 8011f80:	3b01      	subs	r3, #1
 8011f82:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011f86:	f5a2 628e 	sub.w	r2, r2, #1136	@ 0x470
 8011f8a:	edd2 7a00 	vldr	s15, [r2]
 8011f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f96:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8011f9a:	f5a2 628e 	sub.w	r2, r2, #1136	@ 0x470
 8011f9e:	ed92 7a00 	vldr	s14, [r2]
 8011fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fa6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8011faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fb2:	ee17 2a90 	vmov	r2, s15
 8011fb6:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8011fb8:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8011fba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011fbe:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	6818      	ldr	r0, [r3, #0]
 8011fc6:	f008 f897 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8011fca:	bf00      	nop
    dynamicGraph1.addDataPoint(3.28163f);
 8011fcc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011fd0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8011fda:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011fde:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8011fe2:	601a      	str	r2, [r3, #0]
 8011fe4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011fe8:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8011fec:	4a7c      	ldr	r2, [pc, #496]	@ (80121e0 <_ZN15Screen1ViewBaseC1Ev+0x2638>)
 8011fee:	601a      	str	r2, [r3, #0]
 8011ff0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ff4:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8011ffe:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8012002:	601a      	str	r2, [r3, #0]
 8012004:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012008:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 801200c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012010:	f5a2 6288 	sub.w	r2, r2, #1088	@ 0x440
 8012014:	6812      	ldr	r2, [r2, #0]
 8012016:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012018:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801201c:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012024:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012028:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801202c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8012030:	f5a1 6189 	sub.w	r1, r1, #1096	@ 0x448
 8012034:	6809      	ldr	r1, [r1, #0]
 8012036:	6019      	str	r1, [r3, #0]
 8012038:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801203c:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8012040:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8012042:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012046:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	ee07 3a90 	vmov	s15, r3
 8012050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012054:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012058:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 801205c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012060:	f2a2 424c 	subw	r2, r2, #1100	@ 0x44c
 8012064:	ed92 7a00 	vldr	s14, [r2]
 8012068:	ee67 7a27 	vmul.f32	s15, s14, s15
 801206c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8012070:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012074:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8012078:	edd3 7a00 	vldr	s15, [r3]
 801207c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012084:	db0e      	blt.n	80120a4 <_ZN15Screen1ViewBaseC1Ev+0x24fc>
            return (int)(fs + 0.5f);
 8012086:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801208a:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 801208e:	edd3 7a00 	vldr	s15, [r3]
 8012092:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012096:	ee77 7a87 	vadd.f32	s15, s15, s14
 801209a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801209e:	ee17 2a90 	vmov	r2, s15
 80120a2:	e025      	b.n	80120f0 <_ZN15Screen1ViewBaseC1Ev+0x2548>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80120a4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80120a8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80120ac:	edd3 7a00 	vldr	s15, [r3]
 80120b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120b4:	ee17 3a90 	vmov	r3, s15
 80120b8:	3b01      	subs	r3, #1
 80120ba:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80120be:	f2a2 4254 	subw	r2, r2, #1108	@ 0x454
 80120c2:	edd2 7a00 	vldr	s15, [r2]
 80120c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120ce:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80120d2:	f2a2 4254 	subw	r2, r2, #1108	@ 0x454
 80120d6:	ed92 7a00 	vldr	s14, [r2]
 80120da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120de:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80120e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80120e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120ea:	ee17 2a90 	vmov	r2, s15
 80120ee:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80120f0:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80120f2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80120f6:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80120fa:	4611      	mov	r1, r2
 80120fc:	6818      	ldr	r0, [r3, #0]
 80120fe:	f007 fffb 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8012102:	bf00      	nop
    dynamicGraph1.addDataPoint(1.05971f);
 8012104:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012108:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8012112:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012116:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 801211a:	601a      	str	r2, [r3, #0]
 801211c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012120:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8012124:	4a2f      	ldr	r2, [pc, #188]	@ (80121e4 <_ZN15Screen1ViewBaseC1Ev+0x263c>)
 8012126:	601a      	str	r2, [r3, #0]
 8012128:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801212c:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012136:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012140:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8012144:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012148:	f2a2 4224 	subw	r2, r2, #1060	@ 0x424
 801214c:	6812      	ldr	r2, [r2, #0]
 801214e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012150:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012154:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801215c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012160:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8012164:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8012168:	f2a1 412c 	subw	r1, r1, #1068	@ 0x42c
 801216c:	6809      	ldr	r1, [r1, #0]
 801216e:	6019      	str	r1, [r3, #0]
 8012170:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012174:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8012178:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801217a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801217e:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	ee07 3a90 	vmov	s15, r3
 8012188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801218c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012190:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 8012194:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012198:	f5a2 6286 	sub.w	r2, r2, #1072	@ 0x430
 801219c:	ed92 7a00 	vldr	s14, [r2]
 80121a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121a4:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80121a8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80121ac:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 80121b0:	edd3 7a00 	vldr	s15, [r3]
 80121b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80121b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121bc:	db14      	blt.n	80121e8 <_ZN15Screen1ViewBaseC1Ev+0x2640>
            return (int)(fs + 0.5f);
 80121be:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80121c2:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 80121c6:	edd3 7a00 	vldr	s15, [r3]
 80121ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80121ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121d6:	ee17 2a90 	vmov	r2, s15
 80121da:	e02b      	b.n	8012234 <_ZN15Screen1ViewBaseC1Ev+0x268c>
 80121dc:	40631077 	.word	0x40631077
 80121e0:	4052063a 	.word	0x4052063a
 80121e4:	3f87a494 	.word	0x3f87a494
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80121e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80121ec:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 80121f0:	edd3 7a00 	vldr	s15, [r3]
 80121f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121f8:	ee17 3a90 	vmov	r3, s15
 80121fc:	3b01      	subs	r3, #1
 80121fe:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012202:	f5a2 6287 	sub.w	r2, r2, #1080	@ 0x438
 8012206:	edd2 7a00 	vldr	s15, [r2]
 801220a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801220e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012212:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012216:	f5a2 6287 	sub.w	r2, r2, #1080	@ 0x438
 801221a:	ed92 7a00 	vldr	s14, [r2]
 801221e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012222:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8012226:	ee77 7a87 	vadd.f32	s15, s15, s14
 801222a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801222e:	ee17 2a90 	vmov	r2, s15
 8012232:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8012234:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8012236:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801223a:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 801223e:	4611      	mov	r1, r2
 8012240:	6818      	ldr	r0, [r3, #0]
 8012242:	f007 ff59 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8012246:	bf00      	nop
    dynamicGraph1.addDataPoint(1.61547f);
 8012248:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801224c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8012256:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801225a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 801225e:	601a      	str	r2, [r3, #0]
 8012260:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012264:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8012268:	4ac9      	ldr	r2, [pc, #804]	@ (8012590 <_ZN15Screen1ViewBaseC1Ev+0x29e8>)
 801226a:	601a      	str	r2, [r3, #0]
 801226c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012270:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801227a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012284:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8012288:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801228c:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8012290:	6812      	ldr	r2, [r2, #0]
 8012292:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012294:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012298:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80122a0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80122a4:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80122a8:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80122ac:	f5a1 6182 	sub.w	r1, r1, #1040	@ 0x410
 80122b0:	6809      	ldr	r1, [r1, #0]
 80122b2:	6019      	str	r1, [r3, #0]
 80122b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80122b8:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80122bc:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80122be:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80122c2:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	ee07 3a90 	vmov	s15, r3
 80122cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80122d4:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80122d8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80122dc:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 80122e0:	ed92 7a00 	vldr	s14, [r2]
 80122e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122e8:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80122ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80122f0:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80122f4:	edd3 7a00 	vldr	s15, [r3]
 80122f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012300:	db0e      	blt.n	8012320 <_ZN15Screen1ViewBaseC1Ev+0x2778>
            return (int)(fs + 0.5f);
 8012302:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012306:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 801230a:	edd3 7a00 	vldr	s15, [r3]
 801230e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801231a:	ee17 2a90 	vmov	r2, s15
 801231e:	e025      	b.n	801236c <_ZN15Screen1ViewBaseC1Ev+0x27c4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8012320:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012324:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8012328:	edd3 7a00 	vldr	s15, [r3]
 801232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012330:	ee17 3a90 	vmov	r3, s15
 8012334:	3b01      	subs	r3, #1
 8012336:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801233a:	f2a2 421c 	subw	r2, r2, #1052	@ 0x41c
 801233e:	edd2 7a00 	vldr	s15, [r2]
 8012342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801234a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801234e:	f2a2 421c 	subw	r2, r2, #1052	@ 0x41c
 8012352:	ed92 7a00 	vldr	s14, [r2]
 8012356:	ee77 7a67 	vsub.f32	s15, s14, s15
 801235a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801235e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012366:	ee17 2a90 	vmov	r2, s15
 801236a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 801236c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801236e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012372:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8012376:	4611      	mov	r1, r2
 8012378:	6818      	ldr	r0, [r3, #0]
 801237a:	f007 febd 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801237e:	bf00      	nop
    dynamicGraph1.addDataPoint(1.7456f);
 8012380:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012384:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 801238e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012392:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8012396:	601a      	str	r2, [r3, #0]
 8012398:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801239c:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80123a0:	4a7c      	ldr	r2, [pc, #496]	@ (8012594 <_ZN15Screen1ViewBaseC1Ev+0x29ec>)
 80123a2:	601a      	str	r2, [r3, #0]
 80123a4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80123a8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80123b2:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80123b6:	601a      	str	r2, [r3, #0]
 80123b8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80123bc:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80123c0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80123c4:	f5a2 727b 	sub.w	r2, r2, #1004	@ 0x3ec
 80123c8:	6812      	ldr	r2, [r2, #0]
 80123ca:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80123cc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80123d0:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80123d8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80123dc:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80123e0:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80123e4:	f5a1 717d 	sub.w	r1, r1, #1012	@ 0x3f4
 80123e8:	6809      	ldr	r1, [r1, #0]
 80123ea:	6019      	str	r1, [r3, #0]
 80123ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80123f0:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80123f4:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80123f6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80123fa:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	ee07 3a90 	vmov	s15, r3
 8012404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012408:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801240c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8012410:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012414:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 8012418:	ed92 7a00 	vldr	s14, [r2]
 801241c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012420:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8012424:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012428:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801242c:	edd3 7a00 	vldr	s15, [r3]
 8012430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012438:	db0e      	blt.n	8012458 <_ZN15Screen1ViewBaseC1Ev+0x28b0>
            return (int)(fs + 0.5f);
 801243a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801243e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8012442:	edd3 7a00 	vldr	s15, [r3]
 8012446:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801244a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801244e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012452:	ee17 2a90 	vmov	r2, s15
 8012456:	e025      	b.n	80124a4 <_ZN15Screen1ViewBaseC1Ev+0x28fc>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8012458:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801245c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8012460:	edd3 7a00 	vldr	s15, [r3]
 8012464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012468:	ee17 3a90 	vmov	r3, s15
 801246c:	3b01      	subs	r3, #1
 801246e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012472:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012476:	edd2 7a00 	vldr	s15, [r2]
 801247a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801247e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012482:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012486:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801248a:	ed92 7a00 	vldr	s14, [r2]
 801248e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012492:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8012496:	ee77 7a87 	vadd.f32	s15, s15, s14
 801249a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801249e:	ee17 2a90 	vmov	r2, s15
 80124a2:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80124a4:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80124a6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80124aa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80124ae:	4611      	mov	r1, r2
 80124b0:	6818      	ldr	r0, [r3, #0]
 80124b2:	f007 fe21 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80124b6:	bf00      	nop
    dynamicGraph1.addDataPoint(0.37112f);
 80124b8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80124bc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 80124c6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80124ca:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 80124ce:	601a      	str	r2, [r3, #0]
 80124d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80124d4:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80124d8:	4a2f      	ldr	r2, [pc, #188]	@ (8012598 <_ZN15Screen1ViewBaseC1Ev+0x29f0>)
 80124da:	601a      	str	r2, [r3, #0]
 80124dc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80124e0:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 80124e4:	681a      	ldr	r2, [r3, #0]
 80124e6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80124ea:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80124ee:	601a      	str	r2, [r3, #0]
 80124f0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80124f4:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 80124f8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80124fc:	f5a2 7274 	sub.w	r2, r2, #976	@ 0x3d0
 8012500:	6812      	ldr	r2, [r2, #0]
 8012502:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012504:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012508:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012510:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012514:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8012518:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 801251c:	f5a1 7176 	sub.w	r1, r1, #984	@ 0x3d8
 8012520:	6809      	ldr	r1, [r1, #0]
 8012522:	6019      	str	r1, [r3, #0]
 8012524:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012528:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 801252c:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801252e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012532:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	ee07 3a90 	vmov	s15, r3
 801253c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012540:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012544:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 8012548:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801254c:	f5a2 7277 	sub.w	r2, r2, #988	@ 0x3dc
 8012550:	ed92 7a00 	vldr	s14, [r2]
 8012554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012558:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 801255c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012560:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 8012564:	edd3 7a00 	vldr	s15, [r3]
 8012568:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012570:	db14      	blt.n	801259c <_ZN15Screen1ViewBaseC1Ev+0x29f4>
            return (int)(fs + 0.5f);
 8012572:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012576:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 801257a:	edd3 7a00 	vldr	s15, [r3]
 801257e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012582:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801258a:	ee17 2a90 	vmov	r2, s15
 801258e:	e02b      	b.n	80125e8 <_ZN15Screen1ViewBaseC1Ev+0x2a40>
 8012590:	3fcec7b9 	.word	0x3fcec7b9
 8012594:	3fdf6fd2 	.word	0x3fdf6fd2
 8012598:	3ebe0371 	.word	0x3ebe0371
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801259c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80125a0:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 80125a4:	edd3 7a00 	vldr	s15, [r3]
 80125a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125ac:	ee17 3a90 	vmov	r3, s15
 80125b0:	3b01      	subs	r3, #1
 80125b2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80125b6:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 80125ba:	edd2 7a00 	vldr	s15, [r2]
 80125be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125c6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80125ca:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 80125ce:	ed92 7a00 	vldr	s14, [r2]
 80125d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125d6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80125da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80125e2:	ee17 2a90 	vmov	r2, s15
 80125e6:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80125e8:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80125ea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80125ee:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 80125f2:	4611      	mov	r1, r2
 80125f4:	6818      	ldr	r0, [r3, #0]
 80125f6:	f007 fd7f 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80125fa:	bf00      	nop
    dynamicGraph1.addDataPoint(2.02429f);
 80125fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012600:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 801260a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801260e:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8012612:	601a      	str	r2, [r3, #0]
 8012614:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012618:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 801261c:	4ac9      	ldr	r2, [pc, #804]	@ (8012944 <_ZN15Screen1ViewBaseC1Ev+0x2d9c>)
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012624:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8012628:	681a      	ldr	r2, [r3, #0]
 801262a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801262e:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8012632:	601a      	str	r2, [r3, #0]
 8012634:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012638:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 801263c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012640:	f5a2 726d 	sub.w	r2, r2, #948	@ 0x3b4
 8012644:	6812      	ldr	r2, [r2, #0]
 8012646:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012648:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801264c:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012654:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012658:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 801265c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8012660:	f5a1 716f 	sub.w	r1, r1, #956	@ 0x3bc
 8012664:	6809      	ldr	r1, [r1, #0]
 8012666:	6019      	str	r1, [r3, #0]
 8012668:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801266c:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8012670:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8012672:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012676:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	ee07 3a90 	vmov	s15, r3
 8012680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012684:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012688:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 801268c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012690:	f5a2 7270 	sub.w	r2, r2, #960	@ 0x3c0
 8012694:	ed92 7a00 	vldr	s14, [r2]
 8012698:	ee67 7a27 	vmul.f32	s15, s14, s15
 801269c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80126a0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80126a4:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80126a8:	edd3 7a00 	vldr	s15, [r3]
 80126ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b4:	db0e      	blt.n	80126d4 <_ZN15Screen1ViewBaseC1Ev+0x2b2c>
            return (int)(fs + 0.5f);
 80126b6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80126ba:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80126be:	edd3 7a00 	vldr	s15, [r3]
 80126c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80126c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126ce:	ee17 2a90 	vmov	r2, s15
 80126d2:	e025      	b.n	8012720 <_ZN15Screen1ViewBaseC1Ev+0x2b78>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80126d4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80126d8:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80126dc:	edd3 7a00 	vldr	s15, [r3]
 80126e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126e4:	ee17 3a90 	vmov	r3, s15
 80126e8:	3b01      	subs	r3, #1
 80126ea:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80126ee:	f5a2 7272 	sub.w	r2, r2, #968	@ 0x3c8
 80126f2:	edd2 7a00 	vldr	s15, [r2]
 80126f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80126fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126fe:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012702:	f5a2 7272 	sub.w	r2, r2, #968	@ 0x3c8
 8012706:	ed92 7a00 	vldr	s14, [r2]
 801270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801270e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8012712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801271a:	ee17 2a90 	vmov	r2, s15
 801271e:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8012720:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8012722:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012726:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 801272a:	4611      	mov	r1, r2
 801272c:	6818      	ldr	r0, [r3, #0]
 801272e:	f007 fce3 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8012732:	bf00      	nop
    dynamicGraph1.addDataPoint(3.62411f);
 8012734:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012738:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 8012742:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012746:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 801274a:	601a      	str	r2, [r3, #0]
 801274c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012750:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8012754:	4a7c      	ldr	r2, [pc, #496]	@ (8012948 <_ZN15Screen1ViewBaseC1Ev+0x2da0>)
 8012756:	601a      	str	r2, [r3, #0]
 8012758:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801275c:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012766:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 801276a:	601a      	str	r2, [r3, #0]
 801276c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012770:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8012774:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012778:	f5a2 7266 	sub.w	r2, r2, #920	@ 0x398
 801277c:	6812      	ldr	r2, [r2, #0]
 801277e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012780:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012784:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801278c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012790:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8012794:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8012798:	f5a1 7168 	sub.w	r1, r1, #928	@ 0x3a0
 801279c:	6809      	ldr	r1, [r1, #0]
 801279e:	6019      	str	r1, [r3, #0]
 80127a0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80127a4:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80127a8:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80127aa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80127ae:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	ee07 3a90 	vmov	s15, r3
 80127b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127bc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80127c0:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80127c4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80127c8:	f5a2 7269 	sub.w	r2, r2, #932	@ 0x3a4
 80127cc:	ed92 7a00 	vldr	s14, [r2]
 80127d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127d4:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80127d8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80127dc:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80127e0:	edd3 7a00 	vldr	s15, [r3]
 80127e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ec:	db0e      	blt.n	801280c <_ZN15Screen1ViewBaseC1Ev+0x2c64>
            return (int)(fs + 0.5f);
 80127ee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80127f2:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80127f6:	edd3 7a00 	vldr	s15, [r3]
 80127fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80127fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012806:	ee17 2a90 	vmov	r2, s15
 801280a:	e025      	b.n	8012858 <_ZN15Screen1ViewBaseC1Ev+0x2cb0>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801280c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012810:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8012814:	edd3 7a00 	vldr	s15, [r3]
 8012818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801281c:	ee17 3a90 	vmov	r3, s15
 8012820:	3b01      	subs	r3, #1
 8012822:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012826:	f5a2 726b 	sub.w	r2, r2, #940	@ 0x3ac
 801282a:	edd2 7a00 	vldr	s15, [r2]
 801282e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012836:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801283a:	f5a2 726b 	sub.w	r2, r2, #940	@ 0x3ac
 801283e:	ed92 7a00 	vldr	s14, [r2]
 8012842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012846:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801284a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801284e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012852:	ee17 2a90 	vmov	r2, s15
 8012856:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8012858:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801285a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801285e:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8012862:	4611      	mov	r1, r2
 8012864:	6818      	ldr	r0, [r3, #0]
 8012866:	f007 fc47 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801286a:	bf00      	nop
    dynamicGraph1.addDataPoint(2.23132f);
 801286c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012870:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f503 72d2 	add.w	r2, r3, #420	@ 0x1a4
 801287a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801287e:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8012882:	601a      	str	r2, [r3, #0]
 8012884:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012888:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 801288c:	4a2f      	ldr	r2, [pc, #188]	@ (801294c <_ZN15Screen1ViewBaseC1Ev+0x2da4>)
 801288e:	601a      	str	r2, [r3, #0]
 8012890:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012894:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801289e:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80128a2:	601a      	str	r2, [r3, #0]
 80128a4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80128a8:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80128ac:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80128b0:	f5a2 725f 	sub.w	r2, r2, #892	@ 0x37c
 80128b4:	6812      	ldr	r2, [r2, #0]
 80128b6:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80128b8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80128bc:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80128c8:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 80128cc:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80128d0:	f5a1 7161 	sub.w	r1, r1, #900	@ 0x384
 80128d4:	6809      	ldr	r1, [r1, #0]
 80128d6:	6019      	str	r1, [r3, #0]
 80128d8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80128dc:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80128e0:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80128e2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80128e6:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	ee07 3a90 	vmov	s15, r3
 80128f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128f4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80128f8:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 80128fc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012900:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8012904:	ed92 7a00 	vldr	s14, [r2]
 8012908:	ee67 7a27 	vmul.f32	s15, s14, s15
 801290c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8012910:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012914:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8012918:	edd3 7a00 	vldr	s15, [r3]
 801291c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012924:	db14      	blt.n	8012950 <_ZN15Screen1ViewBaseC1Ev+0x2da8>
            return (int)(fs + 0.5f);
 8012926:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801292a:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 801292e:	edd3 7a00 	vldr	s15, [r3]
 8012932:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012936:	ee77 7a87 	vadd.f32	s15, s15, s14
 801293a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801293e:	ee17 2a90 	vmov	r2, s15
 8012942:	e02b      	b.n	801299c <_ZN15Screen1ViewBaseC1Ev+0x2df4>
 8012944:	40018df8 	.word	0x40018df8
 8012948:	4067f16b 	.word	0x4067f16b
 801294c:	400ecdf2 	.word	0x400ecdf2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8012950:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012954:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8012958:	edd3 7a00 	vldr	s15, [r3]
 801295c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012960:	ee17 3a90 	vmov	r3, s15
 8012964:	3b01      	subs	r3, #1
 8012966:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801296a:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 801296e:	edd2 7a00 	vldr	s15, [r2]
 8012972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801297a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801297e:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8012982:	ed92 7a00 	vldr	s14, [r2]
 8012986:	ee77 7a67 	vsub.f32	s15, s14, s15
 801298a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801298e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012996:	ee17 2a90 	vmov	r2, s15
 801299a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 801299c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801299e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80129a2:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 80129a6:	4611      	mov	r1, r2
 80129a8:	6818      	ldr	r0, [r3, #0]
 80129aa:	f007 fba5 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80129ae:	bf00      	nop
    add(dynamicGraph1);
 80129b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80129b4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80129be:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80129c8:	4619      	mov	r1, r3
 80129ca:	4610      	mov	r0, r2
 80129cc:	f7fa ff76 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    dynamicGraph2.setPosition(31, 233, 203, 76);
 80129d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80129d4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	f503 6082 	add.w	r0, r3, #1040	@ 0x410
 80129de:	234c      	movs	r3, #76	@ 0x4c
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	23cb      	movs	r3, #203	@ 0xcb
 80129e4:	22e9      	movs	r2, #233	@ 0xe9
 80129e6:	211f      	movs	r1, #31
 80129e8:	f7fa fd86 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph2.setScale(10);
 80129ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80129f0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80129fa:	2200      	movs	r2, #0
 80129fc:	210a      	movs	r1, #10
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7fc f87a 	bl	800eaf8 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph2.setXAxisFactor(1);
 8012a04:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a08:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8012a12:	2101      	movs	r1, #1
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fc f933 	bl	800ec80 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>
    dynamicGraph2.setXAxisOffset(0);
 8012a1a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a1e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8012a28:	2100      	movs	r1, #0
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fc fa4a 	bl	800eec4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>
    dynamicGraph2.setGraphAreaMargin(0, 0, 0, 0);
 8012a30:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a34:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	f503 6082 	add.w	r0, r3, #1040	@ 0x410
 8012a3e:	2300      	movs	r3, #0
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	2300      	movs	r3, #0
 8012a44:	2200      	movs	r2, #0
 8012a46:	2100      	movs	r1, #0
 8012a48:	f007 fa4a 	bl	8019ee0 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph2.setGraphAreaPadding(0, 0, 0, 0);
 8012a4c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a50:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f503 6082 	add.w	r0, r3, #1040	@ 0x410
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	9300      	str	r3, [sp, #0]
 8012a5e:	2300      	movs	r3, #0
 8012a60:	2200      	movs	r2, #0
 8012a62:	2100      	movs	r1, #0
 8012a64:	f007 f97a 	bl	8019d5c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph2.setGraphRangeY(0, 100);
 8012a68:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a6c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8012a76:	2264      	movs	r2, #100	@ 0x64
 8012a78:	2100      	movs	r1, #0
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fb fc33 	bl	800e2e6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    dynamicGraph2MajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(3, 3, 3));
 8012a80:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a84:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f203 54c4 	addw	r4, r3, #1476	@ 0x5c4
 8012a8e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a92:	f2a3 3371 	subw	r3, r3, #881	@ 0x371
 8012a96:	2203      	movs	r2, #3
 8012a98:	701a      	strb	r2, [r3, #0]
 8012a9a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012a9e:	f2a3 3372 	subw	r3, r3, #882	@ 0x372
 8012aa2:	2203      	movs	r2, #3
 8012aa4:	701a      	strb	r2, [r3, #0]
 8012aa6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012aaa:	f2a3 3373 	subw	r3, r3, #883	@ 0x373
 8012aae:	2203      	movs	r2, #3
 8012ab0:	701a      	strb	r2, [r3, #0]
 8012ab2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ab6:	f2a3 3371 	subw	r3, r3, #881	@ 0x371
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	041a      	lsls	r2, r3, #16
 8012abe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ac2:	f2a3 3372 	subw	r3, r3, #882	@ 0x372
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	021b      	lsls	r3, r3, #8
 8012aca:	431a      	orrs	r2, r3
 8012acc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ad0:	f2a3 3373 	subw	r3, r3, #883	@ 0x373
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	4313      	orrs	r3, r2
 8012ad8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8012adc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fa fc48 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8012ae8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012aec:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4619      	mov	r1, r3
 8012af4:	4620      	mov	r0, r4
 8012af6:	f7fc fd13 	bl	800f520 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph2MajorYAxisGrid.setInterval(25);
 8012afa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012afe:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	f203 52c4 	addw	r2, r3, #1476	@ 0x5c4
 8012b08:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b0c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8012b10:	601a      	str	r2, [r3, #0]
 8012b12:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b16:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8012b1a:	2219      	movs	r2, #25
 8012b1c:	601a      	str	r2, [r3, #0]
        setIntervalScaled(abs(interval) * dataScale);
 8012b1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b22:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8012b26:	6818      	ldr	r0, [r3, #0]
 8012b28:	f002 fdab 	bl	8015682 <_ZN8touchgfx3absIiEET_S1_>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b32:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b3a:	fb03 f202 	mul.w	r2, r3, r2
 8012b3e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b42:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8012b46:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8012b4a:	f5a1 7159 	sub.w	r1, r1, #868	@ 0x364
 8012b4e:	6809      	ldr	r1, [r1, #0]
 8012b50:	6019      	str	r1, [r3, #0]
 8012b52:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b56:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8012b5a:	601a      	str	r2, [r3, #0]
        gridInterval = abs(interval);
 8012b5c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b60:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8012b64:	6818      	ldr	r0, [r3, #0]
 8012b66:	f002 fd8c 	bl	8015682 <_ZN8touchgfx3absIiEET_S1_>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b70:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 8012b78:	bf00      	nop
    }
 8012b7a:	bf00      	nop
    dynamicGraph2MajorYAxisGrid.setLineWidth(1);
 8012b7c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b80:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f203 52c4 	addw	r2, r3, #1476	@ 0x5c4
 8012b8a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b8e:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8012b92:	601a      	str	r2, [r3, #0]
 8012b94:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012b98:	f2a3 335d 	subw	r3, r3, #861	@ 0x35d
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	701a      	strb	r2, [r3, #0]
        lineWidth = width;
 8012ba0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ba4:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012bae:	f2a2 325d 	subw	r2, r2, #861	@ 0x35d
 8012bb2:	7812      	ldrb	r2, [r2, #0]
 8012bb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 8012bb8:	bf00      	nop
    dynamicGraph2MajorYAxisGrid.setScale(10);
 8012bba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012bbe:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f203 52c4 	addw	r2, r3, #1476	@ 0x5c4
 8012bc8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012bcc:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8012bd0:	601a      	str	r2, [r3, #0]
 8012bd2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012bd6:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8012bda:	220a      	movs	r2, #10
 8012bdc:	601a      	str	r2, [r3, #0]
        assert(scale != 0);
 8012bde:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012be2:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d106      	bne.n	8012bfa <_ZN15Screen1ViewBaseC1Ev+0x3052>
 8012bec:	4bcb      	ldr	r3, [pc, #812]	@ (8012f1c <_ZN15Screen1ViewBaseC1Ev+0x3374>)
 8012bee:	4acc      	ldr	r2, [pc, #816]	@ (8012f20 <_ZN15Screen1ViewBaseC1Ev+0x3378>)
 8012bf0:	f240 112f 	movw	r1, #303	@ 0x12f
 8012bf4:	48cb      	ldr	r0, [pc, #812]	@ (8012f24 <_ZN15Screen1ViewBaseC1Ev+0x337c>)
 8012bf6:	f01c fecf 	bl	802f998 <__assert_func>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8012bfa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012bfe:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012c06:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c0a:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8012c12:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c16:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	f007 fa12 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012c20:	4602      	mov	r2, r0
 8012c22:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c26:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 8012c2e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c32:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012c3c:	f5a2 7256 	sub.w	r2, r2, #856	@ 0x358
 8012c40:	6812      	ldr	r2, [r2, #0]
 8012c42:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8012c44:	bf00      	nop
    dynamicGraph2.addGraphElement(dynamicGraph2MajorYAxisGrid);
 8012c46:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c4a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8012c54:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c58:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f203 53c4 	addw	r3, r3, #1476	@ 0x5c4
 8012c62:	4619      	mov	r1, r3
 8012c64:	4610      	mov	r0, r2
 8012c66:	f007 f884 	bl	8019d72 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph2Line1Painter.setColor(touchgfx::Color::getColorFromRGB(147, 31, 173));
 8012c6a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c6e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f203 6434 	addw	r4, r3, #1588	@ 0x634
 8012c78:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c7c:	f2a3 334e 	subw	r3, r3, #846	@ 0x34e
 8012c80:	2293      	movs	r2, #147	@ 0x93
 8012c82:	701a      	strb	r2, [r3, #0]
 8012c84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c88:	f2a3 334f 	subw	r3, r3, #847	@ 0x34f
 8012c8c:	221f      	movs	r2, #31
 8012c8e:	701a      	strb	r2, [r3, #0]
 8012c90:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012c94:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8012c98:	22ad      	movs	r2, #173	@ 0xad
 8012c9a:	701a      	strb	r2, [r3, #0]
 8012c9c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ca0:	f2a3 334e 	subw	r3, r3, #846	@ 0x34e
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	041a      	lsls	r2, r3, #16
 8012ca8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012cac:	f2a3 334f 	subw	r3, r3, #847	@ 0x34f
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	021b      	lsls	r3, r3, #8
 8012cb4:	431a      	orrs	r2, r3
 8012cb6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012cba:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8012cc6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8012cca:	4611      	mov	r1, r2
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7fa fb53 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8012cd2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012cd6:	f2a3 63d4 	subw	r3, r3, #1748	@ 0x6d4
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	4620      	mov	r0, r4
 8012ce0:	f7fc febc 	bl	800fa5c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    dynamicGraph2Line1.setPainter(dynamicGraph2Line1Painter);
 8012ce4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ce8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f203 6204 	addw	r2, r3, #1540	@ 0x604
 8012cf2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012cf6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8012d00:	4619      	mov	r1, r3
 8012d02:	4610      	mov	r0, r2
 8012d04:	f7fc fb4c 	bl	800f3a0 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    dynamicGraph2Line1.setLineWidth(2);
 8012d08:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d0c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f203 6204 	addw	r2, r3, #1540	@ 0x604
 8012d16:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d1a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8012d1e:	601a      	str	r2, [r3, #0]
 8012d20:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d24:	f2a3 334d 	subw	r3, r3, #845	@ 0x34d
 8012d28:	2202      	movs	r2, #2
 8012d2a:	701a      	strb	r2, [r3, #0]
        lineWidth = width;
 8012d2c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d30:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012d3a:	f2a2 324d 	subw	r2, r2, #845	@ 0x34d
 8012d3e:	7812      	ldrb	r2, [r2, #0]
 8012d40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 8012d44:	bf00      	nop
    dynamicGraph2.addGraphElement(dynamicGraph2Line1);
 8012d46:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d4a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8012d54:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d58:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8012d62:	4619      	mov	r1, r3
 8012d64:	4610      	mov	r0, r2
 8012d66:	f007 f804 	bl	8019d72 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph2VerticalFrontline.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8012d6a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d6e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f503 64c9 	add.w	r4, r3, #1608	@ 0x648
 8012d78:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d7c:	f2a3 3343 	subw	r3, r3, #835	@ 0x343
 8012d80:	22ff      	movs	r2, #255	@ 0xff
 8012d82:	701a      	strb	r2, [r3, #0]
 8012d84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d88:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	701a      	strb	r2, [r3, #0]
 8012d90:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012d94:	f2a3 3345 	subw	r3, r3, #837	@ 0x345
 8012d98:	2200      	movs	r2, #0
 8012d9a:	701a      	strb	r2, [r3, #0]
 8012d9c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012da0:	f2a3 3343 	subw	r3, r3, #835	@ 0x343
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	041a      	lsls	r2, r3, #16
 8012da8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012dac:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	021b      	lsls	r3, r3, #8
 8012db4:	431a      	orrs	r2, r3
 8012db6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012dba:	f2a3 3345 	subw	r3, r3, #837	@ 0x345
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8012dc6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8012dca:	4611      	mov	r1, r2
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fa fad3 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8012dd2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012dd6:	f5a3 63db 	sub.w	r3, r3, #1752	@ 0x6d8
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4619      	mov	r1, r3
 8012dde:	4620      	mov	r0, r4
 8012de0:	f7fc fb9e 	bl	800f520 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph2VerticalFrontline.setGapLineWidth(1);
 8012de4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012de8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f503 62c9 	add.w	r2, r3, #1608	@ 0x648
 8012df2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012df6:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8012dfa:	601a      	str	r2, [r3, #0]
 8012dfc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e00:	f2a3 3342 	subw	r3, r3, #834	@ 0x342
 8012e04:	2201      	movs	r2, #1
 8012e06:	801a      	strh	r2, [r3, #0]
        lineWidth = width;
 8012e08:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e0c:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012e16:	f2a2 3242 	subw	r2, r2, #834	@ 0x342
 8012e1a:	8812      	ldrh	r2, [r2, #0]
 8012e1c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 8012e1e:	bf00      	nop
    dynamicGraph2.addGraphElement(dynamicGraph2VerticalFrontline);
 8012e20:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e24:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8012e2e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e32:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	4610      	mov	r0, r2
 8012e40:	f006 ff97 	bl	8019d72 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>


    dynamicGraph2.addDataPoint(73.76651f);
 8012e44:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e48:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8012e52:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e56:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8012e5a:	601a      	str	r2, [r3, #0]
 8012e5c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e60:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8012e64:	4a30      	ldr	r2, [pc, #192]	@ (8012f28 <_ZN15Screen1ViewBaseC1Ev+0x3380>)
 8012e66:	601a      	str	r2, [r3, #0]
 8012e68:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e6c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8012e70:	681a      	ldr	r2, [r3, #0]
 8012e72:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e76:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8012e7a:	601a      	str	r2, [r3, #0]
 8012e7c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e80:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8012e84:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012e88:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8012e8c:	6812      	ldr	r2, [r2, #0]
 8012e8e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012e90:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012e94:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012e9c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ea0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8012ea4:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8012ea8:	f5a1 714c 	sub.w	r1, r1, #816	@ 0x330
 8012eac:	6809      	ldr	r1, [r1, #0]
 8012eae:	6019      	str	r1, [r3, #0]
 8012eb0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012eb4:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8012eb8:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8012eba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ebe:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	ee07 3a90 	vmov	s15, r3
 8012ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ecc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ed0:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8012ed4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012ed8:	f5a2 724d 	sub.w	r2, r2, #820	@ 0x334
 8012edc:	ed92 7a00 	vldr	s14, [r2]
 8012ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ee4:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8012ee8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012eec:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8012ef0:	edd3 7a00 	vldr	s15, [r3]
 8012ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efc:	db16      	blt.n	8012f2c <_ZN15Screen1ViewBaseC1Ev+0x3384>
            return (int)(fs + 0.5f);
 8012efe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012f02:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8012f06:	edd3 7a00 	vldr	s15, [r3]
 8012f0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f16:	ee17 2a90 	vmov	r2, s15
 8012f1a:	e02d      	b.n	8012f78 <_ZN15Screen1ViewBaseC1Ev+0x33d0>
 8012f1c:	08031174 	.word	0x08031174
 8012f20:	08031180 	.word	0x08031180
 8012f24:	080311b4 	.word	0x080311b4
 8012f28:	42938874 	.word	0x42938874
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8012f2c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012f30:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8012f34:	edd3 7a00 	vldr	s15, [r3]
 8012f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f3c:	ee17 3a90 	vmov	r3, s15
 8012f40:	3b01      	subs	r3, #1
 8012f42:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012f46:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8012f4a:	edd2 7a00 	vldr	s15, [r2]
 8012f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f56:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012f5a:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8012f5e:	ed92 7a00 	vldr	s14, [r2]
 8012f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f66:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8012f6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f72:	ee17 2a90 	vmov	r2, s15
 8012f76:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8012f78:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8012f7a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012f7e:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8012f82:	4611      	mov	r1, r2
 8012f84:	6818      	ldr	r0, [r3, #0]
 8012f86:	f007 f8b7 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8012f8a:	bf00      	nop
    dynamicGraph2.addDataPoint(94.84482f);
 8012f8c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012f90:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8012f9a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012f9e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8012fa2:	601a      	str	r2, [r3, #0]
 8012fa4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012fa8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8012fac:	4ac9      	ldr	r2, [pc, #804]	@ (80132d4 <_ZN15Screen1ViewBaseC1Ev+0x372c>)
 8012fae:	601a      	str	r2, [r3, #0]
 8012fb0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012fb4:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012fbe:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8012fc2:	601a      	str	r2, [r3, #0]
 8012fc4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012fc8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8012fcc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8012fd0:	f5a2 7243 	sub.w	r2, r2, #780	@ 0x30c
 8012fd4:	6812      	ldr	r2, [r2, #0]
 8012fd6:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8012fd8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012fdc:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012fe4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012fe8:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8012fec:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8012ff0:	f5a1 7145 	sub.w	r1, r1, #788	@ 0x314
 8012ff4:	6809      	ldr	r1, [r1, #0]
 8012ff6:	6019      	str	r1, [r3, #0]
 8012ff8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8012ffc:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8013000:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8013002:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013006:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	ee07 3a90 	vmov	s15, r3
 8013010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013014:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013018:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 801301c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013020:	f5a2 7246 	sub.w	r2, r2, #792	@ 0x318
 8013024:	ed92 7a00 	vldr	s14, [r2]
 8013028:	ee67 7a27 	vmul.f32	s15, s14, s15
 801302c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013030:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013034:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8013038:	edd3 7a00 	vldr	s15, [r3]
 801303c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013044:	db0e      	blt.n	8013064 <_ZN15Screen1ViewBaseC1Ev+0x34bc>
            return (int)(fs + 0.5f);
 8013046:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801304a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 801304e:	edd3 7a00 	vldr	s15, [r3]
 8013052:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013056:	ee77 7a87 	vadd.f32	s15, s15, s14
 801305a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801305e:	ee17 2a90 	vmov	r2, s15
 8013062:	e025      	b.n	80130b0 <_ZN15Screen1ViewBaseC1Ev+0x3508>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013064:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013068:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 801306c:	edd3 7a00 	vldr	s15, [r3]
 8013070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013074:	ee17 3a90 	vmov	r3, s15
 8013078:	3b01      	subs	r3, #1
 801307a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801307e:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
 8013082:	edd2 7a00 	vldr	s15, [r2]
 8013086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801308a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801308e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013092:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
 8013096:	ed92 7a00 	vldr	s14, [r2]
 801309a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801309e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80130a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80130a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130aa:	ee17 2a90 	vmov	r2, s15
 80130ae:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80130b0:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80130b2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80130b6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80130ba:	4611      	mov	r1, r2
 80130bc:	6818      	ldr	r0, [r3, #0]
 80130be:	f007 f81b 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80130c2:	bf00      	nop
    dynamicGraph2.addDataPoint(38.11695f);
 80130c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80130c8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 80130d2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80130d6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80130da:	601a      	str	r2, [r3, #0]
 80130dc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80130e0:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80130e4:	4a7c      	ldr	r2, [pc, #496]	@ (80132d8 <_ZN15Screen1ViewBaseC1Ev+0x3730>)
 80130e6:	601a      	str	r2, [r3, #0]
 80130e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80130ec:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80130f6:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80130fa:	601a      	str	r2, [r3, #0]
 80130fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013100:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8013104:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013108:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 801310c:	6812      	ldr	r2, [r2, #0]
 801310e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013110:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013114:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801311c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013120:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8013124:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013128:	f5a1 713e 	sub.w	r1, r1, #760	@ 0x2f8
 801312c:	6809      	ldr	r1, [r1, #0]
 801312e:	6019      	str	r1, [r3, #0]
 8013130:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013134:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8013138:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801313a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801313e:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	ee07 3a90 	vmov	s15, r3
 8013148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801314c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013150:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8013154:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013158:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 801315c:	ed92 7a00 	vldr	s14, [r2]
 8013160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013164:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013168:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801316c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8013170:	edd3 7a00 	vldr	s15, [r3]
 8013174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801317c:	db0e      	blt.n	801319c <_ZN15Screen1ViewBaseC1Ev+0x35f4>
            return (int)(fs + 0.5f);
 801317e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013182:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8013186:	edd3 7a00 	vldr	s15, [r3]
 801318a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801318e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013196:	ee17 2a90 	vmov	r2, s15
 801319a:	e025      	b.n	80131e8 <_ZN15Screen1ViewBaseC1Ev+0x3640>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801319c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80131a0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80131a4:	edd3 7a00 	vldr	s15, [r3]
 80131a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131ac:	ee17 3a90 	vmov	r3, s15
 80131b0:	3b01      	subs	r3, #1
 80131b2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80131b6:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 80131ba:	edd2 7a00 	vldr	s15, [r2]
 80131be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131c6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80131ca:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 80131ce:	ed92 7a00 	vldr	s14, [r2]
 80131d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131d6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80131da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131e2:	ee17 2a90 	vmov	r2, s15
 80131e6:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80131e8:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80131ea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80131ee:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80131f2:	4611      	mov	r1, r2
 80131f4:	6818      	ldr	r0, [r3, #0]
 80131f6:	f006 ff7f 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80131fa:	bf00      	nop
    dynamicGraph2.addDataPoint(30.69488f);
 80131fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013200:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 801320a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801320e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013218:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 801321c:	4a2f      	ldr	r2, [pc, #188]	@ (80132dc <_ZN15Screen1ViewBaseC1Ev+0x3734>)
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013224:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801322e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8013232:	601a      	str	r2, [r3, #0]
 8013234:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013238:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801323c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013240:	f5a2 7235 	sub.w	r2, r2, #724	@ 0x2d4
 8013244:	6812      	ldr	r2, [r2, #0]
 8013246:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013248:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801324c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013254:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013258:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801325c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013260:	f5a1 7137 	sub.w	r1, r1, #732	@ 0x2dc
 8013264:	6809      	ldr	r1, [r1, #0]
 8013266:	6019      	str	r1, [r3, #0]
 8013268:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801326c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8013270:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8013272:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013276:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	ee07 3a90 	vmov	s15, r3
 8013280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013284:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013288:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 801328c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013290:	f5a2 7238 	sub.w	r2, r2, #736	@ 0x2e0
 8013294:	ed92 7a00 	vldr	s14, [r2]
 8013298:	ee67 7a27 	vmul.f32	s15, s14, s15
 801329c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80132a0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80132a4:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80132a8:	edd3 7a00 	vldr	s15, [r3]
 80132ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80132b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b4:	db14      	blt.n	80132e0 <_ZN15Screen1ViewBaseC1Ev+0x3738>
            return (int)(fs + 0.5f);
 80132b6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80132ba:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80132be:	edd3 7a00 	vldr	s15, [r3]
 80132c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80132c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80132ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132ce:	ee17 2a90 	vmov	r2, s15
 80132d2:	e02b      	b.n	801332c <_ZN15Screen1ViewBaseC1Ev+0x3784>
 80132d4:	42bdb08c 	.word	0x42bdb08c
 80132d8:	421877c2 	.word	0x421877c2
 80132dc:	41f58f1d 	.word	0x41f58f1d
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80132e0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80132e4:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80132e8:	edd3 7a00 	vldr	s15, [r3]
 80132ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132f0:	ee17 3a90 	vmov	r3, s15
 80132f4:	3b01      	subs	r3, #1
 80132f6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80132fa:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 80132fe:	edd2 7a00 	vldr	s15, [r2]
 8013302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801330a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801330e:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 8013312:	ed92 7a00 	vldr	s14, [r2]
 8013316:	ee77 7a67 	vsub.f32	s15, s14, s15
 801331a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801331e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013326:	ee17 2a90 	vmov	r2, s15
 801332a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 801332c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801332e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013332:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8013336:	4611      	mov	r1, r2
 8013338:	6818      	ldr	r0, [r3, #0]
 801333a:	f006 fedd 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801333e:	bf00      	nop
    dynamicGraph2.addDataPoint(50.5493f);
 8013340:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013344:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 801334e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013352:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8013356:	601a      	str	r2, [r3, #0]
 8013358:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801335c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8013360:	4ac9      	ldr	r2, [pc, #804]	@ (8013688 <_ZN15Screen1ViewBaseC1Ev+0x3ae0>)
 8013362:	601a      	str	r2, [r3, #0]
 8013364:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013368:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013372:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013376:	601a      	str	r2, [r3, #0]
 8013378:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801337c:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013380:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013384:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 8013388:	6812      	ldr	r2, [r2, #0]
 801338a:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 801338c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013390:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013398:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801339c:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80133a0:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80133a4:	f5a1 7130 	sub.w	r1, r1, #704	@ 0x2c0
 80133a8:	6809      	ldr	r1, [r1, #0]
 80133aa:	6019      	str	r1, [r3, #0]
 80133ac:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80133b0:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80133b4:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80133b6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80133ba:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	ee07 3a90 	vmov	s15, r3
 80133c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133c8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80133cc:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80133d0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80133d4:	f5a2 7231 	sub.w	r2, r2, #708	@ 0x2c4
 80133d8:	ed92 7a00 	vldr	s14, [r2]
 80133dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133e0:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80133e4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80133e8:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80133ec:	edd3 7a00 	vldr	s15, [r3]
 80133f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80133f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f8:	db0e      	blt.n	8013418 <_ZN15Screen1ViewBaseC1Ev+0x3870>
            return (int)(fs + 0.5f);
 80133fa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80133fe:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8013402:	edd3 7a00 	vldr	s15, [r3]
 8013406:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801340a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801340e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013412:	ee17 2a90 	vmov	r2, s15
 8013416:	e025      	b.n	8013464 <_ZN15Screen1ViewBaseC1Ev+0x38bc>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013418:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801341c:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8013420:	edd3 7a00 	vldr	s15, [r3]
 8013424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013428:	ee17 3a90 	vmov	r3, s15
 801342c:	3b01      	subs	r3, #1
 801342e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013432:	f5a2 7233 	sub.w	r2, r2, #716	@ 0x2cc
 8013436:	edd2 7a00 	vldr	s15, [r2]
 801343a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801343e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013442:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013446:	f5a2 7233 	sub.w	r2, r2, #716	@ 0x2cc
 801344a:	ed92 7a00 	vldr	s14, [r2]
 801344e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013452:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8013456:	ee77 7a87 	vadd.f32	s15, s15, s14
 801345a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801345e:	ee17 2a90 	vmov	r2, s15
 8013462:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013464:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8013466:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801346a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 801346e:	4611      	mov	r1, r2
 8013470:	6818      	ldr	r0, [r3, #0]
 8013472:	f006 fe41 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013476:	bf00      	nop
    dynamicGraph2.addDataPoint(15.01712f);
 8013478:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801347c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013486:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801348a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 801348e:	601a      	str	r2, [r3, #0]
 8013490:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013494:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8013498:	4a7c      	ldr	r2, [pc, #496]	@ (801368c <_ZN15Screen1ViewBaseC1Ev+0x3ae4>)
 801349a:	601a      	str	r2, [r3, #0]
 801349c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80134a0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80134a4:	681a      	ldr	r2, [r3, #0]
 80134a6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80134aa:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80134ae:	601a      	str	r2, [r3, #0]
 80134b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80134b4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80134b8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80134bc:	f5a2 7227 	sub.w	r2, r2, #668	@ 0x29c
 80134c0:	6812      	ldr	r2, [r2, #0]
 80134c2:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80134c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80134c8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80134d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80134d4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80134d8:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80134dc:	f5a1 7129 	sub.w	r1, r1, #676	@ 0x2a4
 80134e0:	6809      	ldr	r1, [r1, #0]
 80134e2:	6019      	str	r1, [r3, #0]
 80134e4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80134e8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80134ec:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80134ee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80134f2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	ee07 3a90 	vmov	s15, r3
 80134fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013500:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013504:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013508:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801350c:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8013510:	ed92 7a00 	vldr	s14, [r2]
 8013514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013518:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 801351c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013520:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013524:	edd3 7a00 	vldr	s15, [r3]
 8013528:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801352c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013530:	db0e      	blt.n	8013550 <_ZN15Screen1ViewBaseC1Ev+0x39a8>
            return (int)(fs + 0.5f);
 8013532:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013536:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 801353a:	edd3 7a00 	vldr	s15, [r3]
 801353e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801354a:	ee17 2a90 	vmov	r2, s15
 801354e:	e025      	b.n	801359c <_ZN15Screen1ViewBaseC1Ev+0x39f4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013550:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013554:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013558:	edd3 7a00 	vldr	s15, [r3]
 801355c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013560:	ee17 3a90 	vmov	r3, s15
 8013564:	3b01      	subs	r3, #1
 8013566:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801356a:	f5a2 722c 	sub.w	r2, r2, #688	@ 0x2b0
 801356e:	edd2 7a00 	vldr	s15, [r2]
 8013572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801357a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801357e:	f5a2 722c 	sub.w	r2, r2, #688	@ 0x2b0
 8013582:	ed92 7a00 	vldr	s14, [r2]
 8013586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801358a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801358e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013596:	ee17 2a90 	vmov	r2, s15
 801359a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 801359c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801359e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80135a2:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80135a6:	4611      	mov	r1, r2
 80135a8:	6818      	ldr	r0, [r3, #0]
 80135aa:	f006 fda5 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80135ae:	bf00      	nop
    dynamicGraph2.addDataPoint(30.95942f);
 80135b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80135b4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 80135be:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80135c2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80135c6:	601a      	str	r2, [r3, #0]
 80135c8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80135cc:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80135d0:	4a2f      	ldr	r2, [pc, #188]	@ (8013690 <_ZN15Screen1ViewBaseC1Ev+0x3ae8>)
 80135d2:	601a      	str	r2, [r3, #0]
 80135d4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80135d8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80135e2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80135e6:	601a      	str	r2, [r3, #0]
 80135e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80135ec:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80135f0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80135f4:	f5a2 7220 	sub.w	r2, r2, #640	@ 0x280
 80135f8:	6812      	ldr	r2, [r2, #0]
 80135fa:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80135fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013600:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013608:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801360c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8013610:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013614:	f5a1 7122 	sub.w	r1, r1, #648	@ 0x288
 8013618:	6809      	ldr	r1, [r1, #0]
 801361a:	6019      	str	r1, [r3, #0]
 801361c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013620:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8013624:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8013626:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801362a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	ee07 3a90 	vmov	s15, r3
 8013634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013638:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801363c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8013640:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013644:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 8013648:	ed92 7a00 	vldr	s14, [r2]
 801364c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013650:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013654:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013658:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 801365c:	edd3 7a00 	vldr	s15, [r3]
 8013660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013668:	db14      	blt.n	8013694 <_ZN15Screen1ViewBaseC1Ev+0x3aec>
            return (int)(fs + 0.5f);
 801366a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801366e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8013672:	edd3 7a00 	vldr	s15, [r3]
 8013676:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801367a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801367e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013682:	ee17 2a90 	vmov	r2, s15
 8013686:	e02b      	b.n	80136e0 <_ZN15Screen1ViewBaseC1Ev+0x3b38>
 8013688:	424a327c 	.word	0x424a327c
 801368c:	41704620 	.word	0x41704620
 8013690:	41f7ace4 	.word	0x41f7ace4
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013694:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013698:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 801369c:	edd3 7a00 	vldr	s15, [r3]
 80136a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136a4:	ee17 3a90 	vmov	r3, s15
 80136a8:	3b01      	subs	r3, #1
 80136aa:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80136ae:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 80136b2:	edd2 7a00 	vldr	s15, [r2]
 80136b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136be:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80136c2:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 80136c6:	ed92 7a00 	vldr	s14, [r2]
 80136ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136ce:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80136d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136da:	ee17 2a90 	vmov	r2, s15
 80136de:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80136e0:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80136e2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80136e6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80136ea:	4611      	mov	r1, r2
 80136ec:	6818      	ldr	r0, [r3, #0]
 80136ee:	f006 fd03 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80136f2:	bf00      	nop
    dynamicGraph2.addDataPoint(88.32439f);
 80136f4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80136f8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013702:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013706:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 801370a:	601a      	str	r2, [r3, #0]
 801370c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013710:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8013714:	4ac9      	ldr	r2, [pc, #804]	@ (8013a3c <_ZN15Screen1ViewBaseC1Ev+0x3e94>)
 8013716:	601a      	str	r2, [r3, #0]
 8013718:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801371c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013726:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 801372a:	601a      	str	r2, [r3, #0]
 801372c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013730:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8013734:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013738:	f5a2 7219 	sub.w	r2, r2, #612	@ 0x264
 801373c:	6812      	ldr	r2, [r2, #0]
 801373e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013740:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013744:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801374c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013750:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8013754:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013758:	f5a1 711b 	sub.w	r1, r1, #620	@ 0x26c
 801375c:	6809      	ldr	r1, [r1, #0]
 801375e:	6019      	str	r1, [r3, #0]
 8013760:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013764:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8013768:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801376a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801376e:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	ee07 3a90 	vmov	s15, r3
 8013778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801377c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013780:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8013784:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013788:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
 801378c:	ed92 7a00 	vldr	s14, [r2]
 8013790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013794:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013798:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801379c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80137a0:	edd3 7a00 	vldr	s15, [r3]
 80137a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80137a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ac:	db0e      	blt.n	80137cc <_ZN15Screen1ViewBaseC1Ev+0x3c24>
            return (int)(fs + 0.5f);
 80137ae:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80137b2:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80137b6:	edd3 7a00 	vldr	s15, [r3]
 80137ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80137be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137c6:	ee17 2a90 	vmov	r2, s15
 80137ca:	e025      	b.n	8013818 <_ZN15Screen1ViewBaseC1Ev+0x3c70>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80137cc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80137d0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80137d4:	edd3 7a00 	vldr	s15, [r3]
 80137d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137dc:	ee17 3a90 	vmov	r3, s15
 80137e0:	3b01      	subs	r3, #1
 80137e2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80137e6:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 80137ea:	edd2 7a00 	vldr	s15, [r2]
 80137ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137f6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80137fa:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 80137fe:	ed92 7a00 	vldr	s14, [r2]
 8013802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013806:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801380a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801380e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013812:	ee17 2a90 	vmov	r2, s15
 8013816:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013818:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801381a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801381e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8013822:	4611      	mov	r1, r2
 8013824:	6818      	ldr	r0, [r3, #0]
 8013826:	f006 fc67 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801382a:	bf00      	nop
    dynamicGraph2.addDataPoint(67.32493f);
 801382c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013830:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 801383a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801383e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8013842:	601a      	str	r2, [r3, #0]
 8013844:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013848:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801384c:	4a7c      	ldr	r2, [pc, #496]	@ (8013a40 <_ZN15Screen1ViewBaseC1Ev+0x3e98>)
 801384e:	601a      	str	r2, [r3, #0]
 8013850:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013854:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8013858:	681a      	ldr	r2, [r3, #0]
 801385a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801385e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8013862:	601a      	str	r2, [r3, #0]
 8013864:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013868:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 801386c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013870:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8013874:	6812      	ldr	r2, [r2, #0]
 8013876:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013878:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801387c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013884:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013888:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 801388c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013890:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8013894:	6809      	ldr	r1, [r1, #0]
 8013896:	6019      	str	r1, [r3, #0]
 8013898:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801389c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80138a0:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80138a2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80138a6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	ee07 3a90 	vmov	s15, r3
 80138b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80138b8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80138bc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80138c0:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80138c4:	ed92 7a00 	vldr	s14, [r2]
 80138c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138cc:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80138d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80138d4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80138d8:	edd3 7a00 	vldr	s15, [r3]
 80138dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80138e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e4:	db0e      	blt.n	8013904 <_ZN15Screen1ViewBaseC1Ev+0x3d5c>
            return (int)(fs + 0.5f);
 80138e6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80138ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80138ee:	edd3 7a00 	vldr	s15, [r3]
 80138f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80138f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80138fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138fe:	ee17 2a90 	vmov	r2, s15
 8013902:	e025      	b.n	8013950 <_ZN15Screen1ViewBaseC1Ev+0x3da8>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013904:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013908:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801390c:	edd3 7a00 	vldr	s15, [r3]
 8013910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013914:	ee17 3a90 	vmov	r3, s15
 8013918:	3b01      	subs	r3, #1
 801391a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801391e:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8013922:	edd2 7a00 	vldr	s15, [r2]
 8013926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801392a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801392e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013932:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8013936:	ed92 7a00 	vldr	s14, [r2]
 801393a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801393e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8013942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801394a:	ee17 2a90 	vmov	r2, s15
 801394e:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013950:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8013952:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013956:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 801395a:	4611      	mov	r1, r2
 801395c:	6818      	ldr	r0, [r3, #0]
 801395e:	f006 fbcb 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013962:	bf00      	nop
    dynamicGraph2.addDataPoint(51.81733f);
 8013964:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013968:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013972:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013976:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801397a:	601a      	str	r2, [r3, #0]
 801397c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013980:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8013984:	4a2f      	ldr	r2, [pc, #188]	@ (8013a44 <_ZN15Screen1ViewBaseC1Ev+0x3e9c>)
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801398c:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013996:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801399a:	601a      	str	r2, [r3, #0]
 801399c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80139a0:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80139a4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80139a8:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 80139ac:	6812      	ldr	r2, [r2, #0]
 80139ae:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80139b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80139b4:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80139bc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80139c0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80139c4:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80139c8:	f5a1 710d 	sub.w	r1, r1, #564	@ 0x234
 80139cc:	6809      	ldr	r1, [r1, #0]
 80139ce:	6019      	str	r1, [r3, #0]
 80139d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80139d4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80139d8:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80139da:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80139de:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	ee07 3a90 	vmov	s15, r3
 80139e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80139f0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80139f4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80139f8:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 80139fc:	ed92 7a00 	vldr	s14, [r2]
 8013a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a04:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013a08:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013a0c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8013a10:	edd3 7a00 	vldr	s15, [r3]
 8013a14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1c:	db14      	blt.n	8013a48 <_ZN15Screen1ViewBaseC1Ev+0x3ea0>
            return (int)(fs + 0.5f);
 8013a1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013a22:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8013a26:	edd3 7a00 	vldr	s15, [r3]
 8013a2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a36:	ee17 2a90 	vmov	r2, s15
 8013a3a:	e02b      	b.n	8013a94 <_ZN15Screen1ViewBaseC1Ev+0x3eec>
 8013a3c:	42b0a616 	.word	0x42b0a616
 8013a40:	4286a65d 	.word	0x4286a65d
 8013a44:	424f44f2 	.word	0x424f44f2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013a48:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013a4c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8013a50:	edd3 7a00 	vldr	s15, [r3]
 8013a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a58:	ee17 3a90 	vmov	r3, s15
 8013a5c:	3b01      	subs	r3, #1
 8013a5e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013a62:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8013a66:	edd2 7a00 	vldr	s15, [r2]
 8013a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a72:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013a76:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8013a7a:	ed92 7a00 	vldr	s14, [r2]
 8013a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a82:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8013a86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a8e:	ee17 2a90 	vmov	r2, s15
 8013a92:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013a94:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8013a96:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013a9a:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	6818      	ldr	r0, [r3, #0]
 8013aa2:	f006 fb29 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013aa6:	bf00      	nop
    dynamicGraph2.addDataPoint(77.00725f);
 8013aa8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013aac:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013ab6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013aba:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8013abe:	601a      	str	r2, [r3, #0]
 8013ac0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ac4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8013ac8:	4ac9      	ldr	r2, [pc, #804]	@ (8013df0 <_ZN15Screen1ViewBaseC1Ev+0x4248>)
 8013aca:	601a      	str	r2, [r3, #0]
 8013acc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ad0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ada:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8013ade:	601a      	str	r2, [r3, #0]
 8013ae0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ae4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8013ae8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013aec:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8013af0:	6812      	ldr	r2, [r2, #0]
 8013af2:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013af4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013af8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b00:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013b04:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8013b08:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013b0c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8013b10:	6809      	ldr	r1, [r1, #0]
 8013b12:	6019      	str	r1, [r3, #0]
 8013b14:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013b18:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013b1c:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8013b1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013b22:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	ee07 3a90 	vmov	s15, r3
 8013b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b30:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013b34:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013b38:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013b3c:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8013b40:	ed92 7a00 	vldr	s14, [r2]
 8013b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b48:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013b4c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013b50:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013b54:	edd3 7a00 	vldr	s15, [r3]
 8013b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b60:	db0e      	blt.n	8013b80 <_ZN15Screen1ViewBaseC1Ev+0x3fd8>
            return (int)(fs + 0.5f);
 8013b62:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013b66:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013b6a:	edd3 7a00 	vldr	s15, [r3]
 8013b6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b7a:	ee17 2a90 	vmov	r2, s15
 8013b7e:	e025      	b.n	8013bcc <_ZN15Screen1ViewBaseC1Ev+0x4024>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013b80:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013b84:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8013b88:	edd3 7a00 	vldr	s15, [r3]
 8013b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b90:	ee17 3a90 	vmov	r3, s15
 8013b94:	3b01      	subs	r3, #1
 8013b96:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013b9a:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8013b9e:	edd2 7a00 	vldr	s15, [r2]
 8013ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013baa:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013bae:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8013bb2:	ed92 7a00 	vldr	s14, [r2]
 8013bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bba:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8013bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bc6:	ee17 2a90 	vmov	r2, s15
 8013bca:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013bcc:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8013bce:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013bd2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	6818      	ldr	r0, [r3, #0]
 8013bda:	f006 fa8d 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013bde:	bf00      	nop
    dynamicGraph2.addDataPoint(35.02423f);
 8013be0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013be4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013bee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013bf2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8013bf6:	601a      	str	r2, [r3, #0]
 8013bf8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013bfc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8013c00:	4a7c      	ldr	r2, [pc, #496]	@ (8013df4 <_ZN15Screen1ViewBaseC1Ev+0x424c>)
 8013c02:	601a      	str	r2, [r3, #0]
 8013c04:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c08:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c12:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8013c16:	601a      	str	r2, [r3, #0]
 8013c18:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8013c20:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013c24:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8013c28:	6812      	ldr	r2, [r2, #0]
 8013c2a:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013c2c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c30:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013c38:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c3c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8013c40:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013c44:	f5a1 71fe 	sub.w	r1, r1, #508	@ 0x1fc
 8013c48:	6809      	ldr	r1, [r1, #0]
 8013c4a:	6019      	str	r1, [r3, #0]
 8013c4c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8013c54:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8013c56:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	ee07 3a90 	vmov	s15, r3
 8013c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c68:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c6c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8013c70:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013c74:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
 8013c78:	ed92 7a00 	vldr	s14, [r2]
 8013c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c80:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013c84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c88:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8013c8c:	edd3 7a00 	vldr	s15, [r3]
 8013c90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c98:	db0e      	blt.n	8013cb8 <_ZN15Screen1ViewBaseC1Ev+0x4110>
            return (int)(fs + 0.5f);
 8013c9a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013c9e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8013ca2:	edd3 7a00 	vldr	s15, [r3]
 8013ca6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013caa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013cb2:	ee17 2a90 	vmov	r2, s15
 8013cb6:	e025      	b.n	8013d04 <_ZN15Screen1ViewBaseC1Ev+0x415c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013cb8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013cbc:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8013cc0:	edd3 7a00 	vldr	s15, [r3]
 8013cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013cc8:	ee17 3a90 	vmov	r3, s15
 8013ccc:	3b01      	subs	r3, #1
 8013cce:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013cd2:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8013cd6:	edd2 7a00 	vldr	s15, [r2]
 8013cda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ce2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013ce6:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8013cea:	ed92 7a00 	vldr	s14, [r2]
 8013cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cf2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8013cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013cfe:	ee17 2a90 	vmov	r2, s15
 8013d02:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013d04:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8013d06:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d0a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8013d0e:	4611      	mov	r1, r2
 8013d10:	6818      	ldr	r0, [r3, #0]
 8013d12:	f006 f9f1 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013d16:	bf00      	nop
    dynamicGraph2.addDataPoint(2.5982f);
 8013d18:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d1c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013d26:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d2a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013d2e:	601a      	str	r2, [r3, #0]
 8013d30:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8013d38:	4a2f      	ldr	r2, [pc, #188]	@ (8013df8 <_ZN15Screen1ViewBaseC1Ev+0x4250>)
 8013d3a:	601a      	str	r2, [r3, #0]
 8013d3c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d40:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8013d4e:	601a      	str	r2, [r3, #0]
 8013d50:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d54:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8013d58:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013d5c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8013d60:	6812      	ldr	r2, [r2, #0]
 8013d62:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013d64:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d68:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013d70:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d74:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8013d78:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013d7c:	f5a1 71f0 	sub.w	r1, r1, #480	@ 0x1e0
 8013d80:	6809      	ldr	r1, [r1, #0]
 8013d82:	6019      	str	r1, [r3, #0]
 8013d84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d88:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8013d8c:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8013d8e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013d92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	ee07 3a90 	vmov	s15, r3
 8013d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013da0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013da4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8013da8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013dac:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8013db0:	ed92 7a00 	vldr	s14, [r2]
 8013db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013db8:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013dbc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013dc0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8013dc4:	edd3 7a00 	vldr	s15, [r3]
 8013dc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd0:	db14      	blt.n	8013dfc <_ZN15Screen1ViewBaseC1Ev+0x4254>
            return (int)(fs + 0.5f);
 8013dd2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013dd6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8013dda:	edd3 7a00 	vldr	s15, [r3]
 8013dde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013dea:	ee17 2a90 	vmov	r2, s15
 8013dee:	e02b      	b.n	8013e48 <_ZN15Screen1ViewBaseC1Ev+0x42a0>
 8013df0:	429a03b6 	.word	0x429a03b6
 8013df4:	420c18d0 	.word	0x420c18d0
 8013df8:	402648e9 	.word	0x402648e9
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013dfc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e00:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8013e04:	edd3 7a00 	vldr	s15, [r3]
 8013e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e0c:	ee17 3a90 	vmov	r3, s15
 8013e10:	3b01      	subs	r3, #1
 8013e12:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013e16:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8013e1a:	edd2 7a00 	vldr	s15, [r2]
 8013e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e26:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013e2a:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8013e2e:	ed92 7a00 	vldr	s14, [r2]
 8013e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e36:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8013e3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e42:	ee17 2a90 	vmov	r2, s15
 8013e46:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013e48:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8013e4a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013e52:	4611      	mov	r1, r2
 8013e54:	6818      	ldr	r0, [r3, #0]
 8013e56:	f006 f94f 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013e5a:	bf00      	nop
    dynamicGraph2.addDataPoint(49.32259f);
 8013e5c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e60:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013e6a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e6e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013e72:	601a      	str	r2, [r3, #0]
 8013e74:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e78:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8013e7c:	4ac9      	ldr	r2, [pc, #804]	@ (80141a4 <_ZN15Screen1ViewBaseC1Ev+0x45fc>)
 8013e7e:	601a      	str	r2, [r3, #0]
 8013e80:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e84:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e8e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8013e92:	601a      	str	r2, [r3, #0]
 8013e94:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013e98:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8013e9c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013ea0:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8013ea4:	6812      	ldr	r2, [r2, #0]
 8013ea6:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013ea8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013eac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013eb4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013eb8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8013ebc:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013ec0:	f5a1 71e2 	sub.w	r1, r1, #452	@ 0x1c4
 8013ec4:	6809      	ldr	r1, [r1, #0]
 8013ec6:	6019      	str	r1, [r3, #0]
 8013ec8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ecc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013ed0:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8013ed2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ed6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	ee07 3a90 	vmov	s15, r3
 8013ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ee4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ee8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013eec:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013ef0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8013ef4:	ed92 7a00 	vldr	s14, [r2]
 8013ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013efc:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8013f00:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013f04:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013f08:	edd3 7a00 	vldr	s15, [r3]
 8013f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f14:	db0e      	blt.n	8013f34 <_ZN15Screen1ViewBaseC1Ev+0x438c>
            return (int)(fs + 0.5f);
 8013f16:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013f1a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013f1e:	edd3 7a00 	vldr	s15, [r3]
 8013f22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f2e:	ee17 2a90 	vmov	r2, s15
 8013f32:	e025      	b.n	8013f80 <_ZN15Screen1ViewBaseC1Ev+0x43d8>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013f34:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013f38:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013f3c:	edd3 7a00 	vldr	s15, [r3]
 8013f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f44:	ee17 3a90 	vmov	r3, s15
 8013f48:	3b01      	subs	r3, #1
 8013f4a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013f4e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8013f52:	edd2 7a00 	vldr	s15, [r2]
 8013f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f5e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013f62:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8013f66:	ed92 7a00 	vldr	s14, [r2]
 8013f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f6e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8013f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f7a:	ee17 2a90 	vmov	r2, s15
 8013f7e:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8013f80:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8013f82:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013f86:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013f8a:	4611      	mov	r1, r2
 8013f8c:	6818      	ldr	r0, [r3, #0]
 8013f8e:	f006 f8b3 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013f92:	bf00      	nop
    dynamicGraph2.addDataPoint(54.03979f);
 8013f94:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013f98:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8013fa2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013fa6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013faa:	601a      	str	r2, [r3, #0]
 8013fac:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013fb0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8013fb4:	4a7c      	ldr	r2, [pc, #496]	@ (80141a8 <_ZN15Screen1ViewBaseC1Ev+0x4600>)
 8013fb6:	601a      	str	r2, [r3, #0]
 8013fb8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013fbc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013fc6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8013fca:	601a      	str	r2, [r3, #0]
 8013fcc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013fd0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8013fd4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8013fd8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8013fdc:	6812      	ldr	r2, [r2, #0]
 8013fde:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8013fe0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013fe4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013fec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8013ff0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8013ff4:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8013ff8:	f5a1 71d4 	sub.w	r1, r1, #424	@ 0x1a8
 8013ffc:	6809      	ldr	r1, [r1, #0]
 8013ffe:	6019      	str	r1, [r3, #0]
 8014000:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014004:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014008:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801400a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801400e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	ee07 3a90 	vmov	s15, r3
 8014018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801401c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014020:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014024:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014028:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 801402c:	ed92 7a00 	vldr	s14, [r2]
 8014030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014034:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014038:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801403c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014040:	edd3 7a00 	vldr	s15, [r3]
 8014044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404c:	db0e      	blt.n	801406c <_ZN15Screen1ViewBaseC1Ev+0x44c4>
            return (int)(fs + 0.5f);
 801404e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014052:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014056:	edd3 7a00 	vldr	s15, [r3]
 801405a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801405e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014066:	ee17 2a90 	vmov	r2, s15
 801406a:	e025      	b.n	80140b8 <_ZN15Screen1ViewBaseC1Ev+0x4510>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801406c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014070:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014074:	edd3 7a00 	vldr	s15, [r3]
 8014078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801407c:	ee17 3a90 	vmov	r3, s15
 8014080:	3b01      	subs	r3, #1
 8014082:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014086:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 801408a:	edd2 7a00 	vldr	s15, [r2]
 801408e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014096:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801409a:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 801409e:	ed92 7a00 	vldr	s14, [r2]
 80140a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140a6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80140aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140b2:	ee17 2a90 	vmov	r2, s15
 80140b6:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80140b8:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80140ba:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80140be:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80140c2:	4611      	mov	r1, r2
 80140c4:	6818      	ldr	r0, [r3, #0]
 80140c6:	f006 f817 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80140ca:	bf00      	nop
    dynamicGraph2.addDataPoint(41.2137f);
 80140cc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80140d0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 80140da:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80140de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80140e2:	601a      	str	r2, [r3, #0]
 80140e4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80140e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80140ec:	4a2f      	ldr	r2, [pc, #188]	@ (80141ac <_ZN15Screen1ViewBaseC1Ev+0x4604>)
 80140ee:	601a      	str	r2, [r3, #0]
 80140f0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80140f4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80140f8:	681a      	ldr	r2, [r3, #0]
 80140fa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80140fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014108:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801410c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014110:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8014114:	6812      	ldr	r2, [r2, #0]
 8014116:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8014118:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801411c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014124:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014128:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801412c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8014130:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 8014134:	6809      	ldr	r1, [r1, #0]
 8014136:	6019      	str	r1, [r3, #0]
 8014138:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801413c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014140:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8014142:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014146:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	ee07 3a90 	vmov	s15, r3
 8014150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014154:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014158:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801415c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014160:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 8014164:	ed92 7a00 	vldr	s14, [r2]
 8014168:	ee67 7a27 	vmul.f32	s15, s14, s15
 801416c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014170:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014174:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8014178:	edd3 7a00 	vldr	s15, [r3]
 801417c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014184:	db14      	blt.n	80141b0 <_ZN15Screen1ViewBaseC1Ev+0x4608>
            return (int)(fs + 0.5f);
 8014186:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801418a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801418e:	edd3 7a00 	vldr	s15, [r3]
 8014192:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014196:	ee77 7a87 	vadd.f32	s15, s15, s14
 801419a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801419e:	ee17 2a90 	vmov	r2, s15
 80141a2:	e02b      	b.n	80141fc <_ZN15Screen1ViewBaseC1Ev+0x4654>
 80141a4:	42454a55 	.word	0x42454a55
 80141a8:	425828bf 	.word	0x425828bf
 80141ac:	4224dad4 	.word	0x4224dad4
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80141b0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80141b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80141b8:	edd3 7a00 	vldr	s15, [r3]
 80141bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141c0:	ee17 3a90 	vmov	r3, s15
 80141c4:	3b01      	subs	r3, #1
 80141c6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80141ca:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 80141ce:	edd2 7a00 	vldr	s15, [r2]
 80141d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141da:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80141de:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 80141e2:	ed92 7a00 	vldr	s14, [r2]
 80141e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141ea:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80141ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141f6:	ee17 2a90 	vmov	r2, s15
 80141fa:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80141fc:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80141fe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014202:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8014206:	4611      	mov	r1, r2
 8014208:	6818      	ldr	r0, [r3, #0]
 801420a:	f005 ff75 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801420e:	bf00      	nop
    dynamicGraph2.addDataPoint(88.69701f);
 8014210:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014214:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 801421e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014222:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8014226:	601a      	str	r2, [r3, #0]
 8014228:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801422c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014230:	4ac9      	ldr	r2, [pc, #804]	@ (8014558 <_ZN15Screen1ViewBaseC1Ev+0x49b0>)
 8014232:	601a      	str	r2, [r3, #0]
 8014234:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014238:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014242:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014246:	601a      	str	r2, [r3, #0]
 8014248:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801424c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8014250:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014254:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8014258:	6812      	ldr	r2, [r2, #0]
 801425a:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 801425c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014260:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014268:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801426c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014270:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8014274:	f5a1 71b8 	sub.w	r1, r1, #368	@ 0x170
 8014278:	6809      	ldr	r1, [r1, #0]
 801427a:	6019      	str	r1, [r3, #0]
 801427c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014280:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014284:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8014286:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801428a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	ee07 3a90 	vmov	s15, r3
 8014294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014298:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801429c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80142a0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80142a4:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80142a8:	ed92 7a00 	vldr	s14, [r2]
 80142ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142b0:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80142b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80142b8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80142bc:	edd3 7a00 	vldr	s15, [r3]
 80142c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80142c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142c8:	db0e      	blt.n	80142e8 <_ZN15Screen1ViewBaseC1Ev+0x4740>
            return (int)(fs + 0.5f);
 80142ca:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80142ce:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80142d2:	edd3 7a00 	vldr	s15, [r3]
 80142d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80142da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142e2:	ee17 2a90 	vmov	r2, s15
 80142e6:	e025      	b.n	8014334 <_ZN15Screen1ViewBaseC1Ev+0x478c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80142e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80142ec:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80142f0:	edd3 7a00 	vldr	s15, [r3]
 80142f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142f8:	ee17 3a90 	vmov	r3, s15
 80142fc:	3b01      	subs	r3, #1
 80142fe:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014302:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8014306:	edd2 7a00 	vldr	s15, [r2]
 801430a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801430e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014312:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014316:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 801431a:	ed92 7a00 	vldr	s14, [r2]
 801431e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014322:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8014326:	ee77 7a87 	vadd.f32	s15, s15, s14
 801432a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801432e:	ee17 2a90 	vmov	r2, s15
 8014332:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 8014334:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8014336:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801433a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 801433e:	4611      	mov	r1, r2
 8014340:	6818      	ldr	r0, [r3, #0]
 8014342:	f005 fed9 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8014346:	bf00      	nop
    dynamicGraph2.addDataPoint(82.04074f);
 8014348:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801434c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 8014356:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801435a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801435e:	601a      	str	r2, [r3, #0]
 8014360:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014364:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014368:	4a7c      	ldr	r2, [pc, #496]	@ (801455c <_ZN15Screen1ViewBaseC1Ev+0x49b4>)
 801436a:	601a      	str	r2, [r3, #0]
 801436c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014370:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8014374:	681a      	ldr	r2, [r3, #0]
 8014376:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801437a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801437e:	601a      	str	r2, [r3, #0]
 8014380:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014384:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014388:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801438c:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8014390:	6812      	ldr	r2, [r2, #0]
 8014392:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8014394:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014398:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80143a0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80143a4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80143a8:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80143ac:	f5a1 71aa 	sub.w	r1, r1, #340	@ 0x154
 80143b0:	6809      	ldr	r1, [r1, #0]
 80143b2:	6019      	str	r1, [r3, #0]
 80143b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80143b8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80143bc:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80143be:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80143c2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	ee07 3a90 	vmov	s15, r3
 80143cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143d0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80143d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80143d8:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80143dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80143e0:	ed92 7a00 	vldr	s14, [r2]
 80143e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143e8:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 80143ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80143f0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80143f4:	edd3 7a00 	vldr	s15, [r3]
 80143f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014400:	db0e      	blt.n	8014420 <_ZN15Screen1ViewBaseC1Ev+0x4878>
            return (int)(fs + 0.5f);
 8014402:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014406:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801440a:	edd3 7a00 	vldr	s15, [r3]
 801440e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801441a:	ee17 2a90 	vmov	r2, s15
 801441e:	e025      	b.n	801446c <_ZN15Screen1ViewBaseC1Ev+0x48c4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8014420:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014424:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014428:	edd3 7a00 	vldr	s15, [r3]
 801442c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014430:	ee17 3a90 	vmov	r3, s15
 8014434:	3b01      	subs	r3, #1
 8014436:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801443a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 801443e:	edd2 7a00 	vldr	s15, [r2]
 8014442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801444a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801444e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8014452:	ed92 7a00 	vldr	s14, [r2]
 8014456:	ee77 7a67 	vsub.f32	s15, s14, s15
 801445a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801445e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014466:	ee17 2a90 	vmov	r2, s15
 801446a:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 801446c:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801446e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014472:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8014476:	4611      	mov	r1, r2
 8014478:	6818      	ldr	r0, [r3, #0]
 801447a:	f005 fe3d 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801447e:	bf00      	nop
    dynamicGraph2.addDataPoint(26.49277f);
 8014480:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014484:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 801448e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014492:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014496:	601a      	str	r2, [r3, #0]
 8014498:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801449c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80144a0:	4a2f      	ldr	r2, [pc, #188]	@ (8014560 <_ZN15Screen1ViewBaseC1Ev+0x49b8>)
 80144a2:	601a      	str	r2, [r3, #0]
 80144a4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80144a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144ac:	681a      	ldr	r2, [r3, #0]
 80144ae:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80144b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80144b6:	601a      	str	r2, [r3, #0]
 80144b8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80144bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80144c0:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80144c4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80144c8:	6812      	ldr	r2, [r2, #0]
 80144ca:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 80144cc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80144d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80144d8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80144dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80144e0:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 80144e4:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80144e8:	6809      	ldr	r1, [r1, #0]
 80144ea:	6019      	str	r1, [r3, #0]
 80144ec:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80144f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80144f4:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 80144f6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80144fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	ee07 3a90 	vmov	s15, r3
 8014504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014508:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801450c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014510:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014514:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8014518:	ed92 7a00 	vldr	s14, [r2]
 801451c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014520:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014524:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014528:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801452c:	edd3 7a00 	vldr	s15, [r3]
 8014530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014538:	db14      	blt.n	8014564 <_ZN15Screen1ViewBaseC1Ev+0x49bc>
            return (int)(fs + 0.5f);
 801453a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801453e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014542:	edd3 7a00 	vldr	s15, [r3]
 8014546:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801454a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801454e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014552:	ee17 2a90 	vmov	r2, s15
 8014556:	e02b      	b.n	80145b0 <_ZN15Screen1ViewBaseC1Ev+0x4a08>
 8014558:	42b164de 	.word	0x42b164de
 801455c:	42a414dc 	.word	0x42a414dc
 8014560:	41d3f131 	.word	0x41d3f131
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8014564:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014568:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801456c:	edd3 7a00 	vldr	s15, [r3]
 8014570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014574:	ee17 3a90 	vmov	r3, s15
 8014578:	3b01      	subs	r3, #1
 801457a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801457e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8014582:	edd2 7a00 	vldr	s15, [r2]
 8014586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801458a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801458e:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014592:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8014596:	ed92 7a00 	vldr	s14, [r2]
 801459a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801459e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80145a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145aa:	ee17 2a90 	vmov	r2, s15
 80145ae:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80145b0:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80145b2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80145b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80145ba:	4611      	mov	r1, r2
 80145bc:	6818      	ldr	r0, [r3, #0]
 80145be:	f005 fd9b 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80145c2:	bf00      	nop
    dynamicGraph2.addDataPoint(40.38668f);
 80145c4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80145c8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f503 6282 	add.w	r2, r3, #1040	@ 0x410
 80145d2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80145d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80145da:	601a      	str	r2, [r3, #0]
 80145dc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80145e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80145e4:	4aae      	ldr	r2, [pc, #696]	@ (80148a0 <_ZN15Screen1ViewBaseC1Ev+0x4cf8>)
 80145e6:	601a      	str	r2, [r3, #0]
 80145e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80145ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80145f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80145fa:	601a      	str	r2, [r3, #0]
 80145fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014600:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014604:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014608:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801460c:	6812      	ldr	r2, [r2, #0]
 801460e:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 8014610:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014614:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801461c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014620:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014624:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8014628:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801462c:	6809      	ldr	r1, [r1, #0]
 801462e:	6019      	str	r1, [r3, #0]
 8014630:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014634:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014638:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 801463a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801463e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	ee07 3a90 	vmov	s15, r3
 8014648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801464c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014650:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014654:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014658:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 801465c:	ed92 7a00 	vldr	s14, [r2]
 8014660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014664:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014668:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801466c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014670:	edd3 7a00 	vldr	s15, [r3]
 8014674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801467c:	db0e      	blt.n	801469c <_ZN15Screen1ViewBaseC1Ev+0x4af4>
            return (int)(fs + 0.5f);
 801467e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014682:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014686:	edd3 7a00 	vldr	s15, [r3]
 801468a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801468e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014696:	ee17 2a90 	vmov	r2, s15
 801469a:	e025      	b.n	80146e8 <_ZN15Screen1ViewBaseC1Ev+0x4b40>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801469c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80146a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80146a4:	edd3 7a00 	vldr	s15, [r3]
 80146a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146ac:	ee17 3a90 	vmov	r3, s15
 80146b0:	3b01      	subs	r3, #1
 80146b2:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80146b6:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80146ba:	edd2 7a00 	vldr	s15, [r2]
 80146be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80146c6:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80146ca:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80146ce:	ed92 7a00 	vldr	s14, [r2]
 80146d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146d6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80146da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146e2:	ee17 2a90 	vmov	r2, s15
 80146e6:	441a      	add	r2, r3
        return float2scaled(f, yScale);
 80146e8:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80146ea:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80146ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80146f2:	4611      	mov	r1, r2
 80146f4:	6818      	ldr	r0, [r3, #0]
 80146f6:	f005 fcff 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80146fa:	bf00      	nop
    dynamicGraph2.addDataPoint(43.6399f);
 80146fc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014700:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 801470a:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 801470e:	4b65      	ldr	r3, [pc, #404]	@ (80148a4 <_ZN15Screen1ViewBaseC1Ev+0x4cfc>)
 8014710:	f507 62d7 	add.w	r2, r7, #1720	@ 0x6b8
 8014714:	6013      	str	r3, [r2, #0]
 8014716:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	@ 0x6bc
 801471a:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 801471e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014722:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014726:	f507 62d7 	add.w	r2, r7, #1720	@ 0x6b8
 801472a:	6812      	ldr	r2, [r2, #0]
 801472c:	601a      	str	r2, [r3, #0]
        return float2scaled(f, yScale);
 801472e:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	@ 0x6b4
 8014732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014734:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801473c:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8014740:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 8014744:	6809      	ldr	r1, [r1, #0]
 8014746:	6019      	str	r1, [r3, #0]
 8014748:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801474c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014750:	601a      	str	r2, [r3, #0]
        const float fs = f * (float)scale;
 8014752:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	ee07 3a90 	vmov	s15, r3
 8014760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014764:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014768:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801476c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014770:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8014774:	ed92 7a00 	vldr	s14, [r2]
 8014778:	ee67 7a27 	vmul.f32	s15, s14, s15
 801477c:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014780:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014784:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014788:	edd3 7a00 	vldr	s15, [r3]
 801478c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014794:	db0e      	blt.n	80147b4 <_ZN15Screen1ViewBaseC1Ev+0x4c0c>
            return (int)(fs + 0.5f);
 8014796:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801479a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801479e:	edd3 7a00 	vldr	s15, [r3]
 80147a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80147a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80147aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147ae:	ee17 3a90 	vmov	r3, s15
 80147b2:	e025      	b.n	8014800 <_ZN15Screen1ViewBaseC1Ev+0x4c58>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80147b4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80147b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147bc:	edd3 7a00 	vldr	s15, [r3]
 80147c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147c4:	ee17 3a90 	vmov	r3, s15
 80147c8:	3b01      	subs	r3, #1
 80147ca:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80147ce:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80147d2:	edd2 7a00 	vldr	s15, [r2]
 80147d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147de:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80147e2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80147e6:	ed92 7a00 	vldr	s14, [r2]
 80147ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147ee:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80147f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80147f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147fa:	ee17 2a90 	vmov	r2, s15
 80147fe:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 8014800:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8014802:	4619      	mov	r1, r3
 8014804:	f8d7 06bc 	ldr.w	r0, [r7, #1724]	@ 0x6bc
 8014808:	f005 fc76 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 801480c:	bf00      	nop
    dynamicGraph2.addDataPoint(9.2779f);
 801480e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014812:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 801481c:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
 8014820:	4b21      	ldr	r3, [pc, #132]	@ (80148a8 <_ZN15Screen1ViewBaseC1Ev+0x4d00>)
 8014822:	f207 62d4 	addw	r2, r7, #1748	@ 0x6d4
 8014826:	6013      	str	r3, [r2, #0]
 8014828:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	@ 0x6d8
 801482c:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 8014830:	f207 63d4 	addw	r3, r7, #1748	@ 0x6d4
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	f207 62cc 	addw	r2, r7, #1740	@ 0x6cc
 801483a:	6013      	str	r3, [r2, #0]
        return float2scaled(f, yScale);
 801483c:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	@ 0x6d0
 8014840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014842:	f207 62cc 	addw	r2, r7, #1740	@ 0x6cc
 8014846:	6812      	ldr	r2, [r2, #0]
 8014848:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 801484c:	600a      	str	r2, [r1, #0]
 801484e:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
        const float fs = f * (float)scale;
 8014852:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	@ 0x6c4
 8014856:	ee07 3a90 	vmov	s15, r3
 801485a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801485e:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8014862:	ed93 7a00 	vldr	s14, [r3]
 8014866:	ee67 7a27 	vmul.f32	s15, s14, s15
 801486a:	f507 63d8 	add.w	r3, r7, #1728	@ 0x6c0
 801486e:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014872:	f507 63d8 	add.w	r3, r7, #1728	@ 0x6c0
 8014876:	edd3 7a00 	vldr	s15, [r3]
 801487a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014882:	db13      	blt.n	80148ac <_ZN15Screen1ViewBaseC1Ev+0x4d04>
            return (int)(fs + 0.5f);
 8014884:	f507 63d8 	add.w	r3, r7, #1728	@ 0x6c0
 8014888:	edd3 7a00 	vldr	s15, [r3]
 801488c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014898:	ee17 3a90 	vmov	r3, s15
 801489c:	e026      	b.n	80148ec <_ZN15Screen1ViewBaseC1Ev+0x4d44>
 801489e:	bf00      	nop
 80148a0:	42218bf6 	.word	0x42218bf6
 80148a4:	422e8f42 	.word	0x422e8f42
 80148a8:	41147247 	.word	0x41147247
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80148ac:	f507 63d8 	add.w	r3, r7, #1728	@ 0x6c0
 80148b0:	edd3 7a00 	vldr	s15, [r3]
 80148b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148b8:	ee17 3a90 	vmov	r3, s15
 80148bc:	3b01      	subs	r3, #1
 80148be:	f507 62d8 	add.w	r2, r7, #1728	@ 0x6c0
 80148c2:	edd2 7a00 	vldr	s15, [r2]
 80148c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148ce:	f507 62d8 	add.w	r2, r7, #1728	@ 0x6c0
 80148d2:	ed92 7a00 	vldr	s14, [r2]
 80148d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148da:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80148de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148e6:	ee17 2a90 	vmov	r2, s15
 80148ea:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 80148ec:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80148ee:	4619      	mov	r1, r3
 80148f0:	f8d7 06d8 	ldr.w	r0, [r7, #1752]	@ 0x6d8
 80148f4:	f005 fc00 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80148f8:	bf00      	nop
    dynamicGraph2.addDataPoint(50.60724f);
 80148fa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80148fe:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8014908:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
 801490c:	4b8e      	ldr	r3, [pc, #568]	@ (8014b48 <_ZN15Screen1ViewBaseC1Ev+0x4fa0>)
 801490e:	f507 62de 	add.w	r2, r7, #1776	@ 0x6f0
 8014912:	6013      	str	r3, [r2, #0]
 8014914:	f8d7 36f4 	ldr.w	r3, [r7, #1780]	@ 0x6f4
 8014918:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 801491c:	f507 63de 	add.w	r3, r7, #1776	@ 0x6f0
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	f507 62dd 	add.w	r2, r7, #1768	@ 0x6e8
 8014926:	6013      	str	r3, [r2, #0]
        return float2scaled(f, yScale);
 8014928:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	@ 0x6ec
 801492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801492e:	f507 62dd 	add.w	r2, r7, #1768	@ 0x6e8
 8014932:	6812      	ldr	r2, [r2, #0]
 8014934:	f207 61e4 	addw	r1, r7, #1764	@ 0x6e4
 8014938:	600a      	str	r2, [r1, #0]
 801493a:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
        const float fs = f * (float)scale;
 801493e:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	@ 0x6e0
 8014942:	ee07 3a90 	vmov	s15, r3
 8014946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801494a:	f207 63e4 	addw	r3, r7, #1764	@ 0x6e4
 801494e:	ed93 7a00 	vldr	s14, [r3]
 8014952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014956:	f207 63dc 	addw	r3, r7, #1756	@ 0x6dc
 801495a:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 801495e:	f207 63dc 	addw	r3, r7, #1756	@ 0x6dc
 8014962:	edd3 7a00 	vldr	s15, [r3]
 8014966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801496e:	db0c      	blt.n	801498a <_ZN15Screen1ViewBaseC1Ev+0x4de2>
            return (int)(fs + 0.5f);
 8014970:	f207 63dc 	addw	r3, r7, #1756	@ 0x6dc
 8014974:	edd3 7a00 	vldr	s15, [r3]
 8014978:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801497c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014984:	ee17 3a90 	vmov	r3, s15
 8014988:	e01f      	b.n	80149ca <_ZN15Screen1ViewBaseC1Ev+0x4e22>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801498a:	f207 63dc 	addw	r3, r7, #1756	@ 0x6dc
 801498e:	edd3 7a00 	vldr	s15, [r3]
 8014992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014996:	ee17 3a90 	vmov	r3, s15
 801499a:	3b01      	subs	r3, #1
 801499c:	f207 62dc 	addw	r2, r7, #1756	@ 0x6dc
 80149a0:	edd2 7a00 	vldr	s15, [r2]
 80149a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149ac:	f207 62dc 	addw	r2, r7, #1756	@ 0x6dc
 80149b0:	ed92 7a00 	vldr	s14, [r2]
 80149b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149b8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80149bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80149c4:	ee17 2a90 	vmov	r2, s15
 80149c8:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 80149ca:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80149cc:	4619      	mov	r1, r3
 80149ce:	f8d7 06f4 	ldr.w	r0, [r7, #1780]	@ 0x6f4
 80149d2:	f005 fb91 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80149d6:	bf00      	nop
    dynamicGraph2.addDataPoint(90.60287f);
 80149d8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80149dc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80149e6:	f8c7 3710 	str.w	r3, [r7, #1808]	@ 0x710
 80149ea:	4b58      	ldr	r3, [pc, #352]	@ (8014b4c <_ZN15Screen1ViewBaseC1Ev+0x4fa4>)
 80149ec:	f207 720c 	addw	r2, r7, #1804	@ 0x70c
 80149f0:	6013      	str	r3, [r2, #0]
 80149f2:	f8d7 3710 	ldr.w	r3, [r7, #1808]	@ 0x710
 80149f6:	f8c7 3708 	str.w	r3, [r7, #1800]	@ 0x708
 80149fa:	f207 730c 	addw	r3, r7, #1804	@ 0x70c
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	f207 7204 	addw	r2, r7, #1796	@ 0x704
 8014a04:	6013      	str	r3, [r2, #0]
        return float2scaled(f, yScale);
 8014a06:	f8d7 3708 	ldr.w	r3, [r7, #1800]	@ 0x708
 8014a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a0c:	f207 7204 	addw	r2, r7, #1796	@ 0x704
 8014a10:	6812      	ldr	r2, [r2, #0]
 8014a12:	f507 61e0 	add.w	r1, r7, #1792	@ 0x700
 8014a16:	600a      	str	r2, [r1, #0]
 8014a18:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
        const float fs = f * (float)scale;
 8014a1c:	f8d7 36fc 	ldr.w	r3, [r7, #1788]	@ 0x6fc
 8014a20:	ee07 3a90 	vmov	s15, r3
 8014a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a28:	f507 63e0 	add.w	r3, r7, #1792	@ 0x700
 8014a2c:	ed93 7a00 	vldr	s14, [r3]
 8014a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a34:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 8014a38:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014a3c:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 8014a40:	edd3 7a00 	vldr	s15, [r3]
 8014a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a4c:	db0c      	blt.n	8014a68 <_ZN15Screen1ViewBaseC1Ev+0x4ec0>
            return (int)(fs + 0.5f);
 8014a4e:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 8014a52:	edd3 7a00 	vldr	s15, [r3]
 8014a56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a62:	ee17 3a90 	vmov	r3, s15
 8014a66:	e01f      	b.n	8014aa8 <_ZN15Screen1ViewBaseC1Ev+0x4f00>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8014a68:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 8014a6c:	edd3 7a00 	vldr	s15, [r3]
 8014a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a74:	ee17 3a90 	vmov	r3, s15
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	f507 62df 	add.w	r2, r7, #1784	@ 0x6f8
 8014a7e:	edd2 7a00 	vldr	s15, [r2]
 8014a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a8a:	f507 62df 	add.w	r2, r7, #1784	@ 0x6f8
 8014a8e:	ed92 7a00 	vldr	s14, [r2]
 8014a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a96:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8014a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aa2:	ee17 2a90 	vmov	r2, s15
 8014aa6:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 8014aa8:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8014aaa:	4619      	mov	r1, r3
 8014aac:	f8d7 0710 	ldr.w	r0, [r7, #1808]	@ 0x710
 8014ab0:	f005 fb22 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8014ab4:	bf00      	nop
    dynamicGraph2.addDataPoint(55.78295f);
 8014ab6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014aba:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8014ac4:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 8014ac8:	4b21      	ldr	r3, [pc, #132]	@ (8014b50 <_ZN15Screen1ViewBaseC1Ev+0x4fa8>)
 8014aca:	f507 62e5 	add.w	r2, r7, #1832	@ 0x728
 8014ace:	6013      	str	r3, [r2, #0]
 8014ad0:	f8d7 372c 	ldr.w	r3, [r7, #1836]	@ 0x72c
 8014ad4:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 8014ad8:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	f507 62e4 	add.w	r2, r7, #1824	@ 0x720
 8014ae2:	6013      	str	r3, [r2, #0]
        return float2scaled(f, yScale);
 8014ae4:	f8d7 3724 	ldr.w	r3, [r7, #1828]	@ 0x724
 8014ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014aea:	f507 62e4 	add.w	r2, r7, #1824	@ 0x720
 8014aee:	6812      	ldr	r2, [r2, #0]
 8014af0:	f207 711c 	addw	r1, r7, #1820	@ 0x71c
 8014af4:	600a      	str	r2, [r1, #0]
 8014af6:	f8c7 3718 	str.w	r3, [r7, #1816]	@ 0x718
        const float fs = f * (float)scale;
 8014afa:	f8d7 3718 	ldr.w	r3, [r7, #1816]	@ 0x718
 8014afe:	ee07 3a90 	vmov	s15, r3
 8014b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b06:	f207 731c 	addw	r3, r7, #1820	@ 0x71c
 8014b0a:	ed93 7a00 	vldr	s14, [r3]
 8014b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b12:	f207 7314 	addw	r3, r7, #1812	@ 0x714
 8014b16:	edc3 7a00 	vstr	s15, [r3]
        if (fs >= 0)
 8014b1a:	f207 7314 	addw	r3, r7, #1812	@ 0x714
 8014b1e:	edd3 7a00 	vldr	s15, [r3]
 8014b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2a:	db13      	blt.n	8014b54 <_ZN15Screen1ViewBaseC1Ev+0x4fac>
            return (int)(fs + 0.5f);
 8014b2c:	f207 7314 	addw	r3, r7, #1812	@ 0x714
 8014b30:	edd3 7a00 	vldr	s15, [r3]
 8014b34:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b40:	ee17 3a90 	vmov	r3, s15
 8014b44:	e026      	b.n	8014b94 <_ZN15Screen1ViewBaseC1Ev+0x4fec>
 8014b46:	bf00      	nop
 8014b48:	424a6dd0 	.word	0x424a6dd0
 8014b4c:	42b534ab 	.word	0x42b534ab
 8014b50:	425f21be 	.word	0x425f21be
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8014b54:	f207 7314 	addw	r3, r7, #1812	@ 0x714
 8014b58:	edd3 7a00 	vldr	s15, [r3]
 8014b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b60:	ee17 3a90 	vmov	r3, s15
 8014b64:	3b01      	subs	r3, #1
 8014b66:	f207 7214 	addw	r2, r7, #1812	@ 0x714
 8014b6a:	edd2 7a00 	vldr	s15, [r2]
 8014b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b76:	f207 7214 	addw	r2, r7, #1812	@ 0x714
 8014b7a:	ed92 7a00 	vldr	s14, [r2]
 8014b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b82:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8014b86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b8e:	ee17 2a90 	vmov	r2, s15
 8014b92:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 8014b94:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 8014b96:	4619      	mov	r1, r3
 8014b98:	f8d7 072c 	ldr.w	r0, [r7, #1836]	@ 0x72c
 8014b9c:	f005 faac 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8014ba0:	bf00      	nop
    add(dynamicGraph2);
 8014ba2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014ba6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014baa:	681a      	ldr	r2, [r3, #0]
 8014bac:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014bb0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8014bba:	4619      	mov	r1, r3
 8014bbc:	4610      	mov	r0, r2
 8014bbe:	f7f8 fe7d 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4.setXY(6, 97);
 8014bc2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014bc6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	f203 637c 	addw	r3, r3, #1660	@ 0x67c
 8014bd0:	2261      	movs	r2, #97	@ 0x61
 8014bd2:	2106      	movs	r1, #6
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f8 fce8 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014bda:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014bde:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	f203 647c 	addw	r4, r3, #1660	@ 0x67c
 8014be8:	2300      	movs	r3, #0
 8014bea:	f887 3733 	strb.w	r3, [r7, #1843]	@ 0x733
 8014bee:	2300      	movs	r3, #0
 8014bf0:	f887 3732 	strb.w	r3, [r7, #1842]	@ 0x732
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	f887 3731 	strb.w	r3, [r7, #1841]	@ 0x731
 8014bfa:	f897 3733 	ldrb.w	r3, [r7, #1843]	@ 0x733
 8014bfe:	041a      	lsls	r2, r3, #16
 8014c00:	f897 3732 	ldrb.w	r3, [r7, #1842]	@ 0x732
 8014c04:	021b      	lsls	r3, r3, #8
 8014c06:	431a      	orrs	r2, r3
 8014c08:	f897 3731 	ldrb.w	r3, [r7, #1841]	@ 0x731
 8014c0c:	4313      	orrs	r3, r2
 8014c0e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8014c12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014c16:	4611      	mov	r1, r2
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7f8 fbad 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8014c1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014c22:	f2a3 63dc 	subw	r3, r3, #1756	@ 0x6dc
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	461a      	mov	r2, r3
 8014c2a:	f8c7 4734 	str.w	r4, [r7, #1844]	@ 0x734
 8014c2e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014c32:	f5a3 63ef 	sub.w	r3, r3, #1912	@ 0x778
 8014c36:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014c38:	f8d7 3734 	ldr.w	r3, [r7, #1844]	@ 0x734
 8014c3c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014c40:	f5a2 62ef 	sub.w	r2, r2, #1912	@ 0x778
 8014c44:	6812      	ldr	r2, [r2, #0]
 8014c46:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8014c48:	bf00      	nop
    textArea4.setLinespacing(0);
 8014c4a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014c4e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	f203 637c 	addw	r3, r3, #1660	@ 0x67c
 8014c58:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	f8a7 373a 	strh.w	r3, [r7, #1850]	@ 0x73a
        linespace = space;
 8014c62:	f8d7 373c 	ldr.w	r3, [r7, #1852]	@ 0x73c
 8014c66:	f8b7 273a 	ldrh.w	r2, [r7, #1850]	@ 0x73a
 8014c6a:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8014c6c:	f8d7 373c 	ldr.w	r3, [r7, #1852]	@ 0x73c
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	3384      	adds	r3, #132	@ 0x84
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f8d7 473c 	ldr.w	r4, [r7, #1852]	@ 0x73c
 8014c7a:	463a      	mov	r2, r7
 8014c7c:	f8d7 173c 	ldr.w	r1, [r7, #1852]	@ 0x73c
 8014c80:	4610      	mov	r0, r2
 8014c82:	4798      	blx	r3
 8014c84:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014c88:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 8014c8c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8014c90:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014c96:	bf00      	nop
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FGFY));
 8014c98:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014c9c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	f203 647c 	addw	r4, r3, #1660	@ 0x67c
 8014ca6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8014caa:	2107      	movs	r1, #7
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7f8 fe7b 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8014cb2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f006 fb53 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014cbe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7f7 fc14 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4);
 8014cc8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014ccc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014cd0:	681a      	ldr	r2, [r3, #0]
 8014cd2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014cd6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	f203 637c 	addw	r3, r3, #1660	@ 0x67c
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	4610      	mov	r0, r2
 8014ce4:	f7f8 fdea 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_2.setXY(6, 211);
 8014ce8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014cec:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 8014cf6:	22d3      	movs	r2, #211	@ 0xd3
 8014cf8:	2106      	movs	r1, #6
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7f8 fc55 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014d00:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014d04:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	f203 64c4 	addw	r4, r3, #1732	@ 0x6c4
 8014d0e:	2300      	movs	r3, #0
 8014d10:	f887 3743 	strb.w	r3, [r7, #1859]	@ 0x743
 8014d14:	2300      	movs	r3, #0
 8014d16:	f887 3742 	strb.w	r3, [r7, #1858]	@ 0x742
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	f887 3741 	strb.w	r3, [r7, #1857]	@ 0x741
 8014d20:	f897 3743 	ldrb.w	r3, [r7, #1859]	@ 0x743
 8014d24:	041a      	lsls	r2, r3, #16
 8014d26:	f897 3742 	ldrb.w	r3, [r7, #1858]	@ 0x742
 8014d2a:	021b      	lsls	r3, r3, #8
 8014d2c:	431a      	orrs	r2, r3
 8014d2e:	f897 3741 	ldrb.w	r3, [r7, #1857]	@ 0x741
 8014d32:	4313      	orrs	r3, r2
 8014d34:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8014d38:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014d3c:	4611      	mov	r1, r2
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7f8 fb1a 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8014d44:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014d48:	f5a3 63dc 	sub.w	r3, r3, #1760	@ 0x6e0
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	461a      	mov	r2, r3
 8014d50:	f8c7 4744 	str.w	r4, [r7, #1860]	@ 0x744
 8014d54:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014d58:	f2a3 737c 	subw	r3, r3, #1916	@ 0x77c
 8014d5c:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014d5e:	f8d7 3744 	ldr.w	r3, [r7, #1860]	@ 0x744
 8014d62:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014d66:	f2a2 727c 	subw	r2, r2, #1916	@ 0x77c
 8014d6a:	6812      	ldr	r2, [r2, #0]
 8014d6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8014d6e:	bf00      	nop
    textArea4_2.setLinespacing(0);
 8014d70:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014d74:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 8014d7e:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
 8014d82:	2300      	movs	r3, #0
 8014d84:	f8a7 374a 	strh.w	r3, [r7, #1866]	@ 0x74a
        linespace = space;
 8014d88:	f8d7 374c 	ldr.w	r3, [r7, #1868]	@ 0x74c
 8014d8c:	f8b7 274a 	ldrh.w	r2, [r7, #1866]	@ 0x74a
 8014d90:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8014d92:	f8d7 374c 	ldr.w	r3, [r7, #1868]	@ 0x74c
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	3384      	adds	r3, #132	@ 0x84
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	f8d7 474c 	ldr.w	r4, [r7, #1868]	@ 0x74c
 8014da0:	463a      	mov	r2, r7
 8014da2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	@ 0x74c
 8014da6:	4610      	mov	r0, r2
 8014da8:	4798      	blx	r3
 8014daa:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014dae:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 8014db2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8014db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8014db8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014dbc:	bf00      	nop
    textArea4_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5K6I));
 8014dbe:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014dc2:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	f203 64c4 	addw	r4, r3, #1732	@ 0x6c4
 8014dcc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8014dd0:	2100      	movs	r1, #0
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7f8 fde8 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8014dd8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8014ddc:	4619      	mov	r1, r3
 8014dde:	4620      	mov	r0, r4
 8014de0:	f006 fac0 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014de4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7f7 fb81 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_2);
 8014dee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014df2:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014df6:	681a      	ldr	r2, [r3, #0]
 8014df8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014dfc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 8014e06:	4619      	mov	r1, r3
 8014e08:	4610      	mov	r0, r2
 8014e0a:	f7f8 fd57 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1.setXY(6, 152);
 8014e0e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014e12:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	f203 730c 	addw	r3, r3, #1804	@ 0x70c
 8014e1c:	2298      	movs	r2, #152	@ 0x98
 8014e1e:	2106      	movs	r1, #6
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7f8 fbc2 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014e26:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014e2a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	f203 740c 	addw	r4, r3, #1804	@ 0x70c
 8014e34:	2300      	movs	r3, #0
 8014e36:	f887 3753 	strb.w	r3, [r7, #1875]	@ 0x753
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	f887 3752 	strb.w	r3, [r7, #1874]	@ 0x752
 8014e40:	2300      	movs	r3, #0
 8014e42:	f887 3751 	strb.w	r3, [r7, #1873]	@ 0x751
 8014e46:	f897 3753 	ldrb.w	r3, [r7, #1875]	@ 0x753
 8014e4a:	041a      	lsls	r2, r3, #16
 8014e4c:	f897 3752 	ldrb.w	r3, [r7, #1874]	@ 0x752
 8014e50:	021b      	lsls	r3, r3, #8
 8014e52:	431a      	orrs	r2, r3
 8014e54:	f897 3751 	ldrb.w	r3, [r7, #1873]	@ 0x751
 8014e58:	4313      	orrs	r3, r2
 8014e5a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8014e5e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8014e62:	4611      	mov	r1, r2
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7f8 fa87 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8014e6a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014e6e:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	461a      	mov	r2, r3
 8014e76:	f8c7 4754 	str.w	r4, [r7, #1876]	@ 0x754
 8014e7a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014e7e:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8014e82:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014e84:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8014e88:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014e8c:	f5a2 62f0 	sub.w	r2, r2, #1920	@ 0x780
 8014e90:	6812      	ldr	r2, [r2, #0]
 8014e92:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8014e94:	bf00      	nop
    textArea4_1.setLinespacing(0);
 8014e96:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014e9a:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f203 730c 	addw	r3, r3, #1804	@ 0x70c
 8014ea4:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
        linespace = space;
 8014eae:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8014eb2:	f8b7 275a 	ldrh.w	r2, [r7, #1882]	@ 0x75a
 8014eb6:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8014eb8:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	3384      	adds	r3, #132	@ 0x84
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	f8d7 475c 	ldr.w	r4, [r7, #1884]	@ 0x75c
 8014ec6:	463a      	mov	r2, r7
 8014ec8:	f8d7 175c 	ldr.w	r1, [r7, #1884]	@ 0x75c
 8014ecc:	4610      	mov	r0, r2
 8014ece:	4798      	blx	r3
 8014ed0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014ed4:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 8014ed8:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8014edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8014ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014ee2:	bf00      	nop
    textArea4_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F7VS));
 8014ee4:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014ee8:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	f203 740c 	addw	r4, r3, #1804	@ 0x70c
 8014ef2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8014ef6:	2106      	movs	r1, #6
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7f8 fd55 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8014efe:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8014f02:	4619      	mov	r1, r3
 8014f04:	4620      	mov	r0, r4
 8014f06:	f006 fa2d 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014f0a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7f7 faee 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1);
 8014f14:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014f18:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014f1c:	681a      	ldr	r2, [r3, #0]
 8014f1e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014f22:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f203 730c 	addw	r3, r3, #1804	@ 0x70c
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	4610      	mov	r0, r2
 8014f30:	f7f8 fcc4 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_2.setXY(6, 114);
 8014f34:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014f38:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	f203 7354 	addw	r3, r3, #1876	@ 0x754
 8014f42:	2272      	movs	r2, #114	@ 0x72
 8014f44:	2106      	movs	r1, #6
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7f8 fb2f 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014f4c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014f50:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	f203 7454 	addw	r4, r3, #1876	@ 0x754
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	f887 3763 	strb.w	r3, [r7, #1891]	@ 0x763
 8014f60:	2300      	movs	r3, #0
 8014f62:	f887 3762 	strb.w	r3, [r7, #1890]	@ 0x762
 8014f66:	2300      	movs	r3, #0
 8014f68:	f887 3761 	strb.w	r3, [r7, #1889]	@ 0x761
 8014f6c:	f897 3763 	ldrb.w	r3, [r7, #1891]	@ 0x763
 8014f70:	041a      	lsls	r2, r3, #16
 8014f72:	f897 3762 	ldrb.w	r3, [r7, #1890]	@ 0x762
 8014f76:	021b      	lsls	r3, r3, #8
 8014f78:	431a      	orrs	r2, r3
 8014f7a:	f897 3761 	ldrb.w	r3, [r7, #1889]	@ 0x761
 8014f7e:	4313      	orrs	r3, r2
 8014f80:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8014f84:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8014f88:	4611      	mov	r1, r2
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7f8 f9f4 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8014f90:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014f94:	f5a3 63dd 	sub.w	r3, r3, #1768	@ 0x6e8
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	f8c7 4764 	str.w	r4, [r7, #1892]	@ 0x764
 8014fa0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014fa4:	f2a3 7384 	subw	r3, r3, #1924	@ 0x784
 8014fa8:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014faa:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 8014fae:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8014fb2:	f2a2 7284 	subw	r2, r2, #1924	@ 0x784
 8014fb6:	6812      	ldr	r2, [r2, #0]
 8014fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8014fba:	bf00      	nop
    textArea4_1_1_1_2.setLinespacing(0);
 8014fbc:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014fc0:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	f203 7354 	addw	r3, r3, #1876	@ 0x754
 8014fca:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
 8014fce:	2300      	movs	r3, #0
 8014fd0:	f8a7 376a 	strh.w	r3, [r7, #1898]	@ 0x76a
        linespace = space;
 8014fd4:	f8d7 376c 	ldr.w	r3, [r7, #1900]	@ 0x76c
 8014fd8:	f8b7 276a 	ldrh.w	r2, [r7, #1898]	@ 0x76a
 8014fdc:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8014fde:	f8d7 376c 	ldr.w	r3, [r7, #1900]	@ 0x76c
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	3384      	adds	r3, #132	@ 0x84
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	f8d7 476c 	ldr.w	r4, [r7, #1900]	@ 0x76c
 8014fec:	463a      	mov	r2, r7
 8014fee:	f8d7 176c 	ldr.w	r1, [r7, #1900]	@ 0x76c
 8014ff2:	4610      	mov	r0, r2
 8014ff4:	4798      	blx	r3
 8014ff6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8014ffa:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 8014ffe:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8015002:	ca07      	ldmia	r2, {r0, r1, r2}
 8015004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015008:	bf00      	nop
    textArea4_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BPQY));
 801500a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801500e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f203 7454 	addw	r4, r3, #1876	@ 0x754
 8015018:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801501c:	2104      	movs	r1, #4
 801501e:	4618      	mov	r0, r3
 8015020:	f7f8 fcc2 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8015024:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8015028:	4619      	mov	r1, r3
 801502a:	4620      	mov	r0, r4
 801502c:	f006 f99a 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015030:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8015034:	4618      	mov	r0, r3
 8015036:	f7f7 fa5b 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_2);
 801503a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801503e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015042:	681a      	ldr	r2, [r3, #0]
 8015044:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015048:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	f203 7354 	addw	r3, r3, #1876	@ 0x754
 8015052:	4619      	mov	r1, r3
 8015054:	4610      	mov	r0, r2
 8015056:	f7f8 fc31 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_1.setXY(6, 189);
 801505a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801505e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f203 739c 	addw	r3, r3, #1948	@ 0x79c
 8015068:	22bd      	movs	r2, #189	@ 0xbd
 801506a:	2106      	movs	r1, #6
 801506c:	4618      	mov	r0, r3
 801506e:	f7f8 fa9c 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8015072:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015076:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f203 749c 	addw	r4, r3, #1948	@ 0x79c
 8015080:	2300      	movs	r3, #0
 8015082:	f887 3773 	strb.w	r3, [r7, #1907]	@ 0x773
 8015086:	2300      	movs	r3, #0
 8015088:	f887 3772 	strb.w	r3, [r7, #1906]	@ 0x772
 801508c:	2300      	movs	r3, #0
 801508e:	f887 3771 	strb.w	r3, [r7, #1905]	@ 0x771
 8015092:	f897 3773 	ldrb.w	r3, [r7, #1907]	@ 0x773
 8015096:	041a      	lsls	r2, r3, #16
 8015098:	f897 3772 	ldrb.w	r3, [r7, #1906]	@ 0x772
 801509c:	021b      	lsls	r3, r3, #8
 801509e:	431a      	orrs	r2, r3
 80150a0:	f897 3771 	ldrb.w	r3, [r7, #1905]	@ 0x771
 80150a4:	4313      	orrs	r3, r2
 80150a6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80150aa:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80150ae:	4611      	mov	r1, r2
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7f8 f961 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 80150b6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80150ba:	f2a3 63ec 	subw	r3, r3, #1772	@ 0x6ec
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	461a      	mov	r2, r3
 80150c2:	f8c7 4774 	str.w	r4, [r7, #1908]	@ 0x774
 80150c6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80150ca:	f5a3 63f1 	sub.w	r3, r3, #1928	@ 0x788
 80150ce:	601a      	str	r2, [r3, #0]
        color = newColor;
 80150d0:	f8d7 3774 	ldr.w	r3, [r7, #1908]	@ 0x774
 80150d4:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 80150d8:	f5a2 62f1 	sub.w	r2, r2, #1928	@ 0x788
 80150dc:	6812      	ldr	r2, [r2, #0]
 80150de:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80150e0:	bf00      	nop
    textArea4_1_1_1_1.setLinespacing(0);
 80150e2:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80150e6:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f203 739c 	addw	r3, r3, #1948	@ 0x79c
 80150f0:	f8c7 377c 	str.w	r3, [r7, #1916]	@ 0x77c
 80150f4:	2300      	movs	r3, #0
 80150f6:	f8a7 377a 	strh.w	r3, [r7, #1914]	@ 0x77a
        linespace = space;
 80150fa:	f8d7 377c 	ldr.w	r3, [r7, #1916]	@ 0x77c
 80150fe:	f8b7 277a 	ldrh.w	r2, [r7, #1914]	@ 0x77a
 8015102:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8015104:	f8d7 377c 	ldr.w	r3, [r7, #1916]	@ 0x77c
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	3384      	adds	r3, #132	@ 0x84
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	f8d7 477c 	ldr.w	r4, [r7, #1916]	@ 0x77c
 8015112:	463a      	mov	r2, r7
 8015114:	f8d7 177c 	ldr.w	r1, [r7, #1916]	@ 0x77c
 8015118:	4610      	mov	r0, r2
 801511a:	4798      	blx	r3
 801511c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015120:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 8015124:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8015128:	ca07      	ldmia	r2, {r0, r1, r2}
 801512a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801512e:	bf00      	nop
    textArea4_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_88JH));
 8015130:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015134:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f203 749c 	addw	r4, r3, #1948	@ 0x79c
 801513e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8015142:	2105      	movs	r1, #5
 8015144:	4618      	mov	r0, r3
 8015146:	f7f8 fc2f 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 801514a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801514e:	4619      	mov	r1, r3
 8015150:	4620      	mov	r0, r4
 8015152:	f006 f907 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015156:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801515a:	4618      	mov	r0, r3
 801515c:	f7f7 f9c8 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_1);
 8015160:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015164:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015168:	681a      	ldr	r2, [r3, #0]
 801516a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801516e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	f203 739c 	addw	r3, r3, #1948	@ 0x79c
 8015178:	4619      	mov	r1, r3
 801517a:	4610      	mov	r0, r2
 801517c:	f7f8 fb9e 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1.setXY(6, 266);
 8015180:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015184:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 801518e:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8015192:	2106      	movs	r1, #6
 8015194:	4618      	mov	r0, r3
 8015196:	f7f8 fa08 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 801519a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801519e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	f203 74e4 	addw	r4, r3, #2020	@ 0x7e4
 80151a8:	2300      	movs	r3, #0
 80151aa:	f887 3783 	strb.w	r3, [r7, #1923]	@ 0x783
 80151ae:	2300      	movs	r3, #0
 80151b0:	f887 3782 	strb.w	r3, [r7, #1922]	@ 0x782
 80151b4:	2300      	movs	r3, #0
 80151b6:	f887 3781 	strb.w	r3, [r7, #1921]	@ 0x781
 80151ba:	f897 3783 	ldrb.w	r3, [r7, #1923]	@ 0x783
 80151be:	041a      	lsls	r2, r3, #16
 80151c0:	f897 3782 	ldrb.w	r3, [r7, #1922]	@ 0x782
 80151c4:	021b      	lsls	r3, r3, #8
 80151c6:	431a      	orrs	r2, r3
 80151c8:	f897 3781 	ldrb.w	r3, [r7, #1921]	@ 0x781
 80151cc:	4313      	orrs	r3, r2
 80151ce:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80151d2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80151d6:	4611      	mov	r1, r2
 80151d8:	4618      	mov	r0, r3
 80151da:	f7f8 f8cd 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 80151de:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80151e2:	f5a3 63de 	sub.w	r3, r3, #1776	@ 0x6f0
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	461a      	mov	r2, r3
 80151ea:	f8c7 4784 	str.w	r4, [r7, #1924]	@ 0x784
 80151ee:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80151f2:	f2a3 738c 	subw	r3, r3, #1932	@ 0x78c
 80151f6:	601a      	str	r2, [r3, #0]
        color = newColor;
 80151f8:	f8d7 3784 	ldr.w	r3, [r7, #1924]	@ 0x784
 80151fc:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8015200:	f2a2 728c 	subw	r2, r2, #1932	@ 0x78c
 8015204:	6812      	ldr	r2, [r2, #0]
 8015206:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8015208:	bf00      	nop
    textArea4_1_1.setLinespacing(0);
 801520a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801520e:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 8015218:	f8c7 378c 	str.w	r3, [r7, #1932]	@ 0x78c
 801521c:	2300      	movs	r3, #0
 801521e:	f8a7 378a 	strh.w	r3, [r7, #1930]	@ 0x78a
        linespace = space;
 8015222:	f8d7 378c 	ldr.w	r3, [r7, #1932]	@ 0x78c
 8015226:	f8b7 278a 	ldrh.w	r2, [r7, #1930]	@ 0x78a
 801522a:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 801522c:	f8d7 378c 	ldr.w	r3, [r7, #1932]	@ 0x78c
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	3384      	adds	r3, #132	@ 0x84
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f8d7 478c 	ldr.w	r4, [r7, #1932]	@ 0x78c
 801523a:	463a      	mov	r2, r7
 801523c:	f8d7 178c 	ldr.w	r1, [r7, #1932]	@ 0x78c
 8015240:	4610      	mov	r0, r2
 8015242:	4798      	blx	r3
 8015244:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015248:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 801524c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8015250:	ca07      	ldmia	r2, {r0, r1, r2}
 8015252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015256:	bf00      	nop
    textArea4_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SCUA));
 8015258:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801525c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f203 74e4 	addw	r4, r3, #2020	@ 0x7e4
 8015266:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801526a:	2101      	movs	r1, #1
 801526c:	4618      	mov	r0, r3
 801526e:	f7f8 fb9b 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8015272:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8015276:	4619      	mov	r1, r3
 8015278:	4620      	mov	r0, r4
 801527a:	f006 f873 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801527e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8015282:	4618      	mov	r0, r3
 8015284:	f7f7 f934 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1);
 8015288:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801528c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015290:	681a      	ldr	r2, [r3, #0]
 8015292:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015296:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 80152a0:	4619      	mov	r1, r3
 80152a2:	4610      	mov	r0, r2
 80152a4:	f7f8 fb0a 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_2_1.setXY(6, 228);
 80152a8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80152ac:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 80152b6:	22e4      	movs	r2, #228	@ 0xe4
 80152b8:	2106      	movs	r1, #6
 80152ba:	4618      	mov	r0, r3
 80152bc:	f7f8 f975 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_2_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80152c0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80152c4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	f603 042c 	addw	r4, r3, #2092	@ 0x82c
 80152ce:	2300      	movs	r3, #0
 80152d0:	f887 3793 	strb.w	r3, [r7, #1939]	@ 0x793
 80152d4:	2300      	movs	r3, #0
 80152d6:	f887 3792 	strb.w	r3, [r7, #1938]	@ 0x792
 80152da:	2300      	movs	r3, #0
 80152dc:	f887 3791 	strb.w	r3, [r7, #1937]	@ 0x791
 80152e0:	f897 3793 	ldrb.w	r3, [r7, #1939]	@ 0x793
 80152e4:	041a      	lsls	r2, r3, #16
 80152e6:	f897 3792 	ldrb.w	r3, [r7, #1938]	@ 0x792
 80152ea:	021b      	lsls	r3, r3, #8
 80152ec:	431a      	orrs	r2, r3
 80152ee:	f897 3791 	ldrb.w	r3, [r7, #1937]	@ 0x791
 80152f2:	4313      	orrs	r3, r2
 80152f4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80152f8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80152fc:	4611      	mov	r1, r2
 80152fe:	4618      	mov	r0, r3
 8015300:	f7f8 f83a 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8015304:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015308:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	461a      	mov	r2, r3
 8015310:	f8c7 4794 	str.w	r4, [r7, #1940]	@ 0x794
 8015314:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015318:	f5a3 63f2 	sub.w	r3, r3, #1936	@ 0x790
 801531c:	601a      	str	r2, [r3, #0]
        color = newColor;
 801531e:	f8d7 3794 	ldr.w	r3, [r7, #1940]	@ 0x794
 8015322:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 8015326:	f5a2 62f2 	sub.w	r2, r2, #1936	@ 0x790
 801532a:	6812      	ldr	r2, [r2, #0]
 801532c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 801532e:	bf00      	nop
    textArea4_1_1_1_2_1.setLinespacing(0);
 8015330:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015334:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 801533e:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 8015342:	2300      	movs	r3, #0
 8015344:	f8a7 379a 	strh.w	r3, [r7, #1946]	@ 0x79a
        linespace = space;
 8015348:	f8d7 379c 	ldr.w	r3, [r7, #1948]	@ 0x79c
 801534c:	f8b7 279a 	ldrh.w	r2, [r7, #1946]	@ 0x79a
 8015350:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8015352:	f8d7 379c 	ldr.w	r3, [r7, #1948]	@ 0x79c
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	3384      	adds	r3, #132	@ 0x84
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	f8d7 479c 	ldr.w	r4, [r7, #1948]	@ 0x79c
 8015360:	463a      	mov	r2, r7
 8015362:	f8d7 179c 	ldr.w	r1, [r7, #1948]	@ 0x79c
 8015366:	4610      	mov	r0, r2
 8015368:	4798      	blx	r3
 801536a:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801536e:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 8015372:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8015376:	ca07      	ldmia	r2, {r0, r1, r2}
 8015378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801537c:	bf00      	nop
    textArea4_1_1_1_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1Y1G));
 801537e:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015382:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	f603 042c 	addw	r4, r3, #2092	@ 0x82c
 801538c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8015390:	2102      	movs	r1, #2
 8015392:	4618      	mov	r0, r3
 8015394:	f7f8 fb08 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 8015398:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801539c:	4619      	mov	r1, r3
 801539e:	4620      	mov	r0, r4
 80153a0:	f005 ffe0 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80153a4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7f7 f8a1 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_2_1);
 80153ae:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80153b2:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80153bc:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 80153c6:	4619      	mov	r1, r3
 80153c8:	4610      	mov	r0, r2
 80153ca:	f7f8 fa77 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_1_1.setXY(6, 303);
 80153ce:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80153d2:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f603 0374 	addw	r3, r3, #2164	@ 0x874
 80153dc:	f240 122f 	movw	r2, #303	@ 0x12f
 80153e0:	2106      	movs	r1, #6
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7f8 f8e1 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80153e8:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80153ec:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	f603 0474 	addw	r4, r3, #2164	@ 0x874
 80153f6:	2300      	movs	r3, #0
 80153f8:	f887 37a3 	strb.w	r3, [r7, #1955]	@ 0x7a3
 80153fc:	2300      	movs	r3, #0
 80153fe:	f887 37a2 	strb.w	r3, [r7, #1954]	@ 0x7a2
 8015402:	2300      	movs	r3, #0
 8015404:	f887 37a1 	strb.w	r3, [r7, #1953]	@ 0x7a1
 8015408:	f897 37a3 	ldrb.w	r3, [r7, #1955]	@ 0x7a3
 801540c:	041a      	lsls	r2, r3, #16
 801540e:	f897 37a2 	ldrb.w	r3, [r7, #1954]	@ 0x7a2
 8015412:	021b      	lsls	r3, r3, #8
 8015414:	431a      	orrs	r2, r3
 8015416:	f897 37a1 	ldrb.w	r3, [r7, #1953]	@ 0x7a1
 801541a:	4313      	orrs	r3, r2
 801541c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8015420:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8015424:	4611      	mov	r1, r2
 8015426:	4618      	mov	r0, r3
 8015428:	f7f7 ffa6 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 801542c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015430:	f5a3 63df 	sub.w	r3, r3, #1784	@ 0x6f8
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	461a      	mov	r2, r3
 8015438:	f8c7 47a4 	str.w	r4, [r7, #1956]	@ 0x7a4
 801543c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015440:	f2a3 7394 	subw	r3, r3, #1940	@ 0x794
 8015444:	601a      	str	r2, [r3, #0]
        color = newColor;
 8015446:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	@ 0x7a4
 801544a:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801544e:	f2a2 7294 	subw	r2, r2, #1940	@ 0x794
 8015452:	6812      	ldr	r2, [r2, #0]
 8015454:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8015456:	bf00      	nop
    textArea4_1_1_1_1_1.setLinespacing(0);
 8015458:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 801545c:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	f603 0374 	addw	r3, r3, #2164	@ 0x874
 8015466:	f8c7 37ac 	str.w	r3, [r7, #1964]	@ 0x7ac
 801546a:	2300      	movs	r3, #0
 801546c:	f8a7 37aa 	strh.w	r3, [r7, #1962]	@ 0x7aa
        linespace = space;
 8015470:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	@ 0x7ac
 8015474:	f8b7 27aa 	ldrh.w	r2, [r7, #1962]	@ 0x7aa
 8015478:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 801547a:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	@ 0x7ac
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	3384      	adds	r3, #132	@ 0x84
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f8d7 47ac 	ldr.w	r4, [r7, #1964]	@ 0x7ac
 8015488:	463a      	mov	r2, r7
 801548a:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	@ 0x7ac
 801548e:	4610      	mov	r0, r2
 8015490:	4798      	blx	r3
 8015492:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 8015496:	f5a3 62f6 	sub.w	r2, r3, #1968	@ 0x7b0
 801549a:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801549e:	ca07      	ldmia	r2, {r0, r1, r2}
 80154a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80154a4:	bf00      	nop
    textArea4_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IFBT));
 80154a6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80154aa:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	f603 0474 	addw	r4, r3, #2164	@ 0x874
 80154b4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80154b8:	2103      	movs	r1, #3
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7f8 fa74 	bl	800d9a8 <_ZN8touchgfx9TypedTextC1Et>
 80154c0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80154c4:	4619      	mov	r1, r3
 80154c6:	4620      	mov	r0, r4
 80154c8:	f005 ff4c 	bl	801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80154cc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7f7 f80d 	bl	800c4f0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_1_1);
 80154d6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80154da:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80154de:	681a      	ldr	r2, [r3, #0]
 80154e0:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80154e4:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f603 0374 	addw	r3, r3, #2164	@ 0x874
 80154ee:	4619      	mov	r1, r3
 80154f0:	4610      	mov	r0, r2
 80154f2:	f7f8 f9e3 	bl	800d8bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80154f6:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80154fa:	f2a3 739c 	subw	r3, r3, #1948	@ 0x79c
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4618      	mov	r0, r3
 8015502:	f207 77b4 	addw	r7, r7, #1972	@ 0x7b4
 8015506:	46bd      	mov	sp, r7
 8015508:	bd90      	pop	{r4, r7, pc}
 801550a:	bf00      	nop

0801550c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	4a4c      	ldr	r2, [pc, #304]	@ (8015648 <_ZN15Screen1ViewBaseD1Ev+0x13c>)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	601a      	str	r2, [r3, #0]
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 801551a:	f006 fe77 	bl	801c20c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f603 0374 	addw	r3, r3, #2164	@ 0x874
 8015524:	4618      	mov	r0, r3
 8015526:	f7f8 fb93 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 8015530:	4618      	mov	r0, r3
 8015532:	f7f8 fb8d 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f203 73e4 	addw	r3, r3, #2020	@ 0x7e4
 801553c:	4618      	mov	r0, r3
 801553e:	f7f8 fb87 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f203 739c 	addw	r3, r3, #1948	@ 0x79c
 8015548:	4618      	mov	r0, r3
 801554a:	f7f8 fb81 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f203 7354 	addw	r3, r3, #1876	@ 0x754
 8015554:	4618      	mov	r0, r3
 8015556:	f7f8 fb7b 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f203 730c 	addw	r3, r3, #1804	@ 0x70c
 8015560:	4618      	mov	r0, r3
 8015562:	f7f8 fb75 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 801556c:	4618      	mov	r0, r3
 801556e:	f7f8 fb6f 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f203 637c 	addw	r3, r3, #1660	@ 0x67c
 8015578:	4618      	mov	r0, r3
 801557a:	f7f8 fb69 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 8015584:	4618      	mov	r0, r3
 8015586:	f000 f9bb 	bl	8015900 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev>
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8015590:	4618      	mov	r0, r3
 8015592:	f000 f981 	bl	8015898 <_ZN8touchgfx13PainterRGB565D1Ev>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 801559c:	4618      	mov	r0, r3
 801559e:	f000 f959 	bl	8015854 <_ZN8touchgfx16GraphElementLineD1Ev>
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f203 53c4 	addw	r3, r3, #1476	@ 0x5c4
 80155a8:	4618      	mov	r0, r3
 80155aa:	f000 f8ed 	bl	8015788 <_ZN8touchgfx17GraphElementGridYD1Ev>
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80155b4:	4618      	mov	r0, r3
 80155b6:	f000 f8c3 	bl	8015740 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EED1Ev>
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 80155c0:	4618      	mov	r0, r3
 80155c2:	f000 f99d 	bl	8015900 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f503 7372 	add.w	r3, r3, #968	@ 0x3c8
 80155cc:	4618      	mov	r0, r3
 80155ce:	f000 f963 	bl	8015898 <_ZN8touchgfx13PainterRGB565D1Ev>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 80155d8:	4618      	mov	r0, r3
 80155da:	f000 f93b 	bl	8015854 <_ZN8touchgfx16GraphElementLineD1Ev>
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80155e4:	4618      	mov	r0, r3
 80155e6:	f000 f8cf 	bl	8015788 <_ZN8touchgfx17GraphElementGridYD1Ev>
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80155f0:	4618      	mov	r0, r3
 80155f2:	f000 f8a5 	bl	8015740 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EED1Ev>
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80155fc:	4618      	mov	r0, r3
 80155fe:	f7f8 fb27 	bl	800dc50 <_ZN8touchgfx8TextAreaD1Ev>
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8015608:	4618      	mov	r0, r3
 801560a:	f000 f8df 	bl	80157cc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	33c4      	adds	r3, #196	@ 0xc4
 8015612:	4618      	mov	r0, r3
 8015614:	f000 f8da 	bl	80157cc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	3398      	adds	r3, #152	@ 0x98
 801561c:	4618      	mov	r0, r3
 801561e:	f000 f8f7 	bl	8015810 <_ZN8touchgfx3BoxD1Ev>
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	336c      	adds	r3, #108	@ 0x6c
 8015626:	4618      	mov	r0, r3
 8015628:	f000 f8f2 	bl	8015810 <_ZN8touchgfx3BoxD1Ev>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	3340      	adds	r3, #64	@ 0x40
 8015630:	4618      	mov	r0, r3
 8015632:	f000 f8ed 	bl	8015810 <_ZN8touchgfx3BoxD1Ev>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	4618      	mov	r0, r3
 801563a:	f7fa fa4d 	bl	800fad8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4618      	mov	r0, r3
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	08032298 	.word	0x08032298

0801564c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
}
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f7ff ff59 	bl	801550c <_ZN15Screen1ViewBaseD1Ev>
 801565a:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f01a f96d 	bl	802f93e <_ZdlPvj>
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 801566e:	b480      	push	{r7}
 8015670:	b083      	sub	sp, #12
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]

}
 8015676:	bf00      	nop
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr

08015682 <_ZN8touchgfx3absIiEET_S1_>:
 * @param  d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 8015682:	b480      	push	{r7}
 8015684:	b083      	sub	sp, #12
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
{
    return (d < 0) ? -d : d;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2b00      	cmp	r3, #0
 801568e:	bfb8      	it	lt
 8015690:	425b      	neglt	r3, r3
}
 8015692:	4618      	mov	r0, r3
 8015694:	370c      	adds	r7, #12
 8015696:	46bd      	mov	sp, r7
 8015698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569c:	4770      	bx	lr
	...

080156a0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	4618      	mov	r0, r3
 80156ac:	f009 fe3a 	bl	801f324 <_ZN8touchgfx6ScreenC1Ev>
 80156b0:	4a05      	ldr	r2, [pc, #20]	@ (80156c8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	601a      	str	r2, [r3, #0]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2200      	movs	r2, #0
 80156ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	4618      	mov	r0, r3
 80156c0:	3708      	adds	r7, #8
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	08032464 	.word	0x08032464

080156cc <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>:
class GraphWrapAndOverwriteData : public DynamicDataGraph
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	4a05      	ldr	r2, [pc, #20]	@ (80156ec <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev+0x20>)
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	601a      	str	r2, [r3, #0]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	4618      	mov	r0, r3
 80156de:	f7f9 fe1f 	bl	800f320 <_ZN8touchgfx16DynamicDataGraphD1Ev>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	4618      	mov	r0, r3
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}
 80156ec:	080333e0 	.word	0x080333e0

080156f0 <_ZN8touchgfx25GraphWrapAndOverwriteDataD0Ev>:
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f7ff ffe7 	bl	80156cc <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>
 80156fe:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f01a f91b 	bl	802f93e <_ZdlPvj>
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	4618      	mov	r0, r3
 801570c:	3708      	adds	r7, #8
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
	...

08015714 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
{
public:
    GraphWrapAndOverwrite()
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
        : GraphWrapAndOverwriteData(CAPACITY, y)
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015724:	461a      	mov	r2, r3
 8015726:	2119      	movs	r1, #25
 8015728:	f7f9 fe1e 	bl	800f368 <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi>
 801572c:	4a03      	ldr	r2, [pc, #12]	@ (801573c <_ZN8touchgfx21GraphWrapAndOverwriteILs25EEC1Ev+0x28>)
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	601a      	str	r2, [r3, #0]
    {
    }
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	4618      	mov	r0, r3
 8015736:	3708      	adds	r7, #8
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	080322cc 	.word	0x080322cc

08015740 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EED1Ev>:
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	4a05      	ldr	r2, [pc, #20]	@ (8015760 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EED1Ev+0x20>)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	601a      	str	r2, [r3, #0]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	4618      	mov	r0, r3
 8015752:	f7ff ffbb 	bl	80156cc <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	4618      	mov	r0, r3
 801575a:	3708      	adds	r7, #8
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	080322cc 	.word	0x080322cc

08015764 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EED0Ev>:
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7ff ffe7 	bl	8015740 <_ZN8touchgfx21GraphWrapAndOverwriteILs25EED1Ev>
 8015772:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f01a f8e1 	bl	802f93e <_ZdlPvj>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	4618      	mov	r0, r3
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
	...

08015788 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	4a05      	ldr	r2, [pc, #20]	@ (80157a8 <_ZN8touchgfx17GraphElementGridYD1Ev+0x20>)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	601a      	str	r2, [r3, #0]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	4618      	mov	r0, r3
 801579a:	f7fa f9bf 	bl	800fb1c <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	4618      	mov	r0, r3
 80157a2:	3708      	adds	r7, #8
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}
 80157a8:	080324cc 	.word	0x080324cc

080157ac <_ZN8touchgfx17GraphElementGridYD0Ev>:
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6878      	ldr	r0, [r7, #4]
 80157b6:	f7ff ffe7 	bl	8015788 <_ZN8touchgfx17GraphElementGridYD1Ev>
 80157ba:	2140      	movs	r1, #64	@ 0x40
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f01a f8be 	bl	802f93e <_ZdlPvj>
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	4618      	mov	r0, r3
 80157c6:	3708      	adds	r7, #8
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}

080157cc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	4a05      	ldr	r2, [pc, #20]	@ (80157ec <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	601a      	str	r2, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	4618      	mov	r0, r3
 80157de:	f7f8 fa89 	bl	800dcf4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	4618      	mov	r0, r3
 80157e6:	3708      	adds	r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	080326a8 	.word	0x080326a8

080157f0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f7ff ffe7 	bl	80157cc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80157fe:	214c      	movs	r1, #76	@ 0x4c
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f01a f89c 	bl	802f93e <_ZdlPvj>
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	4618      	mov	r0, r3
 801580a:	3708      	adds	r7, #8
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	4a05      	ldr	r2, [pc, #20]	@ (8015830 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	601a      	str	r2, [r3, #0]
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	4618      	mov	r0, r3
 8015822:	f7f8 f86d 	bl	800d900 <_ZN8touchgfx6WidgetD1Ev>
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	4618      	mov	r0, r3
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	08033608 	.word	0x08033608

08015834 <_ZN8touchgfx3BoxD0Ev>:
 8015834:	b580      	push	{r7, lr}
 8015836:	b082      	sub	sp, #8
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f7ff ffe7 	bl	8015810 <_ZN8touchgfx3BoxD1Ev>
 8015842:	212c      	movs	r1, #44	@ 0x2c
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f01a f87a 	bl	802f93e <_ZdlPvj>
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	4618      	mov	r0, r3
 801584e:	3708      	adds	r7, #8
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <_ZN8touchgfx16GraphElementLineD1Ev>:
class GraphElementLine : public AbstractGraphElement
 8015854:	b580      	push	{r7, lr}
 8015856:	b082      	sub	sp, #8
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	4a05      	ldr	r2, [pc, #20]	@ (8015874 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	601a      	str	r2, [r3, #0]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	f7f9 fe21 	bl	800f4ac <_ZN8touchgfx20AbstractGraphElementD1Ev>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	4618      	mov	r0, r3
 801586e:	3708      	adds	r7, #8
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}
 8015874:	08033224 	.word	0x08033224

08015878 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8015878:	b580      	push	{r7, lr}
 801587a:	b082      	sub	sp, #8
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7ff ffe7 	bl	8015854 <_ZN8touchgfx16GraphElementLineD1Ev>
 8015886:	2130      	movs	r1, #48	@ 0x30
 8015888:	6878      	ldr	r0, [r7, #4]
 801588a:	f01a f858 	bl	802f93e <_ZdlPvj>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	4618      	mov	r0, r3
 8015892:	3708      	adds	r7, #8
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	4a09      	ldr	r2, [pc, #36]	@ (80158c8 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	601a      	str	r2, [r3, #0]
 80158a6:	4a09      	ldr	r2, [pc, #36]	@ (80158cc <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	609a      	str	r2, [r3, #8]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	3308      	adds	r3, #8
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fa f807 	bl	800f8c4 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7fa f88f 	bl	800f9dc <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	4618      	mov	r0, r3
 80158c2:	3708      	adds	r7, #8
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}
 80158c8:	08032eac 	.word	0x08032eac
 80158cc:	08032ed0 	.word	0x08032ed0

080158d0 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80158d0:	f1a0 0008 	sub.w	r0, r0, #8
 80158d4:	e7e0      	b.n	8015898 <_ZN8touchgfx13PainterRGB565D1Ev>
 80158d6:	bf00      	nop

080158d8 <_ZN8touchgfx13PainterRGB565D0Ev>:
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f7ff ffd9 	bl	8015898 <_ZN8touchgfx13PainterRGB565D1Ev>
 80158e6:	2114      	movs	r1, #20
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f01a f828 	bl	802f93e <_ZdlPvj>
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	3708      	adds	r7, #8
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}

080158f8 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 80158f8:	f1a0 0008 	sub.w	r0, r0, #8
 80158fc:	e7ec      	b.n	80158d8 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

08015900 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev>:
class GraphElementVerticalGapLine : public AbstractGraphElementNoCWR
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	4a05      	ldr	r2, [pc, #20]	@ (8015920 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev+0x20>)
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	601a      	str	r2, [r3, #0]
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	4618      	mov	r0, r3
 8015912:	f7f9 fe37 	bl	800f584 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	4618      	mov	r0, r3
 801591a:	3708      	adds	r7, #8
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}
 8015920:	08033358 	.word	0x08033358

08015924 <_ZN8touchgfx27GraphElementVerticalGapLineD0Ev>:
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7ff ffe7 	bl	8015900 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev>
 8015932:	2134      	movs	r1, #52	@ 0x34
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f01a f802 	bl	802f93e <_ZdlPvj>
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	4618      	mov	r0, r3
 801593e:	3708      	adds	r7, #8
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}

08015944 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8015944:	b480      	push	{r7}
 8015946:	af00      	add	r7, sp, #0
    return bitmap_database;
 8015948:	4b02      	ldr	r3, [pc, #8]	@ (8015954 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801594a:	4618      	mov	r0, r3
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr
 8015954:	08032798 	.word	0x08032798

08015958 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8015958:	b480      	push	{r7}
 801595a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801595c:	2301      	movs	r3, #1
}
 801595e:	4618      	mov	r0, r3
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8015968:	b480      	push	{r7}
 801596a:	b085      	sub	sp, #20
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	460b      	mov	r3, r1
 8015972:	607a      	str	r2, [r7, #4]
 8015974:	817b      	strh	r3, [r7, #10]
        return 0;
 8015976:	2300      	movs	r3, #0
    }
 8015978:	4618      	mov	r0, r3
 801597a:	3714      	adds	r7, #20
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr

08015984 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8015984:	b480      	push	{r7}
 8015986:	b083      	sub	sp, #12
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
        return 0;
 801598c:	2300      	movs	r3, #0
    }
 801598e:	4618      	mov	r0, r3
 8015990:	370c      	adds	r7, #12
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr

0801599a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801599a:	b480      	push	{r7}
 801599c:	b083      	sub	sp, #12
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
        return 0;
 80159a2:	2300      	movs	r3, #0
    }
 80159a4:	4618      	mov	r0, r3
 80159a6:	370c      	adds	r7, #12
 80159a8:	46bd      	mov	sp, r7
 80159aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ae:	4770      	bx	lr

080159b0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80159b0:	b480      	push	{r7}
 80159b2:	b085      	sub	sp, #20
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	60f8      	str	r0, [r7, #12]
 80159b8:	60b9      	str	r1, [r7, #8]
 80159ba:	4613      	mov	r3, r2
 80159bc:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 80159be:	4a07      	ldr	r2, [pc, #28]	@ (80159dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80159c4:	4a06      	ldr	r2, [pc, #24]	@ (80159e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80159ca:	4a06      	ldr	r2, [pc, #24]	@ (80159e4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80159cc:	88fb      	ldrh	r3, [r7, #6]
 80159ce:	8013      	strh	r3, [r2, #0]
    }
 80159d0:	bf00      	nop
 80159d2:	3714      	adds	r7, #20
 80159d4:	46bd      	mov	sp, r7
 80159d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159da:	4770      	bx	lr
 80159dc:	20012054 	.word	0x20012054
 80159e0:	2001205c 	.word	0x2001205c
 80159e4:	20012058 	.word	0x20012058

080159e8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80159e8:	b40e      	push	{r1, r2, r3}
 80159ea:	b580      	push	{r7, lr}
 80159ec:	b085      	sub	sp, #20
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80159f2:	f107 0320 	add.w	r3, r7, #32
 80159f6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	69fa      	ldr	r2, [r7, #28]
 80159fc:	2100      	movs	r1, #0
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f008 fff8 	bl	801e9f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015a04:	4603      	mov	r3, r0
 8015a06:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015a08:	89fb      	ldrh	r3, [r7, #14]
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3714      	adds	r7, #20
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015a14:	b003      	add	sp, #12
 8015a16:	4770      	bx	lr

08015a18 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8015a18:	b40c      	push	{r2, r3}
 8015a1a:	b580      	push	{r7, lr}
 8015a1c:	b084      	sub	sp, #16
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
 8015a22:	460b      	mov	r3, r1
 8015a24:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8015a26:	f107 031c 	add.w	r3, r7, #28
 8015a2a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8015a2c:	78f9      	ldrb	r1, [r7, #3]
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	69ba      	ldr	r2, [r7, #24]
 8015a32:	6878      	ldr	r0, [r7, #4]
 8015a34:	f008 ffde 	bl	801e9f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015a3c:	89fb      	ldrh	r3, [r7, #14]
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3710      	adds	r7, #16
 8015a42:	46bd      	mov	sp, r7
 8015a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015a48:	b002      	add	sp, #8
 8015a4a:	4770      	bx	lr

08015a4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b08a      	sub	sp, #40	@ 0x28
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
 8015a54:	460b      	mov	r3, r1
 8015a56:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d016      	beq.n	8015a8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	3322      	adds	r3, #34	@ 0x22
 8015a64:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8015a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a68:	8adb      	ldrh	r3, [r3, #22]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d105      	bne.n	8015a7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8015a6e:	4b43      	ldr	r3, [pc, #268]	@ (8015b7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8015a70:	4a43      	ldr	r2, [pc, #268]	@ (8015b80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8015a72:	21c5      	movs	r1, #197	@ 0xc5
 8015a74:	4843      	ldr	r0, [pc, #268]	@ (8015b84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015a76:	f019 ff8f 	bl	802f998 <__assert_func>
            return buffer[pos];
 8015a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a7c:	8a9b      	ldrh	r3, [r3, #20]
 8015a7e:	461a      	mov	r2, r3
 8015a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d001      	beq.n	8015a8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	e000      	b.n	8015a90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d06a      	beq.n	8015b6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f00a fb4a 	bl	802012e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	3322      	adds	r3, #34	@ 0x22
 8015a9e:	623b      	str	r3, [r7, #32]
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8015aa4:	6a3b      	ldr	r3, [r7, #32]
 8015aa6:	8adb      	ldrh	r3, [r3, #22]
 8015aa8:	8bfa      	ldrh	r2, [r7, #30]
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d305      	bcc.n	8015aba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8015aae:	4b36      	ldr	r3, [pc, #216]	@ (8015b88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8015ab0:	4a36      	ldr	r2, [pc, #216]	@ (8015b8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8015ab2:	21cb      	movs	r1, #203	@ 0xcb
 8015ab4:	4833      	ldr	r0, [pc, #204]	@ (8015b84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015ab6:	f019 ff6f 	bl	802f998 <__assert_func>
            const uint16_t index = pos + offset;
 8015aba:	6a3b      	ldr	r3, [r7, #32]
 8015abc:	8a9a      	ldrh	r2, [r3, #20]
 8015abe:	8bfb      	ldrh	r3, [r7, #30]
 8015ac0:	4413      	add	r3, r2
 8015ac2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8015ac4:	8bbb      	ldrh	r3, [r7, #28]
 8015ac6:	2b09      	cmp	r3, #9
 8015ac8:	d801      	bhi.n	8015ace <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8015aca:	8bbb      	ldrh	r3, [r7, #28]
 8015acc:	e001      	b.n	8015ad2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8015ace:	8bbb      	ldrh	r3, [r7, #28]
 8015ad0:	3b0a      	subs	r3, #10
 8015ad2:	6a3a      	ldr	r2, [r7, #32]
 8015ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015ad8:	f640 123f 	movw	r2, #2367	@ 0x93f
 8015adc:	4293      	cmp	r3, r2
 8015ade:	bf0c      	ite	eq
 8015ae0:	2301      	moveq	r3, #1
 8015ae2:	2300      	movne	r3, #0
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d03f      	beq.n	8015b6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	3322      	adds	r3, #34	@ 0x22
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	3222      	adds	r2, #34	@ 0x22
 8015af2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8015af4:	68ba      	ldr	r2, [r7, #8]
 8015af6:	8ad2      	ldrh	r2, [r2, #22]
 8015af8:	2a00      	cmp	r2, #0
 8015afa:	d105      	bne.n	8015b08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8015afc:	4b1f      	ldr	r3, [pc, #124]	@ (8015b7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8015afe:	4a20      	ldr	r2, [pc, #128]	@ (8015b80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8015b00:	21c5      	movs	r1, #197	@ 0xc5
 8015b02:	4820      	ldr	r0, [pc, #128]	@ (8015b84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015b04:	f019 ff48 	bl	802f998 <__assert_func>
            return buffer[pos];
 8015b08:	68ba      	ldr	r2, [r7, #8]
 8015b0a:	8a92      	ldrh	r2, [r2, #20]
 8015b0c:	4611      	mov	r1, r2
 8015b0e:	68ba      	ldr	r2, [r7, #8]
 8015b10:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8015b14:	613b      	str	r3, [r7, #16]
 8015b16:	4613      	mov	r3, r2
 8015b18:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	8adb      	ldrh	r3, [r3, #22]
 8015b1e:	2b01      	cmp	r3, #1
 8015b20:	d806      	bhi.n	8015b30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8015b22:	4b1b      	ldr	r3, [pc, #108]	@ (8015b90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8015b24:	4a1b      	ldr	r2, [pc, #108]	@ (8015b94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8015b26:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8015b2a:	4816      	ldr	r0, [pc, #88]	@ (8015b84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015b2c:	f019 ff34 	bl	802f998 <__assert_func>
            const uint16_t index = pos + 1;
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	8a9b      	ldrh	r3, [r3, #20]
 8015b34:	3301      	adds	r3, #1
 8015b36:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8015b38:	89bb      	ldrh	r3, [r7, #12]
 8015b3a:	2b09      	cmp	r3, #9
 8015b3c:	d801      	bhi.n	8015b42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8015b3e:	89bb      	ldrh	r3, [r7, #12]
 8015b40:	e000      	b.n	8015b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8015b42:	2300      	movs	r3, #0
 8015b44:	693a      	ldr	r2, [r7, #16]
 8015b46:	89f9      	ldrh	r1, [r7, #14]
 8015b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8015b4c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3322      	adds	r3, #34	@ 0x22
 8015b52:	61bb      	str	r3, [r7, #24]
 8015b54:	f640 133f 	movw	r3, #2367	@ 0x93f
 8015b58:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	8a9b      	ldrh	r3, [r3, #20]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	69bb      	ldr	r3, [r7, #24]
 8015b62:	8afa      	ldrh	r2, [r7, #22]
 8015b64:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8015b68:	bf00      	nop
        }
    }
    return getNextChar();
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f00a f9e2 	bl	801ff34 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015b70:	4603      	mov	r3, r0
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3728      	adds	r7, #40	@ 0x28
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
 8015b7a:	bf00      	nop
 8015b7c:	0803120c 	.word	0x0803120c
 8015b80:	08031218 	.word	0x08031218
 8015b84:	080312c4 	.word	0x080312c4
 8015b88:	0803130c 	.word	0x0803130c
 8015b8c:	0803131c 	.word	0x0803131c
 8015b90:	080313f0 	.word	0x080313f0
 8015b94:	080313fc 	.word	0x080313fc

08015b98 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b082      	sub	sp, #8
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8015ba0:	6878      	ldr	r0, [r7, #4]
 8015ba2:	f00a f98e 	bl	801fec2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8015ba6:	bf00      	nop
 8015ba8:	3708      	adds	r7, #8
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8015bae:	b580      	push	{r7, lr}
 8015bb0:	b088      	sub	sp, #32
 8015bb2:	af02      	add	r7, sp, #8
 8015bb4:	60f8      	str	r0, [r7, #12]
 8015bb6:	1d38      	adds	r0, r7, #4
 8015bb8:	e880 0006 	stmia.w	r0, {r1, r2}
 8015bbc:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8015bbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015bc2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8015bc4:	1d39      	adds	r1, r7, #4
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	9301      	str	r3, [sp, #4]
 8015bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	6a3b      	ldr	r3, [r7, #32]
 8015bd0:	683a      	ldr	r2, [r7, #0]
 8015bd2:	68f8      	ldr	r0, [r7, #12]
 8015bd4:	f007 fbb0 	bl	801d338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8015bd8:	bf00      	nop
 8015bda:	3718      	adds	r7, #24
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8015be0:	b590      	push	{r4, r7, lr}
 8015be2:	b085      	sub	sp, #20
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	4603      	mov	r3, r0
 8015be8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015bea:	2300      	movs	r3, #0
 8015bec:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8015bee:	88fb      	ldrh	r3, [r7, #6]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d127      	bne.n	8015c44 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8015bf4:	88fb      	ldrh	r3, [r7, #6]
 8015bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8015c70 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d016      	beq.n	8015c2e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8015c00:	88fb      	ldrh	r3, [r7, #6]
 8015c02:	4a1b      	ldr	r2, [pc, #108]	@ (8015c70 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c08:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	68ba      	ldr	r2, [r7, #8]
 8015c10:	4413      	add	r3, r2
 8015c12:	4a18      	ldr	r2, [pc, #96]	@ (8015c74 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015c14:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	68ba      	ldr	r2, [r7, #8]
 8015c1c:	4413      	add	r3, r2
 8015c1e:	4a16      	ldr	r2, [pc, #88]	@ (8015c78 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015c20:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	68ba      	ldr	r2, [r7, #8]
 8015c28:	4413      	add	r3, r2
 8015c2a:	60fb      	str	r3, [r7, #12]
 8015c2c:	e00a      	b.n	8015c44 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015c2e:	4b11      	ldr	r3, [pc, #68]	@ (8015c74 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015c30:	4a12      	ldr	r2, [pc, #72]	@ (8015c7c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8015c32:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8015c34:	4a12      	ldr	r2, [pc, #72]	@ (8015c80 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8015c36:	4b10      	ldr	r3, [pc, #64]	@ (8015c78 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015c38:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015c3a:	88fb      	ldrh	r3, [r7, #6]
 8015c3c:	4a11      	ldr	r2, [pc, #68]	@ (8015c84 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c42:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00d      	beq.n	8015c66 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8015c88 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8015c4c:	88fb      	ldrh	r3, [r7, #6]
 8015c4e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8015c50:	f000 f83e 	bl	8015cd0 <_ZN17TypedTextDatabase8getFontsEv>
 8015c54:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015c56:	f000 f833 	bl	8015cc0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	4621      	mov	r1, r4
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	f7ff fea5 	bl	80159b0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015c66:	bf00      	nop
 8015c68:	3714      	adds	r7, #20
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd90      	pop	{r4, r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	2000d5c4 	.word	0x2000d5c4
 8015c74:	2000d5cc 	.word	0x2000d5cc
 8015c78:	2000d5d0 	.word	0x2000d5d0
 8015c7c:	0803df10 	.word	0x0803df10
 8015c80:	0803dedc 	.word	0x0803dedc
 8015c84:	0803dfc8 	.word	0x0803dfc8
 8015c88:	2000d5c8 	.word	0x2000d5c8

08015c8c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	460b      	mov	r3, r1
 8015c96:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015c98:	4b07      	ldr	r3, [pc, #28]	@ (8015cb8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015c9a:	681a      	ldr	r2, [r3, #0]
 8015c9c:	4b07      	ldr	r3, [pc, #28]	@ (8015cbc <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8015c9e:	6819      	ldr	r1, [r3, #0]
 8015ca0:	887b      	ldrh	r3, [r7, #2]
 8015ca2:	009b      	lsls	r3, r3, #2
 8015ca4:	440b      	add	r3, r1
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	005b      	lsls	r3, r3, #1
 8015caa:	4413      	add	r3, r2
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	370c      	adds	r7, #12
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr
 8015cb8:	2000d5cc 	.word	0x2000d5cc
 8015cbc:	2000d5d0 	.word	0x2000d5d0

08015cc0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8015cc4:	230d      	movs	r3, #13
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr

08015cd0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8015cd0:	b480      	push	{r7}
 8015cd2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8015cd4:	4b02      	ldr	r3, [pc, #8]	@ (8015ce0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr
 8015ce0:	2000d5d4 	.word	0x2000d5d4

08015ce4 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	2b01      	cmp	r3, #1
 8015cf2:	d113      	bne.n	8015d1c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015cfa:	4293      	cmp	r3, r2
 8015cfc:	d10e      	bne.n	8015d1c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8015cfe:	f7f6 fd31 	bl	800c764 <_Z23getFont_verdana_20_4bppv>
 8015d02:	4603      	mov	r3, r0
};
 8015d04:	4a07      	ldr	r2, [pc, #28]	@ (8015d24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015d06:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8015d08:	f7f6 fd84 	bl	800c814 <_Z23getFont_verdana_40_4bppv>
 8015d0c:	4603      	mov	r3, r0
};
 8015d0e:	4a05      	ldr	r2, [pc, #20]	@ (8015d24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015d10:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8015d12:	f7f6 fccf 	bl	800c6b4 <_Z23getFont_verdana_10_4bppv>
 8015d16:	4603      	mov	r3, r0
};
 8015d18:	4a02      	ldr	r2, [pc, #8]	@ (8015d24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015d1a:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8015d1c:	bf00      	nop
 8015d1e:	3708      	adds	r7, #8
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	2000d5d4 	.word	0x2000d5d4

08015d28 <_GLOBAL__sub_I_touchgfx_fonts>:
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015d30:	2001      	movs	r0, #1
 8015d32:	f7ff ffd7 	bl	8015ce4 <_Z41__static_initialization_and_destruction_0ii>
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b082      	sub	sp, #8
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
 8015d40:	4a05      	ldr	r2, [pc, #20]	@ (8015d58 <_ZN19FrontendApplicationD1Ev+0x20>)
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	601a      	str	r2, [r3, #0]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f7f6 ffc1 	bl	800ccd0 <_ZN23FrontendApplicationBaseD1Ev>
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	4618      	mov	r0, r3
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	08032818 	.word	0x08032818

08015d5c <_ZN19FrontendApplicationD0Ev>:
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f7ff ffe7 	bl	8015d38 <_ZN19FrontendApplicationD1Ev>
 8015d6a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f019 fde5 	bl	802f93e <_ZdlPvj>
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	4618      	mov	r0, r3
 8015d78:	3708      	adds	r7, #8
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bd80      	pop	{r7, pc}

08015d7e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8015d7e:	b580      	push	{r7, lr}
 8015d80:	b082      	sub	sp, #8
 8015d82:	af00      	add	r7, sp, #0
 8015d84:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f000 f82d 	bl	8015dec <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	4618      	mov	r0, r3
 8015d96:	f007 ff63 	bl	801dc60 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8015d9a:	bf00      	nop
 8015d9c:	3708      	adds	r7, #8
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
	...

08015da4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b084      	sub	sp, #16
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	687a      	ldr	r2, [r7, #4]
 8015db4:	68b9      	ldr	r1, [r7, #8]
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7f6 ffda 	bl	800cd70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8015dbc:	4a03      	ldr	r2, [pc, #12]	@ (8015dcc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	601a      	str	r2, [r3, #0]
{

}
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3710      	adds	r7, #16
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	08032818 	.word	0x08032818

08015dd0 <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#ifndef SIMULATOR
#include "main.h"
#include "app_freertos.h"
#endif
Model::Model() : modelListener(0)
 8015dd0:	b480      	push	{r7}
 8015dd2:	b083      	sub	sp, #12
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	601a      	str	r2, [r3, #0]
{

}
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	4618      	mov	r0, r3
 8015de2:	370c      	adds	r7, #12
 8015de4:	46bd      	mov	sp, r7
 8015de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dea:	4770      	bx	lr

08015dec <_ZN5Model4tickEv>:

void Model::tick()
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b082      	sub	sp, #8
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	modelListener->updateVolt(0);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681a      	ldr	r2, [r3, #0]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	330c      	adds	r3, #12
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2100      	movs	r1, #0
 8015e04:	4610      	mov	r0, r2
 8015e06:	4798      	blx	r3
	modelListener->updateTemp(0);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	3308      	adds	r3, #8
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2100      	movs	r1, #0
 8015e18:	4610      	mov	r0, r2
 8015e1a:	4798      	blx	r3
#endif

}
 8015e1c:	bf00      	nop
 8015e1e:	3708      	adds	r7, #8
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8015e24:	b480      	push	{r7}
 8015e26:	b083      	sub	sp, #12
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
    {
    }
 8015e2c:	bf00      	nop
 8015e2e:	370c      	adds	r7, #12
 8015e30:	46bd      	mov	sp, r7
 8015e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e36:	4770      	bx	lr

08015e38 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8015e38:	b480      	push	{r7}
 8015e3a:	b083      	sub	sp, #12
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
    {
    }
 8015e40:	bf00      	nop
 8015e42:	370c      	adds	r7, #12
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr

08015e4c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8015e4c:	b480      	push	{r7}
 8015e4e:	b083      	sub	sp, #12
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
    {
 8015e54:	4a04      	ldr	r2, [pc, #16]	@ (8015e68 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	601a      	str	r2, [r3, #0]
    }
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	370c      	adds	r7, #12
 8015e60:	46bd      	mov	sp, r7
 8015e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e66:	4770      	bx	lr
 8015e68:	080328bc 	.word	0x080328bc

08015e6c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
    }
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f7ff ffe9 	bl	8015e4c <_ZN8touchgfx9PresenterD1Ev>
 8015e7a:	2104      	movs	r1, #4
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f019 fd5e 	bl	802f93e <_ZdlPvj>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	4618      	mov	r0, r3
 8015e86:	3708      	adds	r7, #8
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}

08015e8c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8015e8c:	b480      	push	{r7}
 8015e8e:	b083      	sub	sp, #12
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
    {
 8015e94:	4a04      	ldr	r2, [pc, #16]	@ (8015ea8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	601a      	str	r2, [r3, #0]
    }
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	370c      	adds	r7, #12
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr
 8015ea8:	080328bc 	.word	0x080328bc

08015eac <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8015eac:	b480      	push	{r7}
 8015eae:	b083      	sub	sp, #12
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	4a06      	ldr	r2, [pc, #24]	@ (8015ed0 <_ZN13ModelListenerC1Ev+0x24>)
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	601a      	str	r2, [r3, #0]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	605a      	str	r2, [r3, #4]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	370c      	adds	r7, #12
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ecc:	4770      	bx	lr
 8015ece:	bf00      	nop
 8015ed0:	080328a4 	.word	0x080328a4

08015ed4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8015ed4:	b480      	push	{r7}
 8015ed6:	b083      	sub	sp, #12
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
 8015edc:	4a04      	ldr	r2, [pc, #16]	@ (8015ef0 <_ZN13ModelListenerD1Ev+0x1c>)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	601a      	str	r2, [r3, #0]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	370c      	adds	r7, #12
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr
 8015ef0:	080328a4 	.word	0x080328a4

08015ef4 <_ZN13ModelListenerD0Ev>:
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b082      	sub	sp, #8
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f7ff ffe9 	bl	8015ed4 <_ZN13ModelListenerD1Ev>
 8015f02:	2108      	movs	r1, #8
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f019 fd1a 	bl	802f93e <_ZdlPvj>
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	3708      	adds	r7, #8
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}

08015f14 <_ZN13ModelListener10updateTempEj>:
    virtual void updateTemp(unsigned int val){}
 8015f14:	b480      	push	{r7}
 8015f16:	b083      	sub	sp, #12
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
 8015f1e:	bf00      	nop
 8015f20:	370c      	adds	r7, #12
 8015f22:	46bd      	mov	sp, r7
 8015f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f28:	4770      	bx	lr

08015f2a <_ZN13ModelListener10updateVoltEj>:
    virtual void updateVolt(unsigned int val){}
 8015f2a:	b480      	push	{r7}
 8015f2c:	b083      	sub	sp, #12
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
 8015f32:	6039      	str	r1, [r7, #0]
 8015f34:	bf00      	nop
 8015f36:	370c      	adds	r7, #12
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr

08015f40 <_ZN16Screen1PresenterD1Ev>:
    virtual void deactivate();
    virtual void updateTemp(unsigned int val);
    virtual void updateVolt(unsigned int val);


    virtual ~Screen1Presenter() {}
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
 8015f48:	4a09      	ldr	r2, [pc, #36]	@ (8015f70 <_ZN16Screen1PresenterD1Ev+0x30>)
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	601a      	str	r2, [r3, #0]
 8015f4e:	4a09      	ldr	r2, [pc, #36]	@ (8015f74 <_ZN16Screen1PresenterD1Ev+0x34>)
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	605a      	str	r2, [r3, #4]
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	3304      	adds	r3, #4
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7ff ffbb 	bl	8015ed4 <_ZN13ModelListenerD1Ev>
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7ff ff73 	bl	8015e4c <_ZN8touchgfx9PresenterD1Ev>
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3708      	adds	r7, #8
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	0803286c 	.word	0x0803286c
 8015f74:	0803288c 	.word	0x0803288c

08015f78 <_ZThn4_N16Screen1PresenterD1Ev>:
 8015f78:	f1a0 0004 	sub.w	r0, r0, #4
 8015f7c:	e7e0      	b.n	8015f40 <_ZN16Screen1PresenterD1Ev>
 8015f7e:	bf00      	nop

08015f80 <_ZN16Screen1PresenterD0Ev>:
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b082      	sub	sp, #8
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f7ff ffd9 	bl	8015f40 <_ZN16Screen1PresenterD1Ev>
 8015f8e:	2110      	movs	r1, #16
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f019 fcd4 	bl	802f93e <_ZdlPvj>
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	3708      	adds	r7, #8
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}

08015fa0 <_ZThn4_N16Screen1PresenterD0Ev>:
 8015fa0:	f1a0 0004 	sub.w	r0, r0, #4
 8015fa4:	e7ec      	b.n	8015f80 <_ZN16Screen1PresenterD0Ev>
	...

08015fa8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
    : view(v)
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7ff ff69 	bl	8015e8c <_ZN8touchgfx9PresenterC1Ev>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	3304      	adds	r3, #4
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7ff ff74 	bl	8015eac <_ZN13ModelListenerC1Ev>
 8015fc4:	4a06      	ldr	r2, [pc, #24]	@ (8015fe0 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	601a      	str	r2, [r3, #0]
 8015fca:	4a06      	ldr	r2, [pc, #24]	@ (8015fe4 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	605a      	str	r2, [r3, #4]
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	683a      	ldr	r2, [r7, #0]
 8015fd4:	60da      	str	r2, [r3, #12]
{

}
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	4618      	mov	r0, r3
 8015fda:	3708      	adds	r7, #8
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}
 8015fe0:	0803286c 	.word	0x0803286c
 8015fe4:	0803288c 	.word	0x0803288c

08015fe8 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b083      	sub	sp, #12
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]

}
 8015ff0:	bf00      	nop
 8015ff2:	370c      	adds	r7, #12
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffa:	4770      	bx	lr

08015ffc <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8015ffc:	b480      	push	{r7}
 8015ffe:	b083      	sub	sp, #12
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]

}
 8016004:	bf00      	nop
 8016006:	370c      	adds	r7, #12
 8016008:	46bd      	mov	sp, r7
 801600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600e:	4770      	bx	lr

08016010 <_ZN16Screen1Presenter10updateTempEj>:

void Screen1Presenter::updateTemp(unsigned int val)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b082      	sub	sp, #8
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
 8016018:	6039      	str	r1, [r7, #0]
	view.updateTemp(val);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	68da      	ldr	r2, [r3, #12]
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	332c      	adds	r3, #44	@ 0x2c
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	6839      	ldr	r1, [r7, #0]
 801602a:	4610      	mov	r0, r2
 801602c:	4798      	blx	r3
}
 801602e:	bf00      	nop
 8016030:	3708      	adds	r7, #8
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}

08016036 <_ZThn4_N16Screen1Presenter10updateTempEj>:
    virtual void updateTemp(unsigned int val);
 8016036:	f1a0 0004 	sub.w	r0, r0, #4
 801603a:	f7ff bfe9 	b.w	8016010 <_ZN16Screen1Presenter10updateTempEj>

0801603e <_ZN16Screen1Presenter10updateVoltEj>:
void Screen1Presenter::updateVolt(unsigned int val)
{
 801603e:	b580      	push	{r7, lr}
 8016040:	b082      	sub	sp, #8
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]
 8016046:	6039      	str	r1, [r7, #0]
	view.updateVolt(val);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	68da      	ldr	r2, [r3, #12]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	68db      	ldr	r3, [r3, #12]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	3330      	adds	r3, #48	@ 0x30
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	6839      	ldr	r1, [r7, #0]
 8016058:	4610      	mov	r0, r2
 801605a:	4798      	blx	r3
}
 801605c:	bf00      	nop
 801605e:	3708      	adds	r7, #8
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <_ZThn4_N16Screen1Presenter10updateVoltEj>:
    virtual void updateVolt(unsigned int val);
 8016064:	f1a0 0004 	sub.w	r0, r0, #4
 8016068:	f7ff bfe9 	b.w	801603e <_ZN16Screen1Presenter10updateVoltEj>

0801606c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
 8016074:	4a05      	ldr	r2, [pc, #20]	@ (801608c <_ZN11Screen1ViewD1Ev+0x20>)
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	601a      	str	r2, [r3, #0]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	4618      	mov	r0, r3
 801607e:	f7ff fa45 	bl	801550c <_ZN15Screen1ViewBaseD1Ev>
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	4618      	mov	r0, r3
 8016086:	3708      	adds	r7, #8
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}
 801608c:	080328d4 	.word	0x080328d4

08016090 <_ZN11Screen1ViewD0Ev>:
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7ff ffe7 	bl	801606c <_ZN11Screen1ViewD1Ev>
 801609e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f019 fc4b 	bl	802f93e <_ZdlPvj>
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	4618      	mov	r0, r3
 80160ac:	3708      	adds	r7, #8
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
	...

080160b4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	4618      	mov	r0, r3
 80160c0:	f7f9 fd72 	bl	800fba8 <_ZN15Screen1ViewBaseC1Ev>
 80160c4:	4a03      	ldr	r2, [pc, #12]	@ (80160d4 <_ZN11Screen1ViewC1Ev+0x20>)
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	601a      	str	r2, [r3, #0]
{

}
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	4618      	mov	r0, r3
 80160ce:	3708      	adds	r7, #8
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	080328d4 	.word	0x080328d4

080160d8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7ff fac3 	bl	801566e <_ZN15Screen1ViewBase11setupScreenEv>
}
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7f7 fbbe 	bl	800d87c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8016100:	bf00      	nop
 8016102:	3708      	adds	r7, #8
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}

08016108 <_ZN11Screen1View10updateTempEj>:

void Screen1View::updateTemp(unsigned int val)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b08a      	sub	sp, #40	@ 0x28
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]
	//update ui.

	memset((void*)textAreaTempBuffer, 0, TEXTAREATEMP_SIZE*2);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f603 03bc 	addw	r3, r3, #2236	@ 0x8bc
 8016118:	220a      	movs	r2, #10
 801611a:	2100      	movs	r1, #0
 801611c:	4618      	mov	r0, r3
 801611e:	f019 fe42 	bl	802fda6 <memset>

	Unicode::snprintf(textAreaTempBuffer,TEXTAREATEMP_SIZE, "%d", val);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f603 00bc 	addw	r0, r3, #2236	@ 0x8bc
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	4a32      	ldr	r2, [pc, #200]	@ (80161f4 <_ZN11Screen1View10updateTempEj+0xec>)
 801612c:	2105      	movs	r1, #5
 801612e:	f00a fda6 	bl	8020c7e <_ZN8touchgfx7Unicode8snprintfEPttPKcz>

	textAreaTemp.invalidate();
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	33c4      	adds	r3, #196	@ 0xc4
 8016136:	4618      	mov	r0, r3
 8016138:	f008 fd86 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>

	dynamicGraph2.addDataPoint((float)val);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8016142:	683a      	ldr	r2, [r7, #0]
 8016144:	ee07 2a90 	vmov	s15, r2
 8016148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801614c:	627b      	str	r3, [r7, #36]	@ 0x24
 801614e:	edc7 7a08 	vstr	s15, [r7, #32]
 8016152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016154:	61fb      	str	r3, [r7, #28]
 8016156:	6a3b      	ldr	r3, [r7, #32]
 8016158:	61bb      	str	r3, [r7, #24]
        return float2scaled(f, yScale);
 801615a:	69fb      	ldr	r3, [r7, #28]
 801615c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801615e:	69ba      	ldr	r2, [r7, #24]
 8016160:	617a      	str	r2, [r7, #20]
 8016162:	613b      	str	r3, [r7, #16]
        const float fs = f * (float)scale;
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	ee07 3a90 	vmov	s15, r3
 801616a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801616e:	ed97 7a05 	vldr	s14, [r7, #20]
 8016172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016176:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 801617a:	edd7 7a03 	vldr	s15, [r7, #12]
 801617e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016186:	db0a      	blt.n	801619e <_ZN11Screen1View10updateTempEj+0x96>
            return (int)(fs + 0.5f);
 8016188:	edd7 7a03 	vldr	s15, [r7, #12]
 801618c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8016190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016198:	ee17 3a90 	vmov	r3, s15
 801619c:	e019      	b.n	80161d2 <_ZN11Screen1View10updateTempEj+0xca>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801619e:	edd7 7a03 	vldr	s15, [r7, #12]
 80161a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80161a6:	ee17 3a90 	vmov	r3, s15
 80161aa:	3b01      	subs	r3, #1
 80161ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80161b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80161b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80161bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161c0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80161c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80161c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80161cc:	ee17 2a90 	vmov	r2, s15
 80161d0:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 80161d2:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80161d4:	4619      	mov	r1, r3
 80161d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80161d8:	f003 ff8e 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80161dc:	bf00      	nop
	dynamicGraph2.invalidate();
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80161e4:	4618      	mov	r0, r3
 80161e6:	f008 fd2f 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>


}
 80161ea:	bf00      	nop
 80161ec:	3728      	adds	r7, #40	@ 0x28
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	080314b0 	.word	0x080314b0

080161f8 <_ZN11Screen1View10updateVoltEj>:

void Screen1View::updateVolt(unsigned int val)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b08a      	sub	sp, #40	@ 0x28
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
	//update ui.
	memset((void*)textAreaVoltBuffer, 0, TEXTAREAVOLT_SIZE*2);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f603 03c6 	addw	r3, r3, #2246	@ 0x8c6
 8016208:	220a      	movs	r2, #10
 801620a:	2100      	movs	r1, #0
 801620c:	4618      	mov	r0, r3
 801620e:	f019 fdca 	bl	802fda6 <memset>
	Unicode::snprintf(textAreaVoltBuffer,TEXTAREAVOLT_SIZE, "%d", val);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f603 00c6 	addw	r0, r3, #2246	@ 0x8c6
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	4a35      	ldr	r2, [pc, #212]	@ (80162f0 <_ZN11Screen1View10updateVoltEj+0xf8>)
 801621c:	2105      	movs	r1, #5
 801621e:	f00a fd2e 	bl	8020c7e <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaVolt.invalidate();
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8016228:	4618      	mov	r0, r3
 801622a:	f008 fd0d 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>
	//3300 - 100
	//val - x
	float gval = ((float)val)/1000; //in V
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	ee07 3a90 	vmov	s15, r3
 8016234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016238:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80162f4 <_ZN11Screen1View10updateVoltEj+0xfc>
 801623c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016240:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dynamicGraph1.addDataPoint(gval);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 801624a:	623b      	str	r3, [r7, #32]
 801624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801624e:	61fb      	str	r3, [r7, #28]
 8016250:	6a3b      	ldr	r3, [r7, #32]
 8016252:	61bb      	str	r3, [r7, #24]
 8016254:	69fb      	ldr	r3, [r7, #28]
 8016256:	617b      	str	r3, [r7, #20]
        return float2scaled(f, yScale);
 8016258:	69bb      	ldr	r3, [r7, #24]
 801625a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801625c:	697a      	ldr	r2, [r7, #20]
 801625e:	613a      	str	r2, [r7, #16]
 8016260:	60fb      	str	r3, [r7, #12]
        const float fs = f * (float)scale;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	ee07 3a90 	vmov	s15, r3
 8016268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801626c:	ed97 7a04 	vldr	s14, [r7, #16]
 8016270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016274:	edc7 7a02 	vstr	s15, [r7, #8]
        if (fs >= 0)
 8016278:	edd7 7a02 	vldr	s15, [r7, #8]
 801627c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016284:	db0a      	blt.n	801629c <_ZN11Screen1View10updateVoltEj+0xa4>
            return (int)(fs + 0.5f);
 8016286:	edd7 7a02 	vldr	s15, [r7, #8]
 801628a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801628e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016296:	ee17 3a90 	vmov	r3, s15
 801629a:	e019      	b.n	80162d0 <_ZN11Screen1View10updateVoltEj+0xd8>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801629c:	edd7 7a02 	vldr	s15, [r7, #8]
 80162a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80162a4:	ee17 3a90 	vmov	r3, s15
 80162a8:	3b01      	subs	r3, #1
 80162aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80162ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80162b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80162ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162be:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80162c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80162c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80162ca:	ee17 2a90 	vmov	r2, s15
 80162ce:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 80162d0:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80162d2:	4619      	mov	r1, r3
 80162d4:	6a38      	ldr	r0, [r7, #32]
 80162d6:	f003 ff0f 	bl	801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 80162da:	bf00      	nop
	dynamicGraph1.invalidate();
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80162e2:	4618      	mov	r0, r3
 80162e4:	f008 fcb0 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>


}
 80162e8:	bf00      	nop
 80162ea:	3728      	adds	r7, #40	@ 0x28
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	080314b0 	.word	0x080314b0
 80162f4:	447a0000 	.word	0x447a0000

080162f8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
    {
 8016300:	4a04      	ldr	r2, [pc, #16]	@ (8016314 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	601a      	str	r2, [r3, #0]
    }
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	4618      	mov	r0, r3
 801630a:	370c      	adds	r7, #12
 801630c:	46bd      	mov	sp, r7
 801630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016312:	4770      	bx	lr
 8016314:	08032928 	.word	0x08032928

08016318 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8016318:	b580      	push	{r7, lr}
 801631a:	b082      	sub	sp, #8
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
    }
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f7ff ffe9 	bl	80162f8 <_ZN8touchgfx15TouchControllerD1Ev>
 8016326:	2104      	movs	r1, #4
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f019 fb08 	bl	802f93e <_ZdlPvj>
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	4618      	mov	r0, r3
 8016332:	3708      	adds	r7, #8
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}

08016338 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8016338:	b480      	push	{r7}
 801633a:	b083      	sub	sp, #12
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8016340:	bf00      	nop
 8016342:	370c      	adds	r7, #12
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr

0801634c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801634c:	b480      	push	{r7}
 801634e:	b085      	sub	sp, #20
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8016358:	2300      	movs	r3, #0
}
 801635a:	4618      	mov	r0, r3
 801635c:	3714      	adds	r7, #20
 801635e:	46bd      	mov	sp, r7
 8016360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016364:	4770      	bx	lr
	...

08016368 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	4a05      	ldr	r2, [pc, #20]	@ (8016388 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	601a      	str	r2, [r3, #0]
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	4618      	mov	r0, r3
 801637a:	f7ff ffbd 	bl	80162f8 <_ZN8touchgfx15TouchControllerD1Ev>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	4618      	mov	r0, r3
 8016382:	3708      	adds	r7, #8
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}
 8016388:	08032910 	.word	0x08032910

0801638c <_ZN20STM32TouchControllerD0Ev>:
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f7ff ffe7 	bl	8016368 <_ZN20STM32TouchControllerD1Ev>
 801639a:	2104      	movs	r1, #4
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f019 face 	bl	802f93e <_ZdlPvj>
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	4618      	mov	r0, r3
 80163a6:	3708      	adds	r7, #8
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 80163ac:	b480      	push	{r7}
 80163ae:	af00      	add	r7, sp, #0

}
 80163b0:	bf00      	nop
 80163b2:	46bd      	mov	sp, r7
 80163b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b8:	4770      	bx	lr
	...

080163bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80163bc:	b480      	push	{r7}
 80163be:	b083      	sub	sp, #12
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	4603      	mov	r3, r0
 80163c4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80163c6:	79fb      	ldrb	r3, [r7, #7]
 80163c8:	2b03      	cmp	r3, #3
 80163ca:	d80c      	bhi.n	80163e6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80163cc:	a201      	add	r2, pc, #4	@ (adr r2, 80163d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80163ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163d2:	bf00      	nop
 80163d4:	080163e5 	.word	0x080163e5
 80163d8:	080163e5 	.word	0x080163e5
 80163dc:	080163e5 	.word	0x080163e5
 80163e0:	080163e5 	.word	0x080163e5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80163e4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80163e6:	bf00      	nop
 80163e8:	370c      	adds	r7, #12
 80163ea:	46bd      	mov	sp, r7
 80163ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f0:	4770      	bx	lr
 80163f2:	bf00      	nop

080163f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b083      	sub	sp, #12
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	4603      	mov	r3, r0
 80163fc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80163fe:	79fb      	ldrb	r3, [r7, #7]
 8016400:	2b03      	cmp	r3, #3
 8016402:	d80c      	bhi.n	801641e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8016404:	a201      	add	r2, pc, #4	@ (adr r2, 801640c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8016406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801640a:	bf00      	nop
 801640c:	0801641d 	.word	0x0801641d
 8016410:	0801641d 	.word	0x0801641d
 8016414:	0801641d 	.word	0x0801641d
 8016418:	0801641d 	.word	0x0801641d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 801641c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801641e:	bf00      	nop
 8016420:	370c      	adds	r7, #12
 8016422:	46bd      	mov	sp, r7
 8016424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016428:	4770      	bx	lr
 801642a:	bf00      	nop

0801642c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801642c:	b480      	push	{r7}
 801642e:	b083      	sub	sp, #12
 8016430:	af00      	add	r7, sp, #0
 8016432:	4603      	mov	r3, r0
 8016434:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8016436:	79fb      	ldrb	r3, [r7, #7]
 8016438:	2b03      	cmp	r3, #3
 801643a:	d80c      	bhi.n	8016456 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 801643c:	a201      	add	r2, pc, #4	@ (adr r2, 8016444 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016442:	bf00      	nop
 8016444:	08016455 	.word	0x08016455
 8016448:	08016455 	.word	0x08016455
 801644c:	08016455 	.word	0x08016455
 8016450:	08016455 	.word	0x08016455
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8016454:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8016456:	bf00      	nop
 8016458:	370c      	adds	r7, #12
 801645a:	46bd      	mov	sp, r7
 801645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop

08016464 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8016464:	b480      	push	{r7}
 8016466:	b083      	sub	sp, #12
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
    {
 801646c:	4a04      	ldr	r2, [pc, #16]	@ (8016480 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	601a      	str	r2, [r3, #0]
    }
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	4618      	mov	r0, r3
 8016476:	370c      	adds	r7, #12
 8016478:	46bd      	mov	sp, r7
 801647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647e:	4770      	bx	lr
 8016480:	08032d60 	.word	0x08032d60

08016484 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
    }
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f7ff ffe9 	bl	8016464 <_ZN8touchgfx3HALD1Ev>
 8016492:	217c      	movs	r1, #124	@ 0x7c
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f019 fa52 	bl	802f93e <_ZdlPvj>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	4618      	mov	r0, r3
 801649e:	3708      	adds	r7, #8
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80164a4:	b480      	push	{r7}
 80164a6:	b083      	sub	sp, #12
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	460b      	mov	r3, r1
 80164ae:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	78fa      	ldrb	r2, [r7, #3]
 80164b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2201      	movs	r2, #1
 80164bc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 80164c0:	bf00      	nop
 80164c2:	370c      	adds	r7, #12
 80164c4:	46bd      	mov	sp, r7
 80164c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ca:	4770      	bx	lr

080164cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	460b      	mov	r3, r1
 80164d6:	807b      	strh	r3, [r7, #2]
 80164d8:	4613      	mov	r3, r2
 80164da:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80164dc:	4b0c      	ldr	r3, [pc, #48]	@ (8016510 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80164de:	881b      	ldrh	r3, [r3, #0]
 80164e0:	887a      	ldrh	r2, [r7, #2]
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d304      	bcc.n	80164f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80164e6:	4b0b      	ldr	r3, [pc, #44]	@ (8016514 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80164e8:	881b      	ldrh	r3, [r3, #0]
 80164ea:	883a      	ldrh	r2, [r7, #0]
 80164ec:	429a      	cmp	r2, r3
 80164ee:	d205      	bcs.n	80164fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80164f0:	4b09      	ldr	r3, [pc, #36]	@ (8016518 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80164f2:	4a0a      	ldr	r2, [pc, #40]	@ (801651c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80164f4:	219e      	movs	r1, #158	@ 0x9e
 80164f6:	480a      	ldr	r0, [pc, #40]	@ (8016520 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80164f8:	f019 fa4e 	bl	802f998 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80164fc:	4a09      	ldr	r2, [pc, #36]	@ (8016524 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80164fe:	887b      	ldrh	r3, [r7, #2]
 8016500:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8016502:	4a09      	ldr	r2, [pc, #36]	@ (8016528 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8016504:	883b      	ldrh	r3, [r7, #0]
 8016506:	8013      	strh	r3, [r2, #0]
    }
 8016508:	bf00      	nop
 801650a:	3708      	adds	r7, #8
 801650c:	46bd      	mov	sp, r7
 801650e:	bd80      	pop	{r7, pc}
 8016510:	20011ff0 	.word	0x20011ff0
 8016514:	20011ff2 	.word	0x20011ff2
 8016518:	080314b4 	.word	0x080314b4
 801651c:	08031518 	.word	0x08031518
 8016520:	0803155c 	.word	0x0803155c
 8016524:	20011ff6 	.word	0x20011ff6
 8016528:	20011ff8 	.word	0x20011ff8

0801652c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 801653a:	2b00      	cmp	r3, #0
 801653c:	d009      	beq.n	8016552 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	685a      	ldr	r2, [r3, #4]
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	4610      	mov	r0, r2
 801654c:	4798      	blx	r3
 801654e:	4603      	mov	r3, r0
 8016550:	e000      	b.n	8016554 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8016552:	2300      	movs	r3, #0
    }
 8016554:	4618      	mov	r0, r3
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f002 ff6d 	bl	8019444 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	33ac      	adds	r3, #172	@ 0xac
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	4798      	blx	r3
    }
 8016576:	bf00      	nop
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}

0801657e <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 801657e:	b480      	push	{r7}
 8016580:	b083      	sub	sp, #12
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
 8016586:	6039      	str	r1, [r7, #0]
        return false;
 8016588:	2300      	movs	r3, #0
    }
 801658a:	4618      	mov	r0, r3
 801658c:	370c      	adds	r7, #12
 801658e:	46bd      	mov	sp, r7
 8016590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016594:	4770      	bx	lr
	...

08016598 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8016598:	b580      	push	{r7, lr}
 801659a:	b084      	sub	sp, #16
 801659c:	af00      	add	r7, sp, #0
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	60b9      	str	r1, [r7, #8]
 80165a2:	607a      	str	r2, [r7, #4]
 80165a4:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d106      	bne.n	80165ba <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80165ac:	4b0f      	ldr	r3, [pc, #60]	@ (80165ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80165ae:	4a10      	ldr	r2, [pc, #64]	@ (80165f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80165b0:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80165b4:	480f      	ldr	r0, [pc, #60]	@ (80165f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80165b6:	f019 f9ef 	bl	802f998 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	68ba      	ldr	r2, [r7, #8]
 80165be:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	bf14      	ite	ne
 80165cc:	2301      	movne	r3, #1
 80165ce:	2300      	moveq	r3, #0
 80165d0:	b2da      	uxtb	r2, r3
 80165d2:	4b09      	ldr	r3, [pc, #36]	@ (80165f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80165d4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	338c      	adds	r3, #140	@ 0x8c
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	6839      	ldr	r1, [r7, #0]
 80165e0:	68f8      	ldr	r0, [r7, #12]
 80165e2:	4798      	blx	r3
    }
 80165e4:	bf00      	nop
 80165e6:	3710      	adds	r7, #16
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	080315a0 	.word	0x080315a0
 80165f0:	080315d8 	.word	0x080315d8
 80165f4:	0803155c 	.word	0x0803155c
 80165f8:	20011ffa 	.word	0x20011ffa

080165fc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 80165fc:	b480      	push	{r7}
 80165fe:	b083      	sub	sp, #12
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
 8016604:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	683a      	ldr	r2, [r7, #0]
 801660a:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	2b00      	cmp	r3, #0
 8016610:	bf14      	ite	ne
 8016612:	2301      	movne	r3, #1
 8016614:	2300      	moveq	r3, #0
 8016616:	b2da      	uxtb	r2, r3
 8016618:	4b03      	ldr	r3, [pc, #12]	@ (8016628 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801661a:	701a      	strb	r2, [r3, #0]
    }
 801661c:	bf00      	nop
 801661e:	370c      	adds	r7, #12
 8016620:	46bd      	mov	sp, r7
 8016622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016626:	4770      	bx	lr
 8016628:	20011ffb 	.word	0x20011ffb

0801662c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 801662c:	b480      	push	{r7}
 801662e:	b083      	sub	sp, #12
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
        return 0;
 8016634:	2300      	movs	r3, #0
    }
 8016636:	4618      	mov	r0, r3
 8016638:	370c      	adds	r7, #12
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr

08016642 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8016642:	b580      	push	{r7, lr}
 8016644:	b082      	sub	sp, #8
 8016646:	af00      	add	r7, sp, #0
 8016648:	6078      	str	r0, [r7, #4]
 801664a:	460b      	mov	r3, r1
 801664c:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016652:	2b00      	cmp	r3, #0
 8016654:	d004      	beq.n	8016660 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801665a:	887a      	ldrh	r2, [r7, #2]
 801665c:	4610      	mov	r0, r2
 801665e:	4798      	blx	r3
    }
 8016660:	bf00      	nop
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 8016668:	b480      	push	{r7}
 801666a:	b083      	sub	sp, #12
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 8016670:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8016674:	4618      	mov	r0, r3
 8016676:	370c      	adds	r7, #12
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr

08016680 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	685a      	ldr	r2, [r3, #4]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	3318      	adds	r3, #24
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	4610      	mov	r0, r2
 8016698:	4798      	blx	r3
 801669a:	4603      	mov	r3, r0
    }
 801669c:	4618      	mov	r0, r3
 801669e:	3708      	adds	r7, #8
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}

080166a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80166a4:	b480      	push	{r7}
 80166a6:	b085      	sub	sp, #20
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d011      	beq.n	80166e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80166bc:	4b14      	ldr	r3, [pc, #80]	@ (8016710 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d11e      	bne.n	8016702 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80166c4:	4b13      	ldr	r3, [pc, #76]	@ (8016714 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80166c6:	881b      	ldrh	r3, [r3, #0]
 80166c8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80166ca:	4b13      	ldr	r3, [pc, #76]	@ (8016718 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80166cc:	881a      	ldrh	r2, [r3, #0]
 80166ce:	4b11      	ldr	r3, [pc, #68]	@ (8016714 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80166d0:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80166d2:	4a11      	ldr	r2, [pc, #68]	@ (8016718 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80166d4:	89bb      	ldrh	r3, [r7, #12]
 80166d6:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80166d8:	4b0d      	ldr	r3, [pc, #52]	@ (8016710 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80166da:	2201      	movs	r2, #1
 80166dc:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80166de:	e010      	b.n	8016702 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80166e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016710 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d00c      	beq.n	8016702 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80166e8:	4b0a      	ldr	r3, [pc, #40]	@ (8016714 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80166ee:	4b0a      	ldr	r3, [pc, #40]	@ (8016718 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80166f0:	881a      	ldrh	r2, [r3, #0]
 80166f2:	4b08      	ldr	r3, [pc, #32]	@ (8016714 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80166f4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80166f6:	4a08      	ldr	r2, [pc, #32]	@ (8016718 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80166f8:	89fb      	ldrh	r3, [r7, #14]
 80166fa:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80166fc:	4b04      	ldr	r3, [pc, #16]	@ (8016710 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80166fe:	2200      	movs	r2, #0
 8016700:	701a      	strb	r2, [r3, #0]
    }
 8016702:	bf00      	nop
 8016704:	3714      	adds	r7, #20
 8016706:	46bd      	mov	sp, r7
 8016708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670c:	4770      	bx	lr
 801670e:	bf00      	nop
 8016710:	20011ff4 	.word	0x20011ff4
 8016714:	20011ff2 	.word	0x20011ff2
 8016718:	20011ff0 	.word	0x20011ff0

0801671c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 801671c:	b480      	push	{r7}
 801671e:	b083      	sub	sp, #12
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
    {
    }
 8016724:	bf00      	nop
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr

08016730 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8016730:	b480      	push	{r7}
 8016732:	b083      	sub	sp, #12
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
    {
    }
 8016738:	bf00      	nop
 801673a:	370c      	adds	r7, #12
 801673c:	46bd      	mov	sp, r7
 801673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016742:	4770      	bx	lr

08016744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	4618      	mov	r0, r3
 8016750:	f002 f8d6 	bl	8018900 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016754:	bf00      	nop
 8016756:	3708      	adds	r7, #8
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}

0801675c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
 8016764:	4a05      	ldr	r2, [pc, #20]	@ (801677c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	601a      	str	r2, [r3, #0]
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	4618      	mov	r0, r3
 801676e:	f7ff fe79 	bl	8016464 <_ZN8touchgfx3HALD1Ev>
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	4618      	mov	r0, r3
 8016776:	3708      	adds	r7, #8
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	08032b8c 	.word	0x08032b8c

08016780 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f7ff ffe7 	bl	801675c <_ZN20TouchGFXGeneratedHALD1Ev>
 801678e:	217c      	movs	r1, #124	@ 0x7c
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f019 f8d4 	bl	802f93e <_ZdlPvj>
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	4618      	mov	r0, r3
 801679a:	3708      	adds	r7, #8
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b082      	sub	sp, #8
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7ff ffca 	bl	8016744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80167b0:	bf00      	nop
 80167b2:	3708      	adds	r7, #8
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}

080167b8 <_ZN11TouchGFXHAL10initializeEv>:
 */
//#warning "A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has succesfully sent a block."
//#warning "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b082      	sub	sp, #8
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	4618      	mov	r0, r3
 80167c4:	f001 fa44 	bl	8017c50 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80167c8:	bf00      	nop
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	4618      	mov	r0, r3
 80167dc:	f001 faa8 	bl	8017d30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80167e0:	4603      	mov	r3, r0
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	3708      	adds	r7, #8
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}

080167ea <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80167ea:	b580      	push	{r7, lr}
 80167ec:	b082      	sub	sp, #8
 80167ee:	af00      	add	r7, sp, #0
 80167f0:	6078      	str	r0, [r7, #4]
 80167f2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	6839      	ldr	r1, [r7, #0]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f001 faa4 	bl	8017d46 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80167fe:	bf00      	nop
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016806:	b580      	push	{r7, lr}
 8016808:	b082      	sub	sp, #8
 801680a:	af00      	add	r7, sp, #0
 801680c:	6078      	str	r0, [r7, #4]
 801680e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6839      	ldr	r1, [r7, #0]
 8016814:	4618      	mov	r0, r3
 8016816:	f001 faa1 	bl	8017d5c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801681a:	bf00      	nop
 801681c:	3708      	adds	r7, #8
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016822:	b580      	push	{r7, lr}
 8016824:	b084      	sub	sp, #16
 8016826:	af00      	add	r7, sp, #0
 8016828:	60f8      	str	r0, [r7, #12]
 801682a:	60b9      	str	r1, [r7, #8]
 801682c:	607a      	str	r2, [r7, #4]
 801682e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8016830:	68f8      	ldr	r0, [r7, #12]
 8016832:	683b      	ldr	r3, [r7, #0]
 8016834:	687a      	ldr	r2, [r7, #4]
 8016836:	68b9      	ldr	r1, [r7, #8]
 8016838:	f001 fad3 	bl	8017de2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 801683c:	4603      	mov	r3, r0
}
 801683e:	4618      	mov	r0, r3
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}

08016846 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8016846:	b580      	push	{r7, lr}
 8016848:	b082      	sub	sp, #8
 801684a:	af00      	add	r7, sp, #0
 801684c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	4618      	mov	r0, r3
 8016852:	f001 fa21 	bl	8017c98 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8016856:	bf00      	nop
 8016858:	3708      	adds	r7, #8
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}

0801685e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801685e:	b580      	push	{r7, lr}
 8016860:	b082      	sub	sp, #8
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	4618      	mov	r0, r3
 801686a:	f001 fa1f 	bl	8017cac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801686e:	bf00      	nop
 8016870:	3708      	adds	r7, #8
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}

08016876 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8016876:	b580      	push	{r7, lr}
 8016878:	b082      	sub	sp, #8
 801687a:	af00      	add	r7, sp, #0
 801687c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	4618      	mov	r0, r3
 8016882:	f001 fa1d 	bl	8017cc0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8016886:	bf00      	nop
 8016888:	3708      	adds	r7, #8
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}

0801688e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801688e:	b580      	push	{r7, lr}
 8016890:	b082      	sub	sp, #8
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	4618      	mov	r0, r3
 801689a:	f001 fa1b 	bl	8017cd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801689e:	bf00      	nop
 80168a0:	3708      	adds	r7, #8
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}

080168a6 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80168a6:	b580      	push	{r7, lr}
 80168a8:	b082      	sub	sp, #8
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	4618      	mov	r0, r3
 80168b2:	f001 fa19 	bl	8017ce8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80168b6:	4603      	mov	r3, r0
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3708      	adds	r7, #8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	4618      	mov	r0, r3
 80168cc:	f001 fa19 	bl	8017d02 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80168d0:	bf00      	nop
 80168d2:	3708      	adds	r7, #8
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}

080168d8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
 80168e0:	4a05      	ldr	r2, [pc, #20]	@ (80168f8 <_ZN11TouchGFXHALD1Ev+0x20>)
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	601a      	str	r2, [r3, #0]
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7ff ff37 	bl	801675c <_ZN20TouchGFXGeneratedHALD1Ev>
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	4618      	mov	r0, r3
 80168f2:	3708      	adds	r7, #8
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	08032940 	.word	0x08032940

080168fc <_ZN11TouchGFXHALD0Ev>:
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f7ff ffe7 	bl	80168d8 <_ZN11TouchGFXHALD1Ev>
 801690a:	217c      	movs	r1, #124	@ 0x7c
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f019 f816 	bl	802f93e <_ZdlPvj>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	4618      	mov	r0, r3
 8016916:	3708      	adds	r7, #8
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 801691c:	b580      	push	{r7, lr}
 801691e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8016920:	2200      	movs	r2, #0
 8016922:	2101      	movs	r1, #1
 8016924:	2001      	movs	r0, #1
 8016926:	f7f2 fa66 	bl	8008df6 <osSemaphoreNew>
 801692a:	4603      	mov	r3, r0
 801692c:	4a0f      	ldr	r2, [pc, #60]	@ (801696c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801692e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8016930:	4b0e      	ldr	r3, [pc, #56]	@ (801696c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d105      	bne.n	8016944 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8016938:	4b0d      	ldr	r3, [pc, #52]	@ (8016970 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 801693a:	4a0e      	ldr	r2, [pc, #56]	@ (8016974 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801693c:	2128      	movs	r1, #40	@ 0x28
 801693e:	480e      	ldr	r0, [pc, #56]	@ (8016978 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8016940:	f019 f82a 	bl	802f998 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8016944:	2200      	movs	r2, #0
 8016946:	2104      	movs	r1, #4
 8016948:	2001      	movs	r0, #1
 801694a:	f7f2 fb67 	bl	800901c <osMessageQueueNew>
 801694e:	4603      	mov	r3, r0
 8016950:	4a0a      	ldr	r2, [pc, #40]	@ (801697c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8016952:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8016954:	4b09      	ldr	r3, [pc, #36]	@ (801697c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d105      	bne.n	8016968 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 801695c:	4b08      	ldr	r3, [pc, #32]	@ (8016980 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801695e:	4a05      	ldr	r2, [pc, #20]	@ (8016974 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8016960:	212c      	movs	r1, #44	@ 0x2c
 8016962:	4805      	ldr	r0, [pc, #20]	@ (8016978 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8016964:	f019 f818 	bl	802f998 <__assert_func>
}
 8016968:	bf00      	nop
 801696a:	bd80      	pop	{r7, pc}
 801696c:	2000d5e0 	.word	0x2000d5e0
 8016970:	08031628 	.word	0x08031628
 8016974:	08031674 	.word	0x08031674
 8016978:	080316a4 	.word	0x080316a4
 801697c:	2000d5e4 	.word	0x2000d5e4
 8016980:	080316d0 	.word	0x080316d0

08016984 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8016984:	b580      	push	{r7, lr}
 8016986:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8016988:	4b04      	ldr	r3, [pc, #16]	@ (801699c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	f04f 31ff 	mov.w	r1, #4294967295
 8016990:	4618      	mov	r0, r3
 8016992:	f7f2 fab9 	bl	8008f08 <osSemaphoreAcquire>
}
 8016996:	bf00      	nop
 8016998:	bd80      	pop	{r7, pc}
 801699a:	bf00      	nop
 801699c:	2000d5e0 	.word	0x2000d5e0

080169a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80169a4:	4b03      	ldr	r3, [pc, #12]	@ (80169b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	4618      	mov	r0, r3
 80169aa:	f7f2 faf9 	bl	8008fa0 <osSemaphoreRelease>
}
 80169ae:	bf00      	nop
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	2000d5e0 	.word	0x2000d5e0

080169b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80169bc:	4b03      	ldr	r3, [pc, #12]	@ (80169cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2100      	movs	r1, #0
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7f2 faa0 	bl	8008f08 <osSemaphoreAcquire>
}
 80169c8:	bf00      	nop
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	2000d5e0 	.word	0x2000d5e0

080169d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80169d4:	4b03      	ldr	r3, [pc, #12]	@ (80169e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	4618      	mov	r0, r3
 80169da:	f7f2 fae1 	bl	8008fa0 <osSemaphoreRelease>
}
 80169de:	bf00      	nop
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	2000d5e0 	.word	0x2000d5e0

080169e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80169ec:	4b04      	ldr	r3, [pc, #16]	@ (8016a00 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80169ee:	6818      	ldr	r0, [r3, #0]
 80169f0:	2300      	movs	r3, #0
 80169f2:	2200      	movs	r2, #0
 80169f4:	4903      	ldr	r1, [pc, #12]	@ (8016a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80169f6:	f7f2 fb83 	bl	8009100 <osMessageQueuePut>
}
 80169fa:	bf00      	nop
 80169fc:	bd80      	pop	{r7, pc}
 80169fe:	bf00      	nop
 8016a00:	2000d5e4 	.word	0x2000d5e4
 8016a04:	2000001c 	.word	0x2000001c

08016a08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8016a0e:	4b09      	ldr	r3, [pc, #36]	@ (8016a34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016a10:	6818      	ldr	r0, [r3, #0]
 8016a12:	1d39      	adds	r1, r7, #4
 8016a14:	2300      	movs	r3, #0
 8016a16:	2200      	movs	r2, #0
 8016a18:	f7f2 fbcc 	bl	80091b4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8016a1c:	4b05      	ldr	r3, [pc, #20]	@ (8016a34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016a1e:	6818      	ldr	r0, [r3, #0]
 8016a20:	1d39      	adds	r1, r7, #4
 8016a22:	f04f 33ff 	mov.w	r3, #4294967295
 8016a26:	2200      	movs	r2, #0
 8016a28:	f7f2 fbc4 	bl	80091b4 <osMessageQueueGet>
}
 8016a2c:	bf00      	nop
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	2000d5e4 	.word	0x2000d5e4

08016a38 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8016a38:	b480      	push	{r7}
 8016a3a:	b083      	sub	sp, #12
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
    {
 8016a40:	4a04      	ldr	r2, [pc, #16]	@ (8016a54 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	601a      	str	r2, [r3, #0]
    }
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	4618      	mov	r0, r3
 8016a4a:	370c      	adds	r7, #12
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a52:	4770      	bx	lr
 8016a54:	08032a68 	.word	0x08032a68

08016a58 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
    }
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7ff ffe9 	bl	8016a38 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016a66:	2104      	movs	r1, #4
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f018 ff68 	bl	802f93e <_ZdlPvj>
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	4618      	mov	r0, r3
 8016a72:	3708      	adds	r7, #8
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 8016a78:	b480      	push	{r7}
 8016a7a:	b083      	sub	sp, #12
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
    {
    }
 8016a80:	bf00      	nop
 8016a82:	370c      	adds	r7, #12
 8016a84:	46bd      	mov	sp, r7
 8016a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8a:	4770      	bx	lr

08016a8c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 8016a8c:	b480      	push	{r7}
 8016a8e:	b083      	sub	sp, #12
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016a94:	2300      	movs	r3, #0
    }
 8016a96:	4618      	mov	r0, r3
 8016a98:	370c      	adds	r7, #12
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa0:	4770      	bx	lr
	...

08016aa4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8016aa4:	b480      	push	{r7}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
    {
 8016aac:	4a04      	ldr	r2, [pc, #16]	@ (8016ac0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	601a      	str	r2, [r3, #0]
    }
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	370c      	adds	r7, #12
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abe:	4770      	bx	lr
 8016ac0:	08032e38 	.word	0x08032e38

08016ac4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b082      	sub	sp, #8
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
    }
 8016acc:	6878      	ldr	r0, [r7, #4]
 8016ace:	f7ff ffe9 	bl	8016aa4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016ad2:	210c      	movs	r1, #12
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f018 ff32 	bl	802f93e <_ZdlPvj>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	4618      	mov	r0, r3
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016ae4:	b480      	push	{r7}
 8016ae6:	b083      	sub	sp, #12
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016aee:	4a09      	ldr	r2, [pc, #36]	@ (8016b14 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	601a      	str	r2, [r3, #0]
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	683a      	ldr	r2, [r7, #0]
 8016af8:	605a      	str	r2, [r3, #4]
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	2200      	movs	r2, #0
 8016afe:	721a      	strb	r2, [r3, #8]
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2200      	movs	r2, #0
 8016b04:	725a      	strb	r2, [r3, #9]
    {
    }
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	4618      	mov	r0, r3
 8016b0a:	370c      	adds	r7, #12
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr
 8016b14:	08032e38 	.word	0x08032e38

08016b18 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 8016b18:	b480      	push	{r7}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
    {
    }
 8016b20:	bf00      	nop
 8016b22:	370c      	adds	r7, #12
 8016b24:	46bd      	mov	sp, r7
 8016b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2a:	4770      	bx	lr

08016b2c <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8016b2c:	b480      	push	{r7}
 8016b2e:	b083      	sub	sp, #12
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
    {
    }
 8016b34:	bf00      	nop
 8016b36:	370c      	adds	r7, #12
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3e:	4770      	bx	lr

08016b40 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b082      	sub	sp, #8
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	330c      	adds	r3, #12
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f7f6 fc05 	bl	800d35c <_ZN8touchgfx9colortypeC1Ev>
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	4618      	mov	r0, r3
 8016b56:	3708      	adds	r7, #8
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}

08016b5c <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8016b64:	687a      	ldr	r2, [r7, #4]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	330c      	adds	r3, #12
 8016b6a:	4619      	mov	r1, r3
 8016b6c:	4610      	mov	r0, r2
 8016b6e:	f7ff ffb9 	bl	8016ae4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016b72:	4a0b      	ldr	r2, [pc, #44]	@ (8016ba0 <_ZN8STM32DMAC1Ev+0x44>)
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	601a      	str	r2, [r3, #0]
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f103 000c 	add.w	r0, r3, #12
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	3320      	adds	r3, #32
 8016b82:	2201      	movs	r2, #1
 8016b84:	4619      	mov	r1, r3
 8016b86:	f002 fdb1 	bl	80196ec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	3320      	adds	r3, #32
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7ff ffd6 	bl	8016b40 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	4618      	mov	r0, r3
 8016b98:	3708      	adds	r7, #8
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}
 8016b9e:	bf00      	nop
 8016ba0:	08032a18 	.word	0x08032a18

08016ba4 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b083      	sub	sp, #12
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 8016bac:	2300      	movs	r3, #0
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	370c      	adds	r7, #12
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb8:	4770      	bx	lr
	...

08016bbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8016bc6:	4b03      	ldr	r3, [pc, #12]	@ (8016bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8016bc8:	4a03      	ldr	r2, [pc, #12]	@ (8016bd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 8016bca:	2122      	movs	r1, #34	@ 0x22
 8016bcc:	4803      	ldr	r0, [pc, #12]	@ (8016bdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 8016bce:	f018 fee3 	bl	802f998 <__assert_func>
 8016bd2:	bf00      	nop
 8016bd4:	08031714 	.word	0x08031714
 8016bd8:	08031738 	.word	0x08031738
 8016bdc:	08031778 	.word	0x08031778

08016be0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b082      	sub	sp, #8
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
 8016be8:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8016bea:	4b03      	ldr	r3, [pc, #12]	@ (8016bf8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8016bec:	4a03      	ldr	r2, [pc, #12]	@ (8016bfc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 8016bee:	2127      	movs	r1, #39	@ 0x27
 8016bf0:	4803      	ldr	r0, [pc, #12]	@ (8016c00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 8016bf2:	f018 fed1 	bl	802f998 <__assert_func>
 8016bf6:	bf00      	nop
 8016bf8:	08031714 	.word	0x08031714
 8016bfc:	080317a4 	.word	0x080317a4
 8016c00:	08031778 	.word	0x08031778

08016c04 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b082      	sub	sp, #8
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
 8016c0c:	4a08      	ldr	r2, [pc, #32]	@ (8016c30 <_ZN8STM32DMAD1Ev+0x2c>)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	601a      	str	r2, [r3, #0]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	330c      	adds	r3, #12
 8016c16:	4618      	mov	r0, r3
 8016c18:	f000 f81c 	bl	8016c54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f7ff ff40 	bl	8016aa4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	4618      	mov	r0, r3
 8016c28:	3708      	adds	r7, #8
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}
 8016c2e:	bf00      	nop
 8016c30:	08032a18 	.word	0x08032a18

08016c34 <_ZN8STM32DMAD0Ev>:
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	6878      	ldr	r0, [r7, #4]
 8016c3e:	f7ff ffe1 	bl	8016c04 <_ZN8STM32DMAD1Ev>
 8016c42:	2144      	movs	r1, #68	@ 0x44
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f018 fe7a 	bl	802f93e <_ZdlPvj>
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	4a05      	ldr	r2, [pc, #20]	@ (8016c74 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	601a      	str	r2, [r3, #0]
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	4618      	mov	r0, r3
 8016c66:	f7ff fee7 	bl	8016a38 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3708      	adds	r7, #8
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}
 8016c74:	08032e88 	.word	0x08032e88

08016c78 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f7ff ffe7 	bl	8016c54 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016c86:	2114      	movs	r1, #20
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f018 fe58 	bl	802f93e <_ZdlPvj>
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	4618      	mov	r0, r3
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8016c98:	b480      	push	{r7}
 8016c9a:	b083      	sub	sp, #12
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8016ca0:	4a04      	ldr	r2, [pc, #16]	@ (8016cb4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6013      	str	r3, [r2, #0]
    }
 8016ca6:	bf00      	nop
 8016ca8:	370c      	adds	r7, #12
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	20012060 	.word	0x20012060

08016cb8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016cb8:	b480      	push	{r7}
 8016cba:	b085      	sub	sp, #20
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
 8016cc4:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8016cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8016cf4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	68ba      	ldr	r2, [r7, #8]
 8016cd0:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	687a      	ldr	r2, [r7, #4]
 8016cd6:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	683a      	ldr	r2, [r7, #0]
 8016cdc:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	69ba      	ldr	r2, [r7, #24]
 8016ce2:	611a      	str	r2, [r3, #16]
    {
    }
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3714      	adds	r7, #20
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr
 8016cf2:	bf00      	nop
 8016cf4:	08032b50 	.word	0x08032b50

08016cf8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
    {
 8016d00:	4a04      	ldr	r2, [pc, #16]	@ (8016d14 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	601a      	str	r2, [r3, #0]
    }
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	370c      	adds	r7, #12
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d12:	4770      	bx	lr
 8016d14:	08032b50 	.word	0x08032b50

08016d18 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
    }
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f7ff ffe9 	bl	8016cf8 <_ZN8touchgfx7MVPHeapD1Ev>
 8016d26:	2114      	movs	r1, #20
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f018 fe08 	bl	802f93e <_ZdlPvj>
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	4618      	mov	r0, r3
 8016d32:	3708      	adds	r7, #8
 8016d34:	46bd      	mov	sp, r7
 8016d36:	bd80      	pop	{r7, pc}

08016d38 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8016d38:	b480      	push	{r7}
 8016d3a:	b083      	sub	sp, #12
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
    {
 8016d40:	4a04      	ldr	r2, [pc, #16]	@ (8016d54 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	601a      	str	r2, [r3, #0]
    }
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	370c      	adds	r7, #12
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d52:	4770      	bx	lr
 8016d54:	08033710 	.word	0x08033710

08016d58 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
    }
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f7ff ffe9 	bl	8016d38 <_ZN8touchgfx3LCDD1Ev>
 8016d66:	210c      	movs	r1, #12
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	f018 fde8 	bl	802f93e <_ZdlPvj>
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	4618      	mov	r0, r3
 8016d72:	3708      	adds	r7, #8
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}

08016d78 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8016d78:	b480      	push	{r7}
 8016d7a:	b083      	sub	sp, #12
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2200      	movs	r2, #0
 8016d84:	801a      	strh	r2, [r3, #0]
              startY(0),
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	2200      	movs	r2, #0
 8016d8a:	805a      	strh	r2, [r3, #2]
              downX(0),
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2200      	movs	r2, #0
 8016d90:	809a      	strh	r2, [r3, #4]
              downY(0),
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	2200      	movs	r2, #0
 8016d96:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	2200      	movs	r2, #0
 8016da2:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2200      	movs	r2, #0
 8016da8:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	739a      	strb	r2, [r3, #14]
        {
        }
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	4618      	mov	r0, r3
 8016db4:	370c      	adds	r7, #12
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr

08016dbe <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016dbe:	b580      	push	{r7, lr}
 8016dc0:	b082      	sub	sp, #8
 8016dc2:	af00      	add	r7, sp, #0
 8016dc4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7ff ffd5 	bl	8016d78 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	611a      	str	r2, [r3, #16]
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	829a      	strh	r2, [r3, #20]
    {
    }
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	3708      	adds	r7, #8
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}

08016de4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b084      	sub	sp, #16
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	60f8      	str	r0, [r7, #12]
 8016dec:	60b9      	str	r1, [r7, #8]
 8016dee:	607a      	str	r2, [r7, #4]
 8016df0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8016df2:	4a55      	ldr	r2, [pc, #340]	@ (8016f48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	68ba      	ldr	r2, [r7, #8]
 8016dfc:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	687a      	ldr	r2, [r7, #4]
 8016e02:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	683a      	ldr	r2, [r7, #0]
 8016e08:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	2200      	movs	r2, #0
 8016e14:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	2200      	movs	r2, #0
 8016e1a:	619a      	str	r2, [r3, #24]
          gestures(),
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	331c      	adds	r3, #28
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7ff ffcc 	bl	8016dbe <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	2200      	movs	r2, #0
 8016e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	2200      	movs	r2, #0
 8016e32:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2200      	movs	r2, #0
 8016e38:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	2200      	movs	r2, #0
 8016e44:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	2200      	movs	r2, #0
 8016e4a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	2201      	movs	r2, #1
 8016e52:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	2200      	movs	r2, #0
 8016e62:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	2200      	movs	r2, #0
 8016e6a:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	3350      	adds	r3, #80	@ 0x50
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7f6 fa9c 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	2200      	movs	r2, #0
 8016e7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	2200      	movs	r2, #0
 8016e82:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	2200      	movs	r2, #0
 8016e88:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	2201      	movs	r2, #1
 8016e94:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2201      	movs	r2, #1
 8016eac:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	2200      	movs	r2, #0
 8016edc:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	2200      	movs	r2, #0
 8016eea:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	2201      	movs	r2, #1
 8016ef2:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	2201      	movs	r2, #1
 8016efa:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 8016efe:	4a13      	ldr	r2, [pc, #76]	@ (8016f4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8016f04:	4a12      	ldr	r2, [pc, #72]	@ (8016f50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8016f06:	8b3b      	ldrh	r3, [r7, #24]
 8016f08:	8013      	strh	r3, [r2, #0]
 8016f0a:	4b11      	ldr	r3, [pc, #68]	@ (8016f50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8016f0c:	881a      	ldrh	r2, [r3, #0]
 8016f0e:	4b11      	ldr	r3, [pc, #68]	@ (8016f54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8016f10:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8016f12:	4a11      	ldr	r2, [pc, #68]	@ (8016f58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8016f14:	8bbb      	ldrh	r3, [r7, #28]
 8016f16:	8013      	strh	r3, [r2, #0]
 8016f18:	4b0f      	ldr	r3, [pc, #60]	@ (8016f58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8016f1a:	881a      	ldrh	r2, [r3, #0]
 8016f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8016f5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8016f1e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8016f20:	4b0f      	ldr	r3, [pc, #60]	@ (8016f60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8016f22:	2200      	movs	r2, #0
 8016f24:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016f26:	8b3a      	ldrh	r2, [r7, #24]
 8016f28:	8bbb      	ldrh	r3, [r7, #28]
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	bf34      	ite	cc
 8016f2e:	2301      	movcc	r3, #1
 8016f30:	2300      	movcs	r3, #0
 8016f32:	b2db      	uxtb	r3, r3
 8016f34:	461a      	mov	r2, r3
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	4618      	mov	r0, r3
 8016f40:	3710      	adds	r7, #16
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bd80      	pop	{r7, pc}
 8016f46:	bf00      	nop
 8016f48:	08032d60 	.word	0x08032d60
 8016f4c:	20011ffc 	.word	0x20011ffc
 8016f50:	20011ff0 	.word	0x20011ff0
 8016f54:	20011ff6 	.word	0x20011ff6
 8016f58:	20011ff2 	.word	0x20011ff2
 8016f5c:	20011ff8 	.word	0x20011ff8
 8016f60:	20011ff4 	.word	0x20011ff4

08016f64 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7f5 ff65 	bl	800ce40 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8016f76:	bf00      	nop
 8016f78:	3708      	adds	r7, #8
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}
	...

08016f80 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b086      	sub	sp, #24
 8016f84:	af02      	add	r7, sp, #8
 8016f86:	60f8      	str	r0, [r7, #12]
 8016f88:	60b9      	str	r1, [r7, #8]
 8016f8a:	607a      	str	r2, [r7, #4]
 8016f8c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	69bb      	ldr	r3, [r7, #24]
 8016f92:	9300      	str	r3, [sp, #0]
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	687a      	ldr	r2, [r7, #4]
 8016f98:	68b9      	ldr	r1, [r7, #8]
 8016f9a:	f7ff fe8d 	bl	8016cb8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016f9e:	4a04      	ldr	r2, [pc, #16]	@ (8016fb0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	601a      	str	r2, [r3, #0]
    {

    }
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	3710      	adds	r7, #16
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
 8016fae:	bf00      	nop
 8016fb0:	08032b3c 	.word	0x08032b3c

08016fb4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	af00      	add	r7, sp, #0
 8016fb8:	4801      	ldr	r0, [pc, #4]	@ (8016fc0 <__tcf_0+0xc>)
 8016fba:	f000 f96d 	bl	8017298 <_ZN12FrontendHeapD1Ev>
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	2000d5e8 	.word	0x2000d5e8

08016fc4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8016fc8:	4b11      	ldr	r3, [pc, #68]	@ (8017010 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8016fca:	e8d3 3faf 	lda	r3, [r3]
 8016fce:	f003 0301 	and.w	r3, r3, #1
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	bf0c      	ite	eq
 8016fd6:	2301      	moveq	r3, #1
 8016fd8:	2300      	movne	r3, #0
 8016fda:	b2db      	uxtb	r3, r3
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d013      	beq.n	8017008 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8016fe0:	480b      	ldr	r0, [pc, #44]	@ (8017010 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8016fe2:	f018 fcae 	bl	802f942 <__cxa_guard_acquire>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	bf14      	ite	ne
 8016fec:	2301      	movne	r3, #1
 8016fee:	2300      	moveq	r3, #0
 8016ff0:	b2db      	uxtb	r3, r3
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d008      	beq.n	8017008 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8016ff6:	4807      	ldr	r0, [pc, #28]	@ (8017014 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016ff8:	f000 f868 	bl	80170cc <_ZN12FrontendHeapC1Ev>
 8016ffc:	4806      	ldr	r0, [pc, #24]	@ (8017018 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8016ffe:	f018 fce9 	bl	802f9d4 <atexit>
 8017002:	4803      	ldr	r0, [pc, #12]	@ (8017010 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8017004:	f018 fca9 	bl	802f95a <__cxa_guard_release>
        return instance;
 8017008:	4b02      	ldr	r3, [pc, #8]	@ (8017014 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 801700a:	4618      	mov	r0, r3
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	2000ee70 	.word	0x2000ee70
 8017014:	2000d5e8 	.word	0x2000d5e8
 8017018:	08016fb5 	.word	0x08016fb5

0801701c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
 8017024:	4a05      	ldr	r2, [pc, #20]	@ (801703c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	601a      	str	r2, [r3, #0]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	4618      	mov	r0, r3
 801702e:	f7ff fe63 	bl	8016cf8 <_ZN8touchgfx7MVPHeapD1Ev>
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	4618      	mov	r0, r3
 8017036:	3708      	adds	r7, #8
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}
 801703c:	08032b3c 	.word	0x08032b3c

08017040 <_ZN16FrontendHeapBaseD0Ev>:
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f7ff ffe7 	bl	801701c <_ZN16FrontendHeapBaseD1Ev>
 801704e:	2114      	movs	r1, #20
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f018 fc74 	bl	802f93e <_ZdlPvj>
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	4618      	mov	r0, r3
 801705a:	3708      	adds	r7, #8
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}

08017060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8017060:	b580      	push	{r7, lr}
 8017062:	b082      	sub	sp, #8
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	4618      	mov	r0, r3
 801706c:	f001 f9ac 	bl	80183c8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017070:	4a03      	ldr	r2, [pc, #12]	@ (8017080 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	601a      	str	r2, [r3, #0]
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	4618      	mov	r0, r3
 801707a:	3708      	adds	r7, #8
 801707c:	46bd      	mov	sp, r7
 801707e:	bd80      	pop	{r7, pc}
 8017080:	08032b08 	.word	0x08032b08

08017084 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8017084:	b580      	push	{r7, lr}
 8017086:	b082      	sub	sp, #8
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	4618      	mov	r0, r3
 8017090:	f001 f99a 	bl	80183c8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017094:	4a03      	ldr	r2, [pc, #12]	@ (80170a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	601a      	str	r2, [r3, #0]
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	4618      	mov	r0, r3
 801709e:	3708      	adds	r7, #8
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	08032ad4 	.word	0x08032ad4

080170a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	4618      	mov	r0, r3
 80170b4:	f001 f988 	bl	80183c8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80170b8:	4a03      	ldr	r2, [pc, #12]	@ (80170c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	601a      	str	r2, [r3, #0]
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	4618      	mov	r0, r3
 80170c2:	3708      	adds	r7, #8
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	08032aa0 	.word	0x08032aa0

080170cc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80170cc:	b590      	push	{r4, r7, lr}
 80170ce:	b085      	sub	sp, #20
 80170d0:	af02      	add	r7, sp, #8
 80170d2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f103 0114 	add.w	r1, r3, #20
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	f503 52b8 	add.w	r2, r3, #5888	@ 0x1700
 80170e8:	3214      	adds	r2, #20
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	f503 53b9 	add.w	r3, r3, #5920	@ 0x1720
 80170f0:	330c      	adds	r3, #12
                     app(model, *this)
 80170f2:	9300      	str	r3, [sp, #0]
 80170f4:	4613      	mov	r3, r2
 80170f6:	4622      	mov	r2, r4
 80170f8:	f7ff ff42 	bl	8016f80 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80170fc:	4a1a      	ldr	r2, [pc, #104]	@ (8017168 <_ZN12FrontendHeapC1Ev+0x9c>)
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	601a      	str	r2, [r3, #0]
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	3314      	adds	r3, #20
 8017106:	4618      	mov	r0, r3
 8017108:	f7ff ffaa 	bl	8017060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	332c      	adds	r3, #44	@ 0x2c
 8017110:	4618      	mov	r0, r3
 8017112:	f7ff ffb7 	bl	8017084 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f503 53b8 	add.w	r3, r3, #5888	@ 0x1700
 801711c:	3314      	adds	r3, #20
 801711e:	4618      	mov	r0, r3
 8017120:	f7ff ffc2 	bl	80170a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	f503 53b9 	add.w	r3, r3, #5920	@ 0x1720
 801712a:	3308      	adds	r3, #8
 801712c:	4618      	mov	r0, r3
 801712e:	f7fe fe4f 	bl	8015dd0 <_ZN5ModelC1Ev>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f503 53b9 	add.w	r3, r3, #5920	@ 0x1720
 8017138:	330c      	adds	r3, #12
 801713a:	687a      	ldr	r2, [r7, #4]
 801713c:	f502 51b9 	add.w	r1, r2, #5920	@ 0x1720
 8017140:	3108      	adds	r1, #8
 8017142:	687a      	ldr	r2, [r7, #4]
 8017144:	4618      	mov	r0, r3
 8017146:	f7fe fe2d 	bl	8015da4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 801714a:	687a      	ldr	r2, [r7, #4]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	f503 53b9 	add.w	r3, r3, #5920	@ 0x1720
 8017152:	330c      	adds	r3, #12
 8017154:	4619      	mov	r1, r3
 8017156:	4610      	mov	r0, r2
 8017158:	f7ff ff04 	bl	8016f64 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	4618      	mov	r0, r3
 8017160:	370c      	adds	r7, #12
 8017162:	46bd      	mov	sp, r7
 8017164:	bd90      	pop	{r4, r7, pc}
 8017166:	bf00      	nop
 8017168:	08032a8c 	.word	0x08032a8c

0801716c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 801716c:	b580      	push	{r7, lr}
 801716e:	b086      	sub	sp, #24
 8017170:	af02      	add	r7, sp, #8
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	60b9      	str	r1, [r7, #8]
 8017176:	607a      	str	r2, [r7, #4]
 8017178:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801717a:	68f8      	ldr	r0, [r7, #12]
 801717c:	8bbb      	ldrh	r3, [r7, #28]
 801717e:	9301      	str	r3, [sp, #4]
 8017180:	8b3b      	ldrh	r3, [r7, #24]
 8017182:	9300      	str	r3, [sp, #0]
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	687a      	ldr	r2, [r7, #4]
 8017188:	68b9      	ldr	r1, [r7, #8]
 801718a:	f7ff fe2b 	bl	8016de4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801718e:	4a04      	ldr	r2, [pc, #16]	@ (80171a0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	601a      	str	r2, [r3, #0]
    }
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	4618      	mov	r0, r3
 8017198:	3710      	adds	r7, #16
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	08032b8c 	.word	0x08032b8c

080171a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b086      	sub	sp, #24
 80171a8:	af02      	add	r7, sp, #8
 80171aa:	60f8      	str	r0, [r7, #12]
 80171ac:	60b9      	str	r1, [r7, #8]
 80171ae:	607a      	str	r2, [r7, #4]
 80171b0:	603b      	str	r3, [r7, #0]
 80171b2:	68f8      	ldr	r0, [r7, #12]
 80171b4:	8bbb      	ldrh	r3, [r7, #28]
 80171b6:	9301      	str	r3, [sp, #4]
 80171b8:	8b3b      	ldrh	r3, [r7, #24]
 80171ba:	9300      	str	r3, [sp, #0]
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	687a      	ldr	r2, [r7, #4]
 80171c0:	68b9      	ldr	r1, [r7, #8]
 80171c2:	f7ff ffd3 	bl	801716c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80171c6:	4a04      	ldr	r2, [pc, #16]	@ (80171d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	601a      	str	r2, [r3, #0]
    }
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	4618      	mov	r0, r3
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
 80171d6:	bf00      	nop
 80171d8:	08032940 	.word	0x08032940

080171dc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80171dc:	b480      	push	{r7}
 80171de:	b083      	sub	sp, #12
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	4a04      	ldr	r2, [pc, #16]	@ (80171f8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	601a      	str	r2, [r3, #0]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	4618      	mov	r0, r3
 80171ee:	370c      	adds	r7, #12
 80171f0:	46bd      	mov	sp, r7
 80171f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f6:	4770      	bx	lr
 80171f8:	08032928 	.word	0x08032928

080171fc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b082      	sub	sp, #8
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	4618      	mov	r0, r3
 8017208:	f7ff ffe8 	bl	80171dc <_ZN8touchgfx15TouchControllerC1Ev>
 801720c:	4a03      	ldr	r2, [pc, #12]	@ (801721c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	601a      	str	r2, [r3, #0]
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	4618      	mov	r0, r3
 8017216:	3708      	adds	r7, #8
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}
 801721c:	08032910 	.word	0x08032910

08017220 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8017220:	b590      	push	{r4, r7, lr}
 8017222:	b085      	sub	sp, #20
 8017224:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8017226:	f7fe fb8d 	bl	8015944 <_ZN14BitmapDatabase11getInstanceEv>
 801722a:	4604      	mov	r4, r0
 801722c:	f7fe fb94 	bl	8015958 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8017230:	4603      	mov	r3, r0
 8017232:	4619      	mov	r1, r3
 8017234:	2300      	movs	r3, #0
 8017236:	9300      	str	r3, [sp, #0]
 8017238:	2300      	movs	r3, #0
 801723a:	2200      	movs	r2, #0
 801723c:	4620      	mov	r0, r4
 801723e:	f009 fdc3 	bl	8020dc8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8017242:	4809      	ldr	r0, [pc, #36]	@ (8017268 <touchgfx_init+0x48>)
 8017244:	f7ff fd28 	bl	8016c98 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8017248:	2000      	movs	r0, #0
 801724a:	f7fe fcc9 	bl	8015be0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801724e:	4807      	ldr	r0, [pc, #28]	@ (801726c <touchgfx_init+0x4c>)
 8017250:	f009 fd22 	bl	8020c98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8017254:	f7ff feb6 	bl	8016fc4 <_ZN12FrontendHeap11getInstanceEv>
 8017258:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801725a:	4805      	ldr	r0, [pc, #20]	@ (8017270 <touchgfx_init+0x50>)
 801725c:	f7ff faac 	bl	80167b8 <_ZN11TouchGFXHAL10initializeEv>
}
 8017260:	bf00      	nop
 8017262:	370c      	adds	r7, #12
 8017264:	46bd      	mov	sp, r7
 8017266:	bd90      	pop	{r4, r7, pc}
 8017268:	2000ef48 	.word	0x2000ef48
 801726c:	20000020 	.word	0x20000020
 8017270:	2000ef4c 	.word	0x2000ef4c

08017274 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8017274:	b480      	push	{r7}
 8017276:	af00      	add	r7, sp, #0
}
 8017278:	bf00      	nop
 801727a:	46bd      	mov	sp, r7
 801727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017280:	4770      	bx	lr
	...

08017284 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8017284:	b580      	push	{r7, lr}
 8017286:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8017288:	4802      	ldr	r0, [pc, #8]	@ (8017294 <touchgfx_taskEntry+0x10>)
 801728a:	f001 fba2 	bl	80189d2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801728e:	bf00      	nop
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	2000ef4c 	.word	0x2000ef4c

08017298 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	4a11      	ldr	r2, [pc, #68]	@ (80172e8 <_ZN12FrontendHeapD1Ev+0x50>)
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	601a      	str	r2, [r3, #0]
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	f503 53b9 	add.w	r3, r3, #5920	@ 0x1720
 80172ac:	330c      	adds	r3, #12
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7fe fd42 	bl	8015d38 <_ZN19FrontendApplicationD1Ev>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	f503 53b8 	add.w	r3, r3, #5888	@ 0x1700
 80172ba:	3314      	adds	r3, #20
 80172bc:	4618      	mov	r0, r3
 80172be:	f000 f827 	bl	8017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	332c      	adds	r3, #44	@ 0x2c
 80172c6:	4618      	mov	r0, r3
 80172c8:	f000 f844 	bl	8017354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	3314      	adds	r3, #20
 80172d0:	4618      	mov	r0, r3
 80172d2:	f000 f863 	bl	801739c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	4618      	mov	r0, r3
 80172da:	f7ff fe9f 	bl	801701c <_ZN16FrontendHeapBaseD1Ev>
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	4618      	mov	r0, r3
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	08032a8c 	.word	0x08032a8c

080172ec <_ZN12FrontendHeapD0Ev>:
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f7ff ffcf 	bl	8017298 <_ZN12FrontendHeapD1Ev>
 80172fa:	f641 0188 	movw	r1, #6280	@ 0x1888
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f018 fb1d 	bl	802f93e <_ZdlPvj>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4618      	mov	r0, r3
 8017308:	3708      	adds	r7, #8
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
	...

08017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	4a05      	ldr	r2, [pc, #20]	@ (8017330 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	601a      	str	r2, [r3, #0]
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4618      	mov	r0, r3
 8017322:	f001 f850 	bl	80183c6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4618      	mov	r0, r3
 801732a:	3708      	adds	r7, #8
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	08032aa0 	.word	0x08032aa0

08017334 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f7ff ffe7 	bl	8017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017342:	2114      	movs	r1, #20
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f018 fafa 	bl	802f93e <_ZdlPvj>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	4618      	mov	r0, r3
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	4a05      	ldr	r2, [pc, #20]	@ (8017374 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	601a      	str	r2, [r3, #0]
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	4618      	mov	r0, r3
 8017366:	f001 f82e 	bl	80183c6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	4618      	mov	r0, r3
 801736e:	3708      	adds	r7, #8
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	08032ad4 	.word	0x08032ad4

08017378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6878      	ldr	r0, [r7, #4]
 8017382:	f7ff ffe7 	bl	8017354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017386:	f241 61e8 	movw	r1, #5864	@ 0x16e8
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f018 fad7 	bl	802f93e <_ZdlPvj>
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	4618      	mov	r0, r3
 8017394:	3708      	adds	r7, #8
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
	...

0801739c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	4a05      	ldr	r2, [pc, #20]	@ (80173bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	601a      	str	r2, [r3, #0]
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	4618      	mov	r0, r3
 80173ae:	f001 f80a 	bl	80183c6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	4618      	mov	r0, r3
 80173b6:	3708      	adds	r7, #8
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}
 80173bc:	08032b08 	.word	0x08032b08

080173c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b082      	sub	sp, #8
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f7ff ffe7 	bl	801739c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80173ce:	2118      	movs	r1, #24
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f018 fab4 	bl	802f93e <_ZdlPvj>
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	4618      	mov	r0, r3
 80173da:	3708      	adds	r7, #8
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}

080173e0 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
 80173e8:	4a05      	ldr	r2, [pc, #20]	@ (8017400 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	601a      	str	r2, [r3, #0]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	4618      	mov	r0, r3
 80173f2:	f7ff fca1 	bl	8016d38 <_ZN8touchgfx3LCDD1Ev>
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	4618      	mov	r0, r3
 80173fa:	3708      	adds	r7, #8
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}
 8017400:	08033b98 	.word	0x08033b98

08017404 <_ZN8touchgfx8LCD16bppD0Ev>:
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7ff ffe7 	bl	80173e0 <_ZN8touchgfx8LCD16bppD1Ev>
 8017412:	218c      	movs	r1, #140	@ 0x8c
 8017414:	6878      	ldr	r0, [r7, #4]
 8017416:	f018 fa92 	bl	802f93e <_ZdlPvj>
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	4618      	mov	r0, r3
 801741e:	3708      	adds	r7, #8
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <_Z41__static_initialization_and_destruction_0ii>:
 8017424:	b580      	push	{r7, lr}
 8017426:	b084      	sub	sp, #16
 8017428:	af02      	add	r7, sp, #8
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	6039      	str	r1, [r7, #0]
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	2b01      	cmp	r3, #1
 8017432:	d118      	bne.n	8017466 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8017434:	683b      	ldr	r3, [r7, #0]
 8017436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801743a:	4293      	cmp	r3, r2
 801743c:	d113      	bne.n	8017466 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 801743e:	4817      	ldr	r0, [pc, #92]	@ (801749c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8017440:	f7ff fedc 	bl	80171fc <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8017444:	4816      	ldr	r0, [pc, #88]	@ (80174a0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017446:	f7ff fb89 	bl	8016b5c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801744a:	4816      	ldr	r0, [pc, #88]	@ (80174a4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801744c:	f00e fdbc 	bl	8025fc8 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8017450:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8017454:	9301      	str	r3, [sp, #4]
 8017456:	23f0      	movs	r3, #240	@ 0xf0
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	4b10      	ldr	r3, [pc, #64]	@ (801749c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801745c:	4a11      	ldr	r2, [pc, #68]	@ (80174a4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801745e:	4910      	ldr	r1, [pc, #64]	@ (80174a0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017460:	4811      	ldr	r0, [pc, #68]	@ (80174a8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017462:	f7ff fe9f 	bl	80171a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d113      	bne.n	8017494 <_Z41__static_initialization_and_destruction_0ii+0x70>
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017472:	4293      	cmp	r3, r2
 8017474:	d10e      	bne.n	8017494 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8017476:	480c      	ldr	r0, [pc, #48]	@ (80174a8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017478:	f7ff fa2e 	bl	80168d8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801747c:	480b      	ldr	r0, [pc, #44]	@ (80174ac <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801747e:	f7f4 ff29 	bl	800c2d4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8017482:	4808      	ldr	r0, [pc, #32]	@ (80174a4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017484:	f7ff ffac 	bl	80173e0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8017488:	4805      	ldr	r0, [pc, #20]	@ (80174a0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801748a:	f7ff fbbb 	bl	8016c04 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801748e:	4803      	ldr	r0, [pc, #12]	@ (801749c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8017490:	f7fe ff6a 	bl	8016368 <_ZN20STM32TouchControllerD1Ev>
}
 8017494:	bf00      	nop
 8017496:	3708      	adds	r7, #8
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}
 801749c:	2000ee74 	.word	0x2000ee74
 80174a0:	2000ee78 	.word	0x2000ee78
 80174a4:	2000eebc 	.word	0x2000eebc
 80174a8:	2000ef4c 	.word	0x2000ef4c
 80174ac:	20000020 	.word	0x20000020

080174b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80174b0:	b480      	push	{r7}
 80174b2:	b083      	sub	sp, #12
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80174b8:	2301      	movs	r3, #1
    }
 80174ba:	4618      	mov	r0, r3
 80174bc:	370c      	adds	r7, #12
 80174be:	46bd      	mov	sp, r7
 80174c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c4:	4770      	bx	lr

080174c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80174c6:	b480      	push	{r7}
 80174c8:	b083      	sub	sp, #12
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80174ce:	230c      	movs	r3, #12
    }
 80174d0:	4618      	mov	r0, r3
 80174d2:	370c      	adds	r7, #12
 80174d4:	46bd      	mov	sp, r7
 80174d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174da:	4770      	bx	lr

080174dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80174dc:	b480      	push	{r7}
 80174de:	b083      	sub	sp, #12
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	460b      	mov	r3, r1
 80174e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80174e8:	887a      	ldrh	r2, [r7, #2]
 80174ea:	4613      	mov	r3, r2
 80174ec:	005b      	lsls	r3, r3, #1
 80174ee:	4413      	add	r3, r2
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	3308      	adds	r3, #8
 80174f4:	687a      	ldr	r2, [r7, #4]
 80174f6:	4413      	add	r3, r2
    }
 80174f8:	4618      	mov	r0, r3
 80174fa:	370c      	adds	r7, #12
 80174fc:	46bd      	mov	sp, r7
 80174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017502:	4770      	bx	lr

08017504 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8017504:	b480      	push	{r7}
 8017506:	b083      	sub	sp, #12
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	460b      	mov	r3, r1
 801750e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017510:	887a      	ldrh	r2, [r7, #2]
 8017512:	4613      	mov	r3, r2
 8017514:	005b      	lsls	r3, r3, #1
 8017516:	4413      	add	r3, r2
 8017518:	009b      	lsls	r3, r3, #2
 801751a:	3308      	adds	r3, #8
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	4413      	add	r3, r2
    }
 8017520:	4618      	mov	r0, r3
 8017522:	370c      	adds	r7, #12
 8017524:	46bd      	mov	sp, r7
 8017526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752a:	4770      	bx	lr

0801752c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801752c:	b480      	push	{r7}
 801752e:	b083      	sub	sp, #12
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017534:	2301      	movs	r3, #1
    }
 8017536:	4618      	mov	r0, r3
 8017538:	370c      	adds	r7, #12
 801753a:	46bd      	mov	sp, r7
 801753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017540:	4770      	bx	lr

08017542 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017542:	b480      	push	{r7}
 8017544:	b083      	sub	sp, #12
 8017546:	af00      	add	r7, sp, #0
 8017548:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801754a:	f44f 53b7 	mov.w	r3, #5856	@ 0x16e0
    }
 801754e:	4618      	mov	r0, r3
 8017550:	370c      	adds	r7, #12
 8017552:	46bd      	mov	sp, r7
 8017554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017558:	4770      	bx	lr

0801755a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801755a:	b480      	push	{r7}
 801755c:	b083      	sub	sp, #12
 801755e:	af00      	add	r7, sp, #0
 8017560:	6078      	str	r0, [r7, #4]
 8017562:	460b      	mov	r3, r1
 8017564:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017566:	887b      	ldrh	r3, [r7, #2]
 8017568:	f44f 52b7 	mov.w	r2, #5856	@ 0x16e0
 801756c:	fb02 f303 	mul.w	r3, r2, r3
 8017570:	3308      	adds	r3, #8
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	4413      	add	r3, r2
    }
 8017576:	4618      	mov	r0, r3
 8017578:	370c      	adds	r7, #12
 801757a:	46bd      	mov	sp, r7
 801757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017580:	4770      	bx	lr

08017582 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017582:	b480      	push	{r7}
 8017584:	b083      	sub	sp, #12
 8017586:	af00      	add	r7, sp, #0
 8017588:	6078      	str	r0, [r7, #4]
 801758a:	460b      	mov	r3, r1
 801758c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801758e:	887b      	ldrh	r3, [r7, #2]
 8017590:	f44f 52b7 	mov.w	r2, #5856	@ 0x16e0
 8017594:	fb02 f303 	mul.w	r3, r2, r3
 8017598:	3308      	adds	r3, #8
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	4413      	add	r3, r2
    }
 801759e:	4618      	mov	r0, r3
 80175a0:	370c      	adds	r7, #12
 80175a2:	46bd      	mov	sp, r7
 80175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a8:	4770      	bx	lr

080175aa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80175aa:	b480      	push	{r7}
 80175ac:	b083      	sub	sp, #12
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80175b2:	2301      	movs	r3, #1
    }
 80175b4:	4618      	mov	r0, r3
 80175b6:	370c      	adds	r7, #12
 80175b8:	46bd      	mov	sp, r7
 80175ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175be:	4770      	bx	lr

080175c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80175c0:	b480      	push	{r7}
 80175c2:	b083      	sub	sp, #12
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80175c8:	2310      	movs	r3, #16
    }
 80175ca:	4618      	mov	r0, r3
 80175cc:	370c      	adds	r7, #12
 80175ce:	46bd      	mov	sp, r7
 80175d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d4:	4770      	bx	lr

080175d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80175d6:	b480      	push	{r7}
 80175d8:	b083      	sub	sp, #12
 80175da:	af00      	add	r7, sp, #0
 80175dc:	6078      	str	r0, [r7, #4]
 80175de:	460b      	mov	r3, r1
 80175e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80175e2:	887b      	ldrh	r3, [r7, #2]
 80175e4:	011b      	lsls	r3, r3, #4
 80175e6:	3308      	adds	r3, #8
 80175e8:	687a      	ldr	r2, [r7, #4]
 80175ea:	4413      	add	r3, r2
    }
 80175ec:	4618      	mov	r0, r3
 80175ee:	370c      	adds	r7, #12
 80175f0:	46bd      	mov	sp, r7
 80175f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f6:	4770      	bx	lr

080175f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80175f8:	b480      	push	{r7}
 80175fa:	b083      	sub	sp, #12
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	460b      	mov	r3, r1
 8017602:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017604:	887b      	ldrh	r3, [r7, #2]
 8017606:	011b      	lsls	r3, r3, #4
 8017608:	3308      	adds	r3, #8
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	4413      	add	r3, r2
    }
 801760e:	4618      	mov	r0, r3
 8017610:	370c      	adds	r7, #12
 8017612:	46bd      	mov	sp, r7
 8017614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017618:	4770      	bx	lr

0801761a <_GLOBAL__sub_I_touchgfx_init>:
 801761a:	b580      	push	{r7, lr}
 801761c:	af00      	add	r7, sp, #0
 801761e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017622:	2001      	movs	r0, #1
 8017624:	f7ff fefe 	bl	8017424 <_Z41__static_initialization_and_destruction_0ii>
 8017628:	bd80      	pop	{r7, pc}

0801762a <_GLOBAL__sub_D_touchgfx_init>:
 801762a:	b580      	push	{r7, lr}
 801762c:	af00      	add	r7, sp, #0
 801762e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017632:	2000      	movs	r0, #0
 8017634:	f7ff fef6 	bl	8017424 <_Z41__static_initialization_and_destruction_0ii>
 8017638:	bd80      	pop	{r7, pc}
	...

0801763c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
    {
 8017644:	4a04      	ldr	r2, [pc, #16]	@ (8017658 <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	601a      	str	r2, [r3, #0]
    }
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	4618      	mov	r0, r3
 801764e:	370c      	adds	r7, #12
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr
 8017658:	08032c64 	.word	0x08032c64

0801765c <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
    }
 8017664:	6878      	ldr	r0, [r7, #4]
 8017666:	f7ff ffe9 	bl	801763c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 801766a:	2104      	movs	r1, #4
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f018 f966 	bl	802f93e <_ZdlPvj>
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	4618      	mov	r0, r3
 8017676:	3708      	adds	r7, #8
 8017678:	46bd      	mov	sp, r7
 801767a:	bd80      	pop	{r7, pc}

0801767c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801767c:	b480      	push	{r7}
 801767e:	b083      	sub	sp, #12
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801768a:	3301      	adds	r3, #1
 801768c:	b2da      	uxtb	r2, r3
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8017694:	bf00      	nop
 8017696:	370c      	adds	r7, #12
 8017698:	46bd      	mov	sp, r7
 801769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769e:	4770      	bx	lr

080176a0 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 80176a0:	b480      	push	{r7}
 80176a2:	b083      	sub	sp, #12
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	683a      	ldr	r2, [r7, #0]
 80176ae:	619a      	str	r2, [r3, #24]
    }
 80176b0:	bf00      	nop
 80176b2:	370c      	adds	r7, #12
 80176b4:	46bd      	mov	sp, r7
 80176b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ba:	4770      	bx	lr

080176bc <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 80176bc:	b480      	push	{r7}
 80176be:	b083      	sub	sp, #12
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	699b      	ldr	r3, [r3, #24]
    }
 80176c8:	4618      	mov	r0, r3
 80176ca:	370c      	adds	r7, #12
 80176cc:	46bd      	mov	sp, r7
 80176ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d2:	4770      	bx	lr

080176d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	460b      	mov	r3, r1
 80176de:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80176e0:	78fb      	ldrb	r3, [r7, #3]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d002      	beq.n	80176ec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80176e6:	78fb      	ldrb	r3, [r7, #3]
 80176e8:	2b02      	cmp	r3, #2
 80176ea:	d105      	bne.n	80176f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	78fa      	ldrb	r2, [r7, #3]
 80176f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 80176f4:	2301      	movs	r3, #1
 80176f6:	e027      	b.n	8017748 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80176f8:	78fb      	ldrb	r3, [r7, #3]
 80176fa:	2b01      	cmp	r3, #1
 80176fc:	d123      	bne.n	8017746 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017702:	2b00      	cmp	r3, #0
 8017704:	d014      	beq.n	8017730 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	339c      	adds	r3, #156	@ 0x9c
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	4798      	blx	r3
 8017712:	4603      	mov	r3, r0
 8017714:	461a      	mov	r2, r3
 8017716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801771a:	429a      	cmp	r2, r3
 801771c:	d008      	beq.n	8017730 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801771e:	4b0c      	ldr	r3, [pc, #48]	@ (8017750 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017720:	781b      	ldrb	r3, [r3, #0]
 8017722:	f083 0301 	eor.w	r3, r3, #1
 8017726:	b2db      	uxtb	r3, r3
 8017728:	2b00      	cmp	r3, #0
 801772a:	d001      	beq.n	8017730 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801772c:	2301      	movs	r3, #1
 801772e:	e000      	b.n	8017732 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017730:	2300      	movs	r3, #0
 8017732:	2b00      	cmp	r3, #0
 8017734:	d005      	beq.n	8017742 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	78fa      	ldrb	r2, [r7, #3]
 801773a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 801773e:	2301      	movs	r3, #1
 8017740:	e002      	b.n	8017748 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8017742:	2300      	movs	r3, #0
 8017744:	e000      	b.n	8017748 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8017746:	2300      	movs	r3, #0
    }
 8017748:	4618      	mov	r0, r3
 801774a:	3708      	adds	r7, #8
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}
 8017750:	20011ffa 	.word	0x20011ffa

08017754 <_ZN8touchgfx5paint8tearDownEv>:
{
    blendL8CLUT = data;
}

void tearDown()
{
 8017754:	b480      	push	{r7}
 8017756:	af00      	add	r7, sp, #0
}
 8017758:	bf00      	nop
 801775a:	46bd      	mov	sp, r7
 801775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017760:	4770      	bx	lr

08017762 <_ZN8touchgfx5paint9flushLineEPmi>:

void flushLine(uint32_t* addr, int sizebytes)
{
 8017762:	b480      	push	{r7}
 8017764:	b083      	sub	sp, #12
 8017766:	af00      	add	r7, sp, #0
 8017768:	6078      	str	r0, [r7, #4]
 801776a:	6039      	str	r1, [r7, #0]
}
 801776c:	bf00      	nop
 801776e:	370c      	adds	r7, #12
 8017770:	46bd      	mov	sp, r7
 8017772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017776:	4770      	bx	lr

08017778 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
{
    return ((red << 8) & 0xF800) | ((green << 3) & 0x07E0) | ((blue >> 3) & 0x001F);
}

void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8017778:	b480      	push	{r7}
 801777a:	b08b      	sub	sp, #44	@ 0x2c
 801777c:	af00      	add	r7, sp, #0
 801777e:	60f8      	str	r0, [r7, #12]
 8017780:	60b9      	str	r1, [r7, #8]
 8017782:	607a      	str	r2, [r7, #4]
 8017784:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint16_t* const lineEnd = framebuffer + count;
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	005b      	lsls	r3, r3, #1
 801778e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017790:	4413      	add	r3, r2
 8017792:	623b      	str	r3, [r7, #32]
    if (alpha == 0xFF)
 8017794:	78fb      	ldrb	r3, [r7, #3]
 8017796:	2bff      	cmp	r3, #255	@ 0xff
 8017798:	d110      	bne.n	80177bc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
    {
        do
        {
            *framebuffer = color565;
 801779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801779c:	b29a      	uxth	r2, r3
 801779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177a0:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 80177a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177a4:	3302      	adds	r3, #2
 80177a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80177a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80177aa:	6a3b      	ldr	r3, [r7, #32]
 80177ac:	429a      	cmp	r2, r3
 80177ae:	bf34      	ite	cc
 80177b0:	2301      	movcc	r3, #1
 80177b2:	2300      	movcs	r3, #0
 80177b4:	b2db      	uxtb	r3, r3
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d1ef      	bne.n	801779a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x22>
        do
        {
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
        } while (++framebuffer < lineEnd);
    }
}
 80177ba:	e077      	b.n	80178ac <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x134>
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 80177bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177be:	b29a      	uxth	r2, r3
 80177c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177c2:	881b      	ldrh	r3, [r3, #0]
 80177c4:	83fa      	strh	r2, [r7, #30]
 80177c6:	83bb      	strh	r3, [r7, #28]
 80177c8:	78fb      	ldrb	r3, [r7, #3]
 80177ca:	76fb      	strb	r3, [r7, #27]
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80177cc:	8bfb      	ldrh	r3, [r7, #30]
 80177ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80177d2:	f023 0307 	bic.w	r3, r3, #7
 80177d6:	b299      	uxth	r1, r3
 80177d8:	8bfb      	ldrh	r3, [r7, #30]
 80177da:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80177de:	b29a      	uxth	r2, r3
 80177e0:	8bfb      	ldrh	r3, [r7, #30]
 80177e2:	f003 031f 	and.w	r3, r3, #31
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	8339      	strh	r1, [r7, #24]
 80177ea:	82fa      	strh	r2, [r7, #22]
 80177ec:	82bb      	strh	r3, [r7, #20]
 80177ee:	8bbb      	ldrh	r3, [r7, #28]
 80177f0:	827b      	strh	r3, [r7, #18]
 80177f2:	7efb      	ldrb	r3, [r7, #27]
 80177f4:	747b      	strb	r3, [r7, #17]
    const uint8_t ialpha = 0xFF - alpha;
 80177f6:	7c7b      	ldrb	r3, [r7, #17]
 80177f8:	43db      	mvns	r3, r3
 80177fa:	743b      	strb	r3, [r7, #16]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 80177fc:	8b3b      	ldrh	r3, [r7, #24]
 80177fe:	7c7a      	ldrb	r2, [r7, #17]
 8017800:	fb03 f202 	mul.w	r2, r3, r2
 8017804:	8a7b      	ldrh	r3, [r7, #18]
 8017806:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801780a:	7c39      	ldrb	r1, [r7, #16]
 801780c:	fb01 f303 	mul.w	r3, r1, r3
 8017810:	4413      	add	r3, r2
 8017812:	4a29      	ldr	r2, [pc, #164]	@ (80178b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8017814:	fb82 1203 	smull	r1, r2, r2, r3
 8017818:	441a      	add	r2, r3
 801781a:	11d2      	asrs	r2, r2, #7
 801781c:	17db      	asrs	r3, r3, #31
 801781e:	1ad3      	subs	r3, r2, r3
 8017820:	b21b      	sxth	r3, r3
 8017822:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8017826:	f023 0307 	bic.w	r3, r3, #7
 801782a:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 801782c:	8afb      	ldrh	r3, [r7, #22]
 801782e:	7c79      	ldrb	r1, [r7, #17]
 8017830:	fb03 f101 	mul.w	r1, r3, r1
 8017834:	8a7b      	ldrh	r3, [r7, #18]
 8017836:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801783a:	7c38      	ldrb	r0, [r7, #16]
 801783c:	fb00 f303 	mul.w	r3, r0, r3
 8017840:	440b      	add	r3, r1
 8017842:	491d      	ldr	r1, [pc, #116]	@ (80178b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8017844:	fb81 0103 	smull	r0, r1, r1, r3
 8017848:	4419      	add	r1, r3
 801784a:	11c9      	asrs	r1, r1, #7
 801784c:	17db      	asrs	r3, r3, #31
 801784e:	1acb      	subs	r3, r1, r3
 8017850:	b21b      	sxth	r3, r3
 8017852:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8017856:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8017858:	4313      	orrs	r3, r2
 801785a:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801785c:	8abb      	ldrh	r3, [r7, #20]
 801785e:	7c79      	ldrb	r1, [r7, #17]
 8017860:	fb03 f101 	mul.w	r1, r3, r1
 8017864:	8a7b      	ldrh	r3, [r7, #18]
 8017866:	f003 031f 	and.w	r3, r3, #31
 801786a:	7c38      	ldrb	r0, [r7, #16]
 801786c:	fb00 f303 	mul.w	r3, r0, r3
 8017870:	440b      	add	r3, r1
 8017872:	4911      	ldr	r1, [pc, #68]	@ (80178b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8017874:	fb81 0103 	smull	r0, r1, r1, r3
 8017878:	4419      	add	r1, r3
 801787a:	11c9      	asrs	r1, r1, #7
 801787c:	17db      	asrs	r3, r3, #31
 801787e:	1acb      	subs	r3, r1, r3
 8017880:	b21b      	sxth	r3, r3
 8017882:	f003 031f 	and.w	r3, r3, #31
 8017886:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8017888:	4313      	orrs	r3, r2
 801788a:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801788c:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 801788e:	bf00      	nop
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 8017890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017892:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 8017894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017896:	3302      	adds	r3, #2
 8017898:	627b      	str	r3, [r7, #36]	@ 0x24
 801789a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801789c:	6a3b      	ldr	r3, [r7, #32]
 801789e:	429a      	cmp	r2, r3
 80178a0:	bf34      	ite	cc
 80178a2:	2301      	movcc	r3, #1
 80178a4:	2300      	movcs	r3, #0
 80178a6:	b2db      	uxtb	r3, r3
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d187      	bne.n	80177bc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
}
 80178ac:	bf00      	nop
 80178ae:	372c      	adds	r7, #44	@ 0x2c
 80178b0:	46bd      	mov	sp, r7
 80178b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b6:	4770      	bx	lr
 80178b8:	80808081 	.word	0x80808081

080178bc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 80178bc:	b480      	push	{r7}
 80178be:	b08d      	sub	sp, #52	@ 0x34
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	60f8      	str	r0, [r7, #12]
 80178c4:	60b9      	str	r1, [r7, #8]
 80178c6:	607a      	str	r2, [r7, #4]
 80178c8:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint16_t* bitmapPointer = data;
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint16_t* const chunkend = framebuffer + count;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	005b      	lsls	r3, r3, #1
 80178d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80178d8:	4413      	add	r3, r2
 80178da:	627b      	str	r3, [r7, #36]	@ 0x24

    if (alpha == 0xFF)
 80178dc:	78fb      	ldrb	r3, [r7, #3]
 80178de:	2bff      	cmp	r3, #255	@ 0xff
 80178e0:	d112      	bne.n	8017908 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
    {
        do
        {
            *framebuffer = *bitmapPointer++;
 80178e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178e4:	1c9a      	adds	r2, r3, #2
 80178e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80178e8:	881a      	ldrh	r2, [r3, #0]
 80178ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178ec:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 80178ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178f0:	3302      	adds	r3, #2
 80178f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80178f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80178f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178f8:	429a      	cmp	r2, r3
 80178fa:	bf34      	ite	cc
 80178fc:	2301      	movcc	r3, #1
 80178fe:	2300      	movcs	r3, #0
 8017900:	b2db      	uxtb	r3, r3
 8017902:	2b00      	cmp	r3, #0
 8017904:	d1ed      	bne.n	80178e2 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x26>
        do
        {
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
        } while (++framebuffer < chunkend);
    }
}
 8017906:	e079      	b.n	80179fc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x140>
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 8017908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801790a:	1c9a      	adds	r2, r3, #2
 801790c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801790e:	881a      	ldrh	r2, [r3, #0]
 8017910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017912:	881b      	ldrh	r3, [r3, #0]
 8017914:	847a      	strh	r2, [r7, #34]	@ 0x22
 8017916:	843b      	strh	r3, [r7, #32]
 8017918:	78fb      	ldrb	r3, [r7, #3]
 801791a:	77fb      	strb	r3, [r7, #31]
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 801791c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801791e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8017922:	f023 0307 	bic.w	r3, r3, #7
 8017926:	b299      	uxth	r1, r3
 8017928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801792a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801792e:	b29a      	uxth	r2, r3
 8017930:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017932:	f003 031f 	and.w	r3, r3, #31
 8017936:	b29b      	uxth	r3, r3
 8017938:	83b9      	strh	r1, [r7, #28]
 801793a:	837a      	strh	r2, [r7, #26]
 801793c:	833b      	strh	r3, [r7, #24]
 801793e:	8c3b      	ldrh	r3, [r7, #32]
 8017940:	82fb      	strh	r3, [r7, #22]
 8017942:	7ffb      	ldrb	r3, [r7, #31]
 8017944:	757b      	strb	r3, [r7, #21]
    const uint8_t ialpha = 0xFF - alpha;
 8017946:	7d7b      	ldrb	r3, [r7, #21]
 8017948:	43db      	mvns	r3, r3
 801794a:	753b      	strb	r3, [r7, #20]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 801794c:	8bbb      	ldrh	r3, [r7, #28]
 801794e:	7d7a      	ldrb	r2, [r7, #21]
 8017950:	fb03 f202 	mul.w	r2, r3, r2
 8017954:	8afb      	ldrh	r3, [r7, #22]
 8017956:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801795a:	7d39      	ldrb	r1, [r7, #20]
 801795c:	fb01 f303 	mul.w	r3, r1, r3
 8017960:	4413      	add	r3, r2
 8017962:	4a29      	ldr	r2, [pc, #164]	@ (8017a08 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8017964:	fb82 1203 	smull	r1, r2, r2, r3
 8017968:	441a      	add	r2, r3
 801796a:	11d2      	asrs	r2, r2, #7
 801796c:	17db      	asrs	r3, r3, #31
 801796e:	1ad3      	subs	r3, r2, r3
 8017970:	b21b      	sxth	r3, r3
 8017972:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8017976:	f023 0307 	bic.w	r3, r3, #7
 801797a:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 801797c:	8b7b      	ldrh	r3, [r7, #26]
 801797e:	7d79      	ldrb	r1, [r7, #21]
 8017980:	fb03 f101 	mul.w	r1, r3, r1
 8017984:	8afb      	ldrh	r3, [r7, #22]
 8017986:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801798a:	7d38      	ldrb	r0, [r7, #20]
 801798c:	fb00 f303 	mul.w	r3, r0, r3
 8017990:	440b      	add	r3, r1
 8017992:	491d      	ldr	r1, [pc, #116]	@ (8017a08 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8017994:	fb81 0103 	smull	r0, r1, r1, r3
 8017998:	4419      	add	r1, r3
 801799a:	11c9      	asrs	r1, r1, #7
 801799c:	17db      	asrs	r3, r3, #31
 801799e:	1acb      	subs	r3, r1, r3
 80179a0:	b21b      	sxth	r3, r3
 80179a2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80179a6:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 80179a8:	4313      	orrs	r3, r2
 80179aa:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 80179ac:	8b3b      	ldrh	r3, [r7, #24]
 80179ae:	7d79      	ldrb	r1, [r7, #21]
 80179b0:	fb03 f101 	mul.w	r1, r3, r1
 80179b4:	8afb      	ldrh	r3, [r7, #22]
 80179b6:	f003 031f 	and.w	r3, r3, #31
 80179ba:	7d38      	ldrb	r0, [r7, #20]
 80179bc:	fb00 f303 	mul.w	r3, r0, r3
 80179c0:	440b      	add	r3, r1
 80179c2:	4911      	ldr	r1, [pc, #68]	@ (8017a08 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 80179c4:	fb81 0103 	smull	r0, r1, r1, r3
 80179c8:	4419      	add	r1, r3
 80179ca:	11c9      	asrs	r1, r1, #7
 80179cc:	17db      	asrs	r3, r3, #31
 80179ce:	1acb      	subs	r3, r1, r3
 80179d0:	b21b      	sxth	r3, r3
 80179d2:	f003 031f 	and.w	r3, r3, #31
 80179d6:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 80179d8:	4313      	orrs	r3, r2
 80179da:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 80179dc:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80179de:	bf00      	nop
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 80179e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179e2:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 80179e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179e6:	3302      	adds	r3, #2
 80179e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80179ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80179ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ee:	429a      	cmp	r2, r3
 80179f0:	bf34      	ite	cc
 80179f2:	2301      	movcc	r3, #1
 80179f4:	2300      	movcs	r3, #0
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d185      	bne.n	8017908 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
}
 80179fc:	bf00      	nop
 80179fe:	3734      	adds	r7, #52	@ 0x34
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr
 8017a08:	80808081 	.word	0x80808081

08017a0c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8017a0c:	b590      	push	{r4, r7, lr}
 8017a0e:	b093      	sub	sp, #76	@ 0x4c
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	60f8      	str	r0, [r7, #12]
 8017a14:	60b9      	str	r1, [r7, #8]
 8017a16:	607a      	str	r2, [r7, #4]
 8017a18:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t* bitmapPointer = data;
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	643b      	str	r3, [r7, #64]	@ 0x40
    const uint16_t* const chunkend = framebuffer + count;
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	005b      	lsls	r3, r3, #1
 8017a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017a28:	4413      	add	r3, r2
 8017a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    do
    {
        const uint8_t srcAlpha = (*bitmapPointer) >> 24;
 8017a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	0e1b      	lsrs	r3, r3, #24
 8017a32:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        const uint8_t a = LCD::div255(alpha * srcAlpha);
 8017a36:	78fb      	ldrb	r3, [r7, #3]
 8017a38:	b29a      	uxth	r2, r3
 8017a3a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017a3e:	b29b      	uxth	r3, r3
 8017a40:	fb12 f303 	smulbb	r3, r2, r3
 8017a44:	b29b      	uxth	r3, r3
 8017a46:	867b      	strh	r3, [r7, #50]	@ 0x32
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 8017a48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8017a4e:	0a12      	lsrs	r2, r2, #8
 8017a50:	b292      	uxth	r2, r2
 8017a52:	4413      	add	r3, r2
 8017a54:	121b      	asrs	r3, r3, #8
 8017a56:	b2db      	uxtb	r3, r3
 8017a58:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        if (a == 0xFF)
 8017a5c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8017a60:	2bff      	cmp	r3, #255	@ 0xff
 8017a62:	d133      	bne.n	8017acc <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0xc0>
        {
            *framebuffer = getNativeColor(*bitmapPointer);
 8017a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a66:	681a      	ldr	r2, [r3, #0]
 8017a68:	f107 0318 	add.w	r3, r7, #24
 8017a6c:	4611      	mov	r1, r2
 8017a6e:	4618      	mov	r0, r3
 8017a70:	f7f5 fc82 	bl	800d378 <_ZN8touchgfx9colortypeC1Em>
 8017a74:	69bb      	ldr	r3, [r7, #24]
 8017a76:	617b      	str	r3, [r7, #20]
    return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 8017a78:	f107 0314 	add.w	r3, r7, #20
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7f5 fc8a 	bl	800d396 <_ZNK8touchgfx9colortypecvmEv>
 8017a82:	4603      	mov	r3, r0
 8017a84:	0a1b      	lsrs	r3, r3, #8
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8017a8c:	f023 0307 	bic.w	r3, r3, #7
 8017a90:	b29c      	uxth	r4, r3
 8017a92:	f107 0314 	add.w	r3, r7, #20
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7f5 fc7d 	bl	800d396 <_ZNK8touchgfx9colortypecvmEv>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	095b      	lsrs	r3, r3, #5
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	4323      	orrs	r3, r4
 8017aaa:	b29c      	uxth	r4, r3
 8017aac:	f107 0314 	add.w	r3, r7, #20
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7f5 fc70 	bl	800d396 <_ZNK8touchgfx9colortypecvmEv>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	08db      	lsrs	r3, r3, #3
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	f003 031f 	and.w	r3, r3, #31
 8017ac0:	b29b      	uxth	r3, r3
 8017ac2:	4323      	orrs	r3, r4
 8017ac4:	b29a      	uxth	r2, r3
            *framebuffer = getNativeColor(*bitmapPointer);
 8017ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017ac8:	801a      	strh	r2, [r3, #0]
 8017aca:	e0a9      	b.n	8017c20 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x214>
        }
        else if (a)
 8017acc:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f000 80a5 	beq.w	8017c20 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x214>
        {
            const uint32_t newpix = *bitmapPointer;
 8017ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	637b      	str	r3, [r7, #52]	@ 0x34
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 8017adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ade:	0c1b      	lsrs	r3, r3, #16
 8017ae0:	b2d8      	uxtb	r0, r3
 8017ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ae4:	0a1b      	lsrs	r3, r3, #8
 8017ae6:	b2d9      	uxtb	r1, r3
 8017ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017aea:	b2da      	uxtb	r2, r3
 8017aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017aee:	881b      	ldrh	r3, [r3, #0]
 8017af0:	f887 0031 	strb.w	r0, [r7, #49]	@ 0x31
 8017af4:	f887 1030 	strb.w	r1, [r7, #48]	@ 0x30
 8017af8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017afc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8017afe:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8017b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const uint8_t ialpha = 0xFF - alpha;
 8017b06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017b0a:	43db      	mvns	r3, r3
 8017b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8017b10:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017b12:	853b      	strh	r3, [r7, #40]	@ 0x28
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedFromRGB565(uint16_t color)
    {
        const uint8_t red = (color >> 8) & 0xF8;
 8017b14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017b16:	0a1b      	lsrs	r3, r3, #8
 8017b18:	b29b      	uxth	r3, r3
 8017b1a:	b2db      	uxtb	r3, r3
 8017b1c:	f023 0307 	bic.w	r3, r3, #7
 8017b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        return red | (red >> 5);
 8017b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b28:	095b      	lsrs	r3, r3, #5
 8017b2a:	b2da      	uxtb	r2, r3
 8017b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b30:	4313      	orrs	r3, r2
 8017b32:	b2db      	uxtb	r3, r3
    const uint8_t fbred = Color::getRedFromRGB565(bufpix);
 8017b34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017b38:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017b3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenFromRGB565(uint16_t color)
    {
        const uint8_t green = (color >> 3) & 0xFC;
 8017b3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017b3e:	08db      	lsrs	r3, r3, #3
 8017b40:	b29b      	uxth	r3, r3
 8017b42:	b2db      	uxtb	r3, r3
 8017b44:	f023 0303 	bic.w	r3, r3, #3
 8017b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        return green | (green >> 6);
 8017b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017b50:	099b      	lsrs	r3, r3, #6
 8017b52:	b2da      	uxtb	r2, r3
 8017b54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017b58:	4313      	orrs	r3, r2
 8017b5a:	b2db      	uxtb	r3, r3
    const uint8_t fbgreen = Color::getGreenFromRGB565(bufpix);
 8017b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017b60:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017b62:	843b      	strh	r3, [r7, #32]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueFromRGB565(uint16_t color)
    {
        const uint8_t blue = color << 3;
 8017b64:	8c3b      	ldrh	r3, [r7, #32]
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	00db      	lsls	r3, r3, #3
 8017b6a:	77fb      	strb	r3, [r7, #31]
        return blue | (blue >> 5);
 8017b6c:	7ffb      	ldrb	r3, [r7, #31]
 8017b6e:	095b      	lsrs	r3, r3, #5
 8017b70:	b2da      	uxtb	r2, r3
 8017b72:	7ffb      	ldrb	r3, [r7, #31]
 8017b74:	4313      	orrs	r3, r2
 8017b76:	b2db      	uxtb	r3, r3
    const uint8_t fbblue = Color::getBlueFromRGB565(bufpix);
 8017b78:	77bb      	strb	r3, [r7, #30]
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 8017b7a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8017b7e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8017b82:	fb03 f202 	mul.w	r2, r3, r2
 8017b86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017b8a:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8017b8e:	fb01 f303 	mul.w	r3, r1, r3
 8017b92:	4413      	add	r3, r2
 8017b94:	4a2d      	ldr	r2, [pc, #180]	@ (8017c4c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8017b96:	fb82 1203 	smull	r1, r2, r2, r3
 8017b9a:	441a      	add	r2, r3
 8017b9c:	11d2      	asrs	r2, r2, #7
 8017b9e:	17db      	asrs	r3, r3, #31
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	021b      	lsls	r3, r3, #8
 8017ba4:	b21b      	sxth	r3, r3
 8017ba6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8017baa:	f023 0307 	bic.w	r3, r3, #7
 8017bae:	b21a      	sxth	r2, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 8017bb0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017bb4:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8017bb8:	fb03 f101 	mul.w	r1, r3, r1
 8017bbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017bc0:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8017bc4:	fb00 f303 	mul.w	r3, r0, r3
 8017bc8:	440b      	add	r3, r1
 8017bca:	4920      	ldr	r1, [pc, #128]	@ (8017c4c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8017bcc:	fb81 0103 	smull	r0, r1, r1, r3
 8017bd0:	4419      	add	r1, r3
 8017bd2:	11c9      	asrs	r1, r1, #7
 8017bd4:	17db      	asrs	r3, r3, #31
 8017bd6:	1acb      	subs	r3, r1, r3
 8017bd8:	00db      	lsls	r3, r3, #3
 8017bda:	b21b      	sxth	r3, r3
 8017bdc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8017be0:	b21b      	sxth	r3, r3
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 8017be2:	4313      	orrs	r3, r2
 8017be4:	b21a      	sxth	r2, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 8017be6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017bea:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8017bee:	fb03 f101 	mul.w	r1, r3, r1
 8017bf2:	7fbb      	ldrb	r3, [r7, #30]
 8017bf4:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8017bf8:	fb00 f303 	mul.w	r3, r0, r3
 8017bfc:	440b      	add	r3, r1
 8017bfe:	4913      	ldr	r1, [pc, #76]	@ (8017c4c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8017c00:	fb81 0103 	smull	r0, r1, r1, r3
 8017c04:	4419      	add	r1, r3
 8017c06:	11c9      	asrs	r1, r1, #7
 8017c08:	17db      	asrs	r3, r3, #31
 8017c0a:	1acb      	subs	r3, r1, r3
 8017c0c:	10db      	asrs	r3, r3, #3
 8017c0e:	b21b      	sxth	r3, r3
 8017c10:	f003 031f 	and.w	r3, r3, #31
 8017c14:	b21b      	sxth	r3, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 8017c16:	4313      	orrs	r3, r2
 8017c18:	b21b      	sxth	r3, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 8017c1a:	b29a      	uxth	r2, r3
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 8017c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c1e:	801a      	strh	r2, [r3, #0]
        }
        bitmapPointer++;
 8017c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c22:	3304      	adds	r3, #4
 8017c24:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (++framebuffer < chunkend);
 8017c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c28:	3302      	adds	r3, #2
 8017c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8017c2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c30:	429a      	cmp	r2, r3
 8017c32:	bf34      	ite	cc
 8017c34:	2301      	movcc	r3, #1
 8017c36:	2300      	movcs	r3, #0
 8017c38:	b2db      	uxtb	r3, r3
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	f47f aef6 	bne.w	8017a2c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x20>
}
 8017c40:	bf00      	nop
 8017c42:	bf00      	nop
 8017c44:	374c      	adds	r7, #76	@ 0x4c
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd90      	pop	{r4, r7, pc}
 8017c4a:	bf00      	nop
 8017c4c:	80808081 	.word	0x80808081

08017c50 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
       3, /* number of blocks */
       2 /* bytes per pixel */
       > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 8017c50:	b5b0      	push	{r4, r5, r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f000 fea5 	bl	80189aa <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8017c60:	687d      	ldr	r5, [r7, #4]
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	3364      	adds	r3, #100	@ 0x64
 8017c68:	681c      	ldr	r4, [r3, #0]
 8017c6a:	f005 ff77 	bl	801db5c <_ZN8touchgfx11Application11getInstanceEv>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	4619      	mov	r1, r3
 8017c72:	4628      	mov	r0, r5
 8017c74:	47a0      	blx	r4
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	4906      	ldr	r1, [pc, #24]	@ (8017c94 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f7ff fd10 	bl	80176a0 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	2102      	movs	r1, #2
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7ff fd25 	bl	80176d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bdb0      	pop	{r4, r5, r7, pc}
 8017c92:	bf00      	nop
 8017c94:	2000efc8 	.word	0x2000efc8

08017c98 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017c98:	b480      	push	{r7}
 8017c9a:	b083      	sub	sp, #12
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
}
 8017ca0:	bf00      	nop
 8017ca2:	370c      	adds	r7, #12
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017caa:	4770      	bx	lr

08017cac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017cac:	b480      	push	{r7}
 8017cae:	b083      	sub	sp, #12
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
}
 8017cb4:	bf00      	nop
 8017cb6:	370c      	adds	r7, #12
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cbe:	4770      	bx	lr

08017cc0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	b083      	sub	sp, #12
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
}
 8017cc8:	bf00      	nop
 8017cca:	370c      	adds	r7, #12
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd2:	4770      	bx	lr

08017cd4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017cd4:	b480      	push	{r7}
 8017cd6:	b083      	sub	sp, #12
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
}
 8017cdc:	bf00      	nop
 8017cde:	370c      	adds	r7, #12
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce6:	4770      	bx	lr

08017ce8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f000 fe40 	bl	8018978 <_ZN8touchgfx3HAL10beginFrameEv>
 8017cf8:	4603      	mov	r3, r0
}
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	3708      	adds	r7, #8
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}

08017d02 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8017d02:	b580      	push	{r7, lr}
 8017d04:	b082      	sub	sp, #8
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while (touchgfxDisplayDriverTransmitActive()){}
 8017d0a:	bf00      	nop
 8017d0c:	f7e9 fcf2 	bl	80016f4 <touchgfxDisplayDriverTransmitActive>
 8017d10:	4603      	mov	r3, r0
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	bf14      	ite	ne
 8017d16:	2301      	movne	r3, #1
 8017d18:	2300      	moveq	r3, #0
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d1f5      	bne.n	8017d0c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xa>

    HAL::endFrame();
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	4618      	mov	r0, r3
 8017d24:	f000 fe34 	bl	8018990 <_ZN8touchgfx3HAL8endFrameEv>
}
 8017d28:	bf00      	nop
 8017d2a:	3708      	adds	r7, #8
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8017d30:	b480      	push	{r7}
 8017d32:	b083      	sub	sp, #12
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 8017d38:	2300      	movs	r3, #0
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	370c      	adds	r7, #12
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr

08017d46 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017d46:	b480      	push	{r7}
 8017d48:	b083      	sub	sp, #12
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	6078      	str	r0, [r7, #4]
 8017d4e:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8017d50:	bf00      	nop
 8017d52:	370c      	adds	r7, #12
 8017d54:	46bd      	mov	sp, r7
 8017d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5a:	4770      	bx	lr

08017d5c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b088      	sub	sp, #32
 8017d60:	af02      	add	r7, sp, #8
 8017d62:	6078      	str	r0, [r7, #4]
 8017d64:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	6839      	ldr	r1, [r7, #0]
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f000 fdce 	bl	801890c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	699a      	ldr	r2, [r3, #24]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	699b      	ldr	r3, [r3, #24]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	3304      	adds	r3, #4
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	4610      	mov	r0, r2
 8017d80:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 8017d82:	f7e9 fcb7 	bl	80016f4 <touchgfxDisplayDriverTransmitActive>
 8017d86:	4603      	mov	r3, r0
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	bf0c      	ite	eq
 8017d8c:	2301      	moveq	r3, #1
 8017d8e:	2300      	movne	r3, #0
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d021      	beq.n	8017dda <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 8017d96:	f107 030c 	add.w	r3, r7, #12
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7f5 fb07 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	699a      	ldr	r2, [r3, #24]
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	699b      	ldr	r3, [r3, #24]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	330c      	adds	r3, #12
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	f107 010c 	add.w	r1, r7, #12
 8017db2:	4610      	mov	r0, r2
 8017db4:	4798      	blx	r3
 8017db6:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8017db8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017dbc:	b299      	uxth	r1, r3
 8017dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017dc2:	b29a      	uxth	r2, r3
 8017dc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017dc8:	b298      	uxth	r0, r3
 8017dca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	9300      	str	r3, [sp, #0]
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	6978      	ldr	r0, [r7, #20]
 8017dd6:	f7e9 fc9f 	bl	8001718 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8017dda:	bf00      	nop
 8017ddc:	3718      	adds	r7, #24
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}

08017de2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8017de2:	b580      	push	{r7, lr}
 8017de4:	b084      	sub	sp, #16
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	60f8      	str	r0, [r7, #12]
 8017dea:	60b9      	str	r1, [r7, #8]
 8017dec:	607a      	str	r2, [r7, #4]
 8017dee:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8017df0:	68f8      	ldr	r0, [r7, #12]
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	687a      	ldr	r2, [r7, #4]
 8017df6:	68b9      	ldr	r1, [r7, #8]
 8017df8:	f000 fef9 	bl	8018bee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8017dfc:	4603      	mov	r3, r0
}
 8017dfe:	4618      	mov	r0, r3
 8017e00:	3710      	adds	r7, #16
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}

08017e06 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
void FrameBufferAllocatorWaitOnTransfer()
{
 8017e06:	b480      	push	{r7}
 8017e08:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
     */
}
 8017e0a:	bf00      	nop
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr

08017e14 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
void FrameBufferAllocatorSignalBlockDrawn()
{
 8017e14:	b480      	push	{r7}
 8017e16:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
     */
}
 8017e18:	bf00      	nop
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e20:	4770      	bx	lr

08017e22 <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 8017e22:	b580      	push	{r7, lr}
 8017e24:	b086      	sub	sp, #24
 8017e26:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 8017e28:	f7f4 fe08 	bl	800ca3c <_ZN8touchgfx3HAL11getInstanceEv>
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7ff fc44 	bl	80176bc <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 8017e34:	60f8      	str	r0, [r7, #12]

    // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	3318      	adds	r3, #24
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	68f8      	ldr	r0, [r7, #12]
 8017e40:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	3308      	adds	r3, #8
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	68f8      	ldr	r0, [r7, #12]
 8017e4c:	4798      	blx	r3
 8017e4e:	4603      	mov	r3, r0
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d01d      	beq.n	8017e90 <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 8017e54:	463b      	mov	r3, r7
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7f5 faa9 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	330c      	adds	r3, #12
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	463a      	mov	r2, r7
 8017e66:	4611      	mov	r1, r2
 8017e68:	68f8      	ldr	r0, [r7, #12]
 8017e6a:	4798      	blx	r3
 8017e6c:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8017e6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017e72:	b299      	uxth	r1, r3
 8017e74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017e78:	b29a      	uxth	r2, r3
 8017e7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8017e7e:	b298      	uxth	r0, r3
 8017e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017e84:	b29b      	uxth	r3, r3
 8017e86:	9300      	str	r3, [sp, #0]
 8017e88:	4603      	mov	r3, r0
 8017e8a:	68b8      	ldr	r0, [r7, #8]
 8017e8c:	f7e9 fc44 	bl	8001718 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8017e90:	bf00      	nop
 8017e92:	3710      	adds	r7, #16
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd80      	pop	{r7, pc}

08017e98 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	af00      	add	r7, sp, #0
    // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8017e9c:	f7ff ffc1 	bl	8017e22 <_ZN8touchgfx16startNewTransferEv>
}
 8017ea0:	bf00      	nop
 8017ea2:	bd80      	pop	{r7, pc}

08017ea4 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8017ea8:	f7f4 fdc8 	bl	800ca3c <_ZN8touchgfx3HAL11getInstanceEv>
 8017eac:	4603      	mov	r3, r0
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f7ff fbe4 	bl	801767c <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 8017eb4:	f7fe fd98 	bl	80169e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8017eb8:	bf00      	nop
 8017eba:	bd80      	pop	{r7, pc}

08017ebc <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8017ebc:	b480      	push	{r7}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	4a04      	ldr	r2, [pc, #16]	@ (8017ed8 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	601a      	str	r2, [r3, #0]
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	4618      	mov	r0, r3
 8017ece:	370c      	adds	r7, #12
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed6:	4770      	bx	lr
 8017ed8:	08032c64 	.word	0x08032c64

08017edc <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 8017edc:	b5b0      	push	{r4, r5, r7, lr}
 8017ede:	b084      	sub	sp, #16
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
    {
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7ff ffe8 	bl	8017ebc <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 8017eec:	4a19      	ldr	r2, [pc, #100]	@ (8017f54 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x78>)
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	601a      	str	r2, [r3, #0]
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017ef8:	3308      	adds	r3, #8
 8017efa:	2402      	movs	r4, #2
 8017efc:	461d      	mov	r5, r3
 8017efe:	e004      	b.n	8017f0a <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x2e>
 8017f00:	4628      	mov	r0, r5
 8017f02:	f7f5 fa54 	bl	800d3ae <_ZN8touchgfx4RectC1Ev>
 8017f06:	3c01      	subs	r4, #1
 8017f08:	3508      	adds	r5, #8
 8017f0a:	2c00      	cmp	r4, #0
 8017f0c:	daf8      	bge.n	8017f00 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x24>
        sendingBlock = -1;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017f14:	461a      	mov	r2, r3
 8017f16:	f04f 33ff 	mov.w	r3, #4294967295
 8017f1a:	6213      	str	r3, [r2, #32]
        drawingBlock = -1;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017f22:	461a      	mov	r2, r3
 8017f24:	f04f 33ff 	mov.w	r3, #4294967295
 8017f28:	6253      	str	r3, [r2, #36]	@ 0x24
        for (uint32_t i = 0; i < blocks; i++)
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	60fb      	str	r3, [r7, #12]
 8017f2e:	e008      	b.n	8017f42 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x66>
        {
            state[i] = EMPTY;
 8017f30:	687a      	ldr	r2, [r7, #4]
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	4413      	add	r3, r2
 8017f36:	3304      	adds	r3, #4
 8017f38:	2200      	movs	r2, #0
 8017f3a:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	3301      	adds	r3, #1
 8017f40:	60fb      	str	r3, [r7, #12]
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	2b02      	cmp	r3, #2
 8017f46:	d9f3      	bls.n	8017f30 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x54>
        }
    }
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3710      	adds	r7, #16
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bdb0      	pop	{r4, r5, r7, pc}
 8017f52:	bf00      	nop
 8017f54:	08032b60 	.word	0x08032b60

08017f58 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b082      	sub	sp, #8
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	6078      	str	r0, [r7, #4]
 8017f60:	4a05      	ldr	r2, [pc, #20]	@ (8017f78 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev+0x20>)
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	601a      	str	r2, [r3, #0]
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f7ff fb67 	bl	801763c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	4618      	mov	r0, r3
 8017f72:	3708      	adds	r7, #8
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}
 8017f78:	08032b60 	.word	0x08032b60

08017f7c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED0Ev>:
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b082      	sub	sp, #8
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
 8017f84:	6878      	ldr	r0, [r7, #4]
 8017f86:	f7ff ffe7 	bl	8017f58 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>
 8017f8a:	f243 0128 	movw	r1, #12328	@ 0x3028
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f017 fcd5 	bl	802f93e <_ZdlPvj>
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	4618      	mov	r0, r3
 8017f98:	3708      	adds	r7, #8
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
	...

08017fa0 <_Z41__static_initialization_and_destruction_0ii>:
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	6039      	str	r1, [r7, #0]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	2b01      	cmp	r3, #1
 8017fae:	d107      	bne.n	8017fc0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8017fb0:	683b      	ldr	r3, [r7, #0]
 8017fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	d102      	bne.n	8017fc0 <_Z41__static_initialization_and_destruction_0ii+0x20>
       > blockAllocator;
 8017fba:	4809      	ldr	r0, [pc, #36]	@ (8017fe0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8017fbc:	f7ff ff8e 	bl	8017edc <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev>
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d107      	bne.n	8017fd6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017fcc:	4293      	cmp	r3, r2
 8017fce:	d102      	bne.n	8017fd6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8017fd0:	4803      	ldr	r0, [pc, #12]	@ (8017fe0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8017fd2:	f7ff ffc1 	bl	8017f58 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>
}
 8017fd6:	bf00      	nop
 8017fd8:	3708      	adds	r7, #8
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}
 8017fde:	bf00      	nop
 8017fe0:	2000efc8 	.word	0x2000efc8

08017fe4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b086      	sub	sp, #24
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	4608      	mov	r0, r1
 8017fee:	4611      	mov	r1, r2
 8017ff0:	461a      	mov	r2, r3
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	817b      	strh	r3, [r7, #10]
 8017ff6:	460b      	mov	r3, r1
 8017ff8:	813b      	strh	r3, [r7, #8]
 8017ffa:	4613      	mov	r3, r2
 8017ffc:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018006:	3301      	adds	r3, #1
 8018008:	68fa      	ldr	r2, [r7, #12]
 801800a:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 801800e:	6253      	str	r3, [r2, #36]	@ 0x24
        if (drawingBlock == blocks)
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018018:	2b03      	cmp	r3, #3
 801801a:	d108      	bne.n	801802e <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            drawingBlock = 0;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018022:	461a      	mov	r2, r3
 8018024:	2300      	movs	r3, #0
 8018026:	6253      	str	r3, [r2, #36]	@ 0x24
        }
        while (state[drawingBlock] != EMPTY)
 8018028:	e001      	b.n	801802e <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            FrameBufferAllocatorWaitOnTransfer();
 801802a:	f7ff feec 	bl	8017e06 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018036:	68fa      	ldr	r2, [r7, #12]
 8018038:	4413      	add	r3, r2
 801803a:	791b      	ldrb	r3, [r3, #4]
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b00      	cmp	r3, #0
 8018040:	bf14      	ite	ne
 8018042:	2301      	movne	r3, #1
 8018044:	2300      	moveq	r3, #0
 8018046:	b2db      	uxtb	r3, r3
 8018048:	2b00      	cmp	r3, #0
 801804a:	d1ee      	bne.n	801802a <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x46>
        }
        assert(state[drawingBlock] == EMPTY);
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018054:	68fa      	ldr	r2, [r7, #12]
 8018056:	4413      	add	r3, r2
 8018058:	791b      	ldrb	r3, [r3, #4]
 801805a:	b2db      	uxtb	r3, r3
 801805c:	2b00      	cmp	r3, #0
 801805e:	d005      	beq.n	801806c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x88>
 8018060:	4b33      	ldr	r3, [pc, #204]	@ (8018130 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x14c>)
 8018062:	4a34      	ldr	r2, [pc, #208]	@ (8018134 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x150>)
 8018064:	21aa      	movs	r1, #170	@ 0xaa
 8018066:	4834      	ldr	r0, [pc, #208]	@ (8018138 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x154>)
 8018068:	f017 fc96 	bl	802f998 <__assert_func>
        state[drawingBlock] = ALLOCATED;
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018074:	68fa      	ldr	r2, [r7, #12]
 8018076:	4413      	add	r3, r2
 8018078:	2201      	movs	r2, #1
 801807a:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 801807c:	88fb      	ldrh	r3, [r7, #6]
 801807e:	005b      	lsls	r3, r3, #1
 8018080:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8018088:	fbb2 f3f3 	udiv	r3, r2, r3
 801808c:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018096:	031b      	lsls	r3, r3, #12
 8018098:	3308      	adds	r3, #8
 801809a:	68fa      	ldr	r2, [r7, #12]
 801809c:	441a      	add	r2, r3
 801809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180a0:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80180a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80180aa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	f202 6201 	addw	r2, r2, #1537	@ 0x601
 80180b4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80180be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180c0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80180c4:	68fa      	ldr	r2, [r7, #12]
 80180c6:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 80180ca:	00db      	lsls	r3, r3, #3
 80180cc:	4413      	add	r3, r2
 80180ce:	460a      	mov	r2, r1
 80180d0:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80180d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180da:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80180de:	68fa      	ldr	r2, [r7, #12]
 80180e0:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 80180e4:	00db      	lsls	r3, r3, #3
 80180e6:	4413      	add	r3, r2
 80180e8:	460a      	mov	r2, r1
 80180ea:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 80180ec:	8c3a      	ldrh	r2, [r7, #32]
 80180ee:	693b      	ldr	r3, [r7, #16]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	bfa8      	it	ge
 80180f4:	461a      	movge	r2, r3
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80180fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180fe:	b211      	sxth	r1, r2
 8018100:	68fa      	ldr	r2, [r7, #12]
 8018102:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8018106:	00db      	lsls	r3, r3, #3
 8018108:	4413      	add	r3, r2
 801810a:	460a      	mov	r2, r1
 801810c:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018116:	68fa      	ldr	r2, [r7, #12]
 8018118:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 801811c:	00db      	lsls	r3, r3, #3
 801811e:	4413      	add	r3, r2
 8018120:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8018124:	b29b      	uxth	r3, r3
    }
 8018126:	4618      	mov	r0, r3
 8018128:	3718      	adds	r7, #24
 801812a:	46bd      	mov	sp, r7
 801812c:	bd80      	pop	{r7, pc}
 801812e:	bf00      	nop
 8018130:	08031958 	.word	0x08031958
 8018134:	08031978 	.word	0x08031978
 8018138:	08031aac 	.word	0x08031aac

0801813c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 801813c:	b580      	push	{r7, lr}
 801813e:	b082      	sub	sp, #8
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801814a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801814c:	687a      	ldr	r2, [r7, #4]
 801814e:	4413      	add	r3, r2
 8018150:	791b      	ldrb	r3, [r3, #4]
 8018152:	b2db      	uxtb	r3, r3
 8018154:	2b01      	cmp	r3, #1
 8018156:	d005      	beq.n	8018164 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x28>
 8018158:	4b09      	ldr	r3, [pc, #36]	@ (8018180 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x44>)
 801815a:	4a0a      	ldr	r2, [pc, #40]	@ (8018184 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 801815c:	21b9      	movs	r1, #185	@ 0xb9
 801815e:	480a      	ldr	r0, [pc, #40]	@ (8018188 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 8018160:	f017 fc1a 	bl	802f998 <__assert_func>
        state[drawingBlock] = DRAWN;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801816a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801816c:	687a      	ldr	r2, [r7, #4]
 801816e:	4413      	add	r3, r2
 8018170:	2202      	movs	r2, #2
 8018172:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8018174:	f7ff fe4e 	bl	8017e14 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 8018178:	bf00      	nop
 801817a:	3708      	adds	r7, #8
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}
 8018180:	08031b00 	.word	0x08031b00
 8018184:	08031b24 	.word	0x08031b24
 8018188:	08031aac 	.word	0x08031aac

0801818c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 801818c:	b480      	push	{r7}
 801818e:	b085      	sub	sp, #20
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 8018194:	2300      	movs	r3, #0
 8018196:	60fb      	str	r3, [r7, #12]
 8018198:	e011      	b.n	80181be <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x32>
        {
            if (state[i] == DRAWN)
 801819a:	687a      	ldr	r2, [r7, #4]
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	4413      	add	r3, r2
 80181a0:	3304      	adds	r3, #4
 80181a2:	781b      	ldrb	r3, [r3, #0]
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	2b02      	cmp	r3, #2
 80181a8:	bf0c      	ite	eq
 80181aa:	2301      	moveq	r3, #1
 80181ac:	2300      	movne	r3, #0
 80181ae:	b2db      	uxtb	r3, r3
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d001      	beq.n	80181b8 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x2c>
            {
                return true;
 80181b4:	2301      	movs	r3, #1
 80181b6:	e006      	b.n	80181c6 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	3301      	adds	r3, #1
 80181bc:	60fb      	str	r3, [r7, #12]
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	2b02      	cmp	r3, #2
 80181c2:	d9ea      	bls.n	801819a <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0xe>
            }
        }
        return false;
 80181c4:	2300      	movs	r3, #0
    }
 80181c6:	4618      	mov	r0, r3
 80181c8:	3714      	adds	r7, #20
 80181ca:	46bd      	mov	sp, r7
 80181cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d0:	4770      	bx	lr
	...

080181d4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
 80181dc:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80181e4:	6a1b      	ldr	r3, [r3, #32]
 80181e6:	3301      	adds	r3, #1
 80181e8:	687a      	ldr	r2, [r7, #4]
 80181ea:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80181ee:	6213      	str	r3, [r2, #32]
        if (sendingBlock == blocks)
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80181f6:	6a1b      	ldr	r3, [r3, #32]
 80181f8:	2b03      	cmp	r3, #3
 80181fa:	d105      	bne.n	8018208 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x34>
        {
            sendingBlock = 0;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018202:	461a      	mov	r2, r3
 8018204:	2300      	movs	r3, #0
 8018206:	6213      	str	r3, [r2, #32]
        }
        assert(state[sendingBlock] == DRAWN);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801820e:	6a1b      	ldr	r3, [r3, #32]
 8018210:	687a      	ldr	r2, [r7, #4]
 8018212:	4413      	add	r3, r2
 8018214:	791b      	ldrb	r3, [r3, #4]
 8018216:	b2db      	uxtb	r3, r3
 8018218:	2b02      	cmp	r3, #2
 801821a:	d005      	beq.n	8018228 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x54>
 801821c:	4b13      	ldr	r3, [pc, #76]	@ (801826c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x98>)
 801821e:	4a14      	ldr	r2, [pc, #80]	@ (8018270 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x9c>)
 8018220:	21dd      	movs	r1, #221	@ 0xdd
 8018222:	4814      	ldr	r0, [pc, #80]	@ (8018274 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa0>)
 8018224:	f017 fbb8 	bl	802f998 <__assert_func>
        rect = blockRect[sendingBlock];
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801822e:	6a1b      	ldr	r3, [r3, #32]
 8018230:	683a      	ldr	r2, [r7, #0]
 8018232:	6879      	ldr	r1, [r7, #4]
 8018234:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8018238:	00db      	lsls	r3, r3, #3
 801823a:	440b      	add	r3, r1
 801823c:	cb03      	ldmia	r3!, {r0, r1}
 801823e:	6010      	str	r0, [r2, #0]
 8018240:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018248:	6a1b      	ldr	r3, [r3, #32]
 801824a:	687a      	ldr	r2, [r7, #4]
 801824c:	4413      	add	r3, r2
 801824e:	2203      	movs	r2, #3
 8018250:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018258:	6a1b      	ldr	r3, [r3, #32]
 801825a:	031b      	lsls	r3, r3, #12
 801825c:	3308      	adds	r3, #8
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	4413      	add	r3, r2
    }
 8018262:	4618      	mov	r0, r3
 8018264:	3708      	adds	r7, #8
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	08031bf8 	.word	0x08031bf8
 8018270:	08031c18 	.word	0x08031c18
 8018274:	08031aac 	.word	0x08031aac

08018278 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 8018278:	b580      	push	{r7, lr}
 801827a:	b084      	sub	sp, #16
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018286:	6a1b      	ldr	r3, [r3, #32]
 8018288:	3301      	adds	r3, #1
 801828a:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	2b03      	cmp	r3, #3
 8018290:	d101      	bne.n	8018296 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x1e>
        {
            nextSendingBlock = 0;
 8018292:	2300      	movs	r3, #0
 8018294:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 8018296:	687a      	ldr	r2, [r7, #4]
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	4413      	add	r3, r2
 801829c:	3304      	adds	r3, #4
 801829e:	781b      	ldrb	r3, [r3, #0]
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	2b02      	cmp	r3, #2
 80182a4:	d005      	beq.n	80182b2 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x3a>
 80182a6:	4b08      	ldr	r3, [pc, #32]	@ (80182c8 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 80182a8:	4a08      	ldr	r2, [pc, #32]	@ (80182cc <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 80182aa:	21ea      	movs	r1, #234	@ 0xea
 80182ac:	4808      	ldr	r0, [pc, #32]	@ (80182d0 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 80182ae:	f017 fb73 	bl	802f998 <__assert_func>
        return blockRect[nextSendingBlock];
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 80182b8:	00db      	lsls	r3, r3, #3
 80182ba:	687a      	ldr	r2, [r7, #4]
 80182bc:	4413      	add	r3, r2
    }
 80182be:	4618      	mov	r0, r3
 80182c0:	3710      	adds	r7, #16
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop
 80182c8:	08031d18 	.word	0x08031d18
 80182cc:	08031d3c 	.word	0x08031d3c
 80182d0:	08031aac 	.word	0x08031aac

080182d4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 80182d4:	b480      	push	{r7}
 80182d6:	b085      	sub	sp, #20
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80182e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182e4:	3301      	adds	r3, #1
 80182e6:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	2b03      	cmp	r3, #3
 80182ec:	d101      	bne.n	80182f2 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13hasEmptyBlockEv+0x1e>
        {
            nextDrawingBlock = 0;
 80182ee:	2300      	movs	r3, #0
 80182f0:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	4413      	add	r3, r2
 80182f8:	3304      	adds	r3, #4
 80182fa:	781b      	ldrb	r3, [r3, #0]
 80182fc:	b2db      	uxtb	r3, r3
 80182fe:	2b00      	cmp	r3, #0
 8018300:	bf0c      	ite	eq
 8018302:	2301      	moveq	r3, #1
 8018304:	2300      	movne	r3, #0
 8018306:	b2db      	uxtb	r3, r3
    }
 8018308:	4618      	mov	r0, r3
 801830a:	3714      	adds	r7, #20
 801830c:	46bd      	mov	sp, r7
 801830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018312:	4770      	bx	lr

08018314 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018322:	6a1b      	ldr	r3, [r3, #32]
 8018324:	687a      	ldr	r2, [r7, #4]
 8018326:	4413      	add	r3, r2
 8018328:	791b      	ldrb	r3, [r3, #4]
 801832a:	b2db      	uxtb	r3, r3
 801832c:	2b03      	cmp	r3, #3
 801832e:	d005      	beq.n	801833c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x28>
 8018330:	4b08      	ldr	r3, [pc, #32]	@ (8018354 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x40>)
 8018332:	4a09      	ldr	r2, [pc, #36]	@ (8018358 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8018334:	21ff      	movs	r1, #255	@ 0xff
 8018336:	4809      	ldr	r0, [pc, #36]	@ (801835c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 8018338:	f017 fb2e 	bl	802f998 <__assert_func>
        state[sendingBlock] = EMPTY;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018342:	6a1b      	ldr	r3, [r3, #32]
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	4413      	add	r3, r2
 8018348:	2200      	movs	r2, #0
 801834a:	711a      	strb	r2, [r3, #4]
    }
 801834c:	bf00      	nop
 801834e:	3708      	adds	r7, #8
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}
 8018354:	08031e1c 	.word	0x08031e1c
 8018358:	08031e3c 	.word	0x08031e3c
 801835c:	08031aac 	.word	0x08031aac

08018360 <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8018360:	b580      	push	{r7, lr}
 8018362:	af00      	add	r7, sp, #0
 8018364:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018368:	2001      	movs	r0, #1
 801836a:	f7ff fe19 	bl	8017fa0 <_Z41__static_initialization_and_destruction_0ii>
 801836e:	bd80      	pop	{r7, pc}

08018370 <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8018370:	b580      	push	{r7, lr}
 8018372:	af00      	add	r7, sp, #0
 8018374:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018378:	2000      	movs	r0, #0
 801837a:	f7ff fe11 	bl	8017fa0 <_Z41__static_initialization_and_destruction_0ii>
 801837e:	bd80      	pop	{r7, pc}

08018380 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018380:	8880      	ldrh	r0, [r0, #4]
 8018382:	4770      	bx	lr

08018384 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018384:	b570      	push	{r4, r5, r6, lr}
 8018386:	6803      	ldr	r3, [r0, #0]
 8018388:	4605      	mov	r5, r0
 801838a:	460c      	mov	r4, r1
 801838c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801838e:	2100      	movs	r1, #0
 8018390:	4798      	blx	r3
 8018392:	682b      	ldr	r3, [r5, #0]
 8018394:	4606      	mov	r6, r0
 8018396:	6a1b      	ldr	r3, [r3, #32]
 8018398:	4628      	mov	r0, r5
 801839a:	4798      	blx	r3
 801839c:	1ba4      	subs	r4, r4, r6
 801839e:	b2a4      	uxth	r4, r4
 80183a0:	fbb4 f0f0 	udiv	r0, r4, r0
 80183a4:	bd70      	pop	{r4, r5, r6, pc}

080183a6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80183a6:	2300      	movs	r3, #0
 80183a8:	8083      	strh	r3, [r0, #4]
 80183aa:	4770      	bx	lr

080183ac <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80183ac:	b510      	push	{r4, lr}
 80183ae:	4604      	mov	r4, r0
 80183b0:	6803      	ldr	r3, [r0, #0]
 80183b2:	8881      	ldrh	r1, [r0, #4]
 80183b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183b6:	4798      	blx	r3
 80183b8:	88a3      	ldrh	r3, [r4, #4]
 80183ba:	3301      	adds	r3, #1
 80183bc:	80a3      	strh	r3, [r4, #4]
 80183be:	bd10      	pop	{r4, pc}

080183c0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80183c0:	6803      	ldr	r3, [r0, #0]
 80183c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183c4:	4718      	bx	r3

080183c6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80183c6:	4770      	bx	lr

080183c8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80183c8:	4a02      	ldr	r2, [pc, #8]	@ (80183d4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80183ca:	6002      	str	r2, [r0, #0]
 80183cc:	2200      	movs	r2, #0
 80183ce:	8082      	strh	r2, [r0, #4]
 80183d0:	4770      	bx	lr
 80183d2:	bf00      	nop
 80183d4:	08032c90 	.word	0x08032c90

080183d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80183d8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80183da:	2000      	movs	r0, #0
 80183dc:	b12b      	cbz	r3, 80183ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80183de:	b920      	cbnz	r0, 80183ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80183e0:	1a5a      	subs	r2, r3, r1
 80183e2:	4250      	negs	r0, r2
 80183e4:	4150      	adcs	r0, r2
 80183e6:	699b      	ldr	r3, [r3, #24]
 80183e8:	e7f8      	b.n	80183dc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80183ea:	4770      	bx	lr

080183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80183ec:	2300      	movs	r3, #0
 80183ee:	6148      	str	r0, [r1, #20]
 80183f0:	618b      	str	r3, [r1, #24]
 80183f2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80183f4:	b913      	cbnz	r3, 80183fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80183f6:	6281      	str	r1, [r0, #40]	@ 0x28
 80183f8:	4770      	bx	lr
 80183fa:	4613      	mov	r3, r2
 80183fc:	699a      	ldr	r2, [r3, #24]
 80183fe:	2a00      	cmp	r2, #0
 8018400:	d1fb      	bne.n	80183fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8018402:	6199      	str	r1, [r3, #24]
 8018404:	4770      	bx	lr

08018406 <_ZN8touchgfx9Container9removeAllEv>:
 8018406:	2200      	movs	r2, #0
 8018408:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801840a:	b123      	cbz	r3, 8018416 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801840c:	6999      	ldr	r1, [r3, #24]
 801840e:	6281      	str	r1, [r0, #40]	@ 0x28
 8018410:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018414:	e7f8      	b.n	8018408 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018416:	4770      	bx	lr

08018418 <_ZN8touchgfx9Container6unlinkEv>:
 8018418:	2300      	movs	r3, #0
 801841a:	6283      	str	r3, [r0, #40]	@ 0x28
 801841c:	4770      	bx	lr

0801841e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801841e:	2200      	movs	r2, #0
 8018420:	8002      	strh	r2, [r0, #0]
 8018422:	8042      	strh	r2, [r0, #2]
 8018424:	8082      	strh	r2, [r0, #4]
 8018426:	80c2      	strh	r2, [r0, #6]
 8018428:	4770      	bx	lr

0801842a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801842a:	b570      	push	{r4, r5, r6, lr}
 801842c:	460d      	mov	r5, r1
 801842e:	4616      	mov	r6, r2
 8018430:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8018432:	b13c      	cbz	r4, 8018444 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018434:	6823      	ldr	r3, [r4, #0]
 8018436:	4620      	mov	r0, r4
 8018438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801843a:	4632      	mov	r2, r6
 801843c:	4629      	mov	r1, r5
 801843e:	4798      	blx	r3
 8018440:	69a4      	ldr	r4, [r4, #24]
 8018442:	e7f6      	b.n	8018432 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018444:	bd70      	pop	{r4, r5, r6, pc}

08018446 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018446:	b538      	push	{r3, r4, r5, lr}
 8018448:	460d      	mov	r5, r1
 801844a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801844c:	b134      	cbz	r4, 801845c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801844e:	682b      	ldr	r3, [r5, #0]
 8018450:	4621      	mov	r1, r4
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	4628      	mov	r0, r5
 8018456:	4798      	blx	r3
 8018458:	69a4      	ldr	r4, [r4, #24]
 801845a:	e7f7      	b.n	801844c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801845c:	bd38      	pop	{r3, r4, r5, pc}

0801845e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801845e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8018460:	b19b      	cbz	r3, 801848a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018462:	428b      	cmp	r3, r1
 8018464:	d109      	bne.n	801847a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8018466:	2100      	movs	r1, #0
 8018468:	699a      	ldr	r2, [r3, #24]
 801846a:	6159      	str	r1, [r3, #20]
 801846c:	6282      	str	r2, [r0, #40]	@ 0x28
 801846e:	b902      	cbnz	r2, 8018472 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018470:	4770      	bx	lr
 8018472:	6199      	str	r1, [r3, #24]
 8018474:	4770      	bx	lr
 8018476:	4613      	mov	r3, r2
 8018478:	b13a      	cbz	r2, 801848a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801847a:	699a      	ldr	r2, [r3, #24]
 801847c:	428a      	cmp	r2, r1
 801847e:	d1fa      	bne.n	8018476 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018480:	698a      	ldr	r2, [r1, #24]
 8018482:	619a      	str	r2, [r3, #24]
 8018484:	2300      	movs	r3, #0
 8018486:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801848a:	4770      	bx	lr

0801848c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801848c:	b410      	push	{r4}
 801848e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8018490:	4604      	mov	r4, r0
 8018492:	b92b      	cbnz	r3, 80184a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8018494:	6803      	ldr	r3, [r0, #0]
 8018496:	4611      	mov	r1, r2
 8018498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801849a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801849e:	4718      	bx	r3
 80184a0:	b941      	cbnz	r1, 80184b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80184a2:	6193      	str	r3, [r2, #24]
 80184a4:	6282      	str	r2, [r0, #40]	@ 0x28
 80184a6:	6154      	str	r4, [r2, #20]
 80184a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184ac:	4770      	bx	lr
 80184ae:	4603      	mov	r3, r0
 80184b0:	2800      	cmp	r0, #0
 80184b2:	d0f9      	beq.n	80184a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80184b4:	4299      	cmp	r1, r3
 80184b6:	6998      	ldr	r0, [r3, #24]
 80184b8:	d1f9      	bne.n	80184ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80184ba:	6190      	str	r0, [r2, #24]
 80184bc:	618a      	str	r2, [r1, #24]
 80184be:	e7f2      	b.n	80184a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080184c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80184c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184c4:	461f      	mov	r7, r3
 80184c6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80184ca:	460d      	mov	r5, r1
 80184cc:	4616      	mov	r6, r2
 80184ce:	b103      	cbz	r3, 80184d2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80184d0:	6038      	str	r0, [r7, #0]
 80184d2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80184d4:	b314      	cbz	r4, 801851c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80184d6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80184da:	b1eb      	cbz	r3, 8018518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80184dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80184e0:	428d      	cmp	r5, r1
 80184e2:	db19      	blt.n	8018518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80184e4:	8923      	ldrh	r3, [r4, #8]
 80184e6:	b289      	uxth	r1, r1
 80184e8:	440b      	add	r3, r1
 80184ea:	b21b      	sxth	r3, r3
 80184ec:	429d      	cmp	r5, r3
 80184ee:	da13      	bge.n	8018518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80184f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80184f4:	4296      	cmp	r6, r2
 80184f6:	db0f      	blt.n	8018518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80184f8:	8963      	ldrh	r3, [r4, #10]
 80184fa:	b292      	uxth	r2, r2
 80184fc:	4413      	add	r3, r2
 80184fe:	b21b      	sxth	r3, r3
 8018500:	429e      	cmp	r6, r3
 8018502:	da09      	bge.n	8018518 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018504:	6823      	ldr	r3, [r4, #0]
 8018506:	1ab2      	subs	r2, r6, r2
 8018508:	1a69      	subs	r1, r5, r1
 801850a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 801850e:	b212      	sxth	r2, r2
 8018510:	463b      	mov	r3, r7
 8018512:	b209      	sxth	r1, r1
 8018514:	4620      	mov	r0, r4
 8018516:	47c0      	blx	r8
 8018518:	69a4      	ldr	r4, [r4, #24]
 801851a:	e7db      	b.n	80184d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018520 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8018520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018524:	4c6c      	ldr	r4, [pc, #432]	@ (80186d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8018526:	b0a1      	sub	sp, #132	@ 0x84
 8018528:	6824      	ldr	r4, [r4, #0]
 801852a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801852c:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8018530:	2400      	movs	r4, #0
 8018532:	802c      	strh	r4, [r5, #0]
 8018534:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8018536:	4606      	mov	r6, r0
 8018538:	802c      	strh	r4, [r5, #0]
 801853a:	601c      	str	r4, [r3, #0]
 801853c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8018540:	9303      	str	r3, [sp, #12]
 8018542:	f7ff ffbd 	bl	80184c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018546:	f1b9 0f03 	cmp.w	r9, #3
 801854a:	f340 80bf 	ble.w	80186cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 801854e:	4631      	mov	r1, r6
 8018550:	a80c      	add	r0, sp, #48	@ 0x30
 8018552:	f006 fc15 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018556:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801855a:	9306      	str	r3, [sp, #24]
 801855c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8018560:	9307      	str	r3, [sp, #28]
 8018562:	9b03      	ldr	r3, [sp, #12]
 8018564:	f8d3 a000 	ldr.w	sl, [r3]
 8018568:	f1ba 0f00 	cmp.w	sl, #0
 801856c:	f000 80b1 	beq.w	80186d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8018570:	4651      	mov	r1, sl
 8018572:	a810      	add	r0, sp, #64	@ 0x40
 8018574:	f006 fc04 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018578:	2002      	movs	r0, #2
 801857a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 801857e:	9b01      	ldr	r3, [sp, #4]
 8018580:	fb91 f1f0 	sdiv	r1, r1, r0
 8018584:	9a06      	ldr	r2, [sp, #24]
 8018586:	189d      	adds	r5, r3, r2
 8018588:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 801858c:	9a07      	ldr	r2, [sp, #28]
 801858e:	4419      	add	r1, r3
 8018590:	9b02      	ldr	r3, [sp, #8]
 8018592:	1a6d      	subs	r5, r5, r1
 8018594:	4413      	add	r3, r2
 8018596:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801859a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801859e:	fb92 f2f0 	sdiv	r2, r2, r0
 80185a2:	440a      	add	r2, r1
 80185a4:	1a9b      	subs	r3, r3, r2
 80185a6:	435b      	muls	r3, r3
 80185a8:	fb05 3505 	mla	r5, r5, r5, r3
 80185ac:	4f4b      	ldr	r7, [pc, #300]	@ (80186dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80185ae:	ac10      	add	r4, sp, #64	@ 0x40
 80185b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80185b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80185b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80185ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185bc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80185c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80185c4:	2303      	movs	r3, #3
 80185c6:	f1b9 0f0c 	cmp.w	r9, #12
 80185ca:	bfda      	itte	le
 80185cc:	f109 32ff 	addle.w	r2, r9, #4294967295
 80185d0:	fb92 f8f3 	sdivle	r8, r2, r3
 80185d4:	4698      	movgt	r8, r3
 80185d6:	2400      	movs	r4, #0
 80185d8:	f8cd 9000 	str.w	r9, [sp]
 80185dc:	1c63      	adds	r3, r4, #1
 80185de:	9308      	str	r3, [sp, #32]
 80185e0:	9b00      	ldr	r3, [sp, #0]
 80185e2:	f04f 0b00 	mov.w	fp, #0
 80185e6:	fb93 f3f8 	sdiv	r3, r3, r8
 80185ea:	f004 0401 	and.w	r4, r4, #1
 80185ee:	aa10      	add	r2, sp, #64	@ 0x40
 80185f0:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80185f4:	b29b      	uxth	r3, r3
 80185f6:	3404      	adds	r4, #4
 80185f8:	9304      	str	r3, [sp, #16]
 80185fa:	9a04      	ldr	r2, [sp, #16]
 80185fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018600:	fb13 f302 	smulbb	r3, r3, r2
 8018604:	9a01      	ldr	r2, [sp, #4]
 8018606:	b29b      	uxth	r3, r3
 8018608:	1899      	adds	r1, r3, r2
 801860a:	9305      	str	r3, [sp, #20]
 801860c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018610:	b209      	sxth	r1, r1
 8018612:	4299      	cmp	r1, r3
 8018614:	db4d      	blt.n	80186b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8018616:	8932      	ldrh	r2, [r6, #8]
 8018618:	4413      	add	r3, r2
 801861a:	b21b      	sxth	r3, r3
 801861c:	4299      	cmp	r1, r3
 801861e:	da48      	bge.n	80186b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8018620:	9b04      	ldr	r3, [sp, #16]
 8018622:	6827      	ldr	r7, [r4, #0]
 8018624:	fb17 f703 	smulbb	r7, r7, r3
 8018628:	9b02      	ldr	r3, [sp, #8]
 801862a:	b2bf      	uxth	r7, r7
 801862c:	18fa      	adds	r2, r7, r3
 801862e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018632:	b212      	sxth	r2, r2
 8018634:	429a      	cmp	r2, r3
 8018636:	db3c      	blt.n	80186b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8018638:	8970      	ldrh	r0, [r6, #10]
 801863a:	4403      	add	r3, r0
 801863c:	b21b      	sxth	r3, r3
 801863e:	429a      	cmp	r2, r3
 8018640:	da37      	bge.n	80186b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8018642:	2300      	movs	r3, #0
 8018644:	4630      	mov	r0, r6
 8018646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018648:	ab0b      	add	r3, sp, #44	@ 0x2c
 801864a:	f7ff ff39 	bl	80184c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801864e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018650:	b37a      	cbz	r2, 80186b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8018652:	4552      	cmp	r2, sl
 8018654:	d02d      	beq.n	80186b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8018656:	4611      	mov	r1, r2
 8018658:	a80e      	add	r0, sp, #56	@ 0x38
 801865a:	9209      	str	r2, [sp, #36]	@ 0x24
 801865c:	f006 fb90 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018660:	f04f 0e02 	mov.w	lr, #2
 8018664:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8018668:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801866c:	fb91 f1fe 	sdiv	r1, r1, lr
 8018670:	fb9c fcfe 	sdiv	ip, ip, lr
 8018674:	9a06      	ldr	r2, [sp, #24]
 8018676:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801867a:	9b01      	ldr	r3, [sp, #4]
 801867c:	4401      	add	r1, r0
 801867e:	4413      	add	r3, r2
 8018680:	1a58      	subs	r0, r3, r1
 8018682:	9a07      	ldr	r2, [sp, #28]
 8018684:	9b02      	ldr	r3, [sp, #8]
 8018686:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801868a:	4413      	add	r3, r2
 801868c:	448c      	add	ip, r1
 801868e:	eba3 030c 	sub.w	r3, r3, ip
 8018692:	435b      	muls	r3, r3
 8018694:	fb00 3300 	mla	r3, r0, r0, r3
 8018698:	42ab      	cmp	r3, r5
 801869a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801869c:	d208      	bcs.n	80186b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 801869e:	461d      	mov	r5, r3
 80186a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80186a2:	9803      	ldr	r0, [sp, #12]
 80186a4:	6001      	str	r1, [r0, #0]
 80186a6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80186a8:	9805      	ldr	r0, [sp, #20]
 80186aa:	8008      	strh	r0, [r1, #0]
 80186ac:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80186ae:	800f      	strh	r7, [r1, #0]
 80186b0:	4692      	mov	sl, r2
 80186b2:	f10b 0b01 	add.w	fp, fp, #1
 80186b6:	f1bb 0f04 	cmp.w	fp, #4
 80186ba:	f104 0408 	add.w	r4, r4, #8
 80186be:	d19c      	bne.n	80185fa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 80186c0:	9b00      	ldr	r3, [sp, #0]
 80186c2:	9c08      	ldr	r4, [sp, #32]
 80186c4:	444b      	add	r3, r9
 80186c6:	4544      	cmp	r4, r8
 80186c8:	9300      	str	r3, [sp, #0]
 80186ca:	d187      	bne.n	80185dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 80186cc:	b021      	add	sp, #132	@ 0x84
 80186ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186d2:	f04f 35ff 	mov.w	r5, #4294967295
 80186d6:	e769      	b.n	80185ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80186d8:	20011ffc 	.word	0x20011ffc
 80186dc:	08031f0c 	.word	0x08031f0c

080186e0 <_ZN8touchgfx4RectaNERKS0_>:
 80186e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186e4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80186e8:	888c      	ldrh	r4, [r1, #4]
 80186ea:	f9b0 9000 	ldrsh.w	r9, [r0]
 80186ee:	443c      	add	r4, r7
 80186f0:	b2a4      	uxth	r4, r4
 80186f2:	fa0f f884 	sxth.w	r8, r4
 80186f6:	45c1      	cmp	r9, r8
 80186f8:	da2f      	bge.n	801875a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80186fa:	8882      	ldrh	r2, [r0, #4]
 80186fc:	444a      	add	r2, r9
 80186fe:	b292      	uxth	r2, r2
 8018700:	fa0f fe82 	sxth.w	lr, r2
 8018704:	4577      	cmp	r7, lr
 8018706:	da28      	bge.n	801875a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018708:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801870c:	88cb      	ldrh	r3, [r1, #6]
 801870e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018712:	442b      	add	r3, r5
 8018714:	b21b      	sxth	r3, r3
 8018716:	429e      	cmp	r6, r3
 8018718:	da1f      	bge.n	801875a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801871a:	88c3      	ldrh	r3, [r0, #6]
 801871c:	4433      	add	r3, r6
 801871e:	b29b      	uxth	r3, r3
 8018720:	fa0f fc83 	sxth.w	ip, r3
 8018724:	4565      	cmp	r5, ip
 8018726:	da18      	bge.n	801875a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018728:	454f      	cmp	r7, r9
 801872a:	bfb8      	it	lt
 801872c:	464f      	movlt	r7, r9
 801872e:	42b5      	cmp	r5, r6
 8018730:	bfb8      	it	lt
 8018732:	4635      	movlt	r5, r6
 8018734:	45f0      	cmp	r8, lr
 8018736:	bfd8      	it	le
 8018738:	4622      	movle	r2, r4
 801873a:	1bd2      	subs	r2, r2, r7
 801873c:	8082      	strh	r2, [r0, #4]
 801873e:	884a      	ldrh	r2, [r1, #2]
 8018740:	88c9      	ldrh	r1, [r1, #6]
 8018742:	8007      	strh	r7, [r0, #0]
 8018744:	440a      	add	r2, r1
 8018746:	b292      	uxth	r2, r2
 8018748:	b211      	sxth	r1, r2
 801874a:	458c      	cmp	ip, r1
 801874c:	bfa8      	it	ge
 801874e:	4613      	movge	r3, r2
 8018750:	1b5b      	subs	r3, r3, r5
 8018752:	80c3      	strh	r3, [r0, #6]
 8018754:	8045      	strh	r5, [r0, #2]
 8018756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801875a:	2300      	movs	r3, #0
 801875c:	8003      	strh	r3, [r0, #0]
 801875e:	8043      	strh	r3, [r0, #2]
 8018760:	8083      	strh	r3, [r0, #4]
 8018762:	80c3      	strh	r3, [r0, #6]
 8018764:	e7f7      	b.n	8018756 <_ZN8touchgfx4RectaNERKS0_+0x76>

08018766 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8018766:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801876a:	2b00      	cmp	r3, #0
 801876c:	dd06      	ble.n	801877c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801876e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018772:	2800      	cmp	r0, #0
 8018774:	bfcc      	ite	gt
 8018776:	2000      	movgt	r0, #0
 8018778:	2001      	movle	r0, #1
 801877a:	4770      	bx	lr
 801877c:	2001      	movs	r0, #1
 801877e:	4770      	bx	lr

08018780 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018780:	2300      	movs	r3, #0
 8018782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018786:	4604      	mov	r4, r0
 8018788:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801878a:	8003      	strh	r3, [r0, #0]
 801878c:	8043      	strh	r3, [r0, #2]
 801878e:	8083      	strh	r3, [r0, #4]
 8018790:	80c3      	strh	r3, [r0, #6]
 8018792:	2d00      	cmp	r5, #0
 8018794:	d040      	beq.n	8018818 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8018796:	1d28      	adds	r0, r5, #4
 8018798:	f7ff ffe5 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801879c:	b988      	cbnz	r0, 80187c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801879e:	4620      	mov	r0, r4
 80187a0:	f7ff ffe1 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187a4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80187a8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80187ac:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80187b0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80187b4:	b138      	cbz	r0, 80187c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80187b6:	8022      	strh	r2, [r4, #0]
 80187b8:	8063      	strh	r3, [r4, #2]
 80187ba:	f8a4 e004 	strh.w	lr, [r4, #4]
 80187be:	f8a4 c006 	strh.w	ip, [r4, #6]
 80187c2:	69ad      	ldr	r5, [r5, #24]
 80187c4:	e7e5      	b.n	8018792 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80187c6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80187ca:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80187ce:	4290      	cmp	r0, r2
 80187d0:	4607      	mov	r7, r0
 80187d2:	bfa8      	it	ge
 80187d4:	4617      	movge	r7, r2
 80187d6:	4299      	cmp	r1, r3
 80187d8:	460e      	mov	r6, r1
 80187da:	bfa8      	it	ge
 80187dc:	461e      	movge	r6, r3
 80187de:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80187e2:	4472      	add	r2, lr
 80187e4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80187e8:	4440      	add	r0, r8
 80187ea:	4471      	add	r1, lr
 80187ec:	4463      	add	r3, ip
 80187ee:	b200      	sxth	r0, r0
 80187f0:	b212      	sxth	r2, r2
 80187f2:	b209      	sxth	r1, r1
 80187f4:	b21b      	sxth	r3, r3
 80187f6:	4290      	cmp	r0, r2
 80187f8:	bfac      	ite	ge
 80187fa:	ebc7 0200 	rsbge	r2, r7, r0
 80187fe:	ebc7 0202 	rsblt	r2, r7, r2
 8018802:	4299      	cmp	r1, r3
 8018804:	bfac      	ite	ge
 8018806:	ebc6 0301 	rsbge	r3, r6, r1
 801880a:	ebc6 0303 	rsblt	r3, r6, r3
 801880e:	8027      	strh	r7, [r4, #0]
 8018810:	8066      	strh	r6, [r4, #2]
 8018812:	80a2      	strh	r2, [r4, #4]
 8018814:	80e3      	strh	r3, [r4, #6]
 8018816:	e7d4      	b.n	80187c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018818:	4620      	mov	r0, r4
 801881a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801881e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801881e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018822:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8018826:	b383      	cbz	r3, 801888a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018828:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801882a:	b374      	cbz	r4, 801888a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801882c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018830:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8018834:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018838:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801883c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8018840:	b303      	cbz	r3, 8018884 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018842:	4668      	mov	r0, sp
 8018844:	1d21      	adds	r1, r4, #4
 8018846:	f8ad 5000 	strh.w	r5, [sp]
 801884a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801884e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018852:	f8ad 8006 	strh.w	r8, [sp, #6]
 8018856:	f7ff ff43 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801885a:	4668      	mov	r0, sp
 801885c:	f7ff ff83 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018860:	b980      	cbnz	r0, 8018884 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018862:	f8bd 3000 	ldrh.w	r3, [sp]
 8018866:	88a2      	ldrh	r2, [r4, #4]
 8018868:	4669      	mov	r1, sp
 801886a:	1a9b      	subs	r3, r3, r2
 801886c:	f8ad 3000 	strh.w	r3, [sp]
 8018870:	88e2      	ldrh	r2, [r4, #6]
 8018872:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018876:	4620      	mov	r0, r4
 8018878:	1a9b      	subs	r3, r3, r2
 801887a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	689b      	ldr	r3, [r3, #8]
 8018882:	4798      	blx	r3
 8018884:	69a4      	ldr	r4, [r4, #24]
 8018886:	2c00      	cmp	r4, #0
 8018888:	d1d8      	bne.n	801883c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801888a:	b002      	add	sp, #8
 801888c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018890 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018890:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018892:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8018896:	460d      	mov	r5, r1
 8018898:	4616      	mov	r6, r2
 801889a:	b323      	cbz	r3, 80188e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801889c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801889e:	b314      	cbz	r4, 80188e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80188a0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80188a4:	b1eb      	cbz	r3, 80188e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80188a6:	466b      	mov	r3, sp
 80188a8:	6828      	ldr	r0, [r5, #0]
 80188aa:	6869      	ldr	r1, [r5, #4]
 80188ac:	c303      	stmia	r3!, {r0, r1}
 80188ae:	4668      	mov	r0, sp
 80188b0:	1d21      	adds	r1, r4, #4
 80188b2:	f7ff ff15 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 80188b6:	4668      	mov	r0, sp
 80188b8:	f7ff ff55 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 80188bc:	b988      	cbnz	r0, 80188e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80188be:	f8bd 3000 	ldrh.w	r3, [sp]
 80188c2:	88a2      	ldrh	r2, [r4, #4]
 80188c4:	4669      	mov	r1, sp
 80188c6:	1a9b      	subs	r3, r3, r2
 80188c8:	f8ad 3000 	strh.w	r3, [sp]
 80188cc:	88e2      	ldrh	r2, [r4, #6]
 80188ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80188d2:	4620      	mov	r0, r4
 80188d4:	1a9b      	subs	r3, r3, r2
 80188d6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80188da:	6823      	ldr	r3, [r4, #0]
 80188dc:	4632      	mov	r2, r6
 80188de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80188e0:	4798      	blx	r3
 80188e2:	69a4      	ldr	r4, [r4, #24]
 80188e4:	e7db      	b.n	801889e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80188e6:	b002      	add	sp, #8
 80188e8:	bd70      	pop	{r4, r5, r6, pc}

080188ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80188ea:	b513      	push	{r0, r1, r4, lr}
 80188ec:	6803      	ldr	r3, [r0, #0]
 80188ee:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80188f2:	2300      	movs	r3, #0
 80188f4:	e9cd 3300 	strd	r3, r3, [sp]
 80188f8:	466b      	mov	r3, sp
 80188fa:	47a0      	blx	r4
 80188fc:	b002      	add	sp, #8
 80188fe:	bd10      	pop	{r4, pc}

08018900 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018900:	2301      	movs	r3, #1
 8018902:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018906:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801890a:	4770      	bx	lr

0801890c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801890c:	2301      	movs	r3, #1
 801890e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018912:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8018916:	4770      	bx	lr

08018918 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018918:	2201      	movs	r2, #1
 801891a:	6843      	ldr	r3, [r0, #4]
 801891c:	725a      	strb	r2, [r3, #9]
 801891e:	6840      	ldr	r0, [r0, #4]
 8018920:	6803      	ldr	r3, [r0, #0]
 8018922:	691b      	ldr	r3, [r3, #16]
 8018924:	4718      	bx	r3

08018926 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018926:	6840      	ldr	r0, [r0, #4]
 8018928:	6803      	ldr	r3, [r0, #0]
 801892a:	689b      	ldr	r3, [r3, #8]
 801892c:	4718      	bx	r3

0801892e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801892e:	b530      	push	{r4, r5, lr}
 8018930:	b08b      	sub	sp, #44	@ 0x2c
 8018932:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8018936:	6804      	ldr	r4, [r0, #0]
 8018938:	9509      	str	r5, [sp, #36]	@ 0x24
 801893a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801893e:	9508      	str	r5, [sp, #32]
 8018940:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8018944:	9507      	str	r5, [sp, #28]
 8018946:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 801894a:	9506      	str	r5, [sp, #24]
 801894c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8018950:	9505      	str	r5, [sp, #20]
 8018952:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8018956:	9504      	str	r5, [sp, #16]
 8018958:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801895c:	9503      	str	r5, [sp, #12]
 801895e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8018962:	9502      	str	r5, [sp, #8]
 8018964:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8018968:	e9cd 3500 	strd	r3, r5, [sp]
 801896c:	4613      	mov	r3, r2
 801896e:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8018970:	2200      	movs	r2, #0
 8018972:	47a0      	blx	r4
 8018974:	b00b      	add	sp, #44	@ 0x2c
 8018976:	bd30      	pop	{r4, r5, pc}

08018978 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018978:	4b04      	ldr	r3, [pc, #16]	@ (801898c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801897a:	781b      	ldrb	r3, [r3, #0]
 801897c:	b123      	cbz	r3, 8018988 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801897e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8018982:	f080 0001 	eor.w	r0, r0, #1
 8018986:	4770      	bx	lr
 8018988:	2001      	movs	r0, #1
 801898a:	4770      	bx	lr
 801898c:	20011ffa 	.word	0x20011ffa

08018990 <_ZN8touchgfx3HAL8endFrameEv>:
 8018990:	b510      	push	{r4, lr}
 8018992:	4604      	mov	r4, r0
 8018994:	6840      	ldr	r0, [r0, #4]
 8018996:	6803      	ldr	r3, [r0, #0]
 8018998:	689b      	ldr	r3, [r3, #8]
 801899a:	4798      	blx	r3
 801899c:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80189a0:	b113      	cbz	r3, 80189a8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80189a2:	2301      	movs	r3, #1
 80189a4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80189a8:	bd10      	pop	{r4, pc}

080189aa <_ZN8touchgfx3HAL10initializeEv>:
 80189aa:	b510      	push	{r4, lr}
 80189ac:	4604      	mov	r4, r0
 80189ae:	f7fd ffb5 	bl	801691c <_ZN8touchgfx10OSWrappers10initializeEv>
 80189b2:	f7fd fcfb 	bl	80163ac <_ZN8touchgfx4GPIO4initEv>
 80189b6:	6860      	ldr	r0, [r4, #4]
 80189b8:	6803      	ldr	r3, [r0, #0]
 80189ba:	68db      	ldr	r3, [r3, #12]
 80189bc:	4798      	blx	r3
 80189be:	68e0      	ldr	r0, [r4, #12]
 80189c0:	6803      	ldr	r3, [r0, #0]
 80189c2:	689b      	ldr	r3, [r3, #8]
 80189c4:	4798      	blx	r3
 80189c6:	6823      	ldr	r3, [r4, #0]
 80189c8:	4620      	mov	r0, r4
 80189ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80189d0:	4718      	bx	r3

080189d2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80189d2:	4604      	mov	r4, r0
 80189d4:	b508      	push	{r3, lr}
 80189d6:	6803      	ldr	r3, [r0, #0]
 80189d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80189dc:	4798      	blx	r3
 80189de:	6823      	ldr	r3, [r4, #0]
 80189e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80189e2:	4620      	mov	r0, r4
 80189e4:	4798      	blx	r3
 80189e6:	f7fe f80f 	bl	8016a08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80189ea:	6823      	ldr	r3, [r4, #0]
 80189ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80189ee:	e7f8      	b.n	80189e2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080189f0 <_ZN8touchgfx3HAL4tickEv>:
 80189f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80189f2:	6803      	ldr	r3, [r0, #0]
 80189f4:	4604      	mov	r4, r0
 80189f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80189fa:	4798      	blx	r3
 80189fc:	4d59      	ldr	r5, [pc, #356]	@ (8018b64 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80189fe:	2800      	cmp	r0, #0
 8018a00:	f000 8095 	beq.w	8018b2e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8018a04:	2600      	movs	r6, #0
 8018a06:	2001      	movs	r0, #1
 8018a08:	f7fd fcd8 	bl	80163bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018a0c:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8018a10:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8018a14:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018a18:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8018a1c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8018a20:	b133      	cbz	r3, 8018a30 <_ZN8touchgfx3HAL4tickEv+0x40>
 8018a22:	6823      	ldr	r3, [r4, #0]
 8018a24:	4620      	mov	r0, r4
 8018a26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8018a2a:	4798      	blx	r3
 8018a2c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8018a30:	2601      	movs	r6, #1
 8018a32:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8018a36:	6862      	ldr	r2, [r4, #4]
 8018a38:	f083 0301 	eor.w	r3, r3, #1
 8018a3c:	7253      	strb	r3, [r2, #9]
 8018a3e:	702e      	strb	r6, [r5, #0]
 8018a40:	f005 f88c 	bl	801db5c <_ZN8touchgfx11Application11getInstanceEv>
 8018a44:	6803      	ldr	r3, [r0, #0]
 8018a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a48:	4798      	blx	r3
 8018a4a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8018a4e:	b90b      	cbnz	r3, 8018a54 <_ZN8touchgfx3HAL4tickEv+0x64>
 8018a50:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8018a54:	f005 f882 	bl	801db5c <_ZN8touchgfx11Application11getInstanceEv>
 8018a58:	6803      	ldr	r3, [r0, #0]
 8018a5a:	695b      	ldr	r3, [r3, #20]
 8018a5c:	4798      	blx	r3
 8018a5e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018a60:	6803      	ldr	r3, [r0, #0]
 8018a62:	691b      	ldr	r3, [r3, #16]
 8018a64:	4798      	blx	r3
 8018a66:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8018a6a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8018a6e:	3b01      	subs	r3, #1
 8018a70:	b2db      	uxtb	r3, r3
 8018a72:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018a76:	b10a      	cbz	r2, 8018a7c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d1eb      	bne.n	8018a54 <_ZN8touchgfx3HAL4tickEv+0x64>
 8018a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8018b68 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018a7e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8018a82:	7813      	ldrb	r3, [r2, #0]
 8018a84:	3301      	adds	r3, #1
 8018a86:	b25b      	sxtb	r3, r3
 8018a88:	4299      	cmp	r1, r3
 8018a8a:	7013      	strb	r3, [r2, #0]
 8018a8c:	dc10      	bgt.n	8018ab0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8018a8e:	2300      	movs	r3, #0
 8018a90:	68e0      	ldr	r0, [r4, #12]
 8018a92:	7013      	strb	r3, [r2, #0]
 8018a94:	6803      	ldr	r3, [r0, #0]
 8018a96:	aa03      	add	r2, sp, #12
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	a902      	add	r1, sp, #8
 8018a9c:	4798      	blx	r3
 8018a9e:	6823      	ldr	r3, [r4, #0]
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d050      	beq.n	8018b46 <_ZN8touchgfx3HAL4tickEv+0x156>
 8018aa4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018aa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018aac:	4620      	mov	r0, r4
 8018aae:	4798      	blx	r3
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	6960      	ldr	r0, [r4, #20]
 8018ab4:	f88d 3007 	strb.w	r3, [sp, #7]
 8018ab8:	b158      	cbz	r0, 8018ad2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8018aba:	6803      	ldr	r3, [r0, #0]
 8018abc:	f10d 0107 	add.w	r1, sp, #7
 8018ac0:	68db      	ldr	r3, [r3, #12]
 8018ac2:	4798      	blx	r3
 8018ac4:	b128      	cbz	r0, 8018ad2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8018ac6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ac8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018acc:	6803      	ldr	r3, [r0, #0]
 8018ace:	68db      	ldr	r3, [r3, #12]
 8018ad0:	4798      	blx	r3
 8018ad2:	f104 001c 	add.w	r0, r4, #28
 8018ad6:	f016 fb89 	bl	802f1ec <_ZN8touchgfx8Gestures4tickEv>
 8018ada:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8018ade:	b30b      	cbz	r3, 8018b24 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018ae0:	6920      	ldr	r0, [r4, #16]
 8018ae2:	6803      	ldr	r3, [r0, #0]
 8018ae4:	691b      	ldr	r3, [r3, #16]
 8018ae6:	4798      	blx	r3
 8018ae8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8018aea:	4606      	mov	r6, r0
 8018aec:	b903      	cbnz	r3, 8018af0 <_ZN8touchgfx3HAL4tickEv+0x100>
 8018aee:	6760      	str	r0, [r4, #116]	@ 0x74
 8018af0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8018af2:	4a1e      	ldr	r2, [pc, #120]	@ (8018b6c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018af4:	1af3      	subs	r3, r6, r3
 8018af6:	4293      	cmp	r3, r2
 8018af8:	d914      	bls.n	8018b24 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018afa:	6920      	ldr	r0, [r4, #16]
 8018afc:	6803      	ldr	r3, [r0, #0]
 8018afe:	699b      	ldr	r3, [r3, #24]
 8018b00:	4798      	blx	r3
 8018b02:	2264      	movs	r2, #100	@ 0x64
 8018b04:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8018b06:	1af3      	subs	r3, r6, r3
 8018b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8018b10:	2800      	cmp	r0, #0
 8018b12:	dc1d      	bgt.n	8018b50 <_ZN8touchgfx3HAL4tickEv+0x160>
 8018b14:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8018b18:	6920      	ldr	r0, [r4, #16]
 8018b1a:	2100      	movs	r1, #0
 8018b1c:	6803      	ldr	r3, [r0, #0]
 8018b1e:	69db      	ldr	r3, [r3, #28]
 8018b20:	4798      	blx	r3
 8018b22:	6766      	str	r6, [r4, #116]	@ 0x74
 8018b24:	f005 f81a 	bl	801db5c <_ZN8touchgfx11Application11getInstanceEv>
 8018b28:	6803      	ldr	r3, [r0, #0]
 8018b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018b2c:	4798      	blx	r3
 8018b2e:	6823      	ldr	r3, [r4, #0]
 8018b30:	4620      	mov	r0, r4
 8018b32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b36:	4798      	blx	r3
 8018b38:	2001      	movs	r0, #1
 8018b3a:	f7fd fc5b 	bl	80163f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018b3e:	2300      	movs	r3, #0
 8018b40:	702b      	strb	r3, [r5, #0]
 8018b42:	b004      	add	sp, #16
 8018b44:	bd70      	pop	{r4, r5, r6, pc}
 8018b46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	4798      	blx	r3
 8018b4e:	e7af      	b.n	8018ab0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8018b50:	2863      	cmp	r0, #99	@ 0x63
 8018b52:	bfcb      	itete	gt
 8018b54:	2300      	movgt	r3, #0
 8018b56:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8018b5a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8018b5e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8018b62:	e7d9      	b.n	8018b18 <_ZN8touchgfx3HAL4tickEv+0x128>
 8018b64:	20012000 	.word	0x20012000
 8018b68:	20012001 	.word	0x20012001
 8018b6c:	05f5e100 	.word	0x05f5e100

08018b70 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018b70:	b510      	push	{r4, lr}
 8018b72:	4604      	mov	r4, r0
 8018b74:	f7fd ff14 	bl	80169a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8018b78:	2200      	movs	r2, #0
 8018b7a:	6863      	ldr	r3, [r4, #4]
 8018b7c:	729a      	strb	r2, [r3, #10]
 8018b7e:	bd10      	pop	{r4, pc}

08018b80 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018b80:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8018b82:	301c      	adds	r0, #28
 8018b84:	f016 bb30 	b.w	802f1e8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018b88 <_ZN8touchgfx3HAL5touchEll>:
 8018b88:	b530      	push	{r4, r5, lr}
 8018b8a:	4604      	mov	r4, r0
 8018b8c:	b087      	sub	sp, #28
 8018b8e:	a804      	add	r0, sp, #16
 8018b90:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018b94:	f004 fe1a 	bl	801d7cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018b98:	9b04      	ldr	r3, [sp, #16]
 8018b9a:	a906      	add	r1, sp, #24
 8018b9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018ba0:	9b05      	ldr	r3, [sp, #20]
 8018ba2:	a803      	add	r0, sp, #12
 8018ba4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018ba8:	f004 fe62 	bl	801d870 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018bac:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8018bb0:	f104 001c 	add.w	r0, r4, #28
 8018bb4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018bb8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018bbc:	b189      	cbz	r1, 8018be2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018bbe:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8018bc2:	9300      	str	r3, [sp, #0]
 8018bc4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8018bc8:	4613      	mov	r3, r2
 8018bca:	462a      	mov	r2, r5
 8018bcc:	f016 fb1c 	bl	802f208 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018bd0:	b128      	cbz	r0, 8018bde <_ZN8touchgfx3HAL5touchEll+0x56>
 8018bd2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018bd6:	6623      	str	r3, [r4, #96]	@ 0x60
 8018bd8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018bdc:	6663      	str	r3, [r4, #100]	@ 0x64
 8018bde:	b007      	add	sp, #28
 8018be0:	bd30      	pop	{r4, r5, pc}
 8018be2:	f016 fb51 	bl	802f288 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018be6:	2301      	movs	r3, #1
 8018be8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8018bec:	e7f1      	b.n	8018bd2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018bee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018bee:	b510      	push	{r4, lr}
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d046      	beq.n	8018c82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018bf4:	ea81 0002 	eor.w	r0, r1, r2
 8018bf8:	07c4      	lsls	r4, r0, #31
 8018bfa:	d508      	bpl.n	8018c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018bfc:	440b      	add	r3, r1
 8018bfe:	3a01      	subs	r2, #1
 8018c00:	428b      	cmp	r3, r1
 8018c02:	d93e      	bls.n	8018c82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018c04:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018c08:	f801 0b01 	strb.w	r0, [r1], #1
 8018c0c:	e7f8      	b.n	8018c00 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018c0e:	07d0      	lsls	r0, r2, #31
 8018c10:	bf42      	ittt	mi
 8018c12:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018c16:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018c1a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018c1e:	2b01      	cmp	r3, #1
 8018c20:	d911      	bls.n	8018c46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018c22:	ea81 0402 	eor.w	r4, r1, r2
 8018c26:	07a4      	lsls	r4, r4, #30
 8018c28:	4610      	mov	r0, r2
 8018c2a:	d022      	beq.n	8018c72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018c2c:	f023 0401 	bic.w	r4, r3, #1
 8018c30:	440c      	add	r4, r1
 8018c32:	428c      	cmp	r4, r1
 8018c34:	4602      	mov	r2, r0
 8018c36:	d904      	bls.n	8018c42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018c38:	8812      	ldrh	r2, [r2, #0]
 8018c3a:	3002      	adds	r0, #2
 8018c3c:	f821 2b02 	strh.w	r2, [r1], #2
 8018c40:	e7f7      	b.n	8018c32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018c42:	f003 0301 	and.w	r3, r3, #1
 8018c46:	f023 0003 	bic.w	r0, r3, #3
 8018c4a:	4408      	add	r0, r1
 8018c4c:	4288      	cmp	r0, r1
 8018c4e:	4614      	mov	r4, r2
 8018c50:	d904      	bls.n	8018c5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018c52:	6824      	ldr	r4, [r4, #0]
 8018c54:	3204      	adds	r2, #4
 8018c56:	f841 4b04 	str.w	r4, [r1], #4
 8018c5a:	e7f7      	b.n	8018c4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018c5c:	f003 0303 	and.w	r3, r3, #3
 8018c60:	440b      	add	r3, r1
 8018c62:	3a01      	subs	r2, #1
 8018c64:	428b      	cmp	r3, r1
 8018c66:	d90c      	bls.n	8018c82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018c68:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018c6c:	f801 0b01 	strb.w	r0, [r1], #1
 8018c70:	e7f8      	b.n	8018c64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8018c72:	0790      	lsls	r0, r2, #30
 8018c74:	d0e7      	beq.n	8018c46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018c76:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018c7a:	3b02      	subs	r3, #2
 8018c7c:	f821 0b02 	strh.w	r0, [r1], #2
 8018c80:	e7e1      	b.n	8018c46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018c82:	2001      	movs	r0, #1
 8018c84:	bd10      	pop	{r4, pc}

08018c86 <_ZN8touchgfx3HAL7noTouchEv>:
 8018c86:	b510      	push	{r4, lr}
 8018c88:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8018c8c:	4604      	mov	r4, r0
 8018c8e:	b153      	cbz	r3, 8018ca6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018c90:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8018c94:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8018c98:	2101      	movs	r1, #1
 8018c9a:	301c      	adds	r0, #28
 8018c9c:	f016 faf4 	bl	802f288 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8018ca6:	bd10      	pop	{r4, pc}

08018ca8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cac:	4604      	mov	r4, r0
 8018cae:	2000      	movs	r0, #0
 8018cb0:	b085      	sub	sp, #20
 8018cb2:	ad04      	add	r5, sp, #16
 8018cb4:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018cb8:	69a0      	ldr	r0, [r4, #24]
 8018cba:	4699      	mov	r9, r3
 8018cbc:	6806      	ldr	r6, [r0, #0]
 8018cbe:	9501      	str	r5, [sp, #4]
 8018cc0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8018cc4:	460f      	mov	r7, r1
 8018cc6:	9500      	str	r5, [sp, #0]
 8018cc8:	6835      	ldr	r5, [r6, #0]
 8018cca:	4690      	mov	r8, r2
 8018ccc:	47a8      	blx	r5
 8018cce:	4d10      	ldr	r5, [pc, #64]	@ (8018d10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8018cd0:	4606      	mov	r6, r0
 8018cd2:	f8a5 9000 	strh.w	r9, [r5]
 8018cd6:	f7f3 febd 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 8018cda:	6803      	ldr	r3, [r0, #0]
 8018cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cde:	4798      	blx	r3
 8018ce0:	b128      	cbz	r0, 8018cee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8018ce2:	2801      	cmp	r0, #1
 8018ce4:	d00b      	beq.n	8018cfe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8018ce6:	4630      	mov	r0, r6
 8018ce8:	b005      	add	sp, #20
 8018cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cee:	882b      	ldrh	r3, [r5, #0]
 8018cf0:	fb08 7203 	mla	r2, r8, r3, r7
 8018cf4:	9b03      	ldr	r3, [sp, #12]
 8018cf6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018cfa:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018cfc:	e7f3      	b.n	8018ce6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018cfe:	882a      	ldrh	r2, [r5, #0]
 8018d00:	9b03      	ldr	r3, [sp, #12]
 8018d02:	fb08 7202 	mla	r2, r8, r2, r7
 8018d06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018d0a:	1a9a      	subs	r2, r3, r2
 8018d0c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8018d0e:	e7ea      	b.n	8018ce6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018d10:	20011ff6 	.word	0x20011ff6

08018d14 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d16:	b08b      	sub	sp, #44	@ 0x2c
 8018d18:	4617      	mov	r7, r2
 8018d1a:	4604      	mov	r4, r0
 8018d1c:	460e      	mov	r6, r1
 8018d1e:	461d      	mov	r5, r3
 8018d20:	f7f3 fe98 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 8018d24:	6803      	ldr	r3, [r0, #0]
 8018d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d28:	4798      	blx	r3
 8018d2a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018d2e:	9007      	str	r0, [sp, #28]
 8018d30:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018d34:	4b0d      	ldr	r3, [pc, #52]	@ (8018d6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018d36:	6822      	ldr	r2, [r4, #0]
 8018d38:	881b      	ldrh	r3, [r3, #0]
 8018d3a:	4631      	mov	r1, r6
 8018d3c:	9306      	str	r3, [sp, #24]
 8018d3e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8018d42:	4620      	mov	r0, r4
 8018d44:	9305      	str	r3, [sp, #20]
 8018d46:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8018d4a:	9304      	str	r3, [sp, #16]
 8018d4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018d50:	9303      	str	r3, [sp, #12]
 8018d52:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018d56:	9302      	str	r3, [sp, #8]
 8018d58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018d5c:	e9cd 5300 	strd	r5, r3, [sp]
 8018d60:	463b      	mov	r3, r7
 8018d62:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8018d64:	2200      	movs	r2, #0
 8018d66:	47a8      	blx	r5
 8018d68:	b00b      	add	sp, #44	@ 0x2c
 8018d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d6c:	20011ff6 	.word	0x20011ff6

08018d70 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d74:	4698      	mov	r8, r3
 8018d76:	6803      	ldr	r3, [r0, #0]
 8018d78:	b08b      	sub	sp, #44	@ 0x2c
 8018d7a:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8018d7c:	4b14      	ldr	r3, [pc, #80]	@ (8018dd0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018d7e:	4617      	mov	r7, r2
 8018d80:	f8b3 9000 	ldrh.w	r9, [r3]
 8018d84:	460e      	mov	r6, r1
 8018d86:	4604      	mov	r4, r0
 8018d88:	f7f3 fe64 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 8018d8c:	6803      	ldr	r3, [r0, #0]
 8018d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d90:	4798      	blx	r3
 8018d92:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8018d96:	2200      	movs	r2, #0
 8018d98:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018d9c:	2302      	movs	r3, #2
 8018d9e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018da2:	2301      	movs	r3, #1
 8018da4:	9305      	str	r3, [sp, #20]
 8018da6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018daa:	4631      	mov	r1, r6
 8018dac:	9304      	str	r3, [sp, #16]
 8018dae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018db2:	4620      	mov	r0, r4
 8018db4:	9303      	str	r3, [sp, #12]
 8018db6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018dba:	9302      	str	r3, [sp, #8]
 8018dbc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018dc0:	e9cd 8300 	strd	r8, r3, [sp]
 8018dc4:	463b      	mov	r3, r7
 8018dc6:	47a8      	blx	r5
 8018dc8:	b00b      	add	sp, #44	@ 0x2c
 8018dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dce:	bf00      	nop
 8018dd0:	20011ff6 	.word	0x20011ff6

08018dd4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018dd8:	4698      	mov	r8, r3
 8018dda:	6803      	ldr	r3, [r0, #0]
 8018ddc:	b087      	sub	sp, #28
 8018dde:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8018de0:	4b10      	ldr	r3, [pc, #64]	@ (8018e24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018de2:	460e      	mov	r6, r1
 8018de4:	f8b3 9000 	ldrh.w	r9, [r3]
 8018de8:	4617      	mov	r7, r2
 8018dea:	4604      	mov	r4, r0
 8018dec:	f7f3 fe32 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 8018df0:	6803      	ldr	r3, [r0, #0]
 8018df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018df4:	4798      	blx	r3
 8018df6:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8018dfa:	f8cd 900c 	str.w	r9, [sp, #12]
 8018dfe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018e02:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8018e06:	463a      	mov	r2, r7
 8018e08:	9302      	str	r3, [sp, #8]
 8018e0a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8018e0e:	4631      	mov	r1, r6
 8018e10:	9301      	str	r3, [sp, #4]
 8018e12:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018e16:	4620      	mov	r0, r4
 8018e18:	9300      	str	r3, [sp, #0]
 8018e1a:	4643      	mov	r3, r8
 8018e1c:	47a8      	blx	r5
 8018e1e:	b007      	add	sp, #28
 8018e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e24:	20011ff6 	.word	0x20011ff6

08018e28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e2c:	4604      	mov	r4, r0
 8018e2e:	b08f      	sub	sp, #60	@ 0x3c
 8018e30:	4610      	mov	r0, r2
 8018e32:	460d      	mov	r5, r1
 8018e34:	4691      	mov	r9, r2
 8018e36:	461e      	mov	r6, r3
 8018e38:	f007 ff46 	bl	8020cc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018e3c:	2800      	cmp	r0, #0
 8018e3e:	f000 809d 	beq.w	8018f7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8018e42:	6823      	ldr	r3, [r4, #0]
 8018e44:	4620      	mov	r0, r4
 8018e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e48:	4798      	blx	r3
 8018e4a:	6823      	ldr	r3, [r4, #0]
 8018e4c:	f8df b190 	ldr.w	fp, [pc, #400]	@ 8018fe0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e52:	4620      	mov	r0, r4
 8018e54:	4798      	blx	r3
 8018e56:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8018fe4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8018e5a:	f8bb 3000 	ldrh.w	r3, [fp]
 8018e5e:	4f5d      	ldr	r7, [pc, #372]	@ (8018fd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018e60:	9301      	str	r3, [sp, #4]
 8018e62:	f8ba 3000 	ldrh.w	r3, [sl]
 8018e66:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8018e6a:	9302      	str	r3, [sp, #8]
 8018e6c:	883b      	ldrh	r3, [r7, #0]
 8018e6e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018e72:	9303      	str	r3, [sp, #12]
 8018e74:	4b58      	ldr	r3, [pc, #352]	@ (8018fd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018e76:	4640      	mov	r0, r8
 8018e78:	881a      	ldrh	r2, [r3, #0]
 8018e7a:	9305      	str	r3, [sp, #20]
 8018e7c:	9204      	str	r2, [sp, #16]
 8018e7e:	f007 ffb7 	bl	8020df0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018e82:	8038      	strh	r0, [r7, #0]
 8018e84:	4640      	mov	r0, r8
 8018e86:	f007 ffe7 	bl	8020e58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018e8a:	9b05      	ldr	r3, [sp, #20]
 8018e8c:	b280      	uxth	r0, r0
 8018e8e:	8018      	strh	r0, [r3, #0]
 8018e90:	4b52      	ldr	r3, [pc, #328]	@ (8018fdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d174      	bne.n	8018f82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8018e98:	883b      	ldrh	r3, [r7, #0]
 8018e9a:	f8aa 0000 	strh.w	r0, [sl]
 8018e9e:	f8ab 3000 	strh.w	r3, [fp]
 8018ea2:	4648      	mov	r0, r9
 8018ea4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8018ea8:	f007 ff0e 	bl	8020cc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018eac:	2200      	movs	r2, #0
 8018eae:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8018eb2:	4611      	mov	r1, r2
 8018eb4:	4628      	mov	r0, r5
 8018eb6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018eba:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018ebe:	f7f4 fb74 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
 8018ec2:	2301      	movs	r3, #1
 8018ec4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8018ec8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8018ecc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	dd5c      	ble.n	8018f8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018ed4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	dd58      	ble.n	8018f8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018edc:	462a      	mov	r2, r5
 8018ede:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018ee2:	ab0a      	add	r3, sp, #40	@ 0x28
 8018ee4:	6851      	ldr	r1, [r2, #4]
 8018ee6:	c303      	stmia	r3!, {r0, r1}
 8018ee8:	4631      	mov	r1, r6
 8018eea:	a80a      	add	r0, sp, #40	@ 0x28
 8018eec:	f7ff fbf8 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 8018ef0:	2100      	movs	r1, #0
 8018ef2:	4b38      	ldr	r3, [pc, #224]	@ (8018fd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018ef4:	910c      	str	r1, [sp, #48]	@ 0x30
 8018ef6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018efa:	4b37      	ldr	r3, [pc, #220]	@ (8018fd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018efc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8018f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f04:	aa0a      	add	r2, sp, #40	@ 0x28
 8018f06:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018f0a:	ab08      	add	r3, sp, #32
 8018f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f10:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f14:	4618      	mov	r0, r3
 8018f16:	a90c      	add	r1, sp, #48	@ 0x30
 8018f18:	f7ff fbe2 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 8018f1c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d13c      	bne.n	8018f9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8018f22:	2000      	movs	r0, #0
 8018f24:	2600      	movs	r6, #0
 8018f26:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8018f2a:	696b      	ldr	r3, [r5, #20]
 8018f2c:	682a      	ldr	r2, [r5, #0]
 8018f2e:	616e      	str	r6, [r5, #20]
 8018f30:	9305      	str	r3, [sp, #20]
 8018f32:	6892      	ldr	r2, [r2, #8]
 8018f34:	a908      	add	r1, sp, #32
 8018f36:	4628      	mov	r0, r5
 8018f38:	4790      	blx	r2
 8018f3a:	9b05      	ldr	r3, [sp, #20]
 8018f3c:	4652      	mov	r2, sl
 8018f3e:	616b      	str	r3, [r5, #20]
 8018f40:	4649      	mov	r1, r9
 8018f42:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8018f46:	4628      	mov	r0, r5
 8018f48:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8018f4c:	f7f4 fb2d 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
 8018f50:	9a01      	ldr	r2, [sp, #4]
 8018f52:	4b23      	ldr	r3, [pc, #140]	@ (8018fe0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018f54:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8018f58:	801a      	strh	r2, [r3, #0]
 8018f5a:	9a02      	ldr	r2, [sp, #8]
 8018f5c:	4b21      	ldr	r3, [pc, #132]	@ (8018fe4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8018f5e:	4620      	mov	r0, r4
 8018f60:	801a      	strh	r2, [r3, #0]
 8018f62:	9a03      	ldr	r2, [sp, #12]
 8018f64:	4b1b      	ldr	r3, [pc, #108]	@ (8018fd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018f66:	801a      	strh	r2, [r3, #0]
 8018f68:	4b1b      	ldr	r3, [pc, #108]	@ (8018fd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018f6a:	9a04      	ldr	r2, [sp, #16]
 8018f6c:	801a      	strh	r2, [r3, #0]
 8018f6e:	6823      	ldr	r3, [r4, #0]
 8018f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f72:	4798      	blx	r3
 8018f74:	6823      	ldr	r3, [r4, #0]
 8018f76:	4620      	mov	r0, r4
 8018f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f7a:	4798      	blx	r3
 8018f7c:	b00f      	add	sp, #60	@ 0x3c
 8018f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f82:	883b      	ldrh	r3, [r7, #0]
 8018f84:	f8ab 0000 	strh.w	r0, [fp]
 8018f88:	f8aa 3000 	strh.w	r3, [sl]
 8018f8c:	e789      	b.n	8018ea2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8018f8e:	462a      	mov	r2, r5
 8018f90:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018f94:	ab0a      	add	r3, sp, #40	@ 0x28
 8018f96:	6851      	ldr	r1, [r2, #4]
 8018f98:	c303      	stmia	r3!, {r0, r1}
 8018f9a:	e7a9      	b.n	8018ef0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8018f9c:	a807      	add	r0, sp, #28
 8018f9e:	f008 f89d 	bl	80210dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018fa2:	4606      	mov	r6, r0
 8018fa4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8018fa6:	6803      	ldr	r3, [r0, #0]
 8018fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018faa:	4798      	blx	r3
 8018fac:	4286      	cmp	r6, r0
 8018fae:	d1b8      	bne.n	8018f22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018fb0:	f7f3 fd50 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 8018fb4:	6803      	ldr	r3, [r0, #0]
 8018fb6:	4606      	mov	r6, r0
 8018fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018fba:	a807      	add	r0, sp, #28
 8018fbc:	9305      	str	r3, [sp, #20]
 8018fbe:	f008 f88d 	bl	80210dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018fc2:	9b05      	ldr	r3, [sp, #20]
 8018fc4:	4601      	mov	r1, r0
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	4798      	blx	r3
 8018fca:	f080 0001 	eor.w	r0, r0, #1
 8018fce:	b2c0      	uxtb	r0, r0
 8018fd0:	e7a8      	b.n	8018f24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8018fd2:	bf00      	nop
 8018fd4:	20011ff0 	.word	0x20011ff0
 8018fd8:	20011ff2 	.word	0x20011ff2
 8018fdc:	20011ff4 	.word	0x20011ff4
 8018fe0:	20011ff6 	.word	0x20011ff6
 8018fe4:	20011ff8 	.word	0x20011ff8

08018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018fe8:	b510      	push	{r4, lr}
 8018fea:	4b07      	ldr	r3, [pc, #28]	@ (8019008 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018fec:	4604      	mov	r4, r0
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	b13b      	cbz	r3, 8019002 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ff6:	4798      	blx	r3
 8018ff8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018ffa:	4283      	cmp	r3, r0
 8018ffc:	d101      	bne.n	8019002 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018ffe:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8019000:	bd10      	pop	{r4, pc}
 8019002:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8019004:	e7fc      	b.n	8019000 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8019006:	bf00      	nop
 8019008:	20011ffa 	.word	0x20011ffa

0801900c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019010:	461d      	mov	r5, r3
 8019012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019016:	2400      	movs	r4, #0
 8019018:	b08a      	sub	sp, #40	@ 0x28
 801901a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801901e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8019022:	4690      	mov	r8, r2
 8019024:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019028:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801902c:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8019030:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019034:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8019038:	4607      	mov	r7, r0
 801903a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801903e:	9404      	str	r4, [sp, #16]
 8019040:	f88d 4020 	strb.w	r4, [sp, #32]
 8019044:	f7ff ffd0 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019048:	fb06 8505 	mla	r5, r6, r5, r8
 801904c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	9505      	str	r5, [sp, #20]
 8019054:	f8ad 601e 	strh.w	r6, [sp, #30]
 8019058:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801905c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8019060:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8019064:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8019068:	6803      	ldr	r3, [r0, #0]
 801906a:	a901      	add	r1, sp, #4
 801906c:	685b      	ldr	r3, [r3, #4]
 801906e:	4798      	blx	r3
 8019070:	b00a      	add	sp, #40	@ 0x28
 8019072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019076 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8019076:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801907a:	2400      	movs	r4, #0
 801907c:	461d      	mov	r5, r3
 801907e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019082:	4691      	mov	r9, r2
 8019084:	b08b      	sub	sp, #44	@ 0x2c
 8019086:	4688      	mov	r8, r1
 8019088:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801908c:	4607      	mov	r7, r0
 801908e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019092:	9404      	str	r4, [sp, #16]
 8019094:	f7ff ffa8 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019098:	fb06 9505 	mla	r5, r6, r5, r9
 801909c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80190a0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80190a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80190a8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80190ac:	6878      	ldr	r0, [r7, #4]
 80190ae:	9505      	str	r5, [sp, #20]
 80190b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80190b4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80190b8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80190bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80190c0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80190c4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80190c8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80190cc:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80190d0:	6803      	ldr	r3, [r0, #0]
 80190d2:	a901      	add	r1, sp, #4
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	4798      	blx	r3
 80190d8:	b00b      	add	sp, #44	@ 0x2c
 80190da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080190e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80190e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e4:	4698      	mov	r8, r3
 80190e6:	2300      	movs	r3, #0
 80190e8:	b08a      	sub	sp, #40	@ 0x28
 80190ea:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80190ee:	4606      	mov	r6, r0
 80190f0:	2d0b      	cmp	r5, #11
 80190f2:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80190f6:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80190fa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80190fe:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8019102:	9304      	str	r3, [sp, #16]
 8019104:	d137      	bne.n	8019176 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8019106:	2380      	movs	r3, #128	@ 0x80
 8019108:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801910c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8019110:	f88d 0020 	strb.w	r0, [sp, #32]
 8019114:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019118:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801911c:	4630      	mov	r0, r6
 801911e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019122:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8019126:	9203      	str	r2, [sp, #12]
 8019128:	f8ad 301c 	strh.w	r3, [sp, #28]
 801912c:	f7ff ff5c 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019130:	2c0b      	cmp	r4, #11
 8019132:	bf8c      	ite	hi
 8019134:	2100      	movhi	r1, #0
 8019136:	4b1b      	ldrls	r3, [pc, #108]	@ (80191a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8019138:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801913c:	bf98      	it	ls
 801913e:	5d19      	ldrbls	r1, [r3, r4]
 8019140:	fb02 8307 	mla	r3, r2, r7, r8
 8019144:	10c9      	asrs	r1, r1, #3
 8019146:	fb01 0003 	mla	r0, r1, r3, r0
 801914a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801914e:	9005      	str	r0, [sp, #20]
 8019150:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8019154:	2300      	movs	r3, #0
 8019156:	6870      	ldr	r0, [r6, #4]
 8019158:	f8ad 701e 	strh.w	r7, [sp, #30]
 801915c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8019160:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8019164:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8019168:	6803      	ldr	r3, [r0, #0]
 801916a:	a901      	add	r1, sp, #4
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	4798      	blx	r3
 8019170:	b00a      	add	sp, #40	@ 0x28
 8019172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019176:	2d02      	cmp	r5, #2
 8019178:	d109      	bne.n	801918e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801917a:	28ff      	cmp	r0, #255	@ 0xff
 801917c:	d105      	bne.n	801918a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801917e:	f1bc 0f00 	cmp.w	ip, #0
 8019182:	bf14      	ite	ne
 8019184:	2340      	movne	r3, #64	@ 0x40
 8019186:	2320      	moveq	r3, #32
 8019188:	e7be      	b.n	8019108 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801918a:	2340      	movs	r3, #64	@ 0x40
 801918c:	e7bc      	b.n	8019108 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801918e:	28ff      	cmp	r0, #255	@ 0xff
 8019190:	d105      	bne.n	801919e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8019192:	f1bc 0f00 	cmp.w	ip, #0
 8019196:	bf14      	ite	ne
 8019198:	2304      	movne	r3, #4
 801919a:	2301      	moveq	r3, #1
 801919c:	e7b4      	b.n	8019108 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801919e:	2304      	movs	r3, #4
 80191a0:	e7b2      	b.n	8019108 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80191a2:	bf00      	nop
 80191a4:	08032d4c 	.word	0x08032d4c

080191a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80191a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ac:	b08b      	sub	sp, #44	@ 0x2c
 80191ae:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80191b2:	461d      	mov	r5, r3
 80191b4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80191b8:	bf14      	ite	ne
 80191ba:	2308      	movne	r3, #8
 80191bc:	2302      	moveq	r3, #2
 80191be:	2400      	movs	r4, #0
 80191c0:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80191c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80191c8:	4688      	mov	r8, r1
 80191ca:	4693      	mov	fp, r2
 80191cc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80191d0:	9404      	str	r4, [sp, #16]
 80191d2:	4607      	mov	r7, r0
 80191d4:	f7ff ff08 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80191d8:	2e0b      	cmp	r6, #11
 80191da:	bf98      	it	ls
 80191dc:	4b15      	ldrls	r3, [pc, #84]	@ (8019234 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80191de:	fb05 b50a 	mla	r5, r5, sl, fp
 80191e2:	bf98      	it	ls
 80191e4:	5d9c      	ldrbls	r4, [r3, r6]
 80191e6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80191ea:	10e4      	asrs	r4, r4, #3
 80191ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80191f0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80191f4:	fb04 0405 	mla	r4, r4, r5, r0
 80191f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80191fc:	2300      	movs	r3, #0
 80191fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019202:	6878      	ldr	r0, [r7, #4]
 8019204:	9405      	str	r4, [sp, #20]
 8019206:	f8ad 301c 	strh.w	r3, [sp, #28]
 801920a:	f8ad a01e 	strh.w	sl, [sp, #30]
 801920e:	f8cd 8010 	str.w	r8, [sp, #16]
 8019212:	f88d 9020 	strb.w	r9, [sp, #32]
 8019216:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 801921a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801921e:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8019222:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8019226:	6803      	ldr	r3, [r0, #0]
 8019228:	a901      	add	r1, sp, #4
 801922a:	685b      	ldr	r3, [r3, #4]
 801922c:	4798      	blx	r3
 801922e:	b00b      	add	sp, #44	@ 0x2c
 8019230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019234:	08032d4c 	.word	0x08032d4c

08019238 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801923c:	461e      	mov	r6, r3
 801923e:	4b0a      	ldr	r3, [pc, #40]	@ (8019268 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8019240:	460f      	mov	r7, r1
 8019242:	881d      	ldrh	r5, [r3, #0]
 8019244:	4690      	mov	r8, r2
 8019246:	f7f3 fc05 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 801924a:	6803      	ldr	r3, [r0, #0]
 801924c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801924e:	4798      	blx	r3
 8019250:	280b      	cmp	r0, #11
 8019252:	bf8e      	itee	hi
 8019254:	2400      	movhi	r4, #0
 8019256:	4b05      	ldrls	r3, [pc, #20]	@ (801926c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019258:	5c1c      	ldrbls	r4, [r3, r0]
 801925a:	fb08 7005 	mla	r0, r8, r5, r7
 801925e:	10e4      	asrs	r4, r4, #3
 8019260:	fb04 6000 	mla	r0, r4, r0, r6
 8019264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019268:	20011ff6 	.word	0x20011ff6
 801926c:	08032d4c 	.word	0x08032d4c

08019270 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8019270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019272:	2500      	movs	r5, #0
 8019274:	b08b      	sub	sp, #44	@ 0x2c
 8019276:	461f      	mov	r7, r3
 8019278:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801927c:	4604      	mov	r4, r0
 801927e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8019282:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8019286:	4616      	mov	r6, r2
 8019288:	f8ad 3018 	strh.w	r3, [sp, #24]
 801928c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8019290:	9504      	str	r5, [sp, #16]
 8019292:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019296:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801929a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801929e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80192a2:	f88d 3020 	strb.w	r3, [sp, #32]
 80192a6:	f7ff fe9f 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80192aa:	463a      	mov	r2, r7
 80192ac:	4631      	mov	r1, r6
 80192ae:	4603      	mov	r3, r0
 80192b0:	4620      	mov	r0, r4
 80192b2:	f7ff ffc1 	bl	8019238 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80192b6:	4b0e      	ldr	r3, [pc, #56]	@ (80192f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80192b8:	9005      	str	r0, [sp, #20]
 80192ba:	881b      	ldrh	r3, [r3, #0]
 80192bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80192c0:	f7f3 fbc8 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 80192c4:	6803      	ldr	r3, [r0, #0]
 80192c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192c8:	4798      	blx	r3
 80192ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80192cc:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80192d0:	9304      	str	r3, [sp, #16]
 80192d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80192d6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80192da:	6860      	ldr	r0, [r4, #4]
 80192dc:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80192e0:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80192e4:	6803      	ldr	r3, [r0, #0]
 80192e6:	a901      	add	r1, sp, #4
 80192e8:	685b      	ldr	r3, [r3, #4]
 80192ea:	4798      	blx	r3
 80192ec:	b00b      	add	sp, #44	@ 0x2c
 80192ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192f0:	20011ff6 	.word	0x20011ff6

080192f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80192f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192f6:	b08d      	sub	sp, #52	@ 0x34
 80192f8:	466b      	mov	r3, sp
 80192fa:	e883 0006 	stmia.w	r3, {r1, r2}
 80192fe:	2300      	movs	r3, #0
 8019300:	2501      	movs	r5, #1
 8019302:	9306      	str	r3, [sp, #24]
 8019304:	6803      	ldr	r3, [r0, #0]
 8019306:	9503      	str	r5, [sp, #12]
 8019308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801930a:	4604      	mov	r4, r0
 801930c:	f8bd 6000 	ldrh.w	r6, [sp]
 8019310:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019314:	4798      	blx	r3
 8019316:	463a      	mov	r2, r7
 8019318:	4631      	mov	r1, r6
 801931a:	4603      	mov	r3, r0
 801931c:	4620      	mov	r0, r4
 801931e:	f7ff ff8b 	bl	8019238 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019322:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8019324:	9004      	str	r0, [sp, #16]
 8019326:	9307      	str	r3, [sp, #28]
 8019328:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801932c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019330:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019334:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019338:	4b0e      	ldr	r3, [pc, #56]	@ (8019374 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801933a:	881b      	ldrh	r3, [r3, #0]
 801933c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8019340:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8019344:	f7f3 fb86 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 8019348:	6803      	ldr	r3, [r0, #0]
 801934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801934c:	4798      	blx	r3
 801934e:	23ff      	movs	r3, #255	@ 0xff
 8019350:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8019354:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8019358:	6860      	ldr	r0, [r4, #4]
 801935a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801935e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8019362:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8019366:	6803      	ldr	r3, [r0, #0]
 8019368:	a903      	add	r1, sp, #12
 801936a:	685b      	ldr	r3, [r3, #4]
 801936c:	4798      	blx	r3
 801936e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8019370:	b00d      	add	sp, #52	@ 0x34
 8019372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019374:	20011ff6 	.word	0x20011ff6

08019378 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801937c:	b08c      	sub	sp, #48	@ 0x30
 801937e:	466d      	mov	r5, sp
 8019380:	461e      	mov	r6, r3
 8019382:	2300      	movs	r3, #0
 8019384:	e885 0006 	stmia.w	r5, {r1, r2}
 8019388:	2501      	movs	r5, #1
 801938a:	9306      	str	r3, [sp, #24]
 801938c:	6803      	ldr	r3, [r0, #0]
 801938e:	9503      	str	r5, [sp, #12]
 8019390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019392:	4604      	mov	r4, r0
 8019394:	f8bd 7000 	ldrh.w	r7, [sp]
 8019398:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801939c:	4798      	blx	r3
 801939e:	4642      	mov	r2, r8
 80193a0:	4639      	mov	r1, r7
 80193a2:	4603      	mov	r3, r0
 80193a4:	4620      	mov	r0, r4
 80193a6:	f7ff ff47 	bl	8019238 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80193aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80193ae:	9004      	str	r0, [sp, #16]
 80193b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80193b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80193b8:	9607      	str	r6, [sp, #28]
 80193ba:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80193be:	4b10      	ldr	r3, [pc, #64]	@ (8019400 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80193c0:	881b      	ldrh	r3, [r3, #0]
 80193c2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80193c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80193c8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80193cc:	f7f3 fb42 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 80193d0:	6803      	ldr	r3, [r0, #0]
 80193d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80193d4:	4798      	blx	r3
 80193d6:	23ff      	movs	r3, #255	@ 0xff
 80193d8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80193dc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80193e0:	6860      	ldr	r0, [r4, #4]
 80193e2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80193e6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80193ea:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80193ee:	6803      	ldr	r3, [r0, #0]
 80193f0:	a903      	add	r1, sp, #12
 80193f2:	685b      	ldr	r3, [r3, #4]
 80193f4:	4798      	blx	r3
 80193f6:	4630      	mov	r0, r6
 80193f8:	b00c      	add	sp, #48	@ 0x30
 80193fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193fe:	bf00      	nop
 8019400:	20011ff6 	.word	0x20011ff6

08019404 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8019404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019406:	b085      	sub	sp, #20
 8019408:	ac02      	add	r4, sp, #8
 801940a:	e884 0006 	stmia.w	r4, {r1, r2}
 801940e:	4605      	mov	r5, r0
 8019410:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8019414:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8019418:	f7ff fde6 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801941c:	463a      	mov	r2, r7
 801941e:	4603      	mov	r3, r0
 8019420:	4631      	mov	r1, r6
 8019422:	4628      	mov	r0, r5
 8019424:	f7ff ff08 	bl	8019238 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019428:	4a05      	ldr	r2, [pc, #20]	@ (8019440 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801942a:	682b      	ldr	r3, [r5, #0]
 801942c:	8812      	ldrh	r2, [r2, #0]
 801942e:	9200      	str	r2, [sp, #0]
 8019430:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8019432:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019436:	4603      	mov	r3, r0
 8019438:	4628      	mov	r0, r5
 801943a:	47b0      	blx	r6
 801943c:	b005      	add	sp, #20
 801943e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019440:	20011ff6 	.word	0x20011ff6

08019444 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019444:	b570      	push	{r4, r5, r6, lr}
 8019446:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801944a:	4604      	mov	r4, r0
 801944c:	b19b      	cbz	r3, 8019476 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801944e:	2002      	movs	r0, #2
 8019450:	f7fc ffec 	bl	801642c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019454:	2300      	movs	r3, #0
 8019456:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801945a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801945e:	6823      	ldr	r3, [r4, #0]
 8019460:	4620      	mov	r0, r4
 8019462:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8019466:	f7ff fdbf 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801946a:	462b      	mov	r3, r5
 801946c:	4601      	mov	r1, r0
 801946e:	4620      	mov	r0, r4
 8019470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019474:	4718      	bx	r3
 8019476:	bd70      	pop	{r4, r5, r6, pc}

08019478 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019478:	b538      	push	{r3, r4, r5, lr}
 801947a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801947e:	4604      	mov	r4, r0
 8019480:	428b      	cmp	r3, r1
 8019482:	460d      	mov	r5, r1
 8019484:	d006      	beq.n	8019494 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8019486:	6803      	ldr	r3, [r0, #0]
 8019488:	b929      	cbnz	r1, 8019496 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801948a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801948e:	4798      	blx	r3
 8019490:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8019494:	bd38      	pop	{r3, r4, r5, pc}
 8019496:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801949a:	e7f8      	b.n	801948e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801949c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801949c:	b510      	push	{r4, lr}
 801949e:	4b0d      	ldr	r3, [pc, #52]	@ (80194d4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80194a0:	4604      	mov	r4, r0
 80194a2:	781b      	ldrb	r3, [r3, #0]
 80194a4:	b95b      	cbnz	r3, 80194be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80194a6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80194aa:	2b02      	cmp	r3, #2
 80194ac:	d007      	beq.n	80194be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80194ae:	6840      	ldr	r0, [r0, #4]
 80194b0:	f000 f928 	bl	8019704 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80194b4:	b118      	cbz	r0, 80194be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80194b6:	6862      	ldr	r2, [r4, #4]
 80194b8:	7a53      	ldrb	r3, [r2, #9]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d0fc      	beq.n	80194b8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80194be:	f7fd fa61 	bl	8016984 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80194c2:	4620      	mov	r0, r4
 80194c4:	2100      	movs	r1, #0
 80194c6:	f7ff ffd7 	bl	8019478 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80194ca:	4620      	mov	r0, r4
 80194cc:	f7ff fd8c 	bl	8018fe8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80194d0:	bd10      	pop	{r4, pc}
 80194d2:	bf00      	nop
 80194d4:	20011ffa 	.word	0x20011ffa

080194d8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80194d8:	b570      	push	{r4, r5, r6, lr}
 80194da:	4604      	mov	r4, r0
 80194dc:	6803      	ldr	r3, [r0, #0]
 80194de:	b919      	cbnz	r1, 80194e8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80194e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194e6:	4718      	bx	r3
 80194e8:	2200      	movs	r2, #0
 80194ea:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 80194ee:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 80194f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194f4:	4798      	blx	r3
 80194f6:	2101      	movs	r1, #1
 80194f8:	4605      	mov	r5, r0
 80194fa:	6863      	ldr	r3, [r4, #4]
 80194fc:	4620      	mov	r0, r4
 80194fe:	7299      	strb	r1, [r3, #10]
 8019500:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8019504:	f7ff ffb8 	bl	8019478 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019508:	4628      	mov	r0, r5
 801950a:	bd70      	pop	{r4, r5, r6, pc}

0801950c <_ZN8touchgfx13DMA_Interface5flushEv>:
 801950c:	6803      	ldr	r3, [r0, #0]
 801950e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019510:	4718      	bx	r3

08019512 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019512:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8019516:	1a13      	subs	r3, r2, r0
 8019518:	4258      	negs	r0, r3
 801951a:	4158      	adcs	r0, r3
 801951c:	4770      	bx	lr

0801951e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801951e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019522:	1a9b      	subs	r3, r3, r2
 8019524:	2b00      	cmp	r3, #0
 8019526:	bfdc      	itt	le
 8019528:	6882      	ldrle	r2, [r0, #8]
 801952a:	189b      	addle	r3, r3, r2
 801952c:	2b01      	cmp	r3, #1
 801952e:	bfcc      	ite	gt
 8019530:	2000      	movgt	r0, #0
 8019532:	2001      	movle	r0, #1
 8019534:	4770      	bx	lr

08019536 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019536:	6902      	ldr	r2, [r0, #16]
 8019538:	6843      	ldr	r3, [r0, #4]
 801953a:	2024      	movs	r0, #36	@ 0x24
 801953c:	fb00 3002 	mla	r0, r0, r2, r3
 8019540:	4770      	bx	lr

08019542 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019542:	6803      	ldr	r3, [r0, #0]
 8019544:	691b      	ldr	r3, [r3, #16]
 8019546:	4718      	bx	r3

08019548 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019548:	2301      	movs	r3, #1
 801954a:	b570      	push	{r4, r5, r6, lr}
 801954c:	7203      	strb	r3, [r0, #8]
 801954e:	4604      	mov	r4, r0
 8019550:	6840      	ldr	r0, [r0, #4]
 8019552:	6803      	ldr	r3, [r0, #0]
 8019554:	699b      	ldr	r3, [r3, #24]
 8019556:	4798      	blx	r3
 8019558:	6803      	ldr	r3, [r0, #0]
 801955a:	4605      	mov	r5, r0
 801955c:	2b40      	cmp	r3, #64	@ 0x40
 801955e:	d00c      	beq.n	801957a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019560:	d810      	bhi.n	8019584 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019562:	2b04      	cmp	r3, #4
 8019564:	d01d      	beq.n	80195a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8019566:	d804      	bhi.n	8019572 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8019568:	2b01      	cmp	r3, #1
 801956a:	d006      	beq.n	801957a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801956c:	2b02      	cmp	r3, #2
 801956e:	d02c      	beq.n	80195ca <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019570:	bd70      	pop	{r4, r5, r6, pc}
 8019572:	2b08      	cmp	r3, #8
 8019574:	d01d      	beq.n	80195b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8019576:	2b20      	cmp	r3, #32
 8019578:	d1fa      	bne.n	8019570 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801957a:	6823      	ldr	r3, [r4, #0]
 801957c:	4620      	mov	r0, r4
 801957e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019580:	4798      	blx	r3
 8019582:	e013      	b.n	80195ac <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019588:	d0f7      	beq.n	801957a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801958a:	d804      	bhi.n	8019596 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801958c:	2b80      	cmp	r3, #128	@ 0x80
 801958e:	d0f4      	beq.n	801957a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019594:	e7f0      	b.n	8019578 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8019596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801959a:	d0ee      	beq.n	801957a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801959c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80195a0:	e7e5      	b.n	801956e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80195a2:	6823      	ldr	r3, [r4, #0]
 80195a4:	7f01      	ldrb	r1, [r0, #28]
 80195a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80195a8:	4620      	mov	r0, r4
 80195aa:	4798      	blx	r3
 80195ac:	6823      	ldr	r3, [r4, #0]
 80195ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80195b0:	e006      	b.n	80195c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80195b2:	6823      	ldr	r3, [r4, #0]
 80195b4:	7f01      	ldrb	r1, [r0, #28]
 80195b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80195b8:	4620      	mov	r0, r4
 80195ba:	4798      	blx	r3
 80195bc:	6823      	ldr	r3, [r4, #0]
 80195be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80195c0:	4629      	mov	r1, r5
 80195c2:	4620      	mov	r0, r4
 80195c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195c8:	4718      	bx	r3
 80195ca:	6823      	ldr	r3, [r4, #0]
 80195cc:	4620      	mov	r0, r4
 80195ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80195d0:	4798      	blx	r3
 80195d2:	e7f3      	b.n	80195bc <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080195d4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80195d4:	4770      	bx	lr

080195d6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80195d6:	4770      	bx	lr

080195d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80195d8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80195dc:	1ad2      	subs	r2, r2, r3
 80195de:	2a00      	cmp	r2, #0
 80195e0:	b510      	push	{r4, lr}
 80195e2:	bfdc      	itt	le
 80195e4:	6884      	ldrle	r4, [r0, #8]
 80195e6:	1912      	addle	r2, r2, r4
 80195e8:	2a01      	cmp	r2, #1
 80195ea:	dd16      	ble.n	801961a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80195ec:	2424      	movs	r4, #36	@ 0x24
 80195ee:	6842      	ldr	r2, [r0, #4]
 80195f0:	fb04 2303 	mla	r3, r4, r3, r2
 80195f4:	f101 0220 	add.w	r2, r1, #32
 80195f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80195fc:	4291      	cmp	r1, r2
 80195fe:	f843 4b04 	str.w	r4, [r3], #4
 8019602:	d1f9      	bne.n	80195f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8019604:	780a      	ldrb	r2, [r1, #0]
 8019606:	701a      	strb	r2, [r3, #0]
 8019608:	68c3      	ldr	r3, [r0, #12]
 801960a:	6882      	ldr	r2, [r0, #8]
 801960c:	3301      	adds	r3, #1
 801960e:	429a      	cmp	r2, r3
 8019610:	bfd8      	it	le
 8019612:	1a9b      	suble	r3, r3, r2
 8019614:	f3bf 8f5b 	dmb	ish
 8019618:	60c3      	str	r3, [r0, #12]
 801961a:	bd10      	pop	{r4, pc}

0801961c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801961c:	6903      	ldr	r3, [r0, #16]
 801961e:	6882      	ldr	r2, [r0, #8]
 8019620:	3301      	adds	r3, #1
 8019622:	429a      	cmp	r2, r3
 8019624:	bfd8      	it	le
 8019626:	1a9b      	suble	r3, r3, r2
 8019628:	f3bf 8f5b 	dmb	ish
 801962c:	6103      	str	r3, [r0, #16]
 801962e:	4770      	bx	lr

08019630 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019630:	b570      	push	{r4, r5, r6, lr}
 8019632:	4604      	mov	r4, r0
 8019634:	460e      	mov	r6, r1
 8019636:	6860      	ldr	r0, [r4, #4]
 8019638:	6803      	ldr	r3, [r0, #0]
 801963a:	685b      	ldr	r3, [r3, #4]
 801963c:	4798      	blx	r3
 801963e:	2800      	cmp	r0, #0
 8019640:	d1f9      	bne.n	8019636 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019642:	4d0d      	ldr	r5, [pc, #52]	@ (8019678 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019644:	6828      	ldr	r0, [r5, #0]
 8019646:	6803      	ldr	r3, [r0, #0]
 8019648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801964a:	4798      	blx	r3
 801964c:	f7fd f9b4 	bl	80169b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019650:	6828      	ldr	r0, [r5, #0]
 8019652:	2101      	movs	r1, #1
 8019654:	f7ff ff10 	bl	8019478 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019658:	6860      	ldr	r0, [r4, #4]
 801965a:	4631      	mov	r1, r6
 801965c:	6803      	ldr	r3, [r0, #0]
 801965e:	689b      	ldr	r3, [r3, #8]
 8019660:	4798      	blx	r3
 8019662:	6823      	ldr	r3, [r4, #0]
 8019664:	4620      	mov	r0, r4
 8019666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019668:	4798      	blx	r3
 801966a:	6828      	ldr	r0, [r5, #0]
 801966c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019670:	6803      	ldr	r3, [r0, #0]
 8019672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019674:	4718      	bx	r3
 8019676:	bf00      	nop
 8019678:	20011ffc 	.word	0x20011ffc

0801967c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801967c:	b508      	push	{r3, lr}
 801967e:	f7fd f981 	bl	8016984 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019686:	f7fd b98b 	b.w	80169a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801968a <_ZN8touchgfx13DMA_Interface5startEv>:
 801968a:	b510      	push	{r4, lr}
 801968c:	4604      	mov	r4, r0
 801968e:	6840      	ldr	r0, [r0, #4]
 8019690:	6803      	ldr	r3, [r0, #0]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	4798      	blx	r3
 8019696:	b948      	cbnz	r0, 80196ac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019698:	7a63      	ldrb	r3, [r4, #9]
 801969a:	b13b      	cbz	r3, 80196ac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801969c:	7a23      	ldrb	r3, [r4, #8]
 801969e:	b92b      	cbnz	r3, 80196ac <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80196a0:	6823      	ldr	r3, [r4, #0]
 80196a2:	4620      	mov	r0, r4
 80196a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196aa:	4718      	bx	r3
 80196ac:	bd10      	pop	{r4, pc}

080196ae <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80196ae:	b570      	push	{r4, r5, r6, lr}
 80196b0:	4604      	mov	r4, r0
 80196b2:	6840      	ldr	r0, [r0, #4]
 80196b4:	6803      	ldr	r3, [r0, #0]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	4798      	blx	r3
 80196ba:	4605      	mov	r5, r0
 80196bc:	b930      	cbnz	r0, 80196cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80196be:	7a23      	ldrb	r3, [r4, #8]
 80196c0:	b123      	cbz	r3, 80196cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80196c2:	6860      	ldr	r0, [r4, #4]
 80196c4:	6803      	ldr	r3, [r0, #0]
 80196c6:	695b      	ldr	r3, [r3, #20]
 80196c8:	4798      	blx	r3
 80196ca:	7225      	strb	r5, [r4, #8]
 80196cc:	6860      	ldr	r0, [r4, #4]
 80196ce:	6803      	ldr	r3, [r0, #0]
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	4798      	blx	r3
 80196d4:	b928      	cbnz	r0, 80196e2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80196d6:	6823      	ldr	r3, [r4, #0]
 80196d8:	4620      	mov	r0, r4
 80196da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196e0:	4718      	bx	r3
 80196e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196e6:	f7fd b973 	b.w	80169d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080196ec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80196ec:	6082      	str	r2, [r0, #8]
 80196ee:	2200      	movs	r2, #0
 80196f0:	b510      	push	{r4, lr}
 80196f2:	4c03      	ldr	r4, [pc, #12]	@ (8019700 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80196f4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80196f8:	e9c0 4100 	strd	r4, r1, [r0]
 80196fc:	bd10      	pop	{r4, pc}
 80196fe:	bf00      	nop
 8019700:	08032e88 	.word	0x08032e88

08019704 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019704:	6840      	ldr	r0, [r0, #4]
 8019706:	6803      	ldr	r3, [r0, #0]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4718      	bx	r3

0801970c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 801970c:	b508      	push	{r3, lr}
 801970e:	4b05      	ldr	r3, [pc, #20]	@ (8019724 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8019710:	6818      	ldr	r0, [r3, #0]
 8019712:	6803      	ldr	r3, [r0, #0]
 8019714:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8019718:	4798      	blx	r3
 801971a:	1e43      	subs	r3, r0, #1
 801971c:	4258      	negs	r0, r3
 801971e:	4158      	adcs	r0, r3
 8019720:	bd08      	pop	{r3, pc}
 8019722:	bf00      	nop
 8019724:	20011ffc 	.word	0x20011ffc

08019728 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8019728:	b430      	push	{r4, r5}
 801972a:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801972e:	8a02      	ldrh	r2, [r0, #16]
 8019730:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8019734:	9202      	str	r2, [sp, #8]
 8019736:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801973a:	68c2      	ldr	r2, [r0, #12]
 801973c:	4629      	mov	r1, r5
 801973e:	4620      	mov	r0, r4
 8019740:	bc30      	pop	{r4, r5}
 8019742:	f7fe b819 	b.w	8017778 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08019746 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8019746:	f7fe b805 	b.w	8017754 <_ZN8touchgfx5paint8tearDownEv>
	...

0801974c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801974c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801974e:	6803      	ldr	r3, [r0, #0]
 8019750:	460d      	mov	r5, r1
 8019752:	4604      	mov	r4, r0
 8019754:	4601      	mov	r1, r0
 8019756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019758:	a802      	add	r0, sp, #8
 801975a:	4798      	blx	r3
 801975c:	466b      	mov	r3, sp
 801975e:	6828      	ldr	r0, [r5, #0]
 8019760:	6869      	ldr	r1, [r5, #4]
 8019762:	c303      	stmia	r3!, {r0, r1}
 8019764:	4668      	mov	r0, sp
 8019766:	4619      	mov	r1, r3
 8019768:	f7fe ffba 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801976c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801976e:	b188      	cbz	r0, 8019794 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019770:	6803      	ldr	r3, [r0, #0]
 8019772:	1d21      	adds	r1, r4, #4
 8019774:	68db      	ldr	r3, [r3, #12]
 8019776:	4798      	blx	r3
 8019778:	b160      	cbz	r0, 8019794 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801977a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801977e:	2b00      	cmp	r3, #0
 8019780:	dd08      	ble.n	8019794 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019782:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8019786:	2d00      	cmp	r5, #0
 8019788:	dd04      	ble.n	8019794 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801978a:	4a2b      	ldr	r2, [pc, #172]	@ (8019838 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801978c:	7812      	ldrb	r2, [r2, #0]
 801978e:	b11a      	cbz	r2, 8019798 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8019790:	2a01      	cmp	r2, #1
 8019792:	d029      	beq.n	80197e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8019794:	b004      	add	sp, #16
 8019796:	bd70      	pop	{r4, r5, r6, pc}
 8019798:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801979c:	441d      	add	r5, r3
 801979e:	b2ad      	uxth	r5, r5
 80197a0:	b22e      	sxth	r6, r5
 80197a2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80197a6:	42b3      	cmp	r3, r6
 80197a8:	daf4      	bge.n	8019794 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80197aa:	6823      	ldr	r3, [r4, #0]
 80197ac:	4669      	mov	r1, sp
 80197ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80197b0:	4620      	mov	r0, r4
 80197b2:	4798      	blx	r3
 80197b4:	b940      	cbnz	r0, 80197c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80197b6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	d004      	beq.n	80197c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80197be:	3301      	adds	r3, #1
 80197c0:	105b      	asrs	r3, r3, #1
 80197c2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80197c6:	e7f0      	b.n	80197aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80197c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80197cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80197d0:	4413      	add	r3, r2
 80197d2:	b29b      	uxth	r3, r3
 80197d4:	441a      	add	r2, r3
 80197d6:	b212      	sxth	r2, r2
 80197d8:	4296      	cmp	r6, r2
 80197da:	f8ad 3002 	strh.w	r3, [sp, #2]
 80197de:	dae0      	bge.n	80197a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80197e0:	1aeb      	subs	r3, r5, r3
 80197e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80197e6:	e7dc      	b.n	80197a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80197e8:	f8bd 5000 	ldrh.w	r5, [sp]
 80197ec:	441d      	add	r5, r3
 80197ee:	b2ad      	uxth	r5, r5
 80197f0:	b22e      	sxth	r6, r5
 80197f2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80197f6:	42b3      	cmp	r3, r6
 80197f8:	dacc      	bge.n	8019794 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80197fa:	6823      	ldr	r3, [r4, #0]
 80197fc:	4669      	mov	r1, sp
 80197fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019800:	4620      	mov	r0, r4
 8019802:	4798      	blx	r3
 8019804:	b940      	cbnz	r0, 8019818 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8019806:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801980a:	2b01      	cmp	r3, #1
 801980c:	d004      	beq.n	8019818 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801980e:	3301      	adds	r3, #1
 8019810:	105b      	asrs	r3, r3, #1
 8019812:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019816:	e7f0      	b.n	80197fa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8019818:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801981c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019820:	4413      	add	r3, r2
 8019822:	b29b      	uxth	r3, r3
 8019824:	441a      	add	r2, r3
 8019826:	b212      	sxth	r2, r2
 8019828:	4296      	cmp	r6, r2
 801982a:	f8ad 3000 	strh.w	r3, [sp]
 801982e:	dae0      	bge.n	80197f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8019830:	1aeb      	subs	r3, r5, r3
 8019832:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019836:	e7dc      	b.n	80197f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8019838:	20011ff4 	.word	0x20011ff4

0801983c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801983c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801983e:	6803      	ldr	r3, [r0, #0]
 8019840:	4604      	mov	r4, r0
 8019842:	4601      	mov	r1, r0
 8019844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019846:	4668      	mov	r0, sp
 8019848:	4798      	blx	r3
 801984a:	2100      	movs	r1, #0
 801984c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8019850:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019854:	9102      	str	r1, [sp, #8]
 8019856:	4668      	mov	r0, sp
 8019858:	a902      	add	r1, sp, #8
 801985a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801985e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019862:	f7fe ff3d 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 8019866:	6823      	ldr	r3, [r4, #0]
 8019868:	4669      	mov	r1, sp
 801986a:	691b      	ldr	r3, [r3, #16]
 801986c:	4620      	mov	r0, r4
 801986e:	4798      	blx	r3
 8019870:	b004      	add	sp, #16
 8019872:	bd10      	pop	{r4, pc}

08019874 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019874:	2101      	movs	r1, #1
 8019876:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801987a:	490b      	ldr	r1, [pc, #44]	@ (80198a8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801987c:	2200      	movs	r2, #0
 801987e:	6001      	str	r1, [r0, #0]
 8019880:	21ff      	movs	r1, #255	@ 0xff
 8019882:	8082      	strh	r2, [r0, #4]
 8019884:	80c2      	strh	r2, [r0, #6]
 8019886:	8102      	strh	r2, [r0, #8]
 8019888:	8142      	strh	r2, [r0, #10]
 801988a:	8182      	strh	r2, [r0, #12]
 801988c:	81c2      	strh	r2, [r0, #14]
 801988e:	8202      	strh	r2, [r0, #16]
 8019890:	8242      	strh	r2, [r0, #18]
 8019892:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019896:	61c2      	str	r2, [r0, #28]
 8019898:	8402      	strh	r2, [r0, #32]
 801989a:	8442      	strh	r2, [r0, #34]	@ 0x22
 801989c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80198a0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80198a4:	6282      	str	r2, [r0, #40]	@ 0x28
 80198a6:	4770      	bx	lr
 80198a8:	08032ee4 	.word	0x08032ee4

080198ac <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 80198ac:	6301      	str	r1, [r0, #48]	@ 0x30
 80198ae:	4770      	bx	lr

080198b0 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 80198b0:	6341      	str	r1, [r0, #52]	@ 0x34
 80198b2:	4770      	bx	lr

080198b4 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 80198b4:	4770      	bx	lr

080198b6 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 80198b6:	4608      	mov	r0, r1
 80198b8:	4770      	bx	lr

080198ba <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80198ba:	b530      	push	{r4, r5, lr}
 80198bc:	460d      	mov	r5, r1
 80198be:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80198c0:	8949      	ldrh	r1, [r1, #10]
 80198c2:	b085      	sub	sp, #20
 80198c4:	1ac9      	subs	r1, r1, r3
 80198c6:	6803      	ldr	r3, [r0, #0]
 80198c8:	f10d 0206 	add.w	r2, sp, #6
 80198cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80198d0:	b209      	sxth	r1, r1
 80198d2:	4604      	mov	r4, r0
 80198d4:	4798      	blx	r3
 80198d6:	b1a0      	cbz	r0, 8019902 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80198d8:	792b      	ldrb	r3, [r5, #4]
 80198da:	b993      	cbnz	r3, 8019902 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80198dc:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80198e0:	b178      	cbz	r0, 8019902 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80198e2:	6803      	ldr	r3, [r0, #0]
 80198e4:	68db      	ldr	r3, [r3, #12]
 80198e6:	4798      	blx	r3
 80198e8:	b158      	cbz	r0, 8019902 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80198ea:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80198ee:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80198f2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80198f6:	9503      	str	r5, [sp, #12]
 80198f8:	6803      	ldr	r3, [r0, #0]
 80198fa:	aa02      	add	r2, sp, #8
 80198fc:	689b      	ldr	r3, [r3, #8]
 80198fe:	4621      	mov	r1, r4
 8019900:	4798      	blx	r3
 8019902:	b005      	add	sp, #20
 8019904:	bd30      	pop	{r4, r5, pc}

08019906 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8019906:	428a      	cmp	r2, r1
 8019908:	bfbc      	itt	lt
 801990a:	460b      	movlt	r3, r1
 801990c:	4611      	movlt	r1, r2
 801990e:	b510      	push	{r4, lr}
 8019910:	bfb8      	it	lt
 8019912:	461a      	movlt	r2, r3
 8019914:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8019918:	4604      	mov	r4, r0
 801991a:	428b      	cmp	r3, r1
 801991c:	d103      	bne.n	8019926 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 801991e:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8019922:	4293      	cmp	r3, r2
 8019924:	d011      	beq.n	801994a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8019926:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 801992a:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 801992e:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8019932:	f005 f989 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019936:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801993a:	f005 f985 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>
 801993e:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8019942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019946:	f005 b97f 	b.w	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>
 801994a:	bd10      	pop	{r4, pc}

0801994c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 801994c:	428a      	cmp	r2, r1
 801994e:	bfbc      	itt	lt
 8019950:	460b      	movlt	r3, r1
 8019952:	4611      	movlt	r1, r2
 8019954:	b510      	push	{r4, lr}
 8019956:	bfb8      	it	lt
 8019958:	461a      	movlt	r2, r3
 801995a:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 801995e:	4604      	mov	r4, r0
 8019960:	428b      	cmp	r3, r1
 8019962:	d103      	bne.n	801996c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8019964:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8019968:	4293      	cmp	r3, r2
 801996a:	d011      	beq.n	8019990 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 801996c:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8019970:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8019974:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8019978:	f005 f966 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>
 801997c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8019980:	f005 f962 	bl	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019984:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8019988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801998c:	f005 b95c 	b.w	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019990:	bd10      	pop	{r4, pc}

08019992 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8019992:	2300      	movs	r3, #0
 8019994:	3038      	adds	r0, #56	@ 0x38
 8019996:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 801999a:	f005 b955 	b.w	801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>

0801999e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 801999e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199a2:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80199a6:	4605      	mov	r5, r0
 80199a8:	460f      	mov	r7, r1
 80199aa:	4616      	mov	r6, r2
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d03d      	beq.n	8019a2c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80199b0:	6803      	ldr	r3, [r0, #0]
 80199b2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80199b6:	4798      	blx	r3
 80199b8:	682b      	ldr	r3, [r5, #0]
 80199ba:	b204      	sxth	r4, r0
 80199bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80199c0:	4628      	mov	r0, r5
 80199c2:	4798      	blx	r3
 80199c4:	b203      	sxth	r3, r0
 80199c6:	429c      	cmp	r4, r3
 80199c8:	bfc4      	itt	gt
 80199ca:	4622      	movgt	r2, r4
 80199cc:	461c      	movgt	r4, r3
 80199ce:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 80199d2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80199d6:	bfc8      	it	gt
 80199d8:	4613      	movgt	r3, r2
 80199da:	4284      	cmp	r4, r0
 80199dc:	da26      	bge.n	8019a2c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80199de:	4298      	cmp	r0, r3
 80199e0:	bfa8      	it	ge
 80199e2:	4618      	movge	r0, r3
 80199e4:	2800      	cmp	r0, #0
 80199e6:	db21      	blt.n	8019a2c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80199e8:	b9ef      	cbnz	r7, 8019a26 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 80199ea:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 80199ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80199f2:	4619      	mov	r1, r3
 80199f4:	42a0      	cmp	r0, r4
 80199f6:	dd0b      	ble.n	8019a10 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 80199f8:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 80199fc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8019a00:	3401      	adds	r4, #1
 8019a02:	4291      	cmp	r1, r2
 8019a04:	bfa8      	it	ge
 8019a06:	4611      	movge	r1, r2
 8019a08:	4293      	cmp	r3, r2
 8019a0a:	bfb8      	it	lt
 8019a0c:	4613      	movlt	r3, r2
 8019a0e:	e7f1      	b.n	80199f4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8019a10:	1b89      	subs	r1, r1, r6
 8019a12:	18f2      	adds	r2, r6, r3
 8019a14:	4291      	cmp	r1, r2
 8019a16:	d009      	beq.n	8019a2c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8019a18:	682b      	ldr	r3, [r5, #0]
 8019a1a:	4628      	mov	r0, r5
 8019a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8019a24:	4718      	bx	r3
 8019a26:	4273      	negs	r3, r6
 8019a28:	4631      	mov	r1, r6
 8019a2a:	e7e3      	b.n	80199f4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8019a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019a30 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8019a30:	b530      	push	{r4, r5, lr}
 8019a32:	790b      	ldrb	r3, [r1, #4]
 8019a34:	b085      	sub	sp, #20
 8019a36:	2b02      	cmp	r3, #2
 8019a38:	4604      	mov	r4, r0
 8019a3a:	460d      	mov	r5, r1
 8019a3c:	d020      	beq.n	8019a80 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8019a3e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8019a40:	88c9      	ldrh	r1, [r1, #6]
 8019a42:	f10d 0206 	add.w	r2, sp, #6
 8019a46:	1ac9      	subs	r1, r1, r3
 8019a48:	6803      	ldr	r3, [r0, #0]
 8019a4a:	b209      	sxth	r1, r1
 8019a4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8019a50:	4798      	blx	r3
 8019a52:	b1a8      	cbz	r0, 8019a80 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8019a54:	792b      	ldrb	r3, [r5, #4]
 8019a56:	2b01      	cmp	r3, #1
 8019a58:	d812      	bhi.n	8019a80 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8019a5a:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8019a5e:	b178      	cbz	r0, 8019a80 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8019a60:	6803      	ldr	r3, [r0, #0]
 8019a62:	68db      	ldr	r3, [r3, #12]
 8019a64:	4798      	blx	r3
 8019a66:	b158      	cbz	r0, 8019a80 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8019a68:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8019a6c:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8019a70:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019a74:	9503      	str	r5, [sp, #12]
 8019a76:	6803      	ldr	r3, [r0, #0]
 8019a78:	aa02      	add	r2, sp, #8
 8019a7a:	689b      	ldr	r3, [r3, #8]
 8019a7c:	4621      	mov	r1, r4
 8019a7e:	4798      	blx	r3
 8019a80:	b005      	add	sp, #20
 8019a82:	bd30      	pop	{r4, r5, pc}

08019a84 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8019a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a88:	4604      	mov	r4, r0
 8019a8a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8019a8e:	4690      	mov	r8, r2
 8019a90:	461f      	mov	r7, r3
 8019a92:	9e06      	ldr	r6, [sp, #24]
 8019a94:	b928      	cbnz	r0, 8019aa2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8019a96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a9a:	8033      	strh	r3, [r6, #0]
 8019a9c:	803b      	strh	r3, [r7, #0]
 8019a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aa2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8019aa6:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8019aaa:	1883      	adds	r3, r0, r2
 8019aac:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8019ab0:	1ad2      	subs	r2, r2, r3
 8019ab2:	b212      	sxth	r2, r2
 8019ab4:	2a01      	cmp	r2, #1
 8019ab6:	dc07      	bgt.n	8019ac8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8019ab8:	2300      	movs	r3, #0
 8019aba:	803b      	strh	r3, [r7, #0]
 8019abc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8019ac0:	3b01      	subs	r3, #1
 8019ac2:	8033      	strh	r3, [r6, #0]
 8019ac4:	2001      	movs	r0, #1
 8019ac6:	e7ea      	b.n	8019a9e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8019ac8:	1a08      	subs	r0, r1, r0
 8019aca:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8019ace:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8019ad2:	0140      	lsls	r0, r0, #5
 8019ad4:	1a5b      	subs	r3, r3, r1
 8019ad6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019ad8:	d45a      	bmi.n	8019b90 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10c>
 8019ada:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8019ade:	fb93 f1f5 	sdiv	r1, r3, r5
 8019ae2:	2302      	movs	r3, #2
 8019ae4:	fb91 f1f3 	sdiv	r1, r1, r3
 8019ae8:	3a01      	subs	r2, #1
 8019aea:	f005 fa78 	bl	801efde <_ZN8touchgfx6muldivElll>
 8019aee:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8019af2:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8019af6:	2900      	cmp	r1, #0
 8019af8:	db56      	blt.n	8019ba8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x124>
 8019afa:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8019afe:	fb93 f3fc 	sdiv	r3, r3, ip
 8019b02:	2502      	movs	r5, #2
 8019b04:	fb93 f3f5 	sdiv	r3, r3, r5
 8019b08:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8019b0c:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8019b10:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8019b14:	1a52      	subs	r2, r2, r1
 8019b16:	eba8 0003 	sub.w	r0, r8, r3
 8019b1a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8019b1e:	d44f      	bmi.n	8019bc0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13c>
 8019b20:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8019b24:	fb92 f1fc 	sdiv	r1, r2, ip
 8019b28:	2202      	movs	r2, #2
 8019b2a:	fb91 f1f2 	sdiv	r1, r1, r2
 8019b2e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8019b32:	4413      	add	r3, r2
 8019b34:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8019b38:	1ad2      	subs	r2, r2, r3
 8019b3a:	b212      	sxth	r2, r2
 8019b3c:	3a01      	subs	r2, #1
 8019b3e:	f005 fa4e 	bl	801efde <_ZN8touchgfx6muldivElll>
 8019b42:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8019b46:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	db45      	blt.n	8019bd8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x154>
 8019b4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8019b54:	2202      	movs	r2, #2
 8019b56:	fb93 f3f2 	sdiv	r3, r3, r2
 8019b5a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8019b5e:	429d      	cmp	r5, r3
 8019b60:	bfde      	ittt	le
 8019b62:	461a      	movle	r2, r3
 8019b64:	462b      	movle	r3, r5
 8019b66:	4615      	movle	r5, r2
 8019b68:	2020      	movs	r0, #32
 8019b6a:	2d00      	cmp	r5, #0
 8019b6c:	bfb8      	it	lt
 8019b6e:	fb95 f5f0 	sdivlt	r5, r5, r0
 8019b72:	b21b      	sxth	r3, r3
 8019b74:	fb93 f3f0 	sdiv	r3, r3, r0
 8019b78:	bfa4      	itt	ge
 8019b7a:	351f      	addge	r5, #31
 8019b7c:	116d      	asrge	r5, r5, #5
 8019b7e:	b22d      	sxth	r5, r5
 8019b80:	2d00      	cmp	r5, #0
 8019b82:	803b      	strh	r3, [r7, #0]
 8019b84:	8035      	strh	r5, [r6, #0]
 8019b86:	da33      	bge.n	8019bf0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16c>
 8019b88:	2000      	movs	r0, #0
 8019b8a:	8030      	strh	r0, [r6, #0]
 8019b8c:	8038      	strh	r0, [r7, #0]
 8019b8e:	e786      	b.n	8019a9e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8019b90:	f06f 0101 	mvn.w	r1, #1
 8019b94:	fb01 5303 	mla	r3, r1, r3, r5
 8019b98:	1e59      	subs	r1, r3, #1
 8019b9a:	fb91 f1f5 	sdiv	r1, r1, r5
 8019b9e:	2302      	movs	r3, #2
 8019ba0:	fb91 f1f3 	sdiv	r1, r1, r3
 8019ba4:	4249      	negs	r1, r1
 8019ba6:	e79f      	b.n	8019ae8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8019ba8:	f06f 0301 	mvn.w	r3, #1
 8019bac:	fb03 c301 	mla	r3, r3, r1, ip
 8019bb0:	3b01      	subs	r3, #1
 8019bb2:	fb93 f3fc 	sdiv	r3, r3, ip
 8019bb6:	2502      	movs	r5, #2
 8019bb8:	fb93 f3f5 	sdiv	r3, r3, r5
 8019bbc:	425b      	negs	r3, r3
 8019bbe:	e7a3      	b.n	8019b08 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8019bc0:	f06f 0101 	mvn.w	r1, #1
 8019bc4:	fb01 c202 	mla	r2, r1, r2, ip
 8019bc8:	1e51      	subs	r1, r2, #1
 8019bca:	fb91 f1fc 	sdiv	r1, r1, ip
 8019bce:	2202      	movs	r2, #2
 8019bd0:	fb91 f1f2 	sdiv	r1, r1, r2
 8019bd4:	4249      	negs	r1, r1
 8019bd6:	e7aa      	b.n	8019b2e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8019bd8:	f06f 0101 	mvn.w	r1, #1
 8019bdc:	fb01 2303 	mla	r3, r1, r3, r2
 8019be0:	3b01      	subs	r3, #1
 8019be2:	fb93 f3f2 	sdiv	r3, r3, r2
 8019be6:	2202      	movs	r2, #2
 8019be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8019bec:	425b      	negs	r3, r3
 8019bee:	e7b4      	b.n	8019b5a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8019bf0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8019bf4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8019bf8:	4293      	cmp	r3, r2
 8019bfa:	dc05      	bgt.n	8019c08 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x184>
 8019bfc:	3b01      	subs	r3, #1
 8019bfe:	b21b      	sxth	r3, r3
 8019c00:	8033      	strh	r3, [r6, #0]
 8019c02:	2000      	movs	r0, #0
 8019c04:	803b      	strh	r3, [r7, #0]
 8019c06:	e74a      	b.n	8019a9e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8019c08:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8019c0c:	803a      	strh	r2, [r7, #0]
 8019c0e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8019c12:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019c16:	4293      	cmp	r3, r2
 8019c18:	bfdc      	itt	le
 8019c1a:	f103 33ff 	addle.w	r3, r3, #4294967295
 8019c1e:	b21a      	sxthle	r2, r3
 8019c20:	8032      	strh	r2, [r6, #0]
 8019c22:	e74f      	b.n	8019ac4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

08019c24 <_ZN8touchgfx9ContainerC1Ev>:
 8019c24:	2101      	movs	r1, #1
 8019c26:	2200      	movs	r2, #0
 8019c28:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8019c2c:	4909      	ldr	r1, [pc, #36]	@ (8019c54 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8019c2e:	8082      	strh	r2, [r0, #4]
 8019c30:	80c2      	strh	r2, [r0, #6]
 8019c32:	8102      	strh	r2, [r0, #8]
 8019c34:	8142      	strh	r2, [r0, #10]
 8019c36:	8182      	strh	r2, [r0, #12]
 8019c38:	81c2      	strh	r2, [r0, #14]
 8019c3a:	8202      	strh	r2, [r0, #16]
 8019c3c:	8242      	strh	r2, [r0, #18]
 8019c3e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019c42:	61c2      	str	r2, [r0, #28]
 8019c44:	8402      	strh	r2, [r0, #32]
 8019c46:	8442      	strh	r2, [r0, #34]	@ 0x22
 8019c48:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8019c4c:	6001      	str	r1, [r0, #0]
 8019c4e:	6282      	str	r2, [r0, #40]	@ 0x28
 8019c50:	4770      	bx	lr
 8019c52:	bf00      	nop
 8019c54:	08032cc4 	.word	0x08032cc4

08019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8019c58:	6800      	ldr	r0, [r0, #0]
 8019c5a:	2800      	cmp	r0, #0
 8019c5c:	bfbd      	ittte	lt
 8019c5e:	2320      	movlt	r3, #32
 8019c60:	380f      	sublt	r0, #15
 8019c62:	fb90 f0f3 	sdivlt	r0, r0, r3
 8019c66:	3010      	addge	r0, #16
 8019c68:	bfa8      	it	ge
 8019c6a:	1140      	asrge	r0, r0, #5
 8019c6c:	4770      	bx	lr

08019c6e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8019c6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c72:	4605      	mov	r5, r0
 8019c74:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8019c78:	4688      	mov	r8, r1
 8019c7a:	4691      	mov	r9, r2
 8019c7c:	469a      	mov	sl, r3
 8019c7e:	b360      	cbz	r0, 8019cda <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8019c80:	2700      	movs	r7, #0
 8019c82:	f04f 3bff 	mov.w	fp, #4294967295
 8019c86:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8019c8a:	b23e      	sxth	r6, r7
 8019c8c:	42b3      	cmp	r3, r6
 8019c8e:	dd23      	ble.n	8019cd8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8019c90:	682b      	ldr	r3, [r5, #0]
 8019c92:	4631      	mov	r1, r6
 8019c94:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8019c98:	4628      	mov	r0, r5
 8019c9a:	4798      	blx	r3
 8019c9c:	9001      	str	r0, [sp, #4]
 8019c9e:	a801      	add	r0, sp, #4
 8019ca0:	f7ff ffda 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8019ca4:	682b      	ldr	r3, [r5, #0]
 8019ca6:	eba0 0008 	sub.w	r0, r0, r8
 8019caa:	b204      	sxth	r4, r0
 8019cac:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8019cb0:	4631      	mov	r1, r6
 8019cb2:	4628      	mov	r0, r5
 8019cb4:	4798      	blx	r3
 8019cb6:	9001      	str	r0, [sp, #4]
 8019cb8:	a801      	add	r0, sp, #4
 8019cba:	f7ff ffcd 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8019cbe:	eba0 0009 	sub.w	r0, r0, r9
 8019cc2:	fb10 f000 	smulbb	r0, r0, r0
 8019cc6:	fb04 0404 	mla	r4, r4, r4, r0
 8019cca:	455c      	cmp	r4, fp
 8019ccc:	bf3c      	itt	cc
 8019cce:	f8aa 6000 	strhcc.w	r6, [sl]
 8019cd2:	46a3      	movcc	fp, r4
 8019cd4:	3701      	adds	r7, #1
 8019cd6:	e7d6      	b.n	8019c86 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8019cd8:	2001      	movs	r0, #1
 8019cda:	b003      	add	sp, #12
 8019cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ce0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8019ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019ce4:	460e      	mov	r6, r1
 8019ce6:	2100      	movs	r1, #0
 8019ce8:	8011      	strh	r1, [r2, #0]
 8019cea:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8019cee:	4605      	mov	r5, r0
 8019cf0:	4617      	mov	r7, r2
 8019cf2:	b36b      	cbz	r3, 8019d50 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8019cf4:	6803      	ldr	r3, [r0, #0]
 8019cf6:	f10d 0808 	add.w	r8, sp, #8
 8019cfa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8019cfe:	4798      	blx	r3
 8019d00:	f848 0d04 	str.w	r0, [r8, #-4]!
 8019d04:	4640      	mov	r0, r8
 8019d06:	f7ff ffa7 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8019d0a:	2401      	movs	r4, #1
 8019d0c:	b200      	sxth	r0, r0
 8019d0e:	1b80      	subs	r0, r0, r6
 8019d10:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8019d14:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8019d18:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8019d1c:	42a3      	cmp	r3, r4
 8019d1e:	dd1b      	ble.n	8019d58 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 8019d20:	682b      	ldr	r3, [r5, #0]
 8019d22:	4621      	mov	r1, r4
 8019d24:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8019d28:	4628      	mov	r0, r5
 8019d2a:	4798      	blx	r3
 8019d2c:	9001      	str	r0, [sp, #4]
 8019d2e:	4640      	mov	r0, r8
 8019d30:	f7ff ff92 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8019d34:	b200      	sxth	r0, r0
 8019d36:	1b80      	subs	r0, r0, r6
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	bfb8      	it	lt
 8019d3c:	4240      	neglt	r0, r0
 8019d3e:	4548      	cmp	r0, r9
 8019d40:	bf38      	it	cc
 8019d42:	803c      	strhcc	r4, [r7, #0]
 8019d44:	f104 0401 	add.w	r4, r4, #1
 8019d48:	bf38      	it	cc
 8019d4a:	4681      	movcc	r9, r0
 8019d4c:	b224      	sxth	r4, r4
 8019d4e:	e7e3      	b.n	8019d18 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8019d50:	4618      	mov	r0, r3
 8019d52:	b003      	add	sp, #12
 8019d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d58:	2001      	movs	r0, #1
 8019d5a:	e7fa      	b.n	8019d52 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08019d5c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8019d5c:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8019d60:	f9bd 3000 	ldrsh.w	r3, [sp]
 8019d64:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8019d68:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8019d6c:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8019d70:	4770      	bx	lr

08019d72 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8019d72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d74:	4604      	mov	r4, r0
 8019d76:	3038      	adds	r0, #56	@ 0x38
 8019d78:	460d      	mov	r5, r1
 8019d7a:	f7fe fb37 	bl	80183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019d7e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8019d82:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8019d86:	9200      	str	r2, [sp, #0]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	4628      	mov	r0, r5
 8019d8c:	4611      	mov	r1, r2
 8019d8e:	f7f3 fbb3 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019d92:	b003      	add	sp, #12
 8019d94:	bd30      	pop	{r4, r5, pc}

08019d96 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8019d96:	b538      	push	{r3, r4, r5, lr}
 8019d98:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8019d9c:	460d      	mov	r5, r1
 8019d9e:	428b      	cmp	r3, r1
 8019da0:	dd08      	ble.n	8019db4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8019da2:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8019da4:	b134      	cbz	r4, 8019db4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	4620      	mov	r0, r4
 8019daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019dac:	4629      	mov	r1, r5
 8019dae:	4798      	blx	r3
 8019db0:	69a4      	ldr	r4, [r4, #24]
 8019db2:	e7f7      	b.n	8019da4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8019db4:	bd38      	pop	{r3, r4, r5, pc}

08019db6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8019db6:	b570      	push	{r4, r5, r6, lr}
 8019db8:	4606      	mov	r6, r0
 8019dba:	460d      	mov	r5, r1
 8019dbc:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8019dc0:	b134      	cbz	r4, 8019dd0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8019dc2:	6823      	ldr	r3, [r4, #0]
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019dc8:	4629      	mov	r1, r5
 8019dca:	4798      	blx	r3
 8019dcc:	69a4      	ldr	r4, [r4, #24]
 8019dce:	e7f7      	b.n	8019dc0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8019dd0:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8019dd4:	b134      	cbz	r4, 8019de4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8019dd6:	6823      	ldr	r3, [r4, #0]
 8019dd8:	4620      	mov	r0, r4
 8019dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ddc:	4629      	mov	r1, r5
 8019dde:	4798      	blx	r3
 8019de0:	69a4      	ldr	r4, [r4, #24]
 8019de2:	e7f7      	b.n	8019dd4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8019de4:	bd70      	pop	{r4, r5, r6, pc}

08019de6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8019de6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019de8:	4604      	mov	r4, r0
 8019dea:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8019dec:	b15d      	cbz	r5, 8019e06 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8019dee:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8019df2:	4628      	mov	r0, r5
 8019df4:	9200      	str	r2, [sp, #0]
 8019df6:	2200      	movs	r2, #0
 8019df8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8019dfc:	4611      	mov	r1, r2
 8019dfe:	f7f3 fb7b 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e02:	69ad      	ldr	r5, [r5, #24]
 8019e04:	e7f2      	b.n	8019dec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8019e06:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8019e0a:	b15d      	cbz	r5, 8019e24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8019e0c:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 8019e10:	4628      	mov	r0, r5
 8019e12:	9200      	str	r2, [sp, #0]
 8019e14:	2200      	movs	r2, #0
 8019e16:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 8019e1a:	4611      	mov	r1, r2
 8019e1c:	f7f3 fb6c 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e20:	69ad      	ldr	r5, [r5, #24]
 8019e22:	e7f2      	b.n	8019e0a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8019e24:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8019e28:	b15d      	cbz	r5, 8019e42 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8019e2a:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8019e2e:	4628      	mov	r0, r5
 8019e30:	9200      	str	r2, [sp, #0]
 8019e32:	2200      	movs	r2, #0
 8019e34:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8019e38:	4611      	mov	r1, r2
 8019e3a:	f7f3 fb5d 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e3e:	69ad      	ldr	r5, [r5, #24]
 8019e40:	e7f2      	b.n	8019e28 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8019e42:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8019e46:	b15d      	cbz	r5, 8019e60 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8019e48:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8019e4c:	4628      	mov	r0, r5
 8019e4e:	9200      	str	r2, [sp, #0]
 8019e50:	2200      	movs	r2, #0
 8019e52:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8019e56:	4611      	mov	r1, r2
 8019e58:	f7f3 fb4e 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e5c:	69ad      	ldr	r5, [r5, #24]
 8019e5e:	e7f2      	b.n	8019e46 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8019e60:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8019e64:	b15d      	cbz	r5, 8019e7e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8019e66:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8019e6a:	4628      	mov	r0, r5
 8019e6c:	9200      	str	r2, [sp, #0]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 8019e74:	4611      	mov	r1, r2
 8019e76:	f7f3 fb3f 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e7a:	69ad      	ldr	r5, [r5, #24]
 8019e7c:	e7f2      	b.n	8019e64 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8019e7e:	4620      	mov	r0, r4
 8019e80:	6823      	ldr	r3, [r4, #0]
 8019e82:	695b      	ldr	r3, [r3, #20]
 8019e84:	b003      	add	sp, #12
 8019e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e8a:	4718      	bx	r3

08019e8c <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8019e8c:	b430      	push	{r4, r5}
 8019e8e:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8019e92:	b28a      	uxth	r2, r1
 8019e94:	1b15      	subs	r5, r2, r4
 8019e96:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8019e9a:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8019e9e:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8019ea2:	442c      	add	r4, r5
 8019ea4:	1b12      	subs	r2, r2, r4
 8019ea6:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8019eaa:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8019eae:	8101      	strh	r1, [r0, #8]
 8019eb0:	bc30      	pop	{r4, r5}
 8019eb2:	f7ff bf98 	b.w	8019de6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08019eb6 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8019eb6:	b430      	push	{r4, r5}
 8019eb8:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8019ebc:	b28a      	uxth	r2, r1
 8019ebe:	1b15      	subs	r5, r2, r4
 8019ec0:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 8019ec4:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8019ec8:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8019ecc:	442c      	add	r4, r5
 8019ece:	1b12      	subs	r2, r2, r4
 8019ed0:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 8019ed4:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 8019ed8:	8141      	strh	r1, [r0, #10]
 8019eda:	bc30      	pop	{r4, r5}
 8019edc:	f7ff bf83 	b.w	8019de6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08019ee0 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8019ee0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ee4:	4604      	mov	r4, r0
 8019ee6:	4615      	mov	r5, r2
 8019ee8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8019eec:	fa1f fa83 	uxth.w	sl, r3
 8019ef0:	4699      	mov	r9, r3
 8019ef2:	8903      	ldrh	r3, [r0, #8]
 8019ef4:	fa1f f887 	uxth.w	r8, r7
 8019ef8:	4452      	add	r2, sl
 8019efa:	8940      	ldrh	r0, [r0, #10]
 8019efc:	1a9b      	subs	r3, r3, r2
 8019efe:	eb08 0201 	add.w	r2, r8, r1
 8019f02:	1a80      	subs	r0, r0, r2
 8019f04:	b200      	sxth	r0, r0
 8019f06:	460e      	mov	r6, r1
 8019f08:	9000      	str	r0, [sp, #0]
 8019f0a:	460a      	mov	r2, r1
 8019f0c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8019f10:	4629      	mov	r1, r5
 8019f12:	b21b      	sxth	r3, r3
 8019f14:	f7f3 faf0 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019f18:	2200      	movs	r2, #0
 8019f1a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8019f1e:	4611      	mov	r1, r2
 8019f20:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8019f24:	9600      	str	r6, [sp, #0]
 8019f26:	f7f3 fae7 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019f30:	4611      	mov	r1, r2
 8019f32:	9300      	str	r3, [sp, #0]
 8019f34:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8019f38:	462b      	mov	r3, r5
 8019f3a:	f7f3 fadd 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019f3e:	8921      	ldrh	r1, [r4, #8]
 8019f40:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019f44:	eba1 010a 	sub.w	r1, r1, sl
 8019f48:	9300      	str	r3, [sp, #0]
 8019f4a:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8019f4e:	464b      	mov	r3, r9
 8019f50:	2200      	movs	r2, #0
 8019f52:	b209      	sxth	r1, r1
 8019f54:	f7f3 fad0 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019f58:	8962      	ldrh	r2, [r4, #10]
 8019f5a:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8019f5e:	eba2 0208 	sub.w	r2, r2, r8
 8019f62:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8019f66:	9700      	str	r7, [sp, #0]
 8019f68:	b212      	sxth	r2, r2
 8019f6a:	2100      	movs	r1, #0
 8019f6c:	f7f3 fac4 	bl	800d4f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019f70:	4620      	mov	r0, r4
 8019f72:	b002      	add	sp, #8
 8019f74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f78:	f7ff bf35 	b.w	8019de6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08019f7c <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8019f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f80:	4604      	mov	r4, r0
 8019f82:	b085      	sub	sp, #20
 8019f84:	9103      	str	r1, [sp, #12]
 8019f86:	f7ff fe4d 	bl	8019c24 <_ZN8touchgfx9ContainerC1Ev>
 8019f8a:	4b2d      	ldr	r3, [pc, #180]	@ (801a040 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8019f8c:	2601      	movs	r6, #1
 8019f8e:	6023      	str	r3, [r4, #0]
 8019f90:	23ff      	movs	r3, #255	@ 0xff
 8019f92:	2500      	movs	r5, #0
 8019f94:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8019f98:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019f9c:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8019fa0:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8019fa4:	4658      	mov	r0, fp
 8019fa6:	f7ff fe3d 	bl	8019c24 <_ZN8touchgfx9ContainerC1Ev>
 8019faa:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8019fae:	4648      	mov	r0, r9
 8019fb0:	f7ff fe38 	bl	8019c24 <_ZN8touchgfx9ContainerC1Ev>
 8019fb4:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8019fb8:	4640      	mov	r0, r8
 8019fba:	f7ff fe33 	bl	8019c24 <_ZN8touchgfx9ContainerC1Ev>
 8019fbe:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8019fc2:	4650      	mov	r0, sl
 8019fc4:	f7ff fe2e 	bl	8019c24 <_ZN8touchgfx9ContainerC1Ev>
 8019fc8:	4638      	mov	r0, r7
 8019fca:	f7ff fe2b 	bl	8019c24 <_ZN8touchgfx9ContainerC1Ev>
 8019fce:	9903      	ldr	r1, [sp, #12]
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 8019fd6:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 8019fda:	4659      	mov	r1, fp
 8019fdc:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8019fe0:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8019fe4:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8019fe8:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8019fec:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8019ff0:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8019ff4:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8019ff8:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8019ffc:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 801a000:	f7fe f9f4 	bl	80183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a004:	4651      	mov	r1, sl
 801a006:	4620      	mov	r0, r4
 801a008:	f7fe f9f0 	bl	80183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a00c:	4649      	mov	r1, r9
 801a00e:	4620      	mov	r0, r4
 801a010:	f7fe f9ec 	bl	80183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a014:	4641      	mov	r1, r8
 801a016:	4620      	mov	r0, r4
 801a018:	f7fe f9e8 	bl	80183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a01c:	4639      	mov	r1, r7
 801a01e:	4620      	mov	r0, r4
 801a020:	f7fe f9e4 	bl	80183ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a024:	4620      	mov	r0, r4
 801a026:	9500      	str	r5, [sp, #0]
 801a028:	462b      	mov	r3, r5
 801a02a:	462a      	mov	r2, r5
 801a02c:	4629      	mov	r1, r5
 801a02e:	f7ff ff57 	bl	8019ee0 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801a032:	4620      	mov	r0, r4
 801a034:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 801a038:	b005      	add	sp, #20
 801a03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a03e:	bf00      	nop
 801a040:	080330f4 	.word	0x080330f4

0801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 801a044:	4291      	cmp	r1, r2
 801a046:	4613      	mov	r3, r2
 801a048:	d003      	beq.n	801a052 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 801a04a:	460a      	mov	r2, r1
 801a04c:	4619      	mov	r1, r3
 801a04e:	f004 bfc6 	b.w	801efde <_ZN8touchgfx6muldivElll>
 801a052:	4770      	bx	lr

0801a054 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 801a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a058:	6803      	ldr	r3, [r0, #0]
 801a05a:	460d      	mov	r5, r1
 801a05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a060:	4604      	mov	r4, r0
 801a062:	4798      	blx	r3
 801a064:	42a8      	cmp	r0, r5
 801a066:	4606      	mov	r6, r0
 801a068:	d024      	beq.n	801a0b4 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 801a06a:	6823      	ldr	r3, [r4, #0]
 801a06c:	4601      	mov	r1, r0
 801a06e:	462a      	mov	r2, r5
 801a070:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 801a074:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 801a078:	f7ff ffe4 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801a07c:	462a      	mov	r2, r5
 801a07e:	4680      	mov	r8, r0
 801a080:	4631      	mov	r1, r6
 801a082:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 801a086:	f7ff ffdd 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801a08a:	4641      	mov	r1, r8
 801a08c:	4602      	mov	r2, r0
 801a08e:	4620      	mov	r0, r4
 801a090:	47b8      	blx	r7
 801a092:	462a      	mov	r2, r5
 801a094:	4631      	mov	r1, r6
 801a096:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 801a09a:	f7ff ffd3 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801a09e:	462a      	mov	r2, r5
 801a0a0:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 801a0a4:	4631      	mov	r1, r6
 801a0a6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 801a0aa:	f7ff ffcb 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801a0ae:	6325      	str	r5, [r4, #48]	@ 0x30
 801a0b0:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 801a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0b8 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 801a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0bc:	4604      	mov	r4, r0
 801a0be:	460f      	mov	r7, r1
 801a0c0:	b1ba      	cbz	r2, 801a0f2 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 801a0c2:	6803      	ldr	r3, [r0, #0]
 801a0c4:	2600      	movs	r6, #0
 801a0c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801a0ca:	4798      	blx	r3
 801a0cc:	4681      	mov	r9, r0
 801a0ce:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801a0d2:	b235      	sxth	r5, r6
 801a0d4:	42ab      	cmp	r3, r5
 801a0d6:	f106 0601 	add.w	r6, r6, #1
 801a0da:	dd0a      	ble.n	801a0f2 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 801a0dc:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 801a0e0:	463a      	mov	r2, r7
 801a0e2:	4649      	mov	r1, r9
 801a0e4:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 801a0e8:	f7ff ffac 	bl	801a044 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801a0ec:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 801a0f0:	e7ed      	b.n	801a0ce <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 801a0f2:	6367      	str	r7, [r4, #52]	@ 0x34
 801a0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a0f8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 801a0f8:	b570      	push	{r4, r5, r6, lr}
 801a0fa:	4604      	mov	r4, r0
 801a0fc:	460d      	mov	r5, r1
 801a0fe:	6803      	ldr	r3, [r0, #0]
 801a100:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801a104:	4798      	blx	r3
 801a106:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 801a10a:	4629      	mov	r1, r5
 801a10c:	3301      	adds	r3, #1
 801a10e:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 801a112:	6823      	ldr	r3, [r4, #0]
 801a114:	4620      	mov	r0, r4
 801a116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a11a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801a11e:	4718      	bx	r3

0801a120 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a122:	4604      	mov	r4, r0
 801a124:	4608      	mov	r0, r1
 801a126:	460d      	mov	r5, r1
 801a128:	f7fe fb1d 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a12c:	b978      	cbnz	r0, 801a14e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a12e:	4620      	mov	r0, r4
 801a130:	f7fe fb19 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a134:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a138:	b150      	cbz	r0, 801a150 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a13a:	8026      	strh	r6, [r4, #0]
 801a13c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a140:	8063      	strh	r3, [r4, #2]
 801a142:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a146:	80a3      	strh	r3, [r4, #4]
 801a148:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a14c:	80e3      	strh	r3, [r4, #6]
 801a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a150:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a154:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a158:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a15c:	42b1      	cmp	r1, r6
 801a15e:	460f      	mov	r7, r1
 801a160:	bfa8      	it	ge
 801a162:	4637      	movge	r7, r6
 801a164:	4293      	cmp	r3, r2
 801a166:	4618      	mov	r0, r3
 801a168:	bfa8      	it	ge
 801a16a:	4610      	movge	r0, r2
 801a16c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a170:	88ed      	ldrh	r5, [r5, #6]
 801a172:	4466      	add	r6, ip
 801a174:	442a      	add	r2, r5
 801a176:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a17a:	88e5      	ldrh	r5, [r4, #6]
 801a17c:	4461      	add	r1, ip
 801a17e:	442b      	add	r3, r5
 801a180:	b236      	sxth	r6, r6
 801a182:	b209      	sxth	r1, r1
 801a184:	b212      	sxth	r2, r2
 801a186:	b21b      	sxth	r3, r3
 801a188:	428e      	cmp	r6, r1
 801a18a:	bfac      	ite	ge
 801a18c:	ebc7 0106 	rsbge	r1, r7, r6
 801a190:	ebc7 0101 	rsblt	r1, r7, r1
 801a194:	429a      	cmp	r2, r3
 801a196:	bfac      	ite	ge
 801a198:	ebc0 0202 	rsbge	r2, r0, r2
 801a19c:	ebc0 0203 	rsblt	r2, r0, r3
 801a1a0:	8027      	strh	r7, [r4, #0]
 801a1a2:	8060      	strh	r0, [r4, #2]
 801a1a4:	80a1      	strh	r1, [r4, #4]
 801a1a6:	80e2      	strh	r2, [r4, #6]
 801a1a8:	e7d1      	b.n	801a14e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801a1aa <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 801a1aa:	6800      	ldr	r0, [r0, #0]
 801a1ac:	2800      	cmp	r0, #0
 801a1ae:	bfb9      	ittee	lt
 801a1b0:	2320      	movlt	r3, #32
 801a1b2:	fb90 f0f3 	sdivlt	r0, r0, r3
 801a1b6:	301f      	addge	r0, #31
 801a1b8:	1140      	asrge	r0, r0, #5
 801a1ba:	4770      	bx	lr

0801a1bc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 801a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c0:	6803      	ldr	r3, [r0, #0]
 801a1c2:	6945      	ldr	r5, [r0, #20]
 801a1c4:	b093      	sub	sp, #76	@ 0x4c
 801a1c6:	4604      	mov	r4, r0
 801a1c8:	460f      	mov	r7, r1
 801a1ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a1cc:	2d00      	cmp	r5, #0
 801a1ce:	f000 81ad 	beq.w	801a52c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 801a1d2:	696d      	ldr	r5, [r5, #20]
 801a1d4:	4798      	blx	r3
 801a1d6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d077      	beq.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a1de:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a1e2:	fb13 f000 	smulbb	r0, r3, r0
 801a1e6:	b283      	uxth	r3, r0
 801a1e8:	1c58      	adds	r0, r3, #1
 801a1ea:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a1ee:	1200      	asrs	r0, r0, #8
 801a1f0:	d06d      	beq.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a1f2:	b2c3      	uxtb	r3, r0
 801a1f4:	9308      	str	r3, [sp, #32]
 801a1f6:	6823      	ldr	r3, [r4, #0]
 801a1f8:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 801a1fc:	462a      	mov	r2, r5
 801a1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a202:	4621      	mov	r1, r4
 801a204:	4640      	mov	r0, r8
 801a206:	ae0e      	add	r6, sp, #56	@ 0x38
 801a208:	4798      	blx	r3
 801a20a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801a20e:	e886 0003 	stmia.w	r6, {r0, r1}
 801a212:	4639      	mov	r1, r7
 801a214:	4630      	mov	r0, r6
 801a216:	f7fe fa63 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801a21a:	6823      	ldr	r3, [r4, #0]
 801a21c:	4629      	mov	r1, r5
 801a21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a222:	4620      	mov	r0, r4
 801a224:	4798      	blx	r3
 801a226:	6823      	ldr	r3, [r4, #0]
 801a228:	4607      	mov	r7, r0
 801a22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801a22e:	4629      	mov	r1, r5
 801a230:	4620      	mov	r0, r4
 801a232:	4798      	blx	r3
 801a234:	4681      	mov	r9, r0
 801a236:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 801a23a:	4629      	mov	r1, r5
 801a23c:	0103      	lsls	r3, r0, #4
 801a23e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a240:	6823      	ldr	r3, [r4, #0]
 801a242:	4620      	mov	r0, r4
 801a244:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a248:	4798      	blx	r3
 801a24a:	b203      	sxth	r3, r0
 801a24c:	9306      	str	r3, [sp, #24]
 801a24e:	6823      	ldr	r3, [r4, #0]
 801a250:	4629      	mov	r1, r5
 801a252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801a256:	4620      	mov	r0, r4
 801a258:	4798      	blx	r3
 801a25a:	2f00      	cmp	r7, #0
 801a25c:	b203      	sxth	r3, r0
 801a25e:	9307      	str	r3, [sp, #28]
 801a260:	d138      	bne.n	801a2d4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 801a262:	f1b9 0f00 	cmp.w	r9, #0
 801a266:	d132      	bne.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a268:	6823      	ldr	r3, [r4, #0]
 801a26a:	464a      	mov	r2, r9
 801a26c:	4629      	mov	r1, r5
 801a26e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a272:	4620      	mov	r0, r4
 801a274:	4798      	blx	r3
 801a276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a278:	1ac0      	subs	r0, r0, r3
 801a27a:	9010      	str	r0, [sp, #64]	@ 0x40
 801a27c:	4640      	mov	r0, r8
 801a27e:	f7ff fceb 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a282:	6823      	ldr	r3, [r4, #0]
 801a284:	4607      	mov	r7, r0
 801a286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801a28a:	4629      	mov	r1, r5
 801a28c:	4620      	mov	r0, r4
 801a28e:	4798      	blx	r3
 801a290:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a294:	1a38      	subs	r0, r7, r0
 801a296:	fa0f f880 	sxth.w	r8, r0
 801a29a:	eb13 0f08 	cmn.w	r3, r8
 801a29e:	d416      	bmi.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a2a0:	6823      	ldr	r3, [r4, #0]
 801a2a2:	4629      	mov	r1, r5
 801a2a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	4798      	blx	r3
 801a2ac:	4580      	cmp	r8, r0
 801a2ae:	da0e      	bge.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a2b0:	9a08      	ldr	r2, [sp, #32]
 801a2b2:	6823      	ldr	r3, [r4, #0]
 801a2b4:	9202      	str	r2, [sp, #8]
 801a2b6:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801a2ba:	b23f      	sxth	r7, r7
 801a2bc:	9201      	str	r2, [sp, #4]
 801a2be:	9700      	str	r7, [sp, #0]
 801a2c0:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 801a2c4:	4631      	mov	r1, r6
 801a2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a2ca:	4620      	mov	r0, r4
 801a2cc:	47a8      	blx	r5
 801a2ce:	b013      	add	sp, #76	@ 0x4c
 801a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d4:	ddfb      	ble.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a2d6:	6823      	ldr	r3, [r4, #0]
 801a2d8:	4629      	mov	r1, r5
 801a2da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801a2de:	4620      	mov	r0, r4
 801a2e0:	4798      	blx	r3
 801a2e2:	6823      	ldr	r3, [r4, #0]
 801a2e4:	4683      	mov	fp, r0
 801a2e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a2ea:	4629      	mov	r1, r5
 801a2ec:	4620      	mov	r0, r4
 801a2ee:	4798      	blx	r3
 801a2f0:	eba0 030b 	sub.w	r3, r0, fp
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	bfb8      	it	lt
 801a2f8:	425b      	neglt	r3, r3
 801a2fa:	fb93 f3f7 	sdiv	r3, r3, r7
 801a2fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801a302:	4680      	mov	r8, r0
 801a304:	dce3      	bgt.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a306:	6823      	ldr	r3, [r4, #0]
 801a308:	465a      	mov	r2, fp
 801a30a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a30e:	4629      	mov	r1, r5
 801a310:	4620      	mov	r0, r4
 801a312:	4798      	blx	r3
 801a314:	6823      	ldr	r3, [r4, #0]
 801a316:	4606      	mov	r6, r0
 801a318:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a31c:	4642      	mov	r2, r8
 801a31e:	4629      	mov	r1, r5
 801a320:	4620      	mov	r0, r4
 801a322:	4798      	blx	r3
 801a324:	42b0      	cmp	r0, r6
 801a326:	bfa2      	ittt	ge
 801a328:	4643      	movge	r3, r8
 801a32a:	46d8      	movge	r8, fp
 801a32c:	469b      	movge	fp, r3
 801a32e:	fb98 f6f7 	sdiv	r6, r8, r7
 801a332:	45d8      	cmp	r8, fp
 801a334:	bfac      	ite	ge
 801a336:	f04f 33ff 	movge.w	r3, #4294967295
 801a33a:	2301      	movlt	r3, #1
 801a33c:	fb9b f2f7 	sdiv	r2, fp, r7
 801a340:	1af6      	subs	r6, r6, r3
 801a342:	441a      	add	r2, r3
 801a344:	4296      	cmp	r6, r2
 801a346:	bfac      	ite	ge
 801a348:	f04f 3aff 	movge.w	sl, #4294967295
 801a34c:	f04f 0a01 	movlt.w	sl, #1
 801a350:	f1b9 0f00 	cmp.w	r9, #0
 801a354:	d13e      	bne.n	801a3d4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 801a356:	fb07 fb0a 	mul.w	fp, r7, sl
 801a35a:	4377      	muls	r7, r6
 801a35c:	eb0a 0802 	add.w	r8, sl, r2
 801a360:	45b0      	cmp	r8, r6
 801a362:	d0b4      	beq.n	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a364:	6823      	ldr	r3, [r4, #0]
 801a366:	463a      	mov	r2, r7
 801a368:	4629      	mov	r1, r5
 801a36a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a36e:	4620      	mov	r0, r4
 801a370:	4798      	blx	r3
 801a372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a374:	1ac0      	subs	r0, r0, r3
 801a376:	9010      	str	r0, [sp, #64]	@ 0x40
 801a378:	a810      	add	r0, sp, #64	@ 0x40
 801a37a:	f7ff fc6d 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a37e:	6823      	ldr	r3, [r4, #0]
 801a380:	4681      	mov	r9, r0
 801a382:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801a386:	4629      	mov	r1, r5
 801a388:	4620      	mov	r0, r4
 801a38a:	4798      	blx	r3
 801a38c:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801a390:	eba9 0000 	sub.w	r0, r9, r0
 801a394:	b203      	sxth	r3, r0
 801a396:	42da      	cmn	r2, r3
 801a398:	9304      	str	r3, [sp, #16]
 801a39a:	d418      	bmi.n	801a3ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 801a39c:	6822      	ldr	r2, [r4, #0]
 801a39e:	4629      	mov	r1, r5
 801a3a0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	4790      	blx	r2
 801a3a8:	9b04      	ldr	r3, [sp, #16]
 801a3aa:	4283      	cmp	r3, r0
 801a3ac:	da0f      	bge.n	801a3ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 801a3ae:	9b08      	ldr	r3, [sp, #32]
 801a3b0:	6822      	ldr	r2, [r4, #0]
 801a3b2:	9302      	str	r3, [sp, #8]
 801a3b4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a3b8:	a90e      	add	r1, sp, #56	@ 0x38
 801a3ba:	9301      	str	r3, [sp, #4]
 801a3bc:	fa0f f389 	sxth.w	r3, r9
 801a3c0:	9300      	str	r3, [sp, #0]
 801a3c2:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a3cc:	47c8      	blx	r9
 801a3ce:	4456      	add	r6, sl
 801a3d0:	445f      	add	r7, fp
 801a3d2:	e7c5      	b.n	801a360 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 801a3d4:	fb98 f8f9 	sdiv	r8, r8, r9
 801a3d8:	eba8 0203 	sub.w	r2, r8, r3
 801a3dc:	fb9b f8f9 	sdiv	r8, fp, r9
 801a3e0:	4498      	add	r8, r3
 801a3e2:	4542      	cmp	r2, r8
 801a3e4:	bfac      	ite	ge
 801a3e6:	f04f 33ff 	movge.w	r3, #4294967295
 801a3ea:	2301      	movlt	r3, #1
 801a3ec:	930a      	str	r3, [sp, #40]	@ 0x28
 801a3ee:	6823      	ldr	r3, [r4, #0]
 801a3f0:	4629      	mov	r1, r5
 801a3f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a3f6:	9204      	str	r2, [sp, #16]
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	fb02 f209 	mul.w	r2, r2, r9
 801a3fe:	4798      	blx	r3
 801a400:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 801a404:	f84b 0d08 	str.w	r0, [fp, #-8]!
 801a408:	4658      	mov	r0, fp
 801a40a:	f7ff fc25 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a40e:	b203      	sxth	r3, r0
 801a410:	9305      	str	r3, [sp, #20]
 801a412:	6823      	ldr	r3, [r4, #0]
 801a414:	fb06 f207 	mul.w	r2, r6, r7
 801a418:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a41c:	4629      	mov	r1, r5
 801a41e:	4620      	mov	r0, r4
 801a420:	4798      	blx	r3
 801a422:	9010      	str	r0, [sp, #64]	@ 0x40
 801a424:	4658      	mov	r0, fp
 801a426:	f7ff fc17 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a42a:	fb07 f20a 	mul.w	r2, r7, sl
 801a42e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a430:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a432:	b203      	sxth	r3, r0
 801a434:	4442      	add	r2, r8
 801a436:	920c      	str	r2, [sp, #48]	@ 0x30
 801a438:	9a05      	ldr	r2, [sp, #20]
 801a43a:	429a      	cmp	r2, r3
 801a43c:	dc16      	bgt.n	801a46c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 801a43e:	eb06 080a 	add.w	r8, r6, sl
 801a442:	fb07 f808 	mul.w	r8, r7, r8
 801a446:	9a05      	ldr	r2, [sp, #20]
 801a448:	429a      	cmp	r2, r3
 801a44a:	db54      	blt.n	801a4f6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 801a44c:	6823      	ldr	r3, [r4, #0]
 801a44e:	4642      	mov	r2, r8
 801a450:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a454:	4629      	mov	r1, r5
 801a456:	4620      	mov	r0, r4
 801a458:	4798      	blx	r3
 801a45a:	9010      	str	r0, [sp, #64]	@ 0x40
 801a45c:	4658      	mov	r0, fp
 801a45e:	f7ff fbfb 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a462:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a464:	4456      	add	r6, sl
 801a466:	b203      	sxth	r3, r0
 801a468:	4490      	add	r8, r2
 801a46a:	e7ec      	b.n	801a446 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 801a46c:	6823      	ldr	r3, [r4, #0]
 801a46e:	fb07 f206 	mul.w	r2, r7, r6
 801a472:	4629      	mov	r1, r5
 801a474:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a478:	4620      	mov	r0, r4
 801a47a:	4798      	blx	r3
 801a47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a47e:	1ac0      	subs	r0, r0, r3
 801a480:	9010      	str	r0, [sp, #64]	@ 0x40
 801a482:	4658      	mov	r0, fp
 801a484:	f7ff fbe8 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a488:	6823      	ldr	r3, [r4, #0]
 801a48a:	4680      	mov	r8, r0
 801a48c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801a490:	4629      	mov	r1, r5
 801a492:	4620      	mov	r0, r4
 801a494:	4798      	blx	r3
 801a496:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801a49a:	eba8 0000 	sub.w	r0, r8, r0
 801a49e:	b203      	sxth	r3, r0
 801a4a0:	42da      	cmn	r2, r3
 801a4a2:	930d      	str	r3, [sp, #52]	@ 0x34
 801a4a4:	d418      	bmi.n	801a4d8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 801a4a6:	6822      	ldr	r2, [r4, #0]
 801a4a8:	4629      	mov	r1, r5
 801a4aa:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	4790      	blx	r2
 801a4b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a4b4:	4283      	cmp	r3, r0
 801a4b6:	da0f      	bge.n	801a4d8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 801a4b8:	9b08      	ldr	r3, [sp, #32]
 801a4ba:	6822      	ldr	r2, [r4, #0]
 801a4bc:	9302      	str	r3, [sp, #8]
 801a4be:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a4c2:	a90e      	add	r1, sp, #56	@ 0x38
 801a4c4:	9301      	str	r3, [sp, #4]
 801a4c6:	fa0f f388 	sxth.w	r3, r8
 801a4ca:	9300      	str	r3, [sp, #0]
 801a4cc:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 801a4d0:	4620      	mov	r0, r4
 801a4d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a4d6:	47c0      	blx	r8
 801a4d8:	6823      	ldr	r3, [r4, #0]
 801a4da:	4456      	add	r6, sl
 801a4dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801a4e0:	fb06 f207 	mul.w	r2, r6, r7
 801a4e4:	4629      	mov	r1, r5
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	4798      	blx	r3
 801a4ea:	9010      	str	r0, [sp, #64]	@ 0x40
 801a4ec:	4658      	mov	r0, fp
 801a4ee:	f7ff fbb3 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a4f2:	b203      	sxth	r3, r0
 801a4f4:	e7a0      	b.n	801a438 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 801a4f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4f8:	930d      	str	r3, [sp, #52]	@ 0x34
 801a4fa:	9b04      	ldr	r3, [sp, #16]
 801a4fc:	4413      	add	r3, r2
 801a4fe:	9304      	str	r3, [sp, #16]
 801a500:	9a04      	ldr	r2, [sp, #16]
 801a502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a504:	4293      	cmp	r3, r2
 801a506:	f43f aee2 	beq.w	801a2ce <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801a50a:	9b04      	ldr	r3, [sp, #16]
 801a50c:	6822      	ldr	r2, [r4, #0]
 801a50e:	4629      	mov	r1, r5
 801a510:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 801a514:	4620      	mov	r0, r4
 801a516:	fb03 f209 	mul.w	r2, r3, r9
 801a51a:	47c0      	blx	r8
 801a51c:	9010      	str	r0, [sp, #64]	@ 0x40
 801a51e:	4658      	mov	r0, fp
 801a520:	f7ff fb9a 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a524:	b203      	sxth	r3, r0
 801a526:	9305      	str	r3, [sp, #20]
 801a528:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a52a:	e785      	b.n	801a438 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 801a52c:	4798      	blx	r3
 801a52e:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a532:	deff      	udf	#255	@ 0xff

0801a534 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801a534:	b510      	push	{r4, lr}
 801a536:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801a53a:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801a53e:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801a542:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801a546:	13a4      	asrs	r4, r4, #14
 801a548:	139b      	asrs	r3, r3, #14
 801a54a:	429c      	cmp	r4, r3
 801a54c:	bfb8      	it	lt
 801a54e:	461c      	movlt	r4, r3
 801a550:	2c01      	cmp	r4, #1
 801a552:	dd07      	ble.n	801a564 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801a554:	fb91 f1f4 	sdiv	r1, r1, r4
 801a558:	fb90 f0f4 	sdiv	r0, r0, r4
 801a55c:	f7ff ffea 	bl	801a534 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801a560:	4360      	muls	r0, r4
 801a562:	bd10      	pop	{r4, pc}
 801a564:	4340      	muls	r0, r0
 801a566:	fb01 0101 	mla	r1, r1, r1, r0
 801a56a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801a56e:	bfb4      	ite	lt
 801a570:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 801a574:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 801a578:	2000      	movs	r0, #0
 801a57a:	18c2      	adds	r2, r0, r3
 801a57c:	428a      	cmp	r2, r1
 801a57e:	bf9c      	itt	ls
 801a580:	1898      	addls	r0, r3, r2
 801a582:	1a89      	subls	r1, r1, r2
 801a584:	089b      	lsrs	r3, r3, #2
 801a586:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801a58a:	d1f6      	bne.n	801a57a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 801a58c:	e7e9      	b.n	801a562 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0801a58e <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 801a58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a590:	9906      	ldr	r1, [sp, #24]
 801a592:	4606      	mov	r6, r0
 801a594:	4291      	cmp	r1, r2
 801a596:	bfbc      	itt	lt
 801a598:	9206      	strlt	r2, [sp, #24]
 801a59a:	460a      	movlt	r2, r1
 801a59c:	9907      	ldr	r1, [sp, #28]
 801a59e:	461c      	mov	r4, r3
 801a5a0:	428b      	cmp	r3, r1
 801a5a2:	bfc8      	it	gt
 801a5a4:	460c      	movgt	r4, r1
 801a5a6:	f04f 0020 	mov.w	r0, #32
 801a5aa:	fb92 f5f0 	sdiv	r5, r2, r0
 801a5ae:	fb94 f4f0 	sdiv	r4, r4, r0
 801a5b2:	a806      	add	r0, sp, #24
 801a5b4:	bfc8      	it	gt
 801a5b6:	9307      	strgt	r3, [sp, #28]
 801a5b8:	f7ff fdf7 	bl	801a1aa <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801a5bc:	4607      	mov	r7, r0
 801a5be:	a807      	add	r0, sp, #28
 801a5c0:	f7ff fdf3 	bl	801a1aa <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801a5c4:	1b7a      	subs	r2, r7, r5
 801a5c6:	1b00      	subs	r0, r0, r4
 801a5c8:	80f0      	strh	r0, [r6, #6]
 801a5ca:	8035      	strh	r5, [r6, #0]
 801a5cc:	8074      	strh	r4, [r6, #2]
 801a5ce:	80b2      	strh	r2, [r6, #4]
 801a5d0:	4630      	mov	r0, r6
 801a5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a5d4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 801a5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a5d6:	2602      	movs	r6, #2
 801a5d8:	9c08      	ldr	r4, [sp, #32]
 801a5da:	4605      	mov	r5, r0
 801a5dc:	3401      	adds	r4, #1
 801a5de:	fb94 f4f6 	sdiv	r4, r4, r6
 801a5e2:	18a6      	adds	r6, r4, r2
 801a5e4:	191f      	adds	r7, r3, r4
 801a5e6:	e9cd 6700 	strd	r6, r7, [sp]
 801a5ea:	1b1b      	subs	r3, r3, r4
 801a5ec:	1b12      	subs	r2, r2, r4
 801a5ee:	f7ff ffce 	bl	801a58e <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 801a5f2:	4628      	mov	r0, r5
 801a5f4:	b003      	add	sp, #12
 801a5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a5f8 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 801a5f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5fc:	6943      	ldr	r3, [r0, #20]
 801a5fe:	b087      	sub	sp, #28
 801a600:	4606      	mov	r6, r0
 801a602:	460d      	mov	r5, r1
 801a604:	2b00      	cmp	r3, #0
 801a606:	d072      	beq.n	801a6ee <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 801a608:	695c      	ldr	r4, [r3, #20]
 801a60a:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 801a60e:	6823      	ldr	r3, [r4, #0]
 801a610:	4620      	mov	r0, r4
 801a612:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a616:	4798      	blx	r3
 801a618:	6823      	ldr	r3, [r4, #0]
 801a61a:	4680      	mov	r8, r0
 801a61c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801a620:	4629      	mov	r1, r5
 801a622:	4620      	mov	r0, r4
 801a624:	4798      	blx	r3
 801a626:	017f      	lsls	r7, r7, #5
 801a628:	4603      	mov	r3, r0
 801a62a:	9700      	str	r7, [sp, #0]
 801a62c:	4642      	mov	r2, r8
 801a62e:	4631      	mov	r1, r6
 801a630:	a802      	add	r0, sp, #8
 801a632:	f7ff ffcf 	bl	801a5d4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801a636:	2d00      	cmp	r5, #0
 801a638:	dd1b      	ble.n	801a672 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 801a63a:	6823      	ldr	r3, [r4, #0]
 801a63c:	f105 38ff 	add.w	r8, r5, #4294967295
 801a640:	fa0f f888 	sxth.w	r8, r8
 801a644:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a648:	4641      	mov	r1, r8
 801a64a:	4620      	mov	r0, r4
 801a64c:	4798      	blx	r3
 801a64e:	6823      	ldr	r3, [r4, #0]
 801a650:	4681      	mov	r9, r0
 801a652:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801a656:	4641      	mov	r1, r8
 801a658:	4620      	mov	r0, r4
 801a65a:	4798      	blx	r3
 801a65c:	4631      	mov	r1, r6
 801a65e:	4603      	mov	r3, r0
 801a660:	9700      	str	r7, [sp, #0]
 801a662:	a804      	add	r0, sp, #16
 801a664:	464a      	mov	r2, r9
 801a666:	f7ff ffb5 	bl	801a5d4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801a66a:	a904      	add	r1, sp, #16
 801a66c:	a802      	add	r0, sp, #8
 801a66e:	f7ff fd57 	bl	801a120 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a672:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801a676:	3b01      	subs	r3, #1
 801a678:	429d      	cmp	r5, r3
 801a67a:	da19      	bge.n	801a6b0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 801a67c:	6823      	ldr	r3, [r4, #0]
 801a67e:	3501      	adds	r5, #1
 801a680:	b22d      	sxth	r5, r5
 801a682:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a686:	4629      	mov	r1, r5
 801a688:	4620      	mov	r0, r4
 801a68a:	4798      	blx	r3
 801a68c:	6823      	ldr	r3, [r4, #0]
 801a68e:	4680      	mov	r8, r0
 801a690:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801a694:	4629      	mov	r1, r5
 801a696:	4620      	mov	r0, r4
 801a698:	4798      	blx	r3
 801a69a:	4631      	mov	r1, r6
 801a69c:	4603      	mov	r3, r0
 801a69e:	9700      	str	r7, [sp, #0]
 801a6a0:	a804      	add	r0, sp, #16
 801a6a2:	4642      	mov	r2, r8
 801a6a4:	f7ff ff96 	bl	801a5d4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801a6a8:	a904      	add	r1, sp, #16
 801a6aa:	a802      	add	r0, sp, #8
 801a6ac:	f7ff fd38 	bl	801a120 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a6b0:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 801a6b4:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 801a6b8:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 801a6bc:	18ca      	adds	r2, r1, r3
 801a6be:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 801a6c2:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a6c6:	1a9b      	subs	r3, r3, r2
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a6ce:	a904      	add	r1, sp, #16
 801a6d0:	a802      	add	r0, sp, #8
 801a6d2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a6d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a6da:	f7fe f801 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801a6de:	6833      	ldr	r3, [r6, #0]
 801a6e0:	a902      	add	r1, sp, #8
 801a6e2:	691b      	ldr	r3, [r3, #16]
 801a6e4:	4630      	mov	r0, r6
 801a6e6:	4798      	blx	r3
 801a6e8:	b007      	add	sp, #28
 801a6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	deff      	udf	#255	@ 0xff

0801a6f2 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 801a6f2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	da05      	bge.n	801a706 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 801a6fa:	880a      	ldrh	r2, [r1, #0]
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	441a      	add	r2, r3
 801a700:	425b      	negs	r3, r3
 801a702:	800a      	strh	r2, [r1, #0]
 801a704:	808b      	strh	r3, [r1, #4]
 801a706:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	da05      	bge.n	801a71a <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 801a70e:	884a      	ldrh	r2, [r1, #2]
 801a710:	b29b      	uxth	r3, r3
 801a712:	441a      	add	r2, r3
 801a714:	425b      	negs	r3, r3
 801a716:	804a      	strh	r2, [r1, #2]
 801a718:	80cb      	strh	r3, [r1, #6]
 801a71a:	4770      	bx	lr

0801a71c <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 801a71c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a71e:	4604      	mov	r4, r0
 801a720:	460d      	mov	r5, r1
 801a722:	6801      	ldr	r1, [r0, #0]
 801a724:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 801a728:	9001      	str	r0, [sp, #4]
 801a72a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801a72e:	9000      	str	r0, [sp, #0]
 801a730:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 801a734:	a802      	add	r0, sp, #8
 801a736:	4621      	mov	r1, r4
 801a738:	47b0      	blx	r6
 801a73a:	a902      	add	r1, sp, #8
 801a73c:	4620      	mov	r0, r4
 801a73e:	f7ff ffd8 	bl	801a6f2 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 801a742:	a802      	add	r0, sp, #8
 801a744:	4629      	mov	r1, r5
 801a746:	f7fd ffcb 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801a74a:	a802      	add	r0, sp, #8
 801a74c:	f7fe f80b 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a750:	b968      	cbnz	r0, 801a76e <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 801a752:	6823      	ldr	r3, [r4, #0]
 801a754:	a902      	add	r1, sp, #8
 801a756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a758:	4620      	mov	r0, r4
 801a75a:	4798      	blx	r3
 801a75c:	f7f2 f97a 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 801a760:	6803      	ldr	r3, [r0, #0]
 801a762:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a764:	6a1d      	ldr	r5, [r3, #32]
 801a766:	a902      	add	r1, sp, #8
 801a768:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801a76c:	47a8      	blx	r5
 801a76e:	b004      	add	sp, #16
 801a770:	bd70      	pop	{r4, r5, r6, pc}

0801a772 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE>:
 801a772:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a776:	6943      	ldr	r3, [r0, #20]
 801a778:	4680      	mov	r8, r0
 801a77a:	460f      	mov	r7, r1
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d065      	beq.n	801a84c <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xda>
 801a780:	695d      	ldr	r5, [r3, #20]
 801a782:	6803      	ldr	r3, [r0, #0]
 801a784:	f9b5 b120 	ldrsh.w	fp, [r5, #288]	@ 0x120
 801a788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a78a:	4798      	blx	r3
 801a78c:	f1bb 0f00 	cmp.w	fp, #0
 801a790:	d04e      	beq.n	801a830 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xbe>
 801a792:	f895 602c 	ldrb.w	r6, [r5, #44]	@ 0x2c
 801a796:	fb16 f000 	smulbb	r0, r6, r0
 801a79a:	b280      	uxth	r0, r0
 801a79c:	1c46      	adds	r6, r0, #1
 801a79e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801a7a2:	1236      	asrs	r6, r6, #8
 801a7a4:	d044      	beq.n	801a830 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xbe>
 801a7a6:	682b      	ldr	r3, [r5, #0]
 801a7a8:	f10b 31ff 	add.w	r1, fp, #4294967295
 801a7ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a7b0:	b209      	sxth	r1, r1
 801a7b2:	4628      	mov	r0, r5
 801a7b4:	4798      	blx	r3
 801a7b6:	ac02      	add	r4, sp, #8
 801a7b8:	f844 0d08 	str.w	r0, [r4, #-8]!
 801a7bc:	4620      	mov	r0, r4
 801a7be:	f7ff fa4b 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a7c2:	f8b8 3030 	ldrh.w	r3, [r8, #48]	@ 0x30
 801a7c6:	fa0f fa80 	sxth.w	sl, r0
 801a7ca:	fa1f f980 	uxth.w	r9, r0
 801a7ce:	b393      	cbz	r3, 801a836 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xc4>
 801a7d0:	eb03 0009 	add.w	r0, r3, r9
 801a7d4:	f9b5 1114 	ldrsh.w	r1, [r5, #276]	@ 0x114
 801a7d8:	f8b5 311a 	ldrh.w	r3, [r5, #282]	@ 0x11a
 801a7dc:	b200      	sxth	r0, r0
 801a7de:	18ca      	adds	r2, r1, r3
 801a7e0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	@ 0x42
 801a7e4:	eba0 0009 	sub.w	r0, r0, r9
 801a7e8:	1a9b      	subs	r3, r3, r2
 801a7ea:	f8ad 1002 	strh.w	r1, [sp, #2]
 801a7ee:	f8ad 0004 	strh.w	r0, [sp, #4]
 801a7f2:	4621      	mov	r1, r4
 801a7f4:	4640      	mov	r0, r8
 801a7f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a7fa:	f8ad a000 	strh.w	sl, [sp]
 801a7fe:	f7ff ff78 	bl	801a6f2 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 801a802:	4620      	mov	r0, r4
 801a804:	4639      	mov	r1, r7
 801a806:	f7fd ff6b 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801a80a:	4620      	mov	r0, r4
 801a80c:	f7fd ffab 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a810:	b970      	cbnz	r0, 801a830 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xbe>
 801a812:	f8d8 3000 	ldr.w	r3, [r8]
 801a816:	4621      	mov	r1, r4
 801a818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a81a:	4640      	mov	r0, r8
 801a81c:	4798      	blx	r3
 801a81e:	f7f2 f919 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 801a822:	6803      	ldr	r3, [r0, #0]
 801a824:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 801a828:	6a1d      	ldr	r5, [r3, #32]
 801a82a:	4621      	mov	r1, r4
 801a82c:	b2f3      	uxtb	r3, r6
 801a82e:	47a8      	blx	r5
 801a830:	b003      	add	sp, #12
 801a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a836:	682b      	ldr	r3, [r5, #0]
 801a838:	4659      	mov	r1, fp
 801a83a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a83e:	4628      	mov	r0, r5
 801a840:	4798      	blx	r3
 801a842:	9000      	str	r0, [sp, #0]
 801a844:	4620      	mov	r0, r4
 801a846:	f7ff fa07 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a84a:	e7c3      	b.n	801a7d4 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0x62>
 801a84c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 801a850:	deff      	udf	#255	@ 0xff

0801a852 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 801a852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a856:	461e      	mov	r6, r3
 801a858:	b08b      	sub	sp, #44	@ 0x2c
 801a85a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 801a85e:	460f      	mov	r7, r1
 801a860:	429e      	cmp	r6, r3
 801a862:	4615      	mov	r5, r2
 801a864:	9304      	str	r3, [sp, #16]
 801a866:	d074      	beq.n	801a952 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 801a868:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801a86c:	4631      	mov	r1, r6
 801a86e:	015b      	lsls	r3, r3, #5
 801a870:	9303      	str	r3, [sp, #12]
 801a872:	6813      	ldr	r3, [r2, #0]
 801a874:	4610      	mov	r0, r2
 801a876:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a87a:	4798      	blx	r3
 801a87c:	ab0a      	add	r3, sp, #40	@ 0x28
 801a87e:	f843 0d10 	str.w	r0, [r3, #-16]!
 801a882:	4618      	mov	r0, r3
 801a884:	f7ff f9e8 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a888:	682b      	ldr	r3, [r5, #0]
 801a88a:	4631      	mov	r1, r6
 801a88c:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801a890:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801a894:	4628      	mov	r0, r5
 801a896:	4798      	blx	r3
 801a898:	ab0a      	add	r3, sp, #40	@ 0x28
 801a89a:	f843 0d0c 	str.w	r0, [r3, #-12]!
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7ff f9da 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a8a4:	ea4f 1940 	mov.w	r9, r0, lsl #5
 801a8a8:	464a      	mov	r2, r9
 801a8aa:	4641      	mov	r1, r8
 801a8ac:	4638      	mov	r0, r7
 801a8ae:	f014 ff85 	bl	802f7bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801a8b2:	4634      	mov	r4, r6
 801a8b4:	2301      	movs	r3, #1
 801a8b6:	9300      	str	r3, [sp, #0]
 801a8b8:	9b00      	ldr	r3, [sp, #0]
 801a8ba:	4628      	mov	r0, r5
 801a8bc:	441c      	add	r4, r3
 801a8be:	682b      	ldr	r3, [r5, #0]
 801a8c0:	b224      	sxth	r4, r4
 801a8c2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a8c6:	4621      	mov	r1, r4
 801a8c8:	4798      	blx	r3
 801a8ca:	9008      	str	r0, [sp, #32]
 801a8cc:	a808      	add	r0, sp, #32
 801a8ce:	f7ff f9c3 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a8d2:	0143      	lsls	r3, r0, #5
 801a8d4:	9301      	str	r3, [sp, #4]
 801a8d6:	682b      	ldr	r3, [r5, #0]
 801a8d8:	4621      	mov	r1, r4
 801a8da:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801a8de:	4628      	mov	r0, r5
 801a8e0:	4798      	blx	r3
 801a8e2:	9009      	str	r0, [sp, #36]	@ 0x24
 801a8e4:	a809      	add	r0, sp, #36	@ 0x24
 801a8e6:	f7ff f9b7 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a8ea:	0143      	lsls	r3, r0, #5
 801a8ec:	9302      	str	r3, [sp, #8]
 801a8ee:	9b01      	ldr	r3, [sp, #4]
 801a8f0:	eba3 0b08 	sub.w	fp, r3, r8
 801a8f4:	9b02      	ldr	r3, [sp, #8]
 801a8f6:	4658      	mov	r0, fp
 801a8f8:	eba3 0a09 	sub.w	sl, r3, r9
 801a8fc:	4651      	mov	r1, sl
 801a8fe:	f7ff fe19 	bl	801a534 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801a902:	b320      	cbz	r0, 801a94e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 801a904:	4602      	mov	r2, r0
 801a906:	4651      	mov	r1, sl
 801a908:	9005      	str	r0, [sp, #20]
 801a90a:	9803      	ldr	r0, [sp, #12]
 801a90c:	f004 fb67 	bl	801efde <_ZN8touchgfx6muldivElll>
 801a910:	2302      	movs	r3, #2
 801a912:	fb90 faf3 	sdiv	sl, r0, r3
 801a916:	9b05      	ldr	r3, [sp, #20]
 801a918:	4659      	mov	r1, fp
 801a91a:	461a      	mov	r2, r3
 801a91c:	9803      	ldr	r0, [sp, #12]
 801a91e:	f004 fb5e 	bl	801efde <_ZN8touchgfx6muldivElll>
 801a922:	2302      	movs	r3, #2
 801a924:	fb90 fbf3 	sdiv	fp, r0, r3
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	eb0b 0209 	add.w	r2, fp, r9
 801a92e:	eba8 010a 	sub.w	r1, r8, sl
 801a932:	689b      	ldr	r3, [r3, #8]
 801a934:	4638      	mov	r0, r7
 801a936:	4798      	blx	r3
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	9a02      	ldr	r2, [sp, #8]
 801a93c:	9901      	ldr	r1, [sp, #4]
 801a93e:	689b      	ldr	r3, [r3, #8]
 801a940:	445a      	add	r2, fp
 801a942:	eba1 010a 	sub.w	r1, r1, sl
 801a946:	4638      	mov	r0, r7
 801a948:	4798      	blx	r3
 801a94a:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 801a94e:	42a6      	cmp	r6, r4
 801a950:	db02      	blt.n	801a958 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 801a952:	b00b      	add	sp, #44	@ 0x2c
 801a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a958:	9b00      	ldr	r3, [sp, #0]
 801a95a:	9a04      	ldr	r2, [sp, #16]
 801a95c:	42a2      	cmp	r2, r4
 801a95e:	bf08      	it	eq
 801a960:	f04f 33ff 	moveq.w	r3, #4294967295
 801a964:	e7a7      	b.n	801a8b6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

0801a966 <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs>:
 801a966:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a96a:	f1b2 0900 	subs.w	r9, r2, #0
 801a96e:	4607      	mov	r7, r0
 801a970:	460c      	mov	r4, r1
 801a972:	dd2c      	ble.n	801a9ce <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs+0x68>
 801a974:	6823      	ldr	r3, [r4, #0]
 801a976:	f109 31ff 	add.w	r1, r9, #4294967295
 801a97a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a97e:	b209      	sxth	r1, r1
 801a980:	4620      	mov	r0, r4
 801a982:	4798      	blx	r3
 801a984:	ad02      	add	r5, sp, #8
 801a986:	f845 0d08 	str.w	r0, [r5, #-8]!
 801a98a:	4628      	mov	r0, r5
 801a98c:	f7ff f964 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a990:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a992:	fa0f f880 	sxth.w	r8, r0
 801a996:	b286      	uxth	r6, r0
 801a998:	b1e3      	cbz	r3, 801a9d4 <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs+0x6e>
 801a99a:	1998      	adds	r0, r3, r6
 801a99c:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 801a9a0:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 801a9a4:	b200      	sxth	r0, r0
 801a9a6:	18ca      	adds	r2, r1, r3
 801a9a8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 801a9ac:	1b80      	subs	r0, r0, r6
 801a9ae:	1a9b      	subs	r3, r3, r2
 801a9b0:	f8ad 1002 	strh.w	r1, [sp, #2]
 801a9b4:	f8ad 0004 	strh.w	r0, [sp, #4]
 801a9b8:	4629      	mov	r1, r5
 801a9ba:	4638      	mov	r0, r7
 801a9bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a9c0:	f8ad 8000 	strh.w	r8, [sp]
 801a9c4:	f7ff fe95 	bl	801a6f2 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 801a9c8:	683b      	ldr	r3, [r7, #0]
 801a9ca:	691b      	ldr	r3, [r3, #16]
 801a9cc:	4798      	blx	r3
 801a9ce:	b003      	add	sp, #12
 801a9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9d4:	6823      	ldr	r3, [r4, #0]
 801a9d6:	4649      	mov	r1, r9
 801a9d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801a9dc:	4620      	mov	r0, r4
 801a9de:	4798      	blx	r3
 801a9e0:	9000      	str	r0, [sp, #0]
 801a9e2:	4628      	mov	r0, r5
 801a9e4:	f7ff f938 	bl	8019c58 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a9e8:	e7d8      	b.n	801a99c <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs+0x36>

0801a9ea <_ZN8touchgfx27GraphElementVerticalGapLine22invalidateGraphPointAtEs>:
 801a9ea:	b570      	push	{r4, r5, r6, lr}
 801a9ec:	6943      	ldr	r3, [r0, #20]
 801a9ee:	4605      	mov	r5, r0
 801a9f0:	460e      	mov	r6, r1
 801a9f2:	b163      	cbz	r3, 801aa0e <_ZN8touchgfx27GraphElementVerticalGapLine22invalidateGraphPointAtEs+0x24>
 801a9f4:	695c      	ldr	r4, [r3, #20]
 801a9f6:	f9b4 2120 	ldrsh.w	r2, [r4, #288]	@ 0x120
 801a9fa:	4621      	mov	r1, r4
 801a9fc:	f7ff ffb3 	bl	801a966 <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs>
 801aa00:	4632      	mov	r2, r6
 801aa02:	4621      	mov	r1, r4
 801aa04:	4628      	mov	r0, r5
 801aa06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa0a:	f7ff bfac 	b.w	801a966 <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs>
 801aa0e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 801aa12:	deff      	udf	#255	@ 0xff

0801aa14 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 801aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa18:	6943      	ldr	r3, [r0, #20]
 801aa1a:	b0a4      	sub	sp, #144	@ 0x90
 801aa1c:	4605      	mov	r5, r0
 801aa1e:	460f      	mov	r7, r1
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d077      	beq.n	801ab14 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 801aa24:	695c      	ldr	r4, [r3, #20]
 801aa26:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801aa2a:	2b01      	cmp	r3, #1
 801aa2c:	dc04      	bgt.n	801aa38 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 801aa2e:	2401      	movs	r4, #1
 801aa30:	4620      	mov	r0, r4
 801aa32:	b024      	add	sp, #144	@ 0x90
 801aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa38:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801aa3c:	ae24      	add	r6, sp, #144	@ 0x90
 801aa3e:	011b      	lsls	r3, r3, #4
 801aa40:	f846 3d74 	str.w	r3, [r6, #-116]!
 801aa44:	4630      	mov	r0, r6
 801aa46:	f7ff fbb0 	bl	801a1aa <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801aa4a:	8839      	ldrh	r1, [r7, #0]
 801aa4c:	88ba      	ldrh	r2, [r7, #4]
 801aa4e:	b280      	uxth	r0, r0
 801aa50:	440a      	add	r2, r1
 801aa52:	6823      	ldr	r3, [r4, #0]
 801aa54:	4402      	add	r2, r0
 801aa56:	1a09      	subs	r1, r1, r0
 801aa58:	f10d 000a 	add.w	r0, sp, #10
 801aa5c:	9000      	str	r0, [sp, #0]
 801aa5e:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 801aa62:	b212      	sxth	r2, r2
 801aa64:	ab02      	add	r3, sp, #8
 801aa66:	b209      	sxth	r1, r1
 801aa68:	4620      	mov	r0, r4
 801aa6a:	47c0      	blx	r8
 801aa6c:	2800      	cmp	r0, #0
 801aa6e:	d0de      	beq.n	801aa2e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 801aa70:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 801aa74:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 801aa78:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 801aa7c:	18ca      	adds	r2, r1, r3
 801aa7e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 801aa82:	f8ad 100e 	strh.w	r1, [sp, #14]
 801aa86:	1a9b      	subs	r3, r3, r2
 801aa88:	2200      	movs	r2, #0
 801aa8a:	4639      	mov	r1, r7
 801aa8c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801aa90:	a803      	add	r0, sp, #12
 801aa92:	f8ad 200c 	strh.w	r2, [sp, #12]
 801aa96:	f8ad 3012 	strh.w	r3, [sp, #18]
 801aa9a:	f7fd fe21 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	a805      	add	r0, sp, #20
 801aaa2:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 801aaa4:	f004 f96c 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801aaa8:	682b      	ldr	r3, [r5, #0]
 801aaaa:	4628      	mov	r0, r5
 801aaac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801aaae:	4798      	blx	r3
 801aab0:	ab03      	add	r3, sp, #12
 801aab2:	9000      	str	r0, [sp, #0]
 801aab4:	aa05      	add	r2, sp, #20
 801aab6:	4639      	mov	r1, r7
 801aab8:	4630      	mov	r0, r6
 801aaba:	f014 fd33 	bl	802f524 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801aabe:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 801aac2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801aac6:	2f00      	cmp	r7, #0
 801aac8:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801aacc:	dd03      	ble.n	801aad6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 801aace:	42bb      	cmp	r3, r7
 801aad0:	da01      	bge.n	801aad6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 801aad2:	42ba      	cmp	r2, r7
 801aad4:	da11      	bge.n	801aafa <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 801aad6:	9200      	str	r2, [sp, #0]
 801aad8:	4622      	mov	r2, r4
 801aada:	4631      	mov	r1, r6
 801aadc:	4628      	mov	r0, r5
 801aade:	f7ff feb8 	bl	801a852 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801aae2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801aae6:	4630      	mov	r0, r6
 801aae8:	f014 fdb0 	bl	802f64c <_ZN8touchgfx6Canvas6renderEh>
 801aaec:	4b0b      	ldr	r3, [pc, #44]	@ (801ab1c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 801aaee:	4604      	mov	r4, r0
 801aaf0:	a80c      	add	r0, sp, #48	@ 0x30
 801aaf2:	9307      	str	r3, [sp, #28]
 801aaf4:	f000 fcf4 	bl	801b4e0 <_ZN8touchgfx7OutlineD1Ev>
 801aaf8:	e79a      	b.n	801aa30 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 801aafa:	1e7a      	subs	r2, r7, #1
 801aafc:	b212      	sxth	r2, r2
 801aafe:	9200      	str	r2, [sp, #0]
 801ab00:	4631      	mov	r1, r6
 801ab02:	4622      	mov	r2, r4
 801ab04:	4628      	mov	r0, r5
 801ab06:	f7ff fea4 	bl	801a852 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801ab0a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801ab0e:	9300      	str	r3, [sp, #0]
 801ab10:	463b      	mov	r3, r7
 801ab12:	e7e1      	b.n	801aad8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 801ab14:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 801ab18:	deff      	udf	#255	@ 0xff
 801ab1a:	bf00      	nop
 801ab1c:	08033bf0 	.word	0x08033bf0

0801ab20 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs>:
 801ab20:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 801ab24:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801ab28:	4293      	cmp	r3, r2
 801ab2a:	da01      	bge.n	801ab30 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs+0x10>
 801ab2c:	4608      	mov	r0, r1
 801ab2e:	4770      	bx	lr
 801ab30:	f9b0 3120 	ldrsh.w	r3, [r0, #288]	@ 0x120
 801ab34:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 801ab38:	428b      	cmp	r3, r1
 801ab3a:	bfc7      	ittee	gt
 801ab3c:	1809      	addgt	r1, r1, r0
 801ab3e:	1ac8      	subgt	r0, r1, r3
 801ab40:	1ac0      	suble	r0, r0, r3
 801ab42:	1a80      	suble	r0, r0, r2
 801ab44:	bfd8      	it	le
 801ab46:	1840      	addle	r0, r0, r1
 801ab48:	4770      	bx	lr

0801ab4a <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>:
 801ab4a:	b510      	push	{r4, lr}
 801ab4c:	4604      	mov	r4, r0
 801ab4e:	f7fe ff20 	bl	8019992 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 801ab52:	2300      	movs	r3, #0
 801ab54:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 801ab58:	bd10      	pop	{r4, pc}

0801ab5a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv>:
 801ab5a:	b570      	push	{r4, r5, r6, lr}
 801ab5c:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	@ 0x14c
 801ab60:	4604      	mov	r4, r0
 801ab62:	bb13      	cbnz	r3, 801abaa <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 801ab64:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 801ab68:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801ab6c:	429a      	cmp	r2, r3
 801ab6e:	dc1c      	bgt.n	801abaa <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 801ab70:	6803      	ldr	r3, [r0, #0]
 801ab72:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801ab76:	4798      	blx	r3
 801ab78:	6823      	ldr	r3, [r4, #0]
 801ab7a:	4605      	mov	r5, r0
 801ab7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801ab80:	4620      	mov	r0, r4
 801ab82:	4798      	blx	r3
 801ab84:	4606      	mov	r6, r0
 801ab86:	2d00      	cmp	r5, #0
 801ab88:	da05      	bge.n	801ab96 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x3c>
 801ab8a:	b229      	sxth	r1, r5
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	f7ff f912 	bl	8019db6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801ab92:	3501      	adds	r5, #1
 801ab94:	e7f7      	b.n	801ab86 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x2c>
 801ab96:	f9b4 511c 	ldrsh.w	r5, [r4, #284]	@ 0x11c
 801ab9a:	42b5      	cmp	r5, r6
 801ab9c:	dc05      	bgt.n	801abaa <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 801ab9e:	b229      	sxth	r1, r5
 801aba0:	4620      	mov	r0, r4
 801aba2:	f7ff f908 	bl	8019db6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801aba6:	3501      	adds	r5, #1
 801aba8:	e7f7      	b.n	801ab9a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x40>
 801abaa:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 801abae:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 801abb2:	429a      	cmp	r2, r3
 801abb4:	db0b      	blt.n	801abce <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x74>
 801abb6:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	@ 0x14c
 801abba:	4620      	mov	r0, r4
 801abbc:	f7ff f8eb 	bl	8019d96 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801abc0:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	@ 0x14c
 801abc4:	4620      	mov	r0, r4
 801abc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abca:	f7ff b8f4 	b.w	8019db6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801abce:	bd70      	pop	{r4, r5, r6, pc}

0801abd0 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi>:
 801abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abd4:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 801abd8:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 801abdc:	1c6e      	adds	r6, r5, #1
 801abde:	b236      	sxth	r6, r6
 801abe0:	fb96 f3f2 	sdiv	r3, r6, r2
 801abe4:	fb02 6313 	mls	r3, r2, r3, r6
 801abe8:	f8a0 314c 	strh.w	r3, [r0, #332]	@ 0x14c
 801abec:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801abf0:	4688      	mov	r8, r1
 801abf2:	42ab      	cmp	r3, r5
 801abf4:	6803      	ldr	r3, [r0, #0]
 801abf6:	bf08      	it	eq
 801abf8:	f8a0 611e 	strheq.w	r6, [r0, #286]	@ 0x11e
 801abfc:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801ac00:	4629      	mov	r1, r5
 801ac02:	4604      	mov	r4, r0
 801ac04:	f8d0 7144 	ldr.w	r7, [r0, #324]	@ 0x144
 801ac08:	4798      	blx	r3
 801ac0a:	4629      	mov	r1, r5
 801ac0c:	f847 8020 	str.w	r8, [r7, r0, lsl #2]
 801ac10:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 801ac14:	4620      	mov	r0, r4
 801ac16:	f7ff f8be 	bl	8019d96 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801ac1a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 801ac1e:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 801ac22:	429a      	cmp	r2, r3
 801ac24:	db28      	blt.n	801ac78 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 801ac26:	4629      	mov	r1, r5
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f7ff f8c4 	bl	8019db6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801ac2e:	bb1d      	cbnz	r5, 801ac78 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 801ac30:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 801ac34:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 801ac38:	429a      	cmp	r2, r3
 801ac3a:	db1d      	blt.n	801ac78 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 801ac3c:	6823      	ldr	r3, [r4, #0]
 801ac3e:	4620      	mov	r0, r4
 801ac40:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801ac44:	4798      	blx	r3
 801ac46:	6823      	ldr	r3, [r4, #0]
 801ac48:	4606      	mov	r6, r0
 801ac4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801ac4e:	4620      	mov	r0, r4
 801ac50:	4798      	blx	r3
 801ac52:	4607      	mov	r7, r0
 801ac54:	2e00      	cmp	r6, #0
 801ac56:	da05      	bge.n	801ac64 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x94>
 801ac58:	b231      	sxth	r1, r6
 801ac5a:	4620      	mov	r0, r4
 801ac5c:	f7ff f8ab 	bl	8019db6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801ac60:	3601      	adds	r6, #1
 801ac62:	e7f7      	b.n	801ac54 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x84>
 801ac64:	f9b4 611c 	ldrsh.w	r6, [r4, #284]	@ 0x11c
 801ac68:	42be      	cmp	r6, r7
 801ac6a:	dc05      	bgt.n	801ac78 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 801ac6c:	b231      	sxth	r1, r6
 801ac6e:	4620      	mov	r0, r4
 801ac70:	f7ff f8a1 	bl	8019db6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801ac74:	3601      	adds	r6, #1
 801ac76:	e7f7      	b.n	801ac68 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x98>
 801ac78:	4628      	mov	r0, r5
 801ac7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ac7e <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801ac7e:	2000      	movs	r0, #0
 801ac80:	4770      	bx	lr
	...

0801ac84 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801ac84:	4b07      	ldr	r3, [pc, #28]	@ (801aca4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801ac86:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801ac88:	881b      	ldrh	r3, [r3, #0]
 801ac8a:	4293      	cmp	r3, r2
 801ac8c:	bf81      	itttt	hi
 801ac8e:	4b06      	ldrhi	r3, [pc, #24]	@ (801aca8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801ac90:	681b      	ldrhi	r3, [r3, #0]
 801ac92:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801ac96:	7858      	ldrbhi	r0, [r3, #1]
 801ac98:	bf8c      	ite	hi
 801ac9a:	f000 0003 	andhi.w	r0, r0, #3
 801ac9e:	2000      	movls	r0, #0
 801aca0:	4770      	bx	lr
 801aca2:	bf00      	nop
 801aca4:	20012058 	.word	0x20012058
 801aca8:	20012054 	.word	0x20012054

0801acac <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acb0:	4b10      	ldr	r3, [pc, #64]	@ (801acf4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801acb2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801acb4:	881b      	ldrh	r3, [r3, #0]
 801acb6:	4604      	mov	r4, r0
 801acb8:	428b      	cmp	r3, r1
 801acba:	d918      	bls.n	801acee <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801acbc:	6803      	ldr	r3, [r0, #0]
 801acbe:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 801acc0:	4b0d      	ldr	r3, [pc, #52]	@ (801acf8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801acc2:	6818      	ldr	r0, [r3, #0]
 801acc4:	f7fa ffe2 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801acc8:	6823      	ldr	r3, [r4, #0]
 801acca:	4606      	mov	r6, r0
 801accc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801acce:	4620      	mov	r0, r4
 801acd0:	4798      	blx	r3
 801acd2:	6823      	ldr	r3, [r4, #0]
 801acd4:	4607      	mov	r7, r0
 801acd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801acda:	4620      	mov	r0, r4
 801acdc:	4798      	blx	r3
 801acde:	463a      	mov	r2, r7
 801ace0:	4603      	mov	r3, r0
 801ace2:	4631      	mov	r1, r6
 801ace4:	4620      	mov	r0, r4
 801ace6:	46ac      	mov	ip, r5
 801ace8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acec:	4760      	bx	ip
 801acee:	2000      	movs	r0, #0
 801acf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acf4:	20012058 	.word	0x20012058
 801acf8:	20012060 	.word	0x20012060

0801acfc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801acfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ad00:	4b17      	ldr	r3, [pc, #92]	@ (801ad60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801ad02:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801ad04:	881b      	ldrh	r3, [r3, #0]
 801ad06:	4604      	mov	r4, r0
 801ad08:	428b      	cmp	r3, r1
 801ad0a:	d926      	bls.n	801ad5a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801ad0c:	4b15      	ldr	r3, [pc, #84]	@ (801ad64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801ad14:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801ad18:	4b13      	ldr	r3, [pc, #76]	@ (801ad68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801ad1a:	7855      	ldrb	r5, [r2, #1]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801ad22:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801ad26:	6833      	ldr	r3, [r6, #0]
 801ad28:	69df      	ldr	r7, [r3, #28]
 801ad2a:	4b10      	ldr	r3, [pc, #64]	@ (801ad6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801ad2c:	6818      	ldr	r0, [r3, #0]
 801ad2e:	f7fa ffad 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801ad32:	6823      	ldr	r3, [r4, #0]
 801ad34:	4680      	mov	r8, r0
 801ad36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ad38:	4620      	mov	r0, r4
 801ad3a:	4798      	blx	r3
 801ad3c:	6823      	ldr	r3, [r4, #0]
 801ad3e:	4681      	mov	r9, r0
 801ad40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ad44:	4620      	mov	r0, r4
 801ad46:	4798      	blx	r3
 801ad48:	464b      	mov	r3, r9
 801ad4a:	9000      	str	r0, [sp, #0]
 801ad4c:	4642      	mov	r2, r8
 801ad4e:	4629      	mov	r1, r5
 801ad50:	4630      	mov	r0, r6
 801ad52:	47b8      	blx	r7
 801ad54:	b003      	add	sp, #12
 801ad56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad5a:	2000      	movs	r0, #0
 801ad5c:	e7fa      	b.n	801ad54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801ad5e:	bf00      	nop
 801ad60:	20012058 	.word	0x20012058
 801ad64:	20012054 	.word	0x20012054
 801ad68:	2001205c 	.word	0x2001205c
 801ad6c:	20012060 	.word	0x20012060

0801ad70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801ad70:	b40e      	push	{r1, r2, r3}
 801ad72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad76:	4b2f      	ldr	r3, [pc, #188]	@ (801ae34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801ad78:	b09d      	sub	sp, #116	@ 0x74
 801ad7a:	881a      	ldrh	r2, [r3, #0]
 801ad7c:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801ad7e:	4604      	mov	r4, r0
 801ad80:	429a      	cmp	r2, r3
 801ad82:	d954      	bls.n	801ae2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801ad84:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 801ae38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801ad88:	aa26      	add	r2, sp, #152	@ 0x98
 801ad8a:	9202      	str	r2, [sp, #8]
 801ad8c:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 801ae3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801ad90:	f8d9 2000 	ldr.w	r2, [r9]
 801ad94:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801ad98:	f8d8 3000 	ldr.w	r3, [r8]
 801ad9c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ada0:	682b      	ldr	r3, [r5, #0]
 801ada2:	4628      	mov	r0, r5
 801ada4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ada6:	4798      	blx	r3
 801ada8:	b207      	sxth	r7, r0
 801adaa:	4606      	mov	r6, r0
 801adac:	a803      	add	r0, sp, #12
 801adae:	f004 fc6b 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801adb2:	682b      	ldr	r3, [r5, #0]
 801adb4:	4628      	mov	r0, r5
 801adb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801adb8:	4798      	blx	r3
 801adba:	682b      	ldr	r3, [r5, #0]
 801adbc:	4682      	mov	sl, r0
 801adbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801adc0:	4628      	mov	r0, r5
 801adc2:	4798      	blx	r3
 801adc4:	4653      	mov	r3, sl
 801adc6:	9000      	str	r0, [sp, #0]
 801adc8:	9a02      	ldr	r2, [sp, #8]
 801adca:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801adcc:	a803      	add	r0, sp, #12
 801adce:	f004 fcb6 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801add2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801add4:	f8d9 3000 	ldr.w	r3, [r9]
 801add8:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 801addc:	8925      	ldrh	r5, [r4, #8]
 801adde:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801ade2:	eba5 050c 	sub.w	r5, r5, ip
 801ade6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801adea:	b22d      	sxth	r5, r5
 801adec:	784a      	ldrb	r2, [r1, #1]
 801adee:	f8d8 3000 	ldr.w	r3, [r8]
 801adf2:	9500      	str	r5, [sp, #0]
 801adf4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801adf8:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 801adfc:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801ae00:	a803      	add	r0, sp, #12
 801ae02:	f002 fa69 	bl	801d2d8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801ae06:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 801ae0a:	b203      	sxth	r3, r0
 801ae0c:	18b9      	adds	r1, r7, r2
 801ae0e:	2900      	cmp	r1, #0
 801ae10:	dd0b      	ble.n	801ae2a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801ae12:	3b01      	subs	r3, #1
 801ae14:	fb13 f302 	smulbb	r3, r3, r2
 801ae18:	fb16 3300 	smlabb	r3, r6, r0, r3
 801ae1c:	b21f      	sxth	r7, r3
 801ae1e:	4638      	mov	r0, r7
 801ae20:	b01d      	add	sp, #116	@ 0x74
 801ae22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae26:	b003      	add	sp, #12
 801ae28:	4770      	bx	lr
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	dcf7      	bgt.n	801ae1e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801ae2e:	2700      	movs	r7, #0
 801ae30:	e7f5      	b.n	801ae1e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801ae32:	bf00      	nop
 801ae34:	20012058 	.word	0x20012058
 801ae38:	20012054 	.word	0x20012054
 801ae3c:	2001205c 	.word	0x2001205c

0801ae40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae44:	4bbc      	ldr	r3, [pc, #752]	@ (801b138 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801ae46:	460c      	mov	r4, r1
 801ae48:	881b      	ldrh	r3, [r3, #0]
 801ae4a:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 801ae4c:	b0a9      	sub	sp, #164	@ 0xa4
 801ae4e:	428b      	cmp	r3, r1
 801ae50:	4680      	mov	r8, r0
 801ae52:	d809      	bhi.n	801ae68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801ae54:	2300      	movs	r3, #0
 801ae56:	f04f 32ff 	mov.w	r2, #4294967295
 801ae5a:	e9c0 3200 	strd	r3, r2, [r0]
 801ae5e:	6083      	str	r3, [r0, #8]
 801ae60:	4640      	mov	r0, r8
 801ae62:	b029      	add	sp, #164	@ 0xa4
 801ae64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae68:	4eb4      	ldr	r6, [pc, #720]	@ (801b13c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801ae6a:	6833      	ldr	r3, [r6, #0]
 801ae6c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801ae70:	4bb3      	ldr	r3, [pc, #716]	@ (801b140 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ae78:	4bb2      	ldr	r3, [pc, #712]	@ (801b144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801ae7a:	6818      	ldr	r0, [r3, #0]
 801ae7c:	f7fa ff06 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801ae80:	682b      	ldr	r3, [r5, #0]
 801ae82:	4681      	mov	r9, r0
 801ae84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae86:	4628      	mov	r0, r5
 801ae88:	4798      	blx	r3
 801ae8a:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 801ae8c:	b203      	sxth	r3, r0
 801ae8e:	4407      	add	r7, r0
 801ae90:	9304      	str	r3, [sp, #16]
 801ae92:	b2bb      	uxth	r3, r7
 801ae94:	9303      	str	r3, [sp, #12]
 801ae96:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801ae9a:	4682      	mov	sl, r0
 801ae9c:	a80f      	add	r0, sp, #60	@ 0x3c
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	f040 80a5 	bne.w	801afee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801aea4:	f004 fbf0 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801aea8:	682b      	ldr	r3, [r5, #0]
 801aeaa:	4628      	mov	r0, r5
 801aeac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aeae:	4798      	blx	r3
 801aeb0:	682b      	ldr	r3, [r5, #0]
 801aeb2:	4606      	mov	r6, r0
 801aeb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aeb6:	4628      	mov	r0, r5
 801aeb8:	4798      	blx	r3
 801aeba:	6823      	ldr	r3, [r4, #0]
 801aebc:	4607      	mov	r7, r0
 801aebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801aec0:	4620      	mov	r0, r4
 801aec2:	4798      	blx	r3
 801aec4:	6823      	ldr	r3, [r4, #0]
 801aec6:	4683      	mov	fp, r0
 801aec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801aecc:	4620      	mov	r0, r4
 801aece:	4798      	blx	r3
 801aed0:	4632      	mov	r2, r6
 801aed2:	2600      	movs	r6, #0
 801aed4:	463b      	mov	r3, r7
 801aed6:	4637      	mov	r7, r6
 801aed8:	e9cd b000 	strd	fp, r0, [sp]
 801aedc:	4649      	mov	r1, r9
 801aede:	a80f      	add	r0, sp, #60	@ 0x3c
 801aee0:	f004 fc42 	bl	801f768 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801aee4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801aee8:	f8df b250 	ldr.w	fp, [pc, #592]	@ 801b13c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801aeec:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801aef0:	bf0c      	ite	eq
 801aef2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801aef6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801aefa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801aefc:	f8db 3000 	ldr.w	r3, [fp]
 801af00:	4629      	mov	r1, r5
 801af02:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801af06:	785b      	ldrb	r3, [r3, #1]
 801af08:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801af0c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801af10:	a80f      	add	r0, sp, #60	@ 0x3c
 801af12:	f001 feea 	bl	801ccea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801af16:	4286      	cmp	r6, r0
 801af18:	bfb8      	it	lt
 801af1a:	4606      	movlt	r6, r0
 801af1c:	9b03      	ldr	r3, [sp, #12]
 801af1e:	3701      	adds	r7, #1
 801af20:	eba9 0903 	sub.w	r9, r9, r3
 801af24:	a80f      	add	r0, sp, #60	@ 0x3c
 801af26:	b236      	sxth	r6, r6
 801af28:	b2bf      	uxth	r7, r7
 801af2a:	fa0f f989 	sxth.w	r9, r9
 801af2e:	f004 fbd2 	bl	801f6d6 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801af32:	b918      	cbnz	r0, 801af3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801af34:	7a2b      	ldrb	r3, [r5, #8]
 801af36:	444b      	add	r3, r9
 801af38:	2b00      	cmp	r3, #0
 801af3a:	dcde      	bgt.n	801aefa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 801af3c:	9b03      	ldr	r3, [sp, #12]
 801af3e:	9a04      	ldr	r2, [sp, #16]
 801af40:	fb13 f707 	smulbb	r7, r3, r7
 801af44:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801af46:	4620      	mov	r0, r4
 801af48:	1aff      	subs	r7, r7, r3
 801af4a:	b2bf      	uxth	r7, r7
 801af4c:	b23b      	sxth	r3, r7
 801af4e:	429a      	cmp	r2, r3
 801af50:	bfa8      	it	ge
 801af52:	4657      	movge	r7, sl
 801af54:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801af58:	f895 9009 	ldrb.w	r9, [r5, #9]
 801af5c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801af60:	6823      	ldr	r3, [r4, #0]
 801af62:	bf08      	it	eq
 801af64:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801af68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801af6a:	bf18      	it	ne
 801af6c:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801af70:	4798      	blx	r3
 801af72:	444f      	add	r7, r9
 801af74:	fa1f f987 	uxth.w	r9, r7
 801af78:	2801      	cmp	r0, #1
 801af7a:	fa0f f789 	sxth.w	r7, r9
 801af7e:	b2b3      	uxth	r3, r6
 801af80:	f000 80e2 	beq.w	801b148 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801af84:	2802      	cmp	r0, #2
 801af86:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 801af8a:	f000 80e3 	beq.w	801b154 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801af8e:	7aea      	ldrb	r2, [r5, #11]
 801af90:	7b2d      	ldrb	r5, [r5, #12]
 801af92:	b236      	sxth	r6, r6
 801af94:	1ab6      	subs	r6, r6, r2
 801af96:	442a      	add	r2, r5
 801af98:	4413      	add	r3, r2
 801af9a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801af9e:	fa1f fa86 	uxth.w	sl, r6
 801afa2:	b29b      	uxth	r3, r3
 801afa4:	2a02      	cmp	r2, #2
 801afa6:	fa0f fb8a 	sxth.w	fp, sl
 801afaa:	b21e      	sxth	r6, r3
 801afac:	f000 80d6 	beq.w	801b15c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801afb0:	2a03      	cmp	r2, #3
 801afb2:	f000 80de 	beq.w	801b172 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 801afb6:	2a01      	cmp	r2, #1
 801afb8:	f040 80e6 	bne.w	801b188 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 801afbc:	4633      	mov	r3, r6
 801afbe:	463e      	mov	r6, r7
 801afc0:	461f      	mov	r7, r3
 801afc2:	8925      	ldrh	r5, [r4, #8]
 801afc4:	eba5 0909 	sub.w	r9, r5, r9
 801afc8:	465d      	mov	r5, fp
 801afca:	fa0f fb89 	sxth.w	fp, r9
 801afce:	4b5d      	ldr	r3, [pc, #372]	@ (801b144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801afd0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801afd2:	6818      	ldr	r0, [r3, #0]
 801afd4:	f7fa fe5a 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801afd8:	f8a8 b000 	strh.w	fp, [r8]
 801afdc:	f8a8 5002 	strh.w	r5, [r8, #2]
 801afe0:	f8a8 6004 	strh.w	r6, [r8, #4]
 801afe4:	f8a8 7006 	strh.w	r7, [r8, #6]
 801afe8:	f8c8 0008 	str.w	r0, [r8, #8]
 801afec:	e738      	b.n	801ae60 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801afee:	f004 fb4b 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801aff2:	682b      	ldr	r3, [r5, #0]
 801aff4:	4628      	mov	r0, r5
 801aff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801aff8:	4798      	blx	r3
 801affa:	682b      	ldr	r3, [r5, #0]
 801affc:	4607      	mov	r7, r0
 801affe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b000:	4628      	mov	r0, r5
 801b002:	4798      	blx	r3
 801b004:	6823      	ldr	r3, [r4, #0]
 801b006:	4683      	mov	fp, r0
 801b008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b00a:	4620      	mov	r0, r4
 801b00c:	4798      	blx	r3
 801b00e:	6822      	ldr	r2, [r4, #0]
 801b010:	9005      	str	r0, [sp, #20]
 801b012:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801b016:	4620      	mov	r0, r4
 801b018:	4790      	blx	r2
 801b01a:	9b05      	ldr	r3, [sp, #20]
 801b01c:	463a      	mov	r2, r7
 801b01e:	4649      	mov	r1, r9
 801b020:	9001      	str	r0, [sp, #4]
 801b022:	9300      	str	r3, [sp, #0]
 801b024:	a80f      	add	r0, sp, #60	@ 0x3c
 801b026:	465b      	mov	r3, fp
 801b028:	f004 fb9e 	bl	801f768 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b02c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801b030:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801b034:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801b038:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b03c:	bf0a      	itet	eq
 801b03e:	464a      	moveq	r2, r9
 801b040:	461a      	movne	r2, r3
 801b042:	4699      	moveq	r9, r3
 801b044:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 801b048:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801b04a:	1ad2      	subs	r2, r2, r3
 801b04c:	6833      	ldr	r3, [r6, #0]
 801b04e:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 801b052:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b056:	7859      	ldrb	r1, [r3, #1]
 801b058:	2300      	movs	r3, #0
 801b05a:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 801b05e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801b062:	af0f      	add	r7, sp, #60	@ 0x3c
 801b064:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b068:	9707      	str	r7, [sp, #28]
 801b06a:	f88d 1020 	strb.w	r1, [sp, #32]
 801b06e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801b072:	9509      	str	r5, [sp, #36]	@ 0x24
 801b074:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801b078:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 801b07c:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 801b080:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b084:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801b088:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b08c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801b090:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801b094:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b098:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801b09c:	b350      	cbz	r0, 801b0f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b09e:	682b      	ldr	r3, [r5, #0]
 801b0a0:	4628      	mov	r0, r5
 801b0a2:	695b      	ldr	r3, [r3, #20]
 801b0a4:	4798      	blx	r3
 801b0a6:	4607      	mov	r7, r0
 801b0a8:	b320      	cbz	r0, 801b0f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b0aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b0ac:	4639      	mov	r1, r7
 801b0ae:	6803      	ldr	r3, [r0, #0]
 801b0b0:	68db      	ldr	r3, [r3, #12]
 801b0b2:	4798      	blx	r3
 801b0b4:	4606      	mov	r6, r0
 801b0b6:	b1e8      	cbz	r0, 801b0f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b0b8:	7b43      	ldrb	r3, [r0, #13]
 801b0ba:	7a82      	ldrb	r2, [r0, #10]
 801b0bc:	005b      	lsls	r3, r3, #1
 801b0be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b0c2:	4313      	orrs	r3, r2
 801b0c4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b0c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 801b0cc:	2b06      	cmp	r3, #6
 801b0ce:	d111      	bne.n	801b0f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801b0d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b0d2:	4632      	mov	r2, r6
 801b0d4:	6803      	ldr	r3, [r0, #0]
 801b0d6:	4639      	mov	r1, r7
 801b0d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b0da:	4798      	blx	r3
 801b0dc:	7b73      	ldrb	r3, [r6, #13]
 801b0de:	005b      	lsls	r3, r3, #1
 801b0e0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b0e4:	7ab3      	ldrb	r3, [r6, #10]
 801b0e6:	4313      	orrs	r3, r2
 801b0e8:	4418      	add	r0, r3
 801b0ea:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b0ee:	4418      	add	r0, r3
 801b0f0:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 801b0f4:	2600      	movs	r6, #0
 801b0f6:	4637      	mov	r7, r6
 801b0f8:	a806      	add	r0, sp, #24
 801b0fa:	f001 ffeb 	bl	801d0d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b0fe:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 801b102:	9b03      	ldr	r3, [sp, #12]
 801b104:	4286      	cmp	r6, r0
 801b106:	bfb8      	it	lt
 801b108:	4606      	movlt	r6, r0
 801b10a:	eba9 0903 	sub.w	r9, r9, r3
 801b10e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b112:	3701      	adds	r7, #1
 801b114:	b236      	sxth	r6, r6
 801b116:	b2bf      	uxth	r7, r7
 801b118:	fa0f f989 	sxth.w	r9, r9
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	f43f af0d 	beq.w	801af3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801b122:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801b126:	2b00      	cmp	r3, #0
 801b128:	f47f af08 	bne.w	801af3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801b12c:	7a2b      	ldrb	r3, [r5, #8]
 801b12e:	444b      	add	r3, r9
 801b130:	2b00      	cmp	r3, #0
 801b132:	dce1      	bgt.n	801b0f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801b134:	e702      	b.n	801af3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801b136:	bf00      	nop
 801b138:	20012058 	.word	0x20012058
 801b13c:	20012054 	.word	0x20012054
 801b140:	2001205c 	.word	0x2001205c
 801b144:	20012060 	.word	0x20012060
 801b148:	2002      	movs	r0, #2
 801b14a:	ebaa 0606 	sub.w	r6, sl, r6
 801b14e:	fb96 f6f0 	sdiv	r6, r6, r0
 801b152:	e71c      	b.n	801af8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801b154:	441e      	add	r6, r3
 801b156:	ebaa 0606 	sub.w	r6, sl, r6
 801b15a:	e718      	b.n	801af8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801b15c:	8925      	ldrh	r5, [r4, #8]
 801b15e:	1aed      	subs	r5, r5, r3
 801b160:	eba5 050a 	sub.w	r5, r5, sl
 801b164:	fa0f fb85 	sxth.w	fp, r5
 801b168:	8965      	ldrh	r5, [r4, #10]
 801b16a:	eba5 0509 	sub.w	r5, r5, r9
 801b16e:	b22d      	sxth	r5, r5
 801b170:	e72d      	b.n	801afce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801b172:	8965      	ldrh	r5, [r4, #10]
 801b174:	f04f 0b00 	mov.w	fp, #0
 801b178:	1aed      	subs	r5, r5, r3
 801b17a:	4633      	mov	r3, r6
 801b17c:	eba5 050a 	sub.w	r5, r5, sl
 801b180:	463e      	mov	r6, r7
 801b182:	b22d      	sxth	r5, r5
 801b184:	461f      	mov	r7, r3
 801b186:	e722      	b.n	801afce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801b188:	2500      	movs	r5, #0
 801b18a:	e720      	b.n	801afce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801b18c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801b18c:	b513      	push	{r0, r1, r4, lr}
 801b18e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801b192:	4604      	mov	r4, r0
 801b194:	b1fb      	cbz	r3, 801b1d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b196:	4b16      	ldr	r3, [pc, #88]	@ (801b1f0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801b198:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801b19a:	881b      	ldrh	r3, [r3, #0]
 801b19c:	428b      	cmp	r3, r1
 801b19e:	d91a      	bls.n	801b1d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b1a0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	dd16      	ble.n	801b1d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b1a8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	dd12      	ble.n	801b1d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b1b0:	4b10      	ldr	r3, [pc, #64]	@ (801b1f4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801b1b2:	6818      	ldr	r0, [r3, #0]
 801b1b4:	f7fa fd6a 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801b1b8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 801b1bc:	6822      	ldr	r2, [r4, #0]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	db06      	blt.n	801b1d0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b1c2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	db02      	blt.n	801b1d0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b1ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b1cc:	4298      	cmp	r0, r3
 801b1ce:	d004      	beq.n	801b1da <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801b1d0:	6953      	ldr	r3, [r2, #20]
 801b1d2:	4620      	mov	r0, r4
 801b1d4:	4798      	blx	r3
 801b1d6:	b002      	add	sp, #8
 801b1d8:	bd10      	pop	{r4, pc}
 801b1da:	466b      	mov	r3, sp
 801b1dc:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 801b1e0:	c903      	ldmia	r1, {r0, r1}
 801b1e2:	6912      	ldr	r2, [r2, #16]
 801b1e4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b1e8:	4619      	mov	r1, r3
 801b1ea:	4620      	mov	r0, r4
 801b1ec:	4790      	blx	r2
 801b1ee:	e7f2      	b.n	801b1d6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b1f0:	20012058 	.word	0x20012058
 801b1f4:	20012060 	.word	0x20012060

0801b1f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1fc:	4b44      	ldr	r3, [pc, #272]	@ (801b310 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801b1fe:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801b200:	881b      	ldrh	r3, [r3, #0]
 801b202:	b08e      	sub	sp, #56	@ 0x38
 801b204:	4293      	cmp	r3, r2
 801b206:	4604      	mov	r4, r0
 801b208:	d97e      	bls.n	801b308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b20a:	6808      	ldr	r0, [r1, #0]
 801b20c:	4d41      	ldr	r5, [pc, #260]	@ (801b314 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801b20e:	6849      	ldr	r1, [r1, #4]
 801b210:	ab05      	add	r3, sp, #20
 801b212:	c303      	stmia	r3!, {r0, r1}
 801b214:	4611      	mov	r1, r2
 801b216:	6828      	ldr	r0, [r5, #0]
 801b218:	f7fa fd38 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801b21c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 801b220:	2b00      	cmp	r3, #0
 801b222:	db11      	blt.n	801b248 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b224:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801b228:	2b00      	cmp	r3, #0
 801b22a:	db0d      	blt.n	801b248 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b22c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801b22e:	4298      	cmp	r0, r3
 801b230:	d10a      	bne.n	801b248 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b232:	ab09      	add	r3, sp, #36	@ 0x24
 801b234:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801b238:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b23c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b240:	4619      	mov	r1, r3
 801b242:	a805      	add	r0, sp, #20
 801b244:	f7fd fa4c 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801b248:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	dd5b      	ble.n	801b308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b250:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b254:	2b00      	cmp	r3, #0
 801b256:	dd57      	ble.n	801b308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b258:	4f2f      	ldr	r7, [pc, #188]	@ (801b318 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801b25a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801b25c:	683b      	ldr	r3, [r7, #0]
 801b25e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b262:	4b2e      	ldr	r3, [pc, #184]	@ (801b31c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b26a:	2e00      	cmp	r6, #0
 801b26c:	d04c      	beq.n	801b308 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b26e:	6823      	ldr	r3, [r4, #0]
 801b270:	4620      	mov	r0, r4
 801b272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b274:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801b278:	4798      	blx	r3
 801b27a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801b27c:	683b      	ldr	r3, [r7, #0]
 801b27e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801b282:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b286:	785b      	ldrb	r3, [r3, #1]
 801b288:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 801b28c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b294:	4b22      	ldr	r3, [pc, #136]	@ (801b320 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801b296:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 801b29a:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 801b29e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	9609      	str	r6, [sp, #36]	@ 0x24
 801b2a4:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 801b2a8:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 801b2ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b2ae:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 801b2b2:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 801b2b6:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 801b2ba:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 801b2be:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801b2c2:	b10a      	cbz	r2, 801b2c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801b2c4:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 801b2c6:	b906      	cbnz	r6, 801b2ca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801b2c8:	689e      	ldr	r6, [r3, #8]
 801b2ca:	af07      	add	r7, sp, #28
 801b2cc:	4621      	mov	r1, r4
 801b2ce:	4638      	mov	r0, r7
 801b2d0:	f003 fd56 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2d4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801b2d6:	6828      	ldr	r0, [r5, #0]
 801b2d8:	f7fa fcd8 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801b2dc:	6823      	ldr	r3, [r4, #0]
 801b2de:	4605      	mov	r5, r0
 801b2e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b2e2:	4620      	mov	r0, r4
 801b2e4:	4798      	blx	r3
 801b2e6:	6823      	ldr	r3, [r4, #0]
 801b2e8:	4680      	mov	r8, r0
 801b2ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801b2ee:	4620      	mov	r0, r4
 801b2f0:	4798      	blx	r3
 801b2f2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801b2f6:	ab09      	add	r3, sp, #36	@ 0x24
 801b2f8:	9300      	str	r3, [sp, #0]
 801b2fa:	9501      	str	r5, [sp, #4]
 801b2fc:	ab05      	add	r3, sp, #20
 801b2fe:	e897 0006 	ldmia.w	r7, {r1, r2}
 801b302:	4630      	mov	r0, r6
 801b304:	f7fa fc53 	bl	8015bae <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b308:	b00e      	add	sp, #56	@ 0x38
 801b30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b30e:	bf00      	nop
 801b310:	20012058 	.word	0x20012058
 801b314:	20012060 	.word	0x20012060
 801b318:	20012054 	.word	0x20012054
 801b31c:	2001205c 	.word	0x2001205c
 801b320:	20011ffc 	.word	0x20011ffc

0801b324 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801b324:	b538      	push	{r3, r4, r5, lr}
 801b326:	4b0e      	ldr	r3, [pc, #56]	@ (801b360 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801b328:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801b32a:	881b      	ldrh	r3, [r3, #0]
 801b32c:	4604      	mov	r4, r0
 801b32e:	429a      	cmp	r2, r3
 801b330:	d214      	bcs.n	801b35c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801b332:	6803      	ldr	r3, [r0, #0]
 801b334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b336:	4798      	blx	r3
 801b338:	6823      	ldr	r3, [r4, #0]
 801b33a:	4605      	mov	r5, r0
 801b33c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b33e:	4620      	mov	r0, r4
 801b340:	4798      	blx	r3
 801b342:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801b346:	b22d      	sxth	r5, r5
 801b348:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801b34c:	4601      	mov	r1, r0
 801b34e:	bf06      	itte	eq
 801b350:	4602      	moveq	r2, r0
 801b352:	4629      	moveq	r1, r5
 801b354:	462a      	movne	r2, r5
 801b356:	4620      	mov	r0, r4
 801b358:	f7f2 f983 	bl	800d662 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801b35c:	bd38      	pop	{r3, r4, r5, pc}
 801b35e:	bf00      	nop
 801b360:	20012058 	.word	0x20012058

0801b364 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801b364:	b530      	push	{r4, r5, lr}
 801b366:	888b      	ldrh	r3, [r1, #4]
 801b368:	b085      	sub	sp, #20
 801b36a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801b36c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b370:	4604      	mov	r4, r0
 801b372:	b923      	cbnz	r3, 801b37e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b374:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b378:	b90b      	cbnz	r3, 801b37e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b37a:	f7ff ffd3 	bl	801b324 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801b37e:	466d      	mov	r5, sp
 801b380:	6823      	ldr	r3, [r4, #0]
 801b382:	4621      	mov	r1, r4
 801b384:	4628      	mov	r0, r5
 801b386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801b38a:	4798      	blx	r3
 801b38c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b390:	343c      	adds	r4, #60	@ 0x3c
 801b392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b396:	b005      	add	sp, #20
 801b398:	bd30      	pop	{r4, r5, pc}

0801b39a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801b39a:	2300      	movs	r3, #0
 801b39c:	8083      	strh	r3, [r0, #4]
 801b39e:	80c3      	strh	r3, [r0, #6]
 801b3a0:	8003      	strh	r3, [r0, #0]
 801b3a2:	8043      	strh	r3, [r0, #2]
 801b3a4:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801b3a8:	2bff      	cmp	r3, #255	@ 0xff
 801b3aa:	bf01      	itttt	eq
 801b3ac:	890b      	ldrheq	r3, [r1, #8]
 801b3ae:	8083      	strheq	r3, [r0, #4]
 801b3b0:	894b      	ldrheq	r3, [r1, #10]
 801b3b2:	80c3      	strheq	r3, [r0, #6]
 801b3b4:	4770      	bx	lr
	...

0801b3b8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801b3b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b3ba:	4604      	mov	r4, r0
 801b3bc:	466b      	mov	r3, sp
 801b3be:	6808      	ldr	r0, [r1, #0]
 801b3c0:	6849      	ldr	r1, [r1, #4]
 801b3c2:	c303      	stmia	r3!, {r0, r1}
 801b3c4:	6823      	ldr	r3, [r4, #0]
 801b3c6:	4669      	mov	r1, sp
 801b3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ca:	4620      	mov	r0, r4
 801b3cc:	4798      	blx	r3
 801b3ce:	4b08      	ldr	r3, [pc, #32]	@ (801b3f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801b3d6:	b10a      	cbz	r2, 801b3dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801b3d8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801b3da:	b900      	cbnz	r0, 801b3de <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801b3dc:	6898      	ldr	r0, [r3, #8]
 801b3de:	6803      	ldr	r3, [r0, #0]
 801b3e0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801b3e2:	6a1d      	ldr	r5, [r3, #32]
 801b3e4:	4669      	mov	r1, sp
 801b3e6:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801b3ea:	47a8      	blx	r5
 801b3ec:	b003      	add	sp, #12
 801b3ee:	bd30      	pop	{r4, r5, pc}
 801b3f0:	20011ffc 	.word	0x20011ffc

0801b3f4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801b3f4:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801b3f8:	b12a      	cbz	r2, 801b406 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b3fa:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801b3fe:	b112      	cbz	r2, 801b406 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b400:	6803      	ldr	r3, [r0, #0]
 801b402:	695b      	ldr	r3, [r3, #20]
 801b404:	4718      	bx	r3
 801b406:	4770      	bx	lr

0801b408 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801b408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b40c:	4b2f      	ldr	r3, [pc, #188]	@ (801b4cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801b40e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801b410:	881b      	ldrh	r3, [r3, #0]
 801b412:	b08d      	sub	sp, #52	@ 0x34
 801b414:	4293      	cmp	r3, r2
 801b416:	4604      	mov	r4, r0
 801b418:	460f      	mov	r7, r1
 801b41a:	d954      	bls.n	801b4c6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801b41c:	4b2c      	ldr	r3, [pc, #176]	@ (801b4d0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801b41e:	6819      	ldr	r1, [r3, #0]
 801b420:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 801b424:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801b428:	4a2a      	ldr	r2, [pc, #168]	@ (801b4d4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801b42a:	6812      	ldr	r2, [r2, #0]
 801b42c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801b430:	2900      	cmp	r1, #0
 801b432:	d048      	beq.n	801b4c6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801b434:	785a      	ldrb	r2, [r3, #1]
 801b436:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801b43a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801b43e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801b442:	4b25      	ldr	r3, [pc, #148]	@ (801b4d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801b444:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801b448:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 801b44c:	681a      	ldr	r2, [r3, #0]
 801b44e:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 801b452:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 801b456:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 801b45a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801b45c:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 801b460:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 801b464:	9107      	str	r1, [sp, #28]
 801b466:	f88d 8020 	strb.w	r8, [sp, #32]
 801b46a:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 801b46e:	9609      	str	r6, [sp, #36]	@ 0x24
 801b470:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 801b474:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 801b478:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 801b47c:	b10b      	cbz	r3, 801b482 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801b47e:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 801b480:	b905      	cbnz	r5, 801b484 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801b482:	6895      	ldr	r5, [r2, #8]
 801b484:	ae05      	add	r6, sp, #20
 801b486:	4621      	mov	r1, r4
 801b488:	4630      	mov	r0, r6
 801b48a:	f003 fc79 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b48e:	4b13      	ldr	r3, [pc, #76]	@ (801b4dc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801b490:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801b492:	6818      	ldr	r0, [r3, #0]
 801b494:	f7fa fbfa 	bl	8015c8c <_ZNK8touchgfx5Texts7getTextEt>
 801b498:	6823      	ldr	r3, [r4, #0]
 801b49a:	4680      	mov	r8, r0
 801b49c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b49e:	4620      	mov	r0, r4
 801b4a0:	4798      	blx	r3
 801b4a2:	6823      	ldr	r3, [r4, #0]
 801b4a4:	4681      	mov	r9, r0
 801b4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801b4aa:	4620      	mov	r0, r4
 801b4ac:	4798      	blx	r3
 801b4ae:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801b4b2:	ab07      	add	r3, sp, #28
 801b4b4:	9300      	str	r3, [sp, #0]
 801b4b6:	f8cd 8004 	str.w	r8, [sp, #4]
 801b4ba:	463b      	mov	r3, r7
 801b4bc:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b4c0:	4628      	mov	r0, r5
 801b4c2:	f7fa fb74 	bl	8015bae <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b4c6:	b00d      	add	sp, #52	@ 0x34
 801b4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4cc:	20012058 	.word	0x20012058
 801b4d0:	20012054 	.word	0x20012054
 801b4d4:	2001205c 	.word	0x2001205c
 801b4d8:	20011ffc 	.word	0x20011ffc
 801b4dc:	20012060 	.word	0x20012060

0801b4e0 <_ZN8touchgfx7OutlineD1Ev>:
 801b4e0:	4770      	bx	lr

0801b4e2 <_ZN8touchgfx7OutlineD0Ev>:
 801b4e2:	b510      	push	{r4, lr}
 801b4e4:	4604      	mov	r4, r0
 801b4e6:	2130      	movs	r1, #48	@ 0x30
 801b4e8:	f014 fa29 	bl	802f93e <_ZdlPvj>
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	bd10      	pop	{r4, pc}

0801b4f0 <_ZN8touchgfx7Outline5resetEv>:
 801b4f0:	b510      	push	{r4, lr}
 801b4f2:	4604      	mov	r4, r0
 801b4f4:	f000 fe94 	bl	801c220 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801b4f8:	60e0      	str	r0, [r4, #12]
 801b4fa:	f000 fe97 	bl	801c22c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801b4fe:	2200      	movs	r2, #0
 801b500:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801b504:	68e3      	ldr	r3, [r4, #12]
 801b506:	08c0      	lsrs	r0, r0, #3
 801b508:	3801      	subs	r0, #1
 801b50a:	6123      	str	r3, [r4, #16]
 801b50c:	6060      	str	r0, [r4, #4]
 801b50e:	60a2      	str	r2, [r4, #8]
 801b510:	8019      	strh	r1, [r3, #0]
 801b512:	8059      	strh	r1, [r3, #2]
 801b514:	809a      	strh	r2, [r3, #4]
 801b516:	80da      	strh	r2, [r3, #6]
 801b518:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801b51a:	f023 0301 	bic.w	r3, r3, #1
 801b51e:	f043 0302 	orr.w	r3, r3, #2
 801b522:	6263      	str	r3, [r4, #36]	@ 0x24
 801b524:	bd10      	pop	{r4, pc}
	...

0801b528 <_ZN8touchgfx7OutlineC1Ev>:
 801b528:	4b0a      	ldr	r3, [pc, #40]	@ (801b554 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801b52a:	b510      	push	{r4, lr}
 801b52c:	6003      	str	r3, [r0, #0]
 801b52e:	2300      	movs	r3, #0
 801b530:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801b534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b538:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801b53c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801b540:	6243      	str	r3, [r0, #36]	@ 0x24
 801b542:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b546:	4604      	mov	r4, r0
 801b548:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 801b54c:	f7ff ffd0 	bl	801b4f0 <_ZN8touchgfx7Outline5resetEv>
 801b550:	4620      	mov	r0, r4
 801b552:	bd10      	pop	{r4, pc}
 801b554:	08033700 	.word	0x08033700

0801b558 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b55c:	b093      	sub	sp, #76	@ 0x4c
 801b55e:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b560:	9305      	str	r3, [sp, #20]
 801b562:	f004 051f 	and.w	r5, r4, #31
 801b566:	1153      	asrs	r3, r2, #5
 801b568:	9504      	str	r5, [sp, #16]
 801b56a:	1156      	asrs	r6, r2, #5
 801b56c:	1165      	asrs	r5, r4, #5
 801b56e:	9303      	str	r3, [sp, #12]
 801b570:	42ae      	cmp	r6, r5
 801b572:	ea4f 1364 	mov.w	r3, r4, asr #5
 801b576:	9306      	str	r3, [sp, #24]
 801b578:	f002 031f 	and.w	r3, r2, #31
 801b57c:	f040 80f8 	bne.w	801b770 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 801b580:	9c04      	ldr	r4, [sp, #16]
 801b582:	9a05      	ldr	r2, [sp, #20]
 801b584:	42a3      	cmp	r3, r4
 801b586:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801b58a:	6902      	ldr	r2, [r0, #16]
 801b58c:	d125      	bne.n	801b5da <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 801b58e:	f9b2 3000 	ldrsh.w	r3, [r2]
 801b592:	459e      	cmp	lr, r3
 801b594:	d103      	bne.n	801b59e <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801b596:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801b59a:	429e      	cmp	r6, r3
 801b59c:	d035      	beq.n	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801b59e:	88d1      	ldrh	r1, [r2, #6]
 801b5a0:	8893      	ldrh	r3, [r2, #4]
 801b5a2:	430b      	orrs	r3, r1
 801b5a4:	d010      	beq.n	801b5c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801b5a6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	db0c      	blt.n	801b5c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801b5ae:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801b5b0:	428b      	cmp	r3, r1
 801b5b2:	da09      	bge.n	801b5c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801b5b4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801b5b8:	428b      	cmp	r3, r1
 801b5ba:	bf38      	it	cc
 801b5bc:	3208      	addcc	r2, #8
 801b5be:	f103 0301 	add.w	r3, r3, #1
 801b5c2:	bf38      	it	cc
 801b5c4:	6102      	strcc	r2, [r0, #16]
 801b5c6:	6083      	str	r3, [r0, #8]
 801b5c8:	6903      	ldr	r3, [r0, #16]
 801b5ca:	9a03      	ldr	r2, [sp, #12]
 801b5cc:	f8a3 e000 	strh.w	lr, [r3]
 801b5d0:	805a      	strh	r2, [r3, #2]
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	809a      	strh	r2, [r3, #4]
 801b5d6:	80da      	strh	r2, [r3, #6]
 801b5d8:	e017      	b.n	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801b5da:	9c05      	ldr	r4, [sp, #20]
 801b5dc:	114e      	asrs	r6, r1, #5
 801b5de:	f004 041f 	and.w	r4, r4, #31
 801b5e2:	9402      	str	r4, [sp, #8]
 801b5e4:	9c04      	ldr	r4, [sp, #16]
 801b5e6:	4576      	cmp	r6, lr
 801b5e8:	f001 0c1f 	and.w	ip, r1, #31
 801b5ec:	eba4 0403 	sub.w	r4, r4, r3
 801b5f0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801b5f4:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801b5f8:	d10a      	bne.n	801b610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 801b5fa:	9b02      	ldr	r3, [sp, #8]
 801b5fc:	44a0      	add	r8, r4
 801b5fe:	449c      	add	ip, r3
 801b600:	fb04 a40c 	mla	r4, r4, ip, sl
 801b604:	f8a2 8004 	strh.w	r8, [r2, #4]
 801b608:	80d4      	strh	r4, [r2, #6]
 801b60a:	b013      	add	sp, #76	@ 0x4c
 801b60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b610:	9d05      	ldr	r5, [sp, #20]
 801b612:	1a69      	subs	r1, r5, r1
 801b614:	bf5b      	ittet	pl
 801b616:	f1cc 0520 	rsbpl	r5, ip, #32
 801b61a:	436c      	mulpl	r4, r5
 801b61c:	2500      	movmi	r5, #0
 801b61e:	2520      	movpl	r5, #32
 801b620:	bf44      	itt	mi
 801b622:	fb04 f40c 	mulmi.w	r4, r4, ip
 801b626:	4249      	negmi	r1, r1
 801b628:	9501      	str	r5, [sp, #4]
 801b62a:	fb94 f5f1 	sdiv	r5, r4, r1
 801b62e:	bf54      	ite	pl
 801b630:	f04f 0901 	movpl.w	r9, #1
 801b634:	f04f 39ff 	movmi.w	r9, #4294967295
 801b638:	fb01 4415 	mls	r4, r1, r5, r4
 801b63c:	9f01      	ldr	r7, [sp, #4]
 801b63e:	2c00      	cmp	r4, #0
 801b640:	bfb8      	it	lt
 801b642:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801b646:	44bc      	add	ip, r7
 801b648:	fb05 ac0c 	mla	ip, r5, ip, sl
 801b64c:	44a8      	add	r8, r5
 801b64e:	f8a2 8004 	strh.w	r8, [r2, #4]
 801b652:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b656:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b65a:	bfb8      	it	lt
 801b65c:	1864      	addlt	r4, r4, r1
 801b65e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801b662:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801b666:	444e      	add	r6, r9
 801b668:	ea58 0202 	orrs.w	r2, r8, r2
 801b66c:	d011      	beq.n	801b692 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801b66e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801b672:	f1b8 0f00 	cmp.w	r8, #0
 801b676:	db0c      	blt.n	801b692 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801b678:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801b67a:	4590      	cmp	r8, r2
 801b67c:	da09      	bge.n	801b692 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801b67e:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801b682:	4590      	cmp	r8, r2
 801b684:	bf3c      	itt	cc
 801b686:	f10c 0208 	addcc.w	r2, ip, #8
 801b68a:	6102      	strcc	r2, [r0, #16]
 801b68c:	f108 0201 	add.w	r2, r8, #1
 801b690:	6082      	str	r2, [r0, #8]
 801b692:	2700      	movs	r7, #0
 801b694:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b698:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b69c:	45b6      	cmp	lr, r6
 801b69e:	f8ac 6000 	strh.w	r6, [ip]
 801b6a2:	f8ac 2002 	strh.w	r2, [ip, #2]
 801b6a6:	f8ac 7004 	strh.w	r7, [ip, #4]
 801b6aa:	f8ac 7006 	strh.w	r7, [ip, #6]
 801b6ae:	442b      	add	r3, r5
 801b6b0:	d04d      	beq.n	801b74e <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 801b6b2:	9f04      	ldr	r7, [sp, #16]
 801b6b4:	f04f 0a00 	mov.w	sl, #0
 801b6b8:	1aff      	subs	r7, r7, r3
 801b6ba:	443d      	add	r5, r7
 801b6bc:	016d      	lsls	r5, r5, #5
 801b6be:	fb95 f8f1 	sdiv	r8, r5, r1
 801b6c2:	fb01 5518 	mls	r5, r1, r8, r5
 801b6c6:	2d00      	cmp	r5, #0
 801b6c8:	bfb8      	it	lt
 801b6ca:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801b6ce:	f108 0701 	add.w	r7, r8, #1
 801b6d2:	bfb8      	it	lt
 801b6d4:	186d      	addlt	r5, r5, r1
 801b6d6:	1a64      	subs	r4, r4, r1
 801b6d8:	9703      	str	r7, [sp, #12]
 801b6da:	1964      	adds	r4, r4, r5
 801b6dc:	bf48      	it	mi
 801b6de:	4647      	movmi	r7, r8
 801b6e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b6e4:	bf58      	it	pl
 801b6e6:	9f03      	ldrpl	r7, [sp, #12]
 801b6e8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801b6ec:	443b      	add	r3, r7
 801b6ee:	44bb      	add	fp, r7
 801b6f0:	f8ac b004 	strh.w	fp, [ip, #4]
 801b6f4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801b6f8:	bf58      	it	pl
 801b6fa:	1a64      	subpl	r4, r4, r1
 801b6fc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801b700:	f8ac b006 	strh.w	fp, [ip, #6]
 801b704:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801b708:	444e      	add	r6, r9
 801b70a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801b70e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801b712:	ea5b 0707 	orrs.w	r7, fp, r7
 801b716:	d011      	beq.n	801b73c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801b718:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801b71c:	f1bb 0f00 	cmp.w	fp, #0
 801b720:	db0c      	blt.n	801b73c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801b722:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801b724:	45bb      	cmp	fp, r7
 801b726:	da09      	bge.n	801b73c <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801b728:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801b72c:	45bb      	cmp	fp, r7
 801b72e:	bf3c      	itt	cc
 801b730:	f10c 0708 	addcc.w	r7, ip, #8
 801b734:	6107      	strcc	r7, [r0, #16]
 801b736:	f10b 0701 	add.w	r7, fp, #1
 801b73a:	6087      	str	r7, [r0, #8]
 801b73c:	6907      	ldr	r7, [r0, #16]
 801b73e:	45b6      	cmp	lr, r6
 801b740:	803e      	strh	r6, [r7, #0]
 801b742:	807a      	strh	r2, [r7, #2]
 801b744:	f8a7 a004 	strh.w	sl, [r7, #4]
 801b748:	f8a7 a006 	strh.w	sl, [r7, #6]
 801b74c:	d1c5      	bne.n	801b6da <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 801b74e:	9a04      	ldr	r2, [sp, #16]
 801b750:	1ad3      	subs	r3, r2, r3
 801b752:	6902      	ldr	r2, [r0, #16]
 801b754:	8891      	ldrh	r1, [r2, #4]
 801b756:	88d6      	ldrh	r6, [r2, #6]
 801b758:	4419      	add	r1, r3
 801b75a:	8091      	strh	r1, [r2, #4]
 801b75c:	9902      	ldr	r1, [sp, #8]
 801b75e:	f101 0c20 	add.w	ip, r1, #32
 801b762:	9901      	ldr	r1, [sp, #4]
 801b764:	ebac 0c01 	sub.w	ip, ip, r1
 801b768:	fb03 630c 	mla	r3, r3, ip, r6
 801b76c:	80d3      	strh	r3, [r2, #6]
 801b76e:	e74c      	b.n	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801b770:	9d05      	ldr	r5, [sp, #20]
 801b772:	1aa2      	subs	r2, r4, r2
 801b774:	eba5 0501 	sub.w	r5, r5, r1
 801b778:	9508      	str	r5, [sp, #32]
 801b77a:	9202      	str	r2, [sp, #8]
 801b77c:	f140 8128 	bpl.w	801b9d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 801b780:	9a03      	ldr	r2, [sp, #12]
 801b782:	2a00      	cmp	r2, #0
 801b784:	f6ff af41 	blt.w	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801b788:	f04f 34ff 	mov.w	r4, #4294967295
 801b78c:	9a02      	ldr	r2, [sp, #8]
 801b78e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b790:	4252      	negs	r2, r2
 801b792:	9202      	str	r2, [sp, #8]
 801b794:	9a06      	ldr	r2, [sp, #24]
 801b796:	2400      	movs	r4, #0
 801b798:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801b79c:	9206      	str	r2, [sp, #24]
 801b79e:	462a      	mov	r2, r5
 801b7a0:	435a      	muls	r2, r3
 801b7a2:	9401      	str	r4, [sp, #4]
 801b7a4:	9c02      	ldr	r4, [sp, #8]
 801b7a6:	9d02      	ldr	r5, [sp, #8]
 801b7a8:	fb92 f4f4 	sdiv	r4, r2, r4
 801b7ac:	fb05 2214 	mls	r2, r5, r4, r2
 801b7b0:	2a00      	cmp	r2, #0
 801b7b2:	9207      	str	r2, [sp, #28]
 801b7b4:	bfbc      	itt	lt
 801b7b6:	1952      	addlt	r2, r2, r5
 801b7b8:	9207      	strlt	r2, [sp, #28]
 801b7ba:	9a01      	ldr	r2, [sp, #4]
 801b7bc:	bfb8      	it	lt
 801b7be:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801b7c2:	eb04 0901 	add.w	r9, r4, r1
 801b7c6:	429a      	cmp	r2, r3
 801b7c8:	ea4f 1669 	mov.w	r6, r9, asr #5
 801b7cc:	6905      	ldr	r5, [r0, #16]
 801b7ce:	f040 8112 	bne.w	801b9f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 801b7d2:	f9b5 3000 	ldrsh.w	r3, [r5]
 801b7d6:	429e      	cmp	r6, r3
 801b7d8:	d104      	bne.n	801b7e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 801b7da:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b7de:	9a03      	ldr	r2, [sp, #12]
 801b7e0:	429a      	cmp	r2, r3
 801b7e2:	d01b      	beq.n	801b81c <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801b7e4:	88ea      	ldrh	r2, [r5, #6]
 801b7e6:	88ab      	ldrh	r3, [r5, #4]
 801b7e8:	4313      	orrs	r3, r2
 801b7ea:	d010      	beq.n	801b80e <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801b7ec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b7f0:	2a00      	cmp	r2, #0
 801b7f2:	db0c      	blt.n	801b80e <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801b7f4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801b7f6:	429a      	cmp	r2, r3
 801b7f8:	da09      	bge.n	801b80e <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801b7fa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801b7fe:	429a      	cmp	r2, r3
 801b800:	bf38      	it	cc
 801b802:	3508      	addcc	r5, #8
 801b804:	f102 0201 	add.w	r2, r2, #1
 801b808:	bf38      	it	cc
 801b80a:	6105      	strcc	r5, [r0, #16]
 801b80c:	6082      	str	r2, [r0, #8]
 801b80e:	6903      	ldr	r3, [r0, #16]
 801b810:	9a03      	ldr	r2, [sp, #12]
 801b812:	801e      	strh	r6, [r3, #0]
 801b814:	805a      	strh	r2, [r3, #2]
 801b816:	2200      	movs	r2, #0
 801b818:	809a      	strh	r2, [r3, #4]
 801b81a:	80da      	strh	r2, [r3, #6]
 801b81c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b81e:	9a03      	ldr	r2, [sp, #12]
 801b820:	6901      	ldr	r1, [r0, #16]
 801b822:	441a      	add	r2, r3
 801b824:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b828:	42b3      	cmp	r3, r6
 801b82a:	d103      	bne.n	801b834 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 801b82c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b830:	429a      	cmp	r2, r3
 801b832:	d01a      	beq.n	801b86a <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 801b834:	88cc      	ldrh	r4, [r1, #6]
 801b836:	888b      	ldrh	r3, [r1, #4]
 801b838:	4323      	orrs	r3, r4
 801b83a:	d010      	beq.n	801b85e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801b83c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801b840:	2c00      	cmp	r4, #0
 801b842:	db0c      	blt.n	801b85e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801b844:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801b846:	429c      	cmp	r4, r3
 801b848:	da09      	bge.n	801b85e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801b84a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801b84e:	429c      	cmp	r4, r3
 801b850:	bf38      	it	cc
 801b852:	3108      	addcc	r1, #8
 801b854:	f104 0401 	add.w	r4, r4, #1
 801b858:	bf38      	it	cc
 801b85a:	6101      	strcc	r1, [r0, #16]
 801b85c:	6084      	str	r4, [r0, #8]
 801b85e:	2100      	movs	r1, #0
 801b860:	6903      	ldr	r3, [r0, #16]
 801b862:	801e      	strh	r6, [r3, #0]
 801b864:	805a      	strh	r2, [r3, #2]
 801b866:	8099      	strh	r1, [r3, #4]
 801b868:	80d9      	strh	r1, [r3, #6]
 801b86a:	9b06      	ldr	r3, [sp, #24]
 801b86c:	4293      	cmp	r3, r2
 801b86e:	f000 8082 	beq.w	801b976 <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 801b872:	9b08      	ldr	r3, [sp, #32]
 801b874:	9902      	ldr	r1, [sp, #8]
 801b876:	015b      	lsls	r3, r3, #5
 801b878:	fb93 f1f1 	sdiv	r1, r3, r1
 801b87c:	9c02      	ldr	r4, [sp, #8]
 801b87e:	9103      	str	r1, [sp, #12]
 801b880:	fb04 3311 	mls	r3, r4, r1, r3
 801b884:	2b00      	cmp	r3, #0
 801b886:	9308      	str	r3, [sp, #32]
 801b888:	da04      	bge.n	801b894 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 801b88a:	1e4b      	subs	r3, r1, #1
 801b88c:	9303      	str	r3, [sp, #12]
 801b88e:	9b08      	ldr	r3, [sp, #32]
 801b890:	4423      	add	r3, r4
 801b892:	9308      	str	r3, [sp, #32]
 801b894:	464f      	mov	r7, r9
 801b896:	2600      	movs	r6, #0
 801b898:	9b07      	ldr	r3, [sp, #28]
 801b89a:	9902      	ldr	r1, [sp, #8]
 801b89c:	1a5b      	subs	r3, r3, r1
 801b89e:	9307      	str	r3, [sp, #28]
 801b8a0:	9b01      	ldr	r3, [sp, #4]
 801b8a2:	f1c3 0320 	rsb	r3, r3, #32
 801b8a6:	930e      	str	r3, [sp, #56]	@ 0x38
 801b8a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b8aa:	9b01      	ldr	r3, [sp, #4]
 801b8ac:	1a5b      	subs	r3, r3, r1
 801b8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801b8b0:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801b8b4:	185b      	adds	r3, r3, r1
 801b8b6:	bf58      	it	pl
 801b8b8:	9902      	ldrpl	r1, [sp, #8]
 801b8ba:	9307      	str	r3, [sp, #28]
 801b8bc:	bf5d      	ittte	pl
 801b8be:	1a5b      	subpl	r3, r3, r1
 801b8c0:	9307      	strpl	r3, [sp, #28]
 801b8c2:	9b03      	ldrpl	r3, [sp, #12]
 801b8c4:	9903      	ldrmi	r1, [sp, #12]
 801b8c6:	bf58      	it	pl
 801b8c8:	1c59      	addpl	r1, r3, #1
 801b8ca:	4489      	add	r9, r1
 801b8cc:	2a00      	cmp	r2, #0
 801b8ce:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801b8d2:	db2e      	blt.n	801b932 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801b8d4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801b8d6:	4293      	cmp	r3, r2
 801b8d8:	dd2b      	ble.n	801b932 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801b8da:	9c01      	ldr	r4, [sp, #4]
 801b8dc:	6905      	ldr	r5, [r0, #16]
 801b8de:	46a0      	mov	r8, r4
 801b8e0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b8e2:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801b8e6:	45a0      	cmp	r8, r4
 801b8e8:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801b8ec:	f040 8150 	bne.w	801bb90 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 801b8f0:	f9b5 1000 	ldrsh.w	r1, [r5]
 801b8f4:	4551      	cmp	r1, sl
 801b8f6:	d103      	bne.n	801b900 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 801b8f8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801b8fc:	4291      	cmp	r1, r2
 801b8fe:	d018      	beq.n	801b932 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801b900:	ea5c 010e 	orrs.w	r1, ip, lr
 801b904:	d00f      	beq.n	801b926 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801b906:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801b90a:	2900      	cmp	r1, #0
 801b90c:	db0b      	blt.n	801b926 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801b90e:	428b      	cmp	r3, r1
 801b910:	dd09      	ble.n	801b926 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801b912:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801b916:	4299      	cmp	r1, r3
 801b918:	bf38      	it	cc
 801b91a:	3508      	addcc	r5, #8
 801b91c:	f101 0101 	add.w	r1, r1, #1
 801b920:	bf38      	it	cc
 801b922:	6105      	strcc	r5, [r0, #16]
 801b924:	6081      	str	r1, [r0, #8]
 801b926:	6903      	ldr	r3, [r0, #16]
 801b928:	f8a3 a000 	strh.w	sl, [r3]
 801b92c:	805a      	strh	r2, [r3, #2]
 801b92e:	809e      	strh	r6, [r3, #4]
 801b930:	80de      	strh	r6, [r3, #6]
 801b932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b934:	6901      	ldr	r1, [r0, #16]
 801b936:	441a      	add	r2, r3
 801b938:	88cc      	ldrh	r4, [r1, #6]
 801b93a:	888b      	ldrh	r3, [r1, #4]
 801b93c:	4323      	orrs	r3, r4
 801b93e:	d010      	beq.n	801b962 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801b940:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801b944:	2c00      	cmp	r4, #0
 801b946:	db0c      	blt.n	801b962 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801b948:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801b94a:	429c      	cmp	r4, r3
 801b94c:	da09      	bge.n	801b962 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801b94e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801b952:	429c      	cmp	r4, r3
 801b954:	bf38      	it	cc
 801b956:	3108      	addcc	r1, #8
 801b958:	f104 0401 	add.w	r4, r4, #1
 801b95c:	bf38      	it	cc
 801b95e:	6101      	strcc	r1, [r0, #16]
 801b960:	6084      	str	r4, [r0, #8]
 801b962:	6903      	ldr	r3, [r0, #16]
 801b964:	464f      	mov	r7, r9
 801b966:	f8a3 a000 	strh.w	sl, [r3]
 801b96a:	805a      	strh	r2, [r3, #2]
 801b96c:	809e      	strh	r6, [r3, #4]
 801b96e:	80de      	strh	r6, [r3, #6]
 801b970:	9b06      	ldr	r3, [sp, #24]
 801b972:	4293      	cmp	r3, r2
 801b974:	d19c      	bne.n	801b8b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 801b976:	9b01      	ldr	r3, [sp, #4]
 801b978:	6907      	ldr	r7, [r0, #16]
 801b97a:	f1c3 0620 	rsb	r6, r3, #32
 801b97e:	9b05      	ldr	r3, [sp, #20]
 801b980:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801b984:	9b04      	ldr	r3, [sp, #16]
 801b986:	429e      	cmp	r6, r3
 801b988:	f040 81cc 	bne.w	801bd24 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 801b98c:	f9b7 3000 	ldrsh.w	r3, [r7]
 801b990:	459e      	cmp	lr, r3
 801b992:	d104      	bne.n	801b99e <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 801b994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b998:	429a      	cmp	r2, r3
 801b99a:	f43f ae36 	beq.w	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801b99e:	88f9      	ldrh	r1, [r7, #6]
 801b9a0:	88bb      	ldrh	r3, [r7, #4]
 801b9a2:	430b      	orrs	r3, r1
 801b9a4:	d010      	beq.n	801b9c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801b9a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	db0c      	blt.n	801b9c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801b9ae:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801b9b0:	428b      	cmp	r3, r1
 801b9b2:	da09      	bge.n	801b9c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801b9b4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801b9b8:	428b      	cmp	r3, r1
 801b9ba:	bf38      	it	cc
 801b9bc:	3708      	addcc	r7, #8
 801b9be:	f103 0301 	add.w	r3, r3, #1
 801b9c2:	bf38      	it	cc
 801b9c4:	6107      	strcc	r7, [r0, #16]
 801b9c6:	6083      	str	r3, [r0, #8]
 801b9c8:	6903      	ldr	r3, [r0, #16]
 801b9ca:	f8a3 e000 	strh.w	lr, [r3]
 801b9ce:	e5ff      	b.n	801b5d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 801b9d0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801b9d2:	9c03      	ldr	r4, [sp, #12]
 801b9d4:	42a2      	cmp	r2, r4
 801b9d6:	f6ff ae18 	blt.w	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801b9da:	9c06      	ldr	r4, [sp, #24]
 801b9dc:	42a2      	cmp	r2, r4
 801b9de:	bfb8      	it	lt
 801b9e0:	3201      	addlt	r2, #1
 801b9e2:	9c08      	ldr	r4, [sp, #32]
 801b9e4:	bfb8      	it	lt
 801b9e6:	9206      	strlt	r2, [sp, #24]
 801b9e8:	f1c3 0220 	rsb	r2, r3, #32
 801b9ec:	4362      	muls	r2, r4
 801b9ee:	2401      	movs	r4, #1
 801b9f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b9f2:	2420      	movs	r4, #32
 801b9f4:	e6d5      	b.n	801b7a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 801b9f6:	f009 021f 	and.w	r2, r9, #31
 801b9fa:	ea4f 1861 	mov.w	r8, r1, asr #5
 801b9fe:	920c      	str	r2, [sp, #48]	@ 0x30
 801ba00:	9a01      	ldr	r2, [sp, #4]
 801ba02:	45b0      	cmp	r8, r6
 801ba04:	f001 011f 	and.w	r1, r1, #31
 801ba08:	eba2 0203 	sub.w	r2, r2, r3
 801ba0c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801ba10:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801ba14:	d108      	bne.n	801ba28 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 801ba16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba18:	4496      	add	lr, r2
 801ba1a:	4419      	add	r1, r3
 801ba1c:	fb02 a101 	mla	r1, r2, r1, sl
 801ba20:	f8a5 e004 	strh.w	lr, [r5, #4]
 801ba24:	80e9      	strh	r1, [r5, #6]
 801ba26:	e6f9      	b.n	801b81c <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801ba28:	2c00      	cmp	r4, #0
 801ba2a:	f2c0 80aa 	blt.w	801bb82 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 801ba2e:	2701      	movs	r7, #1
 801ba30:	970a      	str	r7, [sp, #40]	@ 0x28
 801ba32:	2720      	movs	r7, #32
 801ba34:	f1c1 0c20 	rsb	ip, r1, #32
 801ba38:	fb02 f20c 	mul.w	r2, r2, ip
 801ba3c:	fb92 fcf4 	sdiv	ip, r2, r4
 801ba40:	fb04 221c 	mls	r2, r4, ip, r2
 801ba44:	9709      	str	r7, [sp, #36]	@ 0x24
 801ba46:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ba48:	2a00      	cmp	r2, #0
 801ba4a:	bfb8      	it	lt
 801ba4c:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801ba50:	4439      	add	r1, r7
 801ba52:	fb0c a101 	mla	r1, ip, r1, sl
 801ba56:	44e6      	add	lr, ip
 801ba58:	80e9      	strh	r1, [r5, #6]
 801ba5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ba5c:	f8a5 e004 	strh.w	lr, [r5, #4]
 801ba60:	eb08 0501 	add.w	r5, r8, r1
 801ba64:	6901      	ldr	r1, [r0, #16]
 801ba66:	bfb8      	it	lt
 801ba68:	1912      	addlt	r2, r2, r4
 801ba6a:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801ba6e:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801ba72:	ea58 070e 	orrs.w	r7, r8, lr
 801ba76:	d010      	beq.n	801ba9a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801ba78:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801ba7c:	f1be 0f00 	cmp.w	lr, #0
 801ba80:	db0b      	blt.n	801ba9a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801ba82:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801ba84:	45be      	cmp	lr, r7
 801ba86:	da08      	bge.n	801ba9a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801ba88:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801ba8c:	45be      	cmp	lr, r7
 801ba8e:	bf3c      	itt	cc
 801ba90:	3108      	addcc	r1, #8
 801ba92:	6101      	strcc	r1, [r0, #16]
 801ba94:	f10e 0101 	add.w	r1, lr, #1
 801ba98:	6081      	str	r1, [r0, #8]
 801ba9a:	f04f 0e00 	mov.w	lr, #0
 801ba9e:	6901      	ldr	r1, [r0, #16]
 801baa0:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801baa4:	42ae      	cmp	r6, r5
 801baa6:	800d      	strh	r5, [r1, #0]
 801baa8:	f8a1 8002 	strh.w	r8, [r1, #2]
 801baac:	f8a1 e004 	strh.w	lr, [r1, #4]
 801bab0:	f8a1 e006 	strh.w	lr, [r1, #6]
 801bab4:	4463      	add	r3, ip
 801bab6:	d055      	beq.n	801bb64 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 801bab8:	9901      	ldr	r1, [sp, #4]
 801baba:	1b12      	subs	r2, r2, r4
 801babc:	1ac9      	subs	r1, r1, r3
 801babe:	4461      	add	r1, ip
 801bac0:	0149      	lsls	r1, r1, #5
 801bac2:	fb91 fef4 	sdiv	lr, r1, r4
 801bac6:	fb04 111e 	mls	r1, r4, lr, r1
 801baca:	2900      	cmp	r1, #0
 801bacc:	bfb8      	it	lt
 801bace:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801bad2:	f10e 0701 	add.w	r7, lr, #1
 801bad6:	bfb8      	it	lt
 801bad8:	1909      	addlt	r1, r1, r4
 801bada:	970d      	str	r7, [sp, #52]	@ 0x34
 801badc:	1852      	adds	r2, r2, r1
 801bade:	bf48      	it	mi
 801bae0:	46f4      	movmi	ip, lr
 801bae2:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801bae6:	bf58      	it	pl
 801bae8:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801baec:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801baf0:	4463      	add	r3, ip
 801baf2:	44e3      	add	fp, ip
 801baf4:	f8aa b004 	strh.w	fp, [sl, #4]
 801baf8:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801bafc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801bafe:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801bb02:	f8aa b006 	strh.w	fp, [sl, #6]
 801bb06:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bb0a:	bf58      	it	pl
 801bb0c:	1b12      	subpl	r2, r2, r4
 801bb0e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801bb12:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801bb16:	443d      	add	r5, r7
 801bb18:	ea5b 070a 	orrs.w	r7, fp, sl
 801bb1c:	d014      	beq.n	801bb48 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801bb1e:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801bb22:	f1ba 0f00 	cmp.w	sl, #0
 801bb26:	db0f      	blt.n	801bb48 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801bb28:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801bb2a:	45ba      	cmp	sl, r7
 801bb2c:	da0c      	bge.n	801bb48 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801bb2e:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801bb32:	45ba      	cmp	sl, r7
 801bb34:	bf38      	it	cc
 801bb36:	f10c 0c08 	addcc.w	ip, ip, #8
 801bb3a:	f10a 0a01 	add.w	sl, sl, #1
 801bb3e:	bf38      	it	cc
 801bb40:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801bb44:	f8c0 a008 	str.w	sl, [r0, #8]
 801bb48:	f04f 0700 	mov.w	r7, #0
 801bb4c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bb50:	42ae      	cmp	r6, r5
 801bb52:	f8ac 5000 	strh.w	r5, [ip]
 801bb56:	f8ac 8002 	strh.w	r8, [ip, #2]
 801bb5a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801bb5e:	f8ac 7006 	strh.w	r7, [ip, #6]
 801bb62:	d1bb      	bne.n	801badc <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 801bb64:	6904      	ldr	r4, [r0, #16]
 801bb66:	9a01      	ldr	r2, [sp, #4]
 801bb68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801bb6a:	1ad3      	subs	r3, r2, r3
 801bb6c:	88a2      	ldrh	r2, [r4, #4]
 801bb6e:	3120      	adds	r1, #32
 801bb70:	441a      	add	r2, r3
 801bb72:	80a2      	strh	r2, [r4, #4]
 801bb74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb76:	1a89      	subs	r1, r1, r2
 801bb78:	88e2      	ldrh	r2, [r4, #6]
 801bb7a:	fb03 2301 	mla	r3, r3, r1, r2
 801bb7e:	80e3      	strh	r3, [r4, #6]
 801bb80:	e64c      	b.n	801b81c <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801bb82:	f04f 37ff 	mov.w	r7, #4294967295
 801bb86:	434a      	muls	r2, r1
 801bb88:	970a      	str	r7, [sp, #40]	@ 0x28
 801bb8a:	4264      	negs	r4, r4
 801bb8c:	2700      	movs	r7, #0
 801bb8e:	e755      	b.n	801ba3c <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 801bb90:	ea4f 1867 	mov.w	r8, r7, asr #5
 801bb94:	f009 031f 	and.w	r3, r9, #31
 801bb98:	45d0      	cmp	r8, sl
 801bb9a:	f007 071f 	and.w	r7, r7, #31
 801bb9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bba0:	fa1f fc8c 	uxth.w	ip, ip
 801bba4:	fa1f fe8e 	uxth.w	lr, lr
 801bba8:	d10a      	bne.n	801bbc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 801bbaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bbac:	449c      	add	ip, r3
 801bbae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bbb0:	f8a5 c004 	strh.w	ip, [r5, #4]
 801bbb4:	441f      	add	r7, r3
 801bbb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bbb8:	fb03 e707 	mla	r7, r3, r7, lr
 801bbbc:	80ef      	strh	r7, [r5, #6]
 801bbbe:	e6b8      	b.n	801b932 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801bbc0:	2900      	cmp	r1, #0
 801bbc2:	f2c0 80a7 	blt.w	801bd14 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 801bbc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bbc8:	f1c7 0320 	rsb	r3, r7, #32
 801bbcc:	4363      	muls	r3, r4
 801bbce:	2401      	movs	r4, #1
 801bbd0:	940d      	str	r4, [sp, #52]	@ 0x34
 801bbd2:	2420      	movs	r4, #32
 801bbd4:	940c      	str	r4, [sp, #48]	@ 0x30
 801bbd6:	fb93 f4f1 	sdiv	r4, r3, r1
 801bbda:	fb01 3b14 	mls	fp, r1, r4, r3
 801bbde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbe0:	f1bb 0f00 	cmp.w	fp, #0
 801bbe4:	bfb8      	it	lt
 801bbe6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801bbea:	441f      	add	r7, r3
 801bbec:	fb04 e707 	mla	r7, r4, r7, lr
 801bbf0:	44a4      	add	ip, r4
 801bbf2:	f8a5 c004 	strh.w	ip, [r5, #4]
 801bbf6:	80ef      	strh	r7, [r5, #6]
 801bbf8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bbfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bbfe:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801bc02:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801bc06:	bfb8      	it	lt
 801bc08:	448b      	addlt	fp, r1
 801bc0a:	eb08 0503 	add.w	r5, r8, r3
 801bc0e:	ea5e 0307 	orrs.w	r3, lr, r7
 801bc12:	d011      	beq.n	801bc38 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801bc14:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801bc18:	f1be 0f00 	cmp.w	lr, #0
 801bc1c:	db0c      	blt.n	801bc38 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801bc1e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801bc20:	45be      	cmp	lr, r7
 801bc22:	da09      	bge.n	801bc38 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801bc24:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801bc28:	45be      	cmp	lr, r7
 801bc2a:	bf3c      	itt	cc
 801bc2c:	f10c 0708 	addcc.w	r7, ip, #8
 801bc30:	6107      	strcc	r7, [r0, #16]
 801bc32:	f10e 0701 	add.w	r7, lr, #1
 801bc36:	6087      	str	r7, [r0, #8]
 801bc38:	6907      	ldr	r7, [r0, #16]
 801bc3a:	b213      	sxth	r3, r2
 801bc3c:	9310      	str	r3, [sp, #64]	@ 0x40
 801bc3e:	807b      	strh	r3, [r7, #2]
 801bc40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc42:	4555      	cmp	r5, sl
 801bc44:	803d      	strh	r5, [r7, #0]
 801bc46:	80be      	strh	r6, [r7, #4]
 801bc48:	80fe      	strh	r6, [r7, #6]
 801bc4a:	eb04 0c03 	add.w	ip, r4, r3
 801bc4e:	d050      	beq.n	801bcf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 801bc50:	9b01      	ldr	r3, [sp, #4]
 801bc52:	eba3 070c 	sub.w	r7, r3, ip
 801bc56:	443c      	add	r4, r7
 801bc58:	0164      	lsls	r4, r4, #5
 801bc5a:	fb94 f8f1 	sdiv	r8, r4, r1
 801bc5e:	fb01 4418 	mls	r4, r1, r8, r4
 801bc62:	2c00      	cmp	r4, #0
 801bc64:	bfb8      	it	lt
 801bc66:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801bc6a:	ebab 0301 	sub.w	r3, fp, r1
 801bc6e:	f108 0701 	add.w	r7, r8, #1
 801bc72:	bfb8      	it	lt
 801bc74:	1864      	addlt	r4, r4, r1
 801bc76:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc78:	9711      	str	r7, [sp, #68]	@ 0x44
 801bc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc7c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801bc80:	191b      	adds	r3, r3, r4
 801bc82:	bf4c      	ite	mi
 801bc84:	4647      	movmi	r7, r8
 801bc86:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801bc88:	f8be b004 	ldrh.w	fp, [lr, #4]
 801bc8c:	44bc      	add	ip, r7
 801bc8e:	44bb      	add	fp, r7
 801bc90:	f8ae b004 	strh.w	fp, [lr, #4]
 801bc94:	f8be b006 	ldrh.w	fp, [lr, #6]
 801bc98:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc9a:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801bc9e:	f8ae b006 	strh.w	fp, [lr, #6]
 801bca2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801bca4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801bca8:	443d      	add	r5, r7
 801bcaa:	f8be b006 	ldrh.w	fp, [lr, #6]
 801bcae:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801bcb2:	bf5c      	itt	pl
 801bcb4:	1a5b      	subpl	r3, r3, r1
 801bcb6:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801bcb8:	ea5b 0307 	orrs.w	r3, fp, r7
 801bcbc:	d011      	beq.n	801bce2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801bcbe:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801bcc2:	f1bb 0f00 	cmp.w	fp, #0
 801bcc6:	db0c      	blt.n	801bce2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801bcc8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801bcca:	45bb      	cmp	fp, r7
 801bccc:	da09      	bge.n	801bce2 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801bcce:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801bcd2:	45bb      	cmp	fp, r7
 801bcd4:	bf3c      	itt	cc
 801bcd6:	f10e 0708 	addcc.w	r7, lr, #8
 801bcda:	6107      	strcc	r7, [r0, #16]
 801bcdc:	f10b 0701 	add.w	r7, fp, #1
 801bce0:	6087      	str	r7, [r0, #8]
 801bce2:	6907      	ldr	r7, [r0, #16]
 801bce4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bce6:	4555      	cmp	r5, sl
 801bce8:	803d      	strh	r5, [r7, #0]
 801bcea:	807b      	strh	r3, [r7, #2]
 801bcec:	80be      	strh	r6, [r7, #4]
 801bcee:	80fe      	strh	r6, [r7, #6]
 801bcf0:	d1c3      	bne.n	801bc7a <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 801bcf2:	9b01      	ldr	r3, [sp, #4]
 801bcf4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801bcf6:	eba3 0c0c 	sub.w	ip, r3, ip
 801bcfa:	6903      	ldr	r3, [r0, #16]
 801bcfc:	3720      	adds	r7, #32
 801bcfe:	8899      	ldrh	r1, [r3, #4]
 801bd00:	4461      	add	r1, ip
 801bd02:	8099      	strh	r1, [r3, #4]
 801bd04:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801bd06:	1a7f      	subs	r7, r7, r1
 801bd08:	88d9      	ldrh	r1, [r3, #6]
 801bd0a:	fb0c 1c07 	mla	ip, ip, r7, r1
 801bd0e:	f8a3 c006 	strh.w	ip, [r3, #6]
 801bd12:	e60e      	b.n	801b932 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801bd14:	f04f 34ff 	mov.w	r4, #4294967295
 801bd18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bd1a:	940d      	str	r4, [sp, #52]	@ 0x34
 801bd1c:	437b      	muls	r3, r7
 801bd1e:	4249      	negs	r1, r1
 801bd20:	2400      	movs	r4, #0
 801bd22:	e757      	b.n	801bbd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 801bd24:	9905      	ldr	r1, [sp, #20]
 801bd26:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801bd2a:	f001 011f 	and.w	r1, r1, #31
 801bd2e:	9102      	str	r1, [sp, #8]
 801bd30:	9904      	ldr	r1, [sp, #16]
 801bd32:	45f3      	cmp	fp, lr
 801bd34:	f009 0c1f 	and.w	ip, r9, #31
 801bd38:	eba1 0406 	sub.w	r4, r1, r6
 801bd3c:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801bd40:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801bd44:	d108      	bne.n	801bd58 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 801bd46:	9b02      	ldr	r3, [sp, #8]
 801bd48:	44a0      	add	r8, r4
 801bd4a:	449c      	add	ip, r3
 801bd4c:	fb04 a40c 	mla	r4, r4, ip, sl
 801bd50:	f8a7 8004 	strh.w	r8, [r7, #4]
 801bd54:	80fc      	strh	r4, [r7, #6]
 801bd56:	e458      	b.n	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801bd58:	9905      	ldr	r1, [sp, #20]
 801bd5a:	ebb1 0109 	subs.w	r1, r1, r9
 801bd5e:	bf5b      	ittet	pl
 801bd60:	f1cc 0520 	rsbpl	r5, ip, #32
 801bd64:	436c      	mulpl	r4, r5
 801bd66:	2500      	movmi	r5, #0
 801bd68:	2520      	movpl	r5, #32
 801bd6a:	bf44      	itt	mi
 801bd6c:	fb04 f40c 	mulmi.w	r4, r4, ip
 801bd70:	4249      	negmi	r1, r1
 801bd72:	9501      	str	r5, [sp, #4]
 801bd74:	fb94 f5f1 	sdiv	r5, r4, r1
 801bd78:	bf54      	ite	pl
 801bd7a:	f04f 0901 	movpl.w	r9, #1
 801bd7e:	f04f 39ff 	movmi.w	r9, #4294967295
 801bd82:	fb01 4415 	mls	r4, r1, r5, r4
 801bd86:	9b01      	ldr	r3, [sp, #4]
 801bd88:	2c00      	cmp	r4, #0
 801bd8a:	bfb8      	it	lt
 801bd8c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801bd90:	449c      	add	ip, r3
 801bd92:	fb05 ac0c 	mla	ip, r5, ip, sl
 801bd96:	44a8      	add	r8, r5
 801bd98:	f8a7 8004 	strh.w	r8, [r7, #4]
 801bd9c:	f8a7 c006 	strh.w	ip, [r7, #6]
 801bda0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bda4:	bfb8      	it	lt
 801bda6:	1864      	addlt	r4, r4, r1
 801bda8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801bdac:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801bdb0:	eb0b 0309 	add.w	r3, fp, r9
 801bdb4:	ea58 0707 	orrs.w	r7, r8, r7
 801bdb8:	d011      	beq.n	801bdde <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801bdba:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801bdbe:	f1b8 0f00 	cmp.w	r8, #0
 801bdc2:	db0c      	blt.n	801bdde <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801bdc4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801bdc6:	45b8      	cmp	r8, r7
 801bdc8:	da09      	bge.n	801bdde <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801bdca:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801bdce:	45b8      	cmp	r8, r7
 801bdd0:	bf3c      	itt	cc
 801bdd2:	f10c 0708 	addcc.w	r7, ip, #8
 801bdd6:	6107      	strcc	r7, [r0, #16]
 801bdd8:	f108 0701 	add.w	r7, r8, #1
 801bddc:	6087      	str	r7, [r0, #8]
 801bdde:	f04f 0c00 	mov.w	ip, #0
 801bde2:	6907      	ldr	r7, [r0, #16]
 801bde4:	b212      	sxth	r2, r2
 801bde6:	459e      	cmp	lr, r3
 801bde8:	803b      	strh	r3, [r7, #0]
 801bdea:	807a      	strh	r2, [r7, #2]
 801bdec:	f8a7 c004 	strh.w	ip, [r7, #4]
 801bdf0:	f8a7 c006 	strh.w	ip, [r7, #6]
 801bdf4:	442e      	add	r6, r5
 801bdf6:	d04d      	beq.n	801be94 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 801bdf8:	9f04      	ldr	r7, [sp, #16]
 801bdfa:	f04f 0a00 	mov.w	sl, #0
 801bdfe:	1bbf      	subs	r7, r7, r6
 801be00:	443d      	add	r5, r7
 801be02:	016d      	lsls	r5, r5, #5
 801be04:	fb95 f8f1 	sdiv	r8, r5, r1
 801be08:	fb01 5518 	mls	r5, r1, r8, r5
 801be0c:	4565      	cmp	r5, ip
 801be0e:	bfb8      	it	lt
 801be10:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801be14:	f108 0701 	add.w	r7, r8, #1
 801be18:	bfb8      	it	lt
 801be1a:	186d      	addlt	r5, r5, r1
 801be1c:	1a64      	subs	r4, r4, r1
 801be1e:	9703      	str	r7, [sp, #12]
 801be20:	1964      	adds	r4, r4, r5
 801be22:	bf48      	it	mi
 801be24:	4647      	movmi	r7, r8
 801be26:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801be2a:	bf58      	it	pl
 801be2c:	9f03      	ldrpl	r7, [sp, #12]
 801be2e:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801be32:	443e      	add	r6, r7
 801be34:	44bb      	add	fp, r7
 801be36:	f8ac b004 	strh.w	fp, [ip, #4]
 801be3a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801be3e:	bf58      	it	pl
 801be40:	1a64      	subpl	r4, r4, r1
 801be42:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801be46:	f8ac b006 	strh.w	fp, [ip, #6]
 801be4a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801be4e:	444b      	add	r3, r9
 801be50:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801be54:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801be58:	ea5b 0707 	orrs.w	r7, fp, r7
 801be5c:	d011      	beq.n	801be82 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801be5e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801be62:	f1bb 0f00 	cmp.w	fp, #0
 801be66:	db0c      	blt.n	801be82 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801be68:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801be6a:	45bb      	cmp	fp, r7
 801be6c:	da09      	bge.n	801be82 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801be6e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801be72:	45bb      	cmp	fp, r7
 801be74:	bf3c      	itt	cc
 801be76:	f10c 0708 	addcc.w	r7, ip, #8
 801be7a:	6107      	strcc	r7, [r0, #16]
 801be7c:	f10b 0701 	add.w	r7, fp, #1
 801be80:	6087      	str	r7, [r0, #8]
 801be82:	6907      	ldr	r7, [r0, #16]
 801be84:	459e      	cmp	lr, r3
 801be86:	803b      	strh	r3, [r7, #0]
 801be88:	807a      	strh	r2, [r7, #2]
 801be8a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801be8e:	f8a7 a006 	strh.w	sl, [r7, #6]
 801be92:	d1c5      	bne.n	801be20 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 801be94:	9b04      	ldr	r3, [sp, #16]
 801be96:	1b9e      	subs	r6, r3, r6
 801be98:	6903      	ldr	r3, [r0, #16]
 801be9a:	889a      	ldrh	r2, [r3, #4]
 801be9c:	4432      	add	r2, r6
 801be9e:	809a      	strh	r2, [r3, #4]
 801bea0:	9a02      	ldr	r2, [sp, #8]
 801bea2:	f102 0c20 	add.w	ip, r2, #32
 801bea6:	9a01      	ldr	r2, [sp, #4]
 801bea8:	ebac 0c02 	sub.w	ip, ip, r2
 801beac:	88da      	ldrh	r2, [r3, #6]
 801beae:	fb06 260c 	mla	r6, r6, ip, r2
 801beb2:	80de      	strh	r6, [r3, #6]
 801beb4:	f7ff bba9 	b.w	801b60a <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

0801beb8 <_ZN8touchgfx7Outline6lineToEii>:
 801beb8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801beba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bebc:	079b      	lsls	r3, r3, #30
 801bebe:	460e      	mov	r6, r1
 801bec0:	4615      	mov	r5, r2
 801bec2:	d511      	bpl.n	801bee8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801bec4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801bec8:	ea86 0701 	eor.w	r7, r6, r1
 801becc:	ea85 0302 	eor.w	r3, r5, r2
 801bed0:	433b      	orrs	r3, r7
 801bed2:	d009      	beq.n	801bee8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801bed4:	4633      	mov	r3, r6
 801bed6:	9500      	str	r5, [sp, #0]
 801bed8:	f7ff fb3e 	bl	801b558 <_ZN8touchgfx7Outline10renderLineEiiii>
 801bedc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801bede:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801bee2:	f043 0301 	orr.w	r3, r3, #1
 801bee6:	6243      	str	r3, [r0, #36]	@ 0x24
 801bee8:	b003      	add	sp, #12
 801beea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801beec <_ZN8touchgfx7Outline6moveToEii>:
 801beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801bef0:	4615      	mov	r5, r2
 801bef2:	079a      	lsls	r2, r3, #30
 801bef4:	4604      	mov	r4, r0
 801bef6:	460e      	mov	r6, r1
 801bef8:	d401      	bmi.n	801befe <_ZN8touchgfx7Outline6moveToEii+0x12>
 801befa:	f7ff faf9 	bl	801b4f0 <_ZN8touchgfx7Outline5resetEv>
 801befe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801bf00:	07db      	lsls	r3, r3, #31
 801bf02:	d504      	bpl.n	801bf0e <_ZN8touchgfx7Outline6moveToEii+0x22>
 801bf04:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801bf08:	4620      	mov	r0, r4
 801bf0a:	f7ff ffd5 	bl	801beb8 <_ZN8touchgfx7Outline6lineToEii>
 801bf0e:	6923      	ldr	r3, [r4, #16]
 801bf10:	1170      	asrs	r0, r6, #5
 801bf12:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf16:	1169      	asrs	r1, r5, #5
 801bf18:	4290      	cmp	r0, r2
 801bf1a:	d103      	bne.n	801bf24 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801bf1c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801bf20:	4291      	cmp	r1, r2
 801bf22:	d01a      	beq.n	801bf5a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801bf24:	88df      	ldrh	r7, [r3, #6]
 801bf26:	889a      	ldrh	r2, [r3, #4]
 801bf28:	433a      	orrs	r2, r7
 801bf2a:	d010      	beq.n	801bf4e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801bf2c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801bf30:	2a00      	cmp	r2, #0
 801bf32:	db0c      	blt.n	801bf4e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801bf34:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801bf36:	42ba      	cmp	r2, r7
 801bf38:	da09      	bge.n	801bf4e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801bf3a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801bf3e:	42ba      	cmp	r2, r7
 801bf40:	bf38      	it	cc
 801bf42:	3308      	addcc	r3, #8
 801bf44:	f102 0201 	add.w	r2, r2, #1
 801bf48:	bf38      	it	cc
 801bf4a:	6123      	strcc	r3, [r4, #16]
 801bf4c:	60a2      	str	r2, [r4, #8]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	6923      	ldr	r3, [r4, #16]
 801bf52:	8018      	strh	r0, [r3, #0]
 801bf54:	8059      	strh	r1, [r3, #2]
 801bf56:	809a      	strh	r2, [r3, #4]
 801bf58:	80da      	strh	r2, [r3, #6]
 801bf5a:	6166      	str	r6, [r4, #20]
 801bf5c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bf60:	6225      	str	r5, [r4, #32]
 801bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bf64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf68:	b0d0      	sub	sp, #320	@ 0x140
 801bf6a:	466c      	mov	r4, sp
 801bf6c:	4627      	mov	r7, r4
 801bf6e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801bf72:	1a0d      	subs	r5, r1, r0
 801bf74:	2d48      	cmp	r5, #72	@ 0x48
 801bf76:	f100 0308 	add.w	r3, r0, #8
 801bf7a:	f340 80d5 	ble.w	801c128 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801bf7e:	112d      	asrs	r5, r5, #4
 801bf80:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801bf84:	6816      	ldr	r6, [r2, #0]
 801bf86:	f9b0 9000 	ldrsh.w	r9, [r0]
 801bf8a:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801bf8e:	6006      	str	r6, [r0, #0]
 801bf90:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801bf94:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801bf98:	6856      	ldr	r6, [r2, #4]
 801bf9a:	6046      	str	r6, [r0, #4]
 801bf9c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801bfa0:	f8a2 8002 	strh.w	r8, [r2, #2]
 801bfa4:	f8a2 e004 	strh.w	lr, [r2, #4]
 801bfa8:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bfac:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801bfb0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801bfb4:	f1a1 0208 	sub.w	r2, r1, #8
 801bfb8:	4565      	cmp	r5, ip
 801bfba:	db06      	blt.n	801bfca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801bfbc:	d119      	bne.n	801bff2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801bfbe:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801bfc2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801bfc6:	42ae      	cmp	r6, r5
 801bfc8:	dd13      	ble.n	801bff2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801bfca:	460e      	mov	r6, r1
 801bfcc:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801bfd0:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801bfd4:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801bfd8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801bfdc:	601d      	str	r5, [r3, #0]
 801bfde:	6875      	ldr	r5, [r6, #4]
 801bfe0:	605d      	str	r5, [r3, #4]
 801bfe2:	f821 9c08 	strh.w	r9, [r1, #-8]
 801bfe6:	f821 cc06 	strh.w	ip, [r1, #-6]
 801bfea:	f821 8c04 	strh.w	r8, [r1, #-4]
 801bfee:	f821 ec02 	strh.w	lr, [r1, #-2]
 801bff2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801bff6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801bffa:	42ae      	cmp	r6, r5
 801bffc:	db06      	blt.n	801c00c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801bffe:	d116      	bne.n	801c02e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801c000:	f9b0 c000 	ldrsh.w	ip, [r0]
 801c004:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801c008:	45ac      	cmp	ip, r5
 801c00a:	da10      	bge.n	801c02e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801c00c:	681d      	ldr	r5, [r3, #0]
 801c00e:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c012:	6005      	str	r5, [r0, #0]
 801c014:	685d      	ldr	r5, [r3, #4]
 801c016:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801c01a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801c01e:	f8a0 8008 	strh.w	r8, [r0, #8]
 801c022:	6045      	str	r5, [r0, #4]
 801c024:	8146      	strh	r6, [r0, #10]
 801c026:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801c02a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c02e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801c032:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801c036:	4565      	cmp	r5, ip
 801c038:	db06      	blt.n	801c048 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801c03a:	d119      	bne.n	801c070 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c03c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801c040:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c044:	42ae      	cmp	r6, r5
 801c046:	da13      	bge.n	801c070 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c048:	460e      	mov	r6, r1
 801c04a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801c04e:	f9b0 9000 	ldrsh.w	r9, [r0]
 801c052:	6005      	str	r5, [r0, #0]
 801c054:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801c058:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801c05c:	6875      	ldr	r5, [r6, #4]
 801c05e:	6045      	str	r5, [r0, #4]
 801c060:	f821 9c08 	strh.w	r9, [r1, #-8]
 801c064:	f821 cc06 	strh.w	ip, [r1, #-6]
 801c068:	f821 8c04 	strh.w	r8, [r1, #-4]
 801c06c:	f821 ec02 	strh.w	lr, [r1, #-2]
 801c070:	3308      	adds	r3, #8
 801c072:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801c076:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801c07a:	45e6      	cmp	lr, ip
 801c07c:	dbf8      	blt.n	801c070 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c07e:	d105      	bne.n	801c08c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c080:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c084:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c088:	42ae      	cmp	r6, r5
 801c08a:	dbf1      	blt.n	801c070 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c08c:	4615      	mov	r5, r2
 801c08e:	3a08      	subs	r2, #8
 801c090:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801c094:	45b4      	cmp	ip, r6
 801c096:	dbf9      	blt.n	801c08c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c098:	d105      	bne.n	801c0a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801c09a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c09e:	f9b2 6000 	ldrsh.w	r6, [r2]
 801c0a2:	45b0      	cmp	r8, r6
 801c0a4:	dbf2      	blt.n	801c08c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c0a6:	4293      	cmp	r3, r2
 801c0a8:	f1a5 0608 	sub.w	r6, r5, #8
 801c0ac:	d816      	bhi.n	801c0dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801c0ae:	f8d6 c000 	ldr.w	ip, [r6]
 801c0b2:	f9b3 a000 	ldrsh.w	sl, [r3]
 801c0b6:	f8c3 c000 	str.w	ip, [r3]
 801c0ba:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801c0be:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801c0c2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801c0c6:	f8c3 c004 	str.w	ip, [r3, #4]
 801c0ca:	f825 ac08 	strh.w	sl, [r5, #-8]
 801c0ce:	f825 ec06 	strh.w	lr, [r5, #-6]
 801c0d2:	f825 9c04 	strh.w	r9, [r5, #-4]
 801c0d6:	f825 8c02 	strh.w	r8, [r5, #-2]
 801c0da:	e7c9      	b.n	801c070 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c0dc:	f8d6 e000 	ldr.w	lr, [r6]
 801c0e0:	f9b0 a000 	ldrsh.w	sl, [r0]
 801c0e4:	f8c0 e000 	str.w	lr, [r0]
 801c0e8:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801c0ec:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801c0f0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801c0f4:	1a16      	subs	r6, r2, r0
 801c0f6:	f8c0 e004 	str.w	lr, [r0, #4]
 801c0fa:	f825 ac08 	strh.w	sl, [r5, #-8]
 801c0fe:	f825 cc06 	strh.w	ip, [r5, #-6]
 801c102:	f825 9c04 	strh.w	r9, [r5, #-4]
 801c106:	f825 8c02 	strh.w	r8, [r5, #-2]
 801c10a:	1acd      	subs	r5, r1, r3
 801c10c:	10ed      	asrs	r5, r5, #3
 801c10e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801c112:	bfb5      	itete	lt
 801c114:	e9c4 0200 	strdlt	r0, r2, [r4]
 801c118:	e9c4 3100 	strdge	r3, r1, [r4]
 801c11c:	460a      	movlt	r2, r1
 801c11e:	4603      	movge	r3, r0
 801c120:	3408      	adds	r4, #8
 801c122:	4618      	mov	r0, r3
 801c124:	4611      	mov	r1, r2
 801c126:	e724      	b.n	801bf72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801c128:	4299      	cmp	r1, r3
 801c12a:	d928      	bls.n	801c17e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 801c12c:	f1a3 0210 	sub.w	r2, r3, #16
 801c130:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801c134:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801c138:	45ac      	cmp	ip, r5
 801c13a:	db06      	blt.n	801c14a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801c13c:	d11d      	bne.n	801c17a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801c13e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801c142:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801c146:	42ae      	cmp	r6, r5
 801c148:	da17      	bge.n	801c17a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801c14a:	4615      	mov	r5, r2
 801c14c:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801c150:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801c154:	6116      	str	r6, [r2, #16]
 801c156:	686e      	ldr	r6, [r5, #4]
 801c158:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801c15c:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 801c160:	42a8      	cmp	r0, r5
 801c162:	6156      	str	r6, [r2, #20]
 801c164:	f8a2 9008 	strh.w	r9, [r2, #8]
 801c168:	f8a2 c00a 	strh.w	ip, [r2, #10]
 801c16c:	f8a2 800c 	strh.w	r8, [r2, #12]
 801c170:	f8a2 e00e 	strh.w	lr, [r2, #14]
 801c174:	f1a2 0208 	sub.w	r2, r2, #8
 801c178:	d1da      	bne.n	801c130 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801c17a:	3308      	adds	r3, #8
 801c17c:	e7d4      	b.n	801c128 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801c17e:	42bc      	cmp	r4, r7
 801c180:	d903      	bls.n	801c18a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 801c182:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801c186:	3c08      	subs	r4, #8
 801c188:	e6f3      	b.n	801bf72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801c18a:	b050      	add	sp, #320	@ 0x140
 801c18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801c190 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801c190:	b510      	push	{r4, lr}
 801c192:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801c194:	4604      	mov	r4, r0
 801c196:	07da      	lsls	r2, r3, #31
 801c198:	d507      	bpl.n	801c1aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801c19a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801c19e:	f7ff fe8b 	bl	801beb8 <_ZN8touchgfx7Outline6lineToEii>
 801c1a2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801c1a4:	f023 0301 	bic.w	r3, r3, #1
 801c1a8:	6243      	str	r3, [r0, #36]	@ 0x24
 801c1aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801c1ac:	079b      	lsls	r3, r3, #30
 801c1ae:	d521      	bpl.n	801c1f4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801c1b0:	6923      	ldr	r3, [r4, #16]
 801c1b2:	88d9      	ldrh	r1, [r3, #6]
 801c1b4:	889a      	ldrh	r2, [r3, #4]
 801c1b6:	430a      	orrs	r2, r1
 801c1b8:	d010      	beq.n	801c1dc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801c1ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c1be:	2a00      	cmp	r2, #0
 801c1c0:	db0c      	blt.n	801c1dc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801c1c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c1c4:	428a      	cmp	r2, r1
 801c1c6:	da09      	bge.n	801c1dc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801c1c8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801c1cc:	4291      	cmp	r1, r2
 801c1ce:	bf88      	it	hi
 801c1d0:	3308      	addhi	r3, #8
 801c1d2:	f102 0201 	add.w	r2, r2, #1
 801c1d6:	bf88      	it	hi
 801c1d8:	6123      	strhi	r3, [r4, #16]
 801c1da:	60a2      	str	r2, [r4, #8]
 801c1dc:	68a1      	ldr	r1, [r4, #8]
 801c1de:	b129      	cbz	r1, 801c1ec <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801c1e0:	6863      	ldr	r3, [r4, #4]
 801c1e2:	4299      	cmp	r1, r3
 801c1e4:	d802      	bhi.n	801c1ec <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801c1e6:	68e0      	ldr	r0, [r4, #12]
 801c1e8:	f7ff febc 	bl	801bf64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801c1ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801c1ee:	f023 0302 	bic.w	r3, r3, #2
 801c1f2:	6263      	str	r3, [r4, #36]	@ 0x24
 801c1f4:	68e0      	ldr	r0, [r4, #12]
 801c1f6:	bd10      	pop	{r4, pc}

0801c1f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801c1f8:	4b02      	ldr	r3, [pc, #8]	@ (801c204 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801c1fa:	6018      	str	r0, [r3, #0]
 801c1fc:	4b02      	ldr	r3, [pc, #8]	@ (801c208 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801c1fe:	6019      	str	r1, [r3, #0]
 801c200:	4770      	bx	lr
 801c202:	bf00      	nop
 801c204:	20012004 	.word	0x20012004
 801c208:	20012008 	.word	0x20012008

0801c20c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 801c20c:	2300      	movs	r3, #0
 801c20e:	4a02      	ldr	r2, [pc, #8]	@ (801c218 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 801c210:	6013      	str	r3, [r2, #0]
 801c212:	4a02      	ldr	r2, [pc, #8]	@ (801c21c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 801c214:	6013      	str	r3, [r2, #0]
 801c216:	4770      	bx	lr
 801c218:	20012004 	.word	0x20012004
 801c21c:	20012008 	.word	0x20012008

0801c220 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801c220:	4b01      	ldr	r3, [pc, #4]	@ (801c228 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801c222:	6818      	ldr	r0, [r3, #0]
 801c224:	4770      	bx	lr
 801c226:	bf00      	nop
 801c228:	20012004 	.word	0x20012004

0801c22c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801c22c:	4b01      	ldr	r3, [pc, #4]	@ (801c234 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801c22e:	6818      	ldr	r0, [r3, #0]
 801c230:	4770      	bx	lr
 801c232:	bf00      	nop
 801c234:	20012008 	.word	0x20012008

0801c238 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801c238:	b510      	push	{r4, lr}
 801c23a:	6803      	ldr	r3, [r0, #0]
 801c23c:	460c      	mov	r4, r1
 801c23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c240:	4798      	blx	r3
 801c242:	1b03      	subs	r3, r0, r4
 801c244:	4258      	negs	r0, r3
 801c246:	4158      	adcs	r0, r3
 801c248:	bd10      	pop	{r4, pc}
	...

0801c24c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801c24c:	4b01      	ldr	r3, [pc, #4]	@ (801c254 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801c24e:	6019      	str	r1, [r3, #0]
 801c250:	4770      	bx	lr
 801c252:	bf00      	nop
 801c254:	2001200c 	.word	0x2001200c

0801c258 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c25c:	4696      	mov	lr, r2
 801c25e:	4614      	mov	r4, r2
 801c260:	4605      	mov	r5, r0
 801c262:	460e      	mov	r6, r1
 801c264:	461f      	mov	r7, r3
 801c266:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c26a:	b097      	sub	sp, #92	@ 0x5c
 801c26c:	f10d 0c1c 	add.w	ip, sp, #28
 801c270:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c274:	f8de 3000 	ldr.w	r3, [lr]
 801c278:	f104 0e14 	add.w	lr, r4, #20
 801c27c:	f8cc 3000 	str.w	r3, [ip]
 801c280:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c284:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c288:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c28c:	f8de 3000 	ldr.w	r3, [lr]
 801c290:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801c294:	f8cc 3000 	str.w	r3, [ip]
 801c298:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801c29c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c2a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c2a4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801c2a8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801c2ac:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801c2b0:	f8de 3000 	ldr.w	r3, [lr]
 801c2b4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c2b6:	f8cc 3000 	str.w	r3, [ip]
 801c2ba:	9201      	str	r2, [sp, #4]
 801c2bc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801c2c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c2c2:	682b      	ldr	r3, [r5, #0]
 801c2c4:	9200      	str	r2, [sp, #0]
 801c2c6:	f8cd 8008 	str.w	r8, [sp, #8]
 801c2ca:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801c2ce:	aa07      	add	r2, sp, #28
 801c2d0:	463b      	mov	r3, r7
 801c2d2:	4631      	mov	r1, r6
 801c2d4:	4628      	mov	r0, r5
 801c2d6:	47d8      	blx	fp
 801c2d8:	46a6      	mov	lr, r4
 801c2da:	f10d 0c1c 	add.w	ip, sp, #28
 801c2de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c2e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c2e6:	f8de 3000 	ldr.w	r3, [lr]
 801c2ea:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801c2ee:	f8cc 3000 	str.w	r3, [ip]
 801c2f2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c2f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c2fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c2fe:	f8de 3000 	ldr.w	r3, [lr]
 801c302:	343c      	adds	r4, #60	@ 0x3c
 801c304:	f8cc 3000 	str.w	r3, [ip]
 801c308:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801c30c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c30e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c312:	6823      	ldr	r3, [r4, #0]
 801c314:	4631      	mov	r1, r6
 801c316:	f8cc 3000 	str.w	r3, [ip]
 801c31a:	682b      	ldr	r3, [r5, #0]
 801c31c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801c320:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c322:	f8cd 8008 	str.w	r8, [sp, #8]
 801c326:	9201      	str	r2, [sp, #4]
 801c328:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c32a:	4628      	mov	r0, r5
 801c32c:	9200      	str	r2, [sp, #0]
 801c32e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801c330:	aa07      	add	r2, sp, #28
 801c332:	463b      	mov	r3, r7
 801c334:	47a0      	blx	r4
 801c336:	b017      	add	sp, #92	@ 0x5c
 801c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c33c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c33c:	2000      	movs	r0, #0
 801c33e:	4770      	bx	lr

0801c340 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c344:	b08d      	sub	sp, #52	@ 0x34
 801c346:	4688      	mov	r8, r1
 801c348:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801c34a:	f8d3 c000 	ldr.w	ip, [r3]
 801c34e:	680f      	ldr	r7, [r1, #0]
 801c350:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801c354:	eba7 070c 	sub.w	r7, r7, ip
 801c358:	42bc      	cmp	r4, r7
 801c35a:	bfa8      	it	ge
 801c35c:	463c      	movge	r4, r7
 801c35e:	ee07 4a90 	vmov	s15, r4
 801c362:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801c366:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801c36a:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801c36e:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801c372:	edd3 6a07 	vldr	s13, [r3, #28]
 801c376:	ee25 4a04 	vmul.f32	s8, s10, s8
 801c37a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801c37e:	ee25 5a27 	vmul.f32	s10, s10, s15
 801c382:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c386:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801c38a:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801c38e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c392:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801c394:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801c398:	f9b1 9000 	ldrsh.w	r9, [r1]
 801c39c:	f9ba 1000 	ldrsh.w	r1, [sl]
 801c3a0:	eb09 0e0c 	add.w	lr, r9, ip
 801c3a4:	4571      	cmp	r1, lr
 801c3a6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801c3aa:	ee32 1a05 	vadd.f32	s2, s4, s10
 801c3ae:	ee36 0a84 	vadd.f32	s0, s13, s8
 801c3b2:	ee61 1a87 	vmul.f32	s3, s3, s14
 801c3b6:	ee22 2a07 	vmul.f32	s4, s4, s14
 801c3ba:	f340 808c 	ble.w	801c4d6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801c3be:	eba1 060e 	sub.w	r6, r1, lr
 801c3c2:	fb96 f5f4 	sdiv	r5, r6, r4
 801c3c6:	ee07 5a10 	vmov	s14, r5
 801c3ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3ce:	2d00      	cmp	r5, #0
 801c3d0:	fb04 6615 	mls	r6, r4, r5, r6
 801c3d4:	eea7 0a04 	vfma.f32	s0, s14, s8
 801c3d8:	eee7 0a24 	vfma.f32	s1, s14, s9
 801c3dc:	eea7 1a05 	vfma.f32	s2, s14, s10
 801c3e0:	dd12      	ble.n	801c408 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801c3e2:	ee70 6a44 	vsub.f32	s13, s0, s8
 801c3e6:	eef5 6a40 	vcmp.f32	s13, #0.0
 801c3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3ee:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801c3f2:	bf14      	ite	ne
 801c3f4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801c3f8:	eeb0 7a67 	vmoveq.f32	s14, s15
 801c3fc:	ee31 2a45 	vsub.f32	s4, s2, s10
 801c400:	ee61 1a87 	vmul.f32	s3, s3, s14
 801c404:	ee22 2a07 	vmul.f32	s4, s4, s14
 801c408:	fb05 f204 	mul.w	r2, r5, r4
 801c40c:	1abf      	subs	r7, r7, r2
 801c40e:	4494      	add	ip, r2
 801c410:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801c414:	4411      	add	r1, r2
 801c416:	eb09 020c 	add.w	r2, r9, ip
 801c41a:	443a      	add	r2, r7
 801c41c:	b209      	sxth	r1, r1
 801c41e:	428a      	cmp	r2, r1
 801c420:	bfc4      	itt	gt
 801c422:	eba1 0209 	subgt.w	r2, r1, r9
 801c426:	eba2 070c 	subgt.w	r7, r2, ip
 801c42a:	2f00      	cmp	r7, #0
 801c42c:	dd50      	ble.n	801c4d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801c42e:	fb97 f1f4 	sdiv	r1, r7, r4
 801c432:	fb04 7211 	mls	r2, r4, r1, r7
 801c436:	b90a      	cbnz	r2, 801c43c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801c438:	4622      	mov	r2, r4
 801c43a:	3901      	subs	r1, #1
 801c43c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801c440:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801c444:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801c448:	ee21 3a23 	vmul.f32	s6, s2, s7
 801c44c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801c450:	ee17 7a90 	vmov	r7, s15
 801c454:	ee73 7a42 	vsub.f32	s15, s6, s4
 801c458:	eef0 6a42 	vmov.f32	s13, s4
 801c45c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801c460:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c464:	ee17 ca90 	vmov	ip, s15
 801c468:	eeb0 7a61 	vmov.f32	s14, s3
 801c46c:	6840      	ldr	r0, [r0, #4]
 801c46e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801c472:	f8d0 a000 	ldr.w	sl, [r0]
 801c476:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c478:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801c47a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801c47e:	9008      	str	r0, [sp, #32]
 801c480:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801c482:	695b      	ldr	r3, [r3, #20]
 801c484:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801c488:	fb9c fcf4 	sdiv	ip, ip, r4
 801c48c:	445b      	add	r3, fp
 801c48e:	9307      	str	r3, [sp, #28]
 801c490:	ee16 3a90 	vmov	r3, s13
 801c494:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c498:	fb0c 3306 	mla	r3, ip, r6, r3
 801c49c:	fb97 f7f4 	sdiv	r7, r7, r4
 801c4a0:	9302      	str	r3, [sp, #8]
 801c4a2:	ee17 3a10 	vmov	r3, s14
 801c4a6:	2900      	cmp	r1, #0
 801c4a8:	bfcc      	ite	gt
 801c4aa:	46a1      	movgt	r9, r4
 801c4ac:	4691      	movle	r9, r2
 801c4ae:	44b6      	add	lr, r6
 801c4b0:	fb04 e505 	mla	r5, r4, r5, lr
 801c4b4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801c4b8:	fb07 3706 	mla	r7, r7, r6, r3
 801c4bc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801c4c0:	e9cd 4700 	strd	r4, r7, [sp]
 801c4c4:	eba9 0306 	sub.w	r3, r9, r6
 801c4c8:	f8da 4008 	ldr.w	r4, [sl, #8]
 801c4cc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c4ce:	47a0      	blx	r4
 801c4d0:	b00d      	add	sp, #52	@ 0x34
 801c4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4d6:	2500      	movs	r5, #0
 801c4d8:	462e      	mov	r6, r5
 801c4da:	e799      	b.n	801c410 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801c4dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4e0:	461d      	mov	r5, r3
 801c4e2:	b0db      	sub	sp, #364	@ 0x16c
 801c4e4:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801c4e8:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c4ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801c4ec:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801c4f0:	9009      	str	r0, [sp, #36]	@ 0x24
 801c4f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c4f4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801c4f8:	4614      	mov	r4, r2
 801c4fa:	9310      	str	r3, [sp, #64]	@ 0x40
 801c4fc:	6803      	ldr	r3, [r0, #0]
 801c4fe:	4629      	mov	r1, r5
 801c500:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801c502:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801c506:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801c50a:	47b8      	blx	r7
 801c50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c50e:	6058      	str	r0, [r3, #4]
 801c510:	2800      	cmp	r0, #0
 801c512:	f000 83a1 	beq.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c516:	ed94 7a02 	vldr	s14, [r4, #8]
 801c51a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801c51e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c522:	682b      	ldr	r3, [r5, #0]
 801c524:	9314      	str	r3, [sp, #80]	@ 0x50
 801c526:	686b      	ldr	r3, [r5, #4]
 801c528:	9315      	str	r3, [sp, #84]	@ 0x54
 801c52a:	4bc1      	ldr	r3, [pc, #772]	@ (801c830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801c52c:	7819      	ldrb	r1, [r3, #0]
 801c52e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801c532:	2900      	cmp	r1, #0
 801c534:	bf16      	itet	ne
 801c536:	4619      	movne	r1, r3
 801c538:	4611      	moveq	r1, r2
 801c53a:	4613      	movne	r3, r2
 801c53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c540:	9116      	str	r1, [sp, #88]	@ 0x58
 801c542:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801c546:	f240 8387 	bls.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c54a:	ed94 7a07 	vldr	s14, [r4, #28]
 801c54e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c556:	f240 837f 	bls.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c55a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801c55e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c566:	f240 8377 	bls.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c56a:	6822      	ldr	r2, [r4, #0]
 801c56c:	4bb1      	ldr	r3, [pc, #708]	@ (801c834 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801c56e:	429a      	cmp	r2, r3
 801c570:	f2c0 8372 	blt.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c574:	49b0      	ldr	r1, [pc, #704]	@ (801c838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801c576:	6963      	ldr	r3, [r4, #20]
 801c578:	428a      	cmp	r2, r1
 801c57a:	f300 836d 	bgt.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c57e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801c582:	48ae      	ldr	r0, [pc, #696]	@ (801c83c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801c584:	33ff      	adds	r3, #255	@ 0xff
 801c586:	4283      	cmp	r3, r0
 801c588:	f200 8366 	bhi.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c58c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c58e:	4dac      	ldr	r5, [pc, #688]	@ (801c840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801c590:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801c594:	33ff      	adds	r3, #255	@ 0xff
 801c596:	42ab      	cmp	r3, r5
 801c598:	f200 835e 	bhi.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c59c:	6862      	ldr	r2, [r4, #4]
 801c59e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801c5a2:	33ff      	adds	r3, #255	@ 0xff
 801c5a4:	4283      	cmp	r3, r0
 801c5a6:	f200 8357 	bhi.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c5aa:	69a1      	ldr	r1, [r4, #24]
 801c5ac:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801c5b0:	33ff      	adds	r3, #255	@ 0xff
 801c5b2:	4283      	cmp	r3, r0
 801c5b4:	f200 8350 	bhi.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c5b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c5ba:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801c5be:	30ff      	adds	r0, #255	@ 0xff
 801c5c0:	42a8      	cmp	r0, r5
 801c5c2:	f200 8349 	bhi.w	801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c5c6:	428a      	cmp	r2, r1
 801c5c8:	f280 8110 	bge.w	801c7ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801c5cc:	429a      	cmp	r2, r3
 801c5ce:	f300 8119 	bgt.w	801c804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801c5d2:	4299      	cmp	r1, r3
 801c5d4:	f280 811d 	bge.w	801c812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801c5d8:	2502      	movs	r5, #2
 801c5da:	2701      	movs	r7, #1
 801c5dc:	46a9      	mov	r9, r5
 801c5de:	46b8      	mov	r8, r7
 801c5e0:	f04f 0a00 	mov.w	sl, #0
 801c5e4:	4621      	mov	r1, r4
 801c5e6:	a849      	add	r0, sp, #292	@ 0x124
 801c5e8:	f003 fdc0 	bl	802016c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801c5ec:	4622      	mov	r2, r4
 801c5ee:	4653      	mov	r3, sl
 801c5f0:	a949      	add	r1, sp, #292	@ 0x124
 801c5f2:	f8cd 9000 	str.w	r9, [sp]
 801c5f6:	a819      	add	r0, sp, #100	@ 0x64
 801c5f8:	f003 feea 	bl	80203d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801c5fc:	4622      	mov	r2, r4
 801c5fe:	4653      	mov	r3, sl
 801c600:	a949      	add	r1, sp, #292	@ 0x124
 801c602:	f8cd 8000 	str.w	r8, [sp]
 801c606:	a829      	add	r0, sp, #164	@ 0xa4
 801c608:	f003 fee2 	bl	80203d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801c60c:	4643      	mov	r3, r8
 801c60e:	4622      	mov	r2, r4
 801c610:	a949      	add	r1, sp, #292	@ 0x124
 801c612:	f8cd 9000 	str.w	r9, [sp]
 801c616:	a839      	add	r0, sp, #228	@ 0xe4
 801c618:	f003 feda 	bl	80203d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801c61c:	42af      	cmp	r7, r5
 801c61e:	bfb5      	itete	lt
 801c620:	2300      	movlt	r3, #0
 801c622:	2301      	movge	r3, #1
 801c624:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801c626:	930e      	strge	r3, [sp, #56]	@ 0x38
 801c628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c62a:	af12      	add	r7, sp, #72	@ 0x48
 801c62c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c630:	bfb9      	ittee	lt
 801c632:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801c634:	ac19      	addlt	r4, sp, #100	@ 0x64
 801c636:	ad19      	addge	r5, sp, #100	@ 0x64
 801c638:	ac29      	addge	r4, sp, #164	@ 0xa4
 801c63a:	e887 0003 	stmia.w	r7, {r0, r1}
 801c63e:	b928      	cbnz	r0, 801c64c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801c640:	4b80      	ldr	r3, [pc, #512]	@ (801c844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801c642:	6818      	ldr	r0, [r3, #0]
 801c644:	6803      	ldr	r3, [r0, #0]
 801c646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c648:	4798      	blx	r3
 801c64a:	6038      	str	r0, [r7, #0]
 801c64c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801c64e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801c652:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c656:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801c658:	930c      	str	r3, [sp, #48]	@ 0x30
 801c65a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c65c:	6963      	ldr	r3, [r4, #20]
 801c65e:	440b      	add	r3, r1
 801c660:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801c664:	4408      	add	r0, r1
 801c666:	b200      	sxth	r0, r0
 801c668:	4283      	cmp	r3, r0
 801c66a:	900d      	str	r0, [sp, #52]	@ 0x34
 801c66c:	f280 80dd 	bge.w	801c82a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801c670:	428b      	cmp	r3, r1
 801c672:	da08      	bge.n	801c686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c674:	2a00      	cmp	r2, #0
 801c676:	dd06      	ble.n	801c686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c678:	1acb      	subs	r3, r1, r3
 801c67a:	429a      	cmp	r2, r3
 801c67c:	f2c0 80e4 	blt.w	801c848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801c680:	2b00      	cmp	r3, #0
 801c682:	f300 80e2 	bgt.w	801c84a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801c686:	6967      	ldr	r7, [r4, #20]
 801c688:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c68a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801c68e:	443b      	add	r3, r7
 801c690:	461f      	mov	r7, r3
 801c692:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c694:	1bdf      	subs	r7, r3, r7
 801c696:	4297      	cmp	r7, r2
 801c698:	bfa8      	it	ge
 801c69a:	4617      	movge	r7, r2
 801c69c:	2f00      	cmp	r7, #0
 801c69e:	f340 8166 	ble.w	801c96e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801c6a2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801c6a4:	6829      	ldr	r1, [r5, #0]
 801c6a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c6aa:	f9bb 3000 	ldrsh.w	r3, [fp]
 801c6ae:	4411      	add	r1, r2
 801c6b0:	4299      	cmp	r1, r3
 801c6b2:	6820      	ldr	r0, [r4, #0]
 801c6b4:	dd1a      	ble.n	801c6ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801c6b6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801c6ba:	4402      	add	r2, r0
 801c6bc:	440b      	add	r3, r1
 801c6be:	b21b      	sxth	r3, r3
 801c6c0:	429a      	cmp	r2, r3
 801c6c2:	dc13      	bgt.n	801c6ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801c6c4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6c8:	a912      	add	r1, sp, #72	@ 0x48
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	9206      	str	r2, [sp, #24]
 801c6ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c6d0:	9500      	str	r5, [sp, #0]
 801c6d2:	9205      	str	r2, [sp, #20]
 801c6d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c6d8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801c6dc:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801c6de:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801c6e2:	aa49      	add	r2, sp, #292	@ 0x124
 801c6e4:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801c6e8:	4623      	mov	r3, r4
 801c6ea:	47c8      	blx	r9
 801c6ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c6f0:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801c6f4:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801c6f8:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801c6fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c700:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801c704:	ed94 6a08 	vldr	s12, [r4, #32]
 801c708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c70c:	edd4 6a07 	vldr	s13, [r4, #28]
 801c710:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c714:	441a      	add	r2, r3
 801c716:	6963      	ldr	r3, [r4, #20]
 801c718:	68a1      	ldr	r1, [r4, #8]
 801c71a:	3301      	adds	r3, #1
 801c71c:	6163      	str	r3, [r4, #20]
 801c71e:	69a3      	ldr	r3, [r4, #24]
 801c720:	6022      	str	r2, [r4, #0]
 801c722:	3b01      	subs	r3, #1
 801c724:	61a3      	str	r3, [r4, #24]
 801c726:	6923      	ldr	r3, [r4, #16]
 801c728:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801c72c:	440b      	add	r3, r1
 801c72e:	68e1      	ldr	r1, [r4, #12]
 801c730:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801c734:	428b      	cmp	r3, r1
 801c736:	edc4 6a07 	vstr	s13, [r4, #28]
 801c73a:	6123      	str	r3, [r4, #16]
 801c73c:	db15      	blt.n	801c76a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801c73e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801c742:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c746:	edc4 6a07 	vstr	s13, [r4, #28]
 801c74a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801c74e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c752:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801c756:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801c75a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c75e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801c762:	3201      	adds	r2, #1
 801c764:	1a5b      	subs	r3, r3, r1
 801c766:	6022      	str	r2, [r4, #0]
 801c768:	6123      	str	r3, [r4, #16]
 801c76a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801c76e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c772:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801c776:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801c77a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c77e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801c782:	ed95 6a08 	vldr	s12, [r5, #32]
 801c786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c78a:	edd5 6a07 	vldr	s13, [r5, #28]
 801c78e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c792:	441a      	add	r2, r3
 801c794:	696b      	ldr	r3, [r5, #20]
 801c796:	68a9      	ldr	r1, [r5, #8]
 801c798:	3301      	adds	r3, #1
 801c79a:	616b      	str	r3, [r5, #20]
 801c79c:	69ab      	ldr	r3, [r5, #24]
 801c79e:	602a      	str	r2, [r5, #0]
 801c7a0:	3b01      	subs	r3, #1
 801c7a2:	61ab      	str	r3, [r5, #24]
 801c7a4:	692b      	ldr	r3, [r5, #16]
 801c7a6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801c7aa:	440b      	add	r3, r1
 801c7ac:	68e9      	ldr	r1, [r5, #12]
 801c7ae:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801c7b2:	428b      	cmp	r3, r1
 801c7b4:	edc5 6a07 	vstr	s13, [r5, #28]
 801c7b8:	612b      	str	r3, [r5, #16]
 801c7ba:	db15      	blt.n	801c7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801c7bc:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801c7c0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c7c4:	edc5 6a07 	vstr	s13, [r5, #28]
 801c7c8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801c7cc:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c7d0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801c7d4:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801c7d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c7dc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801c7e0:	3201      	adds	r2, #1
 801c7e2:	1a5b      	subs	r3, r3, r1
 801c7e4:	602a      	str	r2, [r5, #0]
 801c7e6:	612b      	str	r3, [r5, #16]
 801c7e8:	3f01      	subs	r7, #1
 801c7ea:	e757      	b.n	801c69c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801c7ec:	4299      	cmp	r1, r3
 801c7ee:	dc13      	bgt.n	801c818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801c7f0:	429a      	cmp	r2, r3
 801c7f2:	da14      	bge.n	801c81e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801c7f4:	2502      	movs	r5, #2
 801c7f6:	2703      	movs	r7, #3
 801c7f8:	46a9      	mov	r9, r5
 801c7fa:	f04f 0800 	mov.w	r8, #0
 801c7fe:	f04f 0a01 	mov.w	sl, #1
 801c802:	e6ef      	b.n	801c5e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c804:	2501      	movs	r5, #1
 801c806:	2700      	movs	r7, #0
 801c808:	46a9      	mov	r9, r5
 801c80a:	46b8      	mov	r8, r7
 801c80c:	f04f 0a02 	mov.w	sl, #2
 801c810:	e6e8      	b.n	801c5e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c812:	2501      	movs	r5, #1
 801c814:	2702      	movs	r7, #2
 801c816:	e6e1      	b.n	801c5dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801c818:	2500      	movs	r5, #0
 801c81a:	2701      	movs	r7, #1
 801c81c:	e7f4      	b.n	801c808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801c81e:	2702      	movs	r7, #2
 801c820:	2503      	movs	r5, #3
 801c822:	f04f 0900 	mov.w	r9, #0
 801c826:	46b8      	mov	r8, r7
 801c828:	e7e9      	b.n	801c7fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801c82a:	4613      	mov	r3, r2
 801c82c:	e728      	b.n	801c680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801c82e:	bf00      	nop
 801c830:	20011ff4 	.word	0x20011ff4
 801c834:	fffd8f01 	.word	0xfffd8f01
 801c838:	00027100 	.word	0x00027100
 801c83c:	0004e1ff 	.word	0x0004e1ff
 801c840:	0004e1fe 	.word	0x0004e1fe
 801c844:	20011ffc 	.word	0x20011ffc
 801c848:	4613      	mov	r3, r2
 801c84a:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801c84e:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801c852:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801c856:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801c85a:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801c85e:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801c862:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801c866:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801c86a:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801c86e:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801c872:	469e      	mov	lr, r3
 801c874:	469c      	mov	ip, r3
 801c876:	f04f 0900 	mov.w	r9, #0
 801c87a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801c87c:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801c87e:	9111      	str	r1, [sp, #68]	@ 0x44
 801c880:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801c884:	f1bc 0f00 	cmp.w	ip, #0
 801c888:	d147      	bne.n	801c91a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801c88a:	eb03 0c07 	add.w	ip, r3, r7
 801c88e:	1ad7      	subs	r7, r2, r3
 801c890:	f1b9 0f00 	cmp.w	r9, #0
 801c894:	d009      	beq.n	801c8aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801c896:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801c89a:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801c89e:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801c8a2:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801c8a6:	9029      	str	r0, [sp, #164]	@ 0xa4
 801c8a8:	912d      	str	r1, [sp, #180]	@ 0xb4
 801c8aa:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801c8ae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801c8b2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801c8b6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801c8ba:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801c8be:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801c8c2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801c8c6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801c8ca:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801c8ce:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801c8d2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801c8d6:	f04f 0800 	mov.w	r8, #0
 801c8da:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801c8dc:	9111      	str	r1, [sp, #68]	@ 0x44
 801c8de:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801c8e2:	f1be 0f00 	cmp.w	lr, #0
 801c8e6:	d031      	beq.n	801c94c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801c8e8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c8ea:	4450      	add	r0, sl
 801c8ec:	4431      	add	r1, r6
 801c8ee:	4549      	cmp	r1, r9
 801c8f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c8f4:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c8f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c8fc:	db08      	blt.n	801c910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801c8fe:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c902:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c906:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c90a:	3001      	adds	r0, #1
 801c90c:	eba1 0109 	sub.w	r1, r1, r9
 801c910:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c914:	f04f 0801 	mov.w	r8, #1
 801c918:	e7e3      	b.n	801c8e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801c91a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c91c:	4450      	add	r0, sl
 801c91e:	4431      	add	r1, r6
 801c920:	4541      	cmp	r1, r8
 801c922:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c926:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c92a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c92e:	db08      	blt.n	801c942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801c930:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c934:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c938:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c93c:	3001      	adds	r0, #1
 801c93e:	eba1 0108 	sub.w	r1, r1, r8
 801c942:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c946:	f04f 0901 	mov.w	r9, #1
 801c94a:	e79b      	b.n	801c884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801c94c:	449c      	add	ip, r3
 801c94e:	1aff      	subs	r7, r7, r3
 801c950:	f1b8 0f00 	cmp.w	r8, #0
 801c954:	d009      	beq.n	801c96a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801c956:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801c95a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801c95e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801c962:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801c966:	9019      	str	r0, [sp, #100]	@ 0x64
 801c968:	911d      	str	r1, [sp, #116]	@ 0x74
 801c96a:	1ad2      	subs	r2, r2, r3
 801c96c:	e68b      	b.n	801c686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c96e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c970:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801c972:	2b00      	cmp	r3, #0
 801c974:	f000 80d1 	beq.w	801cb1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801c978:	ad19      	add	r5, sp, #100	@ 0x64
 801c97a:	ac39      	add	r4, sp, #228	@ 0xe4
 801c97c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801c97e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801c982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c986:	930c      	str	r3, [sp, #48]	@ 0x30
 801c988:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c98a:	6963      	ldr	r3, [r4, #20]
 801c98c:	440b      	add	r3, r1
 801c98e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801c992:	4408      	add	r0, r1
 801c994:	b200      	sxth	r0, r0
 801c996:	4283      	cmp	r3, r0
 801c998:	900d      	str	r0, [sp, #52]	@ 0x34
 801c99a:	f280 80c1 	bge.w	801cb20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801c99e:	428b      	cmp	r3, r1
 801c9a0:	da08      	bge.n	801c9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c9a2:	2a00      	cmp	r2, #0
 801c9a4:	dd06      	ble.n	801c9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c9a6:	1acb      	subs	r3, r1, r3
 801c9a8:	429a      	cmp	r2, r3
 801c9aa:	f2c0 80bb 	blt.w	801cb24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	f300 80b9 	bgt.w	801cb26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801c9b4:	6967      	ldr	r7, [r4, #20]
 801c9b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c9b8:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801c9bc:	443b      	add	r3, r7
 801c9be:	461f      	mov	r7, r3
 801c9c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9c2:	1bdf      	subs	r7, r3, r7
 801c9c4:	4297      	cmp	r7, r2
 801c9c6:	bfa8      	it	ge
 801c9c8:	4617      	movge	r7, r2
 801c9ca:	2f00      	cmp	r7, #0
 801c9cc:	f340 813c 	ble.w	801cc48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801c9d0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801c9d2:	6829      	ldr	r1, [r5, #0]
 801c9d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c9d8:	f9bb 3000 	ldrsh.w	r3, [fp]
 801c9dc:	4411      	add	r1, r2
 801c9de:	4299      	cmp	r1, r3
 801c9e0:	6820      	ldr	r0, [r4, #0]
 801c9e2:	dd1a      	ble.n	801ca1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c9e4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801c9e8:	4402      	add	r2, r0
 801c9ea:	440b      	add	r3, r1
 801c9ec:	b21b      	sxth	r3, r3
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	dc13      	bgt.n	801ca1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c9f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9f6:	a912      	add	r1, sp, #72	@ 0x48
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	9206      	str	r2, [sp, #24]
 801c9fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c9fe:	9500      	str	r5, [sp, #0]
 801ca00:	9205      	str	r2, [sp, #20]
 801ca02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ca04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ca06:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ca0a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801ca0c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ca10:	aa49      	add	r2, sp, #292	@ 0x124
 801ca12:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801ca16:	4623      	mov	r3, r4
 801ca18:	47c8      	blx	r9
 801ca1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ca1e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801ca22:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801ca26:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801ca2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ca2e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801ca32:	ed94 6a08 	vldr	s12, [r4, #32]
 801ca36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ca3a:	edd4 6a07 	vldr	s13, [r4, #28]
 801ca3e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ca42:	441a      	add	r2, r3
 801ca44:	6963      	ldr	r3, [r4, #20]
 801ca46:	68a1      	ldr	r1, [r4, #8]
 801ca48:	3301      	adds	r3, #1
 801ca4a:	6163      	str	r3, [r4, #20]
 801ca4c:	69a3      	ldr	r3, [r4, #24]
 801ca4e:	6022      	str	r2, [r4, #0]
 801ca50:	3b01      	subs	r3, #1
 801ca52:	61a3      	str	r3, [r4, #24]
 801ca54:	6923      	ldr	r3, [r4, #16]
 801ca56:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801ca5a:	440b      	add	r3, r1
 801ca5c:	68e1      	ldr	r1, [r4, #12]
 801ca5e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801ca62:	428b      	cmp	r3, r1
 801ca64:	edc4 6a07 	vstr	s13, [r4, #28]
 801ca68:	6123      	str	r3, [r4, #16]
 801ca6a:	db15      	blt.n	801ca98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801ca6c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801ca70:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ca74:	edc4 6a07 	vstr	s13, [r4, #28]
 801ca78:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801ca7c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ca80:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801ca84:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801ca88:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ca8c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801ca90:	3201      	adds	r2, #1
 801ca92:	1a5b      	subs	r3, r3, r1
 801ca94:	6022      	str	r2, [r4, #0]
 801ca96:	6123      	str	r3, [r4, #16]
 801ca98:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801ca9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801caa0:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801caa4:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801caa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801caac:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801cab0:	ed95 6a08 	vldr	s12, [r5, #32]
 801cab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cab8:	edd5 6a07 	vldr	s13, [r5, #28]
 801cabc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801cac0:	441a      	add	r2, r3
 801cac2:	696b      	ldr	r3, [r5, #20]
 801cac4:	68a9      	ldr	r1, [r5, #8]
 801cac6:	3301      	adds	r3, #1
 801cac8:	616b      	str	r3, [r5, #20]
 801caca:	69ab      	ldr	r3, [r5, #24]
 801cacc:	602a      	str	r2, [r5, #0]
 801cace:	3b01      	subs	r3, #1
 801cad0:	61ab      	str	r3, [r5, #24]
 801cad2:	692b      	ldr	r3, [r5, #16]
 801cad4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801cad8:	440b      	add	r3, r1
 801cada:	68e9      	ldr	r1, [r5, #12]
 801cadc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801cae0:	428b      	cmp	r3, r1
 801cae2:	edc5 6a07 	vstr	s13, [r5, #28]
 801cae6:	612b      	str	r3, [r5, #16]
 801cae8:	db15      	blt.n	801cb16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801caea:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801caee:	ee76 6a26 	vadd.f32	s13, s12, s13
 801caf2:	edc5 6a07 	vstr	s13, [r5, #28]
 801caf6:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801cafa:	ee36 7a87 	vadd.f32	s14, s13, s14
 801cafe:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801cb02:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801cb06:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cb0a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801cb0e:	3201      	adds	r2, #1
 801cb10:	1a5b      	subs	r3, r3, r1
 801cb12:	602a      	str	r2, [r5, #0]
 801cb14:	612b      	str	r3, [r5, #16]
 801cb16:	3f01      	subs	r7, #1
 801cb18:	e757      	b.n	801c9ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801cb1a:	ad39      	add	r5, sp, #228	@ 0xe4
 801cb1c:	ac19      	add	r4, sp, #100	@ 0x64
 801cb1e:	e72d      	b.n	801c97c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801cb20:	4613      	mov	r3, r2
 801cb22:	e744      	b.n	801c9ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801cb24:	4613      	mov	r3, r2
 801cb26:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801cb2a:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801cb2e:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801cb32:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801cb36:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801cb3a:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801cb3e:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801cb42:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801cb46:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801cb4a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801cb4e:	469e      	mov	lr, r3
 801cb50:	461f      	mov	r7, r3
 801cb52:	f04f 0900 	mov.w	r9, #0
 801cb56:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801cb58:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801cb5c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801cb5e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801cb62:	960e      	str	r6, [sp, #56]	@ 0x38
 801cb64:	2f00      	cmp	r7, #0
 801cb66:	d146      	bne.n	801cbf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801cb68:	449c      	add	ip, r3
 801cb6a:	1ad7      	subs	r7, r2, r3
 801cb6c:	f1b9 0f00 	cmp.w	r9, #0
 801cb70:	d009      	beq.n	801cb86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801cb72:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801cb76:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801cb7a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801cb7e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801cb82:	9039      	str	r0, [sp, #228]	@ 0xe4
 801cb84:	913d      	str	r1, [sp, #244]	@ 0xf4
 801cb86:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801cb8a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801cb8e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801cb92:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801cb96:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801cb9a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801cb9e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801cba2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801cba6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801cbaa:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801cbae:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801cbb2:	f04f 0800 	mov.w	r8, #0
 801cbb6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801cbb8:	910e      	str	r1, [sp, #56]	@ 0x38
 801cbba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801cbbe:	f1be 0f00 	cmp.w	lr, #0
 801cbc2:	d030      	beq.n	801cc26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801cbc4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801cbc6:	4450      	add	r0, sl
 801cbc8:	4431      	add	r1, r6
 801cbca:	4549      	cmp	r1, r9
 801cbcc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801cbd0:	ee37 7a04 	vadd.f32	s14, s14, s8
 801cbd4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801cbd8:	db08      	blt.n	801cbec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801cbda:	ee77 7a85 	vadd.f32	s15, s15, s10
 801cbde:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801cbe2:	ee37 7a06 	vadd.f32	s14, s14, s12
 801cbe6:	3001      	adds	r0, #1
 801cbe8:	eba1 0109 	sub.w	r1, r1, r9
 801cbec:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cbf0:	f04f 0801 	mov.w	r8, #1
 801cbf4:	e7e3      	b.n	801cbbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801cbf6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801cbf8:	4450      	add	r0, sl
 801cbfa:	4431      	add	r1, r6
 801cbfc:	4541      	cmp	r1, r8
 801cbfe:	ee37 7a24 	vadd.f32	s14, s14, s9
 801cc02:	ee77 7a84 	vadd.f32	s15, s15, s8
 801cc06:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801cc0a:	db08      	blt.n	801cc1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801cc0c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801cc10:	ee37 7a25 	vadd.f32	s14, s14, s11
 801cc14:	ee77 7a86 	vadd.f32	s15, s15, s12
 801cc18:	3001      	adds	r0, #1
 801cc1a:	eba1 0108 	sub.w	r1, r1, r8
 801cc1e:	3f01      	subs	r7, #1
 801cc20:	f04f 0901 	mov.w	r9, #1
 801cc24:	e79e      	b.n	801cb64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801cc26:	449c      	add	ip, r3
 801cc28:	1aff      	subs	r7, r7, r3
 801cc2a:	f1b8 0f00 	cmp.w	r8, #0
 801cc2e:	d009      	beq.n	801cc44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801cc30:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801cc34:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801cc38:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801cc3c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801cc40:	9019      	str	r0, [sp, #100]	@ 0x64
 801cc42:	911d      	str	r1, [sp, #116]	@ 0x74
 801cc44:	1ad2      	subs	r2, r2, r3
 801cc46:	e6b5      	b.n	801c9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801cc48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	b923      	cbnz	r3, 801cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc4e:	4b04      	ldr	r3, [pc, #16]	@ (801cc60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801cc50:	6818      	ldr	r0, [r3, #0]
 801cc52:	6803      	ldr	r3, [r0, #0]
 801cc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc56:	4798      	blx	r3
 801cc58:	b05b      	add	sp, #364	@ 0x16c
 801cc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc5e:	bf00      	nop
 801cc60:	20011ffc 	.word	0x20011ffc

0801cc64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801cc64:	b570      	push	{r4, r5, r6, lr}
 801cc66:	4604      	mov	r4, r0
 801cc68:	2500      	movs	r5, #0
 801cc6a:	9805      	ldr	r0, [sp, #20]
 801cc6c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801cc70:	6061      	str	r1, [r4, #4]
 801cc72:	8263      	strh	r3, [r4, #18]
 801cc74:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801cc78:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cc7c:	8025      	strh	r5, [r4, #0]
 801cc7e:	7221      	strb	r1, [r4, #8]
 801cc80:	7266      	strb	r6, [r4, #9]
 801cc82:	60e0      	str	r0, [r4, #12]
 801cc84:	8222      	strh	r2, [r4, #16]
 801cc86:	82a3      	strh	r3, [r4, #20]
 801cc88:	82e5      	strh	r5, [r4, #22]
 801cc8a:	8325      	strh	r5, [r4, #24]
 801cc8c:	8365      	strh	r5, [r4, #26]
 801cc8e:	83a5      	strh	r5, [r4, #28]
 801cc90:	83e5      	strh	r5, [r4, #30]
 801cc92:	8425      	strh	r5, [r4, #32]
 801cc94:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 801cc98:	b32e      	cbz	r6, 801cce6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801cc9a:	6803      	ldr	r3, [r0, #0]
 801cc9c:	695b      	ldr	r3, [r3, #20]
 801cc9e:	4798      	blx	r3
 801cca0:	4606      	mov	r6, r0
 801cca2:	b300      	cbz	r0, 801cce6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801cca4:	68e0      	ldr	r0, [r4, #12]
 801cca6:	4631      	mov	r1, r6
 801cca8:	6803      	ldr	r3, [r0, #0]
 801ccaa:	68db      	ldr	r3, [r3, #12]
 801ccac:	4798      	blx	r3
 801ccae:	4605      	mov	r5, r0
 801ccb0:	b1c8      	cbz	r0, 801cce6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801ccb2:	7b43      	ldrb	r3, [r0, #13]
 801ccb4:	7a82      	ldrb	r2, [r0, #10]
 801ccb6:	005b      	lsls	r3, r3, #1
 801ccb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ccbc:	4313      	orrs	r3, r2
 801ccbe:	8423      	strh	r3, [r4, #32]
 801ccc0:	7a63      	ldrb	r3, [r4, #9]
 801ccc2:	2b06      	cmp	r3, #6
 801ccc4:	d10f      	bne.n	801cce6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801ccc6:	68e0      	ldr	r0, [r4, #12]
 801ccc8:	462a      	mov	r2, r5
 801ccca:	6803      	ldr	r3, [r0, #0]
 801cccc:	4631      	mov	r1, r6
 801ccce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ccd0:	4798      	blx	r3
 801ccd2:	7b6b      	ldrb	r3, [r5, #13]
 801ccd4:	005b      	lsls	r3, r3, #1
 801ccd6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ccda:	7aab      	ldrb	r3, [r5, #10]
 801ccdc:	4313      	orrs	r3, r2
 801ccde:	4418      	add	r0, r3
 801cce0:	8c23      	ldrh	r3, [r4, #32]
 801cce2:	4418      	add	r0, r3
 801cce4:	8420      	strh	r0, [r4, #32]
 801cce6:	4620      	mov	r0, r4
 801cce8:	bd70      	pop	{r4, r5, r6, pc}

0801ccea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801ccea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccee:	2400      	movs	r4, #0
 801ccf0:	4681      	mov	r9, r0
 801ccf2:	4688      	mov	r8, r1
 801ccf4:	4692      	mov	sl, r2
 801ccf6:	469b      	mov	fp, r3
 801ccf8:	4627      	mov	r7, r4
 801ccfa:	4625      	mov	r5, r4
 801ccfc:	4626      	mov	r6, r4
 801ccfe:	b085      	sub	sp, #20
 801cd00:	4554      	cmp	r4, sl
 801cd02:	da2a      	bge.n	801cd5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801cd04:	2300      	movs	r3, #0
 801cd06:	9303      	str	r3, [sp, #12]
 801cd08:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801cd0c:	429d      	cmp	r5, r3
 801cd0e:	d004      	beq.n	801cd1a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801cd10:	f242 030b 	movw	r3, #8203	@ 0x200b
 801cd14:	429d      	cmp	r5, r3
 801cd16:	bf18      	it	ne
 801cd18:	462f      	movne	r7, r5
 801cd1a:	ab03      	add	r3, sp, #12
 801cd1c:	4642      	mov	r2, r8
 801cd1e:	4659      	mov	r1, fp
 801cd20:	4648      	mov	r0, r9
 801cd22:	f003 f839 	bl	801fd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cd26:	4605      	mov	r5, r0
 801cd28:	b1b8      	cbz	r0, 801cd5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801cd2a:	280a      	cmp	r0, #10
 801cd2c:	d015      	beq.n	801cd5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801cd2e:	9a03      	ldr	r2, [sp, #12]
 801cd30:	b18a      	cbz	r2, 801cd56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801cd32:	7b50      	ldrb	r0, [r2, #13]
 801cd34:	7a93      	ldrb	r3, [r2, #10]
 801cd36:	0040      	lsls	r0, r0, #1
 801cd38:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801cd3c:	4303      	orrs	r3, r0
 801cd3e:	9301      	str	r3, [sp, #4]
 801cd40:	f8d8 3000 	ldr.w	r3, [r8]
 801cd44:	4639      	mov	r1, r7
 801cd46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cd48:	4640      	mov	r0, r8
 801cd4a:	8895      	ldrh	r5, [r2, #4]
 801cd4c:	4798      	blx	r3
 801cd4e:	9b01      	ldr	r3, [sp, #4]
 801cd50:	4418      	add	r0, r3
 801cd52:	4406      	add	r6, r0
 801cd54:	b2b6      	uxth	r6, r6
 801cd56:	3401      	adds	r4, #1
 801cd58:	e7d2      	b.n	801cd00 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801cd5a:	4630      	mov	r0, r6
 801cd5c:	b005      	add	sp, #20
 801cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801cd62:	2a02      	cmp	r2, #2
 801cd64:	b530      	push	{r4, r5, lr}
 801cd66:	d011      	beq.n	801cd8c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801cd68:	2a03      	cmp	r2, #3
 801cd6a:	d01c      	beq.n	801cda6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801cd6c:	2a01      	cmp	r2, #1
 801cd6e:	d10c      	bne.n	801cd8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801cd70:	888b      	ldrh	r3, [r1, #4]
 801cd72:	8801      	ldrh	r1, [r0, #0]
 801cd74:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801cd78:	1a5b      	subs	r3, r3, r1
 801cd7a:	8844      	ldrh	r4, [r0, #2]
 801cd7c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801cd80:	1a9b      	subs	r3, r3, r2
 801cd82:	8004      	strh	r4, [r0, #0]
 801cd84:	8043      	strh	r3, [r0, #2]
 801cd86:	8081      	strh	r1, [r0, #4]
 801cd88:	80c2      	strh	r2, [r0, #6]
 801cd8a:	bd30      	pop	{r4, r5, pc}
 801cd8c:	88cb      	ldrh	r3, [r1, #6]
 801cd8e:	8842      	ldrh	r2, [r0, #2]
 801cd90:	1a9b      	subs	r3, r3, r2
 801cd92:	88c2      	ldrh	r2, [r0, #6]
 801cd94:	1a9b      	subs	r3, r3, r2
 801cd96:	888a      	ldrh	r2, [r1, #4]
 801cd98:	8801      	ldrh	r1, [r0, #0]
 801cd9a:	8043      	strh	r3, [r0, #2]
 801cd9c:	1a52      	subs	r2, r2, r1
 801cd9e:	8881      	ldrh	r1, [r0, #4]
 801cda0:	1a52      	subs	r2, r2, r1
 801cda2:	8002      	strh	r2, [r0, #0]
 801cda4:	e7f1      	b.n	801cd8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801cda6:	88cb      	ldrh	r3, [r1, #6]
 801cda8:	8841      	ldrh	r1, [r0, #2]
 801cdaa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801cdae:	f9b0 5000 	ldrsh.w	r5, [r0]
 801cdb2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801cdb6:	1a5b      	subs	r3, r3, r1
 801cdb8:	1a9b      	subs	r3, r3, r2
 801cdba:	8003      	strh	r3, [r0, #0]
 801cdbc:	8045      	strh	r5, [r0, #2]
 801cdbe:	8082      	strh	r2, [r0, #4]
 801cdc0:	80c4      	strh	r4, [r0, #6]
 801cdc2:	e7e2      	b.n	801cd8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801cdc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801cdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc8:	b09f      	sub	sp, #124	@ 0x7c
 801cdca:	920f      	str	r2, [sp, #60]	@ 0x3c
 801cdcc:	9312      	str	r3, [sp, #72]	@ 0x48
 801cdce:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cdd0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801cdd2:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801cdd4:	8812      	ldrh	r2, [r2, #0]
 801cdd6:	889b      	ldrh	r3, [r3, #4]
 801cdd8:	900e      	str	r0, [sp, #56]	@ 0x38
 801cdda:	4413      	add	r3, r2
 801cddc:	6828      	ldr	r0, [r5, #0]
 801cdde:	b21b      	sxth	r3, r3
 801cde0:	9311      	str	r3, [sp, #68]	@ 0x44
 801cde2:	6803      	ldr	r3, [r0, #0]
 801cde4:	9117      	str	r1, [sp, #92]	@ 0x5c
 801cde6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cde8:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801cdec:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801cdf0:	4798      	blx	r3
 801cdf2:	682b      	ldr	r3, [r5, #0]
 801cdf4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801cdf6:	7b1a      	ldrb	r2, [r3, #12]
 801cdf8:	7adb      	ldrb	r3, [r3, #11]
 801cdfa:	9215      	str	r2, [sp, #84]	@ 0x54
 801cdfc:	9316      	str	r3, [sp, #88]	@ 0x58
 801cdfe:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801ce02:	2c00      	cmp	r4, #0
 801ce04:	d067      	beq.n	801ced6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801ce06:	7c2b      	ldrb	r3, [r5, #16]
 801ce08:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801ce0a:	2b06      	cmp	r3, #6
 801ce0c:	bf14      	ite	ne
 801ce0e:	2301      	movne	r3, #1
 801ce10:	2302      	moveq	r3, #2
 801ce12:	4413      	add	r3, r2
 801ce14:	f04f 0900 	mov.w	r9, #0
 801ce18:	464c      	mov	r4, r9
 801ce1a:	9310      	str	r3, [sp, #64]	@ 0x40
 801ce1c:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801ce20:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801ce24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce26:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ce28:	4293      	cmp	r3, r2
 801ce2a:	f280 808b 	bge.w	801cf44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801ce2e:	2300      	movs	r3, #0
 801ce30:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 801ce34:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 801ce38:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ce3c:	429c      	cmp	r4, r3
 801ce3e:	d006      	beq.n	801ce4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 801ce40:	f242 020b 	movw	r2, #8203	@ 0x200b
 801ce44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ce46:	4294      	cmp	r4, r2
 801ce48:	bf18      	it	ne
 801ce4a:	4623      	movne	r3, r4
 801ce4c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce50:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801ce52:	682a      	ldr	r2, [r5, #0]
 801ce54:	428b      	cmp	r3, r1
 801ce56:	db40      	blt.n	801ceda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801ce58:	6813      	ldr	r3, [r2, #0]
 801ce5a:	4610      	mov	r0, r2
 801ce5c:	695b      	ldr	r3, [r3, #20]
 801ce5e:	4798      	blx	r3
 801ce60:	4604      	mov	r4, r0
 801ce62:	6828      	ldr	r0, [r5, #0]
 801ce64:	aa1d      	add	r2, sp, #116	@ 0x74
 801ce66:	6803      	ldr	r3, [r0, #0]
 801ce68:	4621      	mov	r1, r4
 801ce6a:	689f      	ldr	r7, [r3, #8]
 801ce6c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801ce70:	47b8      	blx	r7
 801ce72:	901c      	str	r0, [sp, #112]	@ 0x70
 801ce74:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ce78:	429c      	cmp	r4, r3
 801ce7a:	f000 80ea 	beq.w	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801ce7e:	f242 030b 	movw	r3, #8203	@ 0x200b
 801ce82:	429c      	cmp	r4, r3
 801ce84:	f000 80e5 	beq.w	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801ce88:	2c00      	cmp	r4, #0
 801ce8a:	f000 810c 	beq.w	801d0a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 801ce8e:	2c0a      	cmp	r4, #10
 801ce90:	d05e      	beq.n	801cf50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801ce92:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ce94:	b36a      	cbz	r2, 801cef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801ce96:	8894      	ldrh	r4, [r2, #4]
 801ce98:	f1bb 0f00 	cmp.w	fp, #0
 801ce9c:	d03a      	beq.n	801cf14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801ce9e:	f892 900d 	ldrb.w	r9, [r2, #13]
 801cea2:	f1bb 0f01 	cmp.w	fp, #1
 801cea6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ceaa:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801ceae:	f892 900a 	ldrb.w	r9, [r2, #10]
 801ceb2:	ea49 0903 	orr.w	r9, r9, r3
 801ceb6:	d133      	bne.n	801cf20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801ceb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ceba:	eba6 0609 	sub.w	r6, r6, r9
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d14d      	bne.n	801cf5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801cec2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cec4:	eb09 0306 	add.w	r3, r9, r6
 801cec8:	4413      	add	r3, r2
 801ceca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cecc:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ced0:	4293      	cmp	r3, r2
 801ced2:	da4e      	bge.n	801cf72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801ced4:	e036      	b.n	801cf44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801ced6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801ced8:	e79c      	b.n	801ce14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801ceda:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801cede:	9301      	str	r3, [sp, #4]
 801cee0:	ab1d      	add	r3, sp, #116	@ 0x74
 801cee2:	9300      	str	r3, [sp, #0]
 801cee4:	4659      	mov	r1, fp
 801cee6:	ab1c      	add	r3, sp, #112	@ 0x70
 801cee8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801ceea:	f002 ff9e 	bl	801fe2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801ceee:	4604      	mov	r4, r0
 801cef0:	e7c0      	b.n	801ce74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801cef2:	6828      	ldr	r0, [r5, #0]
 801cef4:	6803      	ldr	r3, [r0, #0]
 801cef6:	691b      	ldr	r3, [r3, #16]
 801cef8:	4798      	blx	r3
 801cefa:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801cefe:	4298      	cmp	r0, r3
 801cf00:	f000 80a7 	beq.w	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801cf04:	f242 030b 	movw	r3, #8203	@ 0x200b
 801cf08:	4298      	cmp	r0, r3
 801cf0a:	f000 80a2 	beq.w	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801cf0e:	f1bb 0f00 	cmp.w	fp, #0
 801cf12:	d100      	bne.n	801cf16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801cf14:	444e      	add	r6, r9
 801cf16:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801cf18:	2a00      	cmp	r2, #0
 801cf1a:	d1c0      	bne.n	801ce9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801cf1c:	4691      	mov	r9, r2
 801cf1e:	e098      	b.n	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801cf20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	f000 80c1 	beq.w	801d0aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 801cf28:	f1bb 0f00 	cmp.w	fp, #0
 801cf2c:	d117      	bne.n	801cf5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801cf2e:	6828      	ldr	r0, [r5, #0]
 801cf30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cf32:	6803      	ldr	r3, [r0, #0]
 801cf34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cf36:	4798      	blx	r3
 801cf38:	4406      	add	r6, r0
 801cf3a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cf3c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cf3e:	1af3      	subs	r3, r6, r3
 801cf40:	4293      	cmp	r3, r2
 801cf42:	dd16      	ble.n	801cf72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801cf44:	2c00      	cmp	r4, #0
 801cf46:	f000 80ae 	beq.w	801d0a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 801cf4a:	2c0a      	cmp	r4, #10
 801cf4c:	f040 809c 	bne.w	801d088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 801cf50:	240a      	movs	r4, #10
 801cf52:	fab4 f084 	clz	r0, r4
 801cf56:	0940      	lsrs	r0, r0, #5
 801cf58:	b01f      	add	sp, #124	@ 0x7c
 801cf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf5e:	6828      	ldr	r0, [r5, #0]
 801cf60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cf62:	6803      	ldr	r3, [r0, #0]
 801cf64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cf66:	4798      	blx	r3
 801cf68:	f1bb 0f01 	cmp.w	fp, #1
 801cf6c:	eba6 0600 	sub.w	r6, r6, r0
 801cf70:	d0a7      	beq.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801cf72:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801cf74:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801cf76:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801cf7a:	f9b3 8000 	ldrsh.w	r8, [r3]
 801cf7e:	7b43      	ldrb	r3, [r0, #13]
 801cf80:	4431      	add	r1, r6
 801cf82:	015b      	lsls	r3, r3, #5
 801cf84:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cf88:	7983      	ldrb	r3, [r0, #6]
 801cf8a:	4313      	orrs	r3, r2
 801cf8c:	440b      	add	r3, r1
 801cf8e:	4543      	cmp	r3, r8
 801cf90:	db5f      	blt.n	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801cf92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cf94:	4299      	cmp	r1, r3
 801cf96:	da5c      	bge.n	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801cf98:	6828      	ldr	r0, [r5, #0]
 801cf9a:	45b0      	cmp	r8, r6
 801cf9c:	6803      	ldr	r3, [r0, #0]
 801cf9e:	bfc8      	it	gt
 801cfa0:	eba8 0806 	subgt.w	r8, r8, r6
 801cfa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cfa6:	bfcc      	ite	gt
 801cfa8:	fa1f f888 	uxthgt.w	r8, r8
 801cfac:	f04f 0800 	movle.w	r8, #0
 801cfb0:	4798      	blx	r3
 801cfb2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801cfb4:	7b53      	ldrb	r3, [r2, #13]
 801cfb6:	00d9      	lsls	r1, r3, #3
 801cfb8:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801cfbc:	7a11      	ldrb	r1, [r2, #8]
 801cfbe:	4339      	orrs	r1, r7
 801cfc0:	065f      	lsls	r7, r3, #25
 801cfc2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801cfc4:	bf44      	itt	mi
 801cfc6:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801cfca:	b209      	sxthmi	r1, r1
 801cfcc:	19c7      	adds	r7, r0, r7
 801cfce:	1a7f      	subs	r7, r7, r1
 801cfd0:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801cfd2:	b2bf      	uxth	r7, r7
 801cfd4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801cfd8:	fa0f fa87 	sxth.w	sl, r7
 801cfdc:	4551      	cmp	r1, sl
 801cfde:	dd3c      	ble.n	801d05a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801cfe0:	011b      	lsls	r3, r3, #4
 801cfe2:	79d0      	ldrb	r0, [r2, #7]
 801cfe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cfe8:	4303      	orrs	r3, r0
 801cfea:	449a      	add	sl, r3
 801cfec:	4551      	cmp	r1, sl
 801cfee:	dc30      	bgt.n	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801cff0:	468a      	mov	sl, r1
 801cff2:	1bcf      	subs	r7, r1, r7
 801cff4:	b23f      	sxth	r7, r7
 801cff6:	9219      	str	r2, [sp, #100]	@ 0x64
 801cff8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cffa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cffc:	6828      	ldr	r0, [r5, #0]
 801cffe:	2a00      	cmp	r2, #0
 801d000:	d12d      	bne.n	801d05e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801d002:	9318      	str	r3, [sp, #96]	@ 0x60
 801d004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d006:	b2bf      	uxth	r7, r7
 801d008:	6819      	ldr	r1, [r3, #0]
 801d00a:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 801d00c:	6801      	ldr	r1, [r0, #0]
 801d00e:	9314      	str	r3, [sp, #80]	@ 0x50
 801d010:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801d012:	4788      	blx	r1
 801d014:	79a9      	ldrb	r1, [r5, #6]
 801d016:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d018:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d01a:	7ba9      	ldrb	r1, [r5, #14]
 801d01c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d01e:	910a      	str	r1, [sp, #40]	@ 0x28
 801d020:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801d024:	9109      	str	r1, [sp, #36]	@ 0x24
 801d026:	68a9      	ldr	r1, [r5, #8]
 801d028:	9306      	str	r3, [sp, #24]
 801d02a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d02c:	e9cd 8702 	strd	r8, r7, [sp, #8]
 801d030:	44b0      	add	r8, r6
 801d032:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801d036:	9304      	str	r3, [sp, #16]
 801d038:	fa0f f388 	sxth.w	r3, r8
 801d03c:	9300      	str	r3, [sp, #0]
 801d03e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d040:	9205      	str	r2, [sp, #20]
 801d042:	f8cd a004 	str.w	sl, [sp, #4]
 801d046:	681a      	ldr	r2, [r3, #0]
 801d048:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d04a:	685b      	ldr	r3, [r3, #4]
 801d04c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d04e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801d050:	47b8      	blx	r7
 801d052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d054:	3301      	adds	r3, #1
 801d056:	930d      	str	r3, [sp, #52]	@ 0x34
 801d058:	e6e4      	b.n	801ce24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801d05a:	2700      	movs	r7, #0
 801d05c:	e7cb      	b.n	801cff6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801d05e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d060:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801d064:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d066:	f8dc 1000 	ldr.w	r1, [ip]
 801d06a:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801d06e:	79aa      	ldrb	r2, [r5, #6]
 801d070:	9203      	str	r2, [sp, #12]
 801d072:	7baa      	ldrb	r2, [r5, #14]
 801d074:	9202      	str	r2, [sp, #8]
 801d076:	68aa      	ldr	r2, [r5, #8]
 801d078:	e9cd 0200 	strd	r0, r2, [sp]
 801d07c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801d07e:	688f      	ldr	r7, [r1, #8]
 801d080:	4660      	mov	r0, ip
 801d082:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d084:	47b8      	blx	r7
 801d086:	e7e4      	b.n	801d052 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d088:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801d08a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801d08c:	3501      	adds	r5, #1
 801d08e:	429d      	cmp	r5, r3
 801d090:	f6bf af5f 	bge.w	801cf52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801d094:	4659      	mov	r1, fp
 801d096:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801d098:	f7f8 fcd8 	bl	8015a4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d09c:	4604      	mov	r4, r0
 801d09e:	b110      	cbz	r0, 801d0a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 801d0a0:	280a      	cmp	r0, #10
 801d0a2:	d1f2      	bne.n	801d08a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 801d0a4:	e754      	b.n	801cf50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801d0a6:	2400      	movs	r4, #0
 801d0a8:	e753      	b.n	801cf52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801d0aa:	f1bb 0f00 	cmp.w	fp, #0
 801d0ae:	f43f af44 	beq.w	801cf3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801d0b2:	e75e      	b.n	801cf72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801d0b4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801d0b4:	b530      	push	{r4, r5, lr}
 801d0b6:	8ac4      	ldrh	r4, [r0, #22]
 801d0b8:	8b45      	ldrh	r5, [r0, #26]
 801d0ba:	8343      	strh	r3, [r0, #26]
 801d0bc:	442c      	add	r4, r5
 801d0be:	1ae4      	subs	r4, r4, r3
 801d0c0:	82c4      	strh	r4, [r0, #22]
 801d0c2:	8b83      	ldrh	r3, [r0, #28]
 801d0c4:	8b04      	ldrh	r4, [r0, #24]
 801d0c6:	4422      	add	r2, r4
 801d0c8:	440c      	add	r4, r1
 801d0ca:	1a59      	subs	r1, r3, r1
 801d0cc:	83c2      	strh	r2, [r0, #30]
 801d0ce:	8304      	strh	r4, [r0, #24]
 801d0d0:	8381      	strh	r1, [r0, #28]
 801d0d2:	bd30      	pop	{r4, r5, pc}

0801d0d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d8:	4604      	mov	r4, r0
 801d0da:	8a47      	ldrh	r7, [r0, #18]
 801d0dc:	68c0      	ldr	r0, [r0, #12]
 801d0de:	b085      	sub	sp, #20
 801d0e0:	6803      	ldr	r3, [r0, #0]
 801d0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d0e4:	4798      	blx	r3
 801d0e6:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801d0ea:	7a63      	ldrb	r3, [r4, #9]
 801d0ec:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801d0f0:	42b7      	cmp	r7, r6
 801d0f2:	f103 33ff 	add.w	r3, r3, #4294967295
 801d0f6:	bfac      	ite	ge
 801d0f8:	f04f 0900 	movge.w	r9, #0
 801d0fc:	f04f 0901 	movlt.w	r9, #1
 801d100:	2b05      	cmp	r3, #5
 801d102:	d804      	bhi.n	801d10e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 801d104:	e8df f003 	tbb	[pc, r3]
 801d108:	460e0852 	.word	0x460e0852
 801d10c:	4b4b      	.short	0x4b4b
 801d10e:	2500      	movs	r5, #0
 801d110:	46a9      	mov	r9, r5
 801d112:	462e      	mov	r6, r5
 801d114:	462f      	mov	r7, r5
 801d116:	e00d      	b.n	801d134 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801d118:	42b7      	cmp	r7, r6
 801d11a:	bfb4      	ite	lt
 801d11c:	2600      	movlt	r6, #0
 801d11e:	2601      	movge	r6, #1
 801d120:	2500      	movs	r5, #0
 801d122:	e7f7      	b.n	801d114 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 801d124:	464d      	mov	r5, r9
 801d126:	f04f 0900 	mov.w	r9, #0
 801d12a:	42b7      	cmp	r7, r6
 801d12c:	bfb4      	ite	lt
 801d12e:	2600      	movlt	r6, #0
 801d130:	2601      	movge	r6, #1
 801d132:	464f      	mov	r7, r9
 801d134:	f04f 0800 	mov.w	r8, #0
 801d138:	f8a4 8016 	strh.w	r8, [r4, #22]
 801d13c:	f8a4 8018 	strh.w	r8, [r4, #24]
 801d140:	f8cd 8004 	str.w	r8, [sp, #4]
 801d144:	2300      	movs	r3, #0
 801d146:	9303      	str	r3, [sp, #12]
 801d148:	8823      	ldrh	r3, [r4, #0]
 801d14a:	2b20      	cmp	r3, #32
 801d14c:	d032      	beq.n	801d1b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe0>
 801d14e:	f242 010b 	movw	r1, #8203	@ 0x200b
 801d152:	1a5a      	subs	r2, r3, r1
 801d154:	f1d2 0a00 	rsbs	sl, r2, #0
 801d158:	eb4a 0a02 	adc.w	sl, sl, r2
 801d15c:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801d160:	4293      	cmp	r3, r2
 801d162:	d008      	beq.n	801d176 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801d164:	428b      	cmp	r3, r1
 801d166:	9a01      	ldr	r2, [sp, #4]
 801d168:	bf16      	itet	ne
 801d16a:	461a      	movne	r2, r3
 801d16c:	f04f 0a01 	moveq.w	sl, #1
 801d170:	f04f 0a00 	movne.w	sl, #0
 801d174:	9201      	str	r2, [sp, #4]
 801d176:	ab03      	add	r3, sp, #12
 801d178:	68e2      	ldr	r2, [r4, #12]
 801d17a:	7a21      	ldrb	r1, [r4, #8]
 801d17c:	6860      	ldr	r0, [r4, #4]
 801d17e:	f002 fe0b 	bl	801fd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d182:	8020      	strh	r0, [r4, #0]
 801d184:	b9d0      	cbnz	r0, 801d1bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe8>
 801d186:	2300      	movs	r3, #0
 801d188:	8ba2      	ldrh	r2, [r4, #28]
 801d18a:	4611      	mov	r1, r2
 801d18c:	4620      	mov	r0, r4
 801d18e:	f7ff ff91 	bl	801d0b4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d192:	e06d      	b.n	801d270 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 801d194:	2500      	movs	r5, #0
 801d196:	2701      	movs	r7, #1
 801d198:	46a9      	mov	r9, r5
 801d19a:	462e      	mov	r6, r5
 801d19c:	e7ca      	b.n	801d134 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801d19e:	2500      	movs	r5, #0
 801d1a0:	42b7      	cmp	r7, r6
 801d1a2:	bfb4      	ite	lt
 801d1a4:	2700      	movlt	r7, #0
 801d1a6:	2701      	movge	r7, #1
 801d1a8:	462e      	mov	r6, r5
 801d1aa:	e7c3      	b.n	801d134 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801d1ac:	2500      	movs	r5, #0
 801d1ae:	2601      	movs	r6, #1
 801d1b0:	46a9      	mov	r9, r5
 801d1b2:	e7af      	b.n	801d114 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 801d1b4:	9301      	str	r3, [sp, #4]
 801d1b6:	f04f 0a01 	mov.w	sl, #1
 801d1ba:	e7dc      	b.n	801d176 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801d1bc:	8b63      	ldrh	r3, [r4, #26]
 801d1be:	280a      	cmp	r0, #10
 801d1c0:	f103 0301 	add.w	r3, r3, #1
 801d1c4:	8363      	strh	r3, [r4, #26]
 801d1c6:	d0de      	beq.n	801d186 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801d1c8:	9a03      	ldr	r2, [sp, #12]
 801d1ca:	bb62      	cbnz	r2, 801d226 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x152>
 801d1cc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801d1d0:	4298      	cmp	r0, r3
 801d1d2:	d003      	beq.n	801d1dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 801d1d4:	f242 030b 	movw	r3, #8203	@ 0x200b
 801d1d8:	4298      	cmp	r0, r3
 801d1da:	d1b3      	bne.n	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d1dc:	8823      	ldrh	r3, [r4, #0]
 801d1de:	8ba1      	ldrh	r1, [r4, #28]
 801d1e0:	2b20      	cmp	r3, #32
 801d1e2:	d003      	beq.n	801d1ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x118>
 801d1e4:	f242 000b 	movw	r0, #8203	@ 0x200b
 801d1e8:	4283      	cmp	r3, r0
 801d1ea:	d131      	bne.n	801d250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17c>
 801d1ec:	f1ba 0f00 	cmp.w	sl, #0
 801d1f0:	bf0a      	itet	eq
 801d1f2:	4688      	moveq	r8, r1
 801d1f4:	4650      	movne	r0, sl
 801d1f6:	2001      	moveq	r0, #1
 801d1f8:	440a      	add	r2, r1
 801d1fa:	8b23      	ldrh	r3, [r4, #24]
 801d1fc:	b292      	uxth	r2, r2
 801d1fe:	83a2      	strh	r2, [r4, #28]
 801d200:	4413      	add	r3, r2
 801d202:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801d206:	f1b9 0f00 	cmp.w	r9, #0
 801d20a:	d102      	bne.n	801d212 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x13e>
 801d20c:	2d00      	cmp	r5, #0
 801d20e:	d042      	beq.n	801d296 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c2>
 801d210:	b300      	cbz	r0, 801d254 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 801d212:	8c21      	ldrh	r1, [r4, #32]
 801d214:	4419      	add	r1, r3
 801d216:	458c      	cmp	ip, r1
 801d218:	da37      	bge.n	801d28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 801d21a:	8ae1      	ldrh	r1, [r4, #22]
 801d21c:	2900      	cmp	r1, #0
 801d21e:	d034      	beq.n	801d28a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 801d220:	4563      	cmp	r3, ip
 801d222:	dd8f      	ble.n	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d224:	e01d      	b.n	801d262 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x18e>
 801d226:	8893      	ldrh	r3, [r2, #4]
 801d228:	9901      	ldr	r1, [sp, #4]
 801d22a:	8023      	strh	r3, [r4, #0]
 801d22c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801d230:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801d234:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 801d238:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801d23c:	ea4b 0b00 	orr.w	fp, fp, r0
 801d240:	68e0      	ldr	r0, [r4, #12]
 801d242:	6803      	ldr	r3, [r0, #0]
 801d244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d246:	4798      	blx	r3
 801d248:	eb0b 0200 	add.w	r2, fp, r0
 801d24c:	b292      	uxth	r2, r2
 801d24e:	e7c5      	b.n	801d1dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 801d250:	2000      	movs	r0, #0
 801d252:	e7d1      	b.n	801d1f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x124>
 801d254:	4563      	cmp	r3, ip
 801d256:	f77f af75 	ble.w	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d25a:	8ae3      	ldrh	r3, [r4, #22]
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	f43f af71 	beq.w	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d262:	2301      	movs	r3, #1
 801d264:	8c22      	ldrh	r2, [r4, #32]
 801d266:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801d26a:	8be3      	ldrh	r3, [r4, #30]
 801d26c:	4413      	add	r3, r2
 801d26e:	83e3      	strh	r3, [r4, #30]
 801d270:	68e0      	ldr	r0, [r4, #12]
 801d272:	6803      	ldr	r3, [r0, #0]
 801d274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d276:	4798      	blx	r3
 801d278:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d27c:	4418      	add	r0, r3
 801d27e:	8a63      	ldrh	r3, [r4, #18]
 801d280:	1a18      	subs	r0, r3, r0
 801d282:	8260      	strh	r0, [r4, #18]
 801d284:	b005      	add	sp, #20
 801d286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d28a:	2300      	movs	r3, #0
 801d28c:	4611      	mov	r1, r2
 801d28e:	4620      	mov	r0, r4
 801d290:	f7ff ff10 	bl	801d0b4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d294:	e756      	b.n	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d296:	4563      	cmp	r3, ip
 801d298:	dd14      	ble.n	801d2c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f0>
 801d29a:	b117      	cbz	r7, 801d2a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ce>
 801d29c:	2301      	movs	r3, #1
 801d29e:	460a      	mov	r2, r1
 801d2a0:	e773      	b.n	801d18a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801d2a2:	2e00      	cmp	r6, #0
 801d2a4:	f43f af4e 	beq.w	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d2a8:	2800      	cmp	r0, #0
 801d2aa:	f47f af4b 	bne.w	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d2ae:	f1ba 0f00 	cmp.w	sl, #0
 801d2b2:	d002      	beq.n	801d2ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e6>
 801d2b4:	2301      	movs	r3, #1
 801d2b6:	4642      	mov	r2, r8
 801d2b8:	e768      	b.n	801d18c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801d2ba:	8ae3      	ldrh	r3, [r4, #22]
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	f43f af41 	beq.w	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d2c2:	e7d5      	b.n	801d270 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 801d2c4:	2800      	cmp	r0, #0
 801d2c6:	f47f af3d 	bne.w	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d2ca:	f1ba 0f00 	cmp.w	sl, #0
 801d2ce:	f43f af39 	beq.w	801d144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801d2d2:	2301      	movs	r3, #1
 801d2d4:	4642      	mov	r2, r8
 801d2d6:	e7da      	b.n	801d28e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>

0801d2d8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801d2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2da:	4605      	mov	r5, r0
 801d2dc:	b08f      	sub	sp, #60	@ 0x3c
 801d2de:	4617      	mov	r7, r2
 801d2e0:	461c      	mov	r4, r3
 801d2e2:	460e      	mov	r6, r1
 801d2e4:	b1d1      	cbz	r1, 801d31c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	4620      	mov	r0, r4
 801d2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d2ec:	4798      	blx	r3
 801d2ee:	4240      	negs	r0, r0
 801d2f0:	b200      	sxth	r0, r0
 801d2f2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801d2f6:	9603      	str	r6, [sp, #12]
 801d2f8:	9700      	str	r7, [sp, #0]
 801d2fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d2fe:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801d302:	4629      	mov	r1, r5
 801d304:	a805      	add	r0, sp, #20
 801d306:	f7ff fcad 	bl	801cc64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801d30a:	2401      	movs	r4, #1
 801d30c:	a805      	add	r0, sp, #20
 801d30e:	f7ff fee1 	bl	801d0d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801d312:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801d316:	b163      	cbz	r3, 801d332 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801d318:	3401      	adds	r4, #1
 801d31a:	e7f7      	b.n	801d30c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801d31c:	f002 fe0a 	bl	801ff34 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d320:	2401      	movs	r4, #1
 801d322:	280a      	cmp	r0, #10
 801d324:	4628      	mov	r0, r5
 801d326:	bf08      	it	eq
 801d328:	3401      	addeq	r4, #1
 801d32a:	f002 fe03 	bl	801ff34 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d32e:	2800      	cmp	r0, #0
 801d330:	d1f7      	bne.n	801d322 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801d332:	b2a0      	uxth	r0, r4
 801d334:	b00f      	add	sp, #60	@ 0x3c
 801d336:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d33c:	b0e3      	sub	sp, #396	@ 0x18c
 801d33e:	461c      	mov	r4, r3
 801d340:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801d342:	4683      	mov	fp, r0
 801d344:	4688      	mov	r8, r1
 801d346:	2b00      	cmp	r3, #0
 801d348:	f000 8112 	beq.w	801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d34c:	6823      	ldr	r3, [r4, #0]
 801d34e:	2b00      	cmp	r3, #0
 801d350:	f000 810e 	beq.w	801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d354:	7ba3      	ldrb	r3, [r4, #14]
 801d356:	2b00      	cmp	r3, #0
 801d358:	f000 810a 	beq.w	801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d35c:	ad0a      	add	r5, sp, #40	@ 0x28
 801d35e:	462b      	mov	r3, r5
 801d360:	6810      	ldr	r0, [r2, #0]
 801d362:	6851      	ldr	r1, [r2, #4]
 801d364:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801d368:	c303      	stmia	r3!, {r0, r1}
 801d36a:	2100      	movs	r1, #0
 801d36c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801d370:	910c      	str	r1, [sp, #48]	@ 0x30
 801d372:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801d376:	a90c      	add	r1, sp, #48	@ 0x30
 801d378:	79a2      	ldrb	r2, [r4, #6]
 801d37a:	4628      	mov	r0, r5
 801d37c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801d380:	f7ff fcef 	bl	801cd62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d384:	a90c      	add	r1, sp, #48	@ 0x30
 801d386:	4608      	mov	r0, r1
 801d388:	79a2      	ldrb	r2, [r4, #6]
 801d38a:	f7ff fcea 	bl	801cd62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d38e:	a817      	add	r0, sp, #92	@ 0x5c
 801d390:	f002 f97a 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801d394:	6820      	ldr	r0, [r4, #0]
 801d396:	6803      	ldr	r3, [r0, #0]
 801d398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d39a:	4798      	blx	r3
 801d39c:	4606      	mov	r6, r0
 801d39e:	6820      	ldr	r0, [r4, #0]
 801d3a0:	6803      	ldr	r3, [r0, #0]
 801d3a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d3a4:	4798      	blx	r3
 801d3a6:	4633      	mov	r3, r6
 801d3a8:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801d3aa:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801d3ac:	9000      	str	r0, [sp, #0]
 801d3ae:	a817      	add	r0, sp, #92	@ 0x5c
 801d3b0:	f002 f9c5 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d3b4:	6820      	ldr	r0, [r4, #0]
 801d3b6:	f894 a004 	ldrb.w	sl, [r4, #4]
 801d3ba:	6803      	ldr	r3, [r0, #0]
 801d3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d3be:	4798      	blx	r3
 801d3c0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801d3c4:	6823      	ldr	r3, [r4, #0]
 801d3c6:	4607      	mov	r7, r0
 801d3c8:	4406      	add	r6, r0
 801d3ca:	a830      	add	r0, sp, #192	@ 0xc0
 801d3cc:	f893 9009 	ldrb.w	r9, [r3, #9]
 801d3d0:	f002 f95a 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801d3d4:	7c23      	ldrb	r3, [r4, #16]
 801d3d6:	b17b      	cbz	r3, 801d3f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801d3d8:	6820      	ldr	r0, [r4, #0]
 801d3da:	6803      	ldr	r3, [r0, #0]
 801d3dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d3de:	4798      	blx	r3
 801d3e0:	9009      	str	r0, [sp, #36]	@ 0x24
 801d3e2:	6820      	ldr	r0, [r4, #0]
 801d3e4:	6802      	ldr	r2, [r0, #0]
 801d3e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801d3e8:	4790      	blx	r2
 801d3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3ec:	9000      	str	r0, [sp, #0]
 801d3ee:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801d3f0:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801d3f2:	a830      	add	r0, sp, #192	@ 0xc0
 801d3f4:	f002 f9a3 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d3f8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801d3fc:	7be2      	ldrb	r2, [r4, #15]
 801d3fe:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801d402:	1a8a      	subs	r2, r1, r2
 801d404:	7c21      	ldrb	r1, [r4, #16]
 801d406:	b292      	uxth	r2, r2
 801d408:	9103      	str	r1, [sp, #12]
 801d40a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801d40e:	a80e      	add	r0, sp, #56	@ 0x38
 801d410:	9102      	str	r1, [sp, #8]
 801d412:	6821      	ldr	r1, [r4, #0]
 801d414:	9101      	str	r1, [sp, #4]
 801d416:	7961      	ldrb	r1, [r4, #5]
 801d418:	9100      	str	r1, [sp, #0]
 801d41a:	a930      	add	r1, sp, #192	@ 0xc0
 801d41c:	f7ff fc22 	bl	801cc64 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801d420:	2e00      	cmp	r6, #0
 801d422:	dc5b      	bgt.n	801d4dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801d424:	f04f 0900 	mov.w	r9, #0
 801d428:	af17      	add	r7, sp, #92	@ 0x5c
 801d42a:	7c23      	ldrb	r3, [r4, #16]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	f000 80b1 	beq.w	801d594 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801d432:	a80e      	add	r0, sp, #56	@ 0x38
 801d434:	f7ff fe4e 	bl	801d0d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801d438:	f1ba 0f00 	cmp.w	sl, #0
 801d43c:	f000 80a5 	beq.w	801d58a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801d440:	7c23      	ldrb	r3, [r4, #16]
 801d442:	2264      	movs	r2, #100	@ 0x64
 801d444:	4639      	mov	r1, r7
 801d446:	a849      	add	r0, sp, #292	@ 0x124
 801d448:	9309      	str	r3, [sp, #36]	@ 0x24
 801d44a:	f012 fdd2 	bl	802fff2 <memcpy>
 801d44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d450:	2b00      	cmp	r3, #0
 801d452:	f000 80a7 	beq.w	801d5a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801d456:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801d45a:	7922      	ldrb	r2, [r4, #4]
 801d45c:	2a01      	cmp	r2, #1
 801d45e:	f040 808a 	bne.w	801d576 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801d462:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801d466:	1ac0      	subs	r0, r0, r3
 801d468:	2302      	movs	r3, #2
 801d46a:	fb90 f0f3 	sdiv	r0, r0, r3
 801d46e:	b200      	sxth	r0, r0
 801d470:	7c23      	ldrb	r3, [r4, #16]
 801d472:	2b00      	cmp	r3, #0
 801d474:	f000 808b 	beq.w	801d58e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801d478:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801d47c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801d480:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d484:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801d488:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801d48c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801d490:	4410      	add	r0, r2
 801d492:	b200      	sxth	r0, r0
 801d494:	9000      	str	r0, [sp, #0]
 801d496:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801d49a:	4642      	mov	r2, r8
 801d49c:	2100      	movs	r1, #0
 801d49e:	4658      	mov	r0, fp
 801d4a0:	f7ff fc90 	bl	801cdc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	d163      	bne.n	801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d4a8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801d4ac:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801d4b0:	b2b2      	uxth	r2, r6
 801d4b2:	4413      	add	r3, r2
 801d4b4:	1a8a      	subs	r2, r1, r2
 801d4b6:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801d4ba:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801d4be:	b21b      	sxth	r3, r3
 801d4c0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d4c4:	2a00      	cmp	r2, #0
 801d4c6:	d153      	bne.n	801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d4c8:	6822      	ldr	r2, [r4, #0]
 801d4ca:	8869      	ldrh	r1, [r5, #2]
 801d4cc:	7a12      	ldrb	r2, [r2, #8]
 801d4ce:	1a9b      	subs	r3, r3, r2
 801d4d0:	88ea      	ldrh	r2, [r5, #6]
 801d4d2:	440a      	add	r2, r1
 801d4d4:	b212      	sxth	r2, r2
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	dda7      	ble.n	801d42a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801d4da:	e049      	b.n	801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d4dc:	7c23      	ldrb	r3, [r4, #16]
 801d4de:	444f      	add	r7, r9
 801d4e0:	b1c3      	cbz	r3, 801d514 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801d4e2:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801d4e6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d4ea:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801d4ee:	443b      	add	r3, r7
 801d4f0:	4293      	cmp	r3, r2
 801d4f2:	da97      	bge.n	801d424 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801d4f4:	a80e      	add	r0, sp, #56	@ 0x38
 801d4f6:	f7ff fded 	bl	801d0d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801d4fa:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801d4fe:	3b01      	subs	r3, #1
 801d500:	b29b      	uxth	r3, r3
 801d502:	454b      	cmp	r3, r9
 801d504:	9309      	str	r3, [sp, #36]	@ 0x24
 801d506:	d021      	beq.n	801d54c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801d508:	7961      	ldrb	r1, [r4, #5]
 801d50a:	a817      	add	r0, sp, #92	@ 0x5c
 801d50c:	f7f8 fa9e 	bl	8015a4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d512:	e7f4      	b.n	801d4fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801d514:	fa1f f986 	uxth.w	r9, r6
 801d518:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d51c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801d520:	443b      	add	r3, r7
 801d522:	4293      	cmp	r3, r2
 801d524:	f6bf af7e 	bge.w	801d424 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801d528:	a817      	add	r0, sp, #92	@ 0x5c
 801d52a:	f002 fd03 	bl	801ff34 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d52e:	b1f8      	cbz	r0, 801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d530:	280a      	cmp	r0, #10
 801d532:	d1f1      	bne.n	801d518 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801d534:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801d538:	444b      	add	r3, r9
 801d53a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d53e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801d542:	eba3 0309 	sub.w	r3, r3, r9
 801d546:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801d54a:	e7e5      	b.n	801d518 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801d54c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801d550:	b2b3      	uxth	r3, r6
 801d552:	441a      	add	r2, r3
 801d554:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801d558:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801d55c:	1ad3      	subs	r3, r2, r3
 801d55e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801d562:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d566:	b11b      	cbz	r3, 801d570 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801d568:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d0ba      	beq.n	801d4e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801d570:	b063      	add	sp, #396	@ 0x18c
 801d572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d576:	2a02      	cmp	r2, #2
 801d578:	d105      	bne.n	801d586 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801d57a:	7be2      	ldrb	r2, [r4, #15]
 801d57c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801d580:	1a80      	subs	r0, r0, r2
 801d582:	1ac0      	subs	r0, r0, r3
 801d584:	e773      	b.n	801d46e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801d586:	2000      	movs	r0, #0
 801d588:	e772      	b.n	801d470 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801d58a:	7be0      	ldrb	r0, [r4, #15]
 801d58c:	e770      	b.n	801d470 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801d58e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801d592:	e773      	b.n	801d47c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801d594:	f1ba 0f00 	cmp.w	sl, #0
 801d598:	d0f7      	beq.n	801d58a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801d59a:	2264      	movs	r2, #100	@ 0x64
 801d59c:	4639      	mov	r1, r7
 801d59e:	a849      	add	r0, sp, #292	@ 0x124
 801d5a0:	f012 fd27 	bl	802fff2 <memcpy>
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801d5aa:	6821      	ldr	r1, [r4, #0]
 801d5ac:	a849      	add	r0, sp, #292	@ 0x124
 801d5ae:	f7ff fb9c 	bl	801ccea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801d5b2:	b203      	sxth	r3, r0
 801d5b4:	e751      	b.n	801d45a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801d5b6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801d5b6:	2b03      	cmp	r3, #3
 801d5b8:	d818      	bhi.n	801d5ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801d5ba:	e8df f003 	tbb	[pc, r3]
 801d5be:	0602      	.short	0x0602
 801d5c0:	130d      	.short	0x130d
 801d5c2:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d5c6:	1850      	adds	r0, r2, r1
 801d5c8:	4770      	bx	lr
 801d5ca:	8803      	ldrh	r3, [r0, #0]
 801d5cc:	8880      	ldrh	r0, [r0, #4]
 801d5ce:	4418      	add	r0, r3
 801d5d0:	b200      	sxth	r0, r0
 801d5d2:	1a80      	subs	r0, r0, r2
 801d5d4:	3801      	subs	r0, #1
 801d5d6:	4770      	bx	lr
 801d5d8:	8803      	ldrh	r3, [r0, #0]
 801d5da:	8880      	ldrh	r0, [r0, #4]
 801d5dc:	4418      	add	r0, r3
 801d5de:	b200      	sxth	r0, r0
 801d5e0:	1a40      	subs	r0, r0, r1
 801d5e2:	e7f7      	b.n	801d5d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801d5e4:	f9b0 0000 	ldrsh.w	r0, [r0]
 801d5e8:	4410      	add	r0, r2
 801d5ea:	4770      	bx	lr
 801d5ec:	2000      	movs	r0, #0
 801d5ee:	4770      	bx	lr

0801d5f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801d5f0:	2b03      	cmp	r3, #3
 801d5f2:	d817      	bhi.n	801d624 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801d5f4:	e8df f003 	tbb	[pc, r3]
 801d5f8:	10090602 	.word	0x10090602
 801d5fc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d600:	1850      	adds	r0, r2, r1
 801d602:	4770      	bx	lr
 801d604:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d608:	e7fa      	b.n	801d600 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801d60a:	8843      	ldrh	r3, [r0, #2]
 801d60c:	88c0      	ldrh	r0, [r0, #6]
 801d60e:	4418      	add	r0, r3
 801d610:	b200      	sxth	r0, r0
 801d612:	1a80      	subs	r0, r0, r2
 801d614:	3801      	subs	r0, #1
 801d616:	4770      	bx	lr
 801d618:	8843      	ldrh	r3, [r0, #2]
 801d61a:	88c0      	ldrh	r0, [r0, #6]
 801d61c:	4418      	add	r0, r3
 801d61e:	b200      	sxth	r0, r0
 801d620:	1a40      	subs	r0, r0, r1
 801d622:	e7f7      	b.n	801d614 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801d624:	2000      	movs	r0, #0
 801d626:	4770      	bx	lr

0801d628 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801d628:	2200      	movs	r2, #0
 801d62a:	4b01      	ldr	r3, [pc, #4]	@ (801d630 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801d62c:	601a      	str	r2, [r3, #0]
 801d62e:	4770      	bx	lr
 801d630:	2001200c 	.word	0x2001200c

0801d634 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801d634:	4603      	mov	r3, r0
 801d636:	b1c8      	cbz	r0, 801d66c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801d638:	0c02      	lsrs	r2, r0, #16
 801d63a:	0412      	lsls	r2, r2, #16
 801d63c:	b9a2      	cbnz	r2, 801d668 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801d63e:	0403      	lsls	r3, r0, #16
 801d640:	2010      	movs	r0, #16
 801d642:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801d646:	bf04      	itt	eq
 801d648:	021b      	lsleq	r3, r3, #8
 801d64a:	3008      	addeq	r0, #8
 801d64c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801d650:	bf04      	itt	eq
 801d652:	011b      	lsleq	r3, r3, #4
 801d654:	3004      	addeq	r0, #4
 801d656:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801d65a:	bf04      	itt	eq
 801d65c:	009b      	lsleq	r3, r3, #2
 801d65e:	3002      	addeq	r0, #2
 801d660:	2b00      	cmp	r3, #0
 801d662:	db04      	blt.n	801d66e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801d664:	3001      	adds	r0, #1
 801d666:	4770      	bx	lr
 801d668:	2000      	movs	r0, #0
 801d66a:	e7ea      	b.n	801d642 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801d66c:	2020      	movs	r0, #32
 801d66e:	4770      	bx	lr

0801d670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d674:	b087      	sub	sp, #28
 801d676:	460d      	mov	r5, r1
 801d678:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801d67c:	4616      	mov	r6, r2
 801d67e:	4698      	mov	r8, r3
 801d680:	4601      	mov	r1, r0
 801d682:	b120      	cbz	r0, 801d68e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801d684:	b11a      	cbz	r2, 801d68e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801d686:	2d1f      	cmp	r5, #31
 801d688:	d801      	bhi.n	801d68e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801d68a:	2b1f      	cmp	r3, #31
 801d68c:	d904      	bls.n	801d698 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801d68e:	2000      	movs	r0, #0
 801d690:	6038      	str	r0, [r7, #0]
 801d692:	b007      	add	sp, #28
 801d694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d698:	b97d      	cbnz	r5, 801d6ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801d69a:	b143      	cbz	r3, 801d6ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801d69c:	4602      	mov	r2, r0
 801d69e:	e9cd 4700 	strd	r4, r7, [sp]
 801d6a2:	462b      	mov	r3, r5
 801d6a4:	4641      	mov	r1, r8
 801d6a6:	4630      	mov	r0, r6
 801d6a8:	f7ff ffe2 	bl	801d670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d6ac:	e7f1      	b.n	801d692 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801d6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801d6b6:	603b      	str	r3, [r7, #0]
 801d6b8:	e7eb      	b.n	801d692 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801d6ba:	fa32 fa05 	lsrs.w	sl, r2, r5
 801d6be:	d106      	bne.n	801d6ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801d6c0:	4346      	muls	r6, r0
 801d6c2:	fbb6 f0f4 	udiv	r0, r6, r4
 801d6c6:	fb04 6610 	mls	r6, r4, r0, r6
 801d6ca:	603e      	str	r6, [r7, #0]
 801d6cc:	e7e1      	b.n	801d692 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801d6ce:	fa00 fb05 	lsl.w	fp, r0, r5
 801d6d2:	fbbb f9f4 	udiv	r9, fp, r4
 801d6d6:	2201      	movs	r2, #1
 801d6d8:	fb0a f309 	mul.w	r3, sl, r9
 801d6dc:	40aa      	lsls	r2, r5
 801d6de:	3a01      	subs	r2, #1
 801d6e0:	4016      	ands	r6, r2
 801d6e2:	4630      	mov	r0, r6
 801d6e4:	9303      	str	r3, [sp, #12]
 801d6e6:	f7ff ffa5 	bl	801d634 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d6ea:	462b      	mov	r3, r5
 801d6ec:	460a      	mov	r2, r1
 801d6ee:	e9cd 4700 	strd	r4, r7, [sp]
 801d6f2:	4601      	mov	r1, r0
 801d6f4:	4630      	mov	r0, r6
 801d6f6:	f7ff ffbb 	bl	801d670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d6fa:	fb04 b919 	mls	r9, r4, r9, fp
 801d6fe:	4606      	mov	r6, r0
 801d700:	4648      	mov	r0, r9
 801d702:	eb05 0108 	add.w	r1, r5, r8
 801d706:	f7ff ff95 	bl	801d634 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d70a:	ab05      	add	r3, sp, #20
 801d70c:	e9cd 4300 	strd	r4, r3, [sp]
 801d710:	464a      	mov	r2, r9
 801d712:	4603      	mov	r3, r0
 801d714:	4650      	mov	r0, sl
 801d716:	f7ff ffab 	bl	801d670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d71a:	6839      	ldr	r1, [r7, #0]
 801d71c:	9a05      	ldr	r2, [sp, #20]
 801d71e:	9b03      	ldr	r3, [sp, #12]
 801d720:	4411      	add	r1, r2
 801d722:	fbb1 f2f4 	udiv	r2, r1, r4
 801d726:	fb04 1412 	mls	r4, r4, r2, r1
 801d72a:	18d3      	adds	r3, r2, r3
 801d72c:	441e      	add	r6, r3
 801d72e:	4430      	add	r0, r6
 801d730:	603c      	str	r4, [r7, #0]
 801d732:	e7ae      	b.n	801d692 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801d734 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801d734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d738:	b085      	sub	sp, #20
 801d73a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d73c:	f1b0 0900 	subs.w	r9, r0, #0
 801d740:	461d      	mov	r5, r3
 801d742:	bfbf      	itttt	lt
 801d744:	6823      	ldrlt	r3, [r4, #0]
 801d746:	f1c9 0900 	rsblt	r9, r9, #0
 801d74a:	425b      	neglt	r3, r3
 801d74c:	6023      	strlt	r3, [r4, #0]
 801d74e:	bfb4      	ite	lt
 801d750:	f04f 36ff 	movlt.w	r6, #4294967295
 801d754:	2601      	movge	r6, #1
 801d756:	2a00      	cmp	r2, #0
 801d758:	4617      	mov	r7, r2
 801d75a:	da04      	bge.n	801d766 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801d75c:	6823      	ldr	r3, [r4, #0]
 801d75e:	4257      	negs	r7, r2
 801d760:	425b      	negs	r3, r3
 801d762:	4276      	negs	r6, r6
 801d764:	6023      	str	r3, [r4, #0]
 801d766:	2d00      	cmp	r5, #0
 801d768:	4638      	mov	r0, r7
 801d76a:	bfba      	itte	lt
 801d76c:	426d      	neglt	r5, r5
 801d76e:	f04f 38ff 	movlt.w	r8, #4294967295
 801d772:	f04f 0801 	movge.w	r8, #1
 801d776:	f7ff ff5d 	bl	801d634 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801d77a:	ab03      	add	r3, sp, #12
 801d77c:	e9cd 5300 	strd	r5, r3, [sp]
 801d780:	463a      	mov	r2, r7
 801d782:	4603      	mov	r3, r0
 801d784:	4648      	mov	r0, r9
 801d786:	f7ff ff73 	bl	801d670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801d78a:	6823      	ldr	r3, [r4, #0]
 801d78c:	9a03      	ldr	r2, [sp, #12]
 801d78e:	4546      	cmp	r6, r8
 801d790:	441a      	add	r2, r3
 801d792:	fb92 f3f5 	sdiv	r3, r2, r5
 801d796:	4418      	add	r0, r3
 801d798:	fb05 2313 	mls	r3, r5, r3, r2
 801d79c:	bf18      	it	ne
 801d79e:	4240      	negne	r0, r0
 801d7a0:	1c72      	adds	r2, r6, #1
 801d7a2:	6023      	str	r3, [r4, #0]
 801d7a4:	d105      	bne.n	801d7b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	f1c3 0200 	rsb	r2, r3, #0
 801d7ac:	db0b      	blt.n	801d7c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801d7ae:	6022      	str	r2, [r4, #0]
 801d7b0:	e006      	b.n	801d7c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d7b2:	2e01      	cmp	r6, #1
 801d7b4:	d104      	bne.n	801d7c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	da02      	bge.n	801d7c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801d7ba:	442b      	add	r3, r5
 801d7bc:	3801      	subs	r0, #1
 801d7be:	6023      	str	r3, [r4, #0]
 801d7c0:	b005      	add	sp, #20
 801d7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7c6:	3801      	subs	r0, #1
 801d7c8:	1b52      	subs	r2, r2, r5
 801d7ca:	e7f0      	b.n	801d7ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801d7cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801d7cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d7d0:	4c1c      	ldr	r4, [pc, #112]	@ (801d844 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801d7d2:	4605      	mov	r5, r0
 801d7d4:	69a3      	ldr	r3, [r4, #24]
 801d7d6:	6807      	ldr	r7, [r0, #0]
 801d7d8:	b92b      	cbnz	r3, 801d7e6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801d7da:	6840      	ldr	r0, [r0, #4]
 801d7dc:	e9c5 7000 	strd	r7, r0, [r5]
 801d7e0:	b004      	add	sp, #16
 801d7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7e6:	f04f 0802 	mov.w	r8, #2
 801d7ea:	fb93 f1f8 	sdiv	r1, r3, r8
 801d7ee:	68a2      	ldr	r2, [r4, #8]
 801d7f0:	ae04      	add	r6, sp, #16
 801d7f2:	440a      	add	r2, r1
 801d7f4:	f846 2d04 	str.w	r2, [r6, #-4]!
 801d7f8:	69e1      	ldr	r1, [r4, #28]
 801d7fa:	463a      	mov	r2, r7
 801d7fc:	9600      	str	r6, [sp, #0]
 801d7fe:	6820      	ldr	r0, [r4, #0]
 801d800:	f7ff ff98 	bl	801d734 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d804:	69a3      	ldr	r3, [r4, #24]
 801d806:	4607      	mov	r7, r0
 801d808:	686a      	ldr	r2, [r5, #4]
 801d80a:	6a21      	ldr	r1, [r4, #32]
 801d80c:	9600      	str	r6, [sp, #0]
 801d80e:	6860      	ldr	r0, [r4, #4]
 801d810:	f7ff ff90 	bl	801d734 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d814:	69a3      	ldr	r3, [r4, #24]
 801d816:	6962      	ldr	r2, [r4, #20]
 801d818:	fb93 f8f8 	sdiv	r8, r3, r8
 801d81c:	4442      	add	r2, r8
 801d81e:	9203      	str	r2, [sp, #12]
 801d820:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801d822:	682a      	ldr	r2, [r5, #0]
 801d824:	4407      	add	r7, r0
 801d826:	9600      	str	r6, [sp, #0]
 801d828:	68e0      	ldr	r0, [r4, #12]
 801d82a:	f7ff ff83 	bl	801d734 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d82e:	9600      	str	r6, [sp, #0]
 801d830:	4680      	mov	r8, r0
 801d832:	69a3      	ldr	r3, [r4, #24]
 801d834:	686a      	ldr	r2, [r5, #4]
 801d836:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801d838:	6920      	ldr	r0, [r4, #16]
 801d83a:	f7ff ff7b 	bl	801d734 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801d83e:	4440      	add	r0, r8
 801d840:	e7cc      	b.n	801d7dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801d842:	bf00      	nop
 801d844:	20012010 	.word	0x20012010

0801d848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801d848:	4b07      	ldr	r3, [pc, #28]	@ (801d868 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801d84a:	781b      	ldrb	r3, [r3, #0]
 801d84c:	2b01      	cmp	r3, #1
 801d84e:	d109      	bne.n	801d864 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801d850:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d854:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d858:	8003      	strh	r3, [r0, #0]
 801d85a:	4b04      	ldr	r3, [pc, #16]	@ (801d86c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801d85c:	881b      	ldrh	r3, [r3, #0]
 801d85e:	3b01      	subs	r3, #1
 801d860:	1a9b      	subs	r3, r3, r2
 801d862:	800b      	strh	r3, [r1, #0]
 801d864:	4770      	bx	lr
 801d866:	bf00      	nop
 801d868:	20011ff4 	.word	0x20011ff4
 801d86c:	20011ff0 	.word	0x20011ff0

0801d870 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801d870:	b510      	push	{r4, lr}
 801d872:	4b07      	ldr	r3, [pc, #28]	@ (801d890 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801d874:	781b      	ldrb	r3, [r3, #0]
 801d876:	2b01      	cmp	r3, #1
 801d878:	d108      	bne.n	801d88c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801d87a:	4b06      	ldr	r3, [pc, #24]	@ (801d894 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801d87c:	880c      	ldrh	r4, [r1, #0]
 801d87e:	881b      	ldrh	r3, [r3, #0]
 801d880:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d884:	3b01      	subs	r3, #1
 801d886:	1b1b      	subs	r3, r3, r4
 801d888:	8003      	strh	r3, [r0, #0]
 801d88a:	800a      	strh	r2, [r1, #0]
 801d88c:	bd10      	pop	{r4, pc}
 801d88e:	bf00      	nop
 801d890:	20011ff4 	.word	0x20011ff4
 801d894:	20011ff0 	.word	0x20011ff0

0801d898 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801d898:	b510      	push	{r4, lr}
 801d89a:	4b0a      	ldr	r3, [pc, #40]	@ (801d8c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801d89c:	781b      	ldrb	r3, [r3, #0]
 801d89e:	2b01      	cmp	r3, #1
 801d8a0:	d10e      	bne.n	801d8c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801d8a2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d8a6:	8843      	ldrh	r3, [r0, #2]
 801d8a8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d8ac:	18ca      	adds	r2, r1, r3
 801d8ae:	4b06      	ldr	r3, [pc, #24]	@ (801d8c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801d8b0:	8044      	strh	r4, [r0, #2]
 801d8b2:	881b      	ldrh	r3, [r3, #0]
 801d8b4:	1a9b      	subs	r3, r3, r2
 801d8b6:	8003      	strh	r3, [r0, #0]
 801d8b8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d8bc:	8081      	strh	r1, [r0, #4]
 801d8be:	80c3      	strh	r3, [r0, #6]
 801d8c0:	bd10      	pop	{r4, pc}
 801d8c2:	bf00      	nop
 801d8c4:	20011ff4 	.word	0x20011ff4
 801d8c8:	20011ff0 	.word	0x20011ff0

0801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801d8cc:	4b08      	ldr	r3, [pc, #32]	@ (801d8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801d8ce:	781b      	ldrb	r3, [r3, #0]
 801d8d0:	2b01      	cmp	r3, #1
 801d8d2:	d10c      	bne.n	801d8ee <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801d8d4:	8803      	ldrh	r3, [r0, #0]
 801d8d6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801d8da:	8842      	ldrh	r2, [r0, #2]
 801d8dc:	8002      	strh	r2, [r0, #0]
 801d8de:	185a      	adds	r2, r3, r1
 801d8e0:	4b04      	ldr	r3, [pc, #16]	@ (801d8f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801d8e2:	881b      	ldrh	r3, [r3, #0]
 801d8e4:	1a9b      	subs	r3, r3, r2
 801d8e6:	8043      	strh	r3, [r0, #2]
 801d8e8:	88c3      	ldrh	r3, [r0, #6]
 801d8ea:	80c1      	strh	r1, [r0, #6]
 801d8ec:	8083      	strh	r3, [r0, #4]
 801d8ee:	4770      	bx	lr
 801d8f0:	20011ff4 	.word	0x20011ff4
 801d8f4:	20011ff0 	.word	0x20011ff0

0801d8f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801d8f8:	b510      	push	{r4, lr}
 801d8fa:	4b07      	ldr	r3, [pc, #28]	@ (801d918 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801d8fc:	781b      	ldrb	r3, [r3, #0]
 801d8fe:	2b01      	cmp	r3, #1
 801d900:	d108      	bne.n	801d914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801d902:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d906:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d90a:	8003      	strh	r3, [r0, #0]
 801d90c:	8893      	ldrh	r3, [r2, #4]
 801d90e:	3b01      	subs	r3, #1
 801d910:	1b1b      	subs	r3, r3, r4
 801d912:	800b      	strh	r3, [r1, #0]
 801d914:	bd10      	pop	{r4, pc}
 801d916:	bf00      	nop
 801d918:	20011ff4 	.word	0x20011ff4

0801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801d91c:	b510      	push	{r4, lr}
 801d91e:	4b0a      	ldr	r3, [pc, #40]	@ (801d948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801d920:	460a      	mov	r2, r1
 801d922:	781b      	ldrb	r3, [r3, #0]
 801d924:	2b01      	cmp	r3, #1
 801d926:	d10d      	bne.n	801d944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801d928:	8881      	ldrh	r1, [r0, #4]
 801d92a:	8803      	ldrh	r3, [r0, #0]
 801d92c:	440b      	add	r3, r1
 801d92e:	4601      	mov	r1, r0
 801d930:	3b01      	subs	r3, #1
 801d932:	f821 3b02 	strh.w	r3, [r1], #2
 801d936:	f7ff ffdf 	bl	801d8f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801d93a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d93e:	88c2      	ldrh	r2, [r0, #6]
 801d940:	80c3      	strh	r3, [r0, #6]
 801d942:	8082      	strh	r2, [r0, #4]
 801d944:	bd10      	pop	{r4, pc}
 801d946:	bf00      	nop
 801d948:	20011ff4 	.word	0x20011ff4

0801d94c <_ZN8touchgfx11Application13requestRedrawEv>:
 801d94c:	2100      	movs	r1, #0
 801d94e:	4b06      	ldr	r3, [pc, #24]	@ (801d968 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801d950:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801d954:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d958:	4b04      	ldr	r3, [pc, #16]	@ (801d96c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801d95a:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801d95e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d962:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801d966:	4770      	bx	lr
 801d968:	20011ff0 	.word	0x20011ff0
 801d96c:	20011ff2 	.word	0x20011ff2

0801d970 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801d970:	4b03      	ldr	r3, [pc, #12]	@ (801d980 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801d972:	6818      	ldr	r0, [r3, #0]
 801d974:	b110      	cbz	r0, 801d97c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801d976:	6803      	ldr	r3, [r0, #0]
 801d978:	699b      	ldr	r3, [r3, #24]
 801d97a:	4718      	bx	r3
 801d97c:	4770      	bx	lr
 801d97e:	bf00      	nop
 801d980:	20012040 	.word	0x20012040

0801d984 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801d984:	4770      	bx	lr
	...

0801d988 <_ZN8touchgfx11Application4drawEv>:
 801d988:	b507      	push	{r0, r1, r2, lr}
 801d98a:	2100      	movs	r1, #0
 801d98c:	4b08      	ldr	r3, [pc, #32]	@ (801d9b0 <_ZN8touchgfx11Application4drawEv+0x28>)
 801d98e:	9100      	str	r1, [sp, #0]
 801d990:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d994:	4b07      	ldr	r3, [pc, #28]	@ (801d9b4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801d996:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d99a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d99e:	4669      	mov	r1, sp
 801d9a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d9a4:	6803      	ldr	r3, [r0, #0]
 801d9a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d9a8:	4798      	blx	r3
 801d9aa:	b003      	add	sp, #12
 801d9ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801d9b0:	20011ff0 	.word	0x20011ff0
 801d9b4:	20011ff2 	.word	0x20011ff2

0801d9b8 <_ZN8touchgfx11Application10invalidateEv>:
 801d9b8:	2100      	movs	r1, #0
 801d9ba:	4b09      	ldr	r3, [pc, #36]	@ (801d9e0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801d9bc:	b082      	sub	sp, #8
 801d9be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d9c2:	4b08      	ldr	r3, [pc, #32]	@ (801d9e4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801d9c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d9c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d9cc:	9100      	str	r1, [sp, #0]
 801d9ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d9d2:	6803      	ldr	r3, [r0, #0]
 801d9d4:	aa02      	add	r2, sp, #8
 801d9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d9d8:	e912 0006 	ldmdb	r2, {r1, r2}
 801d9dc:	b002      	add	sp, #8
 801d9de:	4718      	bx	r3
 801d9e0:	20011ff0 	.word	0x20011ff0
 801d9e4:	20011ff2 	.word	0x20011ff2

0801d9e8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801d9e8:	4b03      	ldr	r3, [pc, #12]	@ (801d9f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801d9ea:	6818      	ldr	r0, [r3, #0]
 801d9ec:	b110      	cbz	r0, 801d9f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801d9ee:	6803      	ldr	r3, [r0, #0]
 801d9f0:	69db      	ldr	r3, [r3, #28]
 801d9f2:	4718      	bx	r3
 801d9f4:	4770      	bx	lr
 801d9f6:	bf00      	nop
 801d9f8:	20012040 	.word	0x20012040

0801d9fc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801d9fc:	4b03      	ldr	r3, [pc, #12]	@ (801da0c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801d9fe:	6818      	ldr	r0, [r3, #0]
 801da00:	b110      	cbz	r0, 801da08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801da02:	6803      	ldr	r3, [r0, #0]
 801da04:	6a1b      	ldr	r3, [r3, #32]
 801da06:	4718      	bx	r3
 801da08:	4770      	bx	lr
 801da0a:	bf00      	nop
 801da0c:	20012040 	.word	0x20012040

0801da10 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801da10:	2300      	movs	r3, #0
 801da12:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801da16:	4770      	bx	lr

0801da18 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801da18:	4b03      	ldr	r3, [pc, #12]	@ (801da28 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801da1a:	6818      	ldr	r0, [r3, #0]
 801da1c:	b110      	cbz	r0, 801da24 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801da1e:	6803      	ldr	r3, [r0, #0]
 801da20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da22:	4718      	bx	r3
 801da24:	4770      	bx	lr
 801da26:	bf00      	nop
 801da28:	20012040 	.word	0x20012040

0801da2c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801da2c:	b510      	push	{r4, lr}
 801da2e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801da32:	888a      	ldrh	r2, [r1, #4]
 801da34:	f9b0 3000 	ldrsh.w	r3, [r0]
 801da38:	4422      	add	r2, r4
 801da3a:	b212      	sxth	r2, r2
 801da3c:	4293      	cmp	r3, r2
 801da3e:	da15      	bge.n	801da6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801da40:	8882      	ldrh	r2, [r0, #4]
 801da42:	4413      	add	r3, r2
 801da44:	b21b      	sxth	r3, r3
 801da46:	429c      	cmp	r4, r3
 801da48:	da10      	bge.n	801da6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801da4a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801da4e:	88c9      	ldrh	r1, [r1, #6]
 801da50:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801da54:	4419      	add	r1, r3
 801da56:	b209      	sxth	r1, r1
 801da58:	428a      	cmp	r2, r1
 801da5a:	da07      	bge.n	801da6c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801da5c:	88c0      	ldrh	r0, [r0, #6]
 801da5e:	4410      	add	r0, r2
 801da60:	b200      	sxth	r0, r0
 801da62:	4283      	cmp	r3, r0
 801da64:	bfac      	ite	ge
 801da66:	2000      	movge	r0, #0
 801da68:	2001      	movlt	r0, #1
 801da6a:	bd10      	pop	{r4, pc}
 801da6c:	2000      	movs	r0, #0
 801da6e:	e7fc      	b.n	801da6a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801da70 <_ZN8touchgfx4Rect10restrictToEss>:
 801da70:	f9b0 3000 	ldrsh.w	r3, [r0]
 801da74:	b510      	push	{r4, lr}
 801da76:	2b00      	cmp	r3, #0
 801da78:	da04      	bge.n	801da84 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801da7a:	8884      	ldrh	r4, [r0, #4]
 801da7c:	4423      	add	r3, r4
 801da7e:	8083      	strh	r3, [r0, #4]
 801da80:	2300      	movs	r3, #0
 801da82:	8003      	strh	r3, [r0, #0]
 801da84:	f9b0 4000 	ldrsh.w	r4, [r0]
 801da88:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801da8c:	1b09      	subs	r1, r1, r4
 801da8e:	428b      	cmp	r3, r1
 801da90:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801da94:	bfc8      	it	gt
 801da96:	8081      	strhgt	r1, [r0, #4]
 801da98:	2b00      	cmp	r3, #0
 801da9a:	da04      	bge.n	801daa6 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801da9c:	88c1      	ldrh	r1, [r0, #6]
 801da9e:	440b      	add	r3, r1
 801daa0:	80c3      	strh	r3, [r0, #6]
 801daa2:	2300      	movs	r3, #0
 801daa4:	8043      	strh	r3, [r0, #2]
 801daa6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801daaa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801daae:	1a52      	subs	r2, r2, r1
 801dab0:	4293      	cmp	r3, r2
 801dab2:	bfc8      	it	gt
 801dab4:	80c2      	strhgt	r2, [r0, #6]
 801dab6:	bd10      	pop	{r4, pc}

0801dab8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801dab8:	b510      	push	{r4, lr}
 801daba:	460c      	mov	r4, r1
 801dabc:	4b0f      	ldr	r3, [pc, #60]	@ (801dafc <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801dabe:	4620      	mov	r0, r4
 801dac0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dac4:	4b0e      	ldr	r3, [pc, #56]	@ (801db00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801dac6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801daca:	f7ff ffd1 	bl	801da70 <_ZN8touchgfx4Rect10restrictToEss>
 801dace:	4b0d      	ldr	r3, [pc, #52]	@ (801db04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801dad0:	6818      	ldr	r0, [r3, #0]
 801dad2:	b190      	cbz	r0, 801dafa <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801dad4:	6803      	ldr	r3, [r0, #0]
 801dad6:	4621      	mov	r1, r4
 801dad8:	689b      	ldr	r3, [r3, #8]
 801dada:	4798      	blx	r3
 801dadc:	4b0a      	ldr	r3, [pc, #40]	@ (801db08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801dade:	6818      	ldr	r0, [r3, #0]
 801dae0:	b118      	cbz	r0, 801daea <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801dae2:	6803      	ldr	r3, [r0, #0]
 801dae4:	4621      	mov	r1, r4
 801dae6:	689b      	ldr	r3, [r3, #8]
 801dae8:	4798      	blx	r3
 801daea:	4b08      	ldr	r3, [pc, #32]	@ (801db0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801daec:	4621      	mov	r1, r4
 801daee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801daf2:	6818      	ldr	r0, [r3, #0]
 801daf4:	6803      	ldr	r3, [r0, #0]
 801daf6:	69db      	ldr	r3, [r3, #28]
 801daf8:	4718      	bx	r3
 801dafa:	bd10      	pop	{r4, pc}
 801dafc:	20011ff2 	.word	0x20011ff2
 801db00:	20011ff0 	.word	0x20011ff0
 801db04:	20012040 	.word	0x20012040
 801db08:	2001203c 	.word	0x2001203c
 801db0c:	20011ffc 	.word	0x20011ffc

0801db10 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801db10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db12:	4606      	mov	r6, r0
 801db14:	4608      	mov	r0, r1
 801db16:	460f      	mov	r7, r1
 801db18:	f7fa fe25 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801db1c:	b9e8      	cbnz	r0, 801db5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801db1e:	f9b7 5000 	ldrsh.w	r5, [r7]
 801db22:	f9b6 4000 	ldrsh.w	r4, [r6]
 801db26:	42a5      	cmp	r5, r4
 801db28:	db17      	blt.n	801db5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801db2a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801db2e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801db32:	429a      	cmp	r2, r3
 801db34:	db11      	blt.n	801db5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801db36:	88b9      	ldrh	r1, [r7, #4]
 801db38:	440d      	add	r5, r1
 801db3a:	88b1      	ldrh	r1, [r6, #4]
 801db3c:	b22d      	sxth	r5, r5
 801db3e:	440c      	add	r4, r1
 801db40:	b224      	sxth	r4, r4
 801db42:	42a5      	cmp	r5, r4
 801db44:	dc09      	bgt.n	801db5a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801db46:	88f8      	ldrh	r0, [r7, #6]
 801db48:	4410      	add	r0, r2
 801db4a:	88f2      	ldrh	r2, [r6, #6]
 801db4c:	b200      	sxth	r0, r0
 801db4e:	4413      	add	r3, r2
 801db50:	b21b      	sxth	r3, r3
 801db52:	4298      	cmp	r0, r3
 801db54:	bfcc      	ite	gt
 801db56:	2000      	movgt	r0, #0
 801db58:	2001      	movle	r0, #1
 801db5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801db5c <_ZN8touchgfx11Application11getInstanceEv>:
 801db5c:	4b01      	ldr	r3, [pc, #4]	@ (801db64 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801db5e:	6818      	ldr	r0, [r3, #0]
 801db60:	4770      	bx	lr
 801db62:	bf00      	nop
 801db64:	20012050 	.word	0x20012050

0801db68 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801db68:	2300      	movs	r3, #0
 801db6a:	b510      	push	{r4, lr}
 801db6c:	4604      	mov	r4, r0
 801db6e:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801db72:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801db76:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801db7a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801db7e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801db82:	429a      	cmp	r2, r3
 801db84:	d90e      	bls.n	801dba4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801db86:	18e2      	adds	r2, r4, r3
 801db88:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801db8c:	b122      	cbz	r2, 801db98 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801db8e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801db92:	6803      	ldr	r3, [r0, #0]
 801db94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801db96:	4798      	blx	r3
 801db98:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801db9c:	3301      	adds	r3, #1
 801db9e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801dba2:	e7ea      	b.n	801db7a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801dba4:	bd10      	pop	{r4, pc}

0801dba6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801dba6:	2300      	movs	r3, #0
 801dba8:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801dbac:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801dbb0:	30a4      	adds	r0, #164	@ 0xa4
 801dbb2:	f802 3b01 	strb.w	r3, [r2], #1
 801dbb6:	4282      	cmp	r2, r0
 801dbb8:	d1fb      	bne.n	801dbb2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801dbba:	4770      	bx	lr

0801dbbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801dbbc:	b570      	push	{r4, r5, r6, lr}
 801dbbe:	4c0b      	ldr	r4, [pc, #44]	@ (801dbec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801dbc0:	4605      	mov	r5, r0
 801dbc2:	6820      	ldr	r0, [r4, #0]
 801dbc4:	460e      	mov	r6, r1
 801dbc6:	b110      	cbz	r0, 801dbce <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801dbc8:	6803      	ldr	r3, [r0, #0]
 801dbca:	695b      	ldr	r3, [r3, #20]
 801dbcc:	4798      	blx	r3
 801dbce:	1d28      	adds	r0, r5, #4
 801dbd0:	f7ff ffe9 	bl	801dba6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801dbd4:	6026      	str	r6, [r4, #0]
 801dbd6:	6833      	ldr	r3, [r6, #0]
 801dbd8:	4630      	mov	r0, r6
 801dbda:	68db      	ldr	r3, [r3, #12]
 801dbdc:	4798      	blx	r3
 801dbde:	682b      	ldr	r3, [r5, #0]
 801dbe0:	4628      	mov	r0, r5
 801dbe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dbe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dbe8:	4718      	bx	r3
 801dbea:	bf00      	nop
 801dbec:	20012040 	.word	0x20012040

0801dbf0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbf4:	461a      	mov	r2, r3
 801dbf6:	461c      	mov	r4, r3
 801dbf8:	461d      	mov	r5, r3
 801dbfa:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801dbfe:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801dc02:	459c      	cmp	ip, r3
 801dc04:	dd1a      	ble.n	801dc3c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801dc06:	18c6      	adds	r6, r0, r3
 801dc08:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801dc0c:	b16e      	cbz	r6, 801dc2a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801dc0e:	429a      	cmp	r2, r3
 801dc10:	d008      	beq.n	801dc24 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801dc12:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801dc16:	fa1f fe82 	uxth.w	lr, r2
 801dc1a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801dc1e:	1887      	adds	r7, r0, r2
 801dc20:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801dc24:	3201      	adds	r2, #1
 801dc26:	3301      	adds	r3, #1
 801dc28:	e7eb      	b.n	801dc02 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801dc2a:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801dc2e:	4299      	cmp	r1, r3
 801dc30:	bfa8      	it	ge
 801dc32:	3501      	addge	r5, #1
 801dc34:	429e      	cmp	r6, r3
 801dc36:	bfc8      	it	gt
 801dc38:	3401      	addgt	r4, #1
 801dc3a:	e7f4      	b.n	801dc26 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801dc3c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801dc40:	1b49      	subs	r1, r1, r5
 801dc42:	1b1b      	subs	r3, r3, r4
 801dc44:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801dc48:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801dc4c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801dc50:	4293      	cmp	r3, r2
 801dc52:	dd03      	ble.n	801dc5c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801dc54:	3b01      	subs	r3, #1
 801dc56:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801dc5a:	e7f7      	b.n	801dc4c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801dc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801dc60 <_ZN8touchgfx11Application15handleTickEventEv>:
 801dc60:	b570      	push	{r4, r5, r6, lr}
 801dc62:	4d16      	ldr	r5, [pc, #88]	@ (801dcbc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801dc64:	4604      	mov	r4, r0
 801dc66:	6828      	ldr	r0, [r5, #0]
 801dc68:	b140      	cbz	r0, 801dc7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801dc6a:	7a03      	ldrb	r3, [r0, #8]
 801dc6c:	b933      	cbnz	r3, 801dc7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801dc6e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801dc72:	6803      	ldr	r3, [r0, #0]
 801dc74:	689b      	ldr	r3, [r3, #8]
 801dc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc7a:	4718      	bx	r3
 801dc7c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801dc80:	4e0f      	ldr	r6, [pc, #60]	@ (801dcc0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801dc82:	b973      	cbnz	r3, 801dca2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801dc84:	b168      	cbz	r0, 801dca2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801dc86:	7a03      	ldrb	r3, [r0, #8]
 801dc88:	b15b      	cbz	r3, 801dca2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801dc8a:	6830      	ldr	r0, [r6, #0]
 801dc8c:	b110      	cbz	r0, 801dc94 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801dc8e:	6803      	ldr	r3, [r0, #0]
 801dc90:	691b      	ldr	r3, [r3, #16]
 801dc92:	4798      	blx	r3
 801dc94:	6828      	ldr	r0, [r5, #0]
 801dc96:	6803      	ldr	r3, [r0, #0]
 801dc98:	68db      	ldr	r3, [r3, #12]
 801dc9a:	4798      	blx	r3
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801dca2:	3404      	adds	r4, #4
 801dca4:	4620      	mov	r0, r4
 801dca6:	f7ff ff5f 	bl	801db68 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801dcaa:	4620      	mov	r0, r4
 801dcac:	f7ff ffa0 	bl	801dbf0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801dcb0:	6830      	ldr	r0, [r6, #0]
 801dcb2:	b110      	cbz	r0, 801dcba <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801dcb4:	6803      	ldr	r3, [r0, #0]
 801dcb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dcb8:	e7dd      	b.n	801dc76 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801dcba:	bd70      	pop	{r4, r5, r6, pc}
 801dcbc:	20012044 	.word	0x20012044
 801dcc0:	20012040 	.word	0x20012040

0801dcc4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	2200      	movs	r2, #0
 801dcc8:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801dccc:	801a      	strh	r2, [r3, #0]
 801dcce:	805a      	strh	r2, [r3, #2]
 801dcd0:	809a      	strh	r2, [r3, #4]
 801dcd2:	80da      	strh	r2, [r3, #6]
 801dcd4:	3308      	adds	r3, #8
 801dcd6:	428b      	cmp	r3, r1
 801dcd8:	d1f8      	bne.n	801dccc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801dcda:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801dcde:	4770      	bx	lr

0801dce0 <_ZN8touchgfx11ApplicationC1Ev>:
 801dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dce2:	4606      	mov	r6, r0
 801dce4:	4604      	mov	r4, r0
 801dce6:	2500      	movs	r5, #0
 801dce8:	4b1b      	ldr	r3, [pc, #108]	@ (801dd58 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801dcea:	22a8      	movs	r2, #168	@ 0xa8
 801dcec:	f846 3b04 	str.w	r3, [r6], #4
 801dcf0:	2100      	movs	r1, #0
 801dcf2:	4630      	mov	r0, r6
 801dcf4:	f012 f857 	bl	802fda6 <memset>
 801dcf8:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801dcfc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801dd00:	f7ff ffe0 	bl	801dcc4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801dd04:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801dd08:	f7ff ffdc 	bl	801dcc4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801dd0c:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801dd10:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801dd14:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801dd18:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801dd1c:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801dd20:	490e      	ldr	r1, [pc, #56]	@ (801dd5c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801dd22:	480f      	ldr	r0, [pc, #60]	@ (801dd60 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801dd24:	f011 f9ee 	bl	802f104 <CRC_Lock>
 801dd28:	4f0e      	ldr	r7, [pc, #56]	@ (801dd64 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801dd2a:	4b0f      	ldr	r3, [pc, #60]	@ (801dd68 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801dd2c:	b158      	cbz	r0, 801dd46 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801dd2e:	801d      	strh	r5, [r3, #0]
 801dd30:	2300      	movs	r3, #0
 801dd32:	4a0e      	ldr	r2, [pc, #56]	@ (801dd6c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801dd34:	4630      	mov	r0, r6
 801dd36:	6013      	str	r3, [r2, #0]
 801dd38:	4a0d      	ldr	r2, [pc, #52]	@ (801dd70 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801dd3a:	603b      	str	r3, [r7, #0]
 801dd3c:	6013      	str	r3, [r2, #0]
 801dd3e:	f7ff ff32 	bl	801dba6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801dd42:	4620      	mov	r0, r4
 801dd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801dd4a:	2002      	movs	r0, #2
 801dd4c:	801a      	strh	r2, [r3, #0]
 801dd4e:	6038      	str	r0, [r7, #0]
 801dd50:	f001 fb20 	bl	801f394 <_ZN8touchgfx6Screen4drawEv>
 801dd54:	e7ec      	b.n	801dd30 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801dd56:	bf00      	nop
 801dd58:	08033768 	.word	0x08033768
 801dd5c:	b5e8b5cd 	.word	0xb5e8b5cd
 801dd60:	f407a5c2 	.word	0xf407a5c2
 801dd64:	20012040 	.word	0x20012040
 801dd68:	20000024 	.word	0x20000024
 801dd6c:	20012050 	.word	0x20012050
 801dd70:	20012044 	.word	0x20012044

0801dd74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801dd74:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801dd78:	b510      	push	{r4, lr}
 801dd7a:	3b01      	subs	r3, #1
 801dd7c:	b29b      	uxth	r3, r3
 801dd7e:	428b      	cmp	r3, r1
 801dd80:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801dd84:	d908      	bls.n	801dd98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801dd86:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801dd8a:	681a      	ldr	r2, [r3, #0]
 801dd8c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801dd90:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801dd94:	685a      	ldr	r2, [r3, #4]
 801dd96:	6062      	str	r2, [r4, #4]
 801dd98:	bd10      	pop	{r4, pc}
	...

0801dd9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dda0:	4b8f      	ldr	r3, [pc, #572]	@ (801dfe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801dda2:	b08f      	sub	sp, #60	@ 0x3c
 801dda4:	ac0a      	add	r4, sp, #40	@ 0x28
 801dda6:	e884 0006 	stmia.w	r4, {r1, r2}
 801ddaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ddae:	4b8d      	ldr	r3, [pc, #564]	@ (801dfe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801ddb0:	4683      	mov	fp, r0
 801ddb2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ddb6:	4620      	mov	r0, r4
 801ddb8:	f7ff fe5a 	bl	801da70 <_ZN8touchgfx4Rect10restrictToEss>
 801ddbc:	4620      	mov	r0, r4
 801ddbe:	f7fa fcd2 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ddc2:	2800      	cmp	r0, #0
 801ddc4:	d16a      	bne.n	801de9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ddc6:	9403      	str	r4, [sp, #12]
 801ddc8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801ddcc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801ddd0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801ddd4:	35a4      	adds	r5, #164	@ 0xa4
 801ddd6:	9301      	str	r3, [sp, #4]
 801ddd8:	b15c      	cbz	r4, 801ddf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ddda:	4629      	mov	r1, r5
 801dddc:	9803      	ldr	r0, [sp, #12]
 801ddde:	f7ff fe97 	bl	801db10 <_ZNK8touchgfx4Rect8includesERKS0_>
 801dde2:	3c01      	subs	r4, #1
 801dde4:	b118      	cbz	r0, 801ddee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801dde6:	b2a1      	uxth	r1, r4
 801dde8:	9801      	ldr	r0, [sp, #4]
 801ddea:	f7ff ffc3 	bl	801dd74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ddee:	3d08      	subs	r5, #8
 801ddf0:	e7f2      	b.n	801ddd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801ddf2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801ddf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ddfa:	9302      	str	r3, [sp, #8]
 801ddfc:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801de00:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801de04:	f8cd a010 	str.w	sl, [sp, #16]
 801de08:	9306      	str	r3, [sp, #24]
 801de0a:	445c      	add	r4, fp
 801de0c:	2500      	movs	r5, #0
 801de0e:	4626      	mov	r6, r4
 801de10:	462f      	mov	r7, r5
 801de12:	f8cd a014 	str.w	sl, [sp, #20]
 801de16:	9b05      	ldr	r3, [sp, #20]
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d073      	beq.n	801df04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801de1c:	9903      	ldr	r1, [sp, #12]
 801de1e:	4630      	mov	r0, r6
 801de20:	f7ff fe04 	bl	801da2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801de24:	b350      	cbz	r0, 801de7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801de26:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801de2a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801de2e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801de32:	45e6      	cmp	lr, ip
 801de34:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801de38:	db33      	blt.n	801dea2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801de3a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801de3e:	88b3      	ldrh	r3, [r6, #4]
 801de40:	4472      	add	r2, lr
 801de42:	4463      	add	r3, ip
 801de44:	b212      	sxth	r2, r2
 801de46:	b21b      	sxth	r3, r3
 801de48:	429a      	cmp	r2, r3
 801de4a:	dc2a      	bgt.n	801dea2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801de4c:	88f3      	ldrh	r3, [r6, #6]
 801de4e:	fa1f f289 	uxth.w	r2, r9
 801de52:	4413      	add	r3, r2
 801de54:	b29b      	uxth	r3, r3
 801de56:	45c8      	cmp	r8, r9
 801de58:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801de5c:	fa1f fc88 	uxth.w	ip, r8
 801de60:	fa0f fe83 	sxth.w	lr, r3
 801de64:	db0f      	blt.n	801de86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801de66:	eba3 030c 	sub.w	r3, r3, ip
 801de6a:	1ac9      	subs	r1, r1, r3
 801de6c:	b209      	sxth	r1, r1
 801de6e:	2900      	cmp	r1, #0
 801de70:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801de74:	dd12      	ble.n	801de9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801de76:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801de7a:	4605      	mov	r5, r0
 801de7c:	9b05      	ldr	r3, [sp, #20]
 801de7e:	3e08      	subs	r6, #8
 801de80:	3b01      	subs	r3, #1
 801de82:	9305      	str	r3, [sp, #20]
 801de84:	e7c7      	b.n	801de16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801de86:	4461      	add	r1, ip
 801de88:	b209      	sxth	r1, r1
 801de8a:	4571      	cmp	r1, lr
 801de8c:	dc38      	bgt.n	801df00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801de8e:	eba2 020c 	sub.w	r2, r2, ip
 801de92:	b212      	sxth	r2, r2
 801de94:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801de98:	2a00      	cmp	r2, #0
 801de9a:	dcee      	bgt.n	801de7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801de9c:	b00f      	add	sp, #60	@ 0x3c
 801de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dea2:	45c8      	cmp	r8, r9
 801dea4:	db2c      	blt.n	801df00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801dea6:	88f3      	ldrh	r3, [r6, #6]
 801dea8:	4499      	add	r9, r3
 801deaa:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801deae:	fa0f f989 	sxth.w	r9, r9
 801deb2:	4498      	add	r8, r3
 801deb4:	fa0f f888 	sxth.w	r8, r8
 801deb8:	45c1      	cmp	r9, r8
 801deba:	db21      	blt.n	801df00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801debc:	88b3      	ldrh	r3, [r6, #4]
 801debe:	fa1f f28c 	uxth.w	r2, ip
 801dec2:	4413      	add	r3, r2
 801dec4:	b29b      	uxth	r3, r3
 801dec6:	45e6      	cmp	lr, ip
 801dec8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801decc:	fa1f f88e 	uxth.w	r8, lr
 801ded0:	fa0f f983 	sxth.w	r9, r3
 801ded4:	db0a      	blt.n	801deec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801ded6:	eba3 0308 	sub.w	r3, r3, r8
 801deda:	1ac9      	subs	r1, r1, r3
 801dedc:	b209      	sxth	r1, r1
 801dede:	2900      	cmp	r1, #0
 801dee0:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801dee4:	ddda      	ble.n	801de9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801dee6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801deea:	e7c6      	b.n	801de7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801deec:	4441      	add	r1, r8
 801deee:	b209      	sxth	r1, r1
 801def0:	4549      	cmp	r1, r9
 801def2:	dc05      	bgt.n	801df00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801def4:	eba2 0208 	sub.w	r2, r2, r8
 801def8:	b212      	sxth	r2, r2
 801defa:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801defe:	e7cb      	b.n	801de98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801df00:	4607      	mov	r7, r0
 801df02:	e7bb      	b.n	801de7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801df04:	2d00      	cmp	r5, #0
 801df06:	d181      	bne.n	801de0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801df08:	2f00      	cmp	r7, #0
 801df0a:	f000 81de 	beq.w	801e2ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801df0e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801df12:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801df16:	b2b3      	uxth	r3, r6
 801df18:	9305      	str	r3, [sp, #20]
 801df1a:	9a05      	ldr	r2, [sp, #20]
 801df1c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801df20:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801df24:	4413      	add	r3, r2
 801df26:	b2ba      	uxth	r2, r7
 801df28:	4492      	add	sl, r2
 801df2a:	b29b      	uxth	r3, r3
 801df2c:	fa1f fa8a 	uxth.w	sl, sl
 801df30:	fa0f f883 	sxth.w	r8, r3
 801df34:	fa0f f98a 	sxth.w	r9, sl
 801df38:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801df3c:	9b04      	ldr	r3, [sp, #16]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d052      	beq.n	801dfe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801df42:	9903      	ldr	r1, [sp, #12]
 801df44:	4620      	mov	r0, r4
 801df46:	f7ff fd71 	bl	801da2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801df4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801df4e:	b1c0      	cbz	r0, 801df82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801df50:	f9b4 e000 	ldrsh.w	lr, [r4]
 801df54:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801df58:	4576      	cmp	r6, lr
 801df5a:	dc22      	bgt.n	801dfa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801df5c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801df60:	44f4      	add	ip, lr
 801df62:	fa0f fc8c 	sxth.w	ip, ip
 801df66:	45e0      	cmp	r8, ip
 801df68:	db1b      	blt.n	801dfa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801df6a:	428f      	cmp	r7, r1
 801df6c:	fa1f fc81 	uxth.w	ip, r1
 801df70:	88e1      	ldrh	r1, [r4, #6]
 801df72:	dc0d      	bgt.n	801df90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801df74:	ebaa 0c0c 	sub.w	ip, sl, ip
 801df78:	eba1 010c 	sub.w	r1, r1, ip
 801df7c:	f8a4 9002 	strh.w	r9, [r4, #2]
 801df80:	80e1      	strh	r1, [r4, #6]
 801df82:	4628      	mov	r0, r5
 801df84:	9904      	ldr	r1, [sp, #16]
 801df86:	3c08      	subs	r4, #8
 801df88:	3901      	subs	r1, #1
 801df8a:	9104      	str	r1, [sp, #16]
 801df8c:	4605      	mov	r5, r0
 801df8e:	e7d3      	b.n	801df38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801df90:	4461      	add	r1, ip
 801df92:	b209      	sxth	r1, r1
 801df94:	4549      	cmp	r1, r9
 801df96:	dcf5      	bgt.n	801df84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801df98:	eba2 0c0c 	sub.w	ip, r2, ip
 801df9c:	f8a4 c006 	strh.w	ip, [r4, #6]
 801dfa0:	e7ef      	b.n	801df82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801dfa2:	428f      	cmp	r7, r1
 801dfa4:	dcee      	bgt.n	801df84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801dfa6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801dfaa:	4461      	add	r1, ip
 801dfac:	b209      	sxth	r1, r1
 801dfae:	4589      	cmp	r9, r1
 801dfb0:	dbe8      	blt.n	801df84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801dfb2:	4576      	cmp	r6, lr
 801dfb4:	fa1f fc8e 	uxth.w	ip, lr
 801dfb8:	88a1      	ldrh	r1, [r4, #4]
 801dfba:	dc07      	bgt.n	801dfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801dfbc:	eba3 0c0c 	sub.w	ip, r3, ip
 801dfc0:	eba1 010c 	sub.w	r1, r1, ip
 801dfc4:	f8a4 8000 	strh.w	r8, [r4]
 801dfc8:	80a1      	strh	r1, [r4, #4]
 801dfca:	e7da      	b.n	801df82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801dfcc:	4461      	add	r1, ip
 801dfce:	b209      	sxth	r1, r1
 801dfd0:	4588      	cmp	r8, r1
 801dfd2:	dbd7      	blt.n	801df84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801dfd4:	9905      	ldr	r1, [sp, #20]
 801dfd6:	eba1 0c0c 	sub.w	ip, r1, ip
 801dfda:	f8a4 c004 	strh.w	ip, [r4, #4]
 801dfde:	e7d0      	b.n	801df82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801dfe0:	20011ff2 	.word	0x20011ff2
 801dfe4:	20011ff0 	.word	0x20011ff0
 801dfe8:	2d00      	cmp	r5, #0
 801dfea:	f000 816e 	beq.w	801e2ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801dfee:	9b06      	ldr	r3, [sp, #24]
 801dff0:	445b      	add	r3, fp
 801dff2:	461c      	mov	r4, r3
 801dff4:	9b02      	ldr	r3, [sp, #8]
 801dff6:	3301      	adds	r3, #1
 801dff8:	f000 8167 	beq.w	801e2ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801dffc:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801e000:	4629      	mov	r1, r5
 801e002:	9803      	ldr	r0, [sp, #12]
 801e004:	f7ff fd84 	bl	801db10 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e008:	b120      	cbz	r0, 801e014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801e00a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e00e:	9801      	ldr	r0, [sp, #4]
 801e010:	f7ff feb0 	bl	801dd74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e014:	9903      	ldr	r1, [sp, #12]
 801e016:	4628      	mov	r0, r5
 801e018:	f7ff fd08 	bl	801da2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e01c:	2800      	cmp	r0, #0
 801e01e:	f000 809c 	beq.w	801e15a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801e022:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801e026:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801e02a:	fa1f f189 	uxth.w	r1, r9
 801e02e:	eb01 0c03 	add.w	ip, r1, r3
 801e032:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801e036:	fa1f fa8c 	uxth.w	sl, ip
 801e03a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801e03e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e040:	b283      	uxth	r3, r0
 801e042:	eb03 050c 	add.w	r5, r3, ip
 801e046:	b2ad      	uxth	r5, r5
 801e048:	9505      	str	r5, [sp, #20]
 801e04a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801e04e:	4548      	cmp	r0, r9
 801e050:	9504      	str	r5, [sp, #16]
 801e052:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801e056:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801e05a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801e05e:	f340 8099 	ble.w	801e194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801e062:	1a5b      	subs	r3, r3, r1
 801e064:	b29b      	uxth	r3, r3
 801e066:	4596      	cmp	lr, r2
 801e068:	fa0f f08a 	sxth.w	r0, sl
 801e06c:	b21e      	sxth	r6, r3
 801e06e:	dd2e      	ble.n	801e0ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801e070:	9f02      	ldr	r7, [sp, #8]
 801e072:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801e076:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801e07a:	9f04      	ldr	r7, [sp, #16]
 801e07c:	fa1f fe8e 	uxth.w	lr, lr
 801e080:	1a3f      	subs	r7, r7, r0
 801e082:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801e086:	b292      	uxth	r2, r2
 801e088:	ebae 0102 	sub.w	r1, lr, r2
 801e08c:	44a6      	add	lr, r4
 801e08e:	4402      	add	r2, r0
 801e090:	b289      	uxth	r1, r1
 801e092:	fa0f fe8e 	sxth.w	lr, lr
 801e096:	b212      	sxth	r2, r2
 801e098:	b20d      	sxth	r5, r1
 801e09a:	ebae 0202 	sub.w	r2, lr, r2
 801e09e:	436f      	muls	r7, r5
 801e0a0:	4372      	muls	r2, r6
 801e0a2:	4297      	cmp	r7, r2
 801e0a4:	db09      	blt.n	801e0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801e0a6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801e0aa:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801e0ae:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801e0b2:	449c      	add	ip, r3
 801e0b4:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801e0b8:	e686      	b.n	801ddc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e0ba:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801e0be:	4421      	add	r1, r4
 801e0c0:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801e0c4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801e0c8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801e0cc:	e67c      	b.n	801ddc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e0ce:	9f04      	ldr	r7, [sp, #16]
 801e0d0:	42b8      	cmp	r0, r7
 801e0d2:	da27      	bge.n	801e124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801e0d4:	9902      	ldr	r1, [sp, #8]
 801e0d6:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801e0da:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801e0de:	eb05 010e 	add.w	r1, r5, lr
 801e0e2:	fa1f f881 	uxth.w	r8, r1
 801e0e6:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801e0ea:	fa0f f988 	sxth.w	r9, r8
 801e0ee:	4411      	add	r1, r2
 801e0f0:	eba1 0108 	sub.w	r1, r1, r8
 801e0f4:	b289      	uxth	r1, r1
 801e0f6:	fa0f f881 	sxth.w	r8, r1
 801e0fa:	eba2 020e 	sub.w	r2, r2, lr
 801e0fe:	1a3f      	subs	r7, r7, r0
 801e100:	4372      	muls	r2, r6
 801e102:	fb08 f707 	mul.w	r7, r8, r7
 801e106:	42ba      	cmp	r2, r7
 801e108:	dc06      	bgt.n	801e118 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801e10a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801e10e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801e112:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801e116:	e7ca      	b.n	801e0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801e118:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801e11c:	4429      	add	r1, r5
 801e11e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801e122:	e651      	b.n	801ddc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e124:	9805      	ldr	r0, [sp, #20]
 801e126:	2d06      	cmp	r5, #6
 801e128:	ebaa 0000 	sub.w	r0, sl, r0
 801e12c:	b280      	uxth	r0, r0
 801e12e:	fa0f fe80 	sxth.w	lr, r0
 801e132:	d817      	bhi.n	801e164 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801e134:	9b04      	ldr	r3, [sp, #16]
 801e136:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801e13a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801e13e:	1c6b      	adds	r3, r5, #1
 801e140:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801e144:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801e148:	9b01      	ldr	r3, [sp, #4]
 801e14a:	9801      	ldr	r0, [sp, #4]
 801e14c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e150:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801e154:	805a      	strh	r2, [r3, #2]
 801e156:	809e      	strh	r6, [r3, #4]
 801e158:	80d9      	strh	r1, [r3, #6]
 801e15a:	9b02      	ldr	r3, [sp, #8]
 801e15c:	3c08      	subs	r4, #8
 801e15e:	3b01      	subs	r3, #1
 801e160:	9302      	str	r3, [sp, #8]
 801e162:	e747      	b.n	801dff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801e164:	9a02      	ldr	r2, [sp, #8]
 801e166:	45b6      	cmp	lr, r6
 801e168:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e16c:	db0d      	blt.n	801e18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801e16e:	449c      	add	ip, r3
 801e170:	fa1f fc8c 	uxth.w	ip, ip
 801e174:	445a      	add	r2, fp
 801e176:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801e17a:	448c      	add	ip, r1
 801e17c:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801e180:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801e184:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801e188:	e61e      	b.n	801ddc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e18a:	445a      	add	r2, fp
 801e18c:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801e190:	4484      	add	ip, r0
 801e192:	e78f      	b.n	801e0b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e194:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801e198:	fa1f f18e 	uxth.w	r1, lr
 801e19c:	eb01 0806 	add.w	r8, r1, r6
 801e1a0:	b293      	uxth	r3, r2
 801e1a2:	fa1f f888 	uxth.w	r8, r8
 801e1a6:	9306      	str	r3, [sp, #24]
 801e1a8:	fa0f f388 	sxth.w	r3, r8
 801e1ac:	9307      	str	r3, [sp, #28]
 801e1ae:	9f06      	ldr	r7, [sp, #24]
 801e1b0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801e1b4:	4596      	cmp	lr, r2
 801e1b6:	443b      	add	r3, r7
 801e1b8:	b29b      	uxth	r3, r3
 801e1ba:	9308      	str	r3, [sp, #32]
 801e1bc:	da24      	bge.n	801e208 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801e1be:	9905      	ldr	r1, [sp, #20]
 801e1c0:	eba3 0308 	sub.w	r3, r3, r8
 801e1c4:	ebaa 0401 	sub.w	r4, sl, r1
 801e1c8:	b2a4      	uxth	r4, r4
 801e1ca:	b29b      	uxth	r3, r3
 801e1cc:	b225      	sxth	r5, r4
 801e1ce:	b219      	sxth	r1, r3
 801e1d0:	eba2 020e 	sub.w	r2, r2, lr
 801e1d4:	eba9 0000 	sub.w	r0, r9, r0
 801e1d8:	436a      	muls	r2, r5
 801e1da:	4348      	muls	r0, r1
 801e1dc:	4282      	cmp	r2, r0
 801e1de:	9a02      	ldr	r2, [sp, #8]
 801e1e0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e1e4:	445a      	add	r2, fp
 801e1e6:	dc06      	bgt.n	801e1f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801e1e8:	9b07      	ldr	r3, [sp, #28]
 801e1ea:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801e1ee:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801e1f2:	44a4      	add	ip, r4
 801e1f4:	e75e      	b.n	801e0b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e1f6:	9904      	ldr	r1, [sp, #16]
 801e1f8:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801e1fc:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801e200:	4433      	add	r3, r6
 801e202:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801e206:	e5df      	b.n	801ddc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e208:	9f06      	ldr	r7, [sp, #24]
 801e20a:	9b04      	ldr	r3, [sp, #16]
 801e20c:	1bc9      	subs	r1, r1, r7
 801e20e:	fa0f f78a 	sxth.w	r7, sl
 801e212:	b289      	uxth	r1, r1
 801e214:	429f      	cmp	r7, r3
 801e216:	fa0f fe81 	sxth.w	lr, r1
 801e21a:	dd24      	ble.n	801e266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 801e21c:	9a05      	ldr	r2, [sp, #20]
 801e21e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e222:	ebaa 0202 	sub.w	r2, sl, r2
 801e226:	9d07      	ldr	r5, [sp, #28]
 801e228:	b292      	uxth	r2, r2
 801e22a:	eba5 0a03 	sub.w	sl, r5, r3
 801e22e:	b214      	sxth	r4, r2
 801e230:	eba9 0000 	sub.w	r0, r9, r0
 801e234:	fb0e f000 	mul.w	r0, lr, r0
 801e238:	fb04 fa0a 	mul.w	sl, r4, sl
 801e23c:	9b02      	ldr	r3, [sp, #8]
 801e23e:	4550      	cmp	r0, sl
 801e240:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801e244:	445b      	add	r3, fp
 801e246:	db03      	blt.n	801e250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 801e248:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801e24c:	4494      	add	ip, r2
 801e24e:	e731      	b.n	801e0b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801e250:	9a04      	ldr	r2, [sp, #16]
 801e252:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801e256:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801e25a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801e25e:	4431      	add	r1, r6
 801e260:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801e264:	e75b      	b.n	801e11e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801e266:	9b08      	ldr	r3, [sp, #32]
 801e268:	2d06      	cmp	r5, #6
 801e26a:	eba3 0308 	sub.w	r3, r3, r8
 801e26e:	b29b      	uxth	r3, r3
 801e270:	b218      	sxth	r0, r3
 801e272:	d813      	bhi.n	801e29c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 801e274:	9b07      	ldr	r3, [sp, #28]
 801e276:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801e27a:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801e27e:	1c6b      	adds	r3, r5, #1
 801e280:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801e284:	9b01      	ldr	r3, [sp, #4]
 801e286:	9901      	ldr	r1, [sp, #4]
 801e288:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e28c:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801e290:	805a      	strh	r2, [r3, #2]
 801e292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e294:	f8a3 e006 	strh.w	lr, [r3, #6]
 801e298:	809a      	strh	r2, [r3, #4]
 801e29a:	e75e      	b.n	801e15a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801e29c:	9c02      	ldr	r4, [sp, #8]
 801e29e:	4570      	cmp	r0, lr
 801e2a0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801e2a4:	db0d      	blt.n	801e2c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 801e2a6:	4431      	add	r1, r6
 801e2a8:	9b06      	ldr	r3, [sp, #24]
 801e2aa:	b289      	uxth	r1, r1
 801e2ac:	445c      	add	r4, fp
 801e2ae:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801e2b2:	4419      	add	r1, r3
 801e2b4:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801e2b8:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801e2bc:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801e2c0:	e582      	b.n	801ddc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e2c2:	445c      	add	r4, fp
 801e2c4:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801e2c8:	e79a      	b.n	801e200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801e2ca:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801e2ce:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801e2d2:	1e65      	subs	r5, r4, #1
 801e2d4:	b2ad      	uxth	r5, r5
 801e2d6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801e2da:	42b5      	cmp	r5, r6
 801e2dc:	d044      	beq.n	801e368 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5cc>
 801e2de:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801e2e2:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801e2e6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801e2ea:	4282      	cmp	r2, r0
 801e2ec:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801e2f0:	d11f      	bne.n	801e332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801e2f2:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801e2f6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801e2fa:	459c      	cmp	ip, r3
 801e2fc:	d119      	bne.n	801e332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801e2fe:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801e302:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801e306:	19d8      	adds	r0, r3, r7
 801e308:	b200      	sxth	r0, r0
 801e30a:	4288      	cmp	r0, r1
 801e30c:	d109      	bne.n	801e322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801e30e:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801e312:	4413      	add	r3, r2
 801e314:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801e318:	4629      	mov	r1, r5
 801e31a:	9801      	ldr	r0, [sp, #4]
 801e31c:	f7ff fd2a 	bl	801dd74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e320:	e003      	b.n	801e32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801e322:	4411      	add	r1, r2
 801e324:	b209      	sxth	r1, r1
 801e326:	42b9      	cmp	r1, r7
 801e328:	d0f3      	beq.n	801e312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x576>
 801e32a:	3d01      	subs	r5, #1
 801e32c:	b2ad      	uxth	r5, r5
 801e32e:	3c08      	subs	r4, #8
 801e330:	e7d3      	b.n	801e2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 801e332:	42b9      	cmp	r1, r7
 801e334:	d1f9      	bne.n	801e32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801e336:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801e33a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801e33e:	4299      	cmp	r1, r3
 801e340:	d1f3      	bne.n	801e32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801e342:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801e346:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801e34a:	181f      	adds	r7, r3, r0
 801e34c:	b23f      	sxth	r7, r7
 801e34e:	42ba      	cmp	r2, r7
 801e350:	d105      	bne.n	801e35e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c2>
 801e352:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801e356:	440b      	add	r3, r1
 801e358:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801e35c:	e7dc      	b.n	801e318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 801e35e:	440a      	add	r2, r1
 801e360:	b212      	sxth	r2, r2
 801e362:	4290      	cmp	r0, r2
 801e364:	d1e1      	bne.n	801e32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801e366:	e7f6      	b.n	801e356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ba>
 801e368:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801e36c:	2e07      	cmp	r6, #7
 801e36e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801e372:	d812      	bhi.n	801e39a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801e374:	1c75      	adds	r5, r6, #1
 801e376:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801e37a:	9d01      	ldr	r5, [sp, #4]
 801e37c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801e380:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801e384:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801e388:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801e38c:	442c      	add	r4, r5
 801e38e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801e392:	8061      	strh	r1, [r4, #2]
 801e394:	80a2      	strh	r2, [r4, #4]
 801e396:	80e3      	strh	r3, [r4, #6]
 801e398:	e580      	b.n	801de9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e39a:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801e39e:	f04f 37ff 	mov.w	r7, #4294967295
 801e3a2:	2500      	movs	r5, #0
 801e3a4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801e3a8:	3e01      	subs	r6, #1
 801e3aa:	445c      	add	r4, fp
 801e3ac:	9305      	str	r3, [sp, #20]
 801e3ae:	1e72      	subs	r2, r6, #1
 801e3b0:	4691      	mov	r9, r2
 801e3b2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801e3b6:	9302      	str	r3, [sp, #8]
 801e3b8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801e3bc:	9304      	str	r3, [sp, #16]
 801e3be:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801e3c2:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e3c6:	bf16      	itet	ne
 801e3c8:	9905      	ldrne	r1, [sp, #20]
 801e3ca:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801e3ce:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801e3d2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801e3d6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801e3da:	6818      	ldr	r0, [r3, #0]
 801e3dc:	fb18 f801 	smulbb	r8, r8, r1
 801e3e0:	6859      	ldr	r1, [r3, #4]
 801e3e2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801e3e6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e3ea:	4671      	mov	r1, lr
 801e3ec:	a80c      	add	r0, sp, #48	@ 0x30
 801e3ee:	9207      	str	r2, [sp, #28]
 801e3f0:	9306      	str	r3, [sp, #24]
 801e3f2:	f7fb fe95 	bl	801a120 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e3f6:	f04f 0c08 	mov.w	ip, #8
 801e3fa:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801e3fe:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801e402:	9b04      	ldr	r3, [sp, #16]
 801e404:	9a02      	ldr	r2, [sp, #8]
 801e406:	fb10 f001 	smulbb	r0, r0, r1
 801e40a:	fb02 8803 	mla	r8, r2, r3, r8
 801e40e:	eba0 0108 	sub.w	r1, r0, r8
 801e412:	fb90 f0fc 	sdiv	r0, r0, ip
 801e416:	4288      	cmp	r0, r1
 801e418:	dc20      	bgt.n	801e45c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801e41a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e41e:	4551      	cmp	r1, sl
 801e420:	da03      	bge.n	801e42a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 801e422:	b1d9      	cbz	r1, 801e45c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801e424:	468a      	mov	sl, r1
 801e426:	464f      	mov	r7, r9
 801e428:	4635      	mov	r5, r6
 801e42a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e42e:	f119 0f02 	cmn.w	r9, #2
 801e432:	d1c6      	bne.n	801e3c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801e434:	4616      	mov	r6, r2
 801e436:	3201      	adds	r2, #1
 801e438:	f1a4 0408 	sub.w	r4, r4, #8
 801e43c:	d1b7      	bne.n	801e3ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 801e43e:	9b01      	ldr	r3, [sp, #4]
 801e440:	b2ac      	uxth	r4, r5
 801e442:	00ed      	lsls	r5, r5, #3
 801e444:	1958      	adds	r0, r3, r5
 801e446:	1c7b      	adds	r3, r7, #1
 801e448:	d10b      	bne.n	801e462 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 801e44a:	4601      	mov	r1, r0
 801e44c:	9803      	ldr	r0, [sp, #12]
 801e44e:	f7fb fe67 	bl	801a120 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e452:	4621      	mov	r1, r4
 801e454:	9801      	ldr	r0, [sp, #4]
 801e456:	f7ff fc8d 	bl	801dd74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e45a:	e4b5      	b.n	801ddc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e45c:	464f      	mov	r7, r9
 801e45e:	4635      	mov	r5, r6
 801e460:	e7ed      	b.n	801e43e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801e462:	9b01      	ldr	r3, [sp, #4]
 801e464:	00ff      	lsls	r7, r7, #3
 801e466:	19d9      	adds	r1, r3, r7
 801e468:	f7fb fe5a 	bl	801a120 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e46c:	9b03      	ldr	r3, [sp, #12]
 801e46e:	445f      	add	r7, fp
 801e470:	cb03      	ldmia	r3!, {r0, r1}
 801e472:	445d      	add	r5, fp
 801e474:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801e478:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801e47c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801e480:	9b03      	ldr	r3, [sp, #12]
 801e482:	6869      	ldr	r1, [r5, #4]
 801e484:	c303      	stmia	r3!, {r0, r1}
 801e486:	e7e4      	b.n	801e452 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0801e488 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e48c:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801e490:	b09b      	sub	sp, #108	@ 0x6c
 801e492:	4604      	mov	r4, r0
 801e494:	4630      	mov	r0, r6
 801e496:	f7fa f966 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e49a:	4605      	mov	r5, r0
 801e49c:	b948      	cbnz	r0, 801e4b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801e49e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801e4a2:	6823      	ldr	r3, [r4, #0]
 801e4a4:	4620      	mov	r0, r4
 801e4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e4a8:	4798      	blx	r3
 801e4aa:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801e4ae:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801e4b2:	4bc6      	ldr	r3, [pc, #792]	@ (801e7cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d03f      	beq.n	801e53a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801e4ba:	4dc5      	ldr	r5, [pc, #788]	@ (801e7d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801e4bc:	4628      	mov	r0, r5
 801e4be:	f7fa f952 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e4c2:	4606      	mov	r6, r0
 801e4c4:	2800      	cmp	r0, #0
 801e4c6:	d138      	bne.n	801e53a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801e4c8:	4628      	mov	r0, r5
 801e4ca:	f7ff f9e5 	bl	801d898 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801e4ce:	6823      	ldr	r3, [r4, #0]
 801e4d0:	6829      	ldr	r1, [r5, #0]
 801e4d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e4d4:	686a      	ldr	r2, [r5, #4]
 801e4d6:	4620      	mov	r0, r4
 801e4d8:	4798      	blx	r3
 801e4da:	802e      	strh	r6, [r5, #0]
 801e4dc:	806e      	strh	r6, [r5, #2]
 801e4de:	80ae      	strh	r6, [r5, #4]
 801e4e0:	80ee      	strh	r6, [r5, #6]
 801e4e2:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801e4e6:	4dbb      	ldr	r5, [pc, #748]	@ (801e7d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801e4e8:	4640      	mov	r0, r8
 801e4ea:	f7ff fbeb 	bl	801dcc4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e4ee:	882e      	ldrh	r6, [r5, #0]
 801e4f0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801e4f4:	4633      	mov	r3, r6
 801e4f6:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801e4fa:	42bb      	cmp	r3, r7
 801e4fc:	d224      	bcs.n	801e548 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801e4fe:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801e502:	2907      	cmp	r1, #7
 801e504:	d816      	bhi.n	801e534 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801e506:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801e50a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801e50e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801e512:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801e516:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801e51a:	1c4a      	adds	r2, r1, #1
 801e51c:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801e520:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801e524:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801e528:	f8a2 a002 	strh.w	sl, [r2, #2]
 801e52c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801e530:	f8a2 c006 	strh.w	ip, [r2, #6]
 801e534:	3301      	adds	r3, #1
 801e536:	b29b      	uxth	r3, r3
 801e538:	e7df      	b.n	801e4fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801e53a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d1cf      	bne.n	801e4e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801e542:	b01b      	add	sp, #108	@ 0x6c
 801e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e548:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801e54c:	42b3      	cmp	r3, r6
 801e54e:	d90c      	bls.n	801e56a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801e550:	6822      	ldr	r2, [r4, #0]
 801e552:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801e556:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801e558:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801e55c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801e560:	4620      	mov	r0, r4
 801e562:	3601      	adds	r6, #1
 801e564:	47b8      	blx	r7
 801e566:	b2b6      	uxth	r6, r6
 801e568:	e7ee      	b.n	801e548 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801e56a:	4a9b      	ldr	r2, [pc, #620]	@ (801e7d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801e56c:	6813      	ldr	r3, [r2, #0]
 801e56e:	4691      	mov	r9, r2
 801e570:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801e574:	2b01      	cmp	r3, #1
 801e576:	f040 80e2 	bne.w	801e73e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801e57a:	2600      	movs	r6, #0
 801e57c:	8829      	ldrh	r1, [r5, #0]
 801e57e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801e582:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801e586:	33ae      	adds	r3, #174	@ 0xae
 801e588:	428f      	cmp	r7, r1
 801e58a:	f103 0308 	add.w	r3, r3, #8
 801e58e:	dd0a      	ble.n	801e5a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801e590:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801e594:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801e598:	3101      	adds	r1, #1
 801e59a:	4402      	add	r2, r0
 801e59c:	b212      	sxth	r2, r2
 801e59e:	4296      	cmp	r6, r2
 801e5a0:	bfb8      	it	lt
 801e5a2:	4616      	movlt	r6, r2
 801e5a4:	e7f0      	b.n	801e588 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801e5a6:	4b8d      	ldr	r3, [pc, #564]	@ (801e7dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801e5a8:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 801e7d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 801e5ac:	881b      	ldrh	r3, [r3, #0]
 801e5ae:	2b0f      	cmp	r3, #15
 801e5b0:	bf88      	it	hi
 801e5b2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801e5b6:	f04f 0300 	mov.w	r3, #0
 801e5ba:	bf98      	it	ls
 801e5bc:	f04f 0b01 	movls.w	fp, #1
 801e5c0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801e5c4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801e5c8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801e5cc:	4b82      	ldr	r3, [pc, #520]	@ (801e7d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801e5ce:	4438      	add	r0, r7
 801e5d0:	b207      	sxth	r7, r0
 801e5d2:	6818      	ldr	r0, [r3, #0]
 801e5d4:	42b7      	cmp	r7, r6
 801e5d6:	6803      	ldr	r3, [r0, #0]
 801e5d8:	f280 8083 	bge.w	801e6e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801e5dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e5e0:	4798      	blx	r3
 801e5e2:	eb07 030b 	add.w	r3, r7, fp
 801e5e6:	4298      	cmp	r0, r3
 801e5e8:	da07      	bge.n	801e5fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801e5ea:	42b0      	cmp	r0, r6
 801e5ec:	da05      	bge.n	801e5fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801e5ee:	4287      	cmp	r7, r0
 801e5f0:	dd6c      	ble.n	801e6cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801e5f2:	2f00      	cmp	r7, #0
 801e5f4:	dd6a      	ble.n	801e6cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801e5f6:	4630      	mov	r0, r6
 801e5f8:	e004      	b.n	801e604 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801e5fa:	4287      	cmp	r7, r0
 801e5fc:	dcfb      	bgt.n	801e5f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801e5fe:	42b0      	cmp	r0, r6
 801e600:	bfa8      	it	ge
 801e602:	4630      	movge	r0, r6
 801e604:	2200      	movs	r2, #0
 801e606:	4b76      	ldr	r3, [pc, #472]	@ (801e7e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801e608:	1bc0      	subs	r0, r0, r7
 801e60a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e60e:	f8ad 7016 	strh.w	r7, [sp, #22]
 801e612:	882f      	ldrh	r7, [r5, #0]
 801e614:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e618:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e61c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e620:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801e624:	42bb      	cmp	r3, r7
 801e626:	d9cd      	bls.n	801e5c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801e628:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801e62c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801e630:	ab07      	add	r3, sp, #28
 801e632:	6851      	ldr	r1, [r2, #4]
 801e634:	c303      	stmia	r3!, {r0, r1}
 801e636:	a905      	add	r1, sp, #20
 801e638:	a807      	add	r0, sp, #28
 801e63a:	f7ff f9f7 	bl	801da2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e63e:	2800      	cmp	r0, #0
 801e640:	d04c      	beq.n	801e6dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801e642:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801e646:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801e64a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801e64e:	4686      	mov	lr, r0
 801e650:	4290      	cmp	r0, r2
 801e652:	4450      	add	r0, sl
 801e654:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801e658:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801e65c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e660:	bfb8      	it	lt
 801e662:	4696      	movlt	lr, r2
 801e664:	4452      	add	r2, sl
 801e666:	4299      	cmp	r1, r3
 801e668:	b280      	uxth	r0, r0
 801e66a:	b292      	uxth	r2, r2
 801e66c:	468c      	mov	ip, r1
 801e66e:	9302      	str	r3, [sp, #8]
 801e670:	bfb8      	it	lt
 801e672:	469c      	movlt	ip, r3
 801e674:	fa0f fa82 	sxth.w	sl, r2
 801e678:	b203      	sxth	r3, r0
 801e67a:	4553      	cmp	r3, sl
 801e67c:	bfb8      	it	lt
 801e67e:	4602      	movlt	r2, r0
 801e680:	eba2 020e 	sub.w	r2, r2, lr
 801e684:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e688:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801e68c:	9b02      	ldr	r3, [sp, #8]
 801e68e:	4411      	add	r1, r2
 801e690:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e694:	b289      	uxth	r1, r1
 801e696:	4413      	add	r3, r2
 801e698:	b29b      	uxth	r3, r3
 801e69a:	b208      	sxth	r0, r1
 801e69c:	b21a      	sxth	r2, r3
 801e69e:	4290      	cmp	r0, r2
 801e6a0:	bfb8      	it	lt
 801e6a2:	460b      	movlt	r3, r1
 801e6a4:	eba3 030c 	sub.w	r3, r3, ip
 801e6a8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e6ac:	f8ad e01c 	strh.w	lr, [sp, #28]
 801e6b0:	f8ad c01e 	strh.w	ip, [sp, #30]
 801e6b4:	a807      	add	r0, sp, #28
 801e6b6:	f7fa f856 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e6ba:	b920      	cbnz	r0, 801e6c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801e6bc:	6823      	ldr	r3, [r4, #0]
 801e6be:	a907      	add	r1, sp, #28
 801e6c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e6c2:	4620      	mov	r0, r4
 801e6c4:	4798      	blx	r3
 801e6c6:	3701      	adds	r7, #1
 801e6c8:	b2bf      	uxth	r7, r7
 801e6ca:	e7a9      	b.n	801e620 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801e6cc:	f8d9 0000 	ldr.w	r0, [r9]
 801e6d0:	2101      	movs	r1, #1
 801e6d2:	6803      	ldr	r3, [r0, #0]
 801e6d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e6d8:	4798      	blx	r3
 801e6da:	e773      	b.n	801e5c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801e6dc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801e6e0:	e7e8      	b.n	801e6b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801e6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6e4:	4798      	blx	r3
 801e6e6:	4b3f      	ldr	r3, [pc, #252]	@ (801e7e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801e6e8:	781b      	ldrb	r3, [r3, #0]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	f43f af29 	beq.w	801e542 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801e6f6:	882b      	ldrh	r3, [r5, #0]
 801e6f8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801e6fc:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801e700:	42ab      	cmp	r3, r5
 801e702:	f4bf af1e 	bcs.w	801e542 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801e706:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801e70a:	2907      	cmp	r1, #7
 801e70c:	d814      	bhi.n	801e738 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801e70e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801e712:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801e716:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801e71a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801e71e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801e722:	1c4a      	adds	r2, r1, #1
 801e724:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801e728:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801e72c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801e730:	f8a2 c002 	strh.w	ip, [r2, #2]
 801e734:	8097      	strh	r7, [r2, #4]
 801e736:	80d6      	strh	r6, [r2, #6]
 801e738:	3301      	adds	r3, #1
 801e73a:	b29b      	uxth	r3, r3
 801e73c:	e7e0      	b.n	801e700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 801e73e:	2b02      	cmp	r3, #2
 801e740:	f040 8133 	bne.w	801e9aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801e744:	4b28      	ldr	r3, [pc, #160]	@ (801e7e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801e746:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801e74a:	781b      	ldrb	r3, [r3, #0]
 801e74c:	2b01      	cmp	r3, #1
 801e74e:	f000 8098 	beq.w	801e882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801e752:	882a      	ldrh	r2, [r5, #0]
 801e754:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801e758:	3201      	adds	r2, #1
 801e75a:	b292      	uxth	r2, r2
 801e75c:	2900      	cmp	r1, #0
 801e75e:	d0c2      	beq.n	801e6e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801e760:	4694      	mov	ip, r2
 801e762:	f04f 0900 	mov.w	r9, #0
 801e766:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801e76a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801e76e:	441e      	add	r6, r3
 801e770:	b236      	sxth	r6, r6
 801e772:	fa1f f38c 	uxth.w	r3, ip
 801e776:	4299      	cmp	r1, r3
 801e778:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801e77c:	f240 80bf 	bls.w	801e8fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 801e780:	4427      	add	r7, r4
 801e782:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801e786:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801e78a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801e78e:	4283      	cmp	r3, r0
 801e790:	f340 80a1 	ble.w	801e8d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 801e794:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801e798:	46e1      	mov	r9, ip
 801e79a:	4406      	add	r6, r0
 801e79c:	b236      	sxth	r6, r6
 801e79e:	429e      	cmp	r6, r3
 801e7a0:	bfa8      	it	ge
 801e7a2:	461e      	movge	r6, r3
 801e7a4:	f10c 0c01 	add.w	ip, ip, #1
 801e7a8:	e7e3      	b.n	801e772 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 801e7aa:	d10a      	bne.n	801e7c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801e7ac:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801e7b0:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801e7b4:	4562      	cmp	r2, ip
 801e7b6:	bfb8      	it	lt
 801e7b8:	4662      	movlt	r2, ip
 801e7ba:	4288      	cmp	r0, r1
 801e7bc:	bfb8      	it	lt
 801e7be:	461f      	movlt	r7, r3
 801e7c0:	e087      	b.n	801e8d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801e7c2:	428a      	cmp	r2, r1
 801e7c4:	bfb8      	it	lt
 801e7c6:	460a      	movlt	r2, r1
 801e7c8:	e083      	b.n	801e8d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801e7ca:	bf00      	nop
 801e7cc:	2001203c 	.word	0x2001203c
 801e7d0:	20012048 	.word	0x20012048
 801e7d4:	20000024 	.word	0x20000024
 801e7d8:	20011ffc 	.word	0x20011ffc
 801e7dc:	20011ff2 	.word	0x20011ff2
 801e7e0:	20011ff0 	.word	0x20011ff0
 801e7e4:	20011ffa 	.word	0x20011ffa
 801e7e8:	20011ff4 	.word	0x20011ff4
 801e7ec:	19a1      	adds	r1, r4, r6
 801e7ee:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801e7f2:	ab07      	add	r3, sp, #28
 801e7f4:	6849      	ldr	r1, [r1, #4]
 801e7f6:	c303      	stmia	r3!, {r0, r1}
 801e7f8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e7fc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e800:	2b13      	cmp	r3, #19
 801e802:	bfd8      	it	le
 801e804:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801e808:	440b      	add	r3, r1
 801e80a:	1a9b      	subs	r3, r3, r2
 801e80c:	a807      	add	r0, sp, #28
 801e80e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e812:	f8ad 201c 	strh.w	r2, [sp, #28]
 801e816:	f7ff f859 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e81a:	a807      	add	r0, sp, #28
 801e81c:	f7f9 ffa3 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e820:	bb78      	cbnz	r0, 801e882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801e822:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801e826:	f8d9 0000 	ldr.w	r0, [r9]
 801e82a:	f1bc 0f14 	cmp.w	ip, #20
 801e82e:	bfa8      	it	ge
 801e830:	f04f 0c14 	movge.w	ip, #20
 801e834:	f8d0 e000 	ldr.w	lr, [r0]
 801e838:	fa1f fc8c 	uxth.w	ip, ip
 801e83c:	f8cd c000 	str.w	ip, [sp]
 801e840:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801e844:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e848:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801e84c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e850:	47d8      	blx	fp
 801e852:	4683      	mov	fp, r0
 801e854:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801e858:	a807      	add	r0, sp, #28
 801e85a:	f7ff f81d 	bl	801d898 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801e85e:	6823      	ldr	r3, [r4, #0]
 801e860:	4620      	mov	r0, r4
 801e862:	4426      	add	r6, r4
 801e864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e866:	a907      	add	r1, sp, #28
 801e868:	4798      	blx	r3
 801e86a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801e86e:	eba0 000b 	sub.w	r0, r0, fp
 801e872:	b200      	sxth	r0, r0
 801e874:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801e878:	b918      	cbnz	r0, 801e882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801e87a:	b2b9      	uxth	r1, r7
 801e87c:	4650      	mov	r0, sl
 801e87e:	f7ff fa79 	bl	801dd74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e882:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801e886:	f1bb 0f00 	cmp.w	fp, #0
 801e88a:	f43f af2c 	beq.w	801e6e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801e88e:	2700      	movs	r7, #0
 801e890:	882b      	ldrh	r3, [r5, #0]
 801e892:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801e896:	3301      	adds	r3, #1
 801e898:	b29b      	uxth	r3, r3
 801e89a:	b299      	uxth	r1, r3
 801e89c:	458b      	cmp	fp, r1
 801e89e:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 801e8a2:	d9a3      	bls.n	801e7ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 801e8a4:	4426      	add	r6, r4
 801e8a6:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801e8aa:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801e8ae:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801e8b2:	4408      	add	r0, r1
 801e8b4:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801e8b8:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801e8bc:	b200      	sxth	r0, r0
 801e8be:	4461      	add	r1, ip
 801e8c0:	b209      	sxth	r1, r1
 801e8c2:	4288      	cmp	r0, r1
 801e8c4:	f6bf af71 	bge.w	801e7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801e8c8:	4584      	cmp	ip, r0
 801e8ca:	4662      	mov	r2, ip
 801e8cc:	461f      	mov	r7, r3
 801e8ce:	bfb8      	it	lt
 801e8d0:	4602      	movlt	r2, r0
 801e8d2:	3301      	adds	r3, #1
 801e8d4:	e7e1      	b.n	801e89a <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 801e8d6:	d10e      	bne.n	801e8f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 801e8d8:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801e8dc:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801e8e0:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801e8e4:	4473      	add	r3, lr
 801e8e6:	b21b      	sxth	r3, r3
 801e8e8:	429e      	cmp	r6, r3
 801e8ea:	bfa8      	it	ge
 801e8ec:	461e      	movge	r6, r3
 801e8ee:	4287      	cmp	r7, r0
 801e8f0:	bfb8      	it	lt
 801e8f2:	46e1      	movlt	r9, ip
 801e8f4:	e756      	b.n	801e7a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801e8f6:	4286      	cmp	r6, r0
 801e8f8:	bfa8      	it	ge
 801e8fa:	4606      	movge	r6, r0
 801e8fc:	e752      	b.n	801e7a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801e8fe:	eb0a 0007 	add.w	r0, sl, r7
 801e902:	4427      	add	r7, r4
 801e904:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801e908:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801e90c:	f1bb 0f13 	cmp.w	fp, #19
 801e910:	bfde      	ittt	le
 801e912:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801e916:	445e      	addle	r6, fp
 801e918:	b236      	sxthle	r6, r6
 801e91a:	f7f9 ff24 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e91e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e922:	2800      	cmp	r0, #0
 801e924:	f47f af1a 	bne.w	801e75c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 801e928:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801e92c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801e930:	1ab6      	subs	r6, r6, r2
 801e932:	2e14      	cmp	r6, #20
 801e934:	bfa8      	it	ge
 801e936:	2614      	movge	r6, #20
 801e938:	4828      	ldr	r0, [pc, #160]	@ (801e9dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 801e93a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801e93e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801e942:	6800      	ldr	r0, [r0, #0]
 801e944:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e948:	f8ad 201e 	strh.w	r2, [sp, #30]
 801e94c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e950:	f8d0 c000 	ldr.w	ip, [r0]
 801e954:	b2b6      	uxth	r6, r6
 801e956:	fa1f fb8b 	uxth.w	fp, fp
 801e95a:	455e      	cmp	r6, fp
 801e95c:	bf94      	ite	ls
 801e95e:	9600      	strls	r6, [sp, #0]
 801e960:	f8cd b000 	strhi.w	fp, [sp]
 801e964:	b292      	uxth	r2, r2
 801e966:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801e96a:	b29b      	uxth	r3, r3
 801e96c:	b289      	uxth	r1, r1
 801e96e:	47b0      	blx	r6
 801e970:	6823      	ldr	r3, [r4, #0]
 801e972:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801e976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e978:	a907      	add	r1, sp, #28
 801e97a:	4620      	mov	r0, r4
 801e97c:	4798      	blx	r3
 801e97e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801e982:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801e986:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801e98a:	1a5b      	subs	r3, r3, r1
 801e98c:	440a      	add	r2, r1
 801e98e:	b21b      	sxth	r3, r3
 801e990:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801e994:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801e998:	2b00      	cmp	r3, #0
 801e99a:	f47f aeda 	bne.w	801e752 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801e99e:	fa1f f189 	uxth.w	r1, r9
 801e9a2:	4650      	mov	r0, sl
 801e9a4:	f7ff f9e6 	bl	801dd74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e9a8:	e6d3      	b.n	801e752 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801e9aa:	882e      	ldrh	r6, [r5, #0]
 801e9ac:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801e9b0:	42b3      	cmp	r3, r6
 801e9b2:	f67f ae98 	bls.w	801e6e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801e9b6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801e9ba:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801e9be:	ab07      	add	r3, sp, #28
 801e9c0:	6851      	ldr	r1, [r2, #4]
 801e9c2:	c303      	stmia	r3!, {r0, r1}
 801e9c4:	a807      	add	r0, sp, #28
 801e9c6:	f7f9 fece 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e9ca:	b920      	cbnz	r0, 801e9d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 801e9cc:	6823      	ldr	r3, [r4, #0]
 801e9ce:	a907      	add	r1, sp, #28
 801e9d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	4798      	blx	r3
 801e9d6:	3601      	adds	r6, #1
 801e9d8:	b2b6      	uxth	r6, r6
 801e9da:	e7e7      	b.n	801e9ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 801e9dc:	20011ffc 	.word	0x20011ffc

0801e9e0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801e9e0:	2200      	movs	r2, #0
 801e9e2:	4b03      	ldr	r3, [pc, #12]	@ (801e9f0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801e9e4:	801a      	strh	r2, [r3, #0]
 801e9e6:	805a      	strh	r2, [r3, #2]
 801e9e8:	809a      	strh	r2, [r3, #4]
 801e9ea:	80da      	strh	r2, [r3, #6]
 801e9ec:	4770      	bx	lr
 801e9ee:	bf00      	nop
 801e9f0:	20012048 	.word	0x20012048

0801e9f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801e9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f8:	4606      	mov	r6, r0
 801e9fa:	b09d      	sub	sp, #116	@ 0x74
 801e9fc:	a803      	add	r0, sp, #12
 801e9fe:	4614      	mov	r4, r2
 801ea00:	468a      	mov	sl, r1
 801ea02:	461d      	mov	r5, r3
 801ea04:	f000 fe40 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801ea08:	6833      	ldr	r3, [r6, #0]
 801ea0a:	4630      	mov	r0, r6
 801ea0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ea0e:	4798      	blx	r3
 801ea10:	6833      	ldr	r3, [r6, #0]
 801ea12:	4607      	mov	r7, r0
 801ea14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ea16:	4630      	mov	r0, r6
 801ea18:	4798      	blx	r3
 801ea1a:	462a      	mov	r2, r5
 801ea1c:	2500      	movs	r5, #0
 801ea1e:	9000      	str	r0, [sp, #0]
 801ea20:	4621      	mov	r1, r4
 801ea22:	463b      	mov	r3, r7
 801ea24:	a803      	add	r0, sp, #12
 801ea26:	f000 fe8a 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ea2a:	462c      	mov	r4, r5
 801ea2c:	46a9      	mov	r9, r5
 801ea2e:	46a8      	mov	r8, r5
 801ea30:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801ea34:	2300      	movs	r3, #0
 801ea36:	9302      	str	r3, [sp, #8]
 801ea38:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ea3c:	429c      	cmp	r4, r3
 801ea3e:	d002      	beq.n	801ea46 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ea40:	455c      	cmp	r4, fp
 801ea42:	bf18      	it	ne
 801ea44:	4625      	movne	r5, r4
 801ea46:	ab02      	add	r3, sp, #8
 801ea48:	4632      	mov	r2, r6
 801ea4a:	4651      	mov	r1, sl
 801ea4c:	a803      	add	r0, sp, #12
 801ea4e:	f001 f9a3 	bl	801fd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ea52:	4604      	mov	r4, r0
 801ea54:	b108      	cbz	r0, 801ea5a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ea56:	280a      	cmp	r0, #10
 801ea58:	d10a      	bne.n	801ea70 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ea5a:	45c1      	cmp	r9, r8
 801ea5c:	bf38      	it	cc
 801ea5e:	46c1      	movcc	r9, r8
 801ea60:	f04f 0800 	mov.w	r8, #0
 801ea64:	2c00      	cmp	r4, #0
 801ea66:	d1e5      	bne.n	801ea34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ea68:	4648      	mov	r0, r9
 801ea6a:	b01d      	add	sp, #116	@ 0x74
 801ea6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea70:	9a02      	ldr	r2, [sp, #8]
 801ea72:	2a00      	cmp	r2, #0
 801ea74:	d0de      	beq.n	801ea34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ea76:	7b57      	ldrb	r7, [r2, #13]
 801ea78:	6833      	ldr	r3, [r6, #0]
 801ea7a:	007f      	lsls	r7, r7, #1
 801ea7c:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801ea80:	7a97      	ldrb	r7, [r2, #10]
 801ea82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ea84:	4307      	orrs	r7, r0
 801ea86:	4629      	mov	r1, r5
 801ea88:	4630      	mov	r0, r6
 801ea8a:	8894      	ldrh	r4, [r2, #4]
 801ea8c:	4798      	blx	r3
 801ea8e:	4438      	add	r0, r7
 801ea90:	4480      	add	r8, r0
 801ea92:	fa1f f888 	uxth.w	r8, r8
 801ea96:	e7e5      	b.n	801ea64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ea98 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ea98:	b508      	push	{r3, lr}
 801ea9a:	6803      	ldr	r3, [r0, #0]
 801ea9c:	68db      	ldr	r3, [r3, #12]
 801ea9e:	4798      	blx	r3
 801eaa0:	b128      	cbz	r0, 801eaae <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801eaa2:	7b43      	ldrb	r3, [r0, #13]
 801eaa4:	7a80      	ldrb	r0, [r0, #10]
 801eaa6:	005b      	lsls	r3, r3, #1
 801eaa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801eaac:	4318      	orrs	r0, r3
 801eaae:	bd08      	pop	{r3, pc}

0801eab0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801eab0:	b40e      	push	{r1, r2, r3}
 801eab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eab4:	4605      	mov	r5, r0
 801eab6:	b09e      	sub	sp, #120	@ 0x78
 801eab8:	ab23      	add	r3, sp, #140	@ 0x8c
 801eaba:	f853 4b04 	ldr.w	r4, [r3], #4
 801eabe:	a805      	add	r0, sp, #20
 801eac0:	9303      	str	r3, [sp, #12]
 801eac2:	f000 fde1 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801eac6:	682b      	ldr	r3, [r5, #0]
 801eac8:	4628      	mov	r0, r5
 801eaca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eacc:	4798      	blx	r3
 801eace:	682b      	ldr	r3, [r5, #0]
 801ead0:	4606      	mov	r6, r0
 801ead2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ead4:	4628      	mov	r0, r5
 801ead6:	4798      	blx	r3
 801ead8:	4621      	mov	r1, r4
 801eada:	2400      	movs	r4, #0
 801eadc:	4633      	mov	r3, r6
 801eade:	9000      	str	r0, [sp, #0]
 801eae0:	9a03      	ldr	r2, [sp, #12]
 801eae2:	ae1e      	add	r6, sp, #120	@ 0x78
 801eae4:	a805      	add	r0, sp, #20
 801eae6:	f000 fe2a 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801eaea:	f846 4d68 	str.w	r4, [r6, #-104]!
 801eaee:	4633      	mov	r3, r6
 801eaf0:	462a      	mov	r2, r5
 801eaf2:	4621      	mov	r1, r4
 801eaf4:	a805      	add	r0, sp, #20
 801eaf6:	f001 f94f 	bl	801fd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801eafa:	b1f0      	cbz	r0, 801eb3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801eafc:	280a      	cmp	r0, #10
 801eafe:	d018      	beq.n	801eb32 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801eb00:	9f04      	ldr	r7, [sp, #16]
 801eb02:	b1b7      	cbz	r7, 801eb32 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801eb04:	7b78      	ldrb	r0, [r7, #13]
 801eb06:	7a3b      	ldrb	r3, [r7, #8]
 801eb08:	00c1      	lsls	r1, r0, #3
 801eb0a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801eb0e:	4319      	orrs	r1, r3
 801eb10:	0643      	lsls	r3, r0, #25
 801eb12:	bf44      	itt	mi
 801eb14:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801eb18:	b219      	sxthmi	r1, r3
 801eb1a:	0100      	lsls	r0, r0, #4
 801eb1c:	79fb      	ldrb	r3, [r7, #7]
 801eb1e:	88ea      	ldrh	r2, [r5, #6]
 801eb20:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801eb24:	4303      	orrs	r3, r0
 801eb26:	4413      	add	r3, r2
 801eb28:	1a5b      	subs	r3, r3, r1
 801eb2a:	b21b      	sxth	r3, r3
 801eb2c:	429c      	cmp	r4, r3
 801eb2e:	bfb8      	it	lt
 801eb30:	461c      	movlt	r4, r3
 801eb32:	4633      	mov	r3, r6
 801eb34:	462a      	mov	r2, r5
 801eb36:	2100      	movs	r1, #0
 801eb38:	e7dc      	b.n	801eaf4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801eb3a:	b2a0      	uxth	r0, r4
 801eb3c:	b01e      	add	sp, #120	@ 0x78
 801eb3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801eb42:	b003      	add	sp, #12
 801eb44:	4770      	bx	lr

0801eb46 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801eb46:	7a43      	ldrb	r3, [r0, #9]
 801eb48:	8880      	ldrh	r0, [r0, #4]
 801eb4a:	4418      	add	r0, r3
 801eb4c:	b280      	uxth	r0, r0
 801eb4e:	4770      	bx	lr

0801eb50 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801eb50:	6803      	ldr	r3, [r0, #0]
 801eb52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eb54:	4718      	bx	r3

0801eb56 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801eb56:	b40e      	push	{r1, r2, r3}
 801eb58:	b570      	push	{r4, r5, r6, lr}
 801eb5a:	4604      	mov	r4, r0
 801eb5c:	b09d      	sub	sp, #116	@ 0x74
 801eb5e:	ab21      	add	r3, sp, #132	@ 0x84
 801eb60:	f853 5b04 	ldr.w	r5, [r3], #4
 801eb64:	a803      	add	r0, sp, #12
 801eb66:	9302      	str	r3, [sp, #8]
 801eb68:	f000 fd8e 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801eb6c:	6823      	ldr	r3, [r4, #0]
 801eb6e:	4620      	mov	r0, r4
 801eb70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eb72:	4798      	blx	r3
 801eb74:	6823      	ldr	r3, [r4, #0]
 801eb76:	4606      	mov	r6, r0
 801eb78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801eb7a:	4620      	mov	r0, r4
 801eb7c:	4798      	blx	r3
 801eb7e:	4633      	mov	r3, r6
 801eb80:	9000      	str	r0, [sp, #0]
 801eb82:	9a02      	ldr	r2, [sp, #8]
 801eb84:	4629      	mov	r1, r5
 801eb86:	a803      	add	r0, sp, #12
 801eb88:	f000 fdd9 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801eb8c:	a803      	add	r0, sp, #12
 801eb8e:	f001 f9d1 	bl	801ff34 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801eb92:	2401      	movs	r4, #1
 801eb94:	b2a3      	uxth	r3, r4
 801eb96:	b140      	cbz	r0, 801ebaa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801eb98:	280a      	cmp	r0, #10
 801eb9a:	bf08      	it	eq
 801eb9c:	3301      	addeq	r3, #1
 801eb9e:	a803      	add	r0, sp, #12
 801eba0:	bf08      	it	eq
 801eba2:	b21c      	sxtheq	r4, r3
 801eba4:	f001 f9c6 	bl	801ff34 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801eba8:	e7f4      	b.n	801eb94 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801ebaa:	4618      	mov	r0, r3
 801ebac:	b01d      	add	sp, #116	@ 0x74
 801ebae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ebb2:	b003      	add	sp, #12
 801ebb4:	4770      	bx	lr

0801ebb6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ebb6:	b40e      	push	{r1, r2, r3}
 801ebb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebba:	4604      	mov	r4, r0
 801ebbc:	b09e      	sub	sp, #120	@ 0x78
 801ebbe:	ab23      	add	r3, sp, #140	@ 0x8c
 801ebc0:	f853 5b04 	ldr.w	r5, [r3], #4
 801ebc4:	a805      	add	r0, sp, #20
 801ebc6:	9303      	str	r3, [sp, #12]
 801ebc8:	f000 fd5e 	bl	801f688 <_ZN8touchgfx12TextProviderC1Ev>
 801ebcc:	6823      	ldr	r3, [r4, #0]
 801ebce:	4620      	mov	r0, r4
 801ebd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ebd2:	4798      	blx	r3
 801ebd4:	6823      	ldr	r3, [r4, #0]
 801ebd6:	4606      	mov	r6, r0
 801ebd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ebda:	4620      	mov	r0, r4
 801ebdc:	4798      	blx	r3
 801ebde:	4633      	mov	r3, r6
 801ebe0:	4629      	mov	r1, r5
 801ebe2:	9000      	str	r0, [sp, #0]
 801ebe4:	9a03      	ldr	r2, [sp, #12]
 801ebe6:	a805      	add	r0, sp, #20
 801ebe8:	f000 fda9 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ebec:	2100      	movs	r1, #0
 801ebee:	ad1e      	add	r5, sp, #120	@ 0x78
 801ebf0:	f845 1d68 	str.w	r1, [r5, #-104]!
 801ebf4:	462b      	mov	r3, r5
 801ebf6:	4622      	mov	r2, r4
 801ebf8:	a805      	add	r0, sp, #20
 801ebfa:	f001 f8cd 	bl	801fd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ebfe:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801ec02:	b1d8      	cbz	r0, 801ec3c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801ec04:	280a      	cmp	r0, #10
 801ec06:	d012      	beq.n	801ec2e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ec08:	9804      	ldr	r0, [sp, #16]
 801ec0a:	b180      	cbz	r0, 801ec2e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ec0c:	7b47      	ldrb	r7, [r0, #13]
 801ec0e:	88e2      	ldrh	r2, [r4, #6]
 801ec10:	00fb      	lsls	r3, r7, #3
 801ec12:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ec16:	7a03      	ldrb	r3, [r0, #8]
 801ec18:	430b      	orrs	r3, r1
 801ec1a:	0679      	lsls	r1, r7, #25
 801ec1c:	bf44      	itt	mi
 801ec1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ec22:	b21b      	sxthmi	r3, r3
 801ec24:	1ad3      	subs	r3, r2, r3
 801ec26:	b21b      	sxth	r3, r3
 801ec28:	429e      	cmp	r6, r3
 801ec2a:	bfa8      	it	ge
 801ec2c:	461e      	movge	r6, r3
 801ec2e:	462b      	mov	r3, r5
 801ec30:	4622      	mov	r2, r4
 801ec32:	2100      	movs	r1, #0
 801ec34:	a805      	add	r0, sp, #20
 801ec36:	f001 f8af 	bl	801fd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ec3a:	e7e2      	b.n	801ec02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ec3c:	4630      	mov	r0, r6
 801ec3e:	b01e      	add	sp, #120	@ 0x78
 801ec40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ec44:	b003      	add	sp, #12
 801ec46:	4770      	bx	lr

0801ec48 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ec48:	b513      	push	{r0, r1, r4, lr}
 801ec4a:	2400      	movs	r4, #0
 801ec4c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ec50:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ec54:	6803      	ldr	r3, [r0, #0]
 801ec56:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ec5a:	9400      	str	r4, [sp, #0]
 801ec5c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ec60:	691b      	ldr	r3, [r3, #16]
 801ec62:	4669      	mov	r1, sp
 801ec64:	4798      	blx	r3
 801ec66:	b002      	add	sp, #8
 801ec68:	bd10      	pop	{r4, pc}

0801ec6a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ec6a:	b538      	push	{r3, r4, r5, lr}
 801ec6c:	460c      	mov	r4, r1
 801ec6e:	4605      	mov	r5, r0
 801ec70:	680b      	ldr	r3, [r1, #0]
 801ec72:	68db      	ldr	r3, [r3, #12]
 801ec74:	4798      	blx	r3
 801ec76:	6823      	ldr	r3, [r4, #0]
 801ec78:	4620      	mov	r0, r4
 801ec7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec7c:	4629      	mov	r1, r5
 801ec7e:	4798      	blx	r3
 801ec80:	4628      	mov	r0, r5
 801ec82:	bd38      	pop	{r3, r4, r5, pc}

0801ec84 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ec84:	b410      	push	{r4}
 801ec86:	880a      	ldrh	r2, [r1, #0]
 801ec88:	8884      	ldrh	r4, [r0, #4]
 801ec8a:	4422      	add	r2, r4
 801ec8c:	800a      	strh	r2, [r1, #0]
 801ec8e:	88c4      	ldrh	r4, [r0, #6]
 801ec90:	884a      	ldrh	r2, [r1, #2]
 801ec92:	4422      	add	r2, r4
 801ec94:	804a      	strh	r2, [r1, #2]
 801ec96:	6940      	ldr	r0, [r0, #20]
 801ec98:	b120      	cbz	r0, 801eca4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ec9a:	6803      	ldr	r3, [r0, #0]
 801ec9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eca2:	4718      	bx	r3
 801eca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eca8:	4770      	bx	lr

0801ecaa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801ecaa:	b570      	push	{r4, r5, r6, lr}
 801ecac:	460c      	mov	r4, r1
 801ecae:	8882      	ldrh	r2, [r0, #4]
 801ecb0:	880b      	ldrh	r3, [r1, #0]
 801ecb2:	4605      	mov	r5, r0
 801ecb4:	4413      	add	r3, r2
 801ecb6:	800b      	strh	r3, [r1, #0]
 801ecb8:	88c2      	ldrh	r2, [r0, #6]
 801ecba:	884b      	ldrh	r3, [r1, #2]
 801ecbc:	4413      	add	r3, r2
 801ecbe:	804b      	strh	r3, [r1, #2]
 801ecc0:	1d01      	adds	r1, r0, #4
 801ecc2:	4620      	mov	r0, r4
 801ecc4:	f7f9 fd0c 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801ecc8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	dd0b      	ble.n	801ece8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ecd0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	dd07      	ble.n	801ece8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ecd8:	6968      	ldr	r0, [r5, #20]
 801ecda:	b128      	cbz	r0, 801ece8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ecdc:	6803      	ldr	r3, [r0, #0]
 801ecde:	4621      	mov	r1, r4
 801ece0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ece4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ece6:	4718      	bx	r3
 801ece8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ecec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ecec:	b570      	push	{r4, r5, r6, lr}
 801ecee:	460c      	mov	r4, r1
 801ecf0:	8882      	ldrh	r2, [r0, #4]
 801ecf2:	880b      	ldrh	r3, [r1, #0]
 801ecf4:	4605      	mov	r5, r0
 801ecf6:	4413      	add	r3, r2
 801ecf8:	800b      	strh	r3, [r1, #0]
 801ecfa:	88c2      	ldrh	r2, [r0, #6]
 801ecfc:	884b      	ldrh	r3, [r1, #2]
 801ecfe:	4413      	add	r3, r2
 801ed00:	804b      	strh	r3, [r1, #2]
 801ed02:	1d01      	adds	r1, r0, #4
 801ed04:	4620      	mov	r0, r4
 801ed06:	f7f9 fceb 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801ed0a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	dd19      	ble.n	801ed46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ed12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ed16:	2b00      	cmp	r3, #0
 801ed18:	dd15      	ble.n	801ed46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ed1a:	6968      	ldr	r0, [r5, #20]
 801ed1c:	b128      	cbz	r0, 801ed2a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ed1e:	6803      	ldr	r3, [r0, #0]
 801ed20:	4621      	mov	r1, r4
 801ed22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ed26:	691b      	ldr	r3, [r3, #16]
 801ed28:	4718      	bx	r3
 801ed2a:	4b07      	ldr	r3, [pc, #28]	@ (801ed48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	3304      	adds	r3, #4
 801ed30:	429d      	cmp	r5, r3
 801ed32:	d108      	bne.n	801ed46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ed34:	f7fe ff12 	bl	801db5c <_ZN8touchgfx11Application11getInstanceEv>
 801ed38:	6803      	ldr	r3, [r0, #0]
 801ed3a:	6821      	ldr	r1, [r4, #0]
 801ed3c:	6862      	ldr	r2, [r4, #4]
 801ed3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ed44:	4718      	bx	r3
 801ed46:	bd70      	pop	{r4, r5, r6, pc}
 801ed48:	20012040 	.word	0x20012040

0801ed4c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ed4c:	b570      	push	{r4, r5, r6, lr}
 801ed4e:	4604      	mov	r4, r0
 801ed50:	4616      	mov	r6, r2
 801ed52:	460d      	mov	r5, r1
 801ed54:	b901      	cbnz	r1, 801ed58 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ed56:	b192      	cbz	r2, 801ed7e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ed58:	6823      	ldr	r3, [r4, #0]
 801ed5a:	4620      	mov	r0, r4
 801ed5c:	699b      	ldr	r3, [r3, #24]
 801ed5e:	4798      	blx	r3
 801ed60:	88e2      	ldrh	r2, [r4, #6]
 801ed62:	88a1      	ldrh	r1, [r4, #4]
 801ed64:	4432      	add	r2, r6
 801ed66:	4429      	add	r1, r5
 801ed68:	4620      	mov	r0, r4
 801ed6a:	b212      	sxth	r2, r2
 801ed6c:	b209      	sxth	r1, r1
 801ed6e:	f7ee fc1c 	bl	800d5aa <_ZN8touchgfx8Drawable5setXYEss>
 801ed72:	6823      	ldr	r3, [r4, #0]
 801ed74:	4620      	mov	r0, r4
 801ed76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ed7a:	699b      	ldr	r3, [r3, #24]
 801ed7c:	4718      	bx	r3
 801ed7e:	bd70      	pop	{r4, r5, r6, pc}

0801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ed80:	b510      	push	{r4, lr}
 801ed82:	2300      	movs	r3, #0
 801ed84:	4604      	mov	r4, r0
 801ed86:	4608      	mov	r0, r1
 801ed88:	8023      	strh	r3, [r4, #0]
 801ed8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ed8e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ed92:	8063      	strh	r3, [r4, #2]
 801ed94:	6803      	ldr	r3, [r0, #0]
 801ed96:	80a1      	strh	r1, [r4, #4]
 801ed98:	80e2      	strh	r2, [r4, #6]
 801ed9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed9c:	4621      	mov	r1, r4
 801ed9e:	4798      	blx	r3
 801eda0:	4620      	mov	r0, r4
 801eda2:	bd10      	pop	{r4, pc}

0801eda4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801eda4:	b530      	push	{r4, r5, lr}
 801eda6:	8083      	strh	r3, [r0, #4]
 801eda8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801edac:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801edb0:	80c3      	strh	r3, [r0, #6]
 801edb2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801edb6:	6141      	str	r1, [r0, #20]
 801edb8:	7203      	strb	r3, [r0, #8]
 801edba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801edbe:	8302      	strh	r2, [r0, #24]
 801edc0:	7243      	strb	r3, [r0, #9]
 801edc2:	7a83      	ldrb	r3, [r0, #10]
 801edc4:	f365 0306 	bfi	r3, r5, #0, #7
 801edc8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801edcc:	f365 13c7 	bfi	r3, r5, #7, #1
 801edd0:	7283      	strb	r3, [r0, #10]
 801edd2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801edd6:	72c3      	strb	r3, [r0, #11]
 801edd8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801eddc:	7303      	strb	r3, [r0, #12]
 801edde:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ede2:	81c3      	strh	r3, [r0, #14]
 801ede4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ede8:	8203      	strh	r3, [r0, #16]
 801edea:	4b01      	ldr	r3, [pc, #4]	@ (801edf0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801edec:	6003      	str	r3, [r0, #0]
 801edee:	bd30      	pop	{r4, r5, pc}
 801edf0:	08033824 	.word	0x08033824

0801edf4 <_ZNK8touchgfx9ConstFont4findEt>:
 801edf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801edf6:	6944      	ldr	r4, [r0, #20]
 801edf8:	b3bc      	cbz	r4, 801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801edfa:	88a3      	ldrh	r3, [r4, #4]
 801edfc:	8b02      	ldrh	r2, [r0, #24]
 801edfe:	1acb      	subs	r3, r1, r3
 801ee00:	f102 32ff 	add.w	r2, r2, #4294967295
 801ee04:	d431      	bmi.n	801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ee06:	4293      	cmp	r3, r2
 801ee08:	dd0c      	ble.n	801ee24 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801ee0a:	230e      	movs	r3, #14
 801ee0c:	fb03 4302 	mla	r3, r3, r2, r4
 801ee10:	889b      	ldrh	r3, [r3, #4]
 801ee12:	1a5b      	subs	r3, r3, r1
 801ee14:	1ad3      	subs	r3, r2, r3
 801ee16:	429a      	cmp	r2, r3
 801ee18:	db27      	blt.n	801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	bfbc      	itt	lt
 801ee1e:	2302      	movlt	r3, #2
 801ee20:	fb92 f3f3 	sdivlt	r3, r2, r3
 801ee24:	2500      	movs	r5, #0
 801ee26:	260e      	movs	r6, #14
 801ee28:	4295      	cmp	r5, r2
 801ee2a:	dc1e      	bgt.n	801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ee2c:	fb06 4003 	mla	r0, r6, r3, r4
 801ee30:	8887      	ldrh	r7, [r0, #4]
 801ee32:	42b9      	cmp	r1, r7
 801ee34:	d01a      	beq.n	801ee6c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801ee36:	d20d      	bcs.n	801ee54 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801ee38:	1e5a      	subs	r2, r3, #1
 801ee3a:	4295      	cmp	r5, r2
 801ee3c:	dc15      	bgt.n	801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ee3e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801ee42:	1a5b      	subs	r3, r3, r1
 801ee44:	1ad3      	subs	r3, r2, r3
 801ee46:	429a      	cmp	r2, r3
 801ee48:	db0f      	blt.n	801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ee4a:	429d      	cmp	r5, r3
 801ee4c:	ddec      	ble.n	801ee28 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ee4e:	1953      	adds	r3, r2, r5
 801ee50:	105b      	asrs	r3, r3, #1
 801ee52:	e7e9      	b.n	801ee28 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ee54:	1c5d      	adds	r5, r3, #1
 801ee56:	42aa      	cmp	r2, r5
 801ee58:	db07      	blt.n	801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ee5a:	8a43      	ldrh	r3, [r0, #18]
 801ee5c:	1acb      	subs	r3, r1, r3
 801ee5e:	442b      	add	r3, r5
 801ee60:	429d      	cmp	r5, r3
 801ee62:	dc02      	bgt.n	801ee6a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ee64:	429a      	cmp	r2, r3
 801ee66:	dadf      	bge.n	801ee28 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ee68:	e7f1      	b.n	801ee4e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801ee6a:	2000      	movs	r0, #0
 801ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ee6e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801ee6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee70:	4604      	mov	r4, r0
 801ee72:	4617      	mov	r7, r2
 801ee74:	461e      	mov	r6, r3
 801ee76:	b911      	cbnz	r1, 801ee7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ee78:	2500      	movs	r5, #0
 801ee7a:	4628      	mov	r0, r5
 801ee7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee7e:	290a      	cmp	r1, #10
 801ee80:	d0fa      	beq.n	801ee78 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ee82:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801ee86:	4291      	cmp	r1, r2
 801ee88:	d0f6      	beq.n	801ee78 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ee8a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801ee8e:	4291      	cmp	r1, r2
 801ee90:	d0f2      	beq.n	801ee78 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ee92:	f7ff ffaf 	bl	801edf4 <_ZNK8touchgfx9ConstFont4findEt>
 801ee96:	4605      	mov	r5, r0
 801ee98:	b950      	cbnz	r0, 801eeb0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801ee9a:	6823      	ldr	r3, [r4, #0]
 801ee9c:	4620      	mov	r0, r4
 801ee9e:	691b      	ldr	r3, [r3, #16]
 801eea0:	4798      	blx	r3
 801eea2:	4601      	mov	r1, r0
 801eea4:	4620      	mov	r0, r4
 801eea6:	f7ff ffa5 	bl	801edf4 <_ZNK8touchgfx9ConstFont4findEt>
 801eeaa:	4605      	mov	r5, r0
 801eeac:	2800      	cmp	r0, #0
 801eeae:	d0e3      	beq.n	801ee78 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801eeb0:	6823      	ldr	r3, [r4, #0]
 801eeb2:	4629      	mov	r1, r5
 801eeb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801eeb6:	4620      	mov	r0, r4
 801eeb8:	4798      	blx	r3
 801eeba:	6038      	str	r0, [r7, #0]
 801eebc:	6823      	ldr	r3, [r4, #0]
 801eebe:	4620      	mov	r0, r4
 801eec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eec2:	4798      	blx	r3
 801eec4:	7030      	strb	r0, [r6, #0]
 801eec6:	e7d8      	b.n	801ee7a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801eec8 <_ZN8touchgfx4clzuEm>:
 801eec8:	4603      	mov	r3, r0
 801eeca:	b1c8      	cbz	r0, 801ef00 <_ZN8touchgfx4clzuEm+0x38>
 801eecc:	0c02      	lsrs	r2, r0, #16
 801eece:	0412      	lsls	r2, r2, #16
 801eed0:	b9a2      	cbnz	r2, 801eefc <_ZN8touchgfx4clzuEm+0x34>
 801eed2:	0403      	lsls	r3, r0, #16
 801eed4:	2010      	movs	r0, #16
 801eed6:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801eeda:	bf04      	itt	eq
 801eedc:	021b      	lsleq	r3, r3, #8
 801eede:	3008      	addeq	r0, #8
 801eee0:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801eee4:	bf04      	itt	eq
 801eee6:	011b      	lsleq	r3, r3, #4
 801eee8:	3004      	addeq	r0, #4
 801eeea:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801eeee:	bf04      	itt	eq
 801eef0:	009b      	lsleq	r3, r3, #2
 801eef2:	3002      	addeq	r0, #2
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	db04      	blt.n	801ef02 <_ZN8touchgfx4clzuEm+0x3a>
 801eef8:	3001      	adds	r0, #1
 801eefa:	4770      	bx	lr
 801eefc:	2000      	movs	r0, #0
 801eefe:	e7ea      	b.n	801eed6 <_ZN8touchgfx4clzuEm+0xe>
 801ef00:	2020      	movs	r0, #32
 801ef02:	4770      	bx	lr

0801ef04 <_ZN8touchgfx7muldivuEmmmRm>:
 801ef04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ef08:	460f      	mov	r7, r1
 801ef0a:	4615      	mov	r5, r2
 801ef0c:	461e      	mov	r6, r3
 801ef0e:	4601      	mov	r1, r0
 801ef10:	b100      	cbz	r0, 801ef14 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801ef12:	b927      	cbnz	r7, 801ef1e <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801ef14:	2000      	movs	r0, #0
 801ef16:	6030      	str	r0, [r6, #0]
 801ef18:	b002      	add	sp, #8
 801ef1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef1e:	f7ff ffd3 	bl	801eec8 <_ZN8touchgfx4clzuEm>
 801ef22:	b980      	cbnz	r0, 801ef46 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801ef24:	4638      	mov	r0, r7
 801ef26:	f7ff ffcf 	bl	801eec8 <_ZN8touchgfx4clzuEm>
 801ef2a:	2800      	cmp	r0, #0
 801ef2c:	dd05      	ble.n	801ef3a <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801ef2e:	4633      	mov	r3, r6
 801ef30:	462a      	mov	r2, r5
 801ef32:	4638      	mov	r0, r7
 801ef34:	f7ff ffe6 	bl	801ef04 <_ZN8touchgfx7muldivuEmmmRm>
 801ef38:	e7ee      	b.n	801ef18 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ef3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ef3e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801ef42:	6033      	str	r3, [r6, #0]
 801ef44:	e7e8      	b.n	801ef18 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ef46:	fa37 f800 	lsrs.w	r8, r7, r0
 801ef4a:	fb07 f301 	mul.w	r3, r7, r1
 801ef4e:	d105      	bne.n	801ef5c <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801ef50:	fbb3 f0f5 	udiv	r0, r3, r5
 801ef54:	fb05 3510 	mls	r5, r5, r0, r3
 801ef58:	6035      	str	r5, [r6, #0]
 801ef5a:	e7dd      	b.n	801ef18 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ef5c:	2301      	movs	r3, #1
 801ef5e:	fa01 fa00 	lsl.w	sl, r1, r0
 801ef62:	fa03 f000 	lsl.w	r0, r3, r0
 801ef66:	3801      	subs	r0, #1
 801ef68:	462a      	mov	r2, r5
 801ef6a:	4633      	mov	r3, r6
 801ef6c:	4038      	ands	r0, r7
 801ef6e:	f7ff ffc9 	bl	801ef04 <_ZN8touchgfx7muldivuEmmmRm>
 801ef72:	fbba f9f5 	udiv	r9, sl, r5
 801ef76:	462a      	mov	r2, r5
 801ef78:	4607      	mov	r7, r0
 801ef7a:	ab01      	add	r3, sp, #4
 801ef7c:	fb05 a119 	mls	r1, r5, r9, sl
 801ef80:	4640      	mov	r0, r8
 801ef82:	f7ff ffbf 	bl	801ef04 <_ZN8touchgfx7muldivuEmmmRm>
 801ef86:	9b01      	ldr	r3, [sp, #4]
 801ef88:	6832      	ldr	r2, [r6, #0]
 801ef8a:	fb08 f409 	mul.w	r4, r8, r9
 801ef8e:	441a      	add	r2, r3
 801ef90:	fbb2 f3f5 	udiv	r3, r2, r5
 801ef94:	441c      	add	r4, r3
 801ef96:	443c      	add	r4, r7
 801ef98:	4420      	add	r0, r4
 801ef9a:	fb05 2513 	mls	r5, r5, r3, r2
 801ef9e:	e7db      	b.n	801ef58 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801efa0 <_ZN8touchgfx6muldivElllRl>:
 801efa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801efa2:	2800      	cmp	r0, #0
 801efa4:	bfb6      	itet	lt
 801efa6:	f04f 34ff 	movlt.w	r4, #4294967295
 801efaa:	2401      	movge	r4, #1
 801efac:	4240      	neglt	r0, r0
 801efae:	2900      	cmp	r1, #0
 801efb0:	bfbc      	itt	lt
 801efb2:	4249      	neglt	r1, r1
 801efb4:	4264      	neglt	r4, r4
 801efb6:	2a00      	cmp	r2, #0
 801efb8:	bfb6      	itet	lt
 801efba:	4265      	neglt	r5, r4
 801efbc:	4625      	movge	r5, r4
 801efbe:	4252      	neglt	r2, r2
 801efc0:	4288      	cmp	r0, r1
 801efc2:	461e      	mov	r6, r3
 801efc4:	bfc2      	ittt	gt
 801efc6:	4603      	movgt	r3, r0
 801efc8:	4608      	movgt	r0, r1
 801efca:	4619      	movgt	r1, r3
 801efcc:	ab01      	add	r3, sp, #4
 801efce:	f7ff ff99 	bl	801ef04 <_ZN8touchgfx7muldivuEmmmRm>
 801efd2:	9b01      	ldr	r3, [sp, #4]
 801efd4:	4368      	muls	r0, r5
 801efd6:	435c      	muls	r4, r3
 801efd8:	6034      	str	r4, [r6, #0]
 801efda:	b002      	add	sp, #8
 801efdc:	bd70      	pop	{r4, r5, r6, pc}

0801efde <_ZN8touchgfx6muldivElll>:
 801efde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801efe0:	4606      	mov	r6, r0
 801efe2:	ab01      	add	r3, sp, #4
 801efe4:	460d      	mov	r5, r1
 801efe6:	4614      	mov	r4, r2
 801efe8:	f7ff ffda 	bl	801efa0 <_ZN8touchgfx6muldivElllRl>
 801efec:	2e00      	cmp	r6, #0
 801efee:	db20      	blt.n	801f032 <_ZN8touchgfx6muldivElll+0x54>
 801eff0:	bf14      	ite	ne
 801eff2:	2301      	movne	r3, #1
 801eff4:	2300      	moveq	r3, #0
 801eff6:	2d00      	cmp	r5, #0
 801eff8:	db1e      	blt.n	801f038 <_ZN8touchgfx6muldivElll+0x5a>
 801effa:	bf14      	ite	ne
 801effc:	2201      	movne	r2, #1
 801effe:	2200      	moveq	r2, #0
 801f000:	2c00      	cmp	r4, #0
 801f002:	fb03 f202 	mul.w	r2, r3, r2
 801f006:	db1a      	blt.n	801f03e <_ZN8touchgfx6muldivElll+0x60>
 801f008:	bf14      	ite	ne
 801f00a:	2301      	movne	r3, #1
 801f00c:	2300      	moveq	r3, #0
 801f00e:	4353      	muls	r3, r2
 801f010:	2b01      	cmp	r3, #1
 801f012:	d117      	bne.n	801f044 <_ZN8touchgfx6muldivElll+0x66>
 801f014:	9b01      	ldr	r3, [sp, #4]
 801f016:	2c00      	cmp	r4, #0
 801f018:	bfb8      	it	lt
 801f01a:	4264      	neglt	r4, r4
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	f104 0401 	add.w	r4, r4, #1
 801f022:	bfb8      	it	lt
 801f024:	425b      	neglt	r3, r3
 801f026:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801f02a:	db00      	blt.n	801f02e <_ZN8touchgfx6muldivElll+0x50>
 801f02c:	3001      	adds	r0, #1
 801f02e:	b002      	add	sp, #8
 801f030:	bd70      	pop	{r4, r5, r6, pc}
 801f032:	f04f 33ff 	mov.w	r3, #4294967295
 801f036:	e7de      	b.n	801eff6 <_ZN8touchgfx6muldivElll+0x18>
 801f038:	f04f 32ff 	mov.w	r2, #4294967295
 801f03c:	e7e0      	b.n	801f000 <_ZN8touchgfx6muldivElll+0x22>
 801f03e:	f04f 33ff 	mov.w	r3, #4294967295
 801f042:	e7e4      	b.n	801f00e <_ZN8touchgfx6muldivElll+0x30>
 801f044:	3301      	adds	r3, #1
 801f046:	d1f2      	bne.n	801f02e <_ZN8touchgfx6muldivElll+0x50>
 801f048:	9b01      	ldr	r3, [sp, #4]
 801f04a:	2c00      	cmp	r4, #0
 801f04c:	bfb8      	it	lt
 801f04e:	4264      	neglt	r4, r4
 801f050:	2b00      	cmp	r3, #0
 801f052:	bfb8      	it	lt
 801f054:	425b      	neglt	r3, r3
 801f056:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801f05a:	bfc8      	it	gt
 801f05c:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801f060:	e7e5      	b.n	801f02e <_ZN8touchgfx6muldivElll+0x50>

0801f062 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801f062:	2000      	movs	r0, #0
 801f064:	4770      	bx	lr

0801f066 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801f066:	2001      	movs	r0, #1
 801f068:	4770      	bx	lr

0801f06a <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801f06a:	2002      	movs	r0, #2
 801f06c:	4770      	bx	lr

0801f06e <_ZN8touchgfx12GestureEventD1Ev>:
 801f06e:	4770      	bx	lr

0801f070 <_ZN8touchgfx9DragEventD1Ev>:
 801f070:	4770      	bx	lr

0801f072 <_ZN8touchgfx10ClickEventD1Ev>:
 801f072:	4770      	bx	lr

0801f074 <_ZN8touchgfx10ClickEventD0Ev>:
 801f074:	b510      	push	{r4, lr}
 801f076:	4604      	mov	r4, r0
 801f078:	210c      	movs	r1, #12
 801f07a:	f010 fc60 	bl	802f93e <_ZdlPvj>
 801f07e:	4620      	mov	r0, r4
 801f080:	bd10      	pop	{r4, pc}

0801f082 <_ZN8touchgfx9DragEventD0Ev>:
 801f082:	b510      	push	{r4, lr}
 801f084:	4604      	mov	r4, r0
 801f086:	2110      	movs	r1, #16
 801f088:	f010 fc59 	bl	802f93e <_ZdlPvj>
 801f08c:	4620      	mov	r0, r4
 801f08e:	bd10      	pop	{r4, pc}

0801f090 <_ZN8touchgfx12GestureEventD0Ev>:
 801f090:	b510      	push	{r4, lr}
 801f092:	4604      	mov	r4, r0
 801f094:	210c      	movs	r1, #12
 801f096:	f010 fc52 	bl	802f93e <_ZdlPvj>
 801f09a:	4620      	mov	r0, r4
 801f09c:	bd10      	pop	{r4, pc}
	...

0801f0a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f0a0:	b530      	push	{r4, r5, lr}
 801f0a2:	460d      	mov	r5, r1
 801f0a4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801f0a6:	b087      	sub	sp, #28
 801f0a8:	4604      	mov	r4, r0
 801f0aa:	b301      	cbz	r1, 801f0ee <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f0ac:	a801      	add	r0, sp, #4
 801f0ae:	f7ff fe67 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f0b2:	892a      	ldrh	r2, [r5, #8]
 801f0b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f0b8:	7928      	ldrb	r0, [r5, #4]
 801f0ba:	1ad2      	subs	r2, r2, r3
 801f0bc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801f0be:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f0c2:	441a      	add	r2, r3
 801f0c4:	896b      	ldrh	r3, [r5, #10]
 801f0c6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f0ca:	f88d 0010 	strb.w	r0, [sp, #16]
 801f0ce:	1b5b      	subs	r3, r3, r5
 801f0d0:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801f0d2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801f0d4:	442b      	add	r3, r5
 801f0d6:	4d07      	ldr	r5, [pc, #28]	@ (801f0f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f0d8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f0dc:	9503      	str	r5, [sp, #12]
 801f0de:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f0e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f0e6:	6803      	ldr	r3, [r0, #0]
 801f0e8:	a903      	add	r1, sp, #12
 801f0ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f0ec:	4798      	blx	r3
 801f0ee:	b007      	add	sp, #28
 801f0f0:	bd30      	pop	{r4, r5, pc}
 801f0f2:	bf00      	nop
 801f0f4:	080338b4 	.word	0x080338b4

0801f0f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801f0fe:	b08a      	sub	sp, #40	@ 0x28
 801f100:	4604      	mov	r4, r0
 801f102:	460d      	mov	r5, r1
 801f104:	b113      	cbz	r3, 801f10c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801f106:	790b      	ldrb	r3, [r1, #4]
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d044      	beq.n	801f196 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f10c:	f104 0804 	add.w	r8, r4, #4
 801f110:	4641      	mov	r1, r8
 801f112:	a803      	add	r0, sp, #12
 801f114:	f7ff fe34 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f118:	792b      	ldrb	r3, [r5, #4]
 801f11a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801f11e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801f122:	b983      	cbnz	r3, 801f146 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801f124:	892a      	ldrh	r2, [r5, #8]
 801f126:	88e9      	ldrh	r1, [r5, #6]
 801f128:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801f12c:	1b92      	subs	r2, r2, r6
 801f12e:	1bc9      	subs	r1, r1, r7
 801f130:	9301      	str	r3, [sp, #4]
 801f132:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801f136:	9300      	str	r3, [sp, #0]
 801f138:	b212      	sxth	r2, r2
 801f13a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801f13e:	b209      	sxth	r1, r1
 801f140:	4640      	mov	r0, r8
 801f142:	f7f9 f9ed 	bl	8018520 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801f146:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f148:	b329      	cbz	r1, 801f196 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f14a:	a805      	add	r0, sp, #20
 801f14c:	f7ff fe18 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f150:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f154:	792b      	ldrb	r3, [r5, #4]
 801f156:	1abf      	subs	r7, r7, r2
 801f158:	88ea      	ldrh	r2, [r5, #6]
 801f15a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801f15c:	4417      	add	r7, r2
 801f15e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801f160:	f88d 3020 	strb.w	r3, [sp, #32]
 801f164:	4417      	add	r7, r2
 801f166:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f16a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801f16e:	1ab6      	subs	r6, r6, r2
 801f170:	892a      	ldrh	r2, [r5, #8]
 801f172:	a907      	add	r1, sp, #28
 801f174:	4416      	add	r6, r2
 801f176:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801f178:	4416      	add	r6, r2
 801f17a:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801f17e:	2600      	movs	r6, #0
 801f180:	4a06      	ldr	r2, [pc, #24]	@ (801f19c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801f182:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801f186:	9207      	str	r2, [sp, #28]
 801f188:	6803      	ldr	r3, [r0, #0]
 801f18a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f18c:	4798      	blx	r3
 801f18e:	792b      	ldrb	r3, [r5, #4]
 801f190:	b10b      	cbz	r3, 801f196 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f192:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801f196:	b00a      	add	sp, #40	@ 0x28
 801f198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f19c:	0803388c 	.word	0x0803388c

0801f1a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1a4:	460c      	mov	r4, r1
 801f1a6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801f1a8:	b088      	sub	sp, #32
 801f1aa:	4605      	mov	r5, r0
 801f1ac:	2900      	cmp	r1, #0
 801f1ae:	d06d      	beq.n	801f28c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801f1b0:	4668      	mov	r0, sp
 801f1b2:	f7ff fde5 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f1b6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801f1b8:	88e3      	ldrh	r3, [r4, #6]
 801f1ba:	f9bd 8000 	ldrsh.w	r8, [sp]
 801f1be:	440b      	add	r3, r1
 801f1c0:	b21b      	sxth	r3, r3
 801f1c2:	4543      	cmp	r3, r8
 801f1c4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801f1c8:	db31      	blt.n	801f22e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f1ca:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801f1ce:	44c4      	add	ip, r8
 801f1d0:	fa0f fc8c 	sxth.w	ip, ip
 801f1d4:	4563      	cmp	r3, ip
 801f1d6:	da2a      	bge.n	801f22e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f1d8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801f1da:	8926      	ldrh	r6, [r4, #8]
 801f1dc:	4416      	add	r6, r2
 801f1de:	b236      	sxth	r6, r6
 801f1e0:	42be      	cmp	r6, r7
 801f1e2:	db24      	blt.n	801f22e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f1e4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f1e8:	4438      	add	r0, r7
 801f1ea:	b200      	sxth	r0, r0
 801f1ec:	4286      	cmp	r6, r0
 801f1ee:	da1e      	bge.n	801f22e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f1f0:	8963      	ldrh	r3, [r4, #10]
 801f1f2:	4419      	add	r1, r3
 801f1f4:	b209      	sxth	r1, r1
 801f1f6:	4541      	cmp	r1, r8
 801f1f8:	db08      	blt.n	801f20c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f1fa:	4561      	cmp	r1, ip
 801f1fc:	da06      	bge.n	801f20c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f1fe:	89a3      	ldrh	r3, [r4, #12]
 801f200:	441a      	add	r2, r3
 801f202:	b212      	sxth	r2, r2
 801f204:	42ba      	cmp	r2, r7
 801f206:	db01      	blt.n	801f20c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f208:	4282      	cmp	r2, r0
 801f20a:	db10      	blt.n	801f22e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f20c:	4b21      	ldr	r3, [pc, #132]	@ (801f294 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801f20e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801f210:	9304      	str	r3, [sp, #16]
 801f212:	2302      	movs	r3, #2
 801f214:	f88d 3014 	strb.w	r3, [sp, #20]
 801f218:	2300      	movs	r3, #0
 801f21a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f21e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f222:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f226:	6803      	ldr	r3, [r0, #0]
 801f228:	a904      	add	r1, sp, #16
 801f22a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f22c:	4798      	blx	r3
 801f22e:	1d29      	adds	r1, r5, #4
 801f230:	a802      	add	r0, sp, #8
 801f232:	f7ff fda5 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f236:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f23a:	88e0      	ldrh	r0, [r4, #6]
 801f23c:	eba3 0808 	sub.w	r8, r3, r8
 801f240:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f244:	7921      	ldrb	r1, [r4, #4]
 801f246:	1bdf      	subs	r7, r3, r7
 801f248:	b2bb      	uxth	r3, r7
 801f24a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801f24e:	fa1f f888 	uxth.w	r8, r8
 801f252:	8922      	ldrh	r2, [r4, #8]
 801f254:	8967      	ldrh	r7, [r4, #10]
 801f256:	89a4      	ldrh	r4, [r4, #12]
 801f258:	4440      	add	r0, r8
 801f25a:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801f25c:	4460      	add	r0, ip
 801f25e:	441a      	add	r2, r3
 801f260:	44b8      	add	r8, r7
 801f262:	4423      	add	r3, r4
 801f264:	4c0c      	ldr	r4, [pc, #48]	@ (801f298 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801f266:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f26a:	4433      	add	r3, r6
 801f26c:	4432      	add	r2, r6
 801f26e:	44e0      	add	r8, ip
 801f270:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801f272:	f88d 1014 	strb.w	r1, [sp, #20]
 801f276:	9404      	str	r4, [sp, #16]
 801f278:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f27c:	f8ad 801a 	strh.w	r8, [sp, #26]
 801f280:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f284:	6803      	ldr	r3, [r0, #0]
 801f286:	a904      	add	r1, sp, #16
 801f288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f28a:	4798      	blx	r3
 801f28c:	b008      	add	sp, #32
 801f28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f292:	bf00      	nop
 801f294:	0803388c 	.word	0x0803388c
 801f298:	080338a0 	.word	0x080338a0

0801f29c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f29c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f29e:	4604      	mov	r4, r0
 801f2a0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f2a4:	3201      	adds	r2, #1
 801f2a6:	d112      	bne.n	801f2ce <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801f2a8:	2500      	movs	r5, #0
 801f2aa:	9500      	str	r5, [sp, #0]
 801f2ac:	466d      	mov	r5, sp
 801f2ae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f2b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f2b6:	6803      	ldr	r3, [r0, #0]
 801f2b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f2bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f2c0:	4629      	mov	r1, r5
 801f2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2c4:	4798      	blx	r3
 801f2c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f2ca:	e884 0003 	stmia.w	r4, {r0, r1}
 801f2ce:	4620      	mov	r0, r4
 801f2d0:	b003      	add	sp, #12
 801f2d2:	bd30      	pop	{r4, r5, pc}

0801f2d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f2d4:	b513      	push	{r0, r1, r4, lr}
 801f2d6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f2da:	4604      	mov	r4, r0
 801f2dc:	3301      	adds	r3, #1
 801f2de:	d109      	bne.n	801f2f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f2e0:	4601      	mov	r1, r0
 801f2e2:	4668      	mov	r0, sp
 801f2e4:	f7ff fd4c 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f2e8:	f8bd 3000 	ldrh.w	r3, [sp]
 801f2ec:	8423      	strh	r3, [r4, #32]
 801f2ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f2f2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801f2f4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f2f8:	b002      	add	sp, #8
 801f2fa:	bd10      	pop	{r4, pc}

0801f2fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f2fc:	b513      	push	{r0, r1, r4, lr}
 801f2fe:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801f302:	4604      	mov	r4, r0
 801f304:	3301      	adds	r3, #1
 801f306:	d109      	bne.n	801f31c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f308:	4601      	mov	r1, r0
 801f30a:	4668      	mov	r0, sp
 801f30c:	f7ff fd38 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f310:	f8bd 3000 	ldrh.w	r3, [sp]
 801f314:	8423      	strh	r3, [r4, #32]
 801f316:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f31a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801f31c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801f320:	b002      	add	sp, #8
 801f322:	bd10      	pop	{r4, pc}

0801f324 <_ZN8touchgfx6ScreenC1Ev>:
 801f324:	b570      	push	{r4, r5, r6, lr}
 801f326:	4605      	mov	r5, r0
 801f328:	4b16      	ldr	r3, [pc, #88]	@ (801f384 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801f32a:	2101      	movs	r1, #1
 801f32c:	f845 3b04 	str.w	r3, [r5], #4
 801f330:	2300      	movs	r3, #0
 801f332:	4604      	mov	r4, r0
 801f334:	8103      	strh	r3, [r0, #8]
 801f336:	8143      	strh	r3, [r0, #10]
 801f338:	8183      	strh	r3, [r0, #12]
 801f33a:	81c3      	strh	r3, [r0, #14]
 801f33c:	8203      	strh	r3, [r0, #16]
 801f33e:	8243      	strh	r3, [r0, #18]
 801f340:	8283      	strh	r3, [r0, #20]
 801f342:	82c3      	strh	r3, [r0, #22]
 801f344:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801f348:	6203      	str	r3, [r0, #32]
 801f34a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801f34c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801f34e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801f352:	4a0d      	ldr	r2, [pc, #52]	@ (801f388 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801f354:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801f358:	6343      	str	r3, [r0, #52]	@ 0x34
 801f35a:	4b0c      	ldr	r3, [pc, #48]	@ (801f38c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801f35c:	6042      	str	r2, [r0, #4]
 801f35e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f362:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801f364:	4a0a      	ldr	r2, [pc, #40]	@ (801f390 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801f366:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801f36a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801f36e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f372:	4628      	mov	r0, r5
 801f374:	4798      	blx	r3
 801f376:	6863      	ldr	r3, [r4, #4]
 801f378:	4628      	mov	r0, r5
 801f37a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f37c:	4631      	mov	r1, r6
 801f37e:	4798      	blx	r3
 801f380:	4620      	mov	r0, r4
 801f382:	bd70      	pop	{r4, r5, r6, pc}
 801f384:	080338c8 	.word	0x080338c8
 801f388:	08032cc4 	.word	0x08032cc4
 801f38c:	20011ff2 	.word	0x20011ff2
 801f390:	20011ff0 	.word	0x20011ff0

0801f394 <_ZN8touchgfx6Screen4drawEv>:
 801f394:	b507      	push	{r0, r1, r2, lr}
 801f396:	2100      	movs	r1, #0
 801f398:	4b08      	ldr	r3, [pc, #32]	@ (801f3bc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801f39a:	9100      	str	r1, [sp, #0]
 801f39c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f3a0:	4b07      	ldr	r3, [pc, #28]	@ (801f3c0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801f3a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f3a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f3aa:	4669      	mov	r1, sp
 801f3ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f3b0:	6803      	ldr	r3, [r0, #0]
 801f3b2:	689b      	ldr	r3, [r3, #8]
 801f3b4:	4798      	blx	r3
 801f3b6:	b003      	add	sp, #12
 801f3b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801f3bc:	20011ff0 	.word	0x20011ff0
 801f3c0:	20011ff2 	.word	0x20011ff2

0801f3c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801f3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3c8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f3cc:	b089      	sub	sp, #36	@ 0x24
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	4680      	mov	r8, r0
 801f3d2:	460c      	mov	r4, r1
 801f3d4:	4615      	mov	r5, r2
 801f3d6:	dd0e      	ble.n	801f3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f3d8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	dd0a      	ble.n	801f3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f3e0:	4628      	mov	r0, r5
 801f3e2:	f7ff ff5b 	bl	801f29c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f3e6:	4621      	mov	r1, r4
 801f3e8:	f7fe fb20 	bl	801da2c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f3ec:	69eb      	ldr	r3, [r5, #28]
 801f3ee:	b928      	cbnz	r0, 801f3fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801f3f0:	461d      	mov	r5, r3
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d1f4      	bne.n	801f3e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801f3f6:	b009      	add	sp, #36	@ 0x24
 801f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3fc:	ae04      	add	r6, sp, #16
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	f000 80b5 	beq.w	801f56e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f404:	682b      	ldr	r3, [r5, #0]
 801f406:	4629      	mov	r1, r5
 801f408:	68db      	ldr	r3, [r3, #12]
 801f40a:	a802      	add	r0, sp, #8
 801f40c:	4798      	blx	r3
 801f40e:	4628      	mov	r0, r5
 801f410:	f7ff ff60 	bl	801f2d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f414:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801f418:	4407      	add	r7, r0
 801f41a:	4628      	mov	r0, r5
 801f41c:	f7ff ff6e 	bl	801f2fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f420:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f424:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f428:	4418      	add	r0, r3
 801f42a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f42e:	4621      	mov	r1, r4
 801f430:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f434:	b23f      	sxth	r7, r7
 801f436:	4630      	mov	r0, r6
 801f438:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f43c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f440:	f8ad 7010 	strh.w	r7, [sp, #16]
 801f444:	f7f9 f94c 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801f448:	4628      	mov	r0, r5
 801f44a:	f7ff ff27 	bl	801f29c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f44e:	4602      	mov	r2, r0
 801f450:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f454:	ab06      	add	r3, sp, #24
 801f456:	e883 0003 	stmia.w	r3, {r0, r1}
 801f45a:	4611      	mov	r1, r2
 801f45c:	4618      	mov	r0, r3
 801f45e:	f7f9 f93f 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801f462:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801f466:	f9b4 1000 	ldrsh.w	r1, [r4]
 801f46a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801f46e:	4299      	cmp	r1, r3
 801f470:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801f474:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801f478:	d10b      	bne.n	801f492 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801f47a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f47e:	4552      	cmp	r2, sl
 801f480:	d107      	bne.n	801f492 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801f482:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f486:	455a      	cmp	r2, fp
 801f488:	d103      	bne.n	801f492 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801f48a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f48e:	454a      	cmp	r2, r9
 801f490:	d06d      	beq.n	801f56e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f492:	f1bb 0f00 	cmp.w	fp, #0
 801f496:	dd65      	ble.n	801f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801f498:	f1b9 0f00 	cmp.w	r9, #0
 801f49c:	dd62      	ble.n	801f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801f49e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f4a2:	fa1f f08a 	uxth.w	r0, sl
 801f4a6:	4552      	cmp	r2, sl
 801f4a8:	9000      	str	r0, [sp, #0]
 801f4aa:	da12      	bge.n	801f4d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801f4ac:	9301      	str	r3, [sp, #4]
 801f4ae:	9b00      	ldr	r3, [sp, #0]
 801f4b0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f4b4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801f4b8:	1a9a      	subs	r2, r3, r2
 801f4ba:	f8ad 1010 	strh.w	r1, [sp, #16]
 801f4be:	f8ad 0014 	strh.w	r0, [sp, #20]
 801f4c2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801f4c6:	69ea      	ldr	r2, [r5, #28]
 801f4c8:	4631      	mov	r1, r6
 801f4ca:	4640      	mov	r0, r8
 801f4cc:	f7ff ff7a 	bl	801f3c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f4d0:	9b01      	ldr	r3, [sp, #4]
 801f4d2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f4d6:	b29f      	uxth	r7, r3
 801f4d8:	429a      	cmp	r2, r3
 801f4da:	da0d      	bge.n	801f4f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801f4dc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f4e0:	1aba      	subs	r2, r7, r2
 801f4e2:	f8ad a012 	strh.w	sl, [sp, #18]
 801f4e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f4ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 801f4ee:	69ea      	ldr	r2, [r5, #28]
 801f4f0:	4631      	mov	r1, r6
 801f4f2:	4640      	mov	r0, r8
 801f4f4:	f7ff ff66 	bl	801f3c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f4f8:	8822      	ldrh	r2, [r4, #0]
 801f4fa:	88a3      	ldrh	r3, [r4, #4]
 801f4fc:	445f      	add	r7, fp
 801f4fe:	4413      	add	r3, r2
 801f500:	b29b      	uxth	r3, r3
 801f502:	b2bf      	uxth	r7, r7
 801f504:	b23a      	sxth	r2, r7
 801f506:	b219      	sxth	r1, r3
 801f508:	4291      	cmp	r1, r2
 801f50a:	dd0d      	ble.n	801f528 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801f50c:	1bdb      	subs	r3, r3, r7
 801f50e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f512:	f8ad a012 	strh.w	sl, [sp, #18]
 801f516:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f51a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801f51e:	69ea      	ldr	r2, [r5, #28]
 801f520:	4631      	mov	r1, r6
 801f522:	4640      	mov	r0, r8
 801f524:	f7ff ff4e 	bl	801f3c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f528:	88e2      	ldrh	r2, [r4, #6]
 801f52a:	8863      	ldrh	r3, [r4, #2]
 801f52c:	4413      	add	r3, r2
 801f52e:	9a00      	ldr	r2, [sp, #0]
 801f530:	b29b      	uxth	r3, r3
 801f532:	444a      	add	r2, r9
 801f534:	fa1f f982 	uxth.w	r9, r2
 801f538:	fa0f f289 	sxth.w	r2, r9
 801f53c:	b219      	sxth	r1, r3
 801f53e:	428a      	cmp	r2, r1
 801f540:	da15      	bge.n	801f56e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f542:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f546:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f54a:	eba3 0309 	sub.w	r3, r3, r9
 801f54e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f552:	f8ad 0010 	strh.w	r0, [sp, #16]
 801f556:	f8ad 2012 	strh.w	r2, [sp, #18]
 801f55a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f55e:	69ea      	ldr	r2, [r5, #28]
 801f560:	4631      	mov	r1, r6
 801f562:	e001      	b.n	801f568 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801f564:	4621      	mov	r1, r4
 801f566:	69ea      	ldr	r2, [r5, #28]
 801f568:	4640      	mov	r0, r8
 801f56a:	f7ff ff2b 	bl	801f3c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f56e:	4628      	mov	r0, r5
 801f570:	f7ff fe94 	bl	801f29c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f574:	4633      	mov	r3, r6
 801f576:	4602      	mov	r2, r0
 801f578:	6861      	ldr	r1, [r4, #4]
 801f57a:	6820      	ldr	r0, [r4, #0]
 801f57c:	c303      	stmia	r3!, {r0, r1}
 801f57e:	4611      	mov	r1, r2
 801f580:	4630      	mov	r0, r6
 801f582:	f7f9 f8ad 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801f586:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	f77f af33 	ble.w	801f3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f590:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801f594:	2b00      	cmp	r3, #0
 801f596:	f77f af2e 	ble.w	801f3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f59a:	4628      	mov	r0, r5
 801f59c:	f7ff fe9a 	bl	801f2d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f5a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f5a4:	1a18      	subs	r0, r3, r0
 801f5a6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801f5aa:	4628      	mov	r0, r5
 801f5ac:	f7ff fea6 	bl	801f2fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f5b0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f5b4:	4631      	mov	r1, r6
 801f5b6:	1a18      	subs	r0, r3, r0
 801f5b8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f5bc:	682b      	ldr	r3, [r5, #0]
 801f5be:	4628      	mov	r0, r5
 801f5c0:	689b      	ldr	r3, [r3, #8]
 801f5c2:	4798      	blx	r3
 801f5c4:	e717      	b.n	801f3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801f5c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801f5c6:	b570      	push	{r4, r5, r6, lr}
 801f5c8:	2300      	movs	r3, #0
 801f5ca:	460c      	mov	r4, r1
 801f5cc:	b086      	sub	sp, #24
 801f5ce:	1d06      	adds	r6, r0, #4
 801f5d0:	4631      	mov	r1, r6
 801f5d2:	4605      	mov	r5, r0
 801f5d4:	a802      	add	r0, sp, #8
 801f5d6:	9301      	str	r3, [sp, #4]
 801f5d8:	f7ff fbd2 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f5dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f5e0:	8822      	ldrh	r2, [r4, #0]
 801f5e2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801f5e6:	1ad2      	subs	r2, r2, r3
 801f5e8:	8863      	ldrh	r3, [r4, #2]
 801f5ea:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f5ee:	1a5b      	subs	r3, r3, r1
 801f5f0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f5f4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f5f8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801f5fc:	f8ad 1016 	strh.w	r1, [sp, #22]
 801f600:	aa01      	add	r2, sp, #4
 801f602:	a904      	add	r1, sp, #16
 801f604:	4630      	mov	r0, r6
 801f606:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f60a:	f7f9 f941 	bl	8018890 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801f60e:	9a01      	ldr	r2, [sp, #4]
 801f610:	b11a      	cbz	r2, 801f61a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801f612:	4621      	mov	r1, r4
 801f614:	4628      	mov	r0, r5
 801f616:	f7ff fed5 	bl	801f3c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f61a:	b006      	add	sp, #24
 801f61c:	bd70      	pop	{r4, r5, r6, pc}

0801f61e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801f61e:	b530      	push	{r4, r5, lr}
 801f620:	4602      	mov	r2, r0
 801f622:	b085      	sub	sp, #20
 801f624:	460d      	mov	r5, r1
 801f626:	466b      	mov	r3, sp
 801f628:	4604      	mov	r4, r0
 801f62a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801f62e:	6851      	ldr	r1, [r2, #4]
 801f630:	c303      	stmia	r3!, {r0, r1}
 801f632:	4629      	mov	r1, r5
 801f634:	4668      	mov	r0, sp
 801f636:	f7f9 f853 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 801f63a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801f63e:	b12b      	cbz	r3, 801f64c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801f640:	4669      	mov	r1, sp
 801f642:	4620      	mov	r0, r4
 801f644:	f7ff ffbf 	bl	801f5c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801f648:	b005      	add	sp, #20
 801f64a:	bd30      	pop	{r4, r5, pc}
 801f64c:	3404      	adds	r4, #4
 801f64e:	4621      	mov	r1, r4
 801f650:	a802      	add	r0, sp, #8
 801f652:	f7ff fb95 	bl	801ed80 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f656:	f8bd 3000 	ldrh.w	r3, [sp]
 801f65a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f65e:	4669      	mov	r1, sp
 801f660:	1a9b      	subs	r3, r3, r2
 801f662:	f8ad 3000 	strh.w	r3, [sp]
 801f666:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f66a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f66e:	4620      	mov	r0, r4
 801f670:	1a9b      	subs	r3, r3, r2
 801f672:	f8ad 3002 	strh.w	r3, [sp, #2]
 801f676:	f7f9 f8d2 	bl	801881e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801f67a:	e7e5      	b.n	801f648 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801f67c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801f67c:	460b      	mov	r3, r1
 801f67e:	680a      	ldr	r2, [r1, #0]
 801f680:	1d01      	adds	r1, r0, #4
 801f682:	6992      	ldr	r2, [r2, #24]
 801f684:	4618      	mov	r0, r3
 801f686:	4710      	bx	r2

0801f688 <_ZN8touchgfx12TextProviderC1Ev>:
 801f688:	b538      	push	{r3, r4, r5, lr}
 801f68a:	2500      	movs	r5, #0
 801f68c:	2302      	movs	r3, #2
 801f68e:	4604      	mov	r4, r0
 801f690:	e9c0 5500 	strd	r5, r5, [r0]
 801f694:	7403      	strb	r3, [r0, #16]
 801f696:	6145      	str	r5, [r0, #20]
 801f698:	7605      	strb	r5, [r0, #24]
 801f69a:	83c5      	strh	r5, [r0, #30]
 801f69c:	8405      	strh	r5, [r0, #32]
 801f69e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801f6a0:	8705      	strh	r5, [r0, #56]	@ 0x38
 801f6a2:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801f6a4:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801f6a8:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801f6ac:	220e      	movs	r2, #14
 801f6ae:	4629      	mov	r1, r5
 801f6b0:	304c      	adds	r0, #76	@ 0x4c
 801f6b2:	f010 fb78 	bl	802fda6 <memset>
 801f6b6:	2301      	movs	r3, #1
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801f6be:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801f6c2:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801f6c6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801f6ca:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801f6ce:	f7f6 fa63 	bl	8015b98 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801f6d2:	4620      	mov	r0, r4
 801f6d4:	bd38      	pop	{r3, r4, r5, pc}

0801f6d6 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801f6d6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801f6d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f6dc:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801f6de:	fab0 f080 	clz	r0, r0
 801f6e2:	0940      	lsrs	r0, r0, #5
 801f6e4:	4770      	bx	lr

0801f6e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801f6e6:	b530      	push	{r4, r5, lr}
 801f6e8:	2500      	movs	r5, #0
 801f6ea:	2401      	movs	r4, #1
 801f6ec:	6843      	ldr	r3, [r0, #4]
 801f6ee:	b913      	cbnz	r3, 801f6f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801f6f0:	6803      	ldr	r3, [r0, #0]
 801f6f2:	b313      	cbz	r3, 801f73a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801f6f4:	6043      	str	r3, [r0, #4]
 801f6f6:	7e03      	ldrb	r3, [r0, #24]
 801f6f8:	b143      	cbz	r3, 801f70c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801f6fa:	6943      	ldr	r3, [r0, #20]
 801f6fc:	b12b      	cbz	r3, 801f70a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801f6fe:	881a      	ldrh	r2, [r3, #0]
 801f700:	b11a      	cbz	r2, 801f70a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801f702:	1c9a      	adds	r2, r3, #2
 801f704:	6142      	str	r2, [r0, #20]
 801f706:	8818      	ldrh	r0, [r3, #0]
 801f708:	bd30      	pop	{r4, r5, pc}
 801f70a:	7605      	strb	r5, [r0, #24]
 801f70c:	6843      	ldr	r3, [r0, #4]
 801f70e:	8819      	ldrh	r1, [r3, #0]
 801f710:	b199      	cbz	r1, 801f73a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801f712:	1c9a      	adds	r2, r3, #2
 801f714:	2902      	cmp	r1, #2
 801f716:	6042      	str	r2, [r0, #4]
 801f718:	d1f5      	bne.n	801f706 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801f71a:	7c03      	ldrb	r3, [r0, #16]
 801f71c:	2b01      	cmp	r3, #1
 801f71e:	d8e5      	bhi.n	801f6ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f720:	1c5a      	adds	r2, r3, #1
 801f722:	7402      	strb	r2, [r0, #16]
 801f724:	3302      	adds	r3, #2
 801f726:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801f72a:	6143      	str	r3, [r0, #20]
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	d0dd      	beq.n	801f6ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f730:	881b      	ldrh	r3, [r3, #0]
 801f732:	2b00      	cmp	r3, #0
 801f734:	d0da      	beq.n	801f6ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f736:	7604      	strb	r4, [r0, #24]
 801f738:	e7d8      	b.n	801f6ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801f73a:	2000      	movs	r0, #0
 801f73c:	e7e4      	b.n	801f708 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801f73e:	6001      	str	r1, [r0, #0]
 801f740:	2100      	movs	r1, #0
 801f742:	b430      	push	{r4, r5}
 801f744:	6041      	str	r1, [r0, #4]
 801f746:	6815      	ldr	r5, [r2, #0]
 801f748:	6085      	str	r5, [r0, #8]
 801f74a:	6852      	ldr	r2, [r2, #4]
 801f74c:	6443      	str	r3, [r0, #68]	@ 0x44
 801f74e:	9b02      	ldr	r3, [sp, #8]
 801f750:	60c2      	str	r2, [r0, #12]
 801f752:	7401      	strb	r1, [r0, #16]
 801f754:	6141      	str	r1, [r0, #20]
 801f756:	7601      	strb	r1, [r0, #24]
 801f758:	8701      	strh	r1, [r0, #56]	@ 0x38
 801f75a:	8401      	strh	r1, [r0, #32]
 801f75c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801f760:	6483      	str	r3, [r0, #72]	@ 0x48
 801f762:	bc30      	pop	{r4, r5}
 801f764:	f7f6 ba18 	b.w	8015b98 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801f768 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801f768:	b408      	push	{r3}
 801f76a:	b510      	push	{r4, lr}
 801f76c:	b085      	sub	sp, #20
 801f76e:	ac07      	add	r4, sp, #28
 801f770:	f854 3b04 	ldr.w	r3, [r4], #4
 801f774:	9300      	str	r3, [sp, #0]
 801f776:	4613      	mov	r3, r2
 801f778:	4622      	mov	r2, r4
 801f77a:	9403      	str	r4, [sp, #12]
 801f77c:	f7ff ffdf 	bl	801f73e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f780:	b005      	add	sp, #20
 801f782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f786:	b001      	add	sp, #4
 801f788:	4770      	bx	lr

0801f78a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801f78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f78c:	4605      	mov	r5, r0
 801f78e:	4608      	mov	r0, r1
 801f790:	b1e9      	cbz	r1, 801f7ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801f792:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801f796:	460b      	mov	r3, r1
 801f798:	4622      	mov	r2, r4
 801f79a:	f101 0708 	add.w	r7, r1, #8
 801f79e:	4626      	mov	r6, r4
 801f7a0:	6818      	ldr	r0, [r3, #0]
 801f7a2:	6859      	ldr	r1, [r3, #4]
 801f7a4:	3308      	adds	r3, #8
 801f7a6:	c603      	stmia	r6!, {r0, r1}
 801f7a8:	42bb      	cmp	r3, r7
 801f7aa:	4634      	mov	r4, r6
 801f7ac:	d1f7      	bne.n	801f79e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801f7ae:	6818      	ldr	r0, [r3, #0]
 801f7b0:	6030      	str	r0, [r6, #0]
 801f7b2:	4610      	mov	r0, r2
 801f7b4:	889b      	ldrh	r3, [r3, #4]
 801f7b6:	80b3      	strh	r3, [r6, #4]
 801f7b8:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801f7bc:	015b      	lsls	r3, r3, #5
 801f7be:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801f7c2:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801f7c6:	430b      	orrs	r3, r1
 801f7c8:	425b      	negs	r3, r3
 801f7ca:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801f7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f7d0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801f7d0:	b538      	push	{r3, r4, r5, lr}
 801f7d2:	460c      	mov	r4, r1
 801f7d4:	6811      	ldr	r1, [r2, #0]
 801f7d6:	4610      	mov	r0, r2
 801f7d8:	68cd      	ldr	r5, [r1, #12]
 801f7da:	4619      	mov	r1, r3
 801f7dc:	47a8      	blx	r5
 801f7de:	2800      	cmp	r0, #0
 801f7e0:	bf08      	it	eq
 801f7e2:	4620      	moveq	r0, r4
 801f7e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0801f7e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7ec:	468c      	mov	ip, r1
 801f7ee:	4605      	mov	r5, r0
 801f7f0:	4614      	mov	r4, r2
 801f7f2:	b942      	cbnz	r2, 801f806 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801f7f4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801f7f8:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801f7fc:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801f800:	4620      	mov	r0, r4
 801f802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f806:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801f80a:	7b50      	ldrb	r0, [r2, #13]
 801f80c:	8893      	ldrh	r3, [r2, #4]
 801f80e:	0106      	lsls	r6, r0, #4
 801f810:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801f814:	79e6      	ldrb	r6, [r4, #7]
 801f816:	4316      	orrs	r6, r2
 801f818:	185a      	adds	r2, r3, r1
 801f81a:	b291      	uxth	r1, r2
 801f81c:	291d      	cmp	r1, #29
 801f81e:	b2b7      	uxth	r7, r6
 801f820:	d87d      	bhi.n	801f91e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801f822:	2201      	movs	r2, #1
 801f824:	408a      	lsls	r2, r1
 801f826:	498a      	ldr	r1, [pc, #552]	@ (801fa50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801f828:	10f6      	asrs	r6, r6, #3
 801f82a:	420a      	tst	r2, r1
 801f82c:	d12d      	bne.n	801f88a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801f82e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801f832:	d074      	beq.n	801f91e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801f834:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801f838:	4623      	mov	r3, r4
 801f83a:	f104 0e08 	add.w	lr, r4, #8
 801f83e:	4614      	mov	r4, r2
 801f840:	4694      	mov	ip, r2
 801f842:	6818      	ldr	r0, [r3, #0]
 801f844:	6859      	ldr	r1, [r3, #4]
 801f846:	3308      	adds	r3, #8
 801f848:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801f84c:	4573      	cmp	r3, lr
 801f84e:	4662      	mov	r2, ip
 801f850:	d1f6      	bne.n	801f840 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801f852:	6818      	ldr	r0, [r3, #0]
 801f854:	f8cc 0000 	str.w	r0, [ip]
 801f858:	889b      	ldrh	r3, [r3, #4]
 801f85a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801f85e:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801f862:	b2b3      	uxth	r3, r6
 801f864:	1aca      	subs	r2, r1, r3
 801f866:	b292      	uxth	r2, r2
 801f868:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801f86c:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801f870:	10d2      	asrs	r2, r2, #3
 801f872:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801f876:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801f87a:	4302      	orrs	r2, r0
 801f87c:	1bcf      	subs	r7, r1, r7
 801f87e:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801f882:	1afb      	subs	r3, r7, r3
 801f884:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801f888:	e7ba      	b.n	801f800 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801f88a:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801f88e:	4623      	mov	r3, r4
 801f890:	f104 0808 	add.w	r8, r4, #8
 801f894:	4614      	mov	r4, r2
 801f896:	4696      	mov	lr, r2
 801f898:	6818      	ldr	r0, [r3, #0]
 801f89a:	6859      	ldr	r1, [r3, #4]
 801f89c:	3308      	adds	r3, #8
 801f89e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801f8a2:	4543      	cmp	r3, r8
 801f8a4:	4672      	mov	r2, lr
 801f8a6:	d1f6      	bne.n	801f896 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801f8a8:	6818      	ldr	r0, [r3, #0]
 801f8aa:	f8ce 0000 	str.w	r0, [lr]
 801f8ae:	889b      	ldrh	r3, [r3, #4]
 801f8b0:	f8ae 3004 	strh.w	r3, [lr, #4]
 801f8b4:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801f8b6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801f8ba:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801f8bc:	f640 6333 	movw	r3, #3635	@ 0xe33
 801f8c0:	4299      	cmp	r1, r3
 801f8c2:	d111      	bne.n	801f8e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801f8c4:	f8dc 3000 	ldr.w	r3, [ip]
 801f8c8:	4660      	mov	r0, ip
 801f8ca:	68db      	ldr	r3, [r3, #12]
 801f8cc:	4798      	blx	r3
 801f8ce:	7b41      	ldrb	r1, [r0, #13]
 801f8d0:	00cb      	lsls	r3, r1, #3
 801f8d2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801f8d6:	7a03      	ldrb	r3, [r0, #8]
 801f8d8:	4313      	orrs	r3, r2
 801f8da:	064a      	lsls	r2, r1, #25
 801f8dc:	bf44      	itt	mi
 801f8de:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801f8e2:	b21b      	sxthmi	r3, r3
 801f8e4:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801f8e8:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801f8ec:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801f8f0:	443b      	add	r3, r7
 801f8f2:	4433      	add	r3, r6
 801f8f4:	b29b      	uxth	r3, r3
 801f8f6:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801f8fa:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801f8fe:	10db      	asrs	r3, r3, #3
 801f900:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801f904:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801f908:	4313      	orrs	r3, r2
 801f90a:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801f90e:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801f912:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801f916:	1a9b      	subs	r3, r3, r2
 801f918:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801f91c:	e770      	b.n	801f800 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801f91e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801f922:	f023 0204 	bic.w	r2, r3, #4
 801f926:	428a      	cmp	r2, r1
 801f928:	d003      	beq.n	801f932 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801f92a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801f92e:	4293      	cmp	r3, r2
 801f930:	d137      	bne.n	801f9a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801f932:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801f936:	4622      	mov	r2, r4
 801f938:	f104 0808 	add.w	r8, r4, #8
 801f93c:	4634      	mov	r4, r6
 801f93e:	46b6      	mov	lr, r6
 801f940:	6810      	ldr	r0, [r2, #0]
 801f942:	6851      	ldr	r1, [r2, #4]
 801f944:	3208      	adds	r2, #8
 801f946:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801f94a:	4542      	cmp	r2, r8
 801f94c:	4676      	mov	r6, lr
 801f94e:	d1f6      	bne.n	801f93e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801f950:	6810      	ldr	r0, [r2, #0]
 801f952:	3b01      	subs	r3, #1
 801f954:	f8ce 0000 	str.w	r0, [lr]
 801f958:	8892      	ldrh	r2, [r2, #4]
 801f95a:	b29b      	uxth	r3, r3
 801f95c:	f8ae 2004 	strh.w	r2, [lr, #4]
 801f960:	4621      	mov	r1, r4
 801f962:	4662      	mov	r2, ip
 801f964:	4628      	mov	r0, r5
 801f966:	f7ff ff33 	bl	801f7d0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801f96a:	7b41      	ldrb	r1, [r0, #13]
 801f96c:	00cb      	lsls	r3, r1, #3
 801f96e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801f972:	7a03      	ldrb	r3, [r0, #8]
 801f974:	0648      	lsls	r0, r1, #25
 801f976:	ea43 0302 	orr.w	r3, r3, r2
 801f97a:	bf44      	itt	mi
 801f97c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801f980:	b21b      	sxthmi	r3, r3
 801f982:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801f986:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801f98a:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801f98e:	005b      	lsls	r3, r3, #1
 801f990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f994:	4313      	orrs	r3, r2
 801f996:	115a      	asrs	r2, r3, #5
 801f998:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801f99c:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801f9a0:	e046      	b.n	801fa30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801f9a2:	00c2      	lsls	r2, r0, #3
 801f9a4:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801f9a8:	7a22      	ldrb	r2, [r4, #8]
 801f9aa:	430a      	orrs	r2, r1
 801f9ac:	0641      	lsls	r1, r0, #25
 801f9ae:	f640 6109 	movw	r1, #3593	@ 0xe09
 801f9b2:	bf44      	itt	mi
 801f9b4:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801f9b8:	b212      	sxthmi	r2, r2
 801f9ba:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801f9be:	f023 0210 	bic.w	r2, r3, #16
 801f9c2:	428a      	cmp	r2, r1
 801f9c4:	d003      	beq.n	801f9ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801f9c6:	f640 6213 	movw	r2, #3603	@ 0xe13
 801f9ca:	4293      	cmp	r3, r2
 801f9cc:	d13d      	bne.n	801fa4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801f9ce:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801f9d2:	4696      	mov	lr, r2
 801f9d4:	f104 0808 	add.w	r8, r4, #8
 801f9d8:	4616      	mov	r6, r2
 801f9da:	6820      	ldr	r0, [r4, #0]
 801f9dc:	6861      	ldr	r1, [r4, #4]
 801f9de:	3408      	adds	r4, #8
 801f9e0:	c603      	stmia	r6!, {r0, r1}
 801f9e2:	4544      	cmp	r4, r8
 801f9e4:	4632      	mov	r2, r6
 801f9e6:	d1f7      	bne.n	801f9d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801f9e8:	6820      	ldr	r0, [r4, #0]
 801f9ea:	6030      	str	r0, [r6, #0]
 801f9ec:	88a1      	ldrh	r1, [r4, #4]
 801f9ee:	4628      	mov	r0, r5
 801f9f0:	80b1      	strh	r1, [r6, #4]
 801f9f2:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801f9f6:	4671      	mov	r1, lr
 801f9f8:	0076      	lsls	r6, r6, #1
 801f9fa:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801f9fe:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801fa02:	4674      	mov	r4, lr
 801fa04:	4316      	orrs	r6, r2
 801fa06:	f640 6213 	movw	r2, #3603	@ 0xe13
 801fa0a:	4293      	cmp	r3, r2
 801fa0c:	bf1a      	itte	ne
 801fa0e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801fa12:	b29b      	uxthne	r3, r3
 801fa14:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801fa18:	4662      	mov	r2, ip
 801fa1a:	f7ff fed9 	bl	801f7d0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801fa1e:	7b43      	ldrb	r3, [r0, #13]
 801fa20:	7a82      	ldrb	r2, [r0, #10]
 801fa22:	005b      	lsls	r3, r3, #1
 801fa24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801fa28:	4313      	orrs	r3, r2
 801fa2a:	1af6      	subs	r6, r6, r3
 801fa2c:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801fa30:	7b61      	ldrb	r1, [r4, #13]
 801fa32:	00cb      	lsls	r3, r1, #3
 801fa34:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801fa38:	7a23      	ldrb	r3, [r4, #8]
 801fa3a:	4313      	orrs	r3, r2
 801fa3c:	064a      	lsls	r2, r1, #25
 801fa3e:	bf44      	itt	mi
 801fa40:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801fa44:	b21b      	sxthmi	r3, r3
 801fa46:	1bdb      	subs	r3, r3, r7
 801fa48:	e71c      	b.n	801f884 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801fa4a:	2300      	movs	r3, #0
 801fa4c:	e7a6      	b.n	801f99c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801fa4e:	bf00      	nop
 801fa50:	3fc00079 	.word	0x3fc00079

0801fa54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801fa54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fa58:	4604      	mov	r4, r0
 801fa5a:	b942      	cbnz	r2, 801fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801fa5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fa60:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801fa64:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801fa68:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801fa6c:	e047      	b.n	801fafe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801fa6e:	7b51      	ldrb	r1, [r2, #13]
 801fa70:	8893      	ldrh	r3, [r2, #4]
 801fa72:	010d      	lsls	r5, r1, #4
 801fa74:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801fa78:	79d5      	ldrb	r5, [r2, #7]
 801fa7a:	4305      	orrs	r5, r0
 801fa7c:	2d04      	cmp	r5, #4
 801fa7e:	bfcc      	ite	gt
 801fa80:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801fa84:	f04f 0e01 	movle.w	lr, #1
 801fa88:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801fa8c:	f200 80ab 	bhi.w	801fbe6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801fa90:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801fa94:	4283      	cmp	r3, r0
 801fa96:	d216      	bcs.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fa98:	f240 605b 	movw	r0, #1627	@ 0x65b
 801fa9c:	4283      	cmp	r3, r0
 801fa9e:	d859      	bhi.n	801fb54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801faa0:	f240 6057 	movw	r0, #1623	@ 0x657
 801faa4:	4283      	cmp	r3, r0
 801faa6:	d20e      	bcs.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801faa8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801faac:	d24a      	bcs.n	801fb44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801faae:	f240 604e 	movw	r0, #1614	@ 0x64e
 801fab2:	4283      	cmp	r3, r0
 801fab4:	d207      	bcs.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fab6:	f240 601a 	movw	r0, #1562	@ 0x61a
 801faba:	4283      	cmp	r3, r0
 801fabc:	d02a      	beq.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fabe:	d821      	bhi.n	801fb04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801fac0:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801fac4:	d35b      	bcc.n	801fb7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801fac6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801faca:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801face:	f040 80d0 	bne.w	801fc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801fad2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801fad6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801fada:	f040 80ca 	bne.w	801fc72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801fade:	00cb      	lsls	r3, r1, #3
 801fae0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801fae4:	7a13      	ldrb	r3, [r2, #8]
 801fae6:	0649      	lsls	r1, r1, #25
 801fae8:	ea43 0300 	orr.w	r3, r3, r0
 801faec:	bf44      	itt	mi
 801faee:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801faf2:	b21b      	sxthmi	r3, r3
 801faf4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801faf8:	1b5d      	subs	r5, r3, r5
 801fafa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801fafe:	4610      	mov	r0, r2
 801fb00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb04:	f240 604b 	movw	r0, #1611	@ 0x64b
 801fb08:	4283      	cmp	r3, r0
 801fb0a:	d338      	bcc.n	801fb7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801fb0c:	f240 604c 	movw	r0, #1612	@ 0x64c
 801fb10:	4283      	cmp	r3, r0
 801fb12:	d9d8      	bls.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fb14:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801fb18:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801fb1c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801fb20:	f040 80f2 	bne.w	801fd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801fb24:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801fb28:	f040 80ee 	bne.w	801fd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801fb2c:	00cb      	lsls	r3, r1, #3
 801fb2e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801fb32:	7a13      	ldrb	r3, [r2, #8]
 801fb34:	064e      	lsls	r6, r1, #25
 801fb36:	ea43 0300 	orr.w	r3, r3, r0
 801fb3a:	bf44      	itt	mi
 801fb3c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801fb40:	b21b      	sxthmi	r3, r3
 801fb42:	e7d9      	b.n	801faf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801fb44:	f240 6054 	movw	r0, #1620	@ 0x654
 801fb48:	4283      	cmp	r3, r0
 801fb4a:	d8e3      	bhi.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fb4c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801fb50:	d9e0      	bls.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fb52:	e7b8      	b.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fb54:	f240 6074 	movw	r0, #1652	@ 0x674
 801fb58:	4283      	cmp	r3, r0
 801fb5a:	d0b4      	beq.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fb5c:	d82d      	bhi.n	801fbba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801fb5e:	f240 605e 	movw	r0, #1630	@ 0x65e
 801fb62:	4283      	cmp	r3, r0
 801fb64:	d804      	bhi.n	801fb70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801fb66:	f240 605d 	movw	r0, #1629	@ 0x65d
 801fb6a:	4283      	cmp	r3, r0
 801fb6c:	d3d2      	bcc.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fb6e:	e7aa      	b.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fb70:	f240 605f 	movw	r0, #1631	@ 0x65f
 801fb74:	4283      	cmp	r3, r0
 801fb76:	d0cd      	beq.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fb78:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801fb7c:	d0a3      	beq.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fb7e:	00cb      	lsls	r3, r1, #3
 801fb80:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801fb84:	7a13      	ldrb	r3, [r2, #8]
 801fb86:	0649      	lsls	r1, r1, #25
 801fb88:	ea43 0300 	orr.w	r3, r3, r0
 801fb8c:	bf44      	itt	mi
 801fb8e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801fb92:	b21b      	sxthmi	r3, r3
 801fb94:	1b5d      	subs	r5, r3, r5
 801fb96:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801fb9a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801fb9e:	7b53      	ldrb	r3, [r2, #13]
 801fba0:	015b      	lsls	r3, r3, #5
 801fba2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801fba6:	7993      	ldrb	r3, [r2, #6]
 801fba8:	430b      	orrs	r3, r1
 801fbaa:	2105      	movs	r1, #5
 801fbac:	005b      	lsls	r3, r3, #1
 801fbae:	fb93 f3f1 	sdiv	r3, r3, r1
 801fbb2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801fbb6:	440b      	add	r3, r1
 801fbb8:	e756      	b.n	801fa68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801fbba:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801fbbe:	4283      	cmp	r3, r0
 801fbc0:	d809      	bhi.n	801fbd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801fbc2:	f240 60df 	movw	r0, #1759	@ 0x6df
 801fbc6:	4283      	cmp	r3, r0
 801fbc8:	f4bf af7d 	bcs.w	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fbcc:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801fbd0:	2b05      	cmp	r3, #5
 801fbd2:	d8d4      	bhi.n	801fb7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801fbd4:	e777      	b.n	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fbd6:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801fbda:	4283      	cmp	r3, r0
 801fbdc:	d09a      	beq.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fbde:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801fbe2:	4283      	cmp	r3, r0
 801fbe4:	e7ca      	b.n	801fb7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801fbe6:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801fbea:	d22b      	bcs.n	801fc44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801fbec:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801fbf0:	4283      	cmp	r3, r0
 801fbf2:	d28f      	bcs.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fbf4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801fbf8:	4283      	cmp	r3, r0
 801fbfa:	d816      	bhi.n	801fc2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801fbfc:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801fc00:	4283      	cmp	r3, r0
 801fc02:	f4bf af60 	bcs.w	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fc06:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801fc0a:	4283      	cmp	r3, r0
 801fc0c:	d80a      	bhi.n	801fc24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801fc0e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801fc12:	4283      	cmp	r3, r0
 801fc14:	f4bf af57 	bcs.w	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fc18:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801fc1c:	4283      	cmp	r3, r0
 801fc1e:	f43f af79 	beq.w	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fc22:	e7ac      	b.n	801fb7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801fc24:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801fc28:	e7f8      	b.n	801fc1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801fc2a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801fc2e:	4283      	cmp	r3, r0
 801fc30:	d802      	bhi.n	801fc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801fc32:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801fc36:	e798      	b.n	801fb6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801fc38:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801fc3c:	4283      	cmp	r3, r0
 801fc3e:	f47f af42 	bne.w	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fc42:	e767      	b.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fc44:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801fc48:	4283      	cmp	r3, r0
 801fc4a:	f43f af63 	beq.w	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fc4e:	d802      	bhi.n	801fc56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801fc50:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801fc54:	e7f2      	b.n	801fc3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801fc56:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801fc5a:	4283      	cmp	r3, r0
 801fc5c:	d805      	bhi.n	801fc6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801fc5e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801fc62:	4283      	cmp	r3, r0
 801fc64:	f4ff af2f 	bcc.w	801fac6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fc68:	e754      	b.n	801fb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fc6a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801fc6e:	4283      	cmp	r3, r0
 801fc70:	e7af      	b.n	801fbd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801fc72:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801fc76:	4617      	mov	r7, r2
 801fc78:	4666      	mov	r6, ip
 801fc7a:	f102 0808 	add.w	r8, r2, #8
 801fc7e:	46e6      	mov	lr, ip
 801fc80:	6838      	ldr	r0, [r7, #0]
 801fc82:	6879      	ldr	r1, [r7, #4]
 801fc84:	3708      	adds	r7, #8
 801fc86:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801fc8a:	4547      	cmp	r7, r8
 801fc8c:	46f4      	mov	ip, lr
 801fc8e:	d1f6      	bne.n	801fc7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801fc90:	6838      	ldr	r0, [r7, #0]
 801fc92:	f8ce 0000 	str.w	r0, [lr]
 801fc96:	88b9      	ldrh	r1, [r7, #4]
 801fc98:	f8ae 1004 	strh.w	r1, [lr, #4]
 801fc9c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801fca0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801fca4:	d009      	beq.n	801fcba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801fca6:	7b51      	ldrb	r1, [r2, #13]
 801fca8:	7992      	ldrb	r2, [r2, #6]
 801fcaa:	0149      	lsls	r1, r1, #5
 801fcac:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801fcb0:	4311      	orrs	r1, r2
 801fcb2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801fcb6:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801fcba:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801fcbe:	b2ad      	uxth	r5, r5
 801fcc0:	d00d      	beq.n	801fcde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801fcc2:	442b      	add	r3, r5
 801fcc4:	b29b      	uxth	r3, r3
 801fcc6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801fcca:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801fcce:	10db      	asrs	r3, r3, #3
 801fcd0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801fcd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801fcd8:	4313      	orrs	r3, r2
 801fcda:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801fcde:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801fce2:	00cb      	lsls	r3, r1, #3
 801fce4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801fce8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801fcec:	064f      	lsls	r7, r1, #25
 801fcee:	ea43 0302 	orr.w	r3, r3, r2
 801fcf2:	bf44      	itt	mi
 801fcf4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801fcf8:	b21b      	sxthmi	r3, r3
 801fcfa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801fcfe:	1b5b      	subs	r3, r3, r5
 801fd00:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801fd04:	4632      	mov	r2, r6
 801fd06:	e6fa      	b.n	801fafe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801fd08:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801fd0c:	4617      	mov	r7, r2
 801fd0e:	4666      	mov	r6, ip
 801fd10:	f102 0908 	add.w	r9, r2, #8
 801fd14:	46e0      	mov	r8, ip
 801fd16:	6838      	ldr	r0, [r7, #0]
 801fd18:	6879      	ldr	r1, [r7, #4]
 801fd1a:	3708      	adds	r7, #8
 801fd1c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801fd20:	454f      	cmp	r7, r9
 801fd22:	46c4      	mov	ip, r8
 801fd24:	d1f6      	bne.n	801fd14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801fd26:	6838      	ldr	r0, [r7, #0]
 801fd28:	f8c8 0000 	str.w	r0, [r8]
 801fd2c:	88b9      	ldrh	r1, [r7, #4]
 801fd2e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801fd32:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801fd36:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801fd3a:	d009      	beq.n	801fd50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801fd3c:	7b51      	ldrb	r1, [r2, #13]
 801fd3e:	7992      	ldrb	r2, [r2, #6]
 801fd40:	0149      	lsls	r1, r1, #5
 801fd42:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801fd46:	4311      	orrs	r1, r2
 801fd48:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801fd4c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801fd50:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801fd54:	d00e      	beq.n	801fd74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801fd56:	eba3 030e 	sub.w	r3, r3, lr
 801fd5a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801fd5e:	b29b      	uxth	r3, r3
 801fd60:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801fd64:	10db      	asrs	r3, r3, #3
 801fd66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801fd6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801fd6e:	4313      	orrs	r3, r2
 801fd70:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801fd74:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801fd78:	00cb      	lsls	r3, r1, #3
 801fd7a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801fd7e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801fd82:	0648      	lsls	r0, r1, #25
 801fd84:	ea43 0302 	orr.w	r3, r3, r2
 801fd88:	bf44      	itt	mi
 801fd8a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801fd8e:	b21b      	sxthmi	r3, r3
 801fd90:	1b5d      	subs	r5, r3, r5
 801fd92:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801fd96:	e7b5      	b.n	801fd04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801fd98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801fd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd9c:	461e      	mov	r6, r3
 801fd9e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801fda0:	4604      	mov	r4, r0
 801fda2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fda6:	4617      	mov	r7, r2
 801fda8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801fdac:	f7f5 fe4e 	bl	8015a4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801fdb0:	4605      	mov	r5, r0
 801fdb2:	b918      	cbnz	r0, 801fdbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801fdb4:	6030      	str	r0, [r6, #0]
 801fdb6:	4628      	mov	r0, r5
 801fdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fdbc:	683b      	ldr	r3, [r7, #0]
 801fdbe:	4601      	mov	r1, r0
 801fdc0:	68db      	ldr	r3, [r3, #12]
 801fdc2:	4638      	mov	r0, r7
 801fdc4:	4798      	blx	r3
 801fdc6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801fdca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801fdce:	4602      	mov	r2, r0
 801fdd0:	6030      	str	r0, [r6, #0]
 801fdd2:	d213      	bcs.n	801fdfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801fdd4:	4643      	mov	r3, r8
 801fdd6:	4639      	mov	r1, r7
 801fdd8:	4620      	mov	r0, r4
 801fdda:	f7ff fe3b 	bl	801fa54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801fdde:	6030      	str	r0, [r6, #0]
 801fde0:	6833      	ldr	r3, [r6, #0]
 801fde2:	b143      	cbz	r3, 801fdf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801fde4:	7b5a      	ldrb	r2, [r3, #13]
 801fde6:	7a9b      	ldrb	r3, [r3, #10]
 801fde8:	0052      	lsls	r2, r2, #1
 801fdea:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801fdee:	4313      	orrs	r3, r2
 801fdf0:	bf0c      	ite	eq
 801fdf2:	2301      	moveq	r3, #1
 801fdf4:	2300      	movne	r3, #0
 801fdf6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801fdfa:	e7dc      	b.n	801fdb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801fdfc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801fe00:	b29b      	uxth	r3, r3
 801fe02:	2b7f      	cmp	r3, #127	@ 0x7f
 801fe04:	d804      	bhi.n	801fe10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801fe06:	4639      	mov	r1, r7
 801fe08:	4620      	mov	r0, r4
 801fe0a:	f7ff fced 	bl	801f7e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801fe0e:	e7e6      	b.n	801fdde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801fe10:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	d0e3      	beq.n	801fde0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801fe18:	f640 1302 	movw	r3, #2306	@ 0x902
 801fe1c:	429d      	cmp	r5, r3
 801fe1e:	d1df      	bne.n	801fde0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801fe20:	4601      	mov	r1, r0
 801fe22:	4620      	mov	r0, r4
 801fe24:	f7ff fcb1 	bl	801f78a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801fe28:	e7d9      	b.n	801fdde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801fe2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801fe2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe2e:	461e      	mov	r6, r3
 801fe30:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801fe32:	4604      	mov	r4, r0
 801fe34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fe38:	4617      	mov	r7, r2
 801fe3a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801fe3e:	f7f5 fe05 	bl	8015a4c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801fe42:	4605      	mov	r5, r0
 801fe44:	b918      	cbnz	r0, 801fe4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801fe46:	6030      	str	r0, [r6, #0]
 801fe48:	4628      	mov	r0, r5
 801fe4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe4e:	683b      	ldr	r3, [r7, #0]
 801fe50:	4601      	mov	r1, r0
 801fe52:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801fe56:	4638      	mov	r0, r7
 801fe58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fe5c:	47c8      	blx	r9
 801fe5e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801fe62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801fe66:	4602      	mov	r2, r0
 801fe68:	6030      	str	r0, [r6, #0]
 801fe6a:	d213      	bcs.n	801fe94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801fe6c:	4643      	mov	r3, r8
 801fe6e:	4639      	mov	r1, r7
 801fe70:	4620      	mov	r0, r4
 801fe72:	f7ff fdef 	bl	801fa54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801fe76:	6030      	str	r0, [r6, #0]
 801fe78:	6833      	ldr	r3, [r6, #0]
 801fe7a:	b143      	cbz	r3, 801fe8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801fe7c:	7b5a      	ldrb	r2, [r3, #13]
 801fe7e:	7a9b      	ldrb	r3, [r3, #10]
 801fe80:	0052      	lsls	r2, r2, #1
 801fe82:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801fe86:	4313      	orrs	r3, r2
 801fe88:	bf0c      	ite	eq
 801fe8a:	2301      	moveq	r3, #1
 801fe8c:	2300      	movne	r3, #0
 801fe8e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801fe92:	e7d9      	b.n	801fe48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801fe94:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801fe98:	b29b      	uxth	r3, r3
 801fe9a:	2b7f      	cmp	r3, #127	@ 0x7f
 801fe9c:	d804      	bhi.n	801fea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801fe9e:	4639      	mov	r1, r7
 801fea0:	4620      	mov	r0, r4
 801fea2:	f7ff fca1 	bl	801f7e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801fea6:	e7e6      	b.n	801fe76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801fea8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801feac:	2b00      	cmp	r3, #0
 801feae:	d0e3      	beq.n	801fe78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801feb0:	f640 1302 	movw	r3, #2306	@ 0x902
 801feb4:	429d      	cmp	r5, r3
 801feb6:	d1df      	bne.n	801fe78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801feb8:	4601      	mov	r1, r0
 801feba:	4620      	mov	r0, r4
 801febc:	f7ff fc65 	bl	801f78a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801fec0:	e7d9      	b.n	801fe76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801fec2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801fec2:	b510      	push	{r4, lr}
 801fec4:	4604      	mov	r4, r0
 801fec6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801feca:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801fecc:	b1f1      	cbz	r1, 801ff0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801fece:	2b0a      	cmp	r3, #10
 801fed0:	d02f      	beq.n	801ff32 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801fed2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801fed4:	3901      	subs	r1, #1
 801fed6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801feda:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801fedc:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801fee0:	1c51      	adds	r1, r2, #1
 801fee2:	b289      	uxth	r1, r1
 801fee4:	2901      	cmp	r1, #1
 801fee6:	bf84      	itt	hi
 801fee8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801feec:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801feee:	f103 0201 	add.w	r2, r3, #1
 801fef2:	8722      	strh	r2, [r4, #56]	@ 0x38
 801fef4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801fef6:	bf98      	it	ls
 801fef8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801fefa:	4413      	add	r3, r2
 801fefc:	b29b      	uxth	r3, r3
 801fefe:	2b09      	cmp	r3, #9
 801ff00:	bf88      	it	hi
 801ff02:	3b0a      	subhi	r3, #10
 801ff04:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ff08:	8458      	strh	r0, [r3, #34]	@ 0x22
 801ff0a:	e7dc      	b.n	801fec6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ff0c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801ff0e:	2b0a      	cmp	r3, #10
 801ff10:	d00f      	beq.n	801ff32 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801ff12:	4620      	mov	r0, r4
 801ff14:	f7ff fbe7 	bl	801f6e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ff18:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801ff1a:	1c5a      	adds	r2, r3, #1
 801ff1c:	8722      	strh	r2, [r4, #56]	@ 0x38
 801ff1e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801ff20:	4413      	add	r3, r2
 801ff22:	b29b      	uxth	r3, r3
 801ff24:	2b09      	cmp	r3, #9
 801ff26:	bf88      	it	hi
 801ff28:	3b0a      	subhi	r3, #10
 801ff2a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ff2e:	8458      	strh	r0, [r3, #34]	@ 0x22
 801ff30:	e7ec      	b.n	801ff0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801ff32:	bd10      	pop	{r4, pc}

0801ff34 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ff34:	b538      	push	{r3, r4, r5, lr}
 801ff36:	4604      	mov	r4, r0
 801ff38:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801ff3a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801ff3e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801ff40:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801ff42:	3a01      	subs	r2, #1
 801ff44:	8702      	strh	r2, [r0, #56]	@ 0x38
 801ff46:	1c5a      	adds	r2, r3, #1
 801ff48:	b292      	uxth	r2, r2
 801ff4a:	2a09      	cmp	r2, #9
 801ff4c:	bf86      	itte	hi
 801ff4e:	3b09      	subhi	r3, #9
 801ff50:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801ff52:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801ff54:	f7ff ffb5 	bl	801fec2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ff58:	8c23      	ldrh	r3, [r4, #32]
 801ff5a:	2b01      	cmp	r3, #1
 801ff5c:	bf9c      	itt	ls
 801ff5e:	3301      	addls	r3, #1
 801ff60:	8423      	strhls	r3, [r4, #32]
 801ff62:	8be3      	ldrh	r3, [r4, #30]
 801ff64:	b90b      	cbnz	r3, 801ff6a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ff66:	2302      	movs	r3, #2
 801ff68:	83e3      	strh	r3, [r4, #30]
 801ff6a:	8be3      	ldrh	r3, [r4, #30]
 801ff6c:	4628      	mov	r0, r5
 801ff6e:	3b01      	subs	r3, #1
 801ff70:	b29b      	uxth	r3, r3
 801ff72:	83e3      	strh	r3, [r4, #30]
 801ff74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff78:	8365      	strh	r5, [r4, #26]
 801ff7a:	bd38      	pop	{r3, r4, r5, pc}

0801ff7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ff7c:	428a      	cmp	r2, r1
 801ff7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff82:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801ff84:	d931      	bls.n	801ffea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801ff86:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801ff88:	1a54      	subs	r4, r2, r1
 801ff8a:	19ee      	adds	r6, r5, r7
 801ff8c:	3e01      	subs	r6, #1
 801ff8e:	fa1f fe84 	uxth.w	lr, r4
 801ff92:	b2b4      	uxth	r4, r6
 801ff94:	eba4 090e 	sub.w	r9, r4, lr
 801ff98:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801ff9c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801ffa0:	fa1f f989 	uxth.w	r9, r9
 801ffa4:	2c09      	cmp	r4, #9
 801ffa6:	4626      	mov	r6, r4
 801ffa8:	bf88      	it	hi
 801ffaa:	f1a4 060a 	subhi.w	r6, r4, #10
 801ffae:	f1bc 0f00 	cmp.w	ip, #0
 801ffb2:	bf08      	it	eq
 801ffb4:	f04f 0c02 	moveq.w	ip, #2
 801ffb8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ffbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ffc0:	3c01      	subs	r4, #1
 801ffc2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801ffc6:	fa1f fc8c 	uxth.w	ip, ip
 801ffca:	b2a4      	uxth	r4, r4
 801ffcc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ffd0:	454c      	cmp	r4, r9
 801ffd2:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801ffd6:	d1e5      	bne.n	801ffa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ffd8:	eba5 050e 	sub.w	r5, r5, lr
 801ffdc:	eb0e 0408 	add.w	r4, lr, r8
 801ffe0:	8705      	strh	r5, [r0, #56]	@ 0x38
 801ffe2:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801ffe6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801ffea:	250a      	movs	r5, #10
 801ffec:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801ffee:	1a64      	subs	r4, r4, r1
 801fff0:	4439      	add	r1, r7
 801fff2:	b289      	uxth	r1, r1
 801fff4:	2909      	cmp	r1, #9
 801fff6:	bf88      	it	hi
 801fff8:	390a      	subhi	r1, #10
 801fffa:	8704      	strh	r4, [r0, #56]	@ 0x38
 801fffc:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801fffe:	b18a      	cbz	r2, 8020024 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8020000:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8020002:	3a01      	subs	r2, #1
 8020004:	3101      	adds	r1, #1
 8020006:	b292      	uxth	r2, r2
 8020008:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 802000c:	8701      	strh	r1, [r0, #56]	@ 0x38
 802000e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8020010:	b901      	cbnz	r1, 8020014 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8020012:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8020014:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8020016:	3901      	subs	r1, #1
 8020018:	b289      	uxth	r1, r1
 802001a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 802001c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020020:	844c      	strh	r4, [r1, #34]	@ 0x22
 8020022:	e7ec      	b.n	801fffe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8020024:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020028:	f7ff bf4b 	b.w	801fec2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0802002c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 802002c:	b570      	push	{r4, r5, r6, lr}
 802002e:	2500      	movs	r5, #0
 8020030:	4295      	cmp	r5, r2
 8020032:	d011      	beq.n	8020058 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8020034:	8bc4      	ldrh	r4, [r0, #30]
 8020036:	f831 6b02 	ldrh.w	r6, [r1], #2
 802003a:	4414      	add	r4, r2
 802003c:	3c01      	subs	r4, #1
 802003e:	1b64      	subs	r4, r4, r5
 8020040:	b2a4      	uxth	r4, r4
 8020042:	2c01      	cmp	r4, #1
 8020044:	bf88      	it	hi
 8020046:	3c02      	subhi	r4, #2
 8020048:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802004c:	8b64      	ldrh	r4, [r4, #26]
 802004e:	42b4      	cmp	r4, r6
 8020050:	d117      	bne.n	8020082 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8020052:	3501      	adds	r5, #1
 8020054:	b2ad      	uxth	r5, r5
 8020056:	e7eb      	b.n	8020030 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8020058:	2400      	movs	r4, #0
 802005a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802005e:	4413      	add	r3, r2
 8020060:	b2a2      	uxth	r2, r4
 8020062:	429a      	cmp	r2, r3
 8020064:	da0f      	bge.n	8020086 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8020066:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8020068:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 802006c:	4432      	add	r2, r6
 802006e:	b292      	uxth	r2, r2
 8020070:	2a09      	cmp	r2, #9
 8020072:	bf88      	it	hi
 8020074:	3a0a      	subhi	r2, #10
 8020076:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802007a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 802007c:	3401      	adds	r4, #1
 802007e:	42aa      	cmp	r2, r5
 8020080:	d0ee      	beq.n	8020060 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8020082:	2000      	movs	r0, #0
 8020084:	bd70      	pop	{r4, r5, r6, pc}
 8020086:	2001      	movs	r0, #1
 8020088:	e7fc      	b.n	8020084 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0802008a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 802008a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802008e:	4605      	mov	r5, r0
 8020090:	4616      	mov	r6, r2
 8020092:	1c8c      	adds	r4, r1, #2
 8020094:	8809      	ldrh	r1, [r1, #0]
 8020096:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 802009a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 802009e:	42b3      	cmp	r3, r6
 80200a0:	d124      	bne.n	80200ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80200a2:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80200a6:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80200aa:	f001 070f 	and.w	r7, r1, #15
 80200ae:	f8cd 8000 	str.w	r8, [sp]
 80200b2:	464b      	mov	r3, r9
 80200b4:	4652      	mov	r2, sl
 80200b6:	4621      	mov	r1, r4
 80200b8:	4628      	mov	r0, r5
 80200ba:	f7ff ffb7 	bl	802002c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80200be:	4683      	mov	fp, r0
 80200c0:	b168      	cbz	r0, 80200de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80200c2:	eb0a 0109 	add.w	r1, sl, r9
 80200c6:	4441      	add	r1, r8
 80200c8:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80200cc:	463a      	mov	r2, r7
 80200ce:	4649      	mov	r1, r9
 80200d0:	4628      	mov	r0, r5
 80200d2:	f7ff ff53 	bl	801ff7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80200d6:	4658      	mov	r0, fp
 80200d8:	b003      	add	sp, #12
 80200da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200de:	eb07 010a 	add.w	r1, r7, sl
 80200e2:	4449      	add	r1, r9
 80200e4:	4441      	add	r1, r8
 80200e6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80200ea:	e7d2      	b.n	8020092 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80200ec:	f04f 0b00 	mov.w	fp, #0
 80200f0:	e7f1      	b.n	80200d6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080200f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80200f2:	b570      	push	{r4, r5, r6, lr}
 80200f4:	8810      	ldrh	r0, [r2, #0]
 80200f6:	4298      	cmp	r0, r3
 80200f8:	d817      	bhi.n	802012a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80200fa:	1e48      	subs	r0, r1, #1
 80200fc:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8020100:	4298      	cmp	r0, r3
 8020102:	d312      	bcc.n	802012a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020104:	2400      	movs	r4, #0
 8020106:	428c      	cmp	r4, r1
 8020108:	d20f      	bcs.n	802012a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 802010a:	1860      	adds	r0, r4, r1
 802010c:	1040      	asrs	r0, r0, #1
 802010e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020112:	0085      	lsls	r5, r0, #2
 8020114:	42b3      	cmp	r3, r6
 8020116:	d902      	bls.n	802011e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8020118:	3001      	adds	r0, #1
 802011a:	b284      	uxth	r4, r0
 802011c:	e7f3      	b.n	8020106 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 802011e:	d201      	bcs.n	8020124 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8020120:	b281      	uxth	r1, r0
 8020122:	e7f0      	b.n	8020106 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020124:	442a      	add	r2, r5
 8020126:	8850      	ldrh	r0, [r2, #2]
 8020128:	bd70      	pop	{r4, r5, r6, pc}
 802012a:	2000      	movs	r0, #0
 802012c:	e7fc      	b.n	8020128 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0802012e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 802012e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020132:	4604      	mov	r4, r0
 8020134:	260b      	movs	r6, #11
 8020136:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8020138:	886f      	ldrh	r7, [r5, #2]
 802013a:	087f      	lsrs	r7, r7, #1
 802013c:	3e01      	subs	r6, #1
 802013e:	d013      	beq.n	8020168 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8020140:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8020142:	462a      	mov	r2, r5
 8020144:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020148:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 802014c:	4639      	mov	r1, r7
 802014e:	4643      	mov	r3, r8
 8020150:	4620      	mov	r0, r4
 8020152:	f7ff ffce 	bl	80200f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020156:	b138      	cbz	r0, 8020168 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8020158:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 802015c:	4642      	mov	r2, r8
 802015e:	4620      	mov	r0, r4
 8020160:	f7ff ff93 	bl	802008a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8020164:	2800      	cmp	r0, #0
 8020166:	d1e9      	bne.n	802013c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8020168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802016c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 802016c:	b570      	push	{r4, r5, r6, lr}
 802016e:	694a      	ldr	r2, [r1, #20]
 8020170:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8020172:	684b      	ldr	r3, [r1, #4]
 8020174:	1b54      	subs	r4, r2, r5
 8020176:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8020178:	f000 8107 	beq.w	802038a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 802017c:	1b9b      	subs	r3, r3, r6
 802017e:	d003      	beq.n	8020188 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8020180:	2210      	movs	r2, #16
 8020182:	4363      	muls	r3, r4
 8020184:	fb93 f3f2 	sdiv	r3, r3, r2
 8020188:	680c      	ldr	r4, [r1, #0]
 802018a:	698a      	ldr	r2, [r1, #24]
 802018c:	1b65      	subs	r5, r4, r5
 802018e:	f000 80fe 	beq.w	802038e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8020192:	1b92      	subs	r2, r2, r6
 8020194:	d003      	beq.n	802019e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8020196:	2410      	movs	r4, #16
 8020198:	436a      	muls	r2, r5
 802019a:	fb92 f2f4 	sdiv	r2, r2, r4
 802019e:	1a9b      	subs	r3, r3, r2
 80201a0:	ee07 3a90 	vmov	s15, r3
 80201a4:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 80203cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 80201a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80201ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80201b0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80201b4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80201b8:	460a      	mov	r2, r1
 80201ba:	eeb1 6a43 	vneg.f32	s12, s6
 80201be:	4603      	mov	r3, r0
 80201c0:	f100 040c 	add.w	r4, r0, #12
 80201c4:	edd2 7a02 	vldr	s15, [r2, #8]
 80201c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80201cc:	ece3 6a01 	vstmia	r3!, {s13}
 80201d0:	edd2 7a03 	vldr	s15, [r2, #12]
 80201d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80201d8:	edc3 7a02 	vstr	s15, [r3, #8]
 80201dc:	edd2 7a04 	vldr	s15, [r2, #16]
 80201e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80201e4:	429c      	cmp	r4, r3
 80201e6:	edc3 7a05 	vstr	s15, [r3, #20]
 80201ea:	f102 0214 	add.w	r2, r2, #20
 80201ee:	d1e9      	bne.n	80201c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80201f0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80201f2:	698b      	ldr	r3, [r1, #24]
 80201f4:	edd0 4a02 	vldr	s9, [r0, #8]
 80201f8:	1a9b      	subs	r3, r3, r2
 80201fa:	ee07 3a90 	vmov	s15, r3
 80201fe:	684b      	ldr	r3, [r1, #4]
 8020200:	edd0 3a00 	vldr	s7, [r0]
 8020204:	1a9b      	subs	r3, r3, r2
 8020206:	edd0 6a01 	vldr	s13, [r0, #4]
 802020a:	ee07 3a10 	vmov	s14, r3
 802020e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020212:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8020216:	ee67 7a84 	vmul.f32	s15, s15, s8
 802021a:	ee73 4ae4 	vsub.f32	s9, s7, s9
 802021e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020222:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8020226:	ee27 7a04 	vmul.f32	s14, s14, s8
 802022a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802022e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8020232:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8020236:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8020238:	694a      	ldr	r2, [r1, #20]
 802023a:	ed90 5a05 	vldr	s10, [r0, #20]
 802023e:	1b13      	subs	r3, r2, r4
 8020240:	ee07 3a10 	vmov	s14, r3
 8020244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020248:	ee27 7a04 	vmul.f32	s14, s14, s8
 802024c:	680b      	ldr	r3, [r1, #0]
 802024e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8020252:	1b1b      	subs	r3, r3, r4
 8020254:	ee07 3a10 	vmov	s14, r3
 8020258:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802025c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020260:	eee6 4a87 	vfma.f32	s9, s13, s14
 8020264:	ee64 4a86 	vmul.f32	s9, s9, s12
 8020268:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 802026c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802026e:	698b      	ldr	r3, [r1, #24]
 8020270:	ed90 2a03 	vldr	s4, [r0, #12]
 8020274:	1a9b      	subs	r3, r3, r2
 8020276:	ee06 3a90 	vmov	s13, r3
 802027a:	684b      	ldr	r3, [r1, #4]
 802027c:	edd0 5a04 	vldr	s11, [r0, #16]
 8020280:	1a9b      	subs	r3, r3, r2
 8020282:	ee07 3a10 	vmov	s14, r3
 8020286:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802028a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 802028e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8020292:	ee32 5a45 	vsub.f32	s10, s4, s10
 8020296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802029a:	ee65 6a66 	vnmul.f32	s13, s10, s13
 802029e:	ee27 7a04 	vmul.f32	s14, s14, s8
 80202a2:	eee5 6a87 	vfma.f32	s13, s11, s14
 80202a6:	ee66 6a83 	vmul.f32	s13, s13, s6
 80202aa:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80202ae:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80202b0:	694a      	ldr	r2, [r1, #20]
 80202b2:	ed90 1a07 	vldr	s2, [r0, #28]
 80202b6:	1b13      	subs	r3, r2, r4
 80202b8:	ee07 3a10 	vmov	s14, r3
 80202bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80202c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80202c4:	680b      	ldr	r3, [r1, #0]
 80202c6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80202ca:	1b1b      	subs	r3, r3, r4
 80202cc:	ee07 3a10 	vmov	s14, r3
 80202d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80202d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80202d8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80202dc:	ee25 5a06 	vmul.f32	s10, s10, s12
 80202e0:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80202e4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80202e6:	698b      	ldr	r3, [r1, #24]
 80202e8:	edd0 5a08 	vldr	s11, [r0, #32]
 80202ec:	1a9b      	subs	r3, r3, r2
 80202ee:	ee07 3a10 	vmov	s14, r3
 80202f2:	684b      	ldr	r3, [r1, #4]
 80202f4:	edd0 2a06 	vldr	s5, [r0, #24]
 80202f8:	1a9b      	subs	r3, r3, r2
 80202fa:	ee01 3a90 	vmov	s3, r3
 80202fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020302:	ee31 1a65 	vsub.f32	s2, s2, s11
 8020306:	ee27 7a04 	vmul.f32	s14, s14, s8
 802030a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 802030e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8020312:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8020316:	ee61 1a84 	vmul.f32	s3, s3, s8
 802031a:	eea1 7a21 	vfma.f32	s14, s2, s3
 802031e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8020322:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8020326:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8020328:	694a      	ldr	r2, [r1, #20]
 802032a:	1b13      	subs	r3, r2, r4
 802032c:	ee03 3a10 	vmov	s6, r3
 8020330:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8020334:	ee23 3a04 	vmul.f32	s6, s6, s8
 8020338:	680b      	ldr	r3, [r1, #0]
 802033a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 802033e:	1b1b      	subs	r3, r3, r4
 8020340:	ee03 3a10 	vmov	s6, r3
 8020344:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8020348:	ee23 4a04 	vmul.f32	s8, s6, s8
 802034c:	eee1 5a04 	vfma.f32	s11, s2, s8
 8020350:	ee25 6a86 	vmul.f32	s12, s11, s12
 8020354:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8020358:	eee3 5aa6 	vfma.f32	s11, s7, s13
 802035c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8020360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020364:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8020368:	dd13      	ble.n	8020392 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 802036a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802036e:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8020372:	eee3 7a87 	vfma.f32	s15, s7, s14
 8020376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802037e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8020380:	dd15      	ble.n	80203ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8020382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020386:	6403      	str	r3, [r0, #64]	@ 0x40
 8020388:	bd70      	pop	{r4, r5, r6, pc}
 802038a:	4623      	mov	r3, r4
 802038c:	e6fc      	b.n	8020188 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 802038e:	462a      	mov	r2, r5
 8020390:	e705      	b.n	802019e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8020392:	d502      	bpl.n	802039a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8020394:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8020398:	e7e9      	b.n	802036e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 802039a:	ee22 2a64 	vnmul.f32	s4, s4, s9
 802039e:	eea3 2a85 	vfma.f32	s4, s7, s10
 80203a2:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80203a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203aa:	dade      	bge.n	802036a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 80203ac:	e7f2      	b.n	8020394 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 80203ae:	d502      	bpl.n	80203b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 80203b0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80203b4:	e7e7      	b.n	8020386 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 80203b6:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80203ba:	eee3 4a86 	vfma.f32	s9, s7, s12
 80203be:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80203c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203c6:	dadc      	bge.n	8020382 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 80203c8:	e7f2      	b.n	80203b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 80203ca:	bf00      	nop
 80203cc:	3d800000 	.word	0x3d800000

080203d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80203d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203d4:	2714      	movs	r7, #20
 80203d6:	435f      	muls	r7, r3
 80203d8:	eb02 0c07 	add.w	ip, r2, r7
 80203dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80203e0:	f115 0e0f 	adds.w	lr, r5, #15
 80203e4:	f100 80a2 	bmi.w	802052c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80203e8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80203ec:	2614      	movs	r6, #20
 80203ee:	9c08      	ldr	r4, [sp, #32]
 80203f0:	f8c0 e014 	str.w	lr, [r0, #20]
 80203f4:	4366      	muls	r6, r4
 80203f6:	eb02 0806 	add.w	r8, r2, r6
 80203fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80203fe:	f115 040f 	adds.w	r4, r5, #15
 8020402:	f100 809f 	bmi.w	8020544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8020406:	1124      	asrs	r4, r4, #4
 8020408:	eba4 040e 	sub.w	r4, r4, lr
 802040c:	6184      	str	r4, [r0, #24]
 802040e:	2c00      	cmp	r4, #0
 8020410:	f000 808a 	beq.w	8020528 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8020414:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8020418:	f8d8 4004 	ldr.w	r4, [r8, #4]
 802041c:	5995      	ldr	r5, [r2, r6]
 802041e:	eba4 0809 	sub.w	r8, r4, r9
 8020422:	59d4      	ldr	r4, [r2, r7]
 8020424:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8020428:	eba5 0a04 	sub.w	sl, r5, r4
 802042c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8020430:	fb0e fe05 	mul.w	lr, lr, r5
 8020434:	fb0a ee19 	mls	lr, sl, r9, lr
 8020438:	fb08 e404 	mla	r4, r8, r4, lr
 802043c:	3c01      	subs	r4, #1
 802043e:	19a4      	adds	r4, r4, r6
 8020440:	f100 808c 	bmi.w	802055c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8020444:	fb94 fef6 	sdiv	lr, r4, r6
 8020448:	fb06 441e 	mls	r4, r6, lr, r4
 802044c:	f8c0 e000 	str.w	lr, [r0]
 8020450:	6104      	str	r4, [r0, #16]
 8020452:	2d00      	cmp	r5, #0
 8020454:	f2c0 8095 	blt.w	8020582 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8020458:	fb95 f4f6 	sdiv	r4, r5, r6
 802045c:	fb06 5514 	mls	r5, r6, r4, r5
 8020460:	6044      	str	r4, [r0, #4]
 8020462:	6085      	str	r5, [r0, #8]
 8020464:	60c6      	str	r6, [r0, #12]
 8020466:	f8dc 4004 	ldr.w	r4, [ip, #4]
 802046a:	6945      	ldr	r5, [r0, #20]
 802046c:	59d2      	ldr	r2, [r2, r7]
 802046e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8020472:	ee07 4a10 	vmov	s14, r4
 8020476:	6804      	ldr	r4, [r0, #0]
 8020478:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80205a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 802047c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8020480:	ee07 2a90 	vmov	s15, r2
 8020484:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802048c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020490:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8020494:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020498:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802049c:	edd3 6a00 	vldr	s13, [r3]
 80204a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80204a4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80204a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80204ac:	edc0 6a07 	vstr	s13, [r0, #28]
 80204b0:	edd0 6a01 	vldr	s13, [r0, #4]
 80204b4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80204b8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80204bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80204c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80204c4:	ed80 6a08 	vstr	s12, [r0, #32]
 80204c8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80204ca:	6242      	str	r2, [r0, #36]	@ 0x24
 80204cc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80204d0:	ed93 6a03 	vldr	s12, [r3, #12]
 80204d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80204d8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80204dc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80204e0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80204e4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80204e8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80204ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80204f0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80204f4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80204f6:	6302      	str	r2, [r0, #48]	@ 0x30
 80204f8:	ed93 6a06 	vldr	s12, [r3, #24]
 80204fc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8020500:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020504:	eeb0 7a46 	vmov.f32	s14, s12
 8020508:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 802050c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8020510:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8020514:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8020518:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 802051c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020520:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8020524:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8020526:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8020528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802052c:	2410      	movs	r4, #16
 802052e:	f1c5 0501 	rsb	r5, r5, #1
 8020532:	f015 050f 	ands.w	r5, r5, #15
 8020536:	fb9e fef4 	sdiv	lr, lr, r4
 802053a:	bf18      	it	ne
 802053c:	2501      	movne	r5, #1
 802053e:	ebae 0e05 	sub.w	lr, lr, r5
 8020542:	e753      	b.n	80203ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8020544:	f04f 0910 	mov.w	r9, #16
 8020548:	f1c5 0501 	rsb	r5, r5, #1
 802054c:	f015 050f 	ands.w	r5, r5, #15
 8020550:	fb94 f4f9 	sdiv	r4, r4, r9
 8020554:	bf18      	it	ne
 8020556:	2501      	movne	r5, #1
 8020558:	1b64      	subs	r4, r4, r5
 802055a:	e755      	b.n	8020408 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 802055c:	4264      	negs	r4, r4
 802055e:	fb94 fef6 	sdiv	lr, r4, r6
 8020562:	fb06 441e 	mls	r4, r6, lr, r4
 8020566:	f1ce 0800 	rsb	r8, lr, #0
 802056a:	f8c0 8000 	str.w	r8, [r0]
 802056e:	6104      	str	r4, [r0, #16]
 8020570:	2c00      	cmp	r4, #0
 8020572:	f43f af6e 	beq.w	8020452 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8020576:	ea6f 0e0e 	mvn.w	lr, lr
 802057a:	1b34      	subs	r4, r6, r4
 802057c:	f8c0 e000 	str.w	lr, [r0]
 8020580:	e766      	b.n	8020450 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8020582:	426d      	negs	r5, r5
 8020584:	fb95 f4f6 	sdiv	r4, r5, r6
 8020588:	fb06 5514 	mls	r5, r6, r4, r5
 802058c:	f1c4 0e00 	rsb	lr, r4, #0
 8020590:	f8c0 e004 	str.w	lr, [r0, #4]
 8020594:	6085      	str	r5, [r0, #8]
 8020596:	2d00      	cmp	r5, #0
 8020598:	f43f af64 	beq.w	8020464 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 802059c:	43e4      	mvns	r4, r4
 802059e:	1b75      	subs	r5, r6, r5
 80205a0:	6044      	str	r4, [r0, #4]
 80205a2:	e75e      	b.n	8020462 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80205a4:	3d800000 	.word	0x3d800000

080205a8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80205a8:	4602      	mov	r2, r0
 80205aa:	b148      	cbz	r0, 80205c0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80205ac:	2300      	movs	r3, #0
 80205ae:	b298      	uxth	r0, r3
 80205b0:	3301      	adds	r3, #1
 80205b2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80205b6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80205ba:	2900      	cmp	r1, #0
 80205bc:	d1f7      	bne.n	80205ae <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80205be:	4770      	bx	lr
 80205c0:	4770      	bx	lr

080205c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80205c2:	b530      	push	{r4, r5, lr}
 80205c4:	4604      	mov	r4, r0
 80205c6:	b159      	cbz	r1, 80205e0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80205c8:	b148      	cbz	r0, 80205de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80205ca:	2300      	movs	r3, #0
 80205cc:	b298      	uxth	r0, r3
 80205ce:	4282      	cmp	r2, r0
 80205d0:	d905      	bls.n	80205de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80205d2:	5ccd      	ldrb	r5, [r1, r3]
 80205d4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80205d8:	3301      	adds	r3, #1
 80205da:	2d00      	cmp	r5, #0
 80205dc:	d1f6      	bne.n	80205cc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80205de:	bd30      	pop	{r4, r5, pc}
 80205e0:	4608      	mov	r0, r1
 80205e2:	e7fc      	b.n	80205de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080205e4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 80205e4:	468c      	mov	ip, r1
 80205e6:	2100      	movs	r1, #0
 80205e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80205ea:	4604      	mov	r4, r0
 80205ec:	261f      	movs	r6, #31
 80205ee:	b08b      	sub	sp, #44	@ 0x2c
 80205f0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80205f4:	af01      	add	r7, sp, #4
 80205f6:	fb94 fef3 	sdiv	lr, r4, r3
 80205fa:	fb03 441e 	mls	r4, r3, lr, r4
 80205fe:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8020602:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8020606:	b2ec      	uxtb	r4, r5
 8020608:	2d09      	cmp	r5, #9
 802060a:	bfd4      	ite	le
 802060c:	3430      	addle	r4, #48	@ 0x30
 802060e:	3457      	addgt	r4, #87	@ 0x57
 8020610:	b2e4      	uxtb	r4, r4
 8020612:	55bc      	strb	r4, [r7, r6]
 8020614:	4674      	mov	r4, lr
 8020616:	1e71      	subs	r1, r6, #1
 8020618:	b974      	cbnz	r4, 8020638 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 802061a:	2800      	cmp	r0, #0
 802061c:	da05      	bge.n	802062a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 802061e:	ab0a      	add	r3, sp, #40	@ 0x28
 8020620:	4419      	add	r1, r3
 8020622:	232d      	movs	r3, #45	@ 0x2d
 8020624:	f801 3c24 	strb.w	r3, [r1, #-36]
 8020628:	1eb1      	subs	r1, r6, #2
 802062a:	3101      	adds	r1, #1
 802062c:	4439      	add	r1, r7
 802062e:	4660      	mov	r0, ip
 8020630:	f7ff ffc7 	bl	80205c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020634:	b00b      	add	sp, #44	@ 0x2c
 8020636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020638:	460e      	mov	r6, r1
 802063a:	e7dc      	b.n	80205f6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0802063c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 802063c:	468c      	mov	ip, r1
 802063e:	2100      	movs	r1, #0
 8020640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020642:	b08b      	sub	sp, #44	@ 0x2c
 8020644:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8020648:	211f      	movs	r1, #31
 802064a:	ae01      	add	r6, sp, #4
 802064c:	fbb0 f7f3 	udiv	r7, r0, r3
 8020650:	fb03 0517 	mls	r5, r3, r7, r0
 8020654:	b2ec      	uxtb	r4, r5
 8020656:	2d09      	cmp	r5, #9
 8020658:	bfd4      	ite	le
 802065a:	3430      	addle	r4, #48	@ 0x30
 802065c:	3457      	addgt	r4, #87	@ 0x57
 802065e:	b2e4      	uxtb	r4, r4
 8020660:	558c      	strb	r4, [r1, r6]
 8020662:	4638      	mov	r0, r7
 8020664:	1e4c      	subs	r4, r1, #1
 8020666:	b92f      	cbnz	r7, 8020674 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8020668:	4431      	add	r1, r6
 802066a:	4660      	mov	r0, ip
 802066c:	f7ff ffa9 	bl	80205c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020670:	b00b      	add	sp, #44	@ 0x2c
 8020672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020674:	4621      	mov	r1, r4
 8020676:	e7e9      	b.n	802064c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08020678 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8020678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802067c:	4691      	mov	r9, r2
 802067e:	b085      	sub	sp, #20
 8020680:	6802      	ldr	r2, [r0, #0]
 8020682:	4688      	mov	r8, r1
 8020684:	461c      	mov	r4, r3
 8020686:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 802068a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 802068e:	4683      	mov	fp, r0
 8020690:	4610      	mov	r0, r2
 8020692:	9103      	str	r1, [sp, #12]
 8020694:	9302      	str	r3, [sp, #8]
 8020696:	9201      	str	r2, [sp, #4]
 8020698:	f7ff ff86 	bl	80205a8 <_ZN8touchgfx7Unicode6strlenEPKt>
 802069c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80206a0:	f1b8 0f00 	cmp.w	r8, #0
 80206a4:	bf0c      	ite	eq
 80206a6:	4684      	moveq	ip, r0
 80206a8:	f100 0c01 	addne.w	ip, r0, #1
 80206ac:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 80206b0:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 80206b4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80206b6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80206b8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 80206bc:	fa1f fc8c 	uxth.w	ip, ip
 80206c0:	9903      	ldr	r1, [sp, #12]
 80206c2:	d041      	beq.n	8020748 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80206c4:	d834      	bhi.n	8020730 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80206c6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80206ca:	d059      	beq.n	8020780 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80206cc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 80206d0:	d03a      	beq.n	8020748 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80206d2:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 80206d6:	d034      	beq.n	8020742 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80206d8:	2400      	movs	r4, #0
 80206da:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80206de:	3a01      	subs	r2, #1
 80206e0:	b169      	cbz	r1, 80206fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80206e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80206e4:	458c      	cmp	ip, r1
 80206e6:	da09      	bge.n	80206fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80206e8:	eba1 010c 	sub.w	r1, r1, ip
 80206ec:	b289      	uxth	r1, r1
 80206ee:	b933      	cbnz	r3, 80206fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80206f0:	2e00      	cmp	r6, #0
 80206f2:	d051      	beq.n	8020798 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80206f4:	2800      	cmp	r0, #0
 80206f6:	d04f      	beq.n	8020798 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80206f8:	440c      	add	r4, r1
 80206fa:	b2a4      	uxth	r4, r4
 80206fc:	2100      	movs	r1, #0
 80206fe:	682b      	ldr	r3, [r5, #0]
 8020700:	4293      	cmp	r3, r2
 8020702:	da07      	bge.n	8020714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8020704:	f1b8 0f00 	cmp.w	r8, #0
 8020708:	d004      	beq.n	8020714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 802070a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 802070e:	682b      	ldr	r3, [r5, #0]
 8020710:	3301      	adds	r3, #1
 8020712:	602b      	str	r3, [r5, #0]
 8020714:	2730      	movs	r7, #48	@ 0x30
 8020716:	2c00      	cmp	r4, #0
 8020718:	d04e      	beq.n	80207b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 802071a:	682e      	ldr	r6, [r5, #0]
 802071c:	3c01      	subs	r4, #1
 802071e:	42b2      	cmp	r2, r6
 8020720:	b2a4      	uxth	r4, r4
 8020722:	dd49      	ble.n	80207b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8020724:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8020728:	682b      	ldr	r3, [r5, #0]
 802072a:	3301      	adds	r3, #1
 802072c:	602b      	str	r3, [r5, #0]
 802072e:	e7f2      	b.n	8020716 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8020730:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8020734:	d01d      	beq.n	8020772 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8020736:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 802073a:	d002      	beq.n	8020742 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 802073c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8020740:	e7c9      	b.n	80206d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8020742:	4684      	mov	ip, r0
 8020744:	f04f 0800 	mov.w	r8, #0
 8020748:	2c00      	cmp	r4, #0
 802074a:	d0c6      	beq.n	80206da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 802074c:	b947      	cbnz	r7, 8020760 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 802074e:	2801      	cmp	r0, #1
 8020750:	d106      	bne.n	8020760 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8020752:	8814      	ldrh	r4, [r2, #0]
 8020754:	2c30      	cmp	r4, #48	@ 0x30
 8020756:	bf02      	ittt	eq
 8020758:	4638      	moveq	r0, r7
 802075a:	3202      	addeq	r2, #2
 802075c:	f8cb 2000 	streq.w	r2, [fp]
 8020760:	45bc      	cmp	ip, r7
 8020762:	da14      	bge.n	802078e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8020764:	b2bf      	uxth	r7, r7
 8020766:	eba7 040c 	sub.w	r4, r7, ip
 802076a:	46bc      	mov	ip, r7
 802076c:	b2a4      	uxth	r4, r4
 802076e:	2600      	movs	r6, #0
 8020770:	e7b3      	b.n	80206da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8020772:	4684      	mov	ip, r0
 8020774:	b16c      	cbz	r4, 8020792 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8020776:	42b8      	cmp	r0, r7
 8020778:	dd00      	ble.n	802077c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 802077a:	b2b8      	uxth	r0, r7
 802077c:	2400      	movs	r4, #0
 802077e:	e003      	b.n	8020788 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8020780:	f04f 0c01 	mov.w	ip, #1
 8020784:	2400      	movs	r4, #0
 8020786:	4660      	mov	r0, ip
 8020788:	4626      	mov	r6, r4
 802078a:	46a0      	mov	r8, r4
 802078c:	e7a5      	b.n	80206da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 802078e:	2400      	movs	r4, #0
 8020790:	e7ed      	b.n	802076e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8020792:	4626      	mov	r6, r4
 8020794:	46a0      	mov	r8, r4
 8020796:	e7a0      	b.n	80206da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8020798:	2900      	cmp	r1, #0
 802079a:	d0b0      	beq.n	80206fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 802079c:	2720      	movs	r7, #32
 802079e:	682e      	ldr	r6, [r5, #0]
 80207a0:	2900      	cmp	r1, #0
 80207a2:	d0ac      	beq.n	80206fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80207a4:	3901      	subs	r1, #1
 80207a6:	4296      	cmp	r6, r2
 80207a8:	b289      	uxth	r1, r1
 80207aa:	daa7      	bge.n	80206fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80207ac:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80207b0:	682b      	ldr	r3, [r5, #0]
 80207b2:	3301      	adds	r3, #1
 80207b4:	602b      	str	r3, [r5, #0]
 80207b6:	e7f2      	b.n	802079e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80207b8:	b188      	cbz	r0, 80207de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80207ba:	682b      	ldr	r3, [r5, #0]
 80207bc:	3801      	subs	r0, #1
 80207be:	429a      	cmp	r2, r3
 80207c0:	b280      	uxth	r0, r0
 80207c2:	dd0c      	ble.n	80207de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80207c4:	f8db 3000 	ldr.w	r3, [fp]
 80207c8:	1c9c      	adds	r4, r3, #2
 80207ca:	f8cb 4000 	str.w	r4, [fp]
 80207ce:	881c      	ldrh	r4, [r3, #0]
 80207d0:	682b      	ldr	r3, [r5, #0]
 80207d2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80207d6:	682b      	ldr	r3, [r5, #0]
 80207d8:	3301      	adds	r3, #1
 80207da:	602b      	str	r3, [r5, #0]
 80207dc:	e7ec      	b.n	80207b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80207de:	2620      	movs	r6, #32
 80207e0:	b151      	cbz	r1, 80207f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80207e2:	6828      	ldr	r0, [r5, #0]
 80207e4:	3901      	subs	r1, #1
 80207e6:	4282      	cmp	r2, r0
 80207e8:	b289      	uxth	r1, r1
 80207ea:	dd05      	ble.n	80207f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80207ec:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80207f0:	682b      	ldr	r3, [r5, #0]
 80207f2:	3301      	adds	r3, #1
 80207f4:	602b      	str	r3, [r5, #0]
 80207f6:	e7f3      	b.n	80207e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80207f8:	b005      	add	sp, #20
 80207fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80207fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020802:	2400      	movs	r4, #0
 8020804:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8020808:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 802080c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8020810:	8014      	strh	r4, [r2, #0]
 8020812:	701c      	strb	r4, [r3, #0]
 8020814:	f888 4000 	strb.w	r4, [r8]
 8020818:	f88c 4000 	strb.w	r4, [ip]
 802081c:	f88e 4000 	strb.w	r4, [lr]
 8020820:	703c      	strb	r4, [r7, #0]
 8020822:	6804      	ldr	r4, [r0, #0]
 8020824:	b1a4      	cbz	r4, 8020850 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8020826:	8824      	ldrh	r4, [r4, #0]
 8020828:	f04f 0901 	mov.w	r9, #1
 802082c:	b314      	cbz	r4, 8020874 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 802082e:	2c2b      	cmp	r4, #43	@ 0x2b
 8020830:	d001      	beq.n	8020836 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8020832:	2c20      	cmp	r4, #32
 8020834:	d110      	bne.n	8020858 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8020836:	8014      	strh	r4, [r2, #0]
 8020838:	6804      	ldr	r4, [r0, #0]
 802083a:	b10c      	cbz	r4, 8020840 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 802083c:	3402      	adds	r4, #2
 802083e:	6004      	str	r4, [r0, #0]
 8020840:	680c      	ldr	r4, [r1, #0]
 8020842:	b10c      	cbz	r4, 8020848 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8020844:	3401      	adds	r4, #1
 8020846:	600c      	str	r4, [r1, #0]
 8020848:	6804      	ldr	r4, [r0, #0]
 802084a:	b17c      	cbz	r4, 802086c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 802084c:	8824      	ldrh	r4, [r4, #0]
 802084e:	e7ed      	b.n	802082c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8020850:	680c      	ldr	r4, [r1, #0]
 8020852:	b17c      	cbz	r4, 8020874 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8020854:	7824      	ldrb	r4, [r4, #0]
 8020856:	e7e7      	b.n	8020828 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8020858:	2c2d      	cmp	r4, #45	@ 0x2d
 802085a:	d102      	bne.n	8020862 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 802085c:	f883 9000 	strb.w	r9, [r3]
 8020860:	e7ea      	b.n	8020838 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8020862:	2c23      	cmp	r4, #35	@ 0x23
 8020864:	d107      	bne.n	8020876 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8020866:	f888 9000 	strb.w	r9, [r8]
 802086a:	e7e5      	b.n	8020838 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 802086c:	680c      	ldr	r4, [r1, #0]
 802086e:	b10c      	cbz	r4, 8020874 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8020870:	7824      	ldrb	r4, [r4, #0]
 8020872:	e7db      	b.n	802082c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8020874:	2400      	movs	r4, #0
 8020876:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 802087a:	2b09      	cmp	r3, #9
 802087c:	d901      	bls.n	8020882 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 802087e:	2c2a      	cmp	r4, #42	@ 0x2a
 8020880:	d122      	bne.n	80208c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8020882:	2301      	movs	r3, #1
 8020884:	2c30      	cmp	r4, #48	@ 0x30
 8020886:	f88e 3000 	strb.w	r3, [lr]
 802088a:	d10d      	bne.n	80208a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 802088c:	f88c 3000 	strb.w	r3, [ip]
 8020890:	6803      	ldr	r3, [r0, #0]
 8020892:	b10b      	cbz	r3, 8020898 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8020894:	3302      	adds	r3, #2
 8020896:	6003      	str	r3, [r0, #0]
 8020898:	680b      	ldr	r3, [r1, #0]
 802089a:	b10b      	cbz	r3, 80208a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 802089c:	3301      	adds	r3, #1
 802089e:	600b      	str	r3, [r1, #0]
 80208a0:	6803      	ldr	r3, [r0, #0]
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d02f      	beq.n	8020906 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80208a6:	881c      	ldrh	r4, [r3, #0]
 80208a8:	2c2a      	cmp	r4, #42	@ 0x2a
 80208aa:	d135      	bne.n	8020918 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80208ac:	f04f 33ff 	mov.w	r3, #4294967295
 80208b0:	6033      	str	r3, [r6, #0]
 80208b2:	6803      	ldr	r3, [r0, #0]
 80208b4:	b10b      	cbz	r3, 80208ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80208b6:	3302      	adds	r3, #2
 80208b8:	6003      	str	r3, [r0, #0]
 80208ba:	680b      	ldr	r3, [r1, #0]
 80208bc:	b10b      	cbz	r3, 80208c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80208be:	3301      	adds	r3, #1
 80208c0:	600b      	str	r3, [r1, #0]
 80208c2:	6803      	ldr	r3, [r0, #0]
 80208c4:	b31b      	cbz	r3, 802090e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80208c6:	881c      	ldrh	r4, [r3, #0]
 80208c8:	2c2e      	cmp	r4, #46	@ 0x2e
 80208ca:	d11a      	bne.n	8020902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80208cc:	2301      	movs	r3, #1
 80208ce:	703b      	strb	r3, [r7, #0]
 80208d0:	6803      	ldr	r3, [r0, #0]
 80208d2:	b10b      	cbz	r3, 80208d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80208d4:	3302      	adds	r3, #2
 80208d6:	6003      	str	r3, [r0, #0]
 80208d8:	680b      	ldr	r3, [r1, #0]
 80208da:	b10b      	cbz	r3, 80208e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80208dc:	3301      	adds	r3, #1
 80208de:	600b      	str	r3, [r1, #0]
 80208e0:	6803      	ldr	r3, [r0, #0]
 80208e2:	2b00      	cmp	r3, #0
 80208e4:	d036      	beq.n	8020954 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80208e6:	881b      	ldrh	r3, [r3, #0]
 80208e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80208ea:	d137      	bne.n	802095c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80208ec:	f04f 33ff 	mov.w	r3, #4294967295
 80208f0:	602b      	str	r3, [r5, #0]
 80208f2:	6803      	ldr	r3, [r0, #0]
 80208f4:	b10b      	cbz	r3, 80208fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80208f6:	3302      	adds	r3, #2
 80208f8:	6003      	str	r3, [r0, #0]
 80208fa:	680b      	ldr	r3, [r1, #0]
 80208fc:	b10b      	cbz	r3, 8020902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80208fe:	3301      	adds	r3, #1
 8020900:	600b      	str	r3, [r1, #0]
 8020902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020906:	680c      	ldr	r4, [r1, #0]
 8020908:	b134      	cbz	r4, 8020918 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 802090a:	7824      	ldrb	r4, [r4, #0]
 802090c:	e7cc      	b.n	80208a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 802090e:	680b      	ldr	r3, [r1, #0]
 8020910:	2b00      	cmp	r3, #0
 8020912:	d0f6      	beq.n	8020902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8020914:	781c      	ldrb	r4, [r3, #0]
 8020916:	e7d7      	b.n	80208c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8020918:	2300      	movs	r3, #0
 802091a:	220a      	movs	r2, #10
 802091c:	6033      	str	r3, [r6, #0]
 802091e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8020922:	fa1f f38c 	uxth.w	r3, ip
 8020926:	2b09      	cmp	r3, #9
 8020928:	d8ce      	bhi.n	80208c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 802092a:	6833      	ldr	r3, [r6, #0]
 802092c:	fb02 c303 	mla	r3, r2, r3, ip
 8020930:	6033      	str	r3, [r6, #0]
 8020932:	6803      	ldr	r3, [r0, #0]
 8020934:	b10b      	cbz	r3, 802093a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8020936:	3302      	adds	r3, #2
 8020938:	6003      	str	r3, [r0, #0]
 802093a:	680b      	ldr	r3, [r1, #0]
 802093c:	b10b      	cbz	r3, 8020942 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 802093e:	3301      	adds	r3, #1
 8020940:	600b      	str	r3, [r1, #0]
 8020942:	6803      	ldr	r3, [r0, #0]
 8020944:	b10b      	cbz	r3, 802094a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8020946:	881c      	ldrh	r4, [r3, #0]
 8020948:	e7e9      	b.n	802091e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 802094a:	680c      	ldr	r4, [r1, #0]
 802094c:	2c00      	cmp	r4, #0
 802094e:	d0e6      	beq.n	802091e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8020950:	7824      	ldrb	r4, [r4, #0]
 8020952:	e7e4      	b.n	802091e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8020954:	680b      	ldr	r3, [r1, #0]
 8020956:	b10b      	cbz	r3, 802095c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8020958:	781b      	ldrb	r3, [r3, #0]
 802095a:	e7c5      	b.n	80208e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 802095c:	2200      	movs	r2, #0
 802095e:	240a      	movs	r4, #10
 8020960:	602a      	str	r2, [r5, #0]
 8020962:	3b30      	subs	r3, #48	@ 0x30
 8020964:	b29e      	uxth	r6, r3
 8020966:	2e09      	cmp	r6, #9
 8020968:	682a      	ldr	r2, [r5, #0]
 802096a:	d813      	bhi.n	8020994 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 802096c:	fb04 3302 	mla	r3, r4, r2, r3
 8020970:	602b      	str	r3, [r5, #0]
 8020972:	6803      	ldr	r3, [r0, #0]
 8020974:	b10b      	cbz	r3, 802097a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8020976:	3302      	adds	r3, #2
 8020978:	6003      	str	r3, [r0, #0]
 802097a:	680b      	ldr	r3, [r1, #0]
 802097c:	b10b      	cbz	r3, 8020982 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 802097e:	3301      	adds	r3, #1
 8020980:	600b      	str	r3, [r1, #0]
 8020982:	6803      	ldr	r3, [r0, #0]
 8020984:	b10b      	cbz	r3, 802098a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8020986:	881b      	ldrh	r3, [r3, #0]
 8020988:	e7eb      	b.n	8020962 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 802098a:	680b      	ldr	r3, [r1, #0]
 802098c:	2b00      	cmp	r3, #0
 802098e:	d0e8      	beq.n	8020962 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8020990:	781b      	ldrb	r3, [r3, #0]
 8020992:	e7e6      	b.n	8020962 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8020994:	2a06      	cmp	r2, #6
 8020996:	bfa8      	it	ge
 8020998:	2206      	movge	r2, #6
 802099a:	602a      	str	r2, [r5, #0]
 802099c:	e7b1      	b.n	8020902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0802099e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 802099e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209a2:	2600      	movs	r6, #0
 80209a4:	4607      	mov	r7, r0
 80209a6:	b0a3      	sub	sp, #140	@ 0x8c
 80209a8:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 80209ac:	4688      	mov	r8, r1
 80209ae:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80209b2:	4631      	mov	r1, r6
 80209b4:	2242      	movs	r2, #66	@ 0x42
 80209b6:	4648      	mov	r0, r9
 80209b8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80209ba:	960d      	str	r6, [sp, #52]	@ 0x34
 80209bc:	f00f f9f3 	bl	802fda6 <memset>
 80209c0:	b15f      	cbz	r7, 80209da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80209c2:	f108 3aff 	add.w	sl, r8, #4294967295
 80209c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80209c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80209ca:	b152      	cbz	r2, 80209e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80209cc:	8812      	ldrh	r2, [r2, #0]
 80209ce:	b10a      	cbz	r2, 80209d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80209d0:	459a      	cmp	sl, r3
 80209d2:	dc2e      	bgt.n	8020a32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80209d4:	2200      	movs	r2, #0
 80209d6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80209da:	4638      	mov	r0, r7
 80209dc:	b023      	add	sp, #140	@ 0x8c
 80209de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209e2:	9a08      	ldr	r2, [sp, #32]
 80209e4:	2a00      	cmp	r2, #0
 80209e6:	d0f5      	beq.n	80209d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80209e8:	7812      	ldrb	r2, [r2, #0]
 80209ea:	e7f0      	b.n	80209ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80209ec:	2d00      	cmp	r5, #0
 80209ee:	d0ea      	beq.n	80209c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80209f0:	782a      	ldrb	r2, [r5, #0]
 80209f2:	b142      	cbz	r2, 8020a06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80209f4:	2a25      	cmp	r2, #37	@ 0x25
 80209f6:	d001      	beq.n	80209fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80209f8:	459a      	cmp	sl, r3
 80209fa:	dc08      	bgt.n	8020a0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80209fc:	f1bb 0f00 	cmp.w	fp, #0
 8020a00:	d121      	bne.n	8020a46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8020a02:	2d00      	cmp	r5, #0
 8020a04:	d0df      	beq.n	80209c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020a06:	782a      	ldrb	r2, [r5, #0]
 8020a08:	f04f 0b00 	mov.w	fp, #0
 8020a0c:	e01d      	b.n	8020a4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8020a0e:	f1bb 0f00 	cmp.w	fp, #0
 8020a12:	d076      	beq.n	8020b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x164>
 8020a14:	f8bb 2000 	ldrh.w	r2, [fp]
 8020a18:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8020a1c:	f1bb 0f00 	cmp.w	fp, #0
 8020a20:	d002      	beq.n	8020a28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8020a22:	f10b 0202 	add.w	r2, fp, #2
 8020a26:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a28:	b10d      	cbz	r5, 8020a2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8020a2a:	3501      	adds	r5, #1
 8020a2c:	9508      	str	r5, [sp, #32]
 8020a2e:	3301      	adds	r3, #1
 8020a30:	930d      	str	r3, [sp, #52]	@ 0x34
 8020a32:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8020a36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020a38:	f1bb 0f00 	cmp.w	fp, #0
 8020a3c:	d0d6      	beq.n	80209ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8020a3e:	f8bb 2000 	ldrh.w	r2, [fp]
 8020a42:	2a00      	cmp	r2, #0
 8020a44:	d1d6      	bne.n	80209f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8020a46:	f8bb 2000 	ldrh.w	r2, [fp]
 8020a4a:	2a00      	cmp	r2, #0
 8020a4c:	d0bb      	beq.n	80209c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020a4e:	459a      	cmp	sl, r3
 8020a50:	ddb9      	ble.n	80209c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020a52:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8020a56:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8020a5a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8020a5e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8020a62:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8020a66:	960e      	str	r6, [sp, #56]	@ 0x38
 8020a68:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8020a6c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8020a6e:	f1bb 0f00 	cmp.w	fp, #0
 8020a72:	d002      	beq.n	8020a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8020a74:	f10b 0302 	add.w	r3, fp, #2
 8020a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a7a:	b10d      	cbz	r5, 8020a80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8020a7c:	1c6b      	adds	r3, r5, #1
 8020a7e:	9308      	str	r3, [sp, #32]
 8020a80:	ab0f      	add	r3, sp, #60	@ 0x3c
 8020a82:	9305      	str	r3, [sp, #20]
 8020a84:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8020a88:	9304      	str	r3, [sp, #16]
 8020a8a:	ab0e      	add	r3, sp, #56	@ 0x38
 8020a8c:	9303      	str	r3, [sp, #12]
 8020a8e:	ab0c      	add	r3, sp, #48	@ 0x30
 8020a90:	9302      	str	r3, [sp, #8]
 8020a92:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8020a96:	9301      	str	r3, [sp, #4]
 8020a98:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8020a9c:	9300      	str	r3, [sp, #0]
 8020a9e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8020aa2:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8020aa6:	a908      	add	r1, sp, #32
 8020aa8:	a809      	add	r0, sp, #36	@ 0x24
 8020aaa:	f7ff fea8 	bl	80207fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8020aae:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	bfbf      	itttt	lt
 8020ab8:	6823      	ldrlt	r3, [r4, #0]
 8020aba:	3404      	addlt	r4, #4
 8020abc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020ac0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8020ac2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	bfbf      	itttt	lt
 8020ac8:	6823      	ldrlt	r3, [r4, #0]
 8020aca:	3404      	addlt	r4, #4
 8020acc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020ad0:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8020ad2:	b1d9      	cbz	r1, 8020b0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8020ad4:	880b      	ldrh	r3, [r1, #0]
 8020ad6:	2b69      	cmp	r3, #105	@ 0x69
 8020ad8:	d01f      	beq.n	8020b1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 8020ada:	d82f      	bhi.n	8020b3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19e>
 8020adc:	2b58      	cmp	r3, #88	@ 0x58
 8020ade:	d01c      	beq.n	8020b1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 8020ae0:	d818      	bhi.n	8020b14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x176>
 8020ae2:	2b25      	cmp	r3, #37	@ 0x25
 8020ae4:	d034      	beq.n	8020b50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b2>
 8020ae6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8020aea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020aec:	f1bb 0f00 	cmp.w	fp, #0
 8020af0:	f000 80b7 	beq.w	8020c62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c4>
 8020af4:	f8bb 5000 	ldrh.w	r5, [fp]
 8020af8:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8020afc:	3301      	adds	r3, #1
 8020afe:	930d      	str	r3, [sp, #52]	@ 0x34
 8020b00:	e029      	b.n	8020b56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b8>
 8020b02:	b10d      	cbz	r5, 8020b08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16a>
 8020b04:	782a      	ldrb	r2, [r5, #0]
 8020b06:	e787      	b.n	8020a18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8020b08:	462a      	mov	r2, r5
 8020b0a:	e785      	b.n	8020a18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8020b0c:	2a00      	cmp	r2, #0
 8020b0e:	d0ea      	beq.n	8020ae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 8020b10:	7813      	ldrb	r3, [r2, #0]
 8020b12:	e7e0      	b.n	8020ad6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x138>
 8020b14:	3b63      	subs	r3, #99	@ 0x63
 8020b16:	2b01      	cmp	r3, #1
 8020b18:	d8e5      	bhi.n	8020ae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 8020b1a:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8020b1e:	b329      	cbz	r1, 8020b6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ce>
 8020b20:	880b      	ldrh	r3, [r1, #0]
 8020b22:	2b69      	cmp	r3, #105	@ 0x69
 8020b24:	d063      	beq.n	8020bee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8020b26:	d825      	bhi.n	8020b74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d6>
 8020b28:	2b63      	cmp	r3, #99	@ 0x63
 8020b2a:	d038      	beq.n	8020b9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x200>
 8020b2c:	2b64      	cmp	r3, #100	@ 0x64
 8020b2e:	d05e      	beq.n	8020bee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8020b30:	2b58      	cmp	r3, #88	@ 0x58
 8020b32:	d07a      	beq.n	8020c2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28c>
 8020b34:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8020b38:	4625      	mov	r5, r4
 8020b3a:	e036      	b.n	8020baa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 8020b3c:	2b73      	cmp	r3, #115	@ 0x73
 8020b3e:	d0ec      	beq.n	8020b1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 8020b40:	d802      	bhi.n	8020b48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8020b42:	2b6f      	cmp	r3, #111	@ 0x6f
 8020b44:	d1cf      	bne.n	8020ae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 8020b46:	e7e8      	b.n	8020b1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 8020b48:	2b75      	cmp	r3, #117	@ 0x75
 8020b4a:	d0e6      	beq.n	8020b1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 8020b4c:	2b78      	cmp	r3, #120	@ 0x78
 8020b4e:	e7f9      	b.n	8020b44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a6>
 8020b50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020b52:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8020b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b58:	b10b      	cbz	r3, 8020b5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c0>
 8020b5a:	3302      	adds	r3, #2
 8020b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b5e:	9b08      	ldr	r3, [sp, #32]
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	f43f af30 	beq.w	80209c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020b66:	3301      	adds	r3, #1
 8020b68:	9308      	str	r3, [sp, #32]
 8020b6a:	e72c      	b.n	80209c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020b6c:	2a00      	cmp	r2, #0
 8020b6e:	d0e1      	beq.n	8020b34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 8020b70:	7813      	ldrb	r3, [r2, #0]
 8020b72:	e7d6      	b.n	8020b22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x184>
 8020b74:	2b73      	cmp	r3, #115	@ 0x73
 8020b76:	d036      	beq.n	8020be6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x248>
 8020b78:	d807      	bhi.n	8020b8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ec>
 8020b7a:	2b6f      	cmp	r3, #111	@ 0x6f
 8020b7c:	d1da      	bne.n	8020b34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 8020b7e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020b80:	1d25      	adds	r5, r4, #4
 8020b82:	eba8 0202 	sub.w	r2, r8, r2
 8020b86:	2308      	movs	r3, #8
 8020b88:	e049      	b.n	8020c1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x280>
 8020b8a:	2b75      	cmp	r3, #117	@ 0x75
 8020b8c:	d042      	beq.n	8020c14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x276>
 8020b8e:	2b78      	cmp	r3, #120	@ 0x78
 8020b90:	d1d0      	bne.n	8020b34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 8020b92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020b94:	1d25      	adds	r5, r4, #4
 8020b96:	eba8 0202 	sub.w	r2, r8, r2
 8020b9a:	2310      	movs	r3, #16
 8020b9c:	e03f      	b.n	8020c1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x280>
 8020b9e:	6823      	ldr	r3, [r4, #0]
 8020ba0:	1d25      	adds	r5, r4, #4
 8020ba2:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8020ba6:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8020baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bac:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	d051      	beq.n	8020c58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ba>
 8020bb4:	881a      	ldrh	r2, [r3, #0]
 8020bb6:	a80d      	add	r0, sp, #52	@ 0x34
 8020bb8:	9005      	str	r0, [sp, #20]
 8020bba:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8020bbe:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8020bc2:	9004      	str	r0, [sp, #16]
 8020bc4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8020bc6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8020bca:	9003      	str	r0, [sp, #12]
 8020bcc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8020bd0:	462c      	mov	r4, r5
 8020bd2:	9002      	str	r0, [sp, #8]
 8020bd4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020bd6:	9001      	str	r0, [sp, #4]
 8020bd8:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8020bdc:	9000      	str	r0, [sp, #0]
 8020bde:	a810      	add	r0, sp, #64	@ 0x40
 8020be0:	f7ff fd4a 	bl	8020678 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8020be4:	e7b7      	b.n	8020b56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b8>
 8020be6:	6823      	ldr	r3, [r4, #0]
 8020be8:	1d25      	adds	r5, r4, #4
 8020bea:	9310      	str	r3, [sp, #64]	@ 0x40
 8020bec:	e7dd      	b.n	8020baa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 8020bee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020bf0:	230a      	movs	r3, #10
 8020bf2:	eba8 0202 	sub.w	r2, r8, r2
 8020bf6:	b292      	uxth	r2, r2
 8020bf8:	4649      	mov	r1, r9
 8020bfa:	6820      	ldr	r0, [r4, #0]
 8020bfc:	f7ff fcf2 	bl	80205e4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8020c00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8020c04:	1d25      	adds	r5, r4, #4
 8020c06:	2b2d      	cmp	r3, #45	@ 0x2d
 8020c08:	d1cf      	bne.n	8020baa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 8020c0a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020c0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c10:	3302      	adds	r3, #2
 8020c12:	e7ea      	b.n	8020bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8020c14:	230a      	movs	r3, #10
 8020c16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c18:	1d25      	adds	r5, r4, #4
 8020c1a:	eba8 0202 	sub.w	r2, r8, r2
 8020c1e:	b292      	uxth	r2, r2
 8020c20:	4649      	mov	r1, r9
 8020c22:	6820      	ldr	r0, [r4, #0]
 8020c24:	f7ff fd0a 	bl	802063c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8020c28:	e7bf      	b.n	8020baa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 8020c2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c2c:	2310      	movs	r3, #16
 8020c2e:	eba8 0202 	sub.w	r2, r8, r2
 8020c32:	b292      	uxth	r2, r2
 8020c34:	4649      	mov	r1, r9
 8020c36:	6820      	ldr	r0, [r4, #0]
 8020c38:	f7ff fd00 	bl	802063c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8020c3c:	1d25      	adds	r5, r4, #4
 8020c3e:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8020c42:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d0af      	beq.n	8020baa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 8020c4a:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8020c4e:	2919      	cmp	r1, #25
 8020c50:	d8f7      	bhi.n	8020c42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a4>
 8020c52:	3b20      	subs	r3, #32
 8020c54:	8013      	strh	r3, [r2, #0]
 8020c56:	e7f4      	b.n	8020c42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a4>
 8020c58:	9a08      	ldr	r2, [sp, #32]
 8020c5a:	2a00      	cmp	r2, #0
 8020c5c:	d0ab      	beq.n	8020bb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x218>
 8020c5e:	7812      	ldrb	r2, [r2, #0]
 8020c60:	e7a9      	b.n	8020bb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x218>
 8020c62:	2d00      	cmp	r5, #0
 8020c64:	f43f af48 	beq.w	8020af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15a>
 8020c68:	782d      	ldrb	r5, [r5, #0]
 8020c6a:	e745      	b.n	8020af8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15a>

08020c6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8020c6c:	b507      	push	{r0, r1, r2, lr}
 8020c6e:	9300      	str	r3, [sp, #0]
 8020c70:	4613      	mov	r3, r2
 8020c72:	2200      	movs	r2, #0
 8020c74:	f7ff fe93 	bl	802099e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8020c78:	b003      	add	sp, #12
 8020c7a:	f85d fb04 	ldr.w	pc, [sp], #4

08020c7e <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8020c7e:	b40c      	push	{r2, r3}
 8020c80:	b507      	push	{r0, r1, r2, lr}
 8020c82:	ab04      	add	r3, sp, #16
 8020c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8020c88:	9301      	str	r3, [sp, #4]
 8020c8a:	f7ff ffef 	bl	8020c6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8020c8e:	b003      	add	sp, #12
 8020c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8020c94:	b002      	add	sp, #8
 8020c96:	4770      	bx	lr

08020c98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020c98:	4b01      	ldr	r3, [pc, #4]	@ (8020ca0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8020c9a:	6018      	str	r0, [r3, #0]
 8020c9c:	4770      	bx	lr
 8020c9e:	bf00      	nop
 8020ca0:	20012064 	.word	0x20012064

08020ca4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8020ca4:	4b06      	ldr	r3, [pc, #24]	@ (8020cc0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8020ca6:	881a      	ldrh	r2, [r3, #0]
 8020ca8:	4282      	cmp	r2, r0
 8020caa:	d807      	bhi.n	8020cbc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8020cac:	4b05      	ldr	r3, [pc, #20]	@ (8020cc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8020cae:	881b      	ldrh	r3, [r3, #0]
 8020cb0:	4413      	add	r3, r2
 8020cb2:	4298      	cmp	r0, r3
 8020cb4:	bfac      	ite	ge
 8020cb6:	2000      	movge	r0, #0
 8020cb8:	2001      	movlt	r0, #1
 8020cba:	4770      	bx	lr
 8020cbc:	2000      	movs	r0, #0
 8020cbe:	4770      	bx	lr
 8020cc0:	20012084 	.word	0x20012084
 8020cc4:	20012088 	.word	0x20012088

08020cc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8020cc8:	b508      	push	{r3, lr}
 8020cca:	4601      	mov	r1, r0
 8020ccc:	f7ff ffea 	bl	8020ca4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8020cd0:	b118      	cbz	r0, 8020cda <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8020cd2:	4b02      	ldr	r3, [pc, #8]	@ (8020cdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8020cda:	bd08      	pop	{r3, pc}
 8020cdc:	20012068 	.word	0x20012068

08020ce0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ce2:	4c24      	ldr	r4, [pc, #144]	@ (8020d74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8020ce4:	6823      	ldr	r3, [r4, #0]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d042      	beq.n	8020d70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8020cea:	4a23      	ldr	r2, [pc, #140]	@ (8020d78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8020cec:	4d23      	ldr	r5, [pc, #140]	@ (8020d7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8020cee:	8811      	ldrh	r1, [r2, #0]
 8020cf0:	f8b5 c000 	ldrh.w	ip, [r5]
 8020cf4:	4822      	ldr	r0, [pc, #136]	@ (8020d80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020cf6:	4461      	add	r1, ip
 8020cf8:	1c4a      	adds	r2, r1, #1
 8020cfa:	f022 0201 	bic.w	r2, r2, #1
 8020cfe:	008f      	lsls	r7, r1, #2
 8020d00:	0412      	lsls	r2, r2, #16
 8020d02:	19de      	adds	r6, r3, r7
 8020d04:	0c12      	lsrs	r2, r2, #16
 8020d06:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8020d0a:	6006      	str	r6, [r0, #0]
 8020d0c:	4e1d      	ldr	r6, [pc, #116]	@ (8020d84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020d0e:	19da      	adds	r2, r3, r7
 8020d10:	6032      	str	r2, [r6, #0]
 8020d12:	220e      	movs	r2, #14
 8020d14:	fb02 f20c 	mul.w	r2, r2, ip
 8020d18:	3203      	adds	r2, #3
 8020d1a:	f022 0203 	bic.w	r2, r2, #3
 8020d1e:	443a      	add	r2, r7
 8020d20:	4f19      	ldr	r7, [pc, #100]	@ (8020d88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8020d22:	4413      	add	r3, r2
 8020d24:	603b      	str	r3, [r7, #0]
 8020d26:	2300      	movs	r3, #0
 8020d28:	4f18      	ldr	r7, [pc, #96]	@ (8020d8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8020d2a:	469c      	mov	ip, r3
 8020d2c:	803b      	strh	r3, [r7, #0]
 8020d2e:	4f18      	ldr	r7, [pc, #96]	@ (8020d90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8020d30:	683f      	ldr	r7, [r7, #0]
 8020d32:	1aba      	subs	r2, r7, r2
 8020d34:	4f17      	ldr	r7, [pc, #92]	@ (8020d94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8020d36:	603a      	str	r2, [r7, #0]
 8020d38:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8020d3c:	4a16      	ldr	r2, [pc, #88]	@ (8020d98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8020d3e:	8013      	strh	r3, [r2, #0]
 8020d40:	428b      	cmp	r3, r1
 8020d42:	d10d      	bne.n	8020d60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8020d44:	2300      	movs	r3, #0
 8020d46:	240e      	movs	r4, #14
 8020d48:	882d      	ldrh	r5, [r5, #0]
 8020d4a:	6830      	ldr	r0, [r6, #0]
 8020d4c:	429d      	cmp	r5, r3
 8020d4e:	d90f      	bls.n	8020d70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8020d50:	fb04 0203 	mla	r2, r4, r3, r0
 8020d54:	7b11      	ldrb	r1, [r2, #12]
 8020d56:	3301      	adds	r3, #1
 8020d58:	f36f 1145 	bfc	r1, #5, #1
 8020d5c:	7311      	strb	r1, [r2, #12]
 8020d5e:	e7f5      	b.n	8020d4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8020d60:	6822      	ldr	r2, [r4, #0]
 8020d62:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8020d66:	6802      	ldr	r2, [r0, #0]
 8020d68:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8020d6c:	3301      	adds	r3, #1
 8020d6e:	e7e7      	b.n	8020d40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8020d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d72:	bf00      	nop
 8020d74:	20012068 	.word	0x20012068
 8020d78:	20012084 	.word	0x20012084
 8020d7c:	20012088 	.word	0x20012088
 8020d80:	2001207c 	.word	0x2001207c
 8020d84:	2001206c 	.word	0x2001206c
 8020d88:	20012074 	.word	0x20012074
 8020d8c:	20012086 	.word	0x20012086
 8020d90:	20012070 	.word	0x20012070
 8020d94:	20012080 	.word	0x20012080
 8020d98:	20012078 	.word	0x20012078

08020d9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8020d9c:	4b06      	ldr	r3, [pc, #24]	@ (8020db8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	b943      	cbnz	r3, 8020db4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8020da2:	b139      	cbz	r1, 8020db4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8020da4:	4b05      	ldr	r3, [pc, #20]	@ (8020dbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8020da6:	801a      	strh	r2, [r3, #0]
 8020da8:	4b05      	ldr	r3, [pc, #20]	@ (8020dc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8020daa:	6019      	str	r1, [r3, #0]
 8020dac:	4b05      	ldr	r3, [pc, #20]	@ (8020dc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8020dae:	6018      	str	r0, [r3, #0]
 8020db0:	f7ff bf96 	b.w	8020ce0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8020db4:	4770      	bx	lr
 8020db6:	bf00      	nop
 8020db8:	20012074 	.word	0x20012074
 8020dbc:	20012088 	.word	0x20012088
 8020dc0:	20012070 	.word	0x20012070
 8020dc4:	20012068 	.word	0x20012068

08020dc8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8020dc8:	b470      	push	{r4, r5, r6}
 8020dca:	4c07      	ldr	r4, [pc, #28]	@ (8020de8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8020dcc:	4605      	mov	r5, r0
 8020dce:	6826      	ldr	r6, [r4, #0]
 8020dd0:	4610      	mov	r0, r2
 8020dd2:	9a03      	ldr	r2, [sp, #12]
 8020dd4:	b936      	cbnz	r6, 8020de4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8020dd6:	6025      	str	r5, [r4, #0]
 8020dd8:	4c04      	ldr	r4, [pc, #16]	@ (8020dec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8020dda:	8021      	strh	r1, [r4, #0]
 8020ddc:	bc70      	pop	{r4, r5, r6}
 8020dde:	4619      	mov	r1, r3
 8020de0:	f7ff bfdc 	b.w	8020d9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8020de4:	bc70      	pop	{r4, r5, r6}
 8020de6:	4770      	bx	lr
 8020de8:	2001208c 	.word	0x2001208c
 8020dec:	20012084 	.word	0x20012084

08020df0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8020df0:	4a12      	ldr	r2, [pc, #72]	@ (8020e3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8020df2:	8803      	ldrh	r3, [r0, #0]
 8020df4:	8812      	ldrh	r2, [r2, #0]
 8020df6:	4293      	cmp	r3, r2
 8020df8:	d207      	bcs.n	8020e0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8020dfa:	2114      	movs	r1, #20
 8020dfc:	4a10      	ldr	r2, [pc, #64]	@ (8020e40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8020dfe:	6812      	ldr	r2, [r2, #0]
 8020e00:	fb01 2303 	mla	r3, r1, r3, r2
 8020e04:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8020e08:	4770      	bx	lr
 8020e0a:	490e      	ldr	r1, [pc, #56]	@ (8020e44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8020e0c:	8809      	ldrh	r1, [r1, #0]
 8020e0e:	4411      	add	r1, r2
 8020e10:	428b      	cmp	r3, r1
 8020e12:	da04      	bge.n	8020e1e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8020e14:	1a9b      	subs	r3, r3, r2
 8020e16:	4a0c      	ldr	r2, [pc, #48]	@ (8020e48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8020e18:	210e      	movs	r1, #14
 8020e1a:	6812      	ldr	r2, [r2, #0]
 8020e1c:	e7f0      	b.n	8020e00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8020e1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020e22:	4293      	cmp	r3, r2
 8020e24:	d108      	bne.n	8020e38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8020e26:	4b09      	ldr	r3, [pc, #36]	@ (8020e4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8020e28:	781b      	ldrb	r3, [r3, #0]
 8020e2a:	b91b      	cbnz	r3, 8020e34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8020e2c:	4b08      	ldr	r3, [pc, #32]	@ (8020e50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8020e2e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8020e32:	4770      	bx	lr
 8020e34:	4b07      	ldr	r3, [pc, #28]	@ (8020e54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8020e36:	e7fa      	b.n	8020e2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8020e38:	2000      	movs	r0, #0
 8020e3a:	4770      	bx	lr
 8020e3c:	20012084 	.word	0x20012084
 8020e40:	2001208c 	.word	0x2001208c
 8020e44:	20012088 	.word	0x20012088
 8020e48:	2001206c 	.word	0x2001206c
 8020e4c:	20011ff4 	.word	0x20011ff4
 8020e50:	20011ff6 	.word	0x20011ff6
 8020e54:	20011ff8 	.word	0x20011ff8

08020e58 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020e58:	4a12      	ldr	r2, [pc, #72]	@ (8020ea4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8020e5a:	8803      	ldrh	r3, [r0, #0]
 8020e5c:	8812      	ldrh	r2, [r2, #0]
 8020e5e:	4293      	cmp	r3, r2
 8020e60:	d207      	bcs.n	8020e72 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8020e62:	2114      	movs	r1, #20
 8020e64:	4a10      	ldr	r2, [pc, #64]	@ (8020ea8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8020e66:	6812      	ldr	r2, [r2, #0]
 8020e68:	fb01 2303 	mla	r3, r1, r3, r2
 8020e6c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8020e70:	4770      	bx	lr
 8020e72:	490e      	ldr	r1, [pc, #56]	@ (8020eac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8020e74:	8809      	ldrh	r1, [r1, #0]
 8020e76:	4411      	add	r1, r2
 8020e78:	428b      	cmp	r3, r1
 8020e7a:	da04      	bge.n	8020e86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8020e7c:	1a9b      	subs	r3, r3, r2
 8020e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8020eb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020e80:	210e      	movs	r1, #14
 8020e82:	6812      	ldr	r2, [r2, #0]
 8020e84:	e7f0      	b.n	8020e68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8020e86:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020e8a:	4293      	cmp	r3, r2
 8020e8c:	d108      	bne.n	8020ea0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8020e8e:	4b09      	ldr	r3, [pc, #36]	@ (8020eb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8020e90:	781b      	ldrb	r3, [r3, #0]
 8020e92:	b91b      	cbnz	r3, 8020e9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8020e94:	4b08      	ldr	r3, [pc, #32]	@ (8020eb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8020e96:	f9b3 0000 	ldrsh.w	r0, [r3]
 8020e9a:	4770      	bx	lr
 8020e9c:	4b07      	ldr	r3, [pc, #28]	@ (8020ebc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8020e9e:	e7fa      	b.n	8020e96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8020ea0:	2000      	movs	r0, #0
 8020ea2:	4770      	bx	lr
 8020ea4:	20012084 	.word	0x20012084
 8020ea8:	2001208c 	.word	0x2001208c
 8020eac:	20012088 	.word	0x20012088
 8020eb0:	2001206c 	.word	0x2001206c
 8020eb4:	20011ff4 	.word	0x20011ff4
 8020eb8:	20011ff8 	.word	0x20011ff8
 8020ebc:	20011ff6 	.word	0x20011ff6

08020ec0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8020ec0:	b530      	push	{r4, r5, lr}
 8020ec2:	4a22      	ldr	r2, [pc, #136]	@ (8020f4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8020ec4:	880b      	ldrh	r3, [r1, #0]
 8020ec6:	8812      	ldrh	r2, [r2, #0]
 8020ec8:	4293      	cmp	r3, r2
 8020eca:	d213      	bcs.n	8020ef4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8020ecc:	2114      	movs	r1, #20
 8020ece:	4a20      	ldr	r2, [pc, #128]	@ (8020f50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8020ed0:	6812      	ldr	r2, [r2, #0]
 8020ed2:	fb01 2303 	mla	r3, r1, r3, r2
 8020ed6:	8a1a      	ldrh	r2, [r3, #16]
 8020ed8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8020edc:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8020ee0:	8a5b      	ldrh	r3, [r3, #18]
 8020ee2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8020ee6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020eea:	8004      	strh	r4, [r0, #0]
 8020eec:	8041      	strh	r1, [r0, #2]
 8020eee:	8082      	strh	r2, [r0, #4]
 8020ef0:	80c3      	strh	r3, [r0, #6]
 8020ef2:	e024      	b.n	8020f3e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8020ef4:	4917      	ldr	r1, [pc, #92]	@ (8020f54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8020ef6:	8809      	ldrh	r1, [r1, #0]
 8020ef8:	4411      	add	r1, r2
 8020efa:	428b      	cmp	r3, r1
 8020efc:	da10      	bge.n	8020f20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8020efe:	1a9b      	subs	r3, r3, r2
 8020f00:	220e      	movs	r2, #14
 8020f02:	4353      	muls	r3, r2
 8020f04:	4a14      	ldr	r2, [pc, #80]	@ (8020f58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8020f06:	6811      	ldr	r1, [r2, #0]
 8020f08:	18ca      	adds	r2, r1, r3
 8020f0a:	5ecd      	ldrsh	r5, [r1, r3]
 8020f0c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8020f10:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8020f14:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8020f18:	8005      	strh	r5, [r0, #0]
 8020f1a:	8044      	strh	r4, [r0, #2]
 8020f1c:	8081      	strh	r1, [r0, #4]
 8020f1e:	e7e7      	b.n	8020ef0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8020f20:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020f24:	4293      	cmp	r3, r2
 8020f26:	d10b      	bne.n	8020f40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8020f28:	4b0c      	ldr	r3, [pc, #48]	@ (8020f5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8020f2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8020f60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8020f30:	8081      	strh	r1, [r0, #4]
 8020f32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020f36:	2300      	movs	r3, #0
 8020f38:	80c2      	strh	r2, [r0, #6]
 8020f3a:	8003      	strh	r3, [r0, #0]
 8020f3c:	8043      	strh	r3, [r0, #2]
 8020f3e:	bd30      	pop	{r4, r5, pc}
 8020f40:	2300      	movs	r3, #0
 8020f42:	8003      	strh	r3, [r0, #0]
 8020f44:	8043      	strh	r3, [r0, #2]
 8020f46:	8083      	strh	r3, [r0, #4]
 8020f48:	e7d2      	b.n	8020ef0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8020f4a:	bf00      	nop
 8020f4c:	20012084 	.word	0x20012084
 8020f50:	2001208c 	.word	0x2001208c
 8020f54:	20012088 	.word	0x20012088
 8020f58:	2001206c 	.word	0x2001206c
 8020f5c:	20011ff0 	.word	0x20011ff0
 8020f60:	20011ff2 	.word	0x20011ff2

08020f64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8020f64:	4a17      	ldr	r2, [pc, #92]	@ (8020fc4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8020f66:	8803      	ldrh	r3, [r0, #0]
 8020f68:	8812      	ldrh	r2, [r2, #0]
 8020f6a:	4293      	cmp	r3, r2
 8020f6c:	d213      	bcs.n	8020f96 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8020f6e:	2114      	movs	r1, #20
 8020f70:	4a15      	ldr	r2, [pc, #84]	@ (8020fc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8020f72:	6812      	ldr	r2, [r2, #0]
 8020f74:	fb01 2303 	mla	r3, r1, r3, r2
 8020f78:	8a1a      	ldrh	r2, [r3, #16]
 8020f7a:	8919      	ldrh	r1, [r3, #8]
 8020f7c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8020f80:	428a      	cmp	r2, r1
 8020f82:	db1d      	blt.n	8020fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8020f84:	8a58      	ldrh	r0, [r3, #18]
 8020f86:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8020f8a:	895b      	ldrh	r3, [r3, #10]
 8020f8c:	4298      	cmp	r0, r3
 8020f8e:	bfac      	ite	ge
 8020f90:	2000      	movge	r0, #0
 8020f92:	2001      	movlt	r0, #1
 8020f94:	4770      	bx	lr
 8020f96:	490d      	ldr	r1, [pc, #52]	@ (8020fcc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8020f98:	8809      	ldrh	r1, [r1, #0]
 8020f9a:	4411      	add	r1, r2
 8020f9c:	428b      	cmp	r3, r1
 8020f9e:	da0d      	bge.n	8020fbc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8020fa0:	210e      	movs	r1, #14
 8020fa2:	1a9b      	subs	r3, r3, r2
 8020fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8020fd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8020fa6:	6812      	ldr	r2, [r2, #0]
 8020fa8:	fb01 2303 	mla	r3, r1, r3, r2
 8020fac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8020fb0:	891a      	ldrh	r2, [r3, #8]
 8020fb2:	4291      	cmp	r1, r2
 8020fb4:	db04      	blt.n	8020fc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8020fb6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8020fba:	e7e6      	b.n	8020f8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8020fbc:	2000      	movs	r0, #0
 8020fbe:	4770      	bx	lr
 8020fc0:	2001      	movs	r0, #1
 8020fc2:	4770      	bx	lr
 8020fc4:	20012084 	.word	0x20012084
 8020fc8:	2001208c 	.word	0x2001208c
 8020fcc:	20012088 	.word	0x20012088
 8020fd0:	2001206c 	.word	0x2001206c

08020fd4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8020fd4:	4a12      	ldr	r2, [pc, #72]	@ (8021020 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8020fd6:	8803      	ldrh	r3, [r0, #0]
 8020fd8:	8811      	ldrh	r1, [r2, #0]
 8020fda:	428b      	cmp	r3, r1
 8020fdc:	d20b      	bcs.n	8020ff6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8020fde:	4a11      	ldr	r2, [pc, #68]	@ (8021024 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8020fe0:	6812      	ldr	r2, [r2, #0]
 8020fe2:	b112      	cbz	r2, 8020fea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8020fe4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8020fe8:	b9c0      	cbnz	r0, 802101c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8020fea:	4a0f      	ldr	r2, [pc, #60]	@ (8021028 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8020fec:	6811      	ldr	r1, [r2, #0]
 8020fee:	2214      	movs	r2, #20
 8020ff0:	4353      	muls	r3, r2
 8020ff2:	58c8      	ldr	r0, [r1, r3]
 8020ff4:	4770      	bx	lr
 8020ff6:	4a0d      	ldr	r2, [pc, #52]	@ (802102c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8020ff8:	8812      	ldrh	r2, [r2, #0]
 8020ffa:	440a      	add	r2, r1
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	da04      	bge.n	802100a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8021000:	4a08      	ldr	r2, [pc, #32]	@ (8021024 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8021002:	6812      	ldr	r2, [r2, #0]
 8021004:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021008:	4770      	bx	lr
 802100a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 802100e:	4293      	cmp	r3, r2
 8021010:	d103      	bne.n	802101a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8021012:	4b07      	ldr	r3, [pc, #28]	@ (8021030 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8021014:	681b      	ldr	r3, [r3, #0]
 8021016:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8021018:	4770      	bx	lr
 802101a:	2000      	movs	r0, #0
 802101c:	4770      	bx	lr
 802101e:	bf00      	nop
 8021020:	20012084 	.word	0x20012084
 8021024:	20012068 	.word	0x20012068
 8021028:	2001208c 	.word	0x2001208c
 802102c:	20012088 	.word	0x20012088
 8021030:	20011ffc 	.word	0x20011ffc

08021034 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8021034:	4b24      	ldr	r3, [pc, #144]	@ (80210c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8021036:	8802      	ldrh	r2, [r0, #0]
 8021038:	8818      	ldrh	r0, [r3, #0]
 802103a:	4282      	cmp	r2, r0
 802103c:	d221      	bcs.n	8021082 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 802103e:	4b23      	ldr	r3, [pc, #140]	@ (80210cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8021040:	6819      	ldr	r1, [r3, #0]
 8021042:	2314      	movs	r3, #20
 8021044:	fb03 1302 	mla	r3, r3, r2, r1
 8021048:	6858      	ldr	r0, [r3, #4]
 802104a:	2800      	cmp	r0, #0
 802104c:	d03a      	beq.n	80210c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 802104e:	4920      	ldr	r1, [pc, #128]	@ (80210d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021050:	6809      	ldr	r1, [r1, #0]
 8021052:	2900      	cmp	r1, #0
 8021054:	d036      	beq.n	80210c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8021056:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802105a:	2900      	cmp	r1, #0
 802105c:	d032      	beq.n	80210c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 802105e:	891a      	ldrh	r2, [r3, #8]
 8021060:	8958      	ldrh	r0, [r3, #10]
 8021062:	4350      	muls	r0, r2
 8021064:	7c5a      	ldrb	r2, [r3, #17]
 8021066:	7cdb      	ldrb	r3, [r3, #19]
 8021068:	0952      	lsrs	r2, r2, #5
 802106a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 802106e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021072:	2b0b      	cmp	r3, #11
 8021074:	bf18      	it	ne
 8021076:	0040      	lslne	r0, r0, #1
 8021078:	3003      	adds	r0, #3
 802107a:	f020 0003 	bic.w	r0, r0, #3
 802107e:	4408      	add	r0, r1
 8021080:	4770      	bx	lr
 8021082:	4b14      	ldr	r3, [pc, #80]	@ (80210d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021084:	881b      	ldrh	r3, [r3, #0]
 8021086:	4403      	add	r3, r0
 8021088:	429a      	cmp	r2, r3
 802108a:	da1a      	bge.n	80210c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 802108c:	210e      	movs	r1, #14
 802108e:	4b12      	ldr	r3, [pc, #72]	@ (80210d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8021090:	1a10      	subs	r0, r2, r0
 8021092:	681b      	ldr	r3, [r3, #0]
 8021094:	fb01 3000 	mla	r0, r1, r0, r3
 8021098:	7b03      	ldrb	r3, [r0, #12]
 802109a:	f003 031f 	and.w	r3, r3, #31
 802109e:	2b0b      	cmp	r3, #11
 80210a0:	d10b      	bne.n	80210ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80210a2:	8903      	ldrh	r3, [r0, #8]
 80210a4:	8940      	ldrh	r0, [r0, #10]
 80210a6:	4358      	muls	r0, r3
 80210a8:	4b09      	ldr	r3, [pc, #36]	@ (80210d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80210aa:	3003      	adds	r0, #3
 80210ac:	6819      	ldr	r1, [r3, #0]
 80210ae:	f020 0303 	bic.w	r3, r0, #3
 80210b2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80210b6:	4418      	add	r0, r3
 80210b8:	4770      	bx	lr
 80210ba:	2b0d      	cmp	r3, #13
 80210bc:	d101      	bne.n	80210c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80210be:	300d      	adds	r0, #13
 80210c0:	4770      	bx	lr
 80210c2:	2000      	movs	r0, #0
 80210c4:	4770      	bx	lr
 80210c6:	bf00      	nop
 80210c8:	20012084 	.word	0x20012084
 80210cc:	2001208c 	.word	0x2001208c
 80210d0:	20012068 	.word	0x20012068
 80210d4:	20012088 	.word	0x20012088
 80210d8:	2001206c 	.word	0x2001206c

080210dc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80210dc:	b510      	push	{r4, lr}
 80210de:	4b1f      	ldr	r3, [pc, #124]	@ (802115c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80210e0:	8802      	ldrh	r2, [r0, #0]
 80210e2:	881b      	ldrh	r3, [r3, #0]
 80210e4:	429a      	cmp	r2, r3
 80210e6:	d21a      	bcs.n	802111e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80210e8:	2114      	movs	r1, #20
 80210ea:	4b1d      	ldr	r3, [pc, #116]	@ (8021160 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80210ec:	681b      	ldr	r3, [r3, #0]
 80210ee:	fb01 3102 	mla	r1, r1, r2, r3
 80210f2:	7c4b      	ldrb	r3, [r1, #17]
 80210f4:	0958      	lsrs	r0, r3, #5
 80210f6:	7ccb      	ldrb	r3, [r1, #19]
 80210f8:	491a      	ldr	r1, [pc, #104]	@ (8021164 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 80210fa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80210fe:	6809      	ldr	r1, [r1, #0]
 8021100:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8021104:	b2d8      	uxtb	r0, r3
 8021106:	b149      	cbz	r1, 802111c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8021108:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802110c:	b132      	cbz	r2, 802111c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 802110e:	2b0e      	cmp	r3, #14
 8021110:	d021      	beq.n	8021156 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8021112:	280f      	cmp	r0, #15
 8021114:	d01d      	beq.n	8021152 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8021116:	2810      	cmp	r0, #16
 8021118:	bf08      	it	eq
 802111a:	2002      	moveq	r0, #2
 802111c:	bd10      	pop	{r4, pc}
 802111e:	4912      	ldr	r1, [pc, #72]	@ (8021168 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8021120:	8809      	ldrh	r1, [r1, #0]
 8021122:	4419      	add	r1, r3
 8021124:	428a      	cmp	r2, r1
 8021126:	da09      	bge.n	802113c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8021128:	210e      	movs	r1, #14
 802112a:	1ad3      	subs	r3, r2, r3
 802112c:	4a0f      	ldr	r2, [pc, #60]	@ (802116c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 802112e:	6812      	ldr	r2, [r2, #0]
 8021130:	fb01 2303 	mla	r3, r1, r3, r2
 8021134:	7b18      	ldrb	r0, [r3, #12]
 8021136:	f000 001f 	and.w	r0, r0, #31
 802113a:	e7ef      	b.n	802111c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 802113c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8021140:	429a      	cmp	r2, r3
 8021142:	d108      	bne.n	8021156 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8021144:	f7eb fc86 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 8021148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802114c:	6803      	ldr	r3, [r0, #0]
 802114e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021150:	4718      	bx	r3
 8021152:	2001      	movs	r0, #1
 8021154:	e7e2      	b.n	802111c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8021156:	2000      	movs	r0, #0
 8021158:	e7e0      	b.n	802111c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 802115a:	bf00      	nop
 802115c:	20012084 	.word	0x20012084
 8021160:	2001208c 	.word	0x2001208c
 8021164:	20012068 	.word	0x20012068
 8021168:	20012088 	.word	0x20012088
 802116c:	2001206c 	.word	0x2001206c

08021170 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8021170:	2010      	movs	r0, #16
 8021172:	4770      	bx	lr

08021174 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8021174:	2000      	movs	r0, #0
 8021176:	4770      	bx	lr

08021178 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8021178:	4b02      	ldr	r3, [pc, #8]	@ (8021184 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 802117a:	8818      	ldrh	r0, [r3, #0]
 802117c:	0040      	lsls	r0, r0, #1
 802117e:	b280      	uxth	r0, r0
 8021180:	4770      	bx	lr
 8021182:	bf00      	nop
 8021184:	20011ff6 	.word	0x20011ff6

08021188 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8021188:	2bff      	cmp	r3, #255	@ 0xff
 802118a:	d05e      	beq.n	802124a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 802118c:	2a0b      	cmp	r2, #11
 802118e:	d058      	beq.n	8021242 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8021190:	d80e      	bhi.n	80211b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8021192:	2a03      	cmp	r2, #3
 8021194:	d04d      	beq.n	8021232 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 8021196:	d804      	bhi.n	80211a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021198:	2a01      	cmp	r2, #1
 802119a:	d04c      	beq.n	8021236 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 802119c:	d94d      	bls.n	802123a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 802119e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80211a0:	e031      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80211a2:	2a09      	cmp	r2, #9
 80211a4:	d04d      	beq.n	8021242 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80211a6:	d84a      	bhi.n	802123e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80211a8:	2a08      	cmp	r2, #8
 80211aa:	d048      	beq.n	802123e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80211ac:	2300      	movs	r3, #0
 80211ae:	e02a      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80211b0:	2a2f      	cmp	r2, #47	@ 0x2f
 80211b2:	d02c      	beq.n	802120e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80211b4:	d811      	bhi.n	80211da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80211b6:	2a2d      	cmp	r2, #45	@ 0x2d
 80211b8:	d018      	beq.n	80211ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 80211ba:	d831      	bhi.n	8021220 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 80211bc:	2a2c      	cmp	r2, #44	@ 0x2c
 80211be:	d1f5      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80211c0:	684a      	ldr	r2, [r1, #4]
 80211c2:	7813      	ldrb	r3, [r2, #0]
 80211c4:	7852      	ldrb	r2, [r2, #1]
 80211c6:	2a00      	cmp	r2, #0
 80211c8:	d1f0      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80211ca:	2b01      	cmp	r3, #1
 80211cc:	d01d      	beq.n	802120a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d02d      	beq.n	802122e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80211d2:	2b02      	cmp	r3, #2
 80211d4:	d1ea      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80211d6:	68c3      	ldr	r3, [r0, #12]
 80211d8:	e015      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80211da:	2a31      	cmp	r2, #49	@ 0x31
 80211dc:	d004      	beq.n	80211e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 80211de:	d332      	bcc.n	8021246 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80211e0:	2a32      	cmp	r2, #50	@ 0x32
 80211e2:	d030      	beq.n	8021246 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80211e4:	2a33      	cmp	r2, #51	@ 0x33
 80211e6:	d1e1      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80211e8:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80211ea:	e00c      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80211ec:	684a      	ldr	r2, [r1, #4]
 80211ee:	7813      	ldrb	r3, [r2, #0]
 80211f0:	7852      	ldrb	r2, [r2, #1]
 80211f2:	2a00      	cmp	r2, #0
 80211f4:	d1da      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80211f6:	2b01      	cmp	r3, #1
 80211f8:	d004      	beq.n	8021204 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 80211fa:	d30f      	bcc.n	802121c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 80211fc:	2b02      	cmp	r3, #2
 80211fe:	d1d5      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021200:	6943      	ldr	r3, [r0, #20]
 8021202:	e000      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021204:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8021206:	4618      	mov	r0, r3
 8021208:	4770      	bx	lr
 802120a:	69c3      	ldr	r3, [r0, #28]
 802120c:	e7fb      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 802120e:	684b      	ldr	r3, [r1, #4]
 8021210:	781a      	ldrb	r2, [r3, #0]
 8021212:	785b      	ldrb	r3, [r3, #1]
 8021214:	2b00      	cmp	r3, #0
 8021216:	d1c9      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021218:	2a00      	cmp	r2, #0
 802121a:	d1f4      	bne.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 802121c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802121e:	e7f2      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021220:	684b      	ldr	r3, [r1, #4]
 8021222:	781a      	ldrb	r2, [r3, #0]
 8021224:	785b      	ldrb	r3, [r3, #1]
 8021226:	2b00      	cmp	r3, #0
 8021228:	d1c0      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802122a:	2a00      	cmp	r2, #0
 802122c:	d1eb      	bne.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 802122e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8021230:	e7e9      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021232:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8021234:	e7e7      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021236:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8021238:	e7e5      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 802123a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802123c:	e7e3      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 802123e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8021240:	e7e1      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021242:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8021244:	e7df      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021246:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8021248:	e7dd      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 802124a:	2a0b      	cmp	r2, #11
 802124c:	d059      	beq.n	8021302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 802124e:	d80e      	bhi.n	802126e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8021250:	2a03      	cmp	r2, #3
 8021252:	d050      	beq.n	80212f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8021254:	d804      	bhi.n	8021260 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8021256:	2a01      	cmp	r2, #1
 8021258:	d04f      	beq.n	80212fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 802125a:	d950      	bls.n	80212fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 802125c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 802125e:	e7d2      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021260:	2a09      	cmp	r2, #9
 8021262:	d04e      	beq.n	8021302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8021264:	d801      	bhi.n	802126a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8021266:	2a08      	cmp	r2, #8
 8021268:	d1a0      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802126a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 802126c:	e7cb      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 802126e:	2a2f      	cmp	r2, #47	@ 0x2f
 8021270:	d02d      	beq.n	80212ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8021272:	d811      	bhi.n	8021298 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8021274:	2a2d      	cmp	r2, #45	@ 0x2d
 8021276:	d018      	beq.n	80212aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8021278:	d833      	bhi.n	80212e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 802127a:	2a2c      	cmp	r2, #44	@ 0x2c
 802127c:	d196      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802127e:	684a      	ldr	r2, [r1, #4]
 8021280:	7813      	ldrb	r3, [r2, #0]
 8021282:	7852      	ldrb	r2, [r2, #1]
 8021284:	2a00      	cmp	r2, #0
 8021286:	d191      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021288:	2b01      	cmp	r3, #1
 802128a:	d01e      	beq.n	80212ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 802128c:	2b00      	cmp	r3, #0
 802128e:	d030      	beq.n	80212f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8021290:	2b02      	cmp	r3, #2
 8021292:	d18b      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021294:	6903      	ldr	r3, [r0, #16]
 8021296:	e7b6      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021298:	2a31      	cmp	r2, #49	@ 0x31
 802129a:	d004      	beq.n	80212a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 802129c:	d333      	bcc.n	8021306 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 802129e:	2a32      	cmp	r2, #50	@ 0x32
 80212a0:	d031      	beq.n	8021306 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 80212a2:	2a33      	cmp	r2, #51	@ 0x33
 80212a4:	d182      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80212a6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80212a8:	e7ad      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212aa:	684a      	ldr	r2, [r1, #4]
 80212ac:	7813      	ldrb	r3, [r2, #0]
 80212ae:	7852      	ldrb	r2, [r2, #1]
 80212b0:	2a00      	cmp	r2, #0
 80212b2:	f47f af7b 	bne.w	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80212b6:	2b01      	cmp	r3, #1
 80212b8:	d005      	beq.n	80212c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80212ba:	d310      	bcc.n	80212de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 80212bc:	2b02      	cmp	r3, #2
 80212be:	f47f af75 	bne.w	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80212c2:	6983      	ldr	r3, [r0, #24]
 80212c4:	e79f      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80212c8:	e79d      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212ca:	6a03      	ldr	r3, [r0, #32]
 80212cc:	e79b      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212ce:	684b      	ldr	r3, [r1, #4]
 80212d0:	781a      	ldrb	r2, [r3, #0]
 80212d2:	785b      	ldrb	r3, [r3, #1]
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	f47f af69 	bne.w	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80212da:	2a00      	cmp	r2, #0
 80212dc:	d193      	bne.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212de:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80212e0:	e791      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212e2:	684b      	ldr	r3, [r1, #4]
 80212e4:	781a      	ldrb	r2, [r3, #0]
 80212e6:	785b      	ldrb	r3, [r3, #1]
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	f47f af5f 	bne.w	80211ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80212ee:	2a00      	cmp	r2, #0
 80212f0:	d189      	bne.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80212f4:	e787      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212f6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80212f8:	e785      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212fa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80212fc:	e783      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80212fe:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8021300:	e781      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021302:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8021304:	e77f      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021306:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8021308:	e77d      	b.n	8021206 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0802130a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802130a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802130e:	b087      	sub	sp, #28
 8021310:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021312:	9101      	str	r1, [sp, #4]
 8021314:	9205      	str	r2, [sp, #20]
 8021316:	6841      	ldr	r1, [r0, #4]
 8021318:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 802131c:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 8021320:	9202      	str	r2, [sp, #8]
 8021322:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8021326:	fb01 2404 	mla	r4, r1, r4, r2
 802132a:	6802      	ldr	r2, [r0, #0]
 802132c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021330:	f8de 2000 	ldr.w	r2, [lr]
 8021334:	9203      	str	r2, [sp, #12]
 8021336:	f8de 2004 	ldr.w	r2, [lr, #4]
 802133a:	3204      	adds	r2, #4
 802133c:	9204      	str	r2, [sp, #16]
 802133e:	9a02      	ldr	r2, [sp, #8]
 8021340:	43d6      	mvns	r6, r2
 8021342:	b2f6      	uxtb	r6, r6
 8021344:	9a01      	ldr	r2, [sp, #4]
 8021346:	2a00      	cmp	r2, #0
 8021348:	dc03      	bgt.n	8021352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802134a:	9a05      	ldr	r2, [sp, #20]
 802134c:	2a00      	cmp	r2, #0
 802134e:	f340 8129 	ble.w	80215a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021352:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021354:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8021358:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802135c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802135e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8021362:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8021366:	2b00      	cmp	r3, #0
 8021368:	dd0e      	ble.n	8021388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802136a:	1408      	asrs	r0, r1, #16
 802136c:	d405      	bmi.n	802137a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802136e:	4560      	cmp	r0, ip
 8021370:	da03      	bge.n	802137a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021372:	1410      	asrs	r0, r2, #16
 8021374:	d401      	bmi.n	802137a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021376:	42b8      	cmp	r0, r7
 8021378:	db07      	blt.n	802138a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802137a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802137c:	3b01      	subs	r3, #1
 802137e:	4401      	add	r1, r0
 8021380:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8021382:	3402      	adds	r4, #2
 8021384:	4402      	add	r2, r0
 8021386:	e7ee      	b.n	8021366 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021388:	d071      	beq.n	802146e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802138a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802138c:	1e58      	subs	r0, r3, #1
 802138e:	fb05 1500 	mla	r5, r5, r0, r1
 8021392:	142d      	asrs	r5, r5, #16
 8021394:	d45f      	bmi.n	8021456 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021396:	4565      	cmp	r5, ip
 8021398:	da5d      	bge.n	8021456 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802139a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802139c:	fb05 2000 	mla	r0, r5, r0, r2
 80213a0:	1400      	asrs	r0, r0, #16
 80213a2:	d458      	bmi.n	8021456 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80213a4:	42b8      	cmp	r0, r7
 80213a6:	da56      	bge.n	8021456 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80213a8:	4699      	mov	r9, r3
 80213aa:	46a2      	mov	sl, r4
 80213ac:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80213b0:	f1b9 0f00 	cmp.w	r9, #0
 80213b4:	dd57      	ble.n	8021466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80213b6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80213ba:	9803      	ldr	r0, [sp, #12]
 80213bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80213c0:	fb07 000c 	mla	r0, r7, ip, r0
 80213c4:	140d      	asrs	r5, r1, #16
 80213c6:	5d40      	ldrb	r0, [r0, r5]
 80213c8:	9d04      	ldr	r5, [sp, #16]
 80213ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80213ce:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80213d2:	f8ba 5000 	ldrh.w	r5, [sl]
 80213d6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80213da:	122f      	asrs	r7, r5, #8
 80213dc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80213e0:	fb17 f706 	smulbb	r7, r7, r6
 80213e4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80213e8:	00ed      	lsls	r5, r5, #3
 80213ea:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 80213ee:	b2ed      	uxtb	r5, r5
 80213f0:	fb18 f806 	smulbb	r8, r8, r6
 80213f4:	fb15 f506 	smulbb	r5, r5, r6
 80213f8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80213fc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8021400:	10c7      	asrs	r7, r0, #3
 8021402:	00c0      	lsls	r0, r0, #3
 8021404:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021408:	b2c0      	uxtb	r0, r0
 802140a:	fb07 870b 	mla	r7, r7, fp, r8
 802140e:	fb00 500b 	mla	r0, r0, fp, r5
 8021412:	fa1f fc8c 	uxth.w	ip, ip
 8021416:	b280      	uxth	r0, r0
 8021418:	b2bf      	uxth	r7, r7
 802141a:	f10c 0501 	add.w	r5, ip, #1
 802141e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021422:	f107 0801 	add.w	r8, r7, #1
 8021426:	1c45      	adds	r5, r0, #1
 8021428:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802142c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8021430:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021432:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8021436:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802143a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802143e:	ea45 0c0c 	orr.w	ip, r5, ip
 8021442:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8021446:	4401      	add	r1, r0
 8021448:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802144a:	ea4c 0c08 	orr.w	ip, ip, r8
 802144e:	f82a cb02 	strh.w	ip, [sl], #2
 8021452:	4402      	add	r2, r0
 8021454:	e7ac      	b.n	80213b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021456:	f04f 0800 	mov.w	r8, #0
 802145a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 802145e:	eb03 0008 	add.w	r0, r3, r8
 8021462:	2800      	cmp	r0, #0
 8021464:	dc41      	bgt.n	80214ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8021466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802146a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802146e:	9b01      	ldr	r3, [sp, #4]
 8021470:	2b00      	cmp	r3, #0
 8021472:	f340 8097 	ble.w	80215a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802147a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802147e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021482:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021486:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802148a:	eef0 6a62 	vmov.f32	s13, s5
 802148e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021492:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021496:	ee61 7a27 	vmul.f32	s15, s2, s15
 802149a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802149e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80214a2:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 80214a6:	eef0 6a43 	vmov.f32	s13, s6
 80214aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80214ae:	ee12 2a90 	vmov	r2, s5
 80214b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80214b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80214b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80214c0:	ee13 2a10 	vmov	r2, s6
 80214c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80214c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80214c8:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 80214cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80214d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80214d2:	9b01      	ldr	r3, [sp, #4]
 80214d4:	9a05      	ldr	r2, [sp, #20]
 80214d6:	3b01      	subs	r3, #1
 80214d8:	9301      	str	r3, [sp, #4]
 80214da:	eeb0 3a67 	vmov.f32	s6, s15
 80214de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80214e0:	eef0 2a47 	vmov.f32	s5, s14
 80214e4:	bf08      	it	eq
 80214e6:	4613      	moveq	r3, r2
 80214e8:	e72c      	b.n	8021344 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80214ea:	140f      	asrs	r7, r1, #16
 80214ec:	d453      	bmi.n	8021596 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80214ee:	f8de 5008 	ldr.w	r5, [lr, #8]
 80214f2:	42bd      	cmp	r5, r7
 80214f4:	dd4f      	ble.n	8021596 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80214f6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80214fa:	d44c      	bmi.n	8021596 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80214fc:	f8de 000c 	ldr.w	r0, [lr, #12]
 8021500:	4560      	cmp	r0, ip
 8021502:	dd48      	ble.n	8021596 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8021504:	9803      	ldr	r0, [sp, #12]
 8021506:	b22d      	sxth	r5, r5
 8021508:	fb0c 0505 	mla	r5, ip, r5, r0
 802150c:	5de8      	ldrb	r0, [r5, r7]
 802150e:	9d04      	ldr	r5, [sp, #16]
 8021510:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021514:	f06f 0501 	mvn.w	r5, #1
 8021518:	fb05 fb08 	mul.w	fp, r5, r8
 802151c:	f834 500b 	ldrh.w	r5, [r4, fp]
 8021520:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021524:	122f      	asrs	r7, r5, #8
 8021526:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802152a:	fb17 f706 	smulbb	r7, r7, r6
 802152e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021532:	00ed      	lsls	r5, r5, #3
 8021534:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8021538:	b2ed      	uxtb	r5, r5
 802153a:	fb19 f906 	smulbb	r9, r9, r6
 802153e:	fb15 f506 	smulbb	r5, r5, r6
 8021542:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8021546:	fb0c 7c0a 	mla	ip, ip, sl, r7
 802154a:	10c7      	asrs	r7, r0, #3
 802154c:	00c0      	lsls	r0, r0, #3
 802154e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021552:	b2c0      	uxtb	r0, r0
 8021554:	fb07 970a 	mla	r7, r7, sl, r9
 8021558:	fb00 500a 	mla	r0, r0, sl, r5
 802155c:	fa1f fc8c 	uxth.w	ip, ip
 8021560:	b2bf      	uxth	r7, r7
 8021562:	b280      	uxth	r0, r0
 8021564:	f10c 0501 	add.w	r5, ip, #1
 8021568:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802156c:	f107 0901 	add.w	r9, r7, #1
 8021570:	1c45      	adds	r5, r0, #1
 8021572:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021576:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 802157a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802157e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021582:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021586:	ea45 0c0c 	orr.w	ip, r5, ip
 802158a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802158e:	ea4c 0c09 	orr.w	ip, ip, r9
 8021592:	f824 c00b 	strh.w	ip, [r4, fp]
 8021596:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021598:	f108 38ff 	add.w	r8, r8, #4294967295
 802159c:	4401      	add	r1, r0
 802159e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80215a0:	4402      	add	r2, r0
 80215a2:	e75c      	b.n	802145e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80215a4:	b007      	add	sp, #28
 80215a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80215ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215b2:	b085      	sub	sp, #20
 80215b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80215b6:	4693      	mov	fp, r2
 80215b8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80215bc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 80215c0:	6870      	ldr	r0, [r6, #4]
 80215c2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80215c4:	fb00 2404 	mla	r4, r0, r4, r2
 80215c8:	6832      	ldr	r2, [r6, #0]
 80215ca:	9100      	str	r1, [sp, #0]
 80215cc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80215d0:	682a      	ldr	r2, [r5, #0]
 80215d2:	9201      	str	r2, [sp, #4]
 80215d4:	686a      	ldr	r2, [r5, #4]
 80215d6:	3204      	adds	r2, #4
 80215d8:	9202      	str	r2, [sp, #8]
 80215da:	9a00      	ldr	r2, [sp, #0]
 80215dc:	2a00      	cmp	r2, #0
 80215de:	dc03      	bgt.n	80215e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80215e0:	f1bb 0f00 	cmp.w	fp, #0
 80215e4:	f340 80a0 	ble.w	8021728 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80215e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80215ea:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80215ee:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80215f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80215f4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80215f8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	dd0c      	ble.n	802161a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021600:	1406      	asrs	r6, r0, #16
 8021602:	d405      	bmi.n	8021610 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021604:	454e      	cmp	r6, r9
 8021606:	da03      	bge.n	8021610 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021608:	1416      	asrs	r6, r2, #16
 802160a:	d401      	bmi.n	8021610 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802160c:	4546      	cmp	r6, r8
 802160e:	db05      	blt.n	802161c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021610:	4470      	add	r0, lr
 8021612:	4462      	add	r2, ip
 8021614:	3b01      	subs	r3, #1
 8021616:	3402      	adds	r4, #2
 8021618:	e7f0      	b.n	80215fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802161a:	d00f      	beq.n	802163c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802161c:	1e5e      	subs	r6, r3, #1
 802161e:	fb0e 0706 	mla	r7, lr, r6, r0
 8021622:	143f      	asrs	r7, r7, #16
 8021624:	d541      	bpl.n	80216aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8021626:	4698      	mov	r8, r3
 8021628:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 802162c:	9603      	str	r6, [sp, #12]
 802162e:	f1b8 0f00 	cmp.w	r8, #0
 8021632:	dc59      	bgt.n	80216e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021638:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802163c:	9b00      	ldr	r3, [sp, #0]
 802163e:	2b00      	cmp	r3, #0
 8021640:	dd72      	ble.n	8021728 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8021642:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021646:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802164a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802164e:	eeb0 6a62 	vmov.f32	s12, s5
 8021652:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021656:	ee31 1a05 	vadd.f32	s2, s2, s10
 802165a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802165e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021662:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021666:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802166a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802166e:	eeb0 6a43 	vmov.f32	s12, s6
 8021672:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021676:	ee12 2a90 	vmov	r2, s5
 802167a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802167e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021680:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021684:	fb92 fef3 	sdiv	lr, r2, r3
 8021688:	ee13 2a10 	vmov	r2, s6
 802168c:	fb92 fcf3 	sdiv	ip, r2, r3
 8021690:	9b00      	ldr	r3, [sp, #0]
 8021692:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8021696:	3b01      	subs	r3, #1
 8021698:	9300      	str	r3, [sp, #0]
 802169a:	eeb0 3a67 	vmov.f32	s6, s15
 802169e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80216a0:	eef0 2a47 	vmov.f32	s5, s14
 80216a4:	bf08      	it	eq
 80216a6:	465b      	moveq	r3, fp
 80216a8:	e797      	b.n	80215da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80216aa:	454f      	cmp	r7, r9
 80216ac:	dabb      	bge.n	8021626 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80216ae:	fb0c 2606 	mla	r6, ip, r6, r2
 80216b2:	1436      	asrs	r6, r6, #16
 80216b4:	d4b7      	bmi.n	8021626 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80216b6:	4546      	cmp	r6, r8
 80216b8:	dab5      	bge.n	8021626 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80216ba:	461e      	mov	r6, r3
 80216bc:	46a0      	mov	r8, r4
 80216be:	2e00      	cmp	r6, #0
 80216c0:	ddb8      	ble.n	8021634 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80216c2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80216c6:	9901      	ldr	r1, [sp, #4]
 80216c8:	1417      	asrs	r7, r2, #16
 80216ca:	fb0a 1707 	mla	r7, sl, r7, r1
 80216ce:	ea4f 4920 	mov.w	r9, r0, asr #16
 80216d2:	f817 7009 	ldrb.w	r7, [r7, r9]
 80216d6:	9902      	ldr	r1, [sp, #8]
 80216d8:	4470      	add	r0, lr
 80216da:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80216de:	4462      	add	r2, ip
 80216e0:	f828 7b02 	strh.w	r7, [r8], #2
 80216e4:	3e01      	subs	r6, #1
 80216e6:	e7ea      	b.n	80216be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80216e8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80216ec:	d417      	bmi.n	802171e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80216ee:	68ae      	ldr	r6, [r5, #8]
 80216f0:	454e      	cmp	r6, r9
 80216f2:	dd14      	ble.n	802171e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80216f4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80216f8:	d411      	bmi.n	802171e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80216fa:	68ef      	ldr	r7, [r5, #12]
 80216fc:	4557      	cmp	r7, sl
 80216fe:	dd0e      	ble.n	802171e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8021700:	f06f 0101 	mvn.w	r1, #1
 8021704:	9f01      	ldr	r7, [sp, #4]
 8021706:	b236      	sxth	r6, r6
 8021708:	fb0a 7606 	mla	r6, sl, r6, r7
 802170c:	9f02      	ldr	r7, [sp, #8]
 802170e:	f816 6009 	ldrb.w	r6, [r6, r9]
 8021712:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8021716:	fb01 f608 	mul.w	r6, r1, r8
 802171a:	9903      	ldr	r1, [sp, #12]
 802171c:	538f      	strh	r7, [r1, r6]
 802171e:	4470      	add	r0, lr
 8021720:	4462      	add	r2, ip
 8021722:	f108 38ff 	add.w	r8, r8, #4294967295
 8021726:	e782      	b.n	802162e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021728:	b005      	add	sp, #20
 802172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802172e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802172e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021732:	b087      	sub	sp, #28
 8021734:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021736:	9102      	str	r1, [sp, #8]
 8021738:	9205      	str	r2, [sp, #20]
 802173a:	6861      	ldr	r1, [r4, #4]
 802173c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021740:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8021744:	9203      	str	r2, [sp, #12]
 8021746:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 802174a:	fb01 2000 	mla	r0, r1, r0, r2
 802174e:	6822      	ldr	r2, [r4, #0]
 8021750:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8021754:	9200      	str	r2, [sp, #0]
 8021756:	f8dc 2000 	ldr.w	r2, [ip]
 802175a:	9204      	str	r2, [sp, #16]
 802175c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021760:	3204      	adds	r2, #4
 8021762:	9201      	str	r2, [sp, #4]
 8021764:	9a03      	ldr	r2, [sp, #12]
 8021766:	43d5      	mvns	r5, r2
 8021768:	b2ed      	uxtb	r5, r5
 802176a:	9a02      	ldr	r2, [sp, #8]
 802176c:	2a00      	cmp	r2, #0
 802176e:	dc03      	bgt.n	8021778 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021770:	9a05      	ldr	r2, [sp, #20]
 8021772:	2a00      	cmp	r2, #0
 8021774:	f340 812c 	ble.w	80219d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021778:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802177a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 802177e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8021782:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021784:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021788:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 802178c:	2b00      	cmp	r3, #0
 802178e:	dd10      	ble.n	80217b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021790:	140c      	asrs	r4, r1, #16
 8021792:	d405      	bmi.n	80217a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021794:	4574      	cmp	r4, lr
 8021796:	da03      	bge.n	80217a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021798:	1414      	asrs	r4, r2, #16
 802179a:	d401      	bmi.n	80217a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802179c:	42bc      	cmp	r4, r7
 802179e:	db09      	blt.n	80217b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80217a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80217a2:	9800      	ldr	r0, [sp, #0]
 80217a4:	4421      	add	r1, r4
 80217a6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80217a8:	3002      	adds	r0, #2
 80217aa:	4422      	add	r2, r4
 80217ac:	3b01      	subs	r3, #1
 80217ae:	9000      	str	r0, [sp, #0]
 80217b0:	e7ec      	b.n	802178c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80217b2:	d071      	beq.n	8021898 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80217b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80217b6:	1e5c      	subs	r4, r3, #1
 80217b8:	fb06 1604 	mla	r6, r6, r4, r1
 80217bc:	1436      	asrs	r6, r6, #16
 80217be:	d45d      	bmi.n	802187c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80217c0:	4576      	cmp	r6, lr
 80217c2:	da5b      	bge.n	802187c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80217c4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80217c6:	fb06 2404 	mla	r4, r6, r4, r2
 80217ca:	1424      	asrs	r4, r4, #16
 80217cc:	d456      	bmi.n	802187c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80217ce:	42bc      	cmp	r4, r7
 80217d0:	da54      	bge.n	802187c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80217d2:	4698      	mov	r8, r3
 80217d4:	f8dd 9000 	ldr.w	r9, [sp]
 80217d8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80217dc:	f1b8 0f00 	cmp.w	r8, #0
 80217e0:	dd54      	ble.n	802188c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80217e2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80217e6:	9804      	ldr	r0, [sp, #16]
 80217e8:	1414      	asrs	r4, r2, #16
 80217ea:	fb07 0404 	mla	r4, r7, r4, r0
 80217ee:	140e      	asrs	r6, r1, #16
 80217f0:	f814 e006 	ldrb.w	lr, [r4, r6]
 80217f4:	9801      	ldr	r0, [sp, #4]
 80217f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80217fa:	eb00 0b0e 	add.w	fp, r0, lr
 80217fe:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8021802:	f8b9 4000 	ldrh.w	r4, [r9]
 8021806:	fb16 f60a 	smulbb	r6, r6, sl
 802180a:	1227      	asrs	r7, r4, #8
 802180c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021810:	fb07 6705 	mla	r7, r7, r5, r6
 8021814:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021818:	10e6      	asrs	r6, r4, #3
 802181a:	00e4      	lsls	r4, r4, #3
 802181c:	b2e4      	uxtb	r4, r4
 802181e:	fb1b fb0a 	smulbb	fp, fp, sl
 8021822:	fb14 f405 	smulbb	r4, r4, r5
 8021826:	f810 e00e 	ldrb.w	lr, [r0, lr]
 802182a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802182e:	fb06 b605 	mla	r6, r6, r5, fp
 8021832:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8021836:	b2bf      	uxth	r7, r7
 8021838:	b2b6      	uxth	r6, r6
 802183a:	fa1f fe8e 	uxth.w	lr, lr
 802183e:	1c7c      	adds	r4, r7, #1
 8021840:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8021844:	f106 0b01 	add.w	fp, r6, #1
 8021848:	f10e 0401 	add.w	r4, lr, #1
 802184c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802184e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8021852:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8021856:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802185a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 802185e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8021862:	4327      	orrs	r7, r4
 8021864:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8021868:	4401      	add	r1, r0
 802186a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802186c:	ea47 070b 	orr.w	r7, r7, fp
 8021870:	f829 7b02 	strh.w	r7, [r9], #2
 8021874:	4402      	add	r2, r0
 8021876:	f108 38ff 	add.w	r8, r8, #4294967295
 802187a:	e7af      	b.n	80217dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802187c:	f04f 0e00 	mov.w	lr, #0
 8021880:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8021884:	eb03 040e 	add.w	r4, r3, lr
 8021888:	2c00      	cmp	r4, #0
 802188a:	dc43      	bgt.n	8021914 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802188c:	9a00      	ldr	r2, [sp, #0]
 802188e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021892:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021896:	9300      	str	r3, [sp, #0]
 8021898:	9b02      	ldr	r3, [sp, #8]
 802189a:	2b00      	cmp	r3, #0
 802189c:	f340 8098 	ble.w	80219d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80218a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80218a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80218a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80218ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80218b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80218b4:	eef0 6a62 	vmov.f32	s13, s5
 80218b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80218bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80218c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80218c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80218cc:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 80218d0:	eef0 6a43 	vmov.f32	s13, s6
 80218d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80218d8:	ee12 2a90 	vmov	r2, s5
 80218dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80218e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80218e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80218ea:	ee13 2a10 	vmov	r2, s6
 80218ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80218f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80218f2:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 80218f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80218fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80218fc:	9b02      	ldr	r3, [sp, #8]
 80218fe:	9a05      	ldr	r2, [sp, #20]
 8021900:	3b01      	subs	r3, #1
 8021902:	9302      	str	r3, [sp, #8]
 8021904:	eeb0 3a67 	vmov.f32	s6, s15
 8021908:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802190a:	eef0 2a47 	vmov.f32	s5, s14
 802190e:	bf08      	it	eq
 8021910:	4613      	moveq	r3, r2
 8021912:	e72a      	b.n	802176a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021914:	140f      	asrs	r7, r1, #16
 8021916:	d454      	bmi.n	80219c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8021918:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802191c:	42be      	cmp	r6, r7
 802191e:	dd50      	ble.n	80219c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8021920:	ea5f 4822 	movs.w	r8, r2, asr #16
 8021924:	d44d      	bmi.n	80219c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8021926:	f8dc 400c 	ldr.w	r4, [ip, #12]
 802192a:	4544      	cmp	r4, r8
 802192c:	dd49      	ble.n	80219c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802192e:	f06f 0001 	mvn.w	r0, #1
 8021932:	9c04      	ldr	r4, [sp, #16]
 8021934:	b236      	sxth	r6, r6
 8021936:	fb08 4606 	mla	r6, r8, r6, r4
 802193a:	f816 8007 	ldrb.w	r8, [r6, r7]
 802193e:	9c01      	ldr	r4, [sp, #4]
 8021940:	fb00 fa0e 	mul.w	sl, r0, lr
 8021944:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021948:	eb04 0b08 	add.w	fp, r4, r8
 802194c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8021950:	9800      	ldr	r0, [sp, #0]
 8021952:	fb16 f609 	smulbb	r6, r6, r9
 8021956:	f830 400a 	ldrh.w	r4, [r0, sl]
 802195a:	f89b b001 	ldrb.w	fp, [fp, #1]
 802195e:	1227      	asrs	r7, r4, #8
 8021960:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021964:	fb07 6705 	mla	r7, r7, r5, r6
 8021968:	10e6      	asrs	r6, r4, #3
 802196a:	00e4      	lsls	r4, r4, #3
 802196c:	b2e4      	uxtb	r4, r4
 802196e:	fb1b fb09 	smulbb	fp, fp, r9
 8021972:	9801      	ldr	r0, [sp, #4]
 8021974:	fb14 f405 	smulbb	r4, r4, r5
 8021978:	f810 8008 	ldrb.w	r8, [r0, r8]
 802197c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021980:	fb06 b605 	mla	r6, r6, r5, fp
 8021984:	fb08 4809 	mla	r8, r8, r9, r4
 8021988:	b2bf      	uxth	r7, r7
 802198a:	b2b6      	uxth	r6, r6
 802198c:	fa1f f888 	uxth.w	r8, r8
 8021990:	1c7c      	adds	r4, r7, #1
 8021992:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8021996:	f106 0b01 	add.w	fp, r6, #1
 802199a:	f108 0401 	add.w	r4, r8, #1
 802199e:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80219a2:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80219a6:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80219aa:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80219ae:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80219b2:	4327      	orrs	r7, r4
 80219b4:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80219b8:	9800      	ldr	r0, [sp, #0]
 80219ba:	ea47 070b 	orr.w	r7, r7, fp
 80219be:	f820 700a 	strh.w	r7, [r0, sl]
 80219c2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80219c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80219c8:	4401      	add	r1, r0
 80219ca:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80219cc:	4402      	add	r2, r0
 80219ce:	e759      	b.n	8021884 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80219d0:	b007      	add	sp, #28
 80219d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080219d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80219d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80219dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219e0:	b085      	sub	sp, #20
 80219e2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80219e4:	9203      	str	r2, [sp, #12]
 80219e6:	6870      	ldr	r0, [r6, #4]
 80219e8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80219ec:	fb00 2404 	mla	r4, r0, r4, r2
 80219f0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80219f2:	6832      	ldr	r2, [r6, #0]
 80219f4:	686f      	ldr	r7, [r5, #4]
 80219f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80219fa:	682a      	ldr	r2, [r5, #0]
 80219fc:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8021a00:	9101      	str	r1, [sp, #4]
 8021a02:	9202      	str	r2, [sp, #8]
 8021a04:	3704      	adds	r7, #4
 8021a06:	9a01      	ldr	r2, [sp, #4]
 8021a08:	2a00      	cmp	r2, #0
 8021a0a:	dc03      	bgt.n	8021a14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021a0c:	9a03      	ldr	r2, [sp, #12]
 8021a0e:	2a00      	cmp	r2, #0
 8021a10:	f340 80cc 	ble.w	8021bac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021a14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021a16:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8021a1a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021a1e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021a20:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8021a24:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8021a28:	2b00      	cmp	r3, #0
 8021a2a:	dd0d      	ble.n	8021a48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021a2c:	1406      	asrs	r6, r0, #16
 8021a2e:	d405      	bmi.n	8021a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021a30:	454e      	cmp	r6, r9
 8021a32:	da03      	bge.n	8021a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021a34:	1416      	asrs	r6, r2, #16
 8021a36:	d401      	bmi.n	8021a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021a38:	4546      	cmp	r6, r8
 8021a3a:	db06      	blt.n	8021a4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021a3c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8021a3e:	4460      	add	r0, ip
 8021a40:	4432      	add	r2, r6
 8021a42:	3b01      	subs	r3, #1
 8021a44:	3402      	adds	r4, #2
 8021a46:	e7ef      	b.n	8021a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8021a48:	d00f      	beq.n	8021a6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021a4a:	1e5e      	subs	r6, r3, #1
 8021a4c:	fb0c 0e06 	mla	lr, ip, r6, r0
 8021a50:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8021a54:	d543      	bpl.n	8021ade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8021a56:	4698      	mov	r8, r3
 8021a58:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8021a5c:	f1b8 0f00 	cmp.w	r8, #0
 8021a60:	dc71      	bgt.n	8021b46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8021a62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021a66:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021a6a:	9b01      	ldr	r3, [sp, #4]
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	f340 809d 	ble.w	8021bac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021a72:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021a7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021a7e:	eeb0 6a62 	vmov.f32	s12, s5
 8021a82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021a86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021a8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021a8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021a92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021a96:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8021a9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021a9e:	eeb0 6a43 	vmov.f32	s12, s6
 8021aa2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021aa6:	ee12 2a90 	vmov	r2, s5
 8021aaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021ab0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ab4:	fb92 fcf3 	sdiv	ip, r2, r3
 8021ab8:	ee13 2a10 	vmov	r2, s6
 8021abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ac0:	9312      	str	r3, [sp, #72]	@ 0x48
 8021ac2:	9b01      	ldr	r3, [sp, #4]
 8021ac4:	9a03      	ldr	r2, [sp, #12]
 8021ac6:	3b01      	subs	r3, #1
 8021ac8:	9301      	str	r3, [sp, #4]
 8021aca:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8021ace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021ad0:	eeb0 3a67 	vmov.f32	s6, s15
 8021ad4:	bf08      	it	eq
 8021ad6:	4613      	moveq	r3, r2
 8021ad8:	eef0 2a47 	vmov.f32	s5, s14
 8021adc:	e793      	b.n	8021a06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021ade:	45ce      	cmp	lr, r9
 8021ae0:	dab9      	bge.n	8021a56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021ae2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021ae4:	fb01 2606 	mla	r6, r1, r6, r2
 8021ae8:	1436      	asrs	r6, r6, #16
 8021aea:	d4b4      	bmi.n	8021a56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021aec:	4546      	cmp	r6, r8
 8021aee:	dab2      	bge.n	8021a56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021af0:	4698      	mov	r8, r3
 8021af2:	46a2      	mov	sl, r4
 8021af4:	f1b8 0f00 	cmp.w	r8, #0
 8021af8:	ddb3      	ble.n	8021a62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021afa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8021afe:	9902      	ldr	r1, [sp, #8]
 8021b00:	1416      	asrs	r6, r2, #16
 8021b02:	fb09 1606 	mla	r6, r9, r6, r1
 8021b06:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8021b0a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8021b0e:	4929      	ldr	r1, [pc, #164]	@ (8021bb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8021b10:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021b14:	eb07 0b0e 	add.w	fp, r7, lr
 8021b18:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8021b1c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8021b20:	00f6      	lsls	r6, r6, #3
 8021b22:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8021b26:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021b2a:	ea49 0606 	orr.w	r6, r9, r6
 8021b2e:	f817 900e 	ldrb.w	r9, [r7, lr]
 8021b32:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021b34:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8021b38:	f82a 6b02 	strh.w	r6, [sl], #2
 8021b3c:	4460      	add	r0, ip
 8021b3e:	440a      	add	r2, r1
 8021b40:	f108 38ff 	add.w	r8, r8, #4294967295
 8021b44:	e7d6      	b.n	8021af4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021b46:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021b4a:	d429      	bmi.n	8021ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021b4c:	68ae      	ldr	r6, [r5, #8]
 8021b4e:	454e      	cmp	r6, r9
 8021b50:	dd26      	ble.n	8021ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021b52:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8021b56:	d423      	bmi.n	8021ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021b58:	68e9      	ldr	r1, [r5, #12]
 8021b5a:	4559      	cmp	r1, fp
 8021b5c:	dd20      	ble.n	8021ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021b5e:	9902      	ldr	r1, [sp, #8]
 8021b60:	fa0f fe86 	sxth.w	lr, r6
 8021b64:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8021b68:	f06f 0101 	mvn.w	r1, #1
 8021b6c:	f81e e009 	ldrb.w	lr, [lr, r9]
 8021b70:	fb01 f908 	mul.w	r9, r1, r8
 8021b74:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021b78:	eb07 060e 	add.w	r6, r7, lr
 8021b7c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8021b80:	7876      	ldrb	r6, [r6, #1]
 8021b82:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 8021b86:	00f6      	lsls	r6, r6, #3
 8021b88:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8021b8c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021b90:	ea4b 0606 	orr.w	r6, fp, r6
 8021b94:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8021b98:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8021b9c:	f82a 6009 	strh.w	r6, [sl, r9]
 8021ba0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021ba2:	4460      	add	r0, ip
 8021ba4:	440a      	add	r2, r1
 8021ba6:	f108 38ff 	add.w	r8, r8, #4294967295
 8021baa:	e757      	b.n	8021a5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021bac:	b005      	add	sp, #20
 8021bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bb2:	bf00      	nop
 8021bb4:	fffff800 	.word	0xfffff800

08021bb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021bb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc0:	b087      	sub	sp, #28
 8021bc2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021bc4:	468b      	mov	fp, r1
 8021bc6:	9204      	str	r2, [sp, #16]
 8021bc8:	6841      	ldr	r1, [r0, #4]
 8021bca:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021bce:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8021bd2:	9205      	str	r2, [sp, #20]
 8021bd4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8021bd8:	fb01 2404 	mla	r4, r1, r4, r2
 8021bdc:	6802      	ldr	r2, [r0, #0]
 8021bde:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021be2:	f8dc 2000 	ldr.w	r2, [ip]
 8021be6:	9201      	str	r2, [sp, #4]
 8021be8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021bec:	3204      	adds	r2, #4
 8021bee:	9202      	str	r2, [sp, #8]
 8021bf0:	f1bb 0f00 	cmp.w	fp, #0
 8021bf4:	dc03      	bgt.n	8021bfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8021bf6:	9a04      	ldr	r2, [sp, #16]
 8021bf8:	2a00      	cmp	r2, #0
 8021bfa:	f340 8138 	ble.w	8021e6e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8021bfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021c00:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8021c04:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021c08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021c0a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8021c0e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8021c12:	2b00      	cmp	r3, #0
 8021c14:	dd0e      	ble.n	8021c34 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021c16:	1402      	asrs	r2, r0, #16
 8021c18:	d405      	bmi.n	8021c26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021c1a:	42ba      	cmp	r2, r7
 8021c1c:	da03      	bge.n	8021c26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021c1e:	140a      	asrs	r2, r1, #16
 8021c20:	d401      	bmi.n	8021c26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021c22:	42b2      	cmp	r2, r6
 8021c24:	db07      	blt.n	8021c36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021c26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021c28:	3b01      	subs	r3, #1
 8021c2a:	4410      	add	r0, r2
 8021c2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021c2e:	3402      	adds	r4, #2
 8021c30:	4411      	add	r1, r2
 8021c32:	e7ee      	b.n	8021c12 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021c34:	d019      	beq.n	8021c6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021c36:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021c38:	1e5a      	subs	r2, r3, #1
 8021c3a:	fb05 0502 	mla	r5, r5, r2, r0
 8021c3e:	142d      	asrs	r5, r5, #16
 8021c40:	d409      	bmi.n	8021c56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021c42:	42bd      	cmp	r5, r7
 8021c44:	da07      	bge.n	8021c56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021c46:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021c48:	fb05 1202 	mla	r2, r5, r2, r1
 8021c4c:	1412      	asrs	r2, r2, #16
 8021c4e:	d402      	bmi.n	8021c56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021c50:	42b2      	cmp	r2, r6
 8021c52:	f2c0 80ac 	blt.w	8021dae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8021c56:	f04f 0e00 	mov.w	lr, #0
 8021c5a:	eb03 020e 	add.w	r2, r3, lr
 8021c5e:	2a00      	cmp	r2, #0
 8021c60:	dc3e      	bgt.n	8021ce0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021c62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021c66:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021c6a:	f1bb 0f00 	cmp.w	fp, #0
 8021c6e:	f340 80fe 	ble.w	8021e6e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8021c72:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021c76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021c7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c82:	eeb0 6a62 	vmov.f32	s12, s5
 8021c86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021c96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c9a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8021c9e:	eeb0 6a43 	vmov.f32	s12, s6
 8021ca2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ca6:	ee12 2a90 	vmov	r2, s5
 8021caa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021cae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021cb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cb8:	ee13 2a10 	vmov	r2, s6
 8021cbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021cbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cc0:	f1bb 0b01 	subs.w	fp, fp, #1
 8021cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cc8:	9a04      	ldr	r2, [sp, #16]
 8021cca:	9314      	str	r3, [sp, #80]	@ 0x50
 8021ccc:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8021cd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cd2:	eeb0 3a67 	vmov.f32	s6, s15
 8021cd6:	bf08      	it	eq
 8021cd8:	4613      	moveq	r3, r2
 8021cda:	eef0 2a47 	vmov.f32	s5, s14
 8021cde:	e787      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021ce0:	1406      	asrs	r6, r0, #16
 8021ce2:	d45d      	bmi.n	8021da0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021ce4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8021ce8:	42b5      	cmp	r5, r6
 8021cea:	dd59      	ble.n	8021da0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021cec:	140f      	asrs	r7, r1, #16
 8021cee:	d457      	bmi.n	8021da0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021cf0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8021cf4:	42ba      	cmp	r2, r7
 8021cf6:	dd53      	ble.n	8021da0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021cf8:	9a01      	ldr	r2, [sp, #4]
 8021cfa:	b22d      	sxth	r5, r5
 8021cfc:	fb07 2505 	mla	r5, r7, r5, r2
 8021d00:	5daa      	ldrb	r2, [r5, r6]
 8021d02:	9d02      	ldr	r5, [sp, #8]
 8021d04:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8021d08:	0e2e      	lsrs	r6, r5, #24
 8021d0a:	d049      	beq.n	8021da0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021d0c:	f06f 0201 	mvn.w	r2, #1
 8021d10:	fb02 f20e 	mul.w	r2, r2, lr
 8021d14:	f834 8002 	ldrh.w	r8, [r4, r2]
 8021d18:	9203      	str	r2, [sp, #12]
 8021d1a:	9a05      	ldr	r2, [sp, #20]
 8021d1c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021d20:	4356      	muls	r6, r2
 8021d22:	1c72      	adds	r2, r6, #1
 8021d24:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8021d28:	1212      	asrs	r2, r2, #8
 8021d2a:	fa1f f982 	uxth.w	r9, r2
 8021d2e:	43d2      	mvns	r2, r2
 8021d30:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021d34:	fb16 f609 	smulbb	r6, r6, r9
 8021d38:	b2ed      	uxtb	r5, r5
 8021d3a:	ea4f 2728 	mov.w	r7, r8, asr #8
 8021d3e:	fb15 f509 	smulbb	r5, r5, r9
 8021d42:	b2d2      	uxtb	r2, r2
 8021d44:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021d48:	fb07 6702 	mla	r7, r7, r2, r6
 8021d4c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8021d50:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021d54:	fb1a fa09 	smulbb	sl, sl, r9
 8021d58:	fa5f f888 	uxtb.w	r8, r8
 8021d5c:	fb08 5502 	mla	r5, r8, r2, r5
 8021d60:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021d64:	fb06 a602 	mla	r6, r6, r2, sl
 8021d68:	b2bf      	uxth	r7, r7
 8021d6a:	b2ad      	uxth	r5, r5
 8021d6c:	1c7a      	adds	r2, r7, #1
 8021d6e:	f105 0a01 	add.w	sl, r5, #1
 8021d72:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021d76:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021d7a:	b2b6      	uxth	r6, r6
 8021d7c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021d80:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8021d84:	ea4a 0707 	orr.w	r7, sl, r7
 8021d88:	f106 0a01 	add.w	sl, r6, #1
 8021d8c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021d90:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021d94:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021d98:	9a03      	ldr	r2, [sp, #12]
 8021d9a:	ea47 070a 	orr.w	r7, r7, sl
 8021d9e:	52a7      	strh	r7, [r4, r2]
 8021da0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021da2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021da6:	4410      	add	r0, r2
 8021da8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021daa:	4411      	add	r1, r2
 8021dac:	e755      	b.n	8021c5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021dae:	f04f 0800 	mov.w	r8, #0
 8021db2:	eba3 0208 	sub.w	r2, r3, r8
 8021db6:	2a00      	cmp	r2, #0
 8021db8:	f77f af53 	ble.w	8021c62 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021dbc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8021dc0:	9f01      	ldr	r7, [sp, #4]
 8021dc2:	140a      	asrs	r2, r1, #16
 8021dc4:	fb06 7202 	mla	r2, r6, r2, r7
 8021dc8:	1405      	asrs	r5, r0, #16
 8021dca:	5d52      	ldrb	r2, [r2, r5]
 8021dcc:	9d02      	ldr	r5, [sp, #8]
 8021dce:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8021dd2:	0e2e      	lsrs	r6, r5, #24
 8021dd4:	d044      	beq.n	8021e60 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8021dd6:	9a05      	ldr	r2, [sp, #20]
 8021dd8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8021ddc:	4356      	muls	r6, r2
 8021dde:	1c72      	adds	r2, r6, #1
 8021de0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8021de4:	1212      	asrs	r2, r2, #8
 8021de6:	fa1f f982 	uxth.w	r9, r2
 8021dea:	43d2      	mvns	r2, r2
 8021dec:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021df0:	fb16 f609 	smulbb	r6, r6, r9
 8021df4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021df8:	b2ed      	uxtb	r5, r5
 8021dfa:	ea4f 272e 	mov.w	r7, lr, asr #8
 8021dfe:	fb15 f509 	smulbb	r5, r5, r9
 8021e02:	b2d2      	uxtb	r2, r2
 8021e04:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021e08:	fb07 6702 	mla	r7, r7, r2, r6
 8021e0c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021e10:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021e14:	fb1a fa09 	smulbb	sl, sl, r9
 8021e18:	fa5f fe8e 	uxtb.w	lr, lr
 8021e1c:	fb0e 5502 	mla	r5, lr, r2, r5
 8021e20:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021e24:	fb06 a602 	mla	r6, r6, r2, sl
 8021e28:	b2bf      	uxth	r7, r7
 8021e2a:	b2ad      	uxth	r5, r5
 8021e2c:	1c7a      	adds	r2, r7, #1
 8021e2e:	f105 0a01 	add.w	sl, r5, #1
 8021e32:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021e36:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021e3a:	b2b6      	uxth	r6, r6
 8021e3c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021e40:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8021e44:	ea4a 0707 	orr.w	r7, sl, r7
 8021e48:	f106 0a01 	add.w	sl, r6, #1
 8021e4c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021e50:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021e54:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021e58:	ea47 070a 	orr.w	r7, r7, sl
 8021e5c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8021e60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021e62:	f108 0801 	add.w	r8, r8, #1
 8021e66:	4410      	add	r0, r2
 8021e68:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021e6a:	4411      	add	r1, r2
 8021e6c:	e7a1      	b.n	8021db2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021e6e:	b007      	add	sp, #28
 8021e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021e74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e7c:	b085      	sub	sp, #20
 8021e7e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021e80:	468b      	mov	fp, r1
 8021e82:	6841      	ldr	r1, [r0, #4]
 8021e84:	9203      	str	r2, [sp, #12]
 8021e86:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8021e8a:	fb01 2404 	mla	r4, r1, r4, r2
 8021e8e:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8021e92:	6802      	ldr	r2, [r0, #0]
 8021e94:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021e98:	f8de 2000 	ldr.w	r2, [lr]
 8021e9c:	9200      	str	r2, [sp, #0]
 8021e9e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8021ea2:	3204      	adds	r2, #4
 8021ea4:	9201      	str	r2, [sp, #4]
 8021ea6:	f1bb 0f00 	cmp.w	fp, #0
 8021eaa:	dc03      	bgt.n	8021eb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8021eac:	9a03      	ldr	r2, [sp, #12]
 8021eae:	2a00      	cmp	r2, #0
 8021eb0:	f340 8153 	ble.w	802215a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8021eb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021eb6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8021eba:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8021ebe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021ec0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8021ec4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	dd0e      	ble.n	8021eea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021ecc:	1408      	asrs	r0, r1, #16
 8021ece:	d405      	bmi.n	8021edc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021ed0:	42b8      	cmp	r0, r7
 8021ed2:	da03      	bge.n	8021edc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021ed4:	1410      	asrs	r0, r2, #16
 8021ed6:	d401      	bmi.n	8021edc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021ed8:	42b0      	cmp	r0, r6
 8021eda:	db07      	blt.n	8021eec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021edc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021ede:	3b01      	subs	r3, #1
 8021ee0:	4401      	add	r1, r0
 8021ee2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021ee4:	3402      	adds	r4, #2
 8021ee6:	4402      	add	r2, r0
 8021ee8:	e7ee      	b.n	8021ec8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021eea:	d017      	beq.n	8021f1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021eec:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021eee:	1e58      	subs	r0, r3, #1
 8021ef0:	fb05 1500 	mla	r5, r5, r0, r1
 8021ef4:	142d      	asrs	r5, r5, #16
 8021ef6:	d409      	bmi.n	8021f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021ef8:	42bd      	cmp	r5, r7
 8021efa:	da07      	bge.n	8021f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021efc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8021efe:	fb05 2000 	mla	r0, r5, r0, r2
 8021f02:	1400      	asrs	r0, r0, #16
 8021f04:	d402      	bmi.n	8021f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021f06:	42b0      	cmp	r0, r6
 8021f08:	f2c0 80bc 	blt.w	8022084 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8021f0c:	2600      	movs	r6, #0
 8021f0e:	1998      	adds	r0, r3, r6
 8021f10:	2800      	cmp	r0, #0
 8021f12:	dc3e      	bgt.n	8021f92 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021f14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021f1c:	f1bb 0f00 	cmp.w	fp, #0
 8021f20:	f340 811b 	ble.w	802215a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8021f24:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f2c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021f30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f34:	eeb0 6a62 	vmov.f32	s12, s5
 8021f38:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f40:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f4c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8021f50:	eeb0 6a43 	vmov.f32	s12, s6
 8021f54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f58:	ee12 2a90 	vmov	r2, s5
 8021f5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f66:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f6a:	ee13 2a10 	vmov	r2, s6
 8021f6e:	9311      	str	r3, [sp, #68]	@ 0x44
 8021f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f72:	f1bb 0b01 	subs.w	fp, fp, #1
 8021f76:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f7a:	9a03      	ldr	r2, [sp, #12]
 8021f7c:	9312      	str	r3, [sp, #72]	@ 0x48
 8021f7e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8021f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f84:	eeb0 3a67 	vmov.f32	s6, s15
 8021f88:	bf08      	it	eq
 8021f8a:	4613      	moveq	r3, r2
 8021f8c:	eef0 2a47 	vmov.f32	s5, s14
 8021f90:	e789      	b.n	8021ea6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8021f92:	140f      	asrs	r7, r1, #16
 8021f94:	d426      	bmi.n	8021fe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021f96:	f8de 5008 	ldr.w	r5, [lr, #8]
 8021f9a:	42bd      	cmp	r5, r7
 8021f9c:	dd22      	ble.n	8021fe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021f9e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021fa2:	d41f      	bmi.n	8021fe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021fa4:	f8de 000c 	ldr.w	r0, [lr, #12]
 8021fa8:	4560      	cmp	r0, ip
 8021faa:	dd1b      	ble.n	8021fe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021fac:	9800      	ldr	r0, [sp, #0]
 8021fae:	b22d      	sxth	r5, r5
 8021fb0:	fb0c 0505 	mla	r5, ip, r5, r0
 8021fb4:	5de8      	ldrb	r0, [r5, r7]
 8021fb6:	9d01      	ldr	r5, [sp, #4]
 8021fb8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8021fbc:	0e07      	lsrs	r7, r0, #24
 8021fbe:	2fff      	cmp	r7, #255	@ 0xff
 8021fc0:	d116      	bne.n	8021ff0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021fc2:	f06f 0501 	mvn.w	r5, #1
 8021fc6:	fb05 f706 	mul.w	r7, r5, r6
 8021fca:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8021fce:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8021fd2:	0945      	lsrs	r5, r0, #5
 8021fd4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021fd8:	ea4c 0505 	orr.w	r5, ip, r5
 8021fdc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021fe0:	4305      	orrs	r5, r0
 8021fe2:	53e5      	strh	r5, [r4, r7]
 8021fe4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021fe6:	3e01      	subs	r6, #1
 8021fe8:	4401      	add	r1, r0
 8021fea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021fec:	4402      	add	r2, r0
 8021fee:	e78e      	b.n	8021f0e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021ff0:	b2fd      	uxtb	r5, r7
 8021ff2:	2f00      	cmp	r7, #0
 8021ff4:	d0f6      	beq.n	8021fe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021ff6:	f06f 0701 	mvn.w	r7, #1
 8021ffa:	fa1f f985 	uxth.w	r9, r5
 8021ffe:	43ed      	mvns	r5, r5
 8022000:	4377      	muls	r7, r6
 8022002:	f834 8007 	ldrh.w	r8, [r4, r7]
 8022006:	9702      	str	r7, [sp, #8]
 8022008:	f3c0 4707 	ubfx	r7, r0, #16, #8
 802200c:	fb17 f709 	smulbb	r7, r7, r9
 8022010:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022014:	b2c0      	uxtb	r0, r0
 8022016:	ea4f 2c28 	mov.w	ip, r8, asr #8
 802201a:	fb10 f009 	smulbb	r0, r0, r9
 802201e:	b2ed      	uxtb	r5, r5
 8022020:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022024:	fb0c 7c05 	mla	ip, ip, r5, r7
 8022028:	ea4f 07e8 	mov.w	r7, r8, asr #3
 802202c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8022030:	fb1a fa09 	smulbb	sl, sl, r9
 8022034:	fa5f f888 	uxtb.w	r8, r8
 8022038:	fb08 0005 	mla	r0, r8, r5, r0
 802203c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022040:	fb07 a705 	mla	r7, r7, r5, sl
 8022044:	b280      	uxth	r0, r0
 8022046:	fa1f fc8c 	uxth.w	ip, ip
 802204a:	f100 0a01 	add.w	sl, r0, #1
 802204e:	f10c 0501 	add.w	r5, ip, #1
 8022052:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8022056:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802205a:	b2bf      	uxth	r7, r7
 802205c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022060:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022064:	ea4a 0c0c 	orr.w	ip, sl, ip
 8022068:	f107 0a01 	add.w	sl, r7, #1
 802206c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8022070:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022074:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022078:	9802      	ldr	r0, [sp, #8]
 802207a:	ea4c 0c0a 	orr.w	ip, ip, sl
 802207e:	f824 c000 	strh.w	ip, [r4, r0]
 8022082:	e7af      	b.n	8021fe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8022084:	f04f 0800 	mov.w	r8, #0
 8022088:	eba3 0008 	sub.w	r0, r3, r8
 802208c:	2800      	cmp	r0, #0
 802208e:	f77f af41 	ble.w	8021f14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022092:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8022096:	9f00      	ldr	r7, [sp, #0]
 8022098:	1410      	asrs	r0, r2, #16
 802209a:	fb06 7000 	mla	r0, r6, r0, r7
 802209e:	140d      	asrs	r5, r1, #16
 80220a0:	5d40      	ldrb	r0, [r0, r5]
 80220a2:	9d01      	ldr	r5, [sp, #4]
 80220a4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80220a8:	0e2e      	lsrs	r6, r5, #24
 80220aa:	2eff      	cmp	r6, #255	@ 0xff
 80220ac:	d112      	bne.n	80220d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 80220ae:	482c      	ldr	r0, [pc, #176]	@ (8022160 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 80220b0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80220b4:	0968      	lsrs	r0, r5, #5
 80220b6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80220ba:	4330      	orrs	r0, r6
 80220bc:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80220c0:	4328      	orrs	r0, r5
 80220c2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80220c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80220c8:	f108 0801 	add.w	r8, r8, #1
 80220cc:	4401      	add	r1, r0
 80220ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80220d0:	4402      	add	r2, r0
 80220d2:	e7d9      	b.n	8022088 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80220d4:	b2f0      	uxtb	r0, r6
 80220d6:	2e00      	cmp	r6, #0
 80220d8:	d0f5      	beq.n	80220c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80220da:	fa1f f980 	uxth.w	r9, r0
 80220de:	43c0      	mvns	r0, r0
 80220e0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80220e4:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 80220e8:	fb16 f609 	smulbb	r6, r6, r9
 80220ec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80220f0:	b2ed      	uxtb	r5, r5
 80220f2:	ea4f 272c 	mov.w	r7, ip, asr #8
 80220f6:	fb15 f509 	smulbb	r5, r5, r9
 80220fa:	b2c0      	uxtb	r0, r0
 80220fc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022100:	fb07 6700 	mla	r7, r7, r0, r6
 8022104:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8022108:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802210c:	fb1a fa09 	smulbb	sl, sl, r9
 8022110:	fa5f fc8c 	uxtb.w	ip, ip
 8022114:	fb0c 5500 	mla	r5, ip, r0, r5
 8022118:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802211c:	fb06 a600 	mla	r6, r6, r0, sl
 8022120:	b2bf      	uxth	r7, r7
 8022122:	b2ad      	uxth	r5, r5
 8022124:	1c78      	adds	r0, r7, #1
 8022126:	f105 0a01 	add.w	sl, r5, #1
 802212a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 802212e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022132:	b2b6      	uxth	r6, r6
 8022134:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022138:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802213c:	ea4a 0707 	orr.w	r7, sl, r7
 8022140:	f106 0a01 	add.w	sl, r6, #1
 8022144:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022148:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802214c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022150:	ea47 070a 	orr.w	r7, r7, sl
 8022154:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8022158:	e7b5      	b.n	80220c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802215a:	b005      	add	sp, #20
 802215c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022160:	fffff800 	.word	0xfffff800

08022164 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022164:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802216c:	b087      	sub	sp, #28
 802216e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022170:	468b      	mov	fp, r1
 8022172:	9204      	str	r2, [sp, #16]
 8022174:	6861      	ldr	r1, [r4, #4]
 8022176:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 802217a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 802217e:	9205      	str	r2, [sp, #20]
 8022180:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 8022184:	fb01 2000 	mla	r0, r1, r0, r2
 8022188:	6822      	ldr	r2, [r4, #0]
 802218a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802218e:	f8de 2000 	ldr.w	r2, [lr]
 8022192:	9201      	str	r2, [sp, #4]
 8022194:	f8de 2004 	ldr.w	r2, [lr, #4]
 8022198:	9202      	str	r2, [sp, #8]
 802219a:	f1bb 0f00 	cmp.w	fp, #0
 802219e:	dc03      	bgt.n	80221a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80221a0:	9a04      	ldr	r2, [sp, #16]
 80221a2:	2a00      	cmp	r2, #0
 80221a4:	f340 8142 	ble.w	802242c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80221a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80221aa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80221ae:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80221b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80221b4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80221b8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80221bc:	2b00      	cmp	r3, #0
 80221be:	dd0e      	ble.n	80221de <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80221c0:	140c      	asrs	r4, r1, #16
 80221c2:	d405      	bmi.n	80221d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80221c4:	42bc      	cmp	r4, r7
 80221c6:	da03      	bge.n	80221d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80221c8:	1414      	asrs	r4, r2, #16
 80221ca:	d401      	bmi.n	80221d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80221cc:	42b4      	cmp	r4, r6
 80221ce:	db07      	blt.n	80221e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80221d0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80221d2:	3b01      	subs	r3, #1
 80221d4:	4421      	add	r1, r4
 80221d6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80221d8:	3002      	adds	r0, #2
 80221da:	4422      	add	r2, r4
 80221dc:	e7ee      	b.n	80221bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80221de:	d019      	beq.n	8022214 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80221e0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80221e2:	1e5c      	subs	r4, r3, #1
 80221e4:	fb05 1504 	mla	r5, r5, r4, r1
 80221e8:	142d      	asrs	r5, r5, #16
 80221ea:	d409      	bmi.n	8022200 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80221ec:	42bd      	cmp	r5, r7
 80221ee:	da07      	bge.n	8022200 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80221f0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80221f2:	fb05 2404 	mla	r4, r5, r4, r2
 80221f6:	1424      	asrs	r4, r4, #16
 80221f8:	d402      	bmi.n	8022200 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80221fa:	42b4      	cmp	r4, r6
 80221fc:	f2c0 80b1 	blt.w	8022362 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022200:	f04f 0800 	mov.w	r8, #0
 8022204:	eb03 0408 	add.w	r4, r3, r8
 8022208:	2c00      	cmp	r4, #0
 802220a:	dc3e      	bgt.n	802228a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802220c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022210:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022214:	f1bb 0f00 	cmp.w	fp, #0
 8022218:	f340 8108 	ble.w	802242c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802221c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022220:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022224:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022228:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802222c:	eeb0 6a62 	vmov.f32	s12, s5
 8022230:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022234:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022238:	ee61 7a27 	vmul.f32	s15, s2, s15
 802223c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022240:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022244:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8022248:	eeb0 6a43 	vmov.f32	s12, s6
 802224c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022250:	ee12 2a90 	vmov	r2, s5
 8022254:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802225a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802225e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022262:	ee13 2a10 	vmov	r2, s6
 8022266:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022268:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802226a:	f1bb 0b01 	subs.w	fp, fp, #1
 802226e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022272:	9a04      	ldr	r2, [sp, #16]
 8022274:	9314      	str	r3, [sp, #80]	@ 0x50
 8022276:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 802227a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802227c:	eeb0 3a67 	vmov.f32	s6, s15
 8022280:	bf08      	it	eq
 8022282:	4613      	moveq	r3, r2
 8022284:	eef0 2a47 	vmov.f32	s5, s14
 8022288:	e787      	b.n	802219a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802228a:	140e      	asrs	r6, r1, #16
 802228c:	d462      	bmi.n	8022354 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802228e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8022292:	42b5      	cmp	r5, r6
 8022294:	dd5e      	ble.n	8022354 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022296:	1417      	asrs	r7, r2, #16
 8022298:	d45c      	bmi.n	8022354 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802229a:	f8de 400c 	ldr.w	r4, [lr, #12]
 802229e:	42bc      	cmp	r4, r7
 80222a0:	dd58      	ble.n	8022354 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80222a2:	b22d      	sxth	r5, r5
 80222a4:	fb07 6505 	mla	r5, r7, r5, r6
 80222a8:	9c02      	ldr	r4, [sp, #8]
 80222aa:	5d66      	ldrb	r6, [r4, r5]
 80222ac:	2e00      	cmp	r6, #0
 80222ae:	d051      	beq.n	8022354 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80222b0:	9c01      	ldr	r4, [sp, #4]
 80222b2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 80222b6:	f06f 0401 	mvn.w	r4, #1
 80222ba:	fb04 f408 	mul.w	r4, r4, r8
 80222be:	5b05      	ldrh	r5, [r0, r4]
 80222c0:	9403      	str	r4, [sp, #12]
 80222c2:	9c05      	ldr	r4, [sp, #20]
 80222c4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80222c8:	4366      	muls	r6, r4
 80222ca:	1c74      	adds	r4, r6, #1
 80222cc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80222d0:	1224      	asrs	r4, r4, #8
 80222d2:	b2a7      	uxth	r7, r4
 80222d4:	43e4      	mvns	r4, r4
 80222d6:	122e      	asrs	r6, r5, #8
 80222d8:	b2e4      	uxtb	r4, r4
 80222da:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80222de:	fb16 f604 	smulbb	r6, r6, r4
 80222e2:	00ed      	lsls	r5, r5, #3
 80222e4:	b2ed      	uxtb	r5, r5
 80222e6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80222ea:	fb15 f504 	smulbb	r5, r5, r4
 80222ee:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80222f2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80222f6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80222fa:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80222fe:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8022302:	fb1a fa04 	smulbb	sl, sl, r4
 8022306:	fa5f f989 	uxtb.w	r9, r9
 802230a:	fb09 5507 	mla	r5, r9, r7, r5
 802230e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022312:	fb06 a607 	mla	r6, r6, r7, sl
 8022316:	fa1f fc8c 	uxth.w	ip, ip
 802231a:	b2ad      	uxth	r5, r5
 802231c:	f10c 0401 	add.w	r4, ip, #1
 8022320:	f105 0a01 	add.w	sl, r5, #1
 8022324:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8022328:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802232c:	b2b6      	uxth	r6, r6
 802232e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022332:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022336:	ea4a 0c0c 	orr.w	ip, sl, ip
 802233a:	f106 0a01 	add.w	sl, r6, #1
 802233e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022342:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022346:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802234a:	9c03      	ldr	r4, [sp, #12]
 802234c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022350:	f820 c004 	strh.w	ip, [r0, r4]
 8022354:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022356:	f108 38ff 	add.w	r8, r8, #4294967295
 802235a:	4421      	add	r1, r4
 802235c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802235e:	4422      	add	r2, r4
 8022360:	e750      	b.n	8022204 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022362:	f04f 0900 	mov.w	r9, #0
 8022366:	eba3 0409 	sub.w	r4, r3, r9
 802236a:	2c00      	cmp	r4, #0
 802236c:	f77f af4e 	ble.w	802220c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022370:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8022374:	140d      	asrs	r5, r1, #16
 8022376:	1414      	asrs	r4, r2, #16
 8022378:	fb06 5404 	mla	r4, r6, r4, r5
 802237c:	9d02      	ldr	r5, [sp, #8]
 802237e:	5d2e      	ldrb	r6, [r5, r4]
 8022380:	2e00      	cmp	r6, #0
 8022382:	d04c      	beq.n	802241e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022384:	9d01      	ldr	r5, [sp, #4]
 8022386:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 802238a:	9c05      	ldr	r4, [sp, #20]
 802238c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8022390:	4366      	muls	r6, r4
 8022392:	1c74      	adds	r4, r6, #1
 8022394:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8022398:	1224      	asrs	r4, r4, #8
 802239a:	b2a7      	uxth	r7, r4
 802239c:	43e4      	mvns	r4, r4
 802239e:	122e      	asrs	r6, r5, #8
 80223a0:	b2e4      	uxtb	r4, r4
 80223a2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80223a6:	fb16 f604 	smulbb	r6, r6, r4
 80223aa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80223ae:	00ed      	lsls	r5, r5, #3
 80223b0:	b2ed      	uxtb	r5, r5
 80223b2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80223b6:	fb15 f504 	smulbb	r5, r5, r4
 80223ba:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80223be:	fb0c 6c07 	mla	ip, ip, r7, r6
 80223c2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80223c6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80223ca:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80223ce:	fb1a fa04 	smulbb	sl, sl, r4
 80223d2:	fa5f f888 	uxtb.w	r8, r8
 80223d6:	fb08 5507 	mla	r5, r8, r7, r5
 80223da:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80223de:	fb06 a607 	mla	r6, r6, r7, sl
 80223e2:	fa1f fc8c 	uxth.w	ip, ip
 80223e6:	b2ad      	uxth	r5, r5
 80223e8:	f10c 0401 	add.w	r4, ip, #1
 80223ec:	f105 0a01 	add.w	sl, r5, #1
 80223f0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80223f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80223f8:	b2b6      	uxth	r6, r6
 80223fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80223fe:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022402:	ea4a 0c0c 	orr.w	ip, sl, ip
 8022406:	f106 0a01 	add.w	sl, r6, #1
 802240a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802240e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022412:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022416:	ea4c 0c0a 	orr.w	ip, ip, sl
 802241a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 802241e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022420:	f109 0901 	add.w	r9, r9, #1
 8022424:	4421      	add	r1, r4
 8022426:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022428:	4422      	add	r2, r4
 802242a:	e79c      	b.n	8022366 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 802242c:	b007      	add	sp, #28
 802242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022432 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802243a:	b085      	sub	sp, #20
 802243c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802243e:	468b      	mov	fp, r1
 8022440:	6861      	ldr	r1, [r4, #4]
 8022442:	9203      	str	r2, [sp, #12]
 8022444:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 8022448:	fb01 2000 	mla	r0, r1, r0, r2
 802244c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8022450:	6822      	ldr	r2, [r4, #0]
 8022452:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8022456:	f8d8 2000 	ldr.w	r2, [r8]
 802245a:	9200      	str	r2, [sp, #0]
 802245c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8022460:	9201      	str	r2, [sp, #4]
 8022462:	f1bb 0f00 	cmp.w	fp, #0
 8022466:	dc03      	bgt.n	8022470 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022468:	9a03      	ldr	r2, [sp, #12]
 802246a:	2a00      	cmp	r2, #0
 802246c:	f340 8146 	ble.w	80226fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8022470:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022472:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8022476:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802247a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802247c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8022480:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8022484:	2b00      	cmp	r3, #0
 8022486:	dd0e      	ble.n	80224a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022488:	140c      	asrs	r4, r1, #16
 802248a:	d405      	bmi.n	8022498 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802248c:	42bc      	cmp	r4, r7
 802248e:	da03      	bge.n	8022498 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022490:	1414      	asrs	r4, r2, #16
 8022492:	d401      	bmi.n	8022498 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022494:	42b4      	cmp	r4, r6
 8022496:	db07      	blt.n	80224a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022498:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802249a:	3b01      	subs	r3, #1
 802249c:	4421      	add	r1, r4
 802249e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80224a0:	3002      	adds	r0, #2
 80224a2:	4422      	add	r2, r4
 80224a4:	e7ee      	b.n	8022484 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80224a6:	d017      	beq.n	80224d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80224a8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80224aa:	1e5c      	subs	r4, r3, #1
 80224ac:	fb05 1504 	mla	r5, r5, r4, r1
 80224b0:	142d      	asrs	r5, r5, #16
 80224b2:	d409      	bmi.n	80224c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80224b4:	42bd      	cmp	r5, r7
 80224b6:	da07      	bge.n	80224c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80224b8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80224ba:	fb05 2404 	mla	r4, r5, r4, r2
 80224be:	1424      	asrs	r4, r4, #16
 80224c0:	d402      	bmi.n	80224c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80224c2:	42b4      	cmp	r4, r6
 80224c4:	f2c0 80b3 	blt.w	802262e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80224c8:	2600      	movs	r6, #0
 80224ca:	199c      	adds	r4, r3, r6
 80224cc:	2c00      	cmp	r4, #0
 80224ce:	dc3e      	bgt.n	802254e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80224d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80224d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80224d8:	f1bb 0f00 	cmp.w	fp, #0
 80224dc:	f340 810e 	ble.w	80226fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80224e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80224e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80224e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80224ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80224f0:	eeb0 6a62 	vmov.f32	s12, s5
 80224f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80224f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80224fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022500:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022504:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022508:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802250c:	eeb0 6a43 	vmov.f32	s12, s6
 8022510:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022514:	ee12 2a90 	vmov	r2, s5
 8022518:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802251c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802251e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022522:	fb92 f3f3 	sdiv	r3, r2, r3
 8022526:	ee13 2a10 	vmov	r2, s6
 802252a:	9311      	str	r3, [sp, #68]	@ 0x44
 802252c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802252e:	f1bb 0b01 	subs.w	fp, fp, #1
 8022532:	fb92 f3f3 	sdiv	r3, r2, r3
 8022536:	9a03      	ldr	r2, [sp, #12]
 8022538:	9312      	str	r3, [sp, #72]	@ 0x48
 802253a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802253e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022540:	eeb0 3a67 	vmov.f32	s6, s15
 8022544:	bf08      	it	eq
 8022546:	4613      	moveq	r3, r2
 8022548:	eef0 2a47 	vmov.f32	s5, s14
 802254c:	e789      	b.n	8022462 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802254e:	140f      	asrs	r7, r1, #16
 8022550:	d418      	bmi.n	8022584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022552:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8022556:	42bd      	cmp	r5, r7
 8022558:	dd14      	ble.n	8022584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802255a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802255e:	d411      	bmi.n	8022584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022560:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8022564:	4564      	cmp	r4, ip
 8022566:	dd0d      	ble.n	8022584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022568:	b22d      	sxth	r5, r5
 802256a:	fb0c 7505 	mla	r5, ip, r5, r7
 802256e:	9c01      	ldr	r4, [sp, #4]
 8022570:	5d64      	ldrb	r4, [r4, r5]
 8022572:	2cff      	cmp	r4, #255	@ 0xff
 8022574:	d10c      	bne.n	8022590 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8022576:	9c00      	ldr	r4, [sp, #0]
 8022578:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 802257c:	f06f 0401 	mvn.w	r4, #1
 8022580:	4374      	muls	r4, r6
 8022582:	5305      	strh	r5, [r0, r4]
 8022584:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022586:	3e01      	subs	r6, #1
 8022588:	4421      	add	r1, r4
 802258a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802258c:	4422      	add	r2, r4
 802258e:	e79c      	b.n	80224ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022590:	2c00      	cmp	r4, #0
 8022592:	d0f7      	beq.n	8022584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022594:	9f00      	ldr	r7, [sp, #0]
 8022596:	fa1f fc84 	uxth.w	ip, r4
 802259a:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 802259e:	f06f 0501 	mvn.w	r5, #1
 80225a2:	43e4      	mvns	r4, r4
 80225a4:	4375      	muls	r5, r6
 80225a6:	9502      	str	r5, [sp, #8]
 80225a8:	5b45      	ldrh	r5, [r0, r5]
 80225aa:	b2e4      	uxtb	r4, r4
 80225ac:	122f      	asrs	r7, r5, #8
 80225ae:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80225b2:	fb17 f704 	smulbb	r7, r7, r4
 80225b6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80225ba:	00ed      	lsls	r5, r5, #3
 80225bc:	b2ed      	uxtb	r5, r5
 80225be:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80225c2:	fb15 f504 	smulbb	r5, r5, r4
 80225c6:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80225ca:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80225ce:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80225d2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80225d6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80225da:	fb1a fa04 	smulbb	sl, sl, r4
 80225de:	fa5f f989 	uxtb.w	r9, r9
 80225e2:	fb09 550c 	mla	r5, r9, ip, r5
 80225e6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80225ea:	fb07 a70c 	mla	r7, r7, ip, sl
 80225ee:	fa1f fe8e 	uxth.w	lr, lr
 80225f2:	b2ad      	uxth	r5, r5
 80225f4:	f10e 0401 	add.w	r4, lr, #1
 80225f8:	f105 0a01 	add.w	sl, r5, #1
 80225fc:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8022600:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022604:	b2bf      	uxth	r7, r7
 8022606:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802260a:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 802260e:	ea4a 0e0e 	orr.w	lr, sl, lr
 8022612:	f107 0a01 	add.w	sl, r7, #1
 8022616:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802261a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802261e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022622:	9c02      	ldr	r4, [sp, #8]
 8022624:	ea4e 0e0a 	orr.w	lr, lr, sl
 8022628:	f820 e004 	strh.w	lr, [r0, r4]
 802262c:	e7aa      	b.n	8022584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802262e:	f04f 0900 	mov.w	r9, #0
 8022632:	eba3 0409 	sub.w	r4, r3, r9
 8022636:	2c00      	cmp	r4, #0
 8022638:	f77f af4a 	ble.w	80224d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802263c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8022640:	1414      	asrs	r4, r2, #16
 8022642:	140d      	asrs	r5, r1, #16
 8022644:	fb06 5504 	mla	r5, r6, r4, r5
 8022648:	9c01      	ldr	r4, [sp, #4]
 802264a:	5d64      	ldrb	r4, [r4, r5]
 802264c:	2cff      	cmp	r4, #255	@ 0xff
 802264e:	d10b      	bne.n	8022668 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022650:	9c00      	ldr	r4, [sp, #0]
 8022652:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8022656:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 802265a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802265c:	f109 0901 	add.w	r9, r9, #1
 8022660:	4421      	add	r1, r4
 8022662:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022664:	4422      	add	r2, r4
 8022666:	e7e4      	b.n	8022632 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022668:	2c00      	cmp	r4, #0
 802266a:	d0f6      	beq.n	802265a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802266c:	b2a7      	uxth	r7, r4
 802266e:	43e4      	mvns	r4, r4
 8022670:	9e00      	ldr	r6, [sp, #0]
 8022672:	b2e4      	uxtb	r4, r4
 8022674:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8022678:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802267c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022680:	122e      	asrs	r6, r5, #8
 8022682:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022686:	fb16 f604 	smulbb	r6, r6, r4
 802268a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802268e:	00ed      	lsls	r5, r5, #3
 8022690:	b2ed      	uxtb	r5, r5
 8022692:	fb15 f504 	smulbb	r5, r5, r4
 8022696:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802269a:	fb0c 6c07 	mla	ip, ip, r7, r6
 802269e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80226a2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80226a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80226aa:	fb1a fa04 	smulbb	sl, sl, r4
 80226ae:	fa5f fe8e 	uxtb.w	lr, lr
 80226b2:	fb0e 5507 	mla	r5, lr, r7, r5
 80226b6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80226ba:	fb06 a607 	mla	r6, r6, r7, sl
 80226be:	fa1f fc8c 	uxth.w	ip, ip
 80226c2:	b2ad      	uxth	r5, r5
 80226c4:	f10c 0401 	add.w	r4, ip, #1
 80226c8:	f105 0a01 	add.w	sl, r5, #1
 80226cc:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80226d0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80226d4:	b2b6      	uxth	r6, r6
 80226d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80226da:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80226de:	ea4a 0c0c 	orr.w	ip, sl, ip
 80226e2:	f106 0a01 	add.w	sl, r6, #1
 80226e6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80226ea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80226ee:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80226f2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80226f6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80226fa:	e7ae      	b.n	802265a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80226fc:	b005      	add	sp, #20
 80226fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022702 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022706:	b085      	sub	sp, #20
 8022708:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802270a:	9100      	str	r1, [sp, #0]
 802270c:	9203      	str	r2, [sp, #12]
 802270e:	6841      	ldr	r1, [r0, #4]
 8022710:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8022714:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8022718:	9201      	str	r2, [sp, #4]
 802271a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 802271e:	fb01 2404 	mla	r4, r1, r4, r2
 8022722:	6802      	ldr	r2, [r0, #0]
 8022724:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022728:	f8de 2000 	ldr.w	r2, [lr]
 802272c:	9202      	str	r2, [sp, #8]
 802272e:	9a01      	ldr	r2, [sp, #4]
 8022730:	43d6      	mvns	r6, r2
 8022732:	b2f6      	uxtb	r6, r6
 8022734:	9a00      	ldr	r2, [sp, #0]
 8022736:	2a00      	cmp	r2, #0
 8022738:	dc03      	bgt.n	8022742 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802273a:	9a03      	ldr	r2, [sp, #12]
 802273c:	2a00      	cmp	r2, #0
 802273e:	f340 8124 	ble.w	802298a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022742:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022744:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8022748:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802274c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802274e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8022752:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8022756:	2b00      	cmp	r3, #0
 8022758:	dd0e      	ble.n	8022778 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802275a:	1408      	asrs	r0, r1, #16
 802275c:	d405      	bmi.n	802276a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802275e:	4560      	cmp	r0, ip
 8022760:	da03      	bge.n	802276a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022762:	1410      	asrs	r0, r2, #16
 8022764:	d401      	bmi.n	802276a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022766:	42b8      	cmp	r0, r7
 8022768:	db07      	blt.n	802277a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802276a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802276c:	3b01      	subs	r3, #1
 802276e:	4401      	add	r1, r0
 8022770:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022772:	3402      	adds	r4, #2
 8022774:	4402      	add	r2, r0
 8022776:	e7ee      	b.n	8022756 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022778:	d06e      	beq.n	8022858 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802277a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802277c:	1e58      	subs	r0, r3, #1
 802277e:	fb05 1500 	mla	r5, r5, r0, r1
 8022782:	142d      	asrs	r5, r5, #16
 8022784:	d45c      	bmi.n	8022840 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022786:	4565      	cmp	r5, ip
 8022788:	da5a      	bge.n	8022840 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802278a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802278c:	fb05 2000 	mla	r0, r5, r0, r2
 8022790:	1400      	asrs	r0, r0, #16
 8022792:	d455      	bmi.n	8022840 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022794:	42b8      	cmp	r0, r7
 8022796:	da53      	bge.n	8022840 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022798:	4699      	mov	r9, r3
 802279a:	46a2      	mov	sl, r4
 802279c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80227a0:	f1b9 0f00 	cmp.w	r9, #0
 80227a4:	dd54      	ble.n	8022850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80227a6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80227aa:	140d      	asrs	r5, r1, #16
 80227ac:	1410      	asrs	r0, r2, #16
 80227ae:	fb07 5000 	mla	r0, r7, r0, r5
 80227b2:	9d02      	ldr	r5, [sp, #8]
 80227b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80227b8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80227bc:	f8ba 5000 	ldrh.w	r5, [sl]
 80227c0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80227c4:	122f      	asrs	r7, r5, #8
 80227c6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80227ca:	fb17 f706 	smulbb	r7, r7, r6
 80227ce:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80227d2:	00ed      	lsls	r5, r5, #3
 80227d4:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 80227d8:	b2ed      	uxtb	r5, r5
 80227da:	fb18 f806 	smulbb	r8, r8, r6
 80227de:	fb15 f506 	smulbb	r5, r5, r6
 80227e2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80227e6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80227ea:	10c7      	asrs	r7, r0, #3
 80227ec:	00c0      	lsls	r0, r0, #3
 80227ee:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80227f2:	b2c0      	uxtb	r0, r0
 80227f4:	fb07 870b 	mla	r7, r7, fp, r8
 80227f8:	fb00 500b 	mla	r0, r0, fp, r5
 80227fc:	fa1f fc8c 	uxth.w	ip, ip
 8022800:	b280      	uxth	r0, r0
 8022802:	b2bf      	uxth	r7, r7
 8022804:	f10c 0501 	add.w	r5, ip, #1
 8022808:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802280c:	f107 0801 	add.w	r8, r7, #1
 8022810:	1c45      	adds	r5, r0, #1
 8022812:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8022816:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802281a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802281c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022820:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022824:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022828:	ea45 0c0c 	orr.w	ip, r5, ip
 802282c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8022830:	4401      	add	r1, r0
 8022832:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022834:	ea4c 0c08 	orr.w	ip, ip, r8
 8022838:	f82a cb02 	strh.w	ip, [sl], #2
 802283c:	4402      	add	r2, r0
 802283e:	e7af      	b.n	80227a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022840:	f04f 0800 	mov.w	r8, #0
 8022844:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8022848:	eb03 0008 	add.w	r0, r3, r8
 802284c:	2800      	cmp	r0, #0
 802284e:	dc41      	bgt.n	80228d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8022850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022854:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022858:	9b00      	ldr	r3, [sp, #0]
 802285a:	2b00      	cmp	r3, #0
 802285c:	f340 8095 	ble.w	802298a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022864:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022868:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802286c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022870:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022874:	eef0 6a62 	vmov.f32	s13, s5
 8022878:	ee31 1a05 	vadd.f32	s2, s2, s10
 802287c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022880:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022884:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022888:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802288c:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8022890:	eef0 6a43 	vmov.f32	s13, s6
 8022894:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022898:	ee12 2a90 	vmov	r2, s5
 802289c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80228a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80228a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80228aa:	ee13 2a10 	vmov	r2, s6
 80228ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80228b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80228b2:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80228b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80228ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80228bc:	9b00      	ldr	r3, [sp, #0]
 80228be:	9a03      	ldr	r2, [sp, #12]
 80228c0:	3b01      	subs	r3, #1
 80228c2:	9300      	str	r3, [sp, #0]
 80228c4:	eeb0 3a67 	vmov.f32	s6, s15
 80228c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80228ca:	eef0 2a47 	vmov.f32	s5, s14
 80228ce:	bf08      	it	eq
 80228d0:	4613      	moveq	r3, r2
 80228d2:	e72f      	b.n	8022734 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80228d4:	140f      	asrs	r7, r1, #16
 80228d6:	d451      	bmi.n	802297c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80228d8:	f8de 5008 	ldr.w	r5, [lr, #8]
 80228dc:	42bd      	cmp	r5, r7
 80228de:	dd4d      	ble.n	802297c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80228e0:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80228e4:	d44a      	bmi.n	802297c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80228e6:	f8de 000c 	ldr.w	r0, [lr, #12]
 80228ea:	4560      	cmp	r0, ip
 80228ec:	dd46      	ble.n	802297c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80228ee:	b22d      	sxth	r5, r5
 80228f0:	fb0c 7505 	mla	r5, ip, r5, r7
 80228f4:	9802      	ldr	r0, [sp, #8]
 80228f6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80228fa:	f06f 0501 	mvn.w	r5, #1
 80228fe:	fb05 fb08 	mul.w	fp, r5, r8
 8022902:	f834 500b 	ldrh.w	r5, [r4, fp]
 8022906:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802290a:	122f      	asrs	r7, r5, #8
 802290c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022910:	fb17 f706 	smulbb	r7, r7, r6
 8022914:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022918:	00ed      	lsls	r5, r5, #3
 802291a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802291e:	b2ed      	uxtb	r5, r5
 8022920:	fb19 f906 	smulbb	r9, r9, r6
 8022924:	fb15 f506 	smulbb	r5, r5, r6
 8022928:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802292c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8022930:	10c7      	asrs	r7, r0, #3
 8022932:	00c0      	lsls	r0, r0, #3
 8022934:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022938:	b2c0      	uxtb	r0, r0
 802293a:	fb07 970a 	mla	r7, r7, sl, r9
 802293e:	fb00 500a 	mla	r0, r0, sl, r5
 8022942:	fa1f fc8c 	uxth.w	ip, ip
 8022946:	b2bf      	uxth	r7, r7
 8022948:	b280      	uxth	r0, r0
 802294a:	f10c 0501 	add.w	r5, ip, #1
 802294e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8022952:	f107 0901 	add.w	r9, r7, #1
 8022956:	1c45      	adds	r5, r0, #1
 8022958:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802295c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8022960:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022964:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022968:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802296c:	ea45 0c0c 	orr.w	ip, r5, ip
 8022970:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8022974:	ea4c 0c09 	orr.w	ip, ip, r9
 8022978:	f824 c00b 	strh.w	ip, [r4, fp]
 802297c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802297e:	f108 38ff 	add.w	r8, r8, #4294967295
 8022982:	4401      	add	r1, r0
 8022984:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022986:	4402      	add	r2, r0
 8022988:	e75e      	b.n	8022848 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802298a:	b005      	add	sp, #20
 802298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022990 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022998:	b085      	sub	sp, #20
 802299a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 802299c:	4693      	mov	fp, r2
 802299e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80229a2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 80229a6:	6870      	ldr	r0, [r6, #4]
 80229a8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80229aa:	fb00 2404 	mla	r4, r0, r4, r2
 80229ae:	6832      	ldr	r2, [r6, #0]
 80229b0:	9101      	str	r1, [sp, #4]
 80229b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80229b6:	682a      	ldr	r2, [r5, #0]
 80229b8:	9202      	str	r2, [sp, #8]
 80229ba:	9a01      	ldr	r2, [sp, #4]
 80229bc:	2a00      	cmp	r2, #0
 80229be:	dc03      	bgt.n	80229c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80229c0:	f1bb 0f00 	cmp.w	fp, #0
 80229c4:	f340 809a 	ble.w	8022afc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80229c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80229ca:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80229ce:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80229d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80229d4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80229d8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80229dc:	2b00      	cmp	r3, #0
 80229de:	dd0c      	ble.n	80229fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80229e0:	1406      	asrs	r6, r0, #16
 80229e2:	d405      	bmi.n	80229f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80229e4:	454e      	cmp	r6, r9
 80229e6:	da03      	bge.n	80229f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80229e8:	1416      	asrs	r6, r2, #16
 80229ea:	d401      	bmi.n	80229f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80229ec:	4546      	cmp	r6, r8
 80229ee:	db05      	blt.n	80229fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80229f0:	4470      	add	r0, lr
 80229f2:	4462      	add	r2, ip
 80229f4:	3b01      	subs	r3, #1
 80229f6:	3402      	adds	r4, #2
 80229f8:	e7f0      	b.n	80229dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80229fa:	d00f      	beq.n	8022a1c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80229fc:	1e5e      	subs	r6, r3, #1
 80229fe:	fb0e 0706 	mla	r7, lr, r6, r0
 8022a02:	143f      	asrs	r7, r7, #16
 8022a04:	d541      	bpl.n	8022a8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8022a06:	4698      	mov	r8, r3
 8022a08:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8022a0c:	9603      	str	r6, [sp, #12]
 8022a0e:	f1b8 0f00 	cmp.w	r8, #0
 8022a12:	dc56      	bgt.n	8022ac2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8022a14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022a1c:	9b01      	ldr	r3, [sp, #4]
 8022a1e:	2b00      	cmp	r3, #0
 8022a20:	dd6c      	ble.n	8022afc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022a22:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a2a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022a2e:	eeb0 6a62 	vmov.f32	s12, s5
 8022a32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a46:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8022a4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a4e:	eeb0 6a43 	vmov.f32	s12, s6
 8022a52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a56:	ee12 2a90 	vmov	r2, s5
 8022a5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a64:	fb92 fef3 	sdiv	lr, r2, r3
 8022a68:	ee13 2a10 	vmov	r2, s6
 8022a6c:	fb92 fcf3 	sdiv	ip, r2, r3
 8022a70:	9b01      	ldr	r3, [sp, #4]
 8022a72:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8022a76:	3b01      	subs	r3, #1
 8022a78:	9301      	str	r3, [sp, #4]
 8022a7a:	eeb0 3a67 	vmov.f32	s6, s15
 8022a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a80:	eef0 2a47 	vmov.f32	s5, s14
 8022a84:	bf08      	it	eq
 8022a86:	465b      	moveq	r3, fp
 8022a88:	e797      	b.n	80229ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022a8a:	454f      	cmp	r7, r9
 8022a8c:	dabb      	bge.n	8022a06 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022a8e:	fb0c 2606 	mla	r6, ip, r6, r2
 8022a92:	1436      	asrs	r6, r6, #16
 8022a94:	d4b7      	bmi.n	8022a06 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022a96:	4546      	cmp	r6, r8
 8022a98:	dab5      	bge.n	8022a06 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022a9a:	461e      	mov	r6, r3
 8022a9c:	46a0      	mov	r8, r4
 8022a9e:	2e00      	cmp	r6, #0
 8022aa0:	ddb8      	ble.n	8022a14 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022aa2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8022aa6:	1417      	asrs	r7, r2, #16
 8022aa8:	ea4f 4920 	mov.w	r9, r0, asr #16
 8022aac:	fb0a 9707 	mla	r7, sl, r7, r9
 8022ab0:	9902      	ldr	r1, [sp, #8]
 8022ab2:	4470      	add	r0, lr
 8022ab4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8022ab8:	4462      	add	r2, ip
 8022aba:	f828 7b02 	strh.w	r7, [r8], #2
 8022abe:	3e01      	subs	r6, #1
 8022ac0:	e7ed      	b.n	8022a9e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8022ac2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8022ac6:	d414      	bmi.n	8022af2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8022ac8:	68ae      	ldr	r6, [r5, #8]
 8022aca:	454e      	cmp	r6, r9
 8022acc:	dd11      	ble.n	8022af2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8022ace:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8022ad2:	d40e      	bmi.n	8022af2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8022ad4:	68ef      	ldr	r7, [r5, #12]
 8022ad6:	4557      	cmp	r7, sl
 8022ad8:	dd0b      	ble.n	8022af2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8022ada:	f06f 0101 	mvn.w	r1, #1
 8022ade:	b236      	sxth	r6, r6
 8022ae0:	fb0a 9606 	mla	r6, sl, r6, r9
 8022ae4:	9f02      	ldr	r7, [sp, #8]
 8022ae6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8022aea:	fb01 f608 	mul.w	r6, r1, r8
 8022aee:	9903      	ldr	r1, [sp, #12]
 8022af0:	538f      	strh	r7, [r1, r6]
 8022af2:	4470      	add	r0, lr
 8022af4:	4462      	add	r2, ip
 8022af6:	f108 38ff 	add.w	r8, r8, #4294967295
 8022afa:	e788      	b.n	8022a0e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022afc:	b005      	add	sp, #20
 8022afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b0a:	b087      	sub	sp, #28
 8022b0c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8022b0e:	468b      	mov	fp, r1
 8022b10:	9203      	str	r2, [sp, #12]
 8022b12:	6841      	ldr	r1, [r0, #4]
 8022b14:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8022b18:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8022b1c:	9204      	str	r2, [sp, #16]
 8022b1e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8022b22:	fb01 2505 	mla	r5, r1, r5, r2
 8022b26:	6802      	ldr	r2, [r0, #0]
 8022b28:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8022b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8022b30:	9201      	str	r2, [sp, #4]
 8022b32:	f1bb 0f00 	cmp.w	fp, #0
 8022b36:	dc03      	bgt.n	8022b40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022b38:	9a03      	ldr	r2, [sp, #12]
 8022b3a:	2a00      	cmp	r2, #0
 8022b3c:	f340 8159 	ble.w	8022df2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022b40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022b42:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8022b46:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8022b4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022b4c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8022b50:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	dd0e      	ble.n	8022b76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022b58:	1402      	asrs	r2, r0, #16
 8022b5a:	d405      	bmi.n	8022b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022b5c:	42ba      	cmp	r2, r7
 8022b5e:	da03      	bge.n	8022b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022b60:	140a      	asrs	r2, r1, #16
 8022b62:	d401      	bmi.n	8022b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022b64:	42b2      	cmp	r2, r6
 8022b66:	db07      	blt.n	8022b78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022b68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022b6a:	3b01      	subs	r3, #1
 8022b6c:	4410      	add	r0, r2
 8022b6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022b70:	3502      	adds	r5, #2
 8022b72:	4411      	add	r1, r2
 8022b74:	e7ee      	b.n	8022b54 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022b76:	d017      	beq.n	8022ba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022b78:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022b7a:	1e5a      	subs	r2, r3, #1
 8022b7c:	fb04 0402 	mla	r4, r4, r2, r0
 8022b80:	1424      	asrs	r4, r4, #16
 8022b82:	d409      	bmi.n	8022b98 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022b84:	42bc      	cmp	r4, r7
 8022b86:	da07      	bge.n	8022b98 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022b88:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022b8a:	fb04 1202 	mla	r2, r4, r2, r1
 8022b8e:	1412      	asrs	r2, r2, #16
 8022b90:	d402      	bmi.n	8022b98 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022b92:	42b2      	cmp	r2, r6
 8022b94:	f2c0 80bf 	blt.w	8022d16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022b98:	2700      	movs	r7, #0
 8022b9a:	19da      	adds	r2, r3, r7
 8022b9c:	2a00      	cmp	r2, #0
 8022b9e:	dc3e      	bgt.n	8022c1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022ba0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022ba4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8022ba8:	f1bb 0f00 	cmp.w	fp, #0
 8022bac:	f340 8121 	ble.w	8022df2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022bb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022bb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022bb8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022bbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022bc0:	eeb0 6a62 	vmov.f32	s12, s5
 8022bc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022bc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022bcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022bd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022bd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022bd8:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8022bdc:	eeb0 6a43 	vmov.f32	s12, s6
 8022be0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022be4:	ee12 2a90 	vmov	r2, s5
 8022be8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022bec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022bee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bf6:	ee13 2a10 	vmov	r2, s6
 8022bfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022bfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022bfe:	f1bb 0b01 	subs.w	fp, fp, #1
 8022c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c06:	9a03      	ldr	r2, [sp, #12]
 8022c08:	9314      	str	r3, [sp, #80]	@ 0x50
 8022c0a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8022c0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022c10:	eeb0 3a67 	vmov.f32	s6, s15
 8022c14:	bf08      	it	eq
 8022c16:	4613      	moveq	r3, r2
 8022c18:	eef0 2a47 	vmov.f32	s5, s14
 8022c1c:	e789      	b.n	8022b32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8022c1e:	1406      	asrs	r6, r0, #16
 8022c20:	d42d      	bmi.n	8022c7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8022c22:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8022c26:	42b4      	cmp	r4, r6
 8022c28:	dd29      	ble.n	8022c7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8022c2a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8022c2e:	d426      	bmi.n	8022c7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8022c30:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8022c34:	4562      	cmp	r2, ip
 8022c36:	dd22      	ble.n	8022c7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8022c38:	b224      	sxth	r4, r4
 8022c3a:	fb0c 6404 	mla	r4, ip, r4, r6
 8022c3e:	9a01      	ldr	r2, [sp, #4]
 8022c40:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8022c44:	0e22      	lsrs	r2, r4, #24
 8022c46:	d01a      	beq.n	8022c7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8022c48:	9e04      	ldr	r6, [sp, #16]
 8022c4a:	4372      	muls	r2, r6
 8022c4c:	1c56      	adds	r6, r2, #1
 8022c4e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022c52:	1212      	asrs	r2, r2, #8
 8022c54:	0a26      	lsrs	r6, r4, #8
 8022c56:	2aff      	cmp	r2, #255	@ 0xff
 8022c58:	9605      	str	r6, [sp, #20]
 8022c5a:	d116      	bne.n	8022c8a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8022c5c:	f06f 0201 	mvn.w	r2, #1
 8022c60:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8022c64:	fb02 fc07 	mul.w	ip, r2, r7
 8022c68:	0962      	lsrs	r2, r4, #5
 8022c6a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022c6e:	f026 0607 	bic.w	r6, r6, #7
 8022c72:	4316      	orrs	r6, r2
 8022c74:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022c78:	4326      	orrs	r6, r4
 8022c7a:	f825 600c 	strh.w	r6, [r5, ip]
 8022c7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022c80:	3f01      	subs	r7, #1
 8022c82:	4410      	add	r0, r2
 8022c84:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022c86:	4411      	add	r1, r2
 8022c88:	e787      	b.n	8022b9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022c8a:	f06f 0601 	mvn.w	r6, #1
 8022c8e:	fa1f fa82 	uxth.w	sl, r2
 8022c92:	43d2      	mvns	r2, r2
 8022c94:	437e      	muls	r6, r7
 8022c96:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8022c9a:	f835 8006 	ldrh.w	r8, [r5, r6]
 8022c9e:	fb1c fc0a 	smulbb	ip, ip, sl
 8022ca2:	b2e4      	uxtb	r4, r4
 8022ca4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8022ca8:	fb14 f40a 	smulbb	r4, r4, sl
 8022cac:	b2d2      	uxtb	r2, r2
 8022cae:	9602      	str	r6, [sp, #8]
 8022cb0:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8022cb4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8022cb8:	fb0e ce02 	mla	lr, lr, r2, ip
 8022cbc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8022cc0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8022cc4:	fb16 f60a 	smulbb	r6, r6, sl
 8022cc8:	fa5f f888 	uxtb.w	r8, r8
 8022ccc:	fb08 4402 	mla	r4, r8, r2, r4
 8022cd0:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8022cd4:	fb0c 6c02 	mla	ip, ip, r2, r6
 8022cd8:	fa1f fe8e 	uxth.w	lr, lr
 8022cdc:	b2a4      	uxth	r4, r4
 8022cde:	f10e 0201 	add.w	r2, lr, #1
 8022ce2:	1c66      	adds	r6, r4, #1
 8022ce4:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8022ce8:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8022cec:	fa1f fc8c 	uxth.w	ip, ip
 8022cf0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022cf4:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8022cf8:	ea46 0e0e 	orr.w	lr, r6, lr
 8022cfc:	f10c 0601 	add.w	r6, ip, #1
 8022d00:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8022d04:	0976      	lsrs	r6, r6, #5
 8022d06:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022d0a:	9a02      	ldr	r2, [sp, #8]
 8022d0c:	ea4e 0e06 	orr.w	lr, lr, r6
 8022d10:	f825 e002 	strh.w	lr, [r5, r2]
 8022d14:	e7b3      	b.n	8022c7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8022d16:	f04f 0800 	mov.w	r8, #0
 8022d1a:	eba3 0208 	sub.w	r2, r3, r8
 8022d1e:	2a00      	cmp	r2, #0
 8022d20:	f77f af3e 	ble.w	8022ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022d24:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8022d28:	1404      	asrs	r4, r0, #16
 8022d2a:	140a      	asrs	r2, r1, #16
 8022d2c:	fb06 4202 	mla	r2, r6, r2, r4
 8022d30:	9c01      	ldr	r4, [sp, #4]
 8022d32:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8022d36:	0e22      	lsrs	r2, r4, #24
 8022d38:	d016      	beq.n	8022d68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8022d3a:	9e04      	ldr	r6, [sp, #16]
 8022d3c:	4372      	muls	r2, r6
 8022d3e:	1c56      	adds	r6, r2, #1
 8022d40:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022d44:	1212      	asrs	r2, r2, #8
 8022d46:	2aff      	cmp	r2, #255	@ 0xff
 8022d48:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8022d4c:	d113      	bne.n	8022d76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8022d4e:	0962      	lsrs	r2, r4, #5
 8022d50:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8022d54:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022d58:	f026 0607 	bic.w	r6, r6, #7
 8022d5c:	4316      	orrs	r6, r2
 8022d5e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022d62:	4326      	orrs	r6, r4
 8022d64:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8022d68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022d6a:	f108 0801 	add.w	r8, r8, #1
 8022d6e:	4410      	add	r0, r2
 8022d70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022d72:	4411      	add	r1, r2
 8022d74:	e7d1      	b.n	8022d1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8022d76:	fa1f fa82 	uxth.w	sl, r2
 8022d7a:	43d2      	mvns	r2, r2
 8022d7c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8022d80:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8022d84:	fb17 f70a 	smulbb	r7, r7, sl
 8022d88:	b2e4      	uxtb	r4, r4
 8022d8a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022d8e:	fb14 f40a 	smulbb	r4, r4, sl
 8022d92:	b2d2      	uxtb	r2, r2
 8022d94:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022d98:	fb0c 7c02 	mla	ip, ip, r2, r7
 8022d9c:	b2f6      	uxtb	r6, r6
 8022d9e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8022da2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022da6:	fb16 f60a 	smulbb	r6, r6, sl
 8022daa:	fa5f fe8e 	uxtb.w	lr, lr
 8022dae:	fb0e 4402 	mla	r4, lr, r2, r4
 8022db2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022db6:	fb07 6702 	mla	r7, r7, r2, r6
 8022dba:	fa1f fc8c 	uxth.w	ip, ip
 8022dbe:	b2a4      	uxth	r4, r4
 8022dc0:	f10c 0201 	add.w	r2, ip, #1
 8022dc4:	1c66      	adds	r6, r4, #1
 8022dc6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022dca:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8022dce:	b2bf      	uxth	r7, r7
 8022dd0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022dd4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022dd8:	ea46 0c0c 	orr.w	ip, r6, ip
 8022ddc:	1c7e      	adds	r6, r7, #1
 8022dde:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022de2:	0976      	lsrs	r6, r6, #5
 8022de4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022de8:	ea4c 0c06 	orr.w	ip, ip, r6
 8022dec:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8022df0:	e7ba      	b.n	8022d68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8022df2:	b007      	add	sp, #28
 8022df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e00:	b085      	sub	sp, #20
 8022e02:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022e04:	468b      	mov	fp, r1
 8022e06:	6841      	ldr	r1, [r0, #4]
 8022e08:	9203      	str	r2, [sp, #12]
 8022e0a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8022e0e:	fb01 2404 	mla	r4, r1, r4, r2
 8022e12:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8022e16:	6802      	ldr	r2, [r0, #0]
 8022e18:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022e1c:	f8d8 2000 	ldr.w	r2, [r8]
 8022e20:	9201      	str	r2, [sp, #4]
 8022e22:	f1bb 0f00 	cmp.w	fp, #0
 8022e26:	dc03      	bgt.n	8022e30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022e28:	9a03      	ldr	r2, [sp, #12]
 8022e2a:	2a00      	cmp	r2, #0
 8022e2c:	f340 814f 	ble.w	80230ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8022e30:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022e32:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8022e36:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8022e3a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022e3c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8022e40:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	dd0e      	ble.n	8022e66 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022e48:	1408      	asrs	r0, r1, #16
 8022e4a:	d405      	bmi.n	8022e58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022e4c:	42b8      	cmp	r0, r7
 8022e4e:	da03      	bge.n	8022e58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022e50:	1410      	asrs	r0, r2, #16
 8022e52:	d401      	bmi.n	8022e58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022e54:	42b0      	cmp	r0, r6
 8022e56:	db07      	blt.n	8022e68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022e58:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022e5a:	3b01      	subs	r3, #1
 8022e5c:	4401      	add	r1, r0
 8022e5e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022e60:	3402      	adds	r4, #2
 8022e62:	4402      	add	r2, r0
 8022e64:	e7ee      	b.n	8022e44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022e66:	d017      	beq.n	8022e98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022e68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8022e6a:	1e58      	subs	r0, r3, #1
 8022e6c:	fb05 1500 	mla	r5, r5, r0, r1
 8022e70:	142d      	asrs	r5, r5, #16
 8022e72:	d409      	bmi.n	8022e88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e74:	42bd      	cmp	r5, r7
 8022e76:	da07      	bge.n	8022e88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e78:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022e7a:	fb05 2000 	mla	r0, r5, r0, r2
 8022e7e:	1400      	asrs	r0, r0, #16
 8022e80:	d402      	bmi.n	8022e88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e82:	42b0      	cmp	r0, r6
 8022e84:	f2c0 80ba 	blt.w	8022ffc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022e88:	2600      	movs	r6, #0
 8022e8a:	1998      	adds	r0, r3, r6
 8022e8c:	2800      	cmp	r0, #0
 8022e8e:	dc3e      	bgt.n	8022f0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022e90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e94:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022e98:	f1bb 0f00 	cmp.w	fp, #0
 8022e9c:	f340 8117 	ble.w	80230ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8022ea0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022ea4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ea8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022eac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022eb0:	eeb0 6a62 	vmov.f32	s12, s5
 8022eb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022eb8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ebc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ec0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ec4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ec8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8022ecc:	eeb0 6a43 	vmov.f32	s12, s6
 8022ed0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ed4:	ee12 2a90 	vmov	r2, s5
 8022ed8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022ede:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ee6:	ee13 2a10 	vmov	r2, s6
 8022eea:	9311      	str	r3, [sp, #68]	@ 0x44
 8022eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022eee:	f1bb 0b01 	subs.w	fp, fp, #1
 8022ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ef6:	9a03      	ldr	r2, [sp, #12]
 8022ef8:	9312      	str	r3, [sp, #72]	@ 0x48
 8022efa:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8022efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022f00:	eeb0 3a67 	vmov.f32	s6, s15
 8022f04:	bf08      	it	eq
 8022f06:	4613      	moveq	r3, r2
 8022f08:	eef0 2a47 	vmov.f32	s5, s14
 8022f0c:	e789      	b.n	8022e22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022f0e:	140f      	asrs	r7, r1, #16
 8022f10:	d424      	bmi.n	8022f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f12:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8022f16:	42bd      	cmp	r5, r7
 8022f18:	dd20      	ble.n	8022f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f1a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8022f1e:	d41d      	bmi.n	8022f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f20:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8022f24:	4560      	cmp	r0, ip
 8022f26:	dd19      	ble.n	8022f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f28:	b22d      	sxth	r5, r5
 8022f2a:	fb0c 7505 	mla	r5, ip, r5, r7
 8022f2e:	9801      	ldr	r0, [sp, #4]
 8022f30:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8022f34:	0e07      	lsrs	r7, r0, #24
 8022f36:	2fff      	cmp	r7, #255	@ 0xff
 8022f38:	d116      	bne.n	8022f68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8022f3a:	f06f 0501 	mvn.w	r5, #1
 8022f3e:	fb05 f706 	mul.w	r7, r5, r6
 8022f42:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8022f46:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8022f4a:	0945      	lsrs	r5, r0, #5
 8022f4c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022f50:	ea4c 0505 	orr.w	r5, ip, r5
 8022f54:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8022f58:	4305      	orrs	r5, r0
 8022f5a:	53e5      	strh	r5, [r4, r7]
 8022f5c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022f5e:	3e01      	subs	r6, #1
 8022f60:	4401      	add	r1, r0
 8022f62:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022f64:	4402      	add	r2, r0
 8022f66:	e790      	b.n	8022e8a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022f68:	b2fd      	uxtb	r5, r7
 8022f6a:	2f00      	cmp	r7, #0
 8022f6c:	d0f6      	beq.n	8022f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022f6e:	f06f 0701 	mvn.w	r7, #1
 8022f72:	fa1f f985 	uxth.w	r9, r5
 8022f76:	43ed      	mvns	r5, r5
 8022f78:	4377      	muls	r7, r6
 8022f7a:	f834 e007 	ldrh.w	lr, [r4, r7]
 8022f7e:	9702      	str	r7, [sp, #8]
 8022f80:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8022f84:	fb17 f709 	smulbb	r7, r7, r9
 8022f88:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022f8c:	b2c0      	uxtb	r0, r0
 8022f8e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022f92:	fb10 f009 	smulbb	r0, r0, r9
 8022f96:	b2ed      	uxtb	r5, r5
 8022f98:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022f9c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8022fa0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8022fa4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022fa8:	fb1a fa09 	smulbb	sl, sl, r9
 8022fac:	fa5f fe8e 	uxtb.w	lr, lr
 8022fb0:	fb0e 0005 	mla	r0, lr, r5, r0
 8022fb4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022fb8:	fb07 a705 	mla	r7, r7, r5, sl
 8022fbc:	b280      	uxth	r0, r0
 8022fbe:	fa1f fc8c 	uxth.w	ip, ip
 8022fc2:	f100 0a01 	add.w	sl, r0, #1
 8022fc6:	f10c 0501 	add.w	r5, ip, #1
 8022fca:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8022fce:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8022fd2:	b2bf      	uxth	r7, r7
 8022fd4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022fd8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022fdc:	ea4a 0c0c 	orr.w	ip, sl, ip
 8022fe0:	f107 0a01 	add.w	sl, r7, #1
 8022fe4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8022fe8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022fec:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022ff0:	9802      	ldr	r0, [sp, #8]
 8022ff2:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022ff6:	f824 c000 	strh.w	ip, [r4, r0]
 8022ffa:	e7af      	b.n	8022f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022ffc:	f04f 0e00 	mov.w	lr, #0
 8023000:	eba3 000e 	sub.w	r0, r3, lr
 8023004:	2800      	cmp	r0, #0
 8023006:	f77f af43 	ble.w	8022e90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802300a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802300e:	140d      	asrs	r5, r1, #16
 8023010:	1410      	asrs	r0, r2, #16
 8023012:	fb06 5000 	mla	r0, r6, r0, r5
 8023016:	9d01      	ldr	r5, [sp, #4]
 8023018:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 802301c:	0e2e      	lsrs	r6, r5, #24
 802301e:	2eff      	cmp	r6, #255	@ 0xff
 8023020:	d112      	bne.n	8023048 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8023022:	482c      	ldr	r0, [pc, #176]	@ (80230d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8023024:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8023028:	0968      	lsrs	r0, r5, #5
 802302a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802302e:	4330      	orrs	r0, r6
 8023030:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8023034:	4328      	orrs	r0, r5
 8023036:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 802303a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802303c:	f10e 0e01 	add.w	lr, lr, #1
 8023040:	4401      	add	r1, r0
 8023042:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023044:	4402      	add	r2, r0
 8023046:	e7db      	b.n	8023000 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023048:	b2f0      	uxtb	r0, r6
 802304a:	2e00      	cmp	r6, #0
 802304c:	d0f5      	beq.n	802303a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802304e:	fa1f f980 	uxth.w	r9, r0
 8023052:	43c0      	mvns	r0, r0
 8023054:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8023058:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802305c:	fb16 f609 	smulbb	r6, r6, r9
 8023060:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8023064:	b2ed      	uxtb	r5, r5
 8023066:	ea4f 272c 	mov.w	r7, ip, asr #8
 802306a:	fb15 f509 	smulbb	r5, r5, r9
 802306e:	b2c0      	uxtb	r0, r0
 8023070:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8023074:	fb07 6700 	mla	r7, r7, r0, r6
 8023078:	ea4f 06ec 	mov.w	r6, ip, asr #3
 802307c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023080:	fb1a fa09 	smulbb	sl, sl, r9
 8023084:	fa5f fc8c 	uxtb.w	ip, ip
 8023088:	fb0c 5500 	mla	r5, ip, r0, r5
 802308c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023090:	fb06 a600 	mla	r6, r6, r0, sl
 8023094:	b2bf      	uxth	r7, r7
 8023096:	b2ad      	uxth	r5, r5
 8023098:	1c78      	adds	r0, r7, #1
 802309a:	f105 0a01 	add.w	sl, r5, #1
 802309e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80230a2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80230a6:	b2b6      	uxth	r6, r6
 80230a8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80230ac:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80230b0:	ea4a 0707 	orr.w	r7, sl, r7
 80230b4:	f106 0a01 	add.w	sl, r6, #1
 80230b8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80230bc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80230c0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80230c4:	ea47 070a 	orr.w	r7, r7, sl
 80230c8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80230cc:	e7b5      	b.n	802303a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80230ce:	b005      	add	sp, #20
 80230d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230d4:	fffff800 	.word	0xfffff800

080230d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80230d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80230dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230e0:	b087      	sub	sp, #28
 80230e2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80230e4:	468b      	mov	fp, r1
 80230e6:	9203      	str	r2, [sp, #12]
 80230e8:	6841      	ldr	r1, [r0, #4]
 80230ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80230ee:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 80230f2:	9204      	str	r2, [sp, #16]
 80230f4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 80230f8:	fb01 2404 	mla	r4, r1, r4, r2
 80230fc:	6802      	ldr	r2, [r0, #0]
 80230fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8023102:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8023106:	3201      	adds	r2, #1
 8023108:	f022 0201 	bic.w	r2, r2, #1
 802310c:	9200      	str	r2, [sp, #0]
 802310e:	f8d9 2000 	ldr.w	r2, [r9]
 8023112:	9201      	str	r2, [sp, #4]
 8023114:	f1bb 0f00 	cmp.w	fp, #0
 8023118:	dc03      	bgt.n	8023122 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802311a:	9a03      	ldr	r2, [sp, #12]
 802311c:	2a00      	cmp	r2, #0
 802311e:	f340 816a 	ble.w	80233f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023122:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023124:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8023128:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 802312c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802312e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8023132:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8023136:	2b00      	cmp	r3, #0
 8023138:	dd0e      	ble.n	8023158 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802313a:	1402      	asrs	r2, r0, #16
 802313c:	d405      	bmi.n	802314a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802313e:	42ba      	cmp	r2, r7
 8023140:	da03      	bge.n	802314a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023142:	140a      	asrs	r2, r1, #16
 8023144:	d401      	bmi.n	802314a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023146:	42b2      	cmp	r2, r6
 8023148:	db07      	blt.n	802315a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802314a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802314c:	3b01      	subs	r3, #1
 802314e:	4410      	add	r0, r2
 8023150:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023152:	3402      	adds	r4, #2
 8023154:	4411      	add	r1, r2
 8023156:	e7ee      	b.n	8023136 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023158:	d017      	beq.n	802318a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802315a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802315c:	1e5a      	subs	r2, r3, #1
 802315e:	fb05 0502 	mla	r5, r5, r2, r0
 8023162:	142d      	asrs	r5, r5, #16
 8023164:	d409      	bmi.n	802317a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8023166:	42bd      	cmp	r5, r7
 8023168:	da07      	bge.n	802317a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802316a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802316c:	fb05 1202 	mla	r2, r5, r2, r1
 8023170:	1412      	asrs	r2, r2, #16
 8023172:	d402      	bmi.n	802317a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8023174:	42b2      	cmp	r2, r6
 8023176:	f2c0 80c8 	blt.w	802330a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802317a:	2700      	movs	r7, #0
 802317c:	19da      	adds	r2, r3, r7
 802317e:	2a00      	cmp	r2, #0
 8023180:	dc3e      	bgt.n	8023200 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8023182:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023186:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802318a:	f1bb 0f00 	cmp.w	fp, #0
 802318e:	f340 8132 	ble.w	80233f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023192:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023196:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802319a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802319e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80231a2:	eeb0 6a62 	vmov.f32	s12, s5
 80231a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80231aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80231ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80231b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80231b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80231ba:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80231be:	eeb0 6a43 	vmov.f32	s12, s6
 80231c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80231c6:	ee12 2a90 	vmov	r2, s5
 80231ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80231ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80231d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80231d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80231d8:	ee13 2a10 	vmov	r2, s6
 80231dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80231de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80231e0:	f1bb 0b01 	subs.w	fp, fp, #1
 80231e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80231e8:	9a03      	ldr	r2, [sp, #12]
 80231ea:	9314      	str	r3, [sp, #80]	@ 0x50
 80231ec:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80231f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80231f2:	eeb0 3a67 	vmov.f32	s6, s15
 80231f6:	bf08      	it	eq
 80231f8:	4613      	moveq	r3, r2
 80231fa:	eef0 2a47 	vmov.f32	s5, s14
 80231fe:	e789      	b.n	8023114 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023200:	1405      	asrs	r5, r0, #16
 8023202:	d436      	bmi.n	8023272 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023204:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8023208:	42aa      	cmp	r2, r5
 802320a:	dd32      	ble.n	8023272 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802320c:	140e      	asrs	r6, r1, #16
 802320e:	d430      	bmi.n	8023272 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023210:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8023214:	42b2      	cmp	r2, r6
 8023216:	dd2c      	ble.n	8023272 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023218:	9a00      	ldr	r2, [sp, #0]
 802321a:	fb06 5502 	mla	r5, r6, r2, r5
 802321e:	9e01      	ldr	r6, [sp, #4]
 8023220:	086a      	lsrs	r2, r5, #1
 8023222:	5cb2      	ldrb	r2, [r6, r2]
 8023224:	07ee      	lsls	r6, r5, #31
 8023226:	bf54      	ite	pl
 8023228:	f002 020f 	andpl.w	r2, r2, #15
 802322c:	1112      	asrmi	r2, r2, #4
 802322e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023232:	b2d2      	uxtb	r2, r2
 8023234:	b1ea      	cbz	r2, 8023272 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023236:	9d04      	ldr	r5, [sp, #16]
 8023238:	436a      	muls	r2, r5
 802323a:	1c55      	adds	r5, r2, #1
 802323c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8023240:	4d6e      	ldr	r5, [pc, #440]	@ (80233fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8023242:	1212      	asrs	r2, r2, #8
 8023244:	682d      	ldr	r5, [r5, #0]
 8023246:	2aff      	cmp	r2, #255	@ 0xff
 8023248:	ea4f 2615 	mov.w	r6, r5, lsr #8
 802324c:	9605      	str	r6, [sp, #20]
 802324e:	d116      	bne.n	802327e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023250:	f06f 0201 	mvn.w	r2, #1
 8023254:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8023258:	fb02 fc07 	mul.w	ip, r2, r7
 802325c:	096a      	lsrs	r2, r5, #5
 802325e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023262:	f026 0607 	bic.w	r6, r6, #7
 8023266:	4316      	orrs	r6, r2
 8023268:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802326c:	432e      	orrs	r6, r5
 802326e:	f824 600c 	strh.w	r6, [r4, ip]
 8023272:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023274:	3f01      	subs	r7, #1
 8023276:	4410      	add	r0, r2
 8023278:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802327a:	4411      	add	r1, r2
 802327c:	e77e      	b.n	802317c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802327e:	f06f 0601 	mvn.w	r6, #1
 8023282:	fa1f fa82 	uxth.w	sl, r2
 8023286:	43d2      	mvns	r2, r2
 8023288:	437e      	muls	r6, r7
 802328a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 802328e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8023292:	fb1c fc0a 	smulbb	ip, ip, sl
 8023296:	b2ed      	uxtb	r5, r5
 8023298:	ea4f 2e28 	mov.w	lr, r8, asr #8
 802329c:	fb15 f50a 	smulbb	r5, r5, sl
 80232a0:	b2d2      	uxtb	r2, r2
 80232a2:	9602      	str	r6, [sp, #8]
 80232a4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80232a8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80232ac:	fb0e ce02 	mla	lr, lr, r2, ip
 80232b0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80232b4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80232b8:	fb16 f60a 	smulbb	r6, r6, sl
 80232bc:	fa5f f888 	uxtb.w	r8, r8
 80232c0:	fb08 5502 	mla	r5, r8, r2, r5
 80232c4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80232c8:	fb0c 6c02 	mla	ip, ip, r2, r6
 80232cc:	fa1f fe8e 	uxth.w	lr, lr
 80232d0:	b2ad      	uxth	r5, r5
 80232d2:	f10e 0201 	add.w	r2, lr, #1
 80232d6:	1c6e      	adds	r6, r5, #1
 80232d8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80232dc:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80232e0:	fa1f fc8c 	uxth.w	ip, ip
 80232e4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80232e8:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 80232ec:	ea46 0e0e 	orr.w	lr, r6, lr
 80232f0:	f10c 0601 	add.w	r6, ip, #1
 80232f4:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80232f8:	0976      	lsrs	r6, r6, #5
 80232fa:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80232fe:	9a02      	ldr	r2, [sp, #8]
 8023300:	ea4e 0e06 	orr.w	lr, lr, r6
 8023304:	f824 e002 	strh.w	lr, [r4, r2]
 8023308:	e7b3      	b.n	8023272 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802330a:	f04f 0800 	mov.w	r8, #0
 802330e:	eba3 0208 	sub.w	r2, r3, r8
 8023312:	2a00      	cmp	r2, #0
 8023314:	f77f af35 	ble.w	8023182 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023318:	9e00      	ldr	r6, [sp, #0]
 802331a:	1402      	asrs	r2, r0, #16
 802331c:	140d      	asrs	r5, r1, #16
 802331e:	fb06 2505 	mla	r5, r6, r5, r2
 8023322:	9e01      	ldr	r6, [sp, #4]
 8023324:	086a      	lsrs	r2, r5, #1
 8023326:	5cb2      	ldrb	r2, [r6, r2]
 8023328:	07ed      	lsls	r5, r5, #31
 802332a:	bf54      	ite	pl
 802332c:	f002 020f 	andpl.w	r2, r2, #15
 8023330:	1112      	asrmi	r2, r2, #4
 8023332:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023336:	b2d2      	uxtb	r2, r2
 8023338:	b1c2      	cbz	r2, 802336c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802333a:	9d04      	ldr	r5, [sp, #16]
 802333c:	436a      	muls	r2, r5
 802333e:	1c55      	adds	r5, r2, #1
 8023340:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8023344:	4d2d      	ldr	r5, [pc, #180]	@ (80233fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8023346:	1212      	asrs	r2, r2, #8
 8023348:	682e      	ldr	r6, [r5, #0]
 802334a:	2aff      	cmp	r2, #255	@ 0xff
 802334c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8023350:	d113      	bne.n	802337a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023352:	0972      	lsrs	r2, r6, #5
 8023354:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8023358:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802335c:	f025 0507 	bic.w	r5, r5, #7
 8023360:	4315      	orrs	r5, r2
 8023362:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023366:	4335      	orrs	r5, r6
 8023368:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 802336c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802336e:	f108 0801 	add.w	r8, r8, #1
 8023372:	4410      	add	r0, r2
 8023374:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023376:	4411      	add	r1, r2
 8023378:	e7c9      	b.n	802330e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802337a:	fa1f fa82 	uxth.w	sl, r2
 802337e:	43d2      	mvns	r2, r2
 8023380:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8023384:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8023388:	fb17 f70a 	smulbb	r7, r7, sl
 802338c:	b2f6      	uxtb	r6, r6
 802338e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023392:	fb16 f60a 	smulbb	r6, r6, sl
 8023396:	b2d2      	uxtb	r2, r2
 8023398:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802339c:	fb0c 7c02 	mla	ip, ip, r2, r7
 80233a0:	b2ed      	uxtb	r5, r5
 80233a2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80233a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80233aa:	fb15 f50a 	smulbb	r5, r5, sl
 80233ae:	fa5f fe8e 	uxtb.w	lr, lr
 80233b2:	fb0e 6602 	mla	r6, lr, r2, r6
 80233b6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80233ba:	fb07 5702 	mla	r7, r7, r2, r5
 80233be:	fa1f fc8c 	uxth.w	ip, ip
 80233c2:	b2b6      	uxth	r6, r6
 80233c4:	f10c 0201 	add.w	r2, ip, #1
 80233c8:	1c75      	adds	r5, r6, #1
 80233ca:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80233ce:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80233d2:	b2bf      	uxth	r7, r7
 80233d4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80233d8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80233dc:	ea45 0c0c 	orr.w	ip, r5, ip
 80233e0:	1c7d      	adds	r5, r7, #1
 80233e2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80233e6:	096d      	lsrs	r5, r5, #5
 80233e8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80233ec:	ea4c 0c05 	orr.w	ip, ip, r5
 80233f0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80233f4:	e7ba      	b.n	802336c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80233f6:	b007      	add	sp, #28
 80233f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233fc:	2001200c 	.word	0x2001200c

08023400 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023408:	b087      	sub	sp, #28
 802340a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802340c:	9101      	str	r1, [sp, #4]
 802340e:	6841      	ldr	r1, [r0, #4]
 8023410:	9205      	str	r2, [sp, #20]
 8023412:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8023416:	fb01 2404 	mla	r4, r1, r4, r2
 802341a:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 802341e:	6802      	ldr	r2, [r0, #0]
 8023420:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 8023714 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8023424:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8023428:	f8db 2008 	ldr.w	r2, [fp, #8]
 802342c:	3201      	adds	r2, #1
 802342e:	f022 0201 	bic.w	r2, r2, #1
 8023432:	9202      	str	r2, [sp, #8]
 8023434:	f8db 2000 	ldr.w	r2, [fp]
 8023438:	9203      	str	r2, [sp, #12]
 802343a:	9a01      	ldr	r2, [sp, #4]
 802343c:	2a00      	cmp	r2, #0
 802343e:	dc03      	bgt.n	8023448 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023440:	9a05      	ldr	r2, [sp, #20]
 8023442:	2a00      	cmp	r2, #0
 8023444:	f340 8162 	ble.w	802370c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023448:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802344a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 802344e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8023452:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023454:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8023458:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802345c:	2b00      	cmp	r3, #0
 802345e:	dd0e      	ble.n	802347e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023460:	1402      	asrs	r2, r0, #16
 8023462:	d405      	bmi.n	8023470 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023464:	42ba      	cmp	r2, r7
 8023466:	da03      	bge.n	8023470 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023468:	140a      	asrs	r2, r1, #16
 802346a:	d401      	bmi.n	8023470 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802346c:	42b2      	cmp	r2, r6
 802346e:	db07      	blt.n	8023480 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8023470:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023472:	3b01      	subs	r3, #1
 8023474:	4410      	add	r0, r2
 8023476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023478:	3402      	adds	r4, #2
 802347a:	4411      	add	r1, r2
 802347c:	e7ee      	b.n	802345c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802347e:	d017      	beq.n	80234b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023480:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8023482:	1e5a      	subs	r2, r3, #1
 8023484:	fb05 0502 	mla	r5, r5, r2, r0
 8023488:	142d      	asrs	r5, r5, #16
 802348a:	d409      	bmi.n	80234a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802348c:	42bd      	cmp	r5, r7
 802348e:	da07      	bge.n	80234a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023490:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8023492:	fb05 1202 	mla	r2, r5, r2, r1
 8023496:	1412      	asrs	r2, r2, #16
 8023498:	d402      	bmi.n	80234a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802349a:	42b2      	cmp	r2, r6
 802349c:	f2c0 80c3 	blt.w	8023626 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80234a0:	2500      	movs	r5, #0
 80234a2:	195a      	adds	r2, r3, r5
 80234a4:	2a00      	cmp	r2, #0
 80234a6:	dc3f      	bgt.n	8023528 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80234a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80234ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80234b0:	9b01      	ldr	r3, [sp, #4]
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	f340 812a 	ble.w	802370c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80234b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80234c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80234c8:	eeb0 6a62 	vmov.f32	s12, s5
 80234cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80234d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80234d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80234d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80234e0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80234e4:	eeb0 6a43 	vmov.f32	s12, s6
 80234e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80234ec:	ee12 2a90 	vmov	r2, s5
 80234f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80234f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80234f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80234fe:	ee13 2a10 	vmov	r2, s6
 8023502:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023506:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 802350a:	fb92 f3f3 	sdiv	r3, r2, r3
 802350e:	9314      	str	r3, [sp, #80]	@ 0x50
 8023510:	9b01      	ldr	r3, [sp, #4]
 8023512:	9a05      	ldr	r2, [sp, #20]
 8023514:	3b01      	subs	r3, #1
 8023516:	9301      	str	r3, [sp, #4]
 8023518:	eeb0 3a67 	vmov.f32	s6, s15
 802351c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802351e:	eef0 2a47 	vmov.f32	s5, s14
 8023522:	bf08      	it	eq
 8023524:	4613      	moveq	r3, r2
 8023526:	e788      	b.n	802343a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023528:	1406      	asrs	r6, r0, #16
 802352a:	d42c      	bmi.n	8023586 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802352c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8023530:	42b2      	cmp	r2, r6
 8023532:	dd28      	ble.n	8023586 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023534:	140f      	asrs	r7, r1, #16
 8023536:	d426      	bmi.n	8023586 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023538:	f8db 200c 	ldr.w	r2, [fp, #12]
 802353c:	42ba      	cmp	r2, r7
 802353e:	dd22      	ble.n	8023586 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023540:	9a02      	ldr	r2, [sp, #8]
 8023542:	fb07 6602 	mla	r6, r7, r2, r6
 8023546:	9f03      	ldr	r7, [sp, #12]
 8023548:	0872      	lsrs	r2, r6, #1
 802354a:	5cba      	ldrb	r2, [r7, r2]
 802354c:	07f6      	lsls	r6, r6, #31
 802354e:	bf54      	ite	pl
 8023550:	f002 020f 	andpl.w	r2, r2, #15
 8023554:	1112      	asrmi	r2, r2, #4
 8023556:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802355a:	b2d2      	uxtb	r2, r2
 802355c:	2aff      	cmp	r2, #255	@ 0xff
 802355e:	d118      	bne.n	8023592 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8023560:	f06f 0601 	mvn.w	r6, #1
 8023564:	f8d8 2000 	ldr.w	r2, [r8]
 8023568:	fb06 f705 	mul.w	r7, r6, r5
 802356c:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 8023570:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8023574:	0956      	lsrs	r6, r2, #5
 8023576:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802357a:	ea4c 0606 	orr.w	r6, ip, r6
 802357e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023582:	4316      	orrs	r6, r2
 8023584:	53e6      	strh	r6, [r4, r7]
 8023586:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023588:	3d01      	subs	r5, #1
 802358a:	4410      	add	r0, r2
 802358c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802358e:	4411      	add	r1, r2
 8023590:	e787      	b.n	80234a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8023592:	2a00      	cmp	r2, #0
 8023594:	d0f7      	beq.n	8023586 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023596:	f06f 0601 	mvn.w	r6, #1
 802359a:	fa1f f982 	uxth.w	r9, r2
 802359e:	43d2      	mvns	r2, r2
 80235a0:	436e      	muls	r6, r5
 80235a2:	f8d8 c000 	ldr.w	ip, [r8]
 80235a6:	f834 e006 	ldrh.w	lr, [r4, r6]
 80235aa:	9604      	str	r6, [sp, #16]
 80235ac:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80235b0:	fb16 f609 	smulbb	r6, r6, r9
 80235b4:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80235b8:	fa5f fc8c 	uxtb.w	ip, ip
 80235bc:	ea4f 272e 	mov.w	r7, lr, asr #8
 80235c0:	fb1c fc09 	smulbb	ip, ip, r9
 80235c4:	b2d2      	uxtb	r2, r2
 80235c6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80235ca:	fb07 6702 	mla	r7, r7, r2, r6
 80235ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80235d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80235d6:	fb1a fa09 	smulbb	sl, sl, r9
 80235da:	fa5f fe8e 	uxtb.w	lr, lr
 80235de:	fb0e cc02 	mla	ip, lr, r2, ip
 80235e2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80235e6:	fb06 a602 	mla	r6, r6, r2, sl
 80235ea:	b2bf      	uxth	r7, r7
 80235ec:	fa1f fc8c 	uxth.w	ip, ip
 80235f0:	1c7a      	adds	r2, r7, #1
 80235f2:	f10c 0a01 	add.w	sl, ip, #1
 80235f6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80235fa:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80235fe:	b2b6      	uxth	r6, r6
 8023600:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023604:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8023608:	ea4a 0707 	orr.w	r7, sl, r7
 802360c:	f106 0a01 	add.w	sl, r6, #1
 8023610:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8023614:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023618:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802361c:	9a04      	ldr	r2, [sp, #16]
 802361e:	ea47 070a 	orr.w	r7, r7, sl
 8023622:	52a7      	strh	r7, [r4, r2]
 8023624:	e7af      	b.n	8023586 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023626:	f04f 0e00 	mov.w	lr, #0
 802362a:	eba3 020e 	sub.w	r2, r3, lr
 802362e:	2a00      	cmp	r2, #0
 8023630:	f77f af3a 	ble.w	80234a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023634:	9e02      	ldr	r6, [sp, #8]
 8023636:	1402      	asrs	r2, r0, #16
 8023638:	140d      	asrs	r5, r1, #16
 802363a:	fb06 2505 	mla	r5, r6, r5, r2
 802363e:	9e03      	ldr	r6, [sp, #12]
 8023640:	086a      	lsrs	r2, r5, #1
 8023642:	5cb2      	ldrb	r2, [r6, r2]
 8023644:	07ed      	lsls	r5, r5, #31
 8023646:	bf54      	ite	pl
 8023648:	f002 020f 	andpl.w	r2, r2, #15
 802364c:	1112      	asrmi	r2, r2, #4
 802364e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023652:	b2d2      	uxtb	r2, r2
 8023654:	2aff      	cmp	r2, #255	@ 0xff
 8023656:	d115      	bne.n	8023684 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8023658:	f8d8 5000 	ldr.w	r5, [r8]
 802365c:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8023660:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8023664:	096a      	lsrs	r2, r5, #5
 8023666:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802366a:	4332      	orrs	r2, r6
 802366c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8023670:	432a      	orrs	r2, r5
 8023672:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8023676:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023678:	f10e 0e01 	add.w	lr, lr, #1
 802367c:	4410      	add	r0, r2
 802367e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023680:	4411      	add	r1, r2
 8023682:	e7d2      	b.n	802362a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023684:	2a00      	cmp	r2, #0
 8023686:	d0f6      	beq.n	8023676 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023688:	fa1f f982 	uxth.w	r9, r2
 802368c:	43d2      	mvns	r2, r2
 802368e:	f8d8 7000 	ldr.w	r7, [r8]
 8023692:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8023696:	f3c7 4507 	ubfx	r5, r7, #16, #8
 802369a:	fb15 f509 	smulbb	r5, r5, r9
 802369e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80236a2:	b2ff      	uxtb	r7, r7
 80236a4:	ea4f 262c 	mov.w	r6, ip, asr #8
 80236a8:	fb17 f709 	smulbb	r7, r7, r9
 80236ac:	b2d2      	uxtb	r2, r2
 80236ae:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80236b2:	fb06 5602 	mla	r6, r6, r2, r5
 80236b6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80236ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80236be:	fb1a fa09 	smulbb	sl, sl, r9
 80236c2:	fa5f fc8c 	uxtb.w	ip, ip
 80236c6:	fb0c 7702 	mla	r7, ip, r2, r7
 80236ca:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80236ce:	fb05 a502 	mla	r5, r5, r2, sl
 80236d2:	b2b6      	uxth	r6, r6
 80236d4:	b2bf      	uxth	r7, r7
 80236d6:	1c72      	adds	r2, r6, #1
 80236d8:	f107 0a01 	add.w	sl, r7, #1
 80236dc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80236e0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80236e4:	b2ad      	uxth	r5, r5
 80236e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80236ea:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80236ee:	ea4a 0606 	orr.w	r6, sl, r6
 80236f2:	f105 0a01 	add.w	sl, r5, #1
 80236f6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80236fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80236fe:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8023702:	ea46 060a 	orr.w	r6, r6, sl
 8023706:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802370a:	e7b4      	b.n	8023676 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802370c:	b007      	add	sp, #28
 802370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023712:	bf00      	nop
 8023714:	2001200c 	.word	0x2001200c

08023718 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 8023718:	4770      	bx	lr

0802371a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 802371a:	4770      	bx	lr

0802371c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 802371c:	4770      	bx	lr

0802371e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 802371e:	4770      	bx	lr

08023720 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8023720:	4770      	bx	lr

08023722 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8023722:	4770      	bx	lr

08023724 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8023724:	4770      	bx	lr

08023726 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8023726:	4770      	bx	lr

08023728 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023728:	4770      	bx	lr

0802372a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802372a:	4770      	bx	lr

0802372c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802372c:	4770      	bx	lr

0802372e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802372e:	4770      	bx	lr

08023730 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023730:	4770      	bx	lr

08023732 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8023732:	4770      	bx	lr

08023734 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023734:	4770      	bx	lr

08023736 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023736:	4770      	bx	lr

08023738 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023738:	4770      	bx	lr

0802373a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802373a:	4770      	bx	lr

0802373c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802373c:	4770      	bx	lr

0802373e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802373e:	4770      	bx	lr

08023740 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023740:	4770      	bx	lr

08023742 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023742:	4770      	bx	lr

08023744 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023744:	4770      	bx	lr

08023746 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023746:	4770      	bx	lr

08023748 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023748:	4770      	bx	lr

0802374a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802374a:	4770      	bx	lr

0802374c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802374c:	4770      	bx	lr

0802374e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802374e:	4770      	bx	lr

08023750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023750:	4770      	bx	lr

08023752 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8023752:	4770      	bx	lr

08023754 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023754:	4770      	bx	lr

08023756 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8023756:	4770      	bx	lr

08023758 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8023758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802375c:	b088      	sub	sp, #32
 802375e:	ac08      	add	r4, sp, #32
 8023760:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8023764:	4606      	mov	r6, r0
 8023766:	4620      	mov	r0, r4
 8023768:	4688      	mov	r8, r1
 802376a:	4691      	mov	r9, r2
 802376c:	f7fd fc32 	bl	8020fd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023770:	6833      	ldr	r3, [r6, #0]
 8023772:	4605      	mov	r5, r0
 8023774:	4620      	mov	r0, r4
 8023776:	699f      	ldr	r7, [r3, #24]
 8023778:	f7fd fb3a 	bl	8020df0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802377c:	4682      	mov	sl, r0
 802377e:	4620      	mov	r0, r4
 8023780:	f7fd fb6a 	bl	8020e58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023784:	9500      	str	r5, [sp, #0]
 8023786:	e9cd a001 	strd	sl, r0, [sp, #4]
 802378a:	464b      	mov	r3, r9
 802378c:	a806      	add	r0, sp, #24
 802378e:	4642      	mov	r2, r8
 8023790:	4631      	mov	r1, r6
 8023792:	47b8      	blx	r7
 8023794:	4628      	mov	r0, r5
 8023796:	b008      	add	sp, #32
 8023798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802379c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 802379c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80237a0:	2300      	movs	r3, #0
 80237a2:	9300      	str	r3, [sp, #0]
 80237a4:	4b3d      	ldr	r3, [pc, #244]	@ (802389c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80237a6:	781b      	ldrb	r3, [r3, #0]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d137      	bne.n	802381c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80237ac:	4a3c      	ldr	r2, [pc, #240]	@ (80238a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80237ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80237b2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	d132      	bne.n	8023820 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80237ba:	4b3a      	ldr	r3, [pc, #232]	@ (80238a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80237bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80237c0:	6808      	ldr	r0, [r1, #0]
 80237c2:	6849      	ldr	r1, [r1, #4]
 80237c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80237c8:	ac02      	add	r4, sp, #8
 80237ca:	ab02      	add	r3, sp, #8
 80237cc:	c303      	stmia	r3!, {r0, r1}
 80237ce:	4669      	mov	r1, sp
 80237d0:	4620      	mov	r0, r4
 80237d2:	f7fa f8a3 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80237d6:	4668      	mov	r0, sp
 80237d8:	f7fa f878 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80237dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80237e0:	f8bd 2000 	ldrh.w	r2, [sp]
 80237e4:	4d30      	ldr	r5, [pc, #192]	@ (80238a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80237e6:	4413      	add	r3, r2
 80237e8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80237ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80237f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80237f4:	6828      	ldr	r0, [r5, #0]
 80237f6:	4413      	add	r3, r2
 80237f8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80237fc:	6803      	ldr	r3, [r0, #0]
 80237fe:	462f      	mov	r7, r5
 8023800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023802:	4798      	blx	r3
 8023804:	f010 0f01 	tst.w	r0, #1
 8023808:	d00c      	beq.n	8023824 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802380a:	e894 0006 	ldmia.w	r4, {r1, r2}
 802380e:	6828      	ldr	r0, [r5, #0]
 8023810:	6803      	ldr	r3, [r0, #0]
 8023812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8023814:	4798      	blx	r3
 8023816:	b004      	add	sp, #16
 8023818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802381c:	4a21      	ldr	r2, [pc, #132]	@ (80238a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802381e:	e7c6      	b.n	80237ae <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8023820:	4b1f      	ldr	r3, [pc, #124]	@ (80238a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8023822:	e7cb      	b.n	80237bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8023824:	6838      	ldr	r0, [r7, #0]
 8023826:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802382a:	6803      	ldr	r3, [r0, #0]
 802382c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8023830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023832:	4798      	blx	r3
 8023834:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8023838:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802383c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8023840:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8023844:	fb16 3602 	smlabb	r6, r6, r2, r3
 8023848:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 802384c:	6838      	ldr	r0, [r7, #0]
 802384e:	6803      	ldr	r3, [r0, #0]
 8023850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023852:	4798      	blx	r3
 8023854:	4a12      	ldr	r2, [pc, #72]	@ (80238a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8023856:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 802385a:	4691      	mov	r9, r2
 802385c:	8813      	ldrh	r3, [r2, #0]
 802385e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8023862:	435d      	muls	r5, r3
 8023864:	fb03 1404 	mla	r4, r3, r4, r1
 8023868:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802386c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8023870:	6838      	ldr	r0, [r7, #0]
 8023872:	42ac      	cmp	r4, r5
 8023874:	6803      	ldr	r3, [r0, #0]
 8023876:	d20e      	bcs.n	8023896 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8023878:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 802387c:	4632      	mov	r2, r6
 802387e:	4643      	mov	r3, r8
 8023880:	4621      	mov	r1, r4
 8023882:	47d0      	blx	sl
 8023884:	f8b9 3000 	ldrh.w	r3, [r9]
 8023888:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802388c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023890:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8023894:	e7ec      	b.n	8023870 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8023896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023898:	4798      	blx	r3
 802389a:	e7bc      	b.n	8023816 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 802389c:	20011ff4 	.word	0x20011ff4
 80238a0:	20011ff6 	.word	0x20011ff6
 80238a4:	20011ff8 	.word	0x20011ff8
 80238a8:	20011ffc 	.word	0x20011ffc

080238ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80238ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238b0:	b08b      	sub	sp, #44	@ 0x2c
 80238b2:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80238b6:	460f      	mov	r7, r1
 80238b8:	4616      	mov	r6, r2
 80238ba:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80238be:	f1bb 0f00 	cmp.w	fp, #0
 80238c2:	d04a      	beq.n	802395a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80238c4:	6810      	ldr	r0, [r2, #0]
 80238c6:	6851      	ldr	r1, [r2, #4]
 80238c8:	ad06      	add	r5, sp, #24
 80238ca:	c503      	stmia	r5!, {r0, r1}
 80238cc:	6818      	ldr	r0, [r3, #0]
 80238ce:	6859      	ldr	r1, [r3, #4]
 80238d0:	ad08      	add	r5, sp, #32
 80238d2:	c503      	stmia	r5!, {r0, r1}
 80238d4:	a806      	add	r0, sp, #24
 80238d6:	f7f9 fff9 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80238da:	4631      	mov	r1, r6
 80238dc:	a808      	add	r0, sp, #32
 80238de:	f7fa f81d 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80238e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80238e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80238ea:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80238ee:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80238f2:	fb16 2103 	smlabb	r1, r6, r3, r2
 80238f6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80238fa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80238fe:	4f60      	ldr	r7, [pc, #384]	@ (8023a80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8023900:	440a      	add	r2, r1
 8023902:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023906:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802390a:	6838      	ldr	r0, [r7, #0]
 802390c:	4413      	add	r3, r2
 802390e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8023912:	6803      	ldr	r3, [r0, #0]
 8023914:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8023918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802391a:	4798      	blx	r3
 802391c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8023920:	46b9      	mov	r9, r7
 8023922:	d11d      	bne.n	8023960 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8023924:	b9fc      	cbnz	r4, 8023966 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8023926:	f010 0f01 	tst.w	r0, #1
 802392a:	d01c      	beq.n	8023966 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802392c:	2700      	movs	r7, #0
 802392e:	f8d9 0000 	ldr.w	r0, [r9]
 8023932:	b2ad      	uxth	r5, r5
 8023934:	6801      	ldr	r1, [r0, #0]
 8023936:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802393a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802393e:	f8cd b00c 	str.w	fp, [sp, #12]
 8023942:	9402      	str	r4, [sp, #8]
 8023944:	fa1f f488 	uxth.w	r4, r8
 8023948:	9501      	str	r5, [sp, #4]
 802394a:	9400      	str	r4, [sp, #0]
 802394c:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 802394e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8023952:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023956:	4631      	mov	r1, r6
 8023958:	47a0      	blx	r4
 802395a:	b00b      	add	sp, #44	@ 0x2c
 802395c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023960:	f010 0f04 	tst.w	r0, #4
 8023964:	e7e1      	b.n	802392a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8023966:	f8d9 0000 	ldr.w	r0, [r9]
 802396a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 802396e:	6803      	ldr	r3, [r0, #0]
 8023970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023972:	4798      	blx	r3
 8023974:	4b43      	ldr	r3, [pc, #268]	@ (8023a84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8023976:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802397a:	881a      	ldrh	r2, [r3, #0]
 802397c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8023980:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8023984:	fb02 1404 	mla	r4, r2, r4, r1
 8023988:	469a      	mov	sl, r3
 802398a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802398e:	fb05 f502 	mul.w	r5, r5, r2
 8023992:	d059      	beq.n	8023a48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8023994:	469e      	mov	lr, r3
 8023996:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 802399a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 802399e:	fa1f f28b 	uxth.w	r2, fp
 80239a2:	fa1f f989 	uxth.w	r9, r9
 80239a6:	42ac      	cmp	r4, r5
 80239a8:	d264      	bcs.n	8023a74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80239aa:	eb04 0a07 	add.w	sl, r4, r7
 80239ae:	4554      	cmp	r4, sl
 80239b0:	d23d      	bcs.n	8023a2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80239b2:	8821      	ldrh	r1, [r4, #0]
 80239b4:	f836 3b02 	ldrh.w	r3, [r6], #2
 80239b8:	1208      	asrs	r0, r1, #8
 80239ba:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80239be:	fb10 f009 	smulbb	r0, r0, r9
 80239c2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80239c6:	00c9      	lsls	r1, r1, #3
 80239c8:	b2c9      	uxtb	r1, r1
 80239ca:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80239ce:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80239d2:	fb11 f109 	smulbb	r1, r1, r9
 80239d6:	fb1b fb09 	smulbb	fp, fp, r9
 80239da:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80239de:	fb0c 0c02 	mla	ip, ip, r2, r0
 80239e2:	10d8      	asrs	r0, r3, #3
 80239e4:	00db      	lsls	r3, r3, #3
 80239e6:	b2db      	uxtb	r3, r3
 80239e8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80239ec:	fb03 1302 	mla	r3, r3, r2, r1
 80239f0:	fb00 b002 	mla	r0, r0, r2, fp
 80239f4:	fa1f fc8c 	uxth.w	ip, ip
 80239f8:	f10c 0b01 	add.w	fp, ip, #1
 80239fc:	b29b      	uxth	r3, r3
 80239fe:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8023a02:	b280      	uxth	r0, r0
 8023a04:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8023a08:	f103 0c01 	add.w	ip, r3, #1
 8023a0c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023a10:	1c43      	adds	r3, r0, #1
 8023a12:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023a16:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023a1a:	0940      	lsrs	r0, r0, #5
 8023a1c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023a20:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8023a24:	ea4c 0c00 	orr.w	ip, ip, r0
 8023a28:	f824 cb02 	strh.w	ip, [r4], #2
 8023a2c:	e7bf      	b.n	80239ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8023a2e:	f8be 3000 	ldrh.w	r3, [lr]
 8023a32:	eba3 0308 	sub.w	r3, r3, r8
 8023a36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8023a3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023a3e:	eba3 0308 	sub.w	r3, r3, r8
 8023a42:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8023a46:	e7ae      	b.n	80239a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8023a48:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8023a4c:	f8d9 0000 	ldr.w	r0, [r9]
 8023a50:	42ac      	cmp	r4, r5
 8023a52:	6803      	ldr	r3, [r0, #0]
 8023a54:	d20e      	bcs.n	8023a74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8023a56:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8023a5a:	4632      	mov	r2, r6
 8023a5c:	463b      	mov	r3, r7
 8023a5e:	4621      	mov	r1, r4
 8023a60:	47c0      	blx	r8
 8023a62:	f8ba 3000 	ldrh.w	r3, [sl]
 8023a66:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8023a6a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023a6e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8023a72:	e7eb      	b.n	8023a4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8023a74:	4b02      	ldr	r3, [pc, #8]	@ (8023a80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8023a76:	6818      	ldr	r0, [r3, #0]
 8023a78:	6803      	ldr	r3, [r0, #0]
 8023a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023a7c:	4798      	blx	r3
 8023a7e:	e76c      	b.n	802395a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8023a80:	20011ffc 	.word	0x20011ffc
 8023a84:	20011ff6 	.word	0x20011ff6

08023a88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8023a88:	b510      	push	{r4, lr}
 8023a8a:	4604      	mov	r4, r0
 8023a8c:	2104      	movs	r1, #4
 8023a8e:	f00b ff56 	bl	802f93e <_ZdlPvj>
 8023a92:	4620      	mov	r0, r4
 8023a94:	bd10      	pop	{r4, pc}

08023a96 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 8023a96:	b510      	push	{r4, lr}
 8023a98:	4604      	mov	r4, r0
 8023a9a:	2104      	movs	r1, #4
 8023a9c:	f00b ff4f 	bl	802f93e <_ZdlPvj>
 8023aa0:	4620      	mov	r0, r4
 8023aa2:	bd10      	pop	{r4, pc}

08023aa4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 8023aa4:	b510      	push	{r4, lr}
 8023aa6:	4604      	mov	r4, r0
 8023aa8:	f640 0144 	movw	r1, #2116	@ 0x844
 8023aac:	f00b ff47 	bl	802f93e <_ZdlPvj>
 8023ab0:	4620      	mov	r0, r4
 8023ab2:	bd10      	pop	{r4, pc}

08023ab4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 8023ab4:	b510      	push	{r4, lr}
 8023ab6:	4604      	mov	r4, r0
 8023ab8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8023abc:	f00b ff3f 	bl	802f93e <_ZdlPvj>
 8023ac0:	4620      	mov	r0, r4
 8023ac2:	bd10      	pop	{r4, pc}

08023ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023ac4:	b510      	push	{r4, lr}
 8023ac6:	4604      	mov	r4, r0
 8023ac8:	2104      	movs	r1, #4
 8023aca:	f00b ff38 	bl	802f93e <_ZdlPvj>
 8023ace:	4620      	mov	r0, r4
 8023ad0:	bd10      	pop	{r4, pc}

08023ad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8023ad2:	b510      	push	{r4, lr}
 8023ad4:	4604      	mov	r4, r0
 8023ad6:	2104      	movs	r1, #4
 8023ad8:	f00b ff31 	bl	802f93e <_ZdlPvj>
 8023adc:	4620      	mov	r0, r4
 8023ade:	bd10      	pop	{r4, pc}

08023ae0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023ae0:	b510      	push	{r4, lr}
 8023ae2:	4604      	mov	r4, r0
 8023ae4:	2104      	movs	r1, #4
 8023ae6:	f00b ff2a 	bl	802f93e <_ZdlPvj>
 8023aea:	4620      	mov	r0, r4
 8023aec:	bd10      	pop	{r4, pc}

08023aee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8023aee:	b510      	push	{r4, lr}
 8023af0:	4604      	mov	r4, r0
 8023af2:	2104      	movs	r1, #4
 8023af4:	f00b ff23 	bl	802f93e <_ZdlPvj>
 8023af8:	4620      	mov	r0, r4
 8023afa:	bd10      	pop	{r4, pc}

08023afc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023afc:	b510      	push	{r4, lr}
 8023afe:	4604      	mov	r4, r0
 8023b00:	2104      	movs	r1, #4
 8023b02:	f00b ff1c 	bl	802f93e <_ZdlPvj>
 8023b06:	4620      	mov	r0, r4
 8023b08:	bd10      	pop	{r4, pc}

08023b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023b0a:	b510      	push	{r4, lr}
 8023b0c:	4604      	mov	r4, r0
 8023b0e:	2104      	movs	r1, #4
 8023b10:	f00b ff15 	bl	802f93e <_ZdlPvj>
 8023b14:	4620      	mov	r0, r4
 8023b16:	bd10      	pop	{r4, pc}

08023b18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023b18:	b510      	push	{r4, lr}
 8023b1a:	4604      	mov	r4, r0
 8023b1c:	2104      	movs	r1, #4
 8023b1e:	f00b ff0e 	bl	802f93e <_ZdlPvj>
 8023b22:	4620      	mov	r0, r4
 8023b24:	bd10      	pop	{r4, pc}

08023b26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023b26:	b510      	push	{r4, lr}
 8023b28:	4604      	mov	r4, r0
 8023b2a:	2104      	movs	r1, #4
 8023b2c:	f00b ff07 	bl	802f93e <_ZdlPvj>
 8023b30:	4620      	mov	r0, r4
 8023b32:	bd10      	pop	{r4, pc}

08023b34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023b34:	b510      	push	{r4, lr}
 8023b36:	4604      	mov	r4, r0
 8023b38:	2104      	movs	r1, #4
 8023b3a:	f00b ff00 	bl	802f93e <_ZdlPvj>
 8023b3e:	4620      	mov	r0, r4
 8023b40:	bd10      	pop	{r4, pc}

08023b42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023b42:	b510      	push	{r4, lr}
 8023b44:	4604      	mov	r4, r0
 8023b46:	2104      	movs	r1, #4
 8023b48:	f00b fef9 	bl	802f93e <_ZdlPvj>
 8023b4c:	4620      	mov	r0, r4
 8023b4e:	bd10      	pop	{r4, pc}

08023b50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8023b50:	b510      	push	{r4, lr}
 8023b52:	4604      	mov	r4, r0
 8023b54:	2104      	movs	r1, #4
 8023b56:	f00b fef2 	bl	802f93e <_ZdlPvj>
 8023b5a:	4620      	mov	r0, r4
 8023b5c:	bd10      	pop	{r4, pc}

08023b5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8023b5e:	b510      	push	{r4, lr}
 8023b60:	4604      	mov	r4, r0
 8023b62:	2104      	movs	r1, #4
 8023b64:	f00b feeb 	bl	802f93e <_ZdlPvj>
 8023b68:	4620      	mov	r0, r4
 8023b6a:	bd10      	pop	{r4, pc}

08023b6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023b6c:	b510      	push	{r4, lr}
 8023b6e:	4604      	mov	r4, r0
 8023b70:	2104      	movs	r1, #4
 8023b72:	f00b fee4 	bl	802f93e <_ZdlPvj>
 8023b76:	4620      	mov	r0, r4
 8023b78:	bd10      	pop	{r4, pc}

08023b7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8023b7a:	b510      	push	{r4, lr}
 8023b7c:	4604      	mov	r4, r0
 8023b7e:	2104      	movs	r1, #4
 8023b80:	f00b fedd 	bl	802f93e <_ZdlPvj>
 8023b84:	4620      	mov	r0, r4
 8023b86:	bd10      	pop	{r4, pc}

08023b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023b88:	b510      	push	{r4, lr}
 8023b8a:	4604      	mov	r4, r0
 8023b8c:	2104      	movs	r1, #4
 8023b8e:	f00b fed6 	bl	802f93e <_ZdlPvj>
 8023b92:	4620      	mov	r0, r4
 8023b94:	bd10      	pop	{r4, pc}

08023b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023b96:	b510      	push	{r4, lr}
 8023b98:	4604      	mov	r4, r0
 8023b9a:	2104      	movs	r1, #4
 8023b9c:	f00b fecf 	bl	802f93e <_ZdlPvj>
 8023ba0:	4620      	mov	r0, r4
 8023ba2:	bd10      	pop	{r4, pc}

08023ba4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023ba4:	b510      	push	{r4, lr}
 8023ba6:	4604      	mov	r4, r0
 8023ba8:	2104      	movs	r1, #4
 8023baa:	f00b fec8 	bl	802f93e <_ZdlPvj>
 8023bae:	4620      	mov	r0, r4
 8023bb0:	bd10      	pop	{r4, pc}

08023bb2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8023bb2:	b510      	push	{r4, lr}
 8023bb4:	4604      	mov	r4, r0
 8023bb6:	2104      	movs	r1, #4
 8023bb8:	f00b fec1 	bl	802f93e <_ZdlPvj>
 8023bbc:	4620      	mov	r0, r4
 8023bbe:	bd10      	pop	{r4, pc}

08023bc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8023bc0:	b510      	push	{r4, lr}
 8023bc2:	4604      	mov	r4, r0
 8023bc4:	2104      	movs	r1, #4
 8023bc6:	f00b feba 	bl	802f93e <_ZdlPvj>
 8023bca:	4620      	mov	r0, r4
 8023bcc:	bd10      	pop	{r4, pc}

08023bce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8023bce:	b510      	push	{r4, lr}
 8023bd0:	4604      	mov	r4, r0
 8023bd2:	2104      	movs	r1, #4
 8023bd4:	f00b feb3 	bl	802f93e <_ZdlPvj>
 8023bd8:	4620      	mov	r0, r4
 8023bda:	bd10      	pop	{r4, pc}

08023bdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023bdc:	b510      	push	{r4, lr}
 8023bde:	4604      	mov	r4, r0
 8023be0:	2104      	movs	r1, #4
 8023be2:	f00b feac 	bl	802f93e <_ZdlPvj>
 8023be6:	4620      	mov	r0, r4
 8023be8:	bd10      	pop	{r4, pc}

08023bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023bea:	b510      	push	{r4, lr}
 8023bec:	4604      	mov	r4, r0
 8023bee:	2104      	movs	r1, #4
 8023bf0:	f00b fea5 	bl	802f93e <_ZdlPvj>
 8023bf4:	4620      	mov	r0, r4
 8023bf6:	bd10      	pop	{r4, pc}

08023bf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8023bf8:	b510      	push	{r4, lr}
 8023bfa:	4604      	mov	r4, r0
 8023bfc:	2104      	movs	r1, #4
 8023bfe:	f00b fe9e 	bl	802f93e <_ZdlPvj>
 8023c02:	4620      	mov	r0, r4
 8023c04:	bd10      	pop	{r4, pc}

08023c06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8023c06:	b510      	push	{r4, lr}
 8023c08:	4604      	mov	r4, r0
 8023c0a:	2104      	movs	r1, #4
 8023c0c:	f00b fe97 	bl	802f93e <_ZdlPvj>
 8023c10:	4620      	mov	r0, r4
 8023c12:	bd10      	pop	{r4, pc}

08023c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8023c14:	b510      	push	{r4, lr}
 8023c16:	4604      	mov	r4, r0
 8023c18:	2104      	movs	r1, #4
 8023c1a:	f00b fe90 	bl	802f93e <_ZdlPvj>
 8023c1e:	4620      	mov	r0, r4
 8023c20:	bd10      	pop	{r4, pc}

08023c22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8023c22:	b510      	push	{r4, lr}
 8023c24:	4604      	mov	r4, r0
 8023c26:	2104      	movs	r1, #4
 8023c28:	f00b fe89 	bl	802f93e <_ZdlPvj>
 8023c2c:	4620      	mov	r0, r4
 8023c2e:	bd10      	pop	{r4, pc}

08023c30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8023c30:	b510      	push	{r4, lr}
 8023c32:	4604      	mov	r4, r0
 8023c34:	2104      	movs	r1, #4
 8023c36:	f00b fe82 	bl	802f93e <_ZdlPvj>
 8023c3a:	4620      	mov	r0, r4
 8023c3c:	bd10      	pop	{r4, pc}

08023c3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8023c3e:	b510      	push	{r4, lr}
 8023c40:	4604      	mov	r4, r0
 8023c42:	2104      	movs	r1, #4
 8023c44:	f00b fe7b 	bl	802f93e <_ZdlPvj>
 8023c48:	4620      	mov	r0, r4
 8023c4a:	bd10      	pop	{r4, pc}

08023c4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8023c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c50:	b08f      	sub	sp, #60	@ 0x3c
 8023c52:	4616      	mov	r6, r2
 8023c54:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8023c58:	4682      	mov	sl, r0
 8023c5a:	460d      	mov	r5, r1
 8023c5c:	9205      	str	r2, [sp, #20]
 8023c5e:	2a00      	cmp	r2, #0
 8023c60:	f000 82b7 	beq.w	80241d2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 8023c64:	6830      	ldr	r0, [r6, #0]
 8023c66:	6871      	ldr	r1, [r6, #4]
 8023c68:	ac0a      	add	r4, sp, #40	@ 0x28
 8023c6a:	c403      	stmia	r4!, {r0, r1}
 8023c6c:	6818      	ldr	r0, [r3, #0]
 8023c6e:	6859      	ldr	r1, [r3, #4]
 8023c70:	ac0c      	add	r4, sp, #48	@ 0x30
 8023c72:	c403      	stmia	r4!, {r0, r1}
 8023c74:	a80a      	add	r0, sp, #40	@ 0x28
 8023c76:	f7f9 fe29 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023c7a:	4631      	mov	r1, r6
 8023c7c:	a80c      	add	r0, sp, #48	@ 0x30
 8023c7e:	f7f9 fe4d 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023c82:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8023c86:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8023c8a:	bfdd      	ittte	le
 8023c8c:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8023c90:	b293      	uxthle	r3, r2
 8023c92:	fb91 f3f3 	sdivle	r3, r1, r3
 8023c96:	2301      	movgt	r3, #1
 8023c98:	9300      	str	r3, [sp, #0]
 8023c9a:	f105 0308 	add.w	r3, r5, #8
 8023c9e:	9900      	ldr	r1, [sp, #0]
 8023ca0:	9306      	str	r3, [sp, #24]
 8023ca2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8023ca6:	440b      	add	r3, r1
 8023ca8:	3b01      	subs	r3, #1
 8023caa:	fb93 f3f1 	sdiv	r3, r3, r1
 8023cae:	9906      	ldr	r1, [sp, #24]
 8023cb0:	3b01      	subs	r3, #1
 8023cb2:	b29b      	uxth	r3, r3
 8023cb4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023cb8:	9307      	str	r3, [sp, #28]
 8023cba:	9900      	ldr	r1, [sp, #0]
 8023cbc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8023cc0:	fb93 f0f1 	sdiv	r0, r3, r1
 8023cc4:	b284      	uxth	r4, r0
 8023cc6:	9402      	str	r4, [sp, #8]
 8023cc8:	9d02      	ldr	r5, [sp, #8]
 8023cca:	9c00      	ldr	r4, [sp, #0]
 8023ccc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8023cd0:	fb05 3414 	mls	r4, r5, r4, r3
 8023cd4:	fb14 f402 	smulbb	r4, r4, r2
 8023cd8:	440c      	add	r4, r1
 8023cda:	b2a4      	uxth	r4, r4
 8023cdc:	2d00      	cmp	r5, #0
 8023cde:	d06c      	beq.n	8023dba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 8023ce0:	9806      	ldr	r0, [sp, #24]
 8023ce2:	1e6a      	subs	r2, r5, #1
 8023ce4:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8023ce8:	9a07      	ldr	r2, [sp, #28]
 8023cea:	ba36      	rev	r6, r6
 8023cec:	4416      	add	r6, r2
 8023cee:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8023cf2:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8023cf6:	4411      	add	r1, r2
 8023cf8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8023cfc:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8023d00:	4413      	add	r3, r2
 8023d02:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023d06:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8023d0a:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 802402c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 8023d0e:	9301      	str	r3, [sp, #4]
 8023d10:	4bc4      	ldr	r3, [pc, #784]	@ (8024024 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 8023d12:	6818      	ldr	r0, [r3, #0]
 8023d14:	6803      	ldr	r3, [r0, #0]
 8023d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d18:	4798      	blx	r3
 8023d1a:	4bc3      	ldr	r3, [pc, #780]	@ (8024028 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 8023d1c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023d20:	881b      	ldrh	r3, [r3, #0]
 8023d22:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 8023d26:	fb03 2808 	mla	r8, r3, r8, r2
 8023d2a:	436b      	muls	r3, r5
 8023d2c:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 8023d30:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8023d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d36:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023d3a:	2500      	movs	r5, #0
 8023d3c:	fb94 f3f3 	sdiv	r3, r4, r3
 8023d40:	9304      	str	r3, [sp, #16]
 8023d42:	f10a 0304 	add.w	r3, sl, #4
 8023d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8023d4a:	4629      	mov	r1, r5
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	9308      	str	r3, [sp, #32]
 8023d50:	f00c f829 	bl	802fda6 <memset>
 8023d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d56:	4543      	cmp	r3, r8
 8023d58:	f240 8236 	bls.w	80241c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 8023d5c:	2203      	movs	r2, #3
 8023d5e:	2107      	movs	r1, #7
 8023d60:	200b      	movs	r0, #11
 8023d62:	2c00      	cmp	r4, #0
 8023d64:	f000 8131 	beq.w	8023fca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 8023d68:	7833      	ldrb	r3, [r6, #0]
 8023d6a:	b2db      	uxtb	r3, r3
 8023d6c:	2bfe      	cmp	r3, #254	@ 0xfe
 8023d6e:	d126      	bne.n	8023dbe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 8023d70:	f896 e001 	ldrb.w	lr, [r6, #1]
 8023d74:	f896 c002 	ldrb.w	ip, [r6, #2]
 8023d78:	fa5f fe8e 	uxtb.w	lr, lr
 8023d7c:	f896 b003 	ldrb.w	fp, [r6, #3]
 8023d80:	fa5f fc8c 	uxtb.w	ip, ip
 8023d84:	f36e 0507 	bfi	r5, lr, #0, #8
 8023d88:	f36c 250f 	bfi	r5, ip, #8, #8
 8023d8c:	fa5f fb8b 	uxtb.w	fp, fp
 8023d90:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8023d94:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 8023d98:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8023d9c:	f36b 4517 	bfi	r5, fp, #16, #8
 8023da0:	0e2b      	lsrs	r3, r5, #24
 8023da2:	fb10 c303 	smlabb	r3, r0, r3, ip
 8023da6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023daa:	3c01      	subs	r4, #1
 8023dac:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023db0:	1d37      	adds	r7, r6, #4
 8023db2:	b2a4      	uxth	r4, r4
 8023db4:	605d      	str	r5, [r3, #4]
 8023db6:	463e      	mov	r6, r7
 8023db8:	e7d3      	b.n	8023d62 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 8023dba:	9e07      	ldr	r6, [sp, #28]
 8023dbc:	e797      	b.n	8023cee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 8023dbe:	2bff      	cmp	r3, #255	@ 0xff
 8023dc0:	d127      	bne.n	8023e12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 8023dc2:	f896 c001 	ldrb.w	ip, [r6, #1]
 8023dc6:	78b3      	ldrb	r3, [r6, #2]
 8023dc8:	fa5f fc8c 	uxtb.w	ip, ip
 8023dcc:	f896 e003 	ldrb.w	lr, [r6, #3]
 8023dd0:	b2db      	uxtb	r3, r3
 8023dd2:	f36c 0507 	bfi	r5, ip, #0, #8
 8023dd6:	f363 250f 	bfi	r5, r3, #8, #8
 8023dda:	fa5f fe8e 	uxtb.w	lr, lr
 8023dde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8023de2:	fb12 330e 	smlabb	r3, r2, lr, r3
 8023de6:	fb11 330c 	smlabb	r3, r1, ip, r3
 8023dea:	f896 b004 	ldrb.w	fp, [r6, #4]
 8023dee:	f36e 4517 	bfi	r5, lr, #16, #8
 8023df2:	fa5f fb8b 	uxtb.w	fp, fp
 8023df6:	f36b 651f 	bfi	r5, fp, #24, #8
 8023dfa:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 8023dfe:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 8023e02:	3c01      	subs	r4, #1
 8023e04:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 8023e08:	1d77      	adds	r7, r6, #5
 8023e0a:	b2a4      	uxth	r4, r4
 8023e0c:	f8cb 5004 	str.w	r5, [fp, #4]
 8023e10:	e7d1      	b.n	8023db6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8023e12:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 8023e16:	f106 0701 	add.w	r7, r6, #1
 8023e1a:	d107      	bne.n	8023e2c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 8023e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023e20:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023e24:	685d      	ldr	r5, [r3, #4]
 8023e26:	3c01      	subs	r4, #1
 8023e28:	b2a4      	uxth	r4, r4
 8023e2a:	e7c4      	b.n	8023db6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8023e2c:	f1bc 0f01 	cmp.w	ip, #1
 8023e30:	d12c      	bne.n	8023e8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 8023e32:	f003 0e03 	and.w	lr, r3, #3
 8023e36:	f1ae 0e02 	sub.w	lr, lr, #2
 8023e3a:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8023e3e:	fa5f fe8e 	uxtb.w	lr, lr
 8023e42:	f003 0c0c 	and.w	ip, r3, #12
 8023e46:	f36e 0507 	bfi	r5, lr, #0, #8
 8023e4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8023e4e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8023e52:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8023e56:	f36c 250f 	bfi	r5, ip, #8, #8
 8023e5a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8023e5e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8023e62:	3b02      	subs	r3, #2
 8023e64:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8023e68:	b2db      	uxtb	r3, r3
 8023e6a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8023e6e:	fb12 cc03 	smlabb	ip, r2, r3, ip
 8023e72:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8023e76:	f363 4517 	bfi	r5, r3, #16, #8
 8023e7a:	0e2e      	lsrs	r6, r5, #24
 8023e7c:	fb10 c606 	smlabb	r6, r0, r6, ip
 8023e80:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8023e84:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8023e88:	6075      	str	r5, [r6, #4]
 8023e8a:	e7cc      	b.n	8023e26 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 8023e8c:	f1bc 0f02 	cmp.w	ip, #2
 8023e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023e94:	d12a      	bne.n	8023eec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 8023e96:	1cb7      	adds	r7, r6, #2
 8023e98:	7876      	ldrb	r6, [r6, #1]
 8023e9a:	3b20      	subs	r3, #32
 8023e9c:	b2f6      	uxtb	r6, r6
 8023e9e:	f006 0c0f 	and.w	ip, r6, #15
 8023ea2:	f1ac 0c08 	sub.w	ip, ip, #8
 8023ea6:	449c      	add	ip, r3
 8023ea8:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8023eac:	fa5f fc8c 	uxtb.w	ip, ip
 8023eb0:	f36c 0507 	bfi	r5, ip, #0, #8
 8023eb4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8023eb8:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 8023ebc:	fa5f fe8e 	uxtb.w	lr, lr
 8023ec0:	1136      	asrs	r6, r6, #4
 8023ec2:	f36e 250f 	bfi	r5, lr, #8, #8
 8023ec6:	3e08      	subs	r6, #8
 8023ec8:	4433      	add	r3, r6
 8023eca:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8023ece:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8023ed2:	b2db      	uxtb	r3, r3
 8023ed4:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8023ed8:	fb12 ee03 	smlabb	lr, r2, r3, lr
 8023edc:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 8023ee0:	f363 4517 	bfi	r5, r3, #16, #8
 8023ee4:	0e2e      	lsrs	r6, r5, #24
 8023ee6:	fb10 e606 	smlabb	r6, r0, r6, lr
 8023eea:	e7c9      	b.n	8023e80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 8023eec:	1c5e      	adds	r6, r3, #1
 8023eee:	42a6      	cmp	r6, r4
 8023ef0:	dd4e      	ble.n	8023f90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 8023ef2:	1b36      	subs	r6, r6, r4
 8023ef4:	2e00      	cmp	r6, #0
 8023ef6:	dc4e      	bgt.n	8023f96 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 8023ef8:	2400      	movs	r4, #0
 8023efa:	f8dd b004 	ldr.w	fp, [sp, #4]
 8023efe:	f1bb 0f00 	cmp.w	fp, #0
 8023f02:	f340 8122 	ble.w	802414a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 8023f06:	1c7b      	adds	r3, r7, #1
 8023f08:	9303      	str	r3, [sp, #12]
 8023f0a:	783b      	ldrb	r3, [r7, #0]
 8023f0c:	b2db      	uxtb	r3, r3
 8023f0e:	2bfe      	cmp	r3, #254	@ 0xfe
 8023f10:	d160      	bne.n	8023fd4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 8023f12:	1d3b      	adds	r3, r7, #4
 8023f14:	9303      	str	r3, [sp, #12]
 8023f16:	2303      	movs	r3, #3
 8023f18:	7879      	ldrb	r1, [r7, #1]
 8023f1a:	78ba      	ldrb	r2, [r7, #2]
 8023f1c:	b2c9      	uxtb	r1, r1
 8023f1e:	78f8      	ldrb	r0, [r7, #3]
 8023f20:	f361 0507 	bfi	r5, r1, #0, #8
 8023f24:	b2d2      	uxtb	r2, r2
 8023f26:	f362 250f 	bfi	r5, r2, #8, #8
 8023f2a:	b2c0      	uxtb	r0, r0
 8023f2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8023f30:	fb13 2200 	smlabb	r2, r3, r0, r2
 8023f34:	2307      	movs	r3, #7
 8023f36:	fb13 2101 	smlabb	r1, r3, r1, r2
 8023f3a:	230b      	movs	r3, #11
 8023f3c:	f360 4517 	bfi	r5, r0, #16, #8
 8023f40:	0e2e      	lsrs	r6, r5, #24
 8023f42:	fb13 1306 	smlabb	r3, r3, r6, r1
 8023f46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023f4a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023f4e:	605d      	str	r5, [r3, #4]
 8023f50:	2601      	movs	r6, #1
 8023f52:	4637      	mov	r7, r6
 8023f54:	0e2b      	lsrs	r3, r5, #24
 8023f56:	ebab 0b07 	sub.w	fp, fp, r7
 8023f5a:	eba6 0607 	sub.w	r6, r6, r7
 8023f5e:	f040 80d3 	bne.w	8024108 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 8023f62:	b18c      	cbz	r4, 8023f88 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 8023f64:	4648      	mov	r0, r9
 8023f66:	00a1      	lsls	r1, r4, #2
 8023f68:	f7f3 fbfb 	bl	8017762 <_ZN8touchgfx5paint9flushLineEPmi>
 8023f6c:	9b05      	ldr	r3, [sp, #20]
 8023f6e:	4622      	mov	r2, r4
 8023f70:	4649      	mov	r1, r9
 8023f72:	4640      	mov	r0, r8
 8023f74:	f7f3 fd4a 	bl	8017a0c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8023f78:	4b2c      	ldr	r3, [pc, #176]	@ (802402c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 8023f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8024030 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 8023f7c:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023f80:	4599      	cmp	r9, r3
 8023f82:	bf08      	it	eq
 8023f84:	4613      	moveq	r3, r2
 8023f86:	4699      	mov	r9, r3
 8023f88:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 8023f8c:	2400      	movs	r4, #0
 8023f8e:	e0da      	b.n	8024146 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 8023f90:	1ba6      	subs	r6, r4, r6
 8023f92:	b2b4      	uxth	r4, r6
 8023f94:	e70f      	b.n	8023db6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8023f96:	9b01      	ldr	r3, [sp, #4]
 8023f98:	9a01      	ldr	r2, [sp, #4]
 8023f9a:	42b3      	cmp	r3, r6
 8023f9c:	bfa8      	it	ge
 8023f9e:	4633      	movge	r3, r6
 8023fa0:	0e2c      	lsrs	r4, r5, #24
 8023fa2:	eba2 0b03 	sub.w	fp, r2, r3
 8023fa6:	eba6 0603 	sub.w	r6, r6, r3
 8023faa:	d00b      	beq.n	8023fc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 8023fac:	461a      	mov	r2, r3
 8023fae:	f1a9 0104 	sub.w	r1, r9, #4
 8023fb2:	2a00      	cmp	r2, #0
 8023fb4:	dc02      	bgt.n	8023fbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 8023fb6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023fba:	e7a0      	b.n	8023efe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8023fbc:	f841 5f04 	str.w	r5, [r1, #4]!
 8023fc0:	3a01      	subs	r2, #1
 8023fc2:	e7f6      	b.n	8023fb2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 8023fc4:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8023fc8:	e799      	b.n	8023efe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8023fca:	4637      	mov	r7, r6
 8023fcc:	f8dd b004 	ldr.w	fp, [sp, #4]
 8023fd0:	4626      	mov	r6, r4
 8023fd2:	e794      	b.n	8023efe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8023fd4:	2bff      	cmp	r3, #255	@ 0xff
 8023fd6:	d11d      	bne.n	8024014 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 8023fd8:	1d7b      	adds	r3, r7, #5
 8023fda:	7878      	ldrb	r0, [r7, #1]
 8023fdc:	9303      	str	r3, [sp, #12]
 8023fde:	78ba      	ldrb	r2, [r7, #2]
 8023fe0:	78fe      	ldrb	r6, [r7, #3]
 8023fe2:	793b      	ldrb	r3, [r7, #4]
 8023fe4:	b2c0      	uxtb	r0, r0
 8023fe6:	b2d9      	uxtb	r1, r3
 8023fe8:	2303      	movs	r3, #3
 8023fea:	f360 0507 	bfi	r5, r0, #0, #8
 8023fee:	b2d2      	uxtb	r2, r2
 8023ff0:	f362 250f 	bfi	r5, r2, #8, #8
 8023ff4:	b2f6      	uxtb	r6, r6
 8023ff6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8023ffa:	fb13 2206 	smlabb	r2, r3, r6, r2
 8023ffe:	2307      	movs	r3, #7
 8024000:	fb13 2000 	smlabb	r0, r3, r0, r2
 8024004:	230b      	movs	r3, #11
 8024006:	f366 4517 	bfi	r5, r6, #16, #8
 802400a:	f361 651f 	bfi	r5, r1, #24, #8
 802400e:	fb13 0301 	smlabb	r3, r3, r1, r0
 8024012:	e798      	b.n	8023f46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 8024014:	119e      	asrs	r6, r3, #6
 8024016:	d10d      	bne.n	8024034 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8024018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802401c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8024020:	685d      	ldr	r5, [r3, #4]
 8024022:	e795      	b.n	8023f50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8024024:	20011ffc 	.word	0x20011ffc
 8024028:	20011ff6 	.word	0x20011ff6
 802402c:	20000120 	.word	0x20000120
 8024030:	20000220 	.word	0x20000220
 8024034:	2e01      	cmp	r6, #1
 8024036:	ea4f 6115 	mov.w	r1, r5, lsr #24
 802403a:	d12b      	bne.n	8024094 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 802403c:	f003 0003 	and.w	r0, r3, #3
 8024040:	3802      	subs	r0, #2
 8024042:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8024046:	b2c0      	uxtb	r0, r0
 8024048:	f003 020c 	and.w	r2, r3, #12
 802404c:	f360 0507 	bfi	r5, r0, #0, #8
 8024050:	3a08      	subs	r2, #8
 8024052:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8024056:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802405a:	f362 250f 	bfi	r5, r2, #8, #8
 802405e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8024062:	1e9f      	subs	r7, r3, #2
 8024064:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8024068:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802406c:	2703      	movs	r7, #3
 802406e:	b2db      	uxtb	r3, r3
 8024070:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8024074:	fb17 2203 	smlabb	r2, r7, r3, r2
 8024078:	2707      	movs	r7, #7
 802407a:	f363 4517 	bfi	r5, r3, #16, #8
 802407e:	230b      	movs	r3, #11
 8024080:	fb17 2000 	smlabb	r0, r7, r0, r2
 8024084:	fb13 0101 	smlabb	r1, r3, r1, r0
 8024088:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802408c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8024090:	604d      	str	r5, [r1, #4]
 8024092:	e75e      	b.n	8023f52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8024094:	2e02      	cmp	r6, #2
 8024096:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802409a:	d12f      	bne.n	80240fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 802409c:	7878      	ldrb	r0, [r7, #1]
 802409e:	1cba      	adds	r2, r7, #2
 80240a0:	b2c0      	uxtb	r0, r0
 80240a2:	9203      	str	r2, [sp, #12]
 80240a4:	f000 020f 	and.w	r2, r0, #15
 80240a8:	3b20      	subs	r3, #32
 80240aa:	3a08      	subs	r2, #8
 80240ac:	441a      	add	r2, r3
 80240ae:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80240b2:	b2d2      	uxtb	r2, r2
 80240b4:	f362 0507 	bfi	r5, r2, #0, #8
 80240b8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80240bc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80240c0:	b2f6      	uxtb	r6, r6
 80240c2:	1100      	asrs	r0, r0, #4
 80240c4:	f366 250f 	bfi	r5, r6, #8, #8
 80240c8:	3808      	subs	r0, #8
 80240ca:	4403      	add	r3, r0
 80240cc:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80240d0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80240d4:	2003      	movs	r0, #3
 80240d6:	b2db      	uxtb	r3, r3
 80240d8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80240dc:	fb10 6603 	smlabb	r6, r0, r3, r6
 80240e0:	2007      	movs	r0, #7
 80240e2:	f363 4517 	bfi	r5, r3, #16, #8
 80240e6:	230b      	movs	r3, #11
 80240e8:	fb10 6202 	smlabb	r2, r0, r2, r6
 80240ec:	fb13 2101 	smlabb	r1, r3, r1, r2
 80240f0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80240f4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80240f8:	604d      	str	r5, [r1, #4]
 80240fa:	e729      	b.n	8023f50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 80240fc:	1c5e      	adds	r6, r3, #1
 80240fe:	45b3      	cmp	fp, r6
 8024100:	465f      	mov	r7, fp
 8024102:	bfa8      	it	ge
 8024104:	4637      	movge	r7, r6
 8024106:	e725      	b.n	8023f54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 8024108:	193b      	adds	r3, r7, r4
 802410a:	2b40      	cmp	r3, #64	@ 0x40
 802410c:	dd13      	ble.n	8024136 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 802410e:	4648      	mov	r0, r9
 8024110:	00a1      	lsls	r1, r4, #2
 8024112:	f7f3 fb26 	bl	8017762 <_ZN8touchgfx5paint9flushLineEPmi>
 8024116:	4622      	mov	r2, r4
 8024118:	4640      	mov	r0, r8
 802411a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802411e:	2400      	movs	r4, #0
 8024120:	4649      	mov	r1, r9
 8024122:	9b05      	ldr	r3, [sp, #20]
 8024124:	f7f3 fc72 	bl	8017a0c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8024128:	4b2b      	ldr	r3, [pc, #172]	@ (80241d8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 802412a:	4599      	cmp	r9, r3
 802412c:	bf0c      	ite	eq
 802412e:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 80241e4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 8024132:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 80241d8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 8024136:	463b      	mov	r3, r7
 8024138:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 802413c:	3b01      	subs	r3, #1
 802413e:	f842 5b04 	str.w	r5, [r2], #4
 8024142:	d1fb      	bne.n	802413c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 8024144:	443c      	add	r4, r7
 8024146:	9f03      	ldr	r7, [sp, #12]
 8024148:	e6d9      	b.n	8023efe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 802414a:	b15c      	cbz	r4, 8024164 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 802414c:	00a1      	lsls	r1, r4, #2
 802414e:	4648      	mov	r0, r9
 8024150:	f7f3 fb07 	bl	8017762 <_ZN8touchgfx5paint9flushLineEPmi>
 8024154:	4640      	mov	r0, r8
 8024156:	9b05      	ldr	r3, [sp, #20]
 8024158:	4622      	mov	r2, r4
 802415a:	4649      	mov	r1, r9
 802415c:	f7f3 fc56 	bl	8017a0c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8024160:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024164:	4b1d      	ldr	r3, [pc, #116]	@ (80241dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 8024166:	9a01      	ldr	r2, [sp, #4]
 8024168:	881b      	ldrh	r3, [r3, #0]
 802416a:	1a9b      	subs	r3, r3, r2
 802416c:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8024170:	9b04      	ldr	r3, [sp, #16]
 8024172:	3301      	adds	r3, #1
 8024174:	9304      	str	r3, [sp, #16]
 8024176:	9a04      	ldr	r2, [sp, #16]
 8024178:	9b00      	ldr	r3, [sp, #0]
 802417a:	4293      	cmp	r3, r2
 802417c:	d11d      	bne.n	80241ba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 802417e:	2500      	movs	r5, #0
 8024180:	9b02      	ldr	r3, [sp, #8]
 8024182:	9a02      	ldr	r2, [sp, #8]
 8024184:	f103 0b01 	add.w	fp, r3, #1
 8024188:	9b06      	ldr	r3, [sp, #24]
 802418a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 802418e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8024192:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 8024196:	9b07      	ldr	r3, [sp, #28]
 8024198:	ba3f      	rev	r7, r7
 802419a:	1ba4      	subs	r4, r4, r6
 802419c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80241a0:	4629      	mov	r1, r5
 80241a2:	9808      	ldr	r0, [sp, #32]
 80241a4:	441f      	add	r7, r3
 80241a6:	b2a4      	uxth	r4, r4
 80241a8:	f00b fdfd 	bl	802fda6 <memset>
 80241ac:	f8cd b008 	str.w	fp, [sp, #8]
 80241b0:	9504      	str	r5, [sp, #16]
 80241b2:	f7f3 facf 	bl	8017754 <_ZN8touchgfx5paint8tearDownEv>
 80241b6:	463e      	mov	r6, r7
 80241b8:	e5cc      	b.n	8023d54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 80241ba:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80241be:	9b01      	ldr	r3, [sp, #4]
 80241c0:	1ae4      	subs	r4, r4, r3
 80241c2:	1ba4      	subs	r4, r4, r6
 80241c4:	b2a4      	uxth	r4, r4
 80241c6:	e7f4      	b.n	80241b2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 80241c8:	4b05      	ldr	r3, [pc, #20]	@ (80241e0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 80241ca:	6818      	ldr	r0, [r3, #0]
 80241cc:	6803      	ldr	r3, [r0, #0]
 80241ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80241d0:	4798      	blx	r3
 80241d2:	b00f      	add	sp, #60	@ 0x3c
 80241d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241d8:	20000120 	.word	0x20000120
 80241dc:	20011ff6 	.word	0x20011ff6
 80241e0:	20011ffc 	.word	0x20011ffc
 80241e4:	20000220 	.word	0x20000220

080241e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80241e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241ec:	b08f      	sub	sp, #60	@ 0x3c
 80241ee:	9205      	str	r2, [sp, #20]
 80241f0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80241f4:	461c      	mov	r4, r3
 80241f6:	9100      	str	r1, [sp, #0]
 80241f8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80241fa:	9201      	str	r2, [sp, #4]
 80241fc:	2a00      	cmp	r2, #0
 80241fe:	f000 8116 	beq.w	802442e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 8024202:	6820      	ldr	r0, [r4, #0]
 8024204:	6861      	ldr	r1, [r4, #4]
 8024206:	aa0a      	add	r2, sp, #40	@ 0x28
 8024208:	c203      	stmia	r2!, {r0, r1}
 802420a:	6818      	ldr	r0, [r3, #0]
 802420c:	6859      	ldr	r1, [r3, #4]
 802420e:	aa0c      	add	r2, sp, #48	@ 0x30
 8024210:	c203      	stmia	r2!, {r0, r1}
 8024212:	a80a      	add	r0, sp, #40	@ 0x28
 8024214:	f7f9 fb5a 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024218:	4621      	mov	r1, r4
 802421a:	a80c      	add	r0, sp, #48	@ 0x30
 802421c:	f7f9 fb7e 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024220:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8024224:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8024228:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802422c:	bfdd      	ittte	le
 802422e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8024232:	b2b3      	uxthle	r3, r6
 8024234:	fb92 f3f3 	sdivle	r3, r2, r3
 8024238:	2301      	movgt	r3, #1
 802423a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802423e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8024242:	fb92 f1f3 	sdiv	r1, r2, r3
 8024246:	fa1f fc81 	uxth.w	ip, r1
 802424a:	4661      	mov	r1, ip
 802424c:	fb0c 2413 	mls	r4, ip, r3, r2
 8024250:	fb14 f406 	smulbb	r4, r4, r6
 8024254:	441d      	add	r5, r3
 8024256:	3d01      	subs	r5, #1
 8024258:	4404      	add	r4, r0
 802425a:	fb95 f5f3 	sdiv	r5, r5, r3
 802425e:	b2a4      	uxth	r4, r4
 8024260:	b131      	cbz	r1, 8024270 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 8024262:	9b05      	ldr	r3, [sp, #20]
 8024264:	9900      	ldr	r1, [sp, #0]
 8024266:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802426a:	ba1b      	rev	r3, r3
 802426c:	4419      	add	r1, r3
 802426e:	9100      	str	r1, [sp, #0]
 8024270:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024274:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8024278:	4418      	add	r0, r3
 802427a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802427e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8024282:	441a      	add	r2, r3
 8024284:	4b6b      	ldr	r3, [pc, #428]	@ (8024434 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8024286:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802428a:	6818      	ldr	r0, [r3, #0]
 802428c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8024290:	6803      	ldr	r3, [r0, #0]
 8024292:	b2ad      	uxth	r5, r5
 8024294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024296:	4798      	blx	r3
 8024298:	4967      	ldr	r1, [pc, #412]	@ (8024438 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 802429a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802429e:	880b      	ldrh	r3, [r1, #0]
 80242a0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80242a4:	00ad      	lsls	r5, r5, #2
 80242a6:	fb03 c202 	mla	r2, r3, r2, ip
 80242aa:	4373      	muls	r3, r6
 80242ac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80242b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80242b4:	9306      	str	r3, [sp, #24]
 80242b6:	1d2b      	adds	r3, r5, #4
 80242b8:	9307      	str	r3, [sp, #28]
 80242ba:	9b01      	ldr	r3, [sp, #4]
 80242bc:	2c00      	cmp	r4, #0
 80242be:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80242c2:	bf0c      	ite	eq
 80242c4:	46c6      	moveq	lr, r8
 80242c6:	f04f 0e00 	movne.w	lr, #0
 80242ca:	2300      	movs	r3, #0
 80242cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80242ce:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80242d2:	b292      	uxth	r2, r2
 80242d4:	fa1f fe8e 	uxth.w	lr, lr
 80242d8:	9302      	str	r3, [sp, #8]
 80242da:	9103      	str	r1, [sp, #12]
 80242dc:	9204      	str	r2, [sp, #16]
 80242de:	9a06      	ldr	r2, [sp, #24]
 80242e0:	4282      	cmp	r2, r0
 80242e2:	f240 809f 	bls.w	8024424 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 80242e6:	b963      	cbnz	r3, 8024302 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 80242e8:	9b00      	ldr	r3, [sp, #0]
 80242ea:	781a      	ldrb	r2, [r3, #0]
 80242ec:	0993      	lsrs	r3, r2, #6
 80242ee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80242f2:	9202      	str	r2, [sp, #8]
 80242f4:	1e5a      	subs	r2, r3, #1
 80242f6:	2a02      	cmp	r2, #2
 80242f8:	d815      	bhi.n	8024326 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 80242fa:	9a00      	ldr	r2, [sp, #0]
 80242fc:	b29b      	uxth	r3, r3
 80242fe:	3201      	adds	r2, #1
 8024300:	9200      	str	r2, [sp, #0]
 8024302:	b1b4      	cbz	r4, 8024332 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 8024304:	429c      	cmp	r4, r3
 8024306:	bf99      	ittee	ls
 8024308:	1b1c      	subls	r4, r3, r4
 802430a:	fa1f fa84 	uxthls.w	sl, r4
 802430e:	4671      	movhi	r1, lr
 8024310:	f04f 0a00 	movhi.w	sl, #0
 8024314:	bf93      	iteet	ls
 8024316:	2400      	movls	r4, #0
 8024318:	1ae4      	subhi	r4, r4, r3
 802431a:	b2a4      	uxthhi	r4, r4
 802431c:	fa1f f188 	uxthls.w	r1, r8
 8024320:	4653      	mov	r3, sl
 8024322:	468e      	mov	lr, r1
 8024324:	e7db      	b.n	80242de <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 8024326:	9a00      	ldr	r2, [sp, #0]
 8024328:	9b00      	ldr	r3, [sp, #0]
 802432a:	3202      	adds	r2, #2
 802432c:	785b      	ldrb	r3, [r3, #1]
 802432e:	9200      	str	r2, [sp, #0]
 8024330:	e7e7      	b.n	8024302 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8024332:	2202      	movs	r2, #2
 8024334:	4615      	mov	r5, r2
 8024336:	4573      	cmp	r3, lr
 8024338:	bf2c      	ite	cs
 802433a:	46f1      	movcs	r9, lr
 802433c:	4699      	movcc	r9, r3
 802433e:	9907      	ldr	r1, [sp, #28]
 8024340:	9a02      	ldr	r2, [sp, #8]
 8024342:	bf28      	it	cs
 8024344:	eba3 0a0e 	subcs.w	sl, r3, lr
 8024348:	fb15 1202 	smlabb	r2, r5, r2, r1
 802434c:	9905      	ldr	r1, [sp, #20]
 802434e:	bf28      	it	cs
 8024350:	fa1f fa8a 	uxthcs.w	sl, sl
 8024354:	f831 c002 	ldrh.w	ip, [r1, r2]
 8024358:	9a01      	ldr	r2, [sp, #4]
 802435a:	bf37      	itett	cc
 802435c:	ebae 0103 	subcc.w	r1, lr, r3
 8024360:	4621      	movcs	r1, r4
 8024362:	b289      	uxthcc	r1, r1
 8024364:	46a2      	movcc	sl, r4
 8024366:	2aff      	cmp	r2, #255	@ 0xff
 8024368:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802436c:	d105      	bne.n	802437a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 802436e:	4481      	add	r9, r0
 8024370:	4581      	cmp	r9, r0
 8024372:	d045      	beq.n	8024400 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8024374:	f820 cb02 	strh.w	ip, [r0], #2
 8024378:	e7fa      	b.n	8024370 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 802437a:	9d03      	ldr	r5, [sp, #12]
 802437c:	ea4f 222c 	mov.w	r2, ip, asr #8
 8024380:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024384:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8024388:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802438c:	436a      	muls	r2, r5
 802438e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024392:	fa5f fc8c 	uxtb.w	ip, ip
 8024396:	fb0b fb05 	mul.w	fp, fp, r5
 802439a:	fb0c fc05 	mul.w	ip, ip, r5
 802439e:	9208      	str	r2, [sp, #32]
 80243a0:	4481      	add	r9, r0
 80243a2:	4581      	cmp	r9, r0
 80243a4:	d02c      	beq.n	8024400 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 80243a6:	8802      	ldrh	r2, [r0, #0]
 80243a8:	9d04      	ldr	r5, [sp, #16]
 80243aa:	1216      	asrs	r6, r2, #8
 80243ac:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80243b0:	fb16 f605 	smulbb	r6, r6, r5
 80243b4:	9d08      	ldr	r5, [sp, #32]
 80243b6:	9f04      	ldr	r7, [sp, #16]
 80243b8:	442e      	add	r6, r5
 80243ba:	10d5      	asrs	r5, r2, #3
 80243bc:	00d2      	lsls	r2, r2, #3
 80243be:	b2d2      	uxtb	r2, r2
 80243c0:	fb12 f207 	smulbb	r2, r2, r7
 80243c4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80243c8:	fb15 f507 	smulbb	r5, r5, r7
 80243cc:	b2b6      	uxth	r6, r6
 80243ce:	4462      	add	r2, ip
 80243d0:	b292      	uxth	r2, r2
 80243d2:	1c77      	adds	r7, r6, #1
 80243d4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80243d8:	1c57      	adds	r7, r2, #1
 80243da:	445d      	add	r5, fp
 80243dc:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 80243e0:	b2ad      	uxth	r5, r5
 80243e2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80243e6:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80243ea:	4316      	orrs	r6, r2
 80243ec:	1c6a      	adds	r2, r5, #1
 80243ee:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80243f2:	096d      	lsrs	r5, r5, #5
 80243f4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80243f8:	432e      	orrs	r6, r5
 80243fa:	f820 6b02 	strh.w	r6, [r0], #2
 80243fe:	e7d0      	b.n	80243a2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 8024400:	4573      	cmp	r3, lr
 8024402:	d38d      	bcc.n	8024320 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8024404:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8024408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802440a:	fa1f f188 	uxth.w	r1, r8
 802440e:	1a64      	subs	r4, r4, r1
 8024410:	881b      	ldrh	r3, [r3, #0]
 8024412:	b2a4      	uxth	r4, r4
 8024414:	2c00      	cmp	r4, #0
 8024416:	eba3 0308 	sub.w	r3, r3, r8
 802441a:	bf18      	it	ne
 802441c:	2100      	movne	r1, #0
 802441e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024422:	e77d      	b.n	8024320 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8024424:	4b03      	ldr	r3, [pc, #12]	@ (8024434 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8024426:	6818      	ldr	r0, [r3, #0]
 8024428:	6803      	ldr	r3, [r0, #0]
 802442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802442c:	4798      	blx	r3
 802442e:	b00f      	add	sp, #60	@ 0x3c
 8024430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024434:	20011ffc 	.word	0x20011ffc
 8024438:	20011ff6 	.word	0x20011ff6

0802443c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024440:	b09f      	sub	sp, #124	@ 0x7c
 8024442:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8024446:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802444a:	461d      	mov	r5, r3
 802444c:	4604      	mov	r4, r0
 802444e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024450:	9209      	str	r2, [sp, #36]	@ 0x24
 8024452:	2a00      	cmp	r2, #0
 8024454:	f000 81e9 	beq.w	802482a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 8024458:	6828      	ldr	r0, [r5, #0]
 802445a:	6869      	ldr	r1, [r5, #4]
 802445c:	aa1a      	add	r2, sp, #104	@ 0x68
 802445e:	c203      	stmia	r2!, {r0, r1}
 8024460:	6818      	ldr	r0, [r3, #0]
 8024462:	6859      	ldr	r1, [r3, #4]
 8024464:	aa1c      	add	r2, sp, #112	@ 0x70
 8024466:	c203      	stmia	r2!, {r0, r1}
 8024468:	a81a      	add	r0, sp, #104	@ 0x68
 802446a:	f7f9 fa2f 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802446e:	4629      	mov	r1, r5
 8024470:	a81c      	add	r0, sp, #112	@ 0x70
 8024472:	f7f9 fa53 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024476:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802447a:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 802447e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024482:	bfdd      	ittte	le
 8024484:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8024488:	b29a      	uxthle	r2, r3
 802448a:	fb91 f2f2 	sdivle	r2, r1, r2
 802448e:	2201      	movgt	r2, #1
 8024490:	9202      	str	r2, [sp, #8]
 8024492:	9802      	ldr	r0, [sp, #8]
 8024494:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8024498:	9902      	ldr	r1, [sp, #8]
 802449a:	fb92 f0f0 	sdiv	r0, r2, r0
 802449e:	b280      	uxth	r0, r0
 80244a0:	9010      	str	r0, [sp, #64]	@ 0x40
 80244a2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80244a4:	9802      	ldr	r0, [sp, #8]
 80244a6:	4488      	add	r8, r1
 80244a8:	fb05 2510 	mls	r5, r5, r0, r2
 80244ac:	fb15 f503 	smulbb	r5, r5, r3
 80244b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80244b4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80244b8:	fb98 f8f1 	sdiv	r8, r8, r1
 80244bc:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80244c0:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 80244c4:	440d      	add	r5, r1
 80244c6:	4419      	add	r1, r3
 80244c8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80244cc:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80244d0:	441a      	add	r2, r3
 80244d2:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80244d6:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80244da:	9304      	str	r3, [sp, #16]
 80244dc:	4b93      	ldr	r3, [pc, #588]	@ (802472c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 80244de:	f108 0801 	add.w	r8, r8, #1
 80244e2:	6818      	ldr	r0, [r3, #0]
 80244e4:	fa1f f888 	uxth.w	r8, r8
 80244e8:	6803      	ldr	r3, [r0, #0]
 80244ea:	b2ad      	uxth	r5, r5
 80244ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80244ee:	4798      	blx	r3
 80244f0:	4b8f      	ldr	r3, [pc, #572]	@ (8024730 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 80244f2:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 80244f6:	881a      	ldrh	r2, [r3, #0]
 80244f8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80244fc:	4356      	muls	r6, r2
 80244fe:	fb02 7101 	mla	r1, r2, r1, r7
 8024502:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8024506:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 802450a:	920a      	str	r2, [sp, #40]	@ 0x28
 802450c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802450e:	2d00      	cmp	r5, #0
 8024510:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8024514:	f108 0204 	add.w	r2, r8, #4
 8024518:	9211      	str	r2, [sp, #68]	@ 0x44
 802451a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802451c:	f04f 0100 	mov.w	r1, #0
 8024520:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8024524:	9215      	str	r2, [sp, #84]	@ 0x54
 8024526:	9a04      	ldr	r2, [sp, #16]
 8024528:	bf18      	it	ne
 802452a:	2200      	movne	r2, #0
 802452c:	9318      	str	r3, [sp, #96]	@ 0x60
 802452e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8024532:	b292      	uxth	r2, r2
 8024534:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024536:	4b7f      	ldr	r3, [pc, #508]	@ (8024734 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8024538:	910d      	str	r1, [sp, #52]	@ 0x34
 802453a:	1b1b      	subs	r3, r3, r4
 802453c:	9319      	str	r3, [sp, #100]	@ 0x64
 802453e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8024540:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024542:	fa11 f383 	uxtah	r3, r1, r3
 8024546:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8024548:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802454c:	3304      	adds	r3, #4
 802454e:	9306      	str	r3, [sp, #24]
 8024550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024552:	4283      	cmp	r3, r0
 8024554:	f240 8164 	bls.w	8024820 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 8024558:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 802455c:	f04f 0a01 	mov.w	sl, #1
 8024560:	fbb5 f3f3 	udiv	r3, r5, r3
 8024564:	9902      	ldr	r1, [sp, #8]
 8024566:	9e06      	ldr	r6, [sp, #24]
 8024568:	1acb      	subs	r3, r1, r3
 802456a:	b29b      	uxth	r3, r3
 802456c:	9316      	str	r3, [sp, #88]	@ 0x58
 802456e:	9b06      	ldr	r3, [sp, #24]
 8024570:	7836      	ldrb	r6, [r6, #0]
 8024572:	7859      	ldrb	r1, [r3, #1]
 8024574:	789b      	ldrb	r3, [r3, #2]
 8024576:	9612      	str	r6, [sp, #72]	@ 0x48
 8024578:	021b      	lsls	r3, r3, #8
 802457a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802457e:	9906      	ldr	r1, [sp, #24]
 8024580:	3601      	adds	r6, #1
 8024582:	78c9      	ldrb	r1, [r1, #3]
 8024584:	9605      	str	r6, [sp, #20]
 8024586:	430b      	orrs	r3, r1
 8024588:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802458a:	46d3      	mov	fp, sl
 802458c:	4419      	add	r1, r3
 802458e:	1c4e      	adds	r6, r1, #1
 8024590:	9603      	str	r6, [sp, #12]
 8024592:	7849      	ldrb	r1, [r1, #1]
 8024594:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8024596:	0209      	lsls	r1, r1, #8
 8024598:	5cf3      	ldrb	r3, [r6, r3]
 802459a:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 802459e:	4319      	orrs	r1, r3
 80245a0:	b28b      	uxth	r3, r1
 80245a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80245a4:	2300      	movs	r3, #0
 80245a6:	4657      	mov	r7, sl
 80245a8:	9307      	str	r3, [sp, #28]
 80245aa:	469c      	mov	ip, r3
 80245ac:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80245b0:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80245b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80245b6:	2d00      	cmp	r5, #0
 80245b8:	d07e      	beq.n	80246b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80245ba:	42af      	cmp	r7, r5
 80245bc:	d26e      	bcs.n	802469c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 80245be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80245c0:	1bed      	subs	r5, r5, r7
 80245c2:	4283      	cmp	r3, r0
 80245c4:	b2ad      	uxth	r5, r5
 80245c6:	9201      	str	r2, [sp, #4]
 80245c8:	d802      	bhi.n	80245d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 80245ca:	e073      	b.n	80246b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 80245cc:	2b00      	cmp	r3, #0
 80245ce:	d15f      	bne.n	8024690 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 80245d0:	9b03      	ldr	r3, [sp, #12]
 80245d2:	f1cb 0207 	rsb	r2, fp, #7
 80245d6:	785b      	ldrb	r3, [r3, #1]
 80245d8:	4093      	lsls	r3, r2
 80245da:	005b      	lsls	r3, r3, #1
 80245dc:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80245e0:	9b03      	ldr	r3, [sp, #12]
 80245e2:	781b      	ldrb	r3, [r3, #0]
 80245e4:	fa43 f30b 	asr.w	r3, r3, fp
 80245e8:	b2db      	uxtb	r3, r3
 80245ea:	4313      	orrs	r3, r2
 80245ec:	f10b 0201 	add.w	r2, fp, #1
 80245f0:	fa5f fb82 	uxtb.w	fp, r2
 80245f4:	9a03      	ldr	r2, [sp, #12]
 80245f6:	f1bb 0f08 	cmp.w	fp, #8
 80245fa:	bf15      	itete	ne
 80245fc:	3201      	addne	r2, #1
 80245fe:	3202      	addeq	r2, #2
 8024600:	9203      	strne	r2, [sp, #12]
 8024602:	9203      	streq	r2, [sp, #12]
 8024604:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024606:	b29f      	uxth	r7, r3
 8024608:	bf08      	it	eq
 802460a:	f04f 0b00 	moveq.w	fp, #0
 802460e:	42ba      	cmp	r2, r7
 8024610:	d309      	bcc.n	8024626 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 8024612:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8024616:	2301      	movs	r3, #1
 8024618:	9a05      	ldr	r2, [sp, #20]
 802461a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 802461e:	d30e      	bcc.n	802463e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 8024620:	469a      	mov	sl, r3
 8024622:	2600      	movs	r6, #0
 8024624:	e035      	b.n	8024692 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 8024626:	9b05      	ldr	r3, [sp, #20]
 8024628:	429f      	cmp	r7, r3
 802462a:	d318      	bcc.n	802465e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 802462c:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8024630:	eb04 030a 	add.w	r3, r4, sl
 8024634:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8024638:	f10a 0301 	add.w	r3, sl, #1
 802463c:	b29b      	uxth	r3, r3
 802463e:	9a05      	ldr	r2, [sp, #20]
 8024640:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8024644:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8024648:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802464a:	7116      	strb	r6, [r2, #4]
 802464c:	f10a 0601 	add.w	r6, sl, #1
 8024650:	80d1      	strh	r1, [r2, #6]
 8024652:	7156      	strb	r6, [r2, #5]
 8024654:	9a05      	ldr	r2, [sp, #20]
 8024656:	3201      	adds	r2, #1
 8024658:	b292      	uxth	r2, r2
 802465a:	9205      	str	r2, [sp, #20]
 802465c:	e7e0      	b.n	8024620 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 802465e:	463a      	mov	r2, r7
 8024660:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8024664:	795b      	ldrb	r3, [r3, #5]
 8024666:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802466a:	4426      	add	r6, r4
 802466c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 802466e:	eb01 0c06 	add.w	ip, r1, r6
 8024672:	f1bc 0f00 	cmp.w	ip, #0
 8024676:	dd07      	ble.n	8024688 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 8024678:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802467c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8024680:	f806 cd01 	strb.w	ip, [r6, #-1]!
 8024684:	88d2      	ldrh	r2, [r2, #6]
 8024686:	e7f1      	b.n	802466c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 8024688:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 802468c:	b29b      	uxth	r3, r3
 802468e:	e7c3      	b.n	8024618 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 8024690:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8024692:	970c      	str	r7, [sp, #48]	@ 0x30
 8024694:	9a01      	ldr	r2, [sp, #4]
 8024696:	46b4      	mov	ip, r6
 8024698:	461f      	mov	r7, r3
 802469a:	e78c      	b.n	80245b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 802469c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80246a0:	1b7b      	subs	r3, r7, r5
 80246a2:	eb0c 0605 	add.w	r6, ip, r5
 80246a6:	b29b      	uxth	r3, r3
 80246a8:	9201      	str	r2, [sp, #4]
 80246aa:	b2b6      	uxth	r6, r6
 80246ac:	2500      	movs	r5, #0
 80246ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80246b0:	4282      	cmp	r2, r0
 80246b2:	d88b      	bhi.n	80245cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 80246b4:	9a01      	ldr	r2, [sp, #4]
 80246b6:	e74b      	b.n	8024550 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 80246b8:	4297      	cmp	r7, r2
 80246ba:	d331      	bcc.n	8024720 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 80246bc:	1abb      	subs	r3, r7, r2
 80246be:	b29b      	uxth	r3, r3
 80246c0:	9208      	str	r2, [sp, #32]
 80246c2:	9501      	str	r5, [sp, #4]
 80246c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80246c6:	29ff      	cmp	r1, #255	@ 0xff
 80246c8:	9908      	ldr	r1, [sp, #32]
 80246ca:	eb0c 0601 	add.w	r6, ip, r1
 80246ce:	d133      	bne.n	8024738 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 80246d0:	f1a0 0e02 	sub.w	lr, r0, #2
 80246d4:	b2b6      	uxth	r6, r6
 80246d6:	45b4      	cmp	ip, r6
 80246d8:	f040 808a 	bne.w	80247f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 80246dc:	9908      	ldr	r1, [sp, #32]
 80246de:	4297      	cmp	r7, r2
 80246e0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80246e4:	d3e2      	bcc.n	80246ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 80246e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80246e8:	9904      	ldr	r1, [sp, #16]
 80246ea:	8812      	ldrh	r2, [r2, #0]
 80246ec:	1a52      	subs	r2, r2, r1
 80246ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80246f2:	9a07      	ldr	r2, [sp, #28]
 80246f4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80246f6:	3201      	adds	r2, #1
 80246f8:	428a      	cmp	r2, r1
 80246fa:	9207      	str	r2, [sp, #28]
 80246fc:	f040 8085 	bne.w	802480a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 8024700:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8024704:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8024708:	9b04      	ldr	r3, [sp, #16]
 802470a:	1bed      	subs	r5, r5, r7
 802470c:	b2ad      	uxth	r5, r5
 802470e:	2d00      	cmp	r5, #0
 8024710:	bf0c      	ite	eq
 8024712:	461a      	moveq	r2, r3
 8024714:	2200      	movne	r2, #0
 8024716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024718:	b292      	uxth	r2, r2
 802471a:	3301      	adds	r3, #1
 802471c:	930d      	str	r3, [sp, #52]	@ 0x34
 802471e:	e70e      	b.n	802453e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 8024720:	1bd1      	subs	r1, r2, r7
 8024722:	b28b      	uxth	r3, r1
 8024724:	9301      	str	r3, [sp, #4]
 8024726:	9708      	str	r7, [sp, #32]
 8024728:	462b      	mov	r3, r5
 802472a:	e7cb      	b.n	80246c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 802472c:	20011ffc 	.word	0x20011ffc
 8024730:	20011ff6 	.word	0x20011ff6
 8024734:	fffff7fb 	.word	0xfffff7fb
 8024738:	b2b6      	uxth	r6, r6
 802473a:	900b      	str	r0, [sp, #44]	@ 0x2c
 802473c:	45b4      	cmp	ip, r6
 802473e:	d0cd      	beq.n	80246dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8024740:	f10c 0101 	add.w	r1, ip, #1
 8024744:	44a4      	add	ip, r4
 8024746:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802474a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802474c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802474e:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8024752:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024754:	ea4f 2825 	mov.w	r8, r5, asr #8
 8024758:	f8b1 c000 	ldrh.w	ip, [r1]
 802475c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802475e:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8024762:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8024766:	fb1e fe01 	smulbb	lr, lr, r1
 802476a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802476c:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8024770:	fb08 e801 	mla	r8, r8, r1, lr
 8024774:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8024778:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802477a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802477e:	fb19 f901 	smulbb	r9, r9, r1
 8024782:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8024786:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024788:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802478c:	fb0e 9e01 	mla	lr, lr, r1, r9
 8024790:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024794:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024796:	fa5f fc8c 	uxtb.w	ip, ip
 802479a:	fb1c fc01 	smulbb	ip, ip, r1
 802479e:	00ed      	lsls	r5, r5, #3
 80247a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80247a2:	b2ed      	uxtb	r5, r5
 80247a4:	fb05 c501 	mla	r5, r5, r1, ip
 80247a8:	fa1f f888 	uxth.w	r8, r8
 80247ac:	fa1f fe8e 	uxth.w	lr, lr
 80247b0:	b2ad      	uxth	r5, r5
 80247b2:	f108 0c01 	add.w	ip, r8, #1
 80247b6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80247ba:	f10e 0901 	add.w	r9, lr, #1
 80247be:	f105 0c01 	add.w	ip, r5, #1
 80247c2:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 80247c6:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 80247ca:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80247ce:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 80247d2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80247d6:	ea4c 0808 	orr.w	r8, ip, r8
 80247da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80247dc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80247e0:	ea48 0809 	orr.w	r8, r8, r9
 80247e4:	f821 8b02 	strh.w	r8, [r1], #2
 80247e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80247ea:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 80247ee:	e7a5      	b.n	802473c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 80247f0:	f10c 0801 	add.w	r8, ip, #1
 80247f4:	44a4      	add	ip, r4
 80247f6:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 80247fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80247fc:	fa1f fc88 	uxth.w	ip, r8
 8024800:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8024804:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8024808:	e765      	b.n	80246d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 802480a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802480e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8024812:	1aad      	subs	r5, r5, r2
 8024814:	b2ad      	uxth	r5, r5
 8024816:	2d00      	cmp	r5, #0
 8024818:	bf18      	it	ne
 802481a:	2200      	movne	r2, #0
 802481c:	9201      	str	r2, [sp, #4]
 802481e:	e746      	b.n	80246ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8024820:	4b03      	ldr	r3, [pc, #12]	@ (8024830 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 8024822:	6818      	ldr	r0, [r3, #0]
 8024824:	6803      	ldr	r3, [r0, #0]
 8024826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024828:	4798      	blx	r3
 802482a:	b01f      	add	sp, #124	@ 0x7c
 802482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024830:	20011ffc 	.word	0x20011ffc

08024834 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 8024834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024838:	b093      	sub	sp, #76	@ 0x4c
 802483a:	4616      	mov	r6, r2
 802483c:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8024840:	9003      	str	r0, [sp, #12]
 8024842:	460d      	mov	r5, r1
 8024844:	9201      	str	r2, [sp, #4]
 8024846:	2a00      	cmp	r2, #0
 8024848:	f000 8304 	beq.w	8024e54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 802484c:	6830      	ldr	r0, [r6, #0]
 802484e:	6871      	ldr	r1, [r6, #4]
 8024850:	ac0e      	add	r4, sp, #56	@ 0x38
 8024852:	c403      	stmia	r4!, {r0, r1}
 8024854:	6818      	ldr	r0, [r3, #0]
 8024856:	6859      	ldr	r1, [r3, #4]
 8024858:	ac10      	add	r4, sp, #64	@ 0x40
 802485a:	c403      	stmia	r4!, {r0, r1}
 802485c:	a80e      	add	r0, sp, #56	@ 0x38
 802485e:	f7f9 f835 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024862:	4631      	mov	r1, r6
 8024864:	a810      	add	r0, sp, #64	@ 0x40
 8024866:	f7f9 f859 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802486a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802486e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8024872:	bfdd      	ittte	le
 8024874:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8024878:	b293      	uxthle	r3, r2
 802487a:	fb91 f3f3 	sdivle	r3, r1, r3
 802487e:	2301      	movgt	r3, #1
 8024880:	9304      	str	r3, [sp, #16]
 8024882:	f105 0308 	add.w	r3, r5, #8
 8024886:	9904      	ldr	r1, [sp, #16]
 8024888:	9308      	str	r3, [sp, #32]
 802488a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802488e:	440b      	add	r3, r1
 8024890:	3b01      	subs	r3, #1
 8024892:	fb93 f3f1 	sdiv	r3, r3, r1
 8024896:	9908      	ldr	r1, [sp, #32]
 8024898:	3b01      	subs	r3, #1
 802489a:	b29b      	uxth	r3, r3
 802489c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80248a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80248a2:	9904      	ldr	r1, [sp, #16]
 80248a4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80248a8:	fb93 f0f1 	sdiv	r0, r3, r1
 80248ac:	b284      	uxth	r4, r0
 80248ae:	9405      	str	r4, [sp, #20]
 80248b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80248b4:	fb05 3914 	mls	r9, r5, r4, r3
 80248b8:	fb19 f902 	smulbb	r9, r9, r2
 80248bc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80248c0:	4489      	add	r9, r1
 80248c2:	fa1f f989 	uxth.w	r9, r9
 80248c6:	2d00      	cmp	r5, #0
 80248c8:	d05d      	beq.n	8024986 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 80248ca:	9808      	ldr	r0, [sp, #32]
 80248cc:	1e6a      	subs	r2, r5, #1
 80248ce:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 80248d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80248d4:	fa9a fa8a 	rev.w	sl, sl
 80248d8:	4492      	add	sl, r2
 80248da:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80248de:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80248e2:	4411      	add	r1, r2
 80248e4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80248e8:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80248ec:	4413      	add	r3, r2
 80248ee:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80248f2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80248f6:	f04f 0600 	mov.w	r6, #0
 80248fa:	9302      	str	r3, [sp, #8]
 80248fc:	4bca      	ldr	r3, [pc, #808]	@ (8024c28 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 80248fe:	6818      	ldr	r0, [r3, #0]
 8024900:	6803      	ldr	r3, [r0, #0]
 8024902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024904:	4798      	blx	r3
 8024906:	4bc9      	ldr	r3, [pc, #804]	@ (8024c2c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 8024908:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802490c:	881b      	ldrh	r3, [r3, #0]
 802490e:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8024912:	2100      	movs	r1, #0
 8024914:	fb03 2404 	mla	r4, r3, r4, r2
 8024918:	436b      	muls	r3, r5
 802491a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802491e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024922:	930d      	str	r3, [sp, #52]	@ 0x34
 8024924:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8024928:	2280      	movs	r2, #128	@ 0x80
 802492a:	fb99 f3f3 	sdiv	r3, r9, r3
 802492e:	9306      	str	r3, [sp, #24]
 8024930:	9b01      	ldr	r3, [sp, #4]
 8024932:	43db      	mvns	r3, r3
 8024934:	b2db      	uxtb	r3, r3
 8024936:	930a      	str	r3, [sp, #40]	@ 0x28
 8024938:	9b03      	ldr	r3, [sp, #12]
 802493a:	3304      	adds	r3, #4
 802493c:	4618      	mov	r0, r3
 802493e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024940:	f00b fa31 	bl	802fda6 <memset>
 8024944:	4bba      	ldr	r3, [pc, #744]	@ (8024c30 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 8024946:	9300      	str	r3, [sp, #0]
 8024948:	2300      	movs	r3, #0
 802494a:	9307      	str	r3, [sp, #28]
 802494c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802494e:	42a3      	cmp	r3, r4
 8024950:	f240 827b 	bls.w	8024e4a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 8024954:	f04f 0e07 	mov.w	lr, #7
 8024958:	f1b9 0f00 	cmp.w	r9, #0
 802495c:	f000 8159 	beq.w	8024c12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8024960:	f89a 5000 	ldrb.w	r5, [sl]
 8024964:	f10a 0701 	add.w	r7, sl, #1
 8024968:	b2ed      	uxtb	r5, r5
 802496a:	11aa      	asrs	r2, r5, #6
 802496c:	d10e      	bne.n	802498c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 802496e:	9b03      	ldr	r3, [sp, #12]
 8024970:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8024974:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8024978:	88ae      	ldrh	r6, [r5, #4]
 802497a:	f109 39ff 	add.w	r9, r9, #4294967295
 802497e:	fa1f f989 	uxth.w	r9, r9
 8024982:	46ba      	mov	sl, r7
 8024984:	e7e8      	b.n	8024958 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 8024986:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 802498a:	e7a6      	b.n	80248da <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 802498c:	2a01      	cmp	r2, #1
 802498e:	d129      	bne.n	80249e4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 8024990:	2103      	movs	r1, #3
 8024992:	f3c6 0304 	ubfx	r3, r6, #0, #5
 8024996:	f005 0203 	and.w	r2, r5, #3
 802499a:	3b02      	subs	r3, #2
 802499c:	4413      	add	r3, r2
 802499e:	f003 031f 	and.w	r3, r3, #31
 80249a2:	f3c5 0281 	ubfx	r2, r5, #2, #2
 80249a6:	f363 0604 	bfi	r6, r3, #0, #5
 80249aa:	3a02      	subs	r2, #2
 80249ac:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 80249b0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80249b4:	f3c5 1501 	ubfx	r5, r5, #4, #2
 80249b8:	f362 164a 	bfi	r6, r2, #5, #6
 80249bc:	3d02      	subs	r5, #2
 80249be:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 80249c2:	f005 051f 	and.w	r5, r5, #31
 80249c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80249ca:	fb11 2205 	smlabb	r2, r1, r5, r2
 80249ce:	fb1e 2303 	smlabb	r3, lr, r3, r2
 80249d2:	9a03      	ldr	r2, [sp, #12]
 80249d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80249d8:	f365 26cf 	bfi	r6, r5, #11, #5
 80249dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80249e0:	809e      	strh	r6, [r3, #4]
 80249e2:	e7ca      	b.n	802497a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 80249e4:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80249e8:	2a02      	cmp	r2, #2
 80249ea:	b2ab      	uxth	r3, r5
 80249ec:	d136      	bne.n	8024a5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 80249ee:	2101      	movs	r1, #1
 80249f0:	fb12 1205 	smlabb	r2, r2, r5, r1
 80249f4:	4492      	add	sl, r2
 80249f6:	463a      	mov	r2, r7
 80249f8:	4552      	cmp	r2, sl
 80249fa:	d01c      	beq.n	8024a36 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 80249fc:	4694      	mov	ip, r2
 80249fe:	f04f 0b03 	mov.w	fp, #3
 8024a02:	f81c 1b02 	ldrb.w	r1, [ip], #2
 8024a06:	7852      	ldrb	r2, [r2, #1]
 8024a08:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8024a0c:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8024a10:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 8024a14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8024a18:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8024a1c:	f001 021f 	and.w	r2, r1, #31
 8024a20:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8024a24:	9a03      	ldr	r2, [sp, #12]
 8024a26:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8024a2a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8024a2e:	460e      	mov	r6, r1
 8024a30:	8081      	strh	r1, [r0, #4]
 8024a32:	4662      	mov	r2, ip
 8024a34:	e7e0      	b.n	80249f8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 8024a36:	4599      	cmp	r9, r3
 8024a38:	d20b      	bcs.n	8024a52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 8024a3a:	eba5 0509 	sub.w	r5, r5, r9
 8024a3e:	2d00      	cmp	r5, #0
 8024a40:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8024a44:	f300 8209 	bgt.w	8024e5a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 8024a48:	2301      	movs	r3, #1
 8024a4a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8024a4e:	9307      	str	r3, [sp, #28]
 8024a50:	e00c      	b.n	8024a6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8024a52:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8024a56:	eba9 0903 	sub.w	r9, r9, r3
 8024a5a:	e790      	b.n	802497e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 8024a5c:	4599      	cmp	r9, r3
 8024a5e:	d2fa      	bcs.n	8024a56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8024a60:	eba5 0509 	sub.w	r5, r5, r9
 8024a64:	2d00      	cmp	r5, #0
 8024a66:	dc1d      	bgt.n	8024aa4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 8024a68:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8024a6c:	f04f 0b00 	mov.w	fp, #0
 8024a70:	f1b8 0f00 	cmp.w	r8, #0
 8024a74:	f340 81a1 	ble.w	8024dba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 8024a78:	783b      	ldrb	r3, [r7, #0]
 8024a7a:	f107 0a01 	add.w	sl, r7, #1
 8024a7e:	b2db      	uxtb	r3, r3
 8024a80:	119a      	asrs	r2, r3, #6
 8024a82:	f040 80d7 	bne.w	8024c34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 8024a86:	9a03      	ldr	r2, [sp, #12]
 8024a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024a8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024a90:	889e      	ldrh	r6, [r3, #4]
 8024a92:	9b01      	ldr	r3, [sp, #4]
 8024a94:	2bff      	cmp	r3, #255	@ 0xff
 8024a96:	f040 81e9 	bne.w	8024e6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 8024a9a:	8026      	strh	r6, [r4, #0]
 8024a9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8024aa0:	3402      	adds	r4, #2
 8024aa2:	e0be      	b.n	8024c22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8024aa4:	9b02      	ldr	r3, [sp, #8]
 8024aa6:	9a02      	ldr	r2, [sp, #8]
 8024aa8:	42ab      	cmp	r3, r5
 8024aaa:	bfa8      	it	ge
 8024aac:	462b      	movge	r3, r5
 8024aae:	eba2 0803 	sub.w	r8, r2, r3
 8024ab2:	9a07      	ldr	r2, [sp, #28]
 8024ab4:	1aed      	subs	r5, r5, r3
 8024ab6:	2a00      	cmp	r2, #0
 8024ab8:	d05a      	beq.n	8024b70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 8024aba:	9a01      	ldr	r2, [sp, #4]
 8024abc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024ac0:	2aff      	cmp	r2, #255	@ 0xff
 8024ac2:	d049      	beq.n	8024b58 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8024ac4:	f8bd e004 	ldrh.w	lr, [sp, #4]
 8024ac8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8024acc:	42a3      	cmp	r3, r4
 8024ace:	f240 80a5 	bls.w	8024c1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8024ad2:	46bc      	mov	ip, r7
 8024ad4:	8820      	ldrh	r0, [r4, #0]
 8024ad6:	f81c 2b02 	ldrb.w	r2, [ip], #2
 8024ada:	7879      	ldrb	r1, [r7, #1]
 8024adc:	ea4f 2a20 	mov.w	sl, r0, asr #8
 8024ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8024ae4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8024ae8:	b212      	sxth	r2, r2
 8024aea:	fb1a fa09 	smulbb	sl, sl, r9
 8024aee:	b291      	uxth	r1, r2
 8024af0:	120f      	asrs	r7, r1, #8
 8024af2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8024af6:	fb07 a70e 	mla	r7, r7, lr, sl
 8024afa:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 8024afe:	00c0      	lsls	r0, r0, #3
 8024b00:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8024b04:	b2c0      	uxtb	r0, r0
 8024b06:	fb1a fa09 	smulbb	sl, sl, r9
 8024b0a:	fb10 f009 	smulbb	r0, r0, r9
 8024b0e:	10c9      	asrs	r1, r1, #3
 8024b10:	00d2      	lsls	r2, r2, #3
 8024b12:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024b16:	b2d2      	uxtb	r2, r2
 8024b18:	fb01 a10e 	mla	r1, r1, lr, sl
 8024b1c:	fb02 020e 	mla	r2, r2, lr, r0
 8024b20:	b2bf      	uxth	r7, r7
 8024b22:	b289      	uxth	r1, r1
 8024b24:	b292      	uxth	r2, r2
 8024b26:	1c78      	adds	r0, r7, #1
 8024b28:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8024b2c:	f101 0a01 	add.w	sl, r1, #1
 8024b30:	1c50      	adds	r0, r2, #1
 8024b32:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024b36:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 8024b3a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8024b3e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024b42:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024b46:	4307      	orrs	r7, r0
 8024b48:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8024b4c:	ea47 070a 	orr.w	r7, r7, sl
 8024b50:	f824 7b02 	strh.w	r7, [r4], #2
 8024b54:	4667      	mov	r7, ip
 8024b56:	e7b9      	b.n	8024acc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8024b58:	42a3      	cmp	r3, r4
 8024b5a:	d95f      	bls.n	8024c1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8024b5c:	463a      	mov	r2, r7
 8024b5e:	f812 1b02 	ldrb.w	r1, [r2], #2
 8024b62:	7878      	ldrb	r0, [r7, #1]
 8024b64:	4617      	mov	r7, r2
 8024b66:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8024b6a:	f824 1b02 	strh.w	r1, [r4], #2
 8024b6e:	e7f3      	b.n	8024b58 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8024b70:	9901      	ldr	r1, [sp, #4]
 8024b72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8024b76:	29ff      	cmp	r1, #255	@ 0xff
 8024b78:	b2b2      	uxth	r2, r6
 8024b7a:	d044      	beq.n	8024c06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8024b7c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8024b80:	ea4f 2922 	mov.w	r9, r2, asr #8
 8024b84:	4608      	mov	r0, r1
 8024b86:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8024b8a:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8024b8e:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8024b92:	fb09 f901 	mul.w	r9, r9, r1
 8024b96:	fb0e fe01 	mul.w	lr, lr, r1
 8024b9a:	00d1      	lsls	r1, r2, #3
 8024b9c:	b2c9      	uxtb	r1, r1
 8024b9e:	4341      	muls	r1, r0
 8024ba0:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 8024ba4:	429c      	cmp	r4, r3
 8024ba6:	f4bf af61 	bcs.w	8024a6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8024baa:	8822      	ldrh	r2, [r4, #0]
 8024bac:	1210      	asrs	r0, r2, #8
 8024bae:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8024bb2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024bb6:	00d2      	lsls	r2, r2, #3
 8024bb8:	fb00 900a 	mla	r0, r0, sl, r9
 8024bbc:	b2d2      	uxtb	r2, r2
 8024bbe:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8024bc2:	fb02 120a 	mla	r2, r2, sl, r1
 8024bc6:	fb0c ec0a 	mla	ip, ip, sl, lr
 8024bca:	b280      	uxth	r0, r0
 8024bcc:	b292      	uxth	r2, r2
 8024bce:	f100 0b01 	add.w	fp, r0, #1
 8024bd2:	fa1f fc8c 	uxth.w	ip, ip
 8024bd6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8024bda:	1c50      	adds	r0, r2, #1
 8024bdc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024be0:	f10c 0201 	add.w	r2, ip, #1
 8024be4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8024be8:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8024bec:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024bf0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024bf4:	ea40 0b0b 	orr.w	fp, r0, fp
 8024bf8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8024bfc:	ea4b 0b0c 	orr.w	fp, fp, ip
 8024c00:	f824 bb02 	strh.w	fp, [r4], #2
 8024c04:	e7ce      	b.n	8024ba4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 8024c06:	429c      	cmp	r4, r3
 8024c08:	f4bf af30 	bcs.w	8024a6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8024c0c:	f824 2b02 	strh.w	r2, [r4], #2
 8024c10:	e7f9      	b.n	8024c06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8024c12:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8024c16:	4657      	mov	r7, sl
 8024c18:	464d      	mov	r5, r9
 8024c1a:	e727      	b.n	8024a6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8024c1c:	2300      	movs	r3, #0
 8024c1e:	e716      	b.n	8024a4e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8024c20:	44bb      	add	fp, r7
 8024c22:	4657      	mov	r7, sl
 8024c24:	e724      	b.n	8024a70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 8024c26:	bf00      	nop
 8024c28:	20011ffc 	.word	0x20011ffc
 8024c2c:	20011ff6 	.word	0x20011ff6
 8024c30:	20000120 	.word	0x20000120
 8024c34:	2a01      	cmp	r2, #1
 8024c36:	d12a      	bne.n	8024c8e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 8024c38:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8024c3c:	f003 0203 	and.w	r2, r3, #3
 8024c40:	3902      	subs	r1, #2
 8024c42:	4411      	add	r1, r2
 8024c44:	f001 011f 	and.w	r1, r1, #31
 8024c48:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8024c4c:	f361 0604 	bfi	r6, r1, #0, #5
 8024c50:	3802      	subs	r0, #2
 8024c52:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8024c56:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8024c5a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8024c5e:	f360 164a 	bfi	r6, r0, #5, #6
 8024c62:	3b02      	subs	r3, #2
 8024c64:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 8024c68:	f002 031f 	and.w	r3, r2, #31
 8024c6c:	2203      	movs	r2, #3
 8024c6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8024c72:	f363 26cf 	bfi	r6, r3, #11, #5
 8024c76:	fb12 0303 	smlabb	r3, r2, r3, r0
 8024c7a:	2207      	movs	r2, #7
 8024c7c:	fb12 3301 	smlabb	r3, r2, r1, r3
 8024c80:	9a03      	ldr	r2, [sp, #12]
 8024c82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024c86:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024c8a:	809e      	strh	r6, [r3, #4]
 8024c8c:	e701      	b.n	8024a92 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 8024c8e:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8024c92:	45a8      	cmp	r8, r5
 8024c94:	4647      	mov	r7, r8
 8024c96:	bfa8      	it	ge
 8024c98:	462f      	movge	r7, r5
 8024c9a:	2a02      	cmp	r2, #2
 8024c9c:	d154      	bne.n	8024d48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 8024c9e:	9b01      	ldr	r3, [sp, #4]
 8024ca0:	2bff      	cmp	r3, #255	@ 0xff
 8024ca2:	d01a      	beq.n	8024cda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8024ca4:	eb0b 0307 	add.w	r3, fp, r7
 8024ca8:	2b40      	cmp	r3, #64	@ 0x40
 8024caa:	dd16      	ble.n	8024cda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8024cac:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8024cb0:	4649      	mov	r1, r9
 8024cb2:	9800      	ldr	r0, [sp, #0]
 8024cb4:	f7f2 fd55 	bl	8017762 <_ZN8touchgfx5paint9flushLineEPmi>
 8024cb8:	465a      	mov	r2, fp
 8024cba:	9b01      	ldr	r3, [sp, #4]
 8024cbc:	4620      	mov	r0, r4
 8024cbe:	9900      	ldr	r1, [sp, #0]
 8024cc0:	f7f2 fdfc 	bl	80178bc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8024cc4:	9b00      	ldr	r3, [sp, #0]
 8024cc6:	f04f 0b00 	mov.w	fp, #0
 8024cca:	461a      	mov	r2, r3
 8024ccc:	4b6b      	ldr	r3, [pc, #428]	@ (8024e7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8024cce:	444c      	add	r4, r9
 8024cd0:	429a      	cmp	r2, r3
 8024cd2:	bf0c      	ite	eq
 8024cd4:	4b6a      	ldreq	r3, [pc, #424]	@ (8024e80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8024cd6:	4b69      	ldrne	r3, [pc, #420]	@ (8024e7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8024cd8:	9300      	str	r3, [sp, #0]
 8024cda:	4652      	mov	r2, sl
 8024cdc:	2100      	movs	r1, #0
 8024cde:	42a9      	cmp	r1, r5
 8024ce0:	da2c      	bge.n	8024d3c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8024ce2:	4694      	mov	ip, r2
 8024ce4:	f04f 0903 	mov.w	r9, #3
 8024ce8:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8024cec:	7852      	ldrb	r2, [r2, #1]
 8024cee:	42b9      	cmp	r1, r7
 8024cf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024cf4:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8024cf8:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8024cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8024d00:	fb19 000e 	smlabb	r0, r9, lr, r0
 8024d04:	f04f 0e07 	mov.w	lr, #7
 8024d08:	f003 021f 	and.w	r2, r3, #31
 8024d0c:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8024d10:	9a03      	ldr	r2, [sp, #12]
 8024d12:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8024d16:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8024d1a:	461e      	mov	r6, r3
 8024d1c:	8083      	strh	r3, [r0, #4]
 8024d1e:	da0a      	bge.n	8024d36 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8024d20:	9a01      	ldr	r2, [sp, #4]
 8024d22:	2aff      	cmp	r2, #255	@ 0xff
 8024d24:	bf15      	itete	ne
 8024d26:	9a00      	ldrne	r2, [sp, #0]
 8024d28:	8023      	strheq	r3, [r4, #0]
 8024d2a:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8024d2e:	3402      	addeq	r4, #2
 8024d30:	bf18      	it	ne
 8024d32:	f10b 0b01 	addne.w	fp, fp, #1
 8024d36:	3101      	adds	r1, #1
 8024d38:	4662      	mov	r2, ip
 8024d3a:	e7d0      	b.n	8024cde <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8024d3c:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8024d40:	eba8 0807 	sub.w	r8, r8, r7
 8024d44:	1bed      	subs	r5, r5, r7
 8024d46:	e76c      	b.n	8024c22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8024d48:	9b01      	ldr	r3, [sp, #4]
 8024d4a:	eba8 0807 	sub.w	r8, r8, r7
 8024d4e:	2bff      	cmp	r3, #255	@ 0xff
 8024d50:	eba5 0507 	sub.w	r5, r5, r7
 8024d54:	fa1f f986 	uxth.w	r9, r6
 8024d58:	d027      	beq.n	8024daa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8024d5a:	eb0b 0307 	add.w	r3, fp, r7
 8024d5e:	2b40      	cmp	r3, #64	@ 0x40
 8024d60:	dd18      	ble.n	8024d94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8024d62:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8024d66:	4619      	mov	r1, r3
 8024d68:	9800      	ldr	r0, [sp, #0]
 8024d6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d6c:	f7f2 fcf9 	bl	8017762 <_ZN8touchgfx5paint9flushLineEPmi>
 8024d70:	465a      	mov	r2, fp
 8024d72:	9b01      	ldr	r3, [sp, #4]
 8024d74:	4620      	mov	r0, r4
 8024d76:	9900      	ldr	r1, [sp, #0]
 8024d78:	f7f2 fda0 	bl	80178bc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8024d7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d7e:	f04f 0b00 	mov.w	fp, #0
 8024d82:	441c      	add	r4, r3
 8024d84:	9b00      	ldr	r3, [sp, #0]
 8024d86:	461a      	mov	r2, r3
 8024d88:	4b3c      	ldr	r3, [pc, #240]	@ (8024e7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8024d8a:	429a      	cmp	r2, r3
 8024d8c:	bf0c      	ite	eq
 8024d8e:	4b3c      	ldreq	r3, [pc, #240]	@ (8024e80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8024d90:	4b3a      	ldrne	r3, [pc, #232]	@ (8024e7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8024d92:	9300      	str	r3, [sp, #0]
 8024d94:	9b00      	ldr	r3, [sp, #0]
 8024d96:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8024d9a:	463b      	mov	r3, r7
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	f43f af3f 	beq.w	8024c20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8024da2:	f822 9b02 	strh.w	r9, [r2], #2
 8024da6:	3b01      	subs	r3, #1
 8024da8:	e7f8      	b.n	8024d9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8024daa:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8024dae:	42a7      	cmp	r7, r4
 8024db0:	f67f af37 	bls.w	8024c22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8024db4:	f824 9b02 	strh.w	r9, [r4], #2
 8024db8:	e7f9      	b.n	8024dae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8024dba:	f1bb 0f00 	cmp.w	fp, #0
 8024dbe:	d00c      	beq.n	8024dda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8024dc0:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8024dc4:	4641      	mov	r1, r8
 8024dc6:	9800      	ldr	r0, [sp, #0]
 8024dc8:	f7f2 fccb 	bl	8017762 <_ZN8touchgfx5paint9flushLineEPmi>
 8024dcc:	4620      	mov	r0, r4
 8024dce:	9b01      	ldr	r3, [sp, #4]
 8024dd0:	465a      	mov	r2, fp
 8024dd2:	9900      	ldr	r1, [sp, #0]
 8024dd4:	f7f2 fd72 	bl	80178bc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8024dd8:	4444      	add	r4, r8
 8024dda:	4b2a      	ldr	r3, [pc, #168]	@ (8024e84 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8024ddc:	9a02      	ldr	r2, [sp, #8]
 8024dde:	881b      	ldrh	r3, [r3, #0]
 8024de0:	1a9b      	subs	r3, r3, r2
 8024de2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8024de6:	9b06      	ldr	r3, [sp, #24]
 8024de8:	3301      	adds	r3, #1
 8024dea:	9306      	str	r3, [sp, #24]
 8024dec:	9a06      	ldr	r2, [sp, #24]
 8024dee:	9b04      	ldr	r3, [sp, #16]
 8024df0:	4293      	cmp	r3, r2
 8024df2:	d120      	bne.n	8024e36 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8024df4:	9b05      	ldr	r3, [sp, #20]
 8024df6:	9a05      	ldr	r2, [sp, #20]
 8024df8:	f103 0801 	add.w	r8, r3, #1
 8024dfc:	9b08      	ldr	r3, [sp, #32]
 8024dfe:	2100      	movs	r1, #0
 8024e00:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8024e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e06:	ba3f      	rev	r7, r7
 8024e08:	2280      	movs	r2, #128	@ 0x80
 8024e0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8024e0c:	441f      	add	r7, r3
 8024e0e:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8024e12:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8024e16:	f00a ffc6 	bl	802fda6 <memset>
 8024e1a:	2300      	movs	r3, #0
 8024e1c:	f04f 0600 	mov.w	r6, #0
 8024e20:	eba9 0905 	sub.w	r9, r9, r5
 8024e24:	fa1f f989 	uxth.w	r9, r9
 8024e28:	f8cd 8014 	str.w	r8, [sp, #20]
 8024e2c:	9306      	str	r3, [sp, #24]
 8024e2e:	f7f2 fc91 	bl	8017754 <_ZN8touchgfx5paint8tearDownEv>
 8024e32:	46ba      	mov	sl, r7
 8024e34:	e58a      	b.n	802494c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8024e36:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8024e3a:	9b02      	ldr	r3, [sp, #8]
 8024e3c:	eba9 0903 	sub.w	r9, r9, r3
 8024e40:	eba9 0505 	sub.w	r5, r9, r5
 8024e44:	fa1f f985 	uxth.w	r9, r5
 8024e48:	e7f1      	b.n	8024e2e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8024e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8024e88 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8024e4c:	6818      	ldr	r0, [r3, #0]
 8024e4e:	6803      	ldr	r3, [r0, #0]
 8024e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024e52:	4798      	blx	r3
 8024e54:	b013      	add	sp, #76	@ 0x4c
 8024e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e5a:	9b02      	ldr	r3, [sp, #8]
 8024e5c:	9a02      	ldr	r2, [sp, #8]
 8024e5e:	42ab      	cmp	r3, r5
 8024e60:	bfa8      	it	ge
 8024e62:	462b      	movge	r3, r5
 8024e64:	eba2 0803 	sub.w	r8, r2, r3
 8024e68:	1aed      	subs	r5, r5, r3
 8024e6a:	e626      	b.n	8024aba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8024e6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8024e70:	fa1f f986 	uxth.w	r9, r6
 8024e74:	2500      	movs	r5, #0
 8024e76:	2701      	movs	r7, #1
 8024e78:	e76f      	b.n	8024d5a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8024e7a:	bf00      	nop
 8024e7c:	20000120 	.word	0x20000120
 8024e80:	20000220 	.word	0x20000220
 8024e84:	20011ff6 	.word	0x20011ff6
 8024e88:	20011ffc 	.word	0x20011ffc

08024e8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8024e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e90:	b08f      	sub	sp, #60	@ 0x3c
 8024e92:	9203      	str	r2, [sp, #12]
 8024e94:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8024e98:	461c      	mov	r4, r3
 8024e9a:	460f      	mov	r7, r1
 8024e9c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024e9e:	9202      	str	r2, [sp, #8]
 8024ea0:	2a00      	cmp	r2, #0
 8024ea2:	f000 812a 	beq.w	80250fa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 8024ea6:	6820      	ldr	r0, [r4, #0]
 8024ea8:	6861      	ldr	r1, [r4, #4]
 8024eaa:	aa0a      	add	r2, sp, #40	@ 0x28
 8024eac:	c203      	stmia	r2!, {r0, r1}
 8024eae:	6818      	ldr	r0, [r3, #0]
 8024eb0:	6859      	ldr	r1, [r3, #4]
 8024eb2:	aa0c      	add	r2, sp, #48	@ 0x30
 8024eb4:	c203      	stmia	r2!, {r0, r1}
 8024eb6:	a80a      	add	r0, sp, #40	@ 0x28
 8024eb8:	f7f8 fd08 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024ebc:	4621      	mov	r1, r4
 8024ebe:	a80c      	add	r0, sp, #48	@ 0x30
 8024ec0:	f7f8 fd2c 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024ec4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8024ec8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8024ecc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8024ed0:	bfdd      	ittte	le
 8024ed2:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8024ed6:	b2b3      	uxthle	r3, r6
 8024ed8:	fb92 f3f3 	sdivle	r3, r2, r3
 8024edc:	2301      	movgt	r3, #1
 8024ede:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8024ee2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8024ee6:	fb92 f1f3 	sdiv	r1, r2, r3
 8024eea:	fa1f fc81 	uxth.w	ip, r1
 8024eee:	4661      	mov	r1, ip
 8024ef0:	fb0c 2413 	mls	r4, ip, r3, r2
 8024ef4:	fb14 f406 	smulbb	r4, r4, r6
 8024ef8:	441d      	add	r5, r3
 8024efa:	3d01      	subs	r5, #1
 8024efc:	4404      	add	r4, r0
 8024efe:	fb95 f5f3 	sdiv	r5, r5, r3
 8024f02:	b2a4      	uxth	r4, r4
 8024f04:	b121      	cbz	r1, 8024f10 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 8024f06:	9b03      	ldr	r3, [sp, #12]
 8024f08:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8024f0c:	ba1b      	rev	r3, r3
 8024f0e:	441f      	add	r7, r3
 8024f10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024f14:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8024f18:	4418      	add	r0, r3
 8024f1a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8024f1e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8024f22:	441a      	add	r2, r3
 8024f24:	4b76      	ldr	r3, [pc, #472]	@ (8025100 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8024f26:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8024f2a:	6818      	ldr	r0, [r3, #0]
 8024f2c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8024f30:	6803      	ldr	r3, [r0, #0]
 8024f32:	b2ad      	uxth	r5, r5
 8024f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024f36:	4798      	blx	r3
 8024f38:	4a72      	ldr	r2, [pc, #456]	@ (8025104 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 8024f3a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8024f3e:	8813      	ldrh	r3, [r2, #0]
 8024f40:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8024f44:	00ad      	lsls	r5, r5, #2
 8024f46:	fb03 c101 	mla	r1, r3, r1, ip
 8024f4a:	4373      	muls	r3, r6
 8024f4c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8024f50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8024f54:	2c00      	cmp	r4, #0
 8024f56:	9304      	str	r3, [sp, #16]
 8024f58:	f105 0304 	add.w	r3, r5, #4
 8024f5c:	9305      	str	r3, [sp, #20]
 8024f5e:	bf0c      	ite	eq
 8024f60:	46c8      	moveq	r8, r9
 8024f62:	f04f 0800 	movne.w	r8, #0
 8024f66:	2300      	movs	r3, #0
 8024f68:	fa1f f888 	uxth.w	r8, r8
 8024f6c:	9301      	str	r3, [sp, #4]
 8024f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024f70:	9a04      	ldr	r2, [sp, #16]
 8024f72:	4282      	cmp	r2, r0
 8024f74:	f240 80bc 	bls.w	80250f0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 8024f78:	b95b      	cbnz	r3, 8024f92 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 8024f7a:	783a      	ldrb	r2, [r7, #0]
 8024f7c:	0993      	lsrs	r3, r2, #6
 8024f7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8024f82:	9201      	str	r2, [sp, #4]
 8024f84:	1e5a      	subs	r2, r3, #1
 8024f86:	2a02      	cmp	r2, #2
 8024f88:	bf8d      	iteet	hi
 8024f8a:	787b      	ldrbhi	r3, [r7, #1]
 8024f8c:	3701      	addls	r7, #1
 8024f8e:	b29b      	uxthls	r3, r3
 8024f90:	3702      	addhi	r7, #2
 8024f92:	b184      	cbz	r4, 8024fb6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8024f94:	429c      	cmp	r4, r3
 8024f96:	bf99      	ittee	ls
 8024f98:	1b1c      	subls	r4, r3, r4
 8024f9a:	fa1f fa84 	uxthls.w	sl, r4
 8024f9e:	46c4      	movhi	ip, r8
 8024fa0:	f04f 0a00 	movhi.w	sl, #0
 8024fa4:	bf93      	iteet	ls
 8024fa6:	2400      	movls	r4, #0
 8024fa8:	1ae4      	subhi	r4, r4, r3
 8024faa:	b2a4      	uxthhi	r4, r4
 8024fac:	fa1f fc89 	uxthls.w	ip, r9
 8024fb0:	4653      	mov	r3, sl
 8024fb2:	46e0      	mov	r8, ip
 8024fb4:	e7dc      	b.n	8024f70 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 8024fb6:	2204      	movs	r2, #4
 8024fb8:	4615      	mov	r5, r2
 8024fba:	4543      	cmp	r3, r8
 8024fbc:	bf2c      	ite	cs
 8024fbe:	46c6      	movcs	lr, r8
 8024fc0:	469e      	movcc	lr, r3
 8024fc2:	9905      	ldr	r1, [sp, #20]
 8024fc4:	9a01      	ldr	r2, [sp, #4]
 8024fc6:	bf28      	it	cs
 8024fc8:	eba3 0a08 	subcs.w	sl, r3, r8
 8024fcc:	fb15 1202 	smlabb	r2, r5, r2, r1
 8024fd0:	9903      	ldr	r1, [sp, #12]
 8024fd2:	bf38      	it	cc
 8024fd4:	eba8 0c03 	subcc.w	ip, r8, r3
 8024fd8:	588a      	ldr	r2, [r1, r2]
 8024fda:	bf28      	it	cs
 8024fdc:	fa1f fa8a 	uxthcs.w	sl, sl
 8024fe0:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8024fe4:	bf2e      	itee	cs
 8024fe6:	46a4      	movcs	ip, r4
 8024fe8:	fa1f fc8c 	uxthcc.w	ip, ip
 8024fec:	46a2      	movcc	sl, r4
 8024fee:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8024ff2:	2900      	cmp	r1, #0
 8024ff4:	d066      	beq.n	80250c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8024ff6:	29ff      	cmp	r1, #255	@ 0xff
 8024ff8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024ffc:	d114      	bne.n	8025028 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8024ffe:	9d02      	ldr	r5, [sp, #8]
 8025000:	2dff      	cmp	r5, #255	@ 0xff
 8025002:	d111      	bne.n	8025028 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8025004:	0951      	lsrs	r1, r2, #5
 8025006:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 802500a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802500e:	f026 0607 	bic.w	r6, r6, #7
 8025012:	430e      	orrs	r6, r1
 8025014:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025018:	4316      	orrs	r6, r2
 802501a:	b2b6      	uxth	r6, r6
 802501c:	4486      	add	lr, r0
 802501e:	4586      	cmp	lr, r0
 8025020:	d051      	beq.n	80250c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8025022:	f820 6b02 	strh.w	r6, [r0], #2
 8025026:	e7fa      	b.n	802501e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 8025028:	9d02      	ldr	r5, [sp, #8]
 802502a:	b2f6      	uxtb	r6, r6
 802502c:	4369      	muls	r1, r5
 802502e:	1c4d      	adds	r5, r1, #1
 8025030:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8025034:	122d      	asrs	r5, r5, #8
 8025036:	ea6f 0b05 	mvn.w	fp, r5
 802503a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802503e:	b2ad      	uxth	r5, r5
 8025040:	b2d2      	uxtb	r2, r2
 8025042:	fb11 f105 	smulbb	r1, r1, r5
 8025046:	fb16 f605 	smulbb	r6, r6, r5
 802504a:	fb12 f205 	smulbb	r2, r2, r5
 802504e:	b289      	uxth	r1, r1
 8025050:	b2b6      	uxth	r6, r6
 8025052:	b292      	uxth	r2, r2
 8025054:	9106      	str	r1, [sp, #24]
 8025056:	9607      	str	r6, [sp, #28]
 8025058:	9208      	str	r2, [sp, #32]
 802505a:	4486      	add	lr, r0
 802505c:	fa5f fb8b 	uxtb.w	fp, fp
 8025060:	4586      	cmp	lr, r0
 8025062:	d030      	beq.n	80250c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8025064:	8802      	ldrh	r2, [r0, #0]
 8025066:	9906      	ldr	r1, [sp, #24]
 8025068:	1216      	asrs	r6, r2, #8
 802506a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802506e:	10d5      	asrs	r5, r2, #3
 8025070:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8025074:	fb06 160b 	mla	r6, r6, fp, r1
 8025078:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802507c:	9907      	ldr	r1, [sp, #28]
 802507e:	00d2      	lsls	r2, r2, #3
 8025080:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8025084:	fb05 150b 	mla	r5, r5, fp, r1
 8025088:	b2d2      	uxtb	r2, r2
 802508a:	9908      	ldr	r1, [sp, #32]
 802508c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025090:	fb02 120b 	mla	r2, r2, fp, r1
 8025094:	b2b6      	uxth	r6, r6
 8025096:	b292      	uxth	r2, r2
 8025098:	1c71      	adds	r1, r6, #1
 802509a:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 802509e:	1c51      	adds	r1, r2, #1
 80250a0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80250a4:	b2ad      	uxth	r5, r5
 80250a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80250aa:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80250ae:	4316      	orrs	r6, r2
 80250b0:	1c6a      	adds	r2, r5, #1
 80250b2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80250b6:	096d      	lsrs	r5, r5, #5
 80250b8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80250bc:	432e      	orrs	r6, r5
 80250be:	f820 6b02 	strh.w	r6, [r0], #2
 80250c2:	e7cd      	b.n	8025060 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 80250c4:	4470      	add	r0, lr
 80250c6:	4543      	cmp	r3, r8
 80250c8:	f4ff af72 	bcc.w	8024fb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80250cc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80250d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250d2:	fa1f fc89 	uxth.w	ip, r9
 80250d6:	eba4 040c 	sub.w	r4, r4, ip
 80250da:	881b      	ldrh	r3, [r3, #0]
 80250dc:	b2a4      	uxth	r4, r4
 80250de:	2c00      	cmp	r4, #0
 80250e0:	eba3 0309 	sub.w	r3, r3, r9
 80250e4:	bf18      	it	ne
 80250e6:	f04f 0c00 	movne.w	ip, #0
 80250ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80250ee:	e75f      	b.n	8024fb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80250f0:	4b03      	ldr	r3, [pc, #12]	@ (8025100 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 80250f2:	6818      	ldr	r0, [r3, #0]
 80250f4:	6803      	ldr	r3, [r0, #0]
 80250f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80250f8:	4798      	blx	r3
 80250fa:	b00f      	add	sp, #60	@ 0x3c
 80250fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025100:	20011ffc 	.word	0x20011ffc
 8025104:	20011ff6 	.word	0x20011ff6

08025108 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8025108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802510c:	b093      	sub	sp, #76	@ 0x4c
 802510e:	9205      	str	r2, [sp, #20]
 8025110:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8025114:	461c      	mov	r4, r3
 8025116:	9101      	str	r1, [sp, #4]
 8025118:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802511a:	9202      	str	r2, [sp, #8]
 802511c:	2a00      	cmp	r2, #0
 802511e:	f000 812d 	beq.w	802537c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8025122:	6820      	ldr	r0, [r4, #0]
 8025124:	6861      	ldr	r1, [r4, #4]
 8025126:	aa0e      	add	r2, sp, #56	@ 0x38
 8025128:	c203      	stmia	r2!, {r0, r1}
 802512a:	6818      	ldr	r0, [r3, #0]
 802512c:	6859      	ldr	r1, [r3, #4]
 802512e:	aa10      	add	r2, sp, #64	@ 0x40
 8025130:	c203      	stmia	r2!, {r0, r1}
 8025132:	a80e      	add	r0, sp, #56	@ 0x38
 8025134:	f7f8 fbca 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025138:	4621      	mov	r1, r4
 802513a:	a810      	add	r0, sp, #64	@ 0x40
 802513c:	f7f8 fbee 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025140:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8025144:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8025148:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802514c:	bfdd      	ittte	le
 802514e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8025152:	b2b3      	uxthle	r3, r6
 8025154:	fb92 f3f3 	sdivle	r3, r2, r3
 8025158:	2301      	movgt	r3, #1
 802515a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 802515e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8025162:	fb92 f1f3 	sdiv	r1, r2, r3
 8025166:	fa1f fc81 	uxth.w	ip, r1
 802516a:	4661      	mov	r1, ip
 802516c:	fb0c 2413 	mls	r4, ip, r3, r2
 8025170:	fb14 f406 	smulbb	r4, r4, r6
 8025174:	441d      	add	r5, r3
 8025176:	3d01      	subs	r5, #1
 8025178:	4404      	add	r4, r0
 802517a:	fb95 f5f3 	sdiv	r5, r5, r3
 802517e:	b2a4      	uxth	r4, r4
 8025180:	b131      	cbz	r1, 8025190 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 8025182:	9b05      	ldr	r3, [sp, #20]
 8025184:	9901      	ldr	r1, [sp, #4]
 8025186:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802518a:	ba1b      	rev	r3, r3
 802518c:	4419      	add	r1, r3
 802518e:	9101      	str	r1, [sp, #4]
 8025190:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8025194:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8025198:	4418      	add	r0, r3
 802519a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 802519e:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80251a2:	441a      	add	r2, r3
 80251a4:	4b77      	ldr	r3, [pc, #476]	@ (8025384 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80251a6:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80251aa:	6818      	ldr	r0, [r3, #0]
 80251ac:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 80251b0:	6803      	ldr	r3, [r0, #0]
 80251b2:	b2ad      	uxth	r5, r5
 80251b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80251b6:	4798      	blx	r3
 80251b8:	4973      	ldr	r1, [pc, #460]	@ (8025388 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 80251ba:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 80251be:	880b      	ldrh	r3, [r1, #0]
 80251c0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80251c4:	00ad      	lsls	r5, r5, #2
 80251c6:	fb03 c202 	mla	r2, r3, r2, ip
 80251ca:	4373      	muls	r3, r6
 80251cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80251d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80251d4:	9308      	str	r3, [sp, #32]
 80251d6:	1d2b      	adds	r3, r5, #4
 80251d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80251da:	9b02      	ldr	r3, [sp, #8]
 80251dc:	2c00      	cmp	r4, #0
 80251de:	ea6f 0203 	mvn.w	r2, r3
 80251e2:	bf0c      	ite	eq
 80251e4:	46dc      	moveq	ip, fp
 80251e6:	f04f 0c00 	movne.w	ip, #0
 80251ea:	2300      	movs	r3, #0
 80251ec:	910d      	str	r1, [sp, #52]	@ 0x34
 80251ee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80251f2:	b2d2      	uxtb	r2, r2
 80251f4:	fa1f fc8c 	uxth.w	ip, ip
 80251f8:	9303      	str	r3, [sp, #12]
 80251fa:	9106      	str	r1, [sp, #24]
 80251fc:	9207      	str	r2, [sp, #28]
 80251fe:	9a08      	ldr	r2, [sp, #32]
 8025200:	4282      	cmp	r2, r0
 8025202:	f240 80b6 	bls.w	8025372 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8025206:	b963      	cbnz	r3, 8025222 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8025208:	9b01      	ldr	r3, [sp, #4]
 802520a:	781a      	ldrb	r2, [r3, #0]
 802520c:	0993      	lsrs	r3, r2, #6
 802520e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8025212:	9203      	str	r2, [sp, #12]
 8025214:	1e5a      	subs	r2, r3, #1
 8025216:	2a02      	cmp	r2, #2
 8025218:	d815      	bhi.n	8025246 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 802521a:	9a01      	ldr	r2, [sp, #4]
 802521c:	b29b      	uxth	r3, r3
 802521e:	3201      	adds	r2, #1
 8025220:	9201      	str	r2, [sp, #4]
 8025222:	b1b4      	cbz	r4, 8025252 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8025224:	429c      	cmp	r4, r3
 8025226:	bf99      	ittee	ls
 8025228:	1b1c      	subls	r4, r3, r4
 802522a:	fa1f f884 	uxthls.w	r8, r4
 802522e:	4666      	movhi	r6, ip
 8025230:	f04f 0800 	movhi.w	r8, #0
 8025234:	bf93      	iteet	ls
 8025236:	2400      	movls	r4, #0
 8025238:	1ae4      	subhi	r4, r4, r3
 802523a:	b2a4      	uxthhi	r4, r4
 802523c:	fa1f f68b 	uxthls.w	r6, fp
 8025240:	4643      	mov	r3, r8
 8025242:	46b4      	mov	ip, r6
 8025244:	e7db      	b.n	80251fe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8025246:	9a01      	ldr	r2, [sp, #4]
 8025248:	9b01      	ldr	r3, [sp, #4]
 802524a:	3202      	adds	r2, #2
 802524c:	785b      	ldrb	r3, [r3, #1]
 802524e:	9201      	str	r2, [sp, #4]
 8025250:	e7e7      	b.n	8025222 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8025252:	2203      	movs	r2, #3
 8025254:	4615      	mov	r5, r2
 8025256:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025258:	9a03      	ldr	r2, [sp, #12]
 802525a:	4563      	cmp	r3, ip
 802525c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8025260:	9905      	ldr	r1, [sp, #20]
 8025262:	bf28      	it	cs
 8025264:	eba3 080c 	subcs.w	r8, r3, ip
 8025268:	eb01 0502 	add.w	r5, r1, r2
 802526c:	9902      	ldr	r1, [sp, #8]
 802526e:	bf31      	iteee	cc
 8025270:	ebac 0603 	subcc.w	r6, ip, r3
 8025274:	fa1f f888 	uxthcs.w	r8, r8
 8025278:	46e1      	movcs	r9, ip
 802527a:	4626      	movcs	r6, r4
 802527c:	bf3e      	ittt	cc
 802527e:	b2b6      	uxthcc	r6, r6
 8025280:	4699      	movcc	r9, r3
 8025282:	46a0      	movcc	r8, r4
 8025284:	29ff      	cmp	r1, #255	@ 0xff
 8025286:	d04a      	beq.n	802531e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 8025288:	46ca      	mov	sl, r9
 802528a:	9f06      	ldr	r7, [sp, #24]
 802528c:	78a9      	ldrb	r1, [r5, #2]
 802528e:	9004      	str	r0, [sp, #16]
 8025290:	4379      	muls	r1, r7
 8025292:	910a      	str	r1, [sp, #40]	@ 0x28
 8025294:	7869      	ldrb	r1, [r5, #1]
 8025296:	4379      	muls	r1, r7
 8025298:	910b      	str	r1, [sp, #44]	@ 0x2c
 802529a:	9905      	ldr	r1, [sp, #20]
 802529c:	5c8a      	ldrb	r2, [r1, r2]
 802529e:	437a      	muls	r2, r7
 80252a0:	920c      	str	r2, [sp, #48]	@ 0x30
 80252a2:	f1ba 0f00 	cmp.w	sl, #0
 80252a6:	d03d      	beq.n	8025324 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 80252a8:	9f07      	ldr	r7, [sp, #28]
 80252aa:	9a04      	ldr	r2, [sp, #16]
 80252ac:	46be      	mov	lr, r7
 80252ae:	8812      	ldrh	r2, [r2, #0]
 80252b0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80252b2:	1215      	asrs	r5, r2, #8
 80252b4:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80252b8:	10d1      	asrs	r1, r2, #3
 80252ba:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80252be:	fb05 750e 	mla	r5, r5, lr, r7
 80252c2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80252c6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80252c8:	00d2      	lsls	r2, r2, #3
 80252ca:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80252ce:	fb01 710e 	mla	r1, r1, lr, r7
 80252d2:	b2d2      	uxtb	r2, r2
 80252d4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80252d6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80252da:	fb02 720e 	mla	r2, r2, lr, r7
 80252de:	b2ad      	uxth	r5, r5
 80252e0:	b292      	uxth	r2, r2
 80252e2:	f105 0e01 	add.w	lr, r5, #1
 80252e6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80252ea:	f102 0e01 	add.w	lr, r2, #1
 80252ee:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80252f2:	b289      	uxth	r1, r1
 80252f4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80252f8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80252fc:	4315      	orrs	r5, r2
 80252fe:	1c4a      	adds	r2, r1, #1
 8025300:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025304:	0949      	lsrs	r1, r1, #5
 8025306:	9a04      	ldr	r2, [sp, #16]
 8025308:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802530c:	430d      	orrs	r5, r1
 802530e:	f822 5b02 	strh.w	r5, [r2], #2
 8025312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025316:	9204      	str	r2, [sp, #16]
 8025318:	fa1f fa8a 	uxth.w	sl, sl
 802531c:	e7c1      	b.n	80252a2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 802531e:	4649      	mov	r1, r9
 8025320:	4686      	mov	lr, r0
 8025322:	b999      	cbnz	r1, 802534c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8025324:	4563      	cmp	r3, ip
 8025326:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 802532a:	d389      	bcc.n	8025240 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 802532c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8025330:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025332:	fa1f f68b 	uxth.w	r6, fp
 8025336:	1ba4      	subs	r4, r4, r6
 8025338:	881b      	ldrh	r3, [r3, #0]
 802533a:	b2a4      	uxth	r4, r4
 802533c:	2c00      	cmp	r4, #0
 802533e:	eba3 030b 	sub.w	r3, r3, fp
 8025342:	bf18      	it	ne
 8025344:	2600      	movne	r6, #0
 8025346:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802534a:	e779      	b.n	8025240 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 802534c:	78aa      	ldrb	r2, [r5, #2]
 802534e:	4f0f      	ldr	r7, [pc, #60]	@ (802538c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8025350:	3901      	subs	r1, #1
 8025352:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8025356:	786a      	ldrb	r2, [r5, #1]
 8025358:	b289      	uxth	r1, r1
 802535a:	00d2      	lsls	r2, r2, #3
 802535c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025360:	ea4a 0202 	orr.w	r2, sl, r2
 8025364:	f895 a000 	ldrb.w	sl, [r5]
 8025368:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 802536c:	f82e 2b02 	strh.w	r2, [lr], #2
 8025370:	e7d7      	b.n	8025322 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 8025372:	4b04      	ldr	r3, [pc, #16]	@ (8025384 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8025374:	6818      	ldr	r0, [r3, #0]
 8025376:	6803      	ldr	r3, [r0, #0]
 8025378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802537a:	4798      	blx	r3
 802537c:	b013      	add	sp, #76	@ 0x4c
 802537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025382:	bf00      	nop
 8025384:	20011ffc 	.word	0x20011ffc
 8025388:	20011ff6 	.word	0x20011ff6
 802538c:	fffff800 	.word	0xfffff800

08025390 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8025390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025394:	b09d      	sub	sp, #116	@ 0x74
 8025396:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 802539a:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 802539e:	461c      	mov	r4, r3
 80253a0:	4683      	mov	fp, r0
 80253a2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80253a4:	920e      	str	r2, [sp, #56]	@ 0x38
 80253a6:	2a00      	cmp	r2, #0
 80253a8:	f000 81e1 	beq.w	802576e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 80253ac:	6820      	ldr	r0, [r4, #0]
 80253ae:	6861      	ldr	r1, [r4, #4]
 80253b0:	aa18      	add	r2, sp, #96	@ 0x60
 80253b2:	c203      	stmia	r2!, {r0, r1}
 80253b4:	6818      	ldr	r0, [r3, #0]
 80253b6:	6859      	ldr	r1, [r3, #4]
 80253b8:	aa1a      	add	r2, sp, #104	@ 0x68
 80253ba:	c203      	stmia	r2!, {r0, r1}
 80253bc:	a818      	add	r0, sp, #96	@ 0x60
 80253be:	f7f8 fa85 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80253c2:	4621      	mov	r1, r4
 80253c4:	a81a      	add	r0, sp, #104	@ 0x68
 80253c6:	f7f8 faa9 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80253ca:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80253ce:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80253d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80253d6:	bfdd      	ittte	le
 80253d8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80253dc:	b29a      	uxthle	r2, r3
 80253de:	fb91 f2f2 	sdivle	r2, r1, r2
 80253e2:	2201      	movgt	r2, #1
 80253e4:	9202      	str	r2, [sp, #8]
 80253e6:	9802      	ldr	r0, [sp, #8]
 80253e8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80253ec:	9902      	ldr	r1, [sp, #8]
 80253ee:	fb92 f0f0 	sdiv	r0, r2, r0
 80253f2:	b280      	uxth	r0, r0
 80253f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80253f6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80253f8:	9802      	ldr	r0, [sp, #8]
 80253fa:	440c      	add	r4, r1
 80253fc:	fb05 2510 	mls	r5, r5, r0, r2
 8025400:	fb15 f503 	smulbb	r5, r5, r3
 8025404:	3c01      	subs	r4, #1
 8025406:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 802540a:	fb94 f4f1 	sdiv	r4, r4, r1
 802540e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8025412:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8025416:	440d      	add	r5, r1
 8025418:	4419      	add	r1, r3
 802541a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 802541e:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8025422:	441a      	add	r2, r3
 8025424:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8025428:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 802542c:	9306      	str	r3, [sp, #24]
 802542e:	4bb3      	ldr	r3, [pc, #716]	@ (80256fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8025430:	3401      	adds	r4, #1
 8025432:	6818      	ldr	r0, [r3, #0]
 8025434:	b2a4      	uxth	r4, r4
 8025436:	6803      	ldr	r3, [r0, #0]
 8025438:	00a4      	lsls	r4, r4, #2
 802543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802543c:	4798      	blx	r3
 802543e:	4bb0      	ldr	r3, [pc, #704]	@ (8025700 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8025440:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8025444:	881a      	ldrh	r2, [r3, #0]
 8025446:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 802544a:	4356      	muls	r6, r2
 802544c:	fb02 7101 	mla	r1, r2, r1, r7
 8025450:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8025454:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8025458:	920a      	str	r2, [sp, #40]	@ 0x28
 802545a:	1d22      	adds	r2, r4, #4
 802545c:	b2ad      	uxth	r5, r5
 802545e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8025460:	9a06      	ldr	r2, [sp, #24]
 8025462:	2d00      	cmp	r5, #0
 8025464:	bf0c      	ite	eq
 8025466:	4611      	moveq	r1, r2
 8025468:	2100      	movne	r1, #0
 802546a:	2200      	movs	r2, #0
 802546c:	9316      	str	r3, [sp, #88]	@ 0x58
 802546e:	4ba5      	ldr	r3, [pc, #660]	@ (8025704 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8025470:	b289      	uxth	r1, r1
 8025472:	eba3 030b 	sub.w	r3, r3, fp
 8025476:	920d      	str	r2, [sp, #52]	@ 0x34
 8025478:	9317      	str	r3, [sp, #92]	@ 0x5c
 802547a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802547c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802547e:	fa12 f383 	uxtah	r3, r2, r3
 8025482:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025488:	3304      	adds	r3, #4
 802548a:	9308      	str	r3, [sp, #32]
 802548c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802548e:	4543      	cmp	r3, r8
 8025490:	f240 8168 	bls.w	8025764 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 8025494:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8025498:	9a02      	ldr	r2, [sp, #8]
 802549a:	fbb5 f3f3 	udiv	r3, r5, r3
 802549e:	1ad3      	subs	r3, r2, r3
 80254a0:	b29b      	uxth	r3, r3
 80254a2:	9314      	str	r3, [sp, #80]	@ 0x50
 80254a4:	9b08      	ldr	r3, [sp, #32]
 80254a6:	9808      	ldr	r0, [sp, #32]
 80254a8:	785a      	ldrb	r2, [r3, #1]
 80254aa:	789b      	ldrb	r3, [r3, #2]
 80254ac:	7800      	ldrb	r0, [r0, #0]
 80254ae:	021b      	lsls	r3, r3, #8
 80254b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80254b4:	9a08      	ldr	r2, [sp, #32]
 80254b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80254b8:	78d2      	ldrb	r2, [r2, #3]
 80254ba:	3001      	adds	r0, #1
 80254bc:	4313      	orrs	r3, r2
 80254be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80254c0:	9007      	str	r0, [sp, #28]
 80254c2:	441a      	add	r2, r3
 80254c4:	1c50      	adds	r0, r2, #1
 80254c6:	9005      	str	r0, [sp, #20]
 80254c8:	7852      	ldrb	r2, [r2, #1]
 80254ca:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80254cc:	0212      	lsls	r2, r2, #8
 80254ce:	5cc3      	ldrb	r3, [r0, r3]
 80254d0:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80254d4:	431a      	orrs	r2, r3
 80254d6:	b293      	uxth	r3, r2
 80254d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80254da:	2300      	movs	r3, #0
 80254dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80254de:	2301      	movs	r3, #1
 80254e0:	9301      	str	r3, [sp, #4]
 80254e2:	9304      	str	r3, [sp, #16]
 80254e4:	2300      	movs	r3, #0
 80254e6:	f04f 0e01 	mov.w	lr, #1
 80254ea:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 80254ee:	9303      	str	r3, [sp, #12]
 80254f0:	2d00      	cmp	r5, #0
 80254f2:	d07c      	beq.n	80255ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80254f4:	45ae      	cmp	lr, r5
 80254f6:	d26b      	bcs.n	80255d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 80254f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80254fa:	eba5 050e 	sub.w	r5, r5, lr
 80254fe:	4543      	cmp	r3, r8
 8025500:	b2ad      	uxth	r5, r5
 8025502:	460c      	mov	r4, r1
 8025504:	d802      	bhi.n	802550c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 8025506:	e070      	b.n	80255ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8025508:	2b00      	cmp	r3, #0
 802550a:	d15c      	bne.n	80255c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 802550c:	9b05      	ldr	r3, [sp, #20]
 802550e:	9a04      	ldr	r2, [sp, #16]
 8025510:	785b      	ldrb	r3, [r3, #1]
 8025512:	f1c2 0207 	rsb	r2, r2, #7
 8025516:	4093      	lsls	r3, r2
 8025518:	005b      	lsls	r3, r3, #1
 802551a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 802551e:	9b05      	ldr	r3, [sp, #20]
 8025520:	9904      	ldr	r1, [sp, #16]
 8025522:	781b      	ldrb	r3, [r3, #0]
 8025524:	410b      	asrs	r3, r1
 8025526:	3101      	adds	r1, #1
 8025528:	b2c9      	uxtb	r1, r1
 802552a:	2908      	cmp	r1, #8
 802552c:	9104      	str	r1, [sp, #16]
 802552e:	9905      	ldr	r1, [sp, #20]
 8025530:	b2db      	uxtb	r3, r3
 8025532:	bf03      	ittte	eq
 8025534:	3102      	addeq	r1, #2
 8025536:	9105      	streq	r1, [sp, #20]
 8025538:	2100      	moveq	r1, #0
 802553a:	3101      	addne	r1, #1
 802553c:	bf14      	ite	ne
 802553e:	9105      	strne	r1, [sp, #20]
 8025540:	9104      	streq	r1, [sp, #16]
 8025542:	4313      	orrs	r3, r2
 8025544:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025546:	b29a      	uxth	r2, r3
 8025548:	4291      	cmp	r1, r2
 802554a:	d30a      	bcc.n	8025562 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 802554c:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8025550:	2301      	movs	r3, #1
 8025552:	9907      	ldr	r1, [sp, #28]
 8025554:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8025558:	d30f      	bcc.n	802557a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802555a:	2100      	movs	r1, #0
 802555c:	9301      	str	r3, [sp, #4]
 802555e:	9103      	str	r1, [sp, #12]
 8025560:	e032      	b.n	80255c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8025562:	9b07      	ldr	r3, [sp, #28]
 8025564:	429a      	cmp	r2, r3
 8025566:	d318      	bcc.n	802559a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8025568:	9b01      	ldr	r3, [sp, #4]
 802556a:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 802556e:	445b      	add	r3, fp
 8025570:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8025574:	9b01      	ldr	r3, [sp, #4]
 8025576:	3301      	adds	r3, #1
 8025578:	b29b      	uxth	r3, r3
 802557a:	9907      	ldr	r1, [sp, #28]
 802557c:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 8025580:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8025584:	7108      	strb	r0, [r1, #4]
 8025586:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8025588:	80c8      	strh	r0, [r1, #6]
 802558a:	9801      	ldr	r0, [sp, #4]
 802558c:	3001      	adds	r0, #1
 802558e:	7148      	strb	r0, [r1, #5]
 8025590:	9907      	ldr	r1, [sp, #28]
 8025592:	3101      	adds	r1, #1
 8025594:	b289      	uxth	r1, r1
 8025596:	9107      	str	r1, [sp, #28]
 8025598:	e7df      	b.n	802555a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 802559a:	4611      	mov	r1, r2
 802559c:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80255a0:	795b      	ldrb	r3, [r3, #5]
 80255a2:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 80255a6:	4458      	add	r0, fp
 80255a8:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80255aa:	4406      	add	r6, r0
 80255ac:	2e00      	cmp	r6, #0
 80255ae:	dd06      	ble.n	80255be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 80255b0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80255b4:	790e      	ldrb	r6, [r1, #4]
 80255b6:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80255ba:	88c9      	ldrh	r1, [r1, #6]
 80255bc:	e7f4      	b.n	80255a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 80255be:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80255c2:	b29b      	uxth	r3, r3
 80255c4:	e7c5      	b.n	8025552 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 80255c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80255c8:	4621      	mov	r1, r4
 80255ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80255cc:	469e      	mov	lr, r3
 80255ce:	e78f      	b.n	80254f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 80255d0:	9a03      	ldr	r2, [sp, #12]
 80255d2:	ebae 0305 	sub.w	r3, lr, r5
 80255d6:	442a      	add	r2, r5
 80255d8:	b292      	uxth	r2, r2
 80255da:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80255de:	b29b      	uxth	r3, r3
 80255e0:	9203      	str	r2, [sp, #12]
 80255e2:	2500      	movs	r5, #0
 80255e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80255e6:	4542      	cmp	r2, r8
 80255e8:	d88e      	bhi.n	8025508 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 80255ea:	4621      	mov	r1, r4
 80255ec:	e74e      	b.n	802548c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80255ee:	458e      	cmp	lr, r1
 80255f0:	bf2c      	ite	cs
 80255f2:	462c      	movcs	r4, r5
 80255f4:	462b      	movcc	r3, r5
 80255f6:	f04f 0900 	mov.w	r9, #0
 80255fa:	bf29      	itett	cs
 80255fc:	ebae 0301 	subcs.w	r3, lr, r1
 8025600:	eba1 040e 	subcc.w	r4, r1, lr
 8025604:	b29b      	uxthcs	r3, r3
 8025606:	910c      	strcs	r1, [sp, #48]	@ 0x30
 8025608:	bf3c      	itt	cc
 802560a:	b2a4      	uxthcc	r4, r4
 802560c:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8025610:	9a03      	ldr	r2, [sp, #12]
 8025612:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025614:	444a      	add	r2, r9
 8025616:	4548      	cmp	r0, r9
 8025618:	b292      	uxth	r2, r2
 802561a:	d075      	beq.n	8025708 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 802561c:	2004      	movs	r0, #4
 802561e:	4605      	mov	r5, r0
 8025620:	445a      	add	r2, fp
 8025622:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8025624:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8025628:	fb15 0202 	smlabb	r2, r5, r2, r0
 802562c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802562e:	5880      	ldr	r0, [r0, r2]
 8025630:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8025634:	d014      	beq.n	8025660 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 8025636:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802563a:	ea4f 2510 	mov.w	r5, r0, lsr #8
 802563e:	d112      	bne.n	8025666 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8025640:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025642:	2aff      	cmp	r2, #255	@ 0xff
 8025644:	d10f      	bne.n	8025666 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8025646:	0942      	lsrs	r2, r0, #5
 8025648:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 802564c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025650:	f025 0507 	bic.w	r5, r5, #7
 8025654:	4315      	orrs	r5, r2
 8025656:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802565a:	4305      	orrs	r5, r0
 802565c:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8025660:	f109 0901 	add.w	r9, r9, #1
 8025664:	e7d4      	b.n	8025610 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 8025666:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 802566a:	b2ed      	uxtb	r5, r5
 802566c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8025670:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8025674:	9215      	str	r2, [sp, #84]	@ 0x54
 8025676:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025678:	f3c0 4607 	ubfx	r6, r0, #16, #8
 802567c:	fb02 fa0a 	mul.w	sl, r2, sl
 8025680:	f10a 0201 	add.w	r2, sl, #1
 8025684:	eb02 222a 	add.w	r2, r2, sl, asr #8
 8025688:	1212      	asrs	r2, r2, #8
 802568a:	fa1f fa82 	uxth.w	sl, r2
 802568e:	43d2      	mvns	r2, r2
 8025690:	b2c0      	uxtb	r0, r0
 8025692:	fb16 f60a 	smulbb	r6, r6, sl
 8025696:	fb10 f00a 	smulbb	r0, r0, sl
 802569a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802569e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80256a2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80256a6:	fa5f fc8c 	uxtb.w	ip, ip
 80256aa:	b2d2      	uxtb	r2, r2
 80256ac:	fb15 f50a 	smulbb	r5, r5, sl
 80256b0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80256b4:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80256b8:	fb07 6702 	mla	r7, r7, r2, r6
 80256bc:	fb0c 0002 	mla	r0, ip, r2, r0
 80256c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80256c2:	b2bf      	uxth	r7, r7
 80256c4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80256c8:	fb06 5602 	mla	r6, r6, r2, r5
 80256cc:	b280      	uxth	r0, r0
 80256ce:	1c7a      	adds	r2, r7, #1
 80256d0:	1c45      	adds	r5, r0, #1
 80256d2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80256d6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80256da:	b2b6      	uxth	r6, r6
 80256dc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80256e0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80256e4:	432f      	orrs	r7, r5
 80256e6:	1c75      	adds	r5, r6, #1
 80256e8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80256ec:	096d      	lsrs	r5, r5, #5
 80256ee:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80256f2:	432f      	orrs	r7, r5
 80256f4:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 80256f8:	e7b2      	b.n	8025660 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 80256fa:	bf00      	nop
 80256fc:	20011ffc 	.word	0x20011ffc
 8025700:	20011ff6 	.word	0x20011ff6
 8025704:	fffff7fb 	.word	0xfffff7fb
 8025708:	9203      	str	r2, [sp, #12]
 802570a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802570c:	458e      	cmp	lr, r1
 802570e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8025712:	f4ff af66 	bcc.w	80255e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 8025716:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025718:	9906      	ldr	r1, [sp, #24]
 802571a:	8812      	ldrh	r2, [r2, #0]
 802571c:	1a52      	subs	r2, r2, r1
 802571e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8025722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025724:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8025726:	3201      	adds	r2, #1
 8025728:	428a      	cmp	r2, r1
 802572a:	9209      	str	r2, [sp, #36]	@ 0x24
 802572c:	d110      	bne.n	8025750 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 802572e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8025732:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8025736:	9b06      	ldr	r3, [sp, #24]
 8025738:	eba5 0509 	sub.w	r5, r5, r9
 802573c:	b2ad      	uxth	r5, r5
 802573e:	2d00      	cmp	r5, #0
 8025740:	bf0c      	ite	eq
 8025742:	4619      	moveq	r1, r3
 8025744:	2100      	movne	r1, #0
 8025746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025748:	b289      	uxth	r1, r1
 802574a:	3301      	adds	r3, #1
 802574c:	930d      	str	r3, [sp, #52]	@ 0x34
 802574e:	e694      	b.n	802547a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8025750:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8025754:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8025758:	1b2d      	subs	r5, r5, r4
 802575a:	b2ad      	uxth	r5, r5
 802575c:	2d00      	cmp	r5, #0
 802575e:	bf18      	it	ne
 8025760:	2400      	movne	r4, #0
 8025762:	e73f      	b.n	80255e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 8025764:	4b03      	ldr	r3, [pc, #12]	@ (8025774 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 8025766:	6818      	ldr	r0, [r3, #0]
 8025768:	6803      	ldr	r3, [r0, #0]
 802576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802576c:	4798      	blx	r3
 802576e:	b01d      	add	sp, #116	@ 0x74
 8025770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025774:	20011ffc 	.word	0x20011ffc

08025778 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8025778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802577c:	b09f      	sub	sp, #124	@ 0x7c
 802577e:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8025782:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 8025786:	461d      	mov	r5, r3
 8025788:	4604      	mov	r4, r0
 802578a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802578c:	920a      	str	r2, [sp, #40]	@ 0x28
 802578e:	2a00      	cmp	r2, #0
 8025790:	f000 81fc 	beq.w	8025b8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 8025794:	6828      	ldr	r0, [r5, #0]
 8025796:	6869      	ldr	r1, [r5, #4]
 8025798:	aa1a      	add	r2, sp, #104	@ 0x68
 802579a:	c203      	stmia	r2!, {r0, r1}
 802579c:	6818      	ldr	r0, [r3, #0]
 802579e:	6859      	ldr	r1, [r3, #4]
 80257a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80257a2:	c203      	stmia	r2!, {r0, r1}
 80257a4:	a81a      	add	r0, sp, #104	@ 0x68
 80257a6:	f7f8 f891 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80257aa:	4629      	mov	r1, r5
 80257ac:	a81c      	add	r0, sp, #112	@ 0x70
 80257ae:	f7f8 f8b5 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80257b2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80257b6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80257ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80257be:	bfdd      	ittte	le
 80257c0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80257c4:	b29a      	uxthle	r2, r3
 80257c6:	fb91 f2f2 	sdivle	r2, r1, r2
 80257ca:	2201      	movgt	r2, #1
 80257cc:	9201      	str	r2, [sp, #4]
 80257ce:	9801      	ldr	r0, [sp, #4]
 80257d0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80257d4:	9901      	ldr	r1, [sp, #4]
 80257d6:	fb92 f0f0 	sdiv	r0, r2, r0
 80257da:	b280      	uxth	r0, r0
 80257dc:	9010      	str	r0, [sp, #64]	@ 0x40
 80257de:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80257e0:	9801      	ldr	r0, [sp, #4]
 80257e2:	440e      	add	r6, r1
 80257e4:	fb05 2510 	mls	r5, r5, r0, r2
 80257e8:	fb15 f503 	smulbb	r5, r5, r3
 80257ec:	3e01      	subs	r6, #1
 80257ee:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80257f2:	fb96 f6f1 	sdiv	r6, r6, r1
 80257f6:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80257fa:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 80257fe:	440d      	add	r5, r1
 8025800:	4419      	add	r1, r3
 8025802:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8025806:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 802580a:	441a      	add	r2, r3
 802580c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8025810:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8025814:	9304      	str	r3, [sp, #16]
 8025816:	4b96      	ldr	r3, [pc, #600]	@ (8025a70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8025818:	3601      	adds	r6, #1
 802581a:	6818      	ldr	r0, [r3, #0]
 802581c:	b2b6      	uxth	r6, r6
 802581e:	6803      	ldr	r3, [r0, #0]
 8025820:	b2ad      	uxth	r5, r5
 8025822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025824:	4798      	blx	r3
 8025826:	4b93      	ldr	r3, [pc, #588]	@ (8025a74 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8025828:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 802582c:	881a      	ldrh	r2, [r3, #0]
 802582e:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8025832:	4357      	muls	r7, r2
 8025834:	fb02 c101 	mla	r1, r2, r1, ip
 8025838:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 802583c:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8025840:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025842:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025844:	2d00      	cmp	r5, #0
 8025846:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802584a:	f106 0204 	add.w	r2, r6, #4
 802584e:	9206      	str	r2, [sp, #24]
 8025850:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025852:	bf18      	it	ne
 8025854:	2100      	movne	r1, #0
 8025856:	ea6f 0202 	mvn.w	r2, r2
 802585a:	b2d2      	uxtb	r2, r2
 802585c:	9215      	str	r2, [sp, #84]	@ 0x54
 802585e:	9a04      	ldr	r2, [sp, #16]
 8025860:	9318      	str	r3, [sp, #96]	@ 0x60
 8025862:	bf08      	it	eq
 8025864:	4611      	moveq	r1, r2
 8025866:	2200      	movs	r2, #0
 8025868:	4b83      	ldr	r3, [pc, #524]	@ (8025a78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 802586a:	b289      	uxth	r1, r1
 802586c:	1b1b      	subs	r3, r3, r4
 802586e:	920d      	str	r2, [sp, #52]	@ 0x34
 8025870:	9319      	str	r3, [sp, #100]	@ 0x64
 8025872:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025876:	fa12 f383 	uxtah	r3, r2, r3
 802587a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802587c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025880:	3304      	adds	r3, #4
 8025882:	9307      	str	r3, [sp, #28]
 8025884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025886:	455b      	cmp	r3, fp
 8025888:	f240 817b 	bls.w	8025b82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 802588c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8025890:	f04f 0801 	mov.w	r8, #1
 8025894:	fbb5 f3f3 	udiv	r3, r5, r3
 8025898:	9a01      	ldr	r2, [sp, #4]
 802589a:	9807      	ldr	r0, [sp, #28]
 802589c:	1ad3      	subs	r3, r2, r3
 802589e:	b29b      	uxth	r3, r3
 80258a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80258a2:	9b07      	ldr	r3, [sp, #28]
 80258a4:	7800      	ldrb	r0, [r0, #0]
 80258a6:	785a      	ldrb	r2, [r3, #1]
 80258a8:	789b      	ldrb	r3, [r3, #2]
 80258aa:	9011      	str	r0, [sp, #68]	@ 0x44
 80258ac:	021b      	lsls	r3, r3, #8
 80258ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80258b2:	9a07      	ldr	r2, [sp, #28]
 80258b4:	3001      	adds	r0, #1
 80258b6:	78d2      	ldrb	r2, [r2, #3]
 80258b8:	9005      	str	r0, [sp, #20]
 80258ba:	4313      	orrs	r3, r2
 80258bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80258be:	46c4      	mov	ip, r8
 80258c0:	441a      	add	r2, r3
 80258c2:	1c50      	adds	r0, r2, #1
 80258c4:	9003      	str	r0, [sp, #12]
 80258c6:	7852      	ldrb	r2, [r2, #1]
 80258c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80258ca:	0212      	lsls	r2, r2, #8
 80258cc:	5cc3      	ldrb	r3, [r0, r3]
 80258ce:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80258d2:	431a      	orrs	r2, r3
 80258d4:	b293      	uxth	r3, r2
 80258d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80258d8:	2300      	movs	r3, #0
 80258da:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80258de:	9308      	str	r3, [sp, #32]
 80258e0:	461a      	mov	r2, r3
 80258e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80258e6:	f8cd 8008 	str.w	r8, [sp, #8]
 80258ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80258ec:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80258f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80258f2:	2d00      	cmp	r5, #0
 80258f4:	d07c      	beq.n	80259f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80258f6:	45ac      	cmp	ip, r5
 80258f8:	d26c      	bcs.n	80259d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80258fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80258fc:	eba5 050c 	sub.w	r5, r5, ip
 8025900:	455b      	cmp	r3, fp
 8025902:	b2ad      	uxth	r5, r5
 8025904:	4608      	mov	r0, r1
 8025906:	d802      	bhi.n	802590e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8025908:	e070      	b.n	80259ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 802590a:	2b00      	cmp	r3, #0
 802590c:	d15c      	bne.n	80259c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802590e:	9b03      	ldr	r3, [sp, #12]
 8025910:	9a02      	ldr	r2, [sp, #8]
 8025912:	785b      	ldrb	r3, [r3, #1]
 8025914:	f1c2 0207 	rsb	r2, r2, #7
 8025918:	4093      	lsls	r3, r2
 802591a:	005b      	lsls	r3, r3, #1
 802591c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8025920:	9b03      	ldr	r3, [sp, #12]
 8025922:	9902      	ldr	r1, [sp, #8]
 8025924:	781b      	ldrb	r3, [r3, #0]
 8025926:	410b      	asrs	r3, r1
 8025928:	3101      	adds	r1, #1
 802592a:	b2c9      	uxtb	r1, r1
 802592c:	2908      	cmp	r1, #8
 802592e:	9102      	str	r1, [sp, #8]
 8025930:	9903      	ldr	r1, [sp, #12]
 8025932:	b2db      	uxtb	r3, r3
 8025934:	bf03      	ittte	eq
 8025936:	3102      	addeq	r1, #2
 8025938:	9103      	streq	r1, [sp, #12]
 802593a:	2100      	moveq	r1, #0
 802593c:	3101      	addne	r1, #1
 802593e:	bf14      	ite	ne
 8025940:	9103      	strne	r1, [sp, #12]
 8025942:	9102      	streq	r1, [sp, #8]
 8025944:	4313      	orrs	r3, r2
 8025946:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025948:	b29a      	uxth	r2, r3
 802594a:	4291      	cmp	r1, r2
 802594c:	d30a      	bcc.n	8025964 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 802594e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8025952:	2301      	movs	r3, #1
 8025954:	9905      	ldr	r1, [sp, #20]
 8025956:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802595a:	d30f      	bcc.n	802597c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 802595c:	2100      	movs	r1, #0
 802595e:	4698      	mov	r8, r3
 8025960:	9100      	str	r1, [sp, #0]
 8025962:	e032      	b.n	80259ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8025964:	9b05      	ldr	r3, [sp, #20]
 8025966:	429a      	cmp	r2, r3
 8025968:	d318      	bcc.n	802599c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 802596a:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 802596e:	eb04 0308 	add.w	r3, r4, r8
 8025972:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8025976:	f108 0301 	add.w	r3, r8, #1
 802597a:	b29b      	uxth	r3, r3
 802597c:	9905      	ldr	r1, [sp, #20]
 802597e:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8025982:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8025986:	710e      	strb	r6, [r1, #4]
 8025988:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802598a:	80ce      	strh	r6, [r1, #6]
 802598c:	f108 0601 	add.w	r6, r8, #1
 8025990:	714e      	strb	r6, [r1, #5]
 8025992:	9905      	ldr	r1, [sp, #20]
 8025994:	3101      	adds	r1, #1
 8025996:	b289      	uxth	r1, r1
 8025998:	9105      	str	r1, [sp, #20]
 802599a:	e7df      	b.n	802595c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 802599c:	4611      	mov	r1, r2
 802599e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80259a2:	795b      	ldrb	r3, [r3, #5]
 80259a4:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80259a8:	4426      	add	r6, r4
 80259aa:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80259ac:	4437      	add	r7, r6
 80259ae:	2f00      	cmp	r7, #0
 80259b0:	dd06      	ble.n	80259c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 80259b2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80259b6:	790f      	ldrb	r7, [r1, #4]
 80259b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80259bc:	88c9      	ldrh	r1, [r1, #6]
 80259be:	e7f4      	b.n	80259aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 80259c0:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80259c4:	b29b      	uxth	r3, r3
 80259c6:	e7c5      	b.n	8025954 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 80259c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80259ca:	920c      	str	r2, [sp, #48]	@ 0x30
 80259cc:	4601      	mov	r1, r0
 80259ce:	9a00      	ldr	r2, [sp, #0]
 80259d0:	469c      	mov	ip, r3
 80259d2:	e78e      	b.n	80258f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80259d4:	1957      	adds	r7, r2, r5
 80259d6:	ebac 0305 	sub.w	r3, ip, r5
 80259da:	b2ba      	uxth	r2, r7
 80259dc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80259e0:	b29b      	uxth	r3, r3
 80259e2:	9200      	str	r2, [sp, #0]
 80259e4:	2500      	movs	r5, #0
 80259e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80259e8:	455a      	cmp	r2, fp
 80259ea:	d88e      	bhi.n	802590a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80259ec:	4601      	mov	r1, r0
 80259ee:	e749      	b.n	8025884 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 80259f0:	458c      	cmp	ip, r1
 80259f2:	bf2c      	ite	cs
 80259f4:	4628      	movcs	r0, r5
 80259f6:	462b      	movcc	r3, r5
 80259f8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80259fa:	bf27      	ittee	cs
 80259fc:	ebac 0301 	subcs.w	r3, ip, r1
 8025a00:	9109      	strcs	r1, [sp, #36]	@ 0x24
 8025a02:	eba1 000c 	subcc.w	r0, r1, ip
 8025a06:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8025a0a:	bf2c      	ite	cs
 8025a0c:	b29b      	uxthcs	r3, r3
 8025a0e:	b280      	uxthcc	r0, r0
 8025a10:	2dff      	cmp	r5, #255	@ 0xff
 8025a12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8025a14:	eb02 0705 	add.w	r7, r2, r5
 8025a18:	b2bd      	uxth	r5, r7
 8025a1a:	9500      	str	r5, [sp, #0]
 8025a1c:	d12e      	bne.n	8025a7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 8025a1e:	465e      	mov	r6, fp
 8025a20:	9d00      	ldr	r5, [sp, #0]
 8025a22:	42aa      	cmp	r2, r5
 8025a24:	f040 8083 	bne.w	8025b2e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 8025a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025a2a:	458c      	cmp	ip, r1
 8025a2c:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8025a30:	d3d8      	bcc.n	80259e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8025a32:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025a34:	9904      	ldr	r1, [sp, #16]
 8025a36:	8812      	ldrh	r2, [r2, #0]
 8025a38:	1a52      	subs	r2, r2, r1
 8025a3a:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8025a3e:	9a08      	ldr	r2, [sp, #32]
 8025a40:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8025a42:	3201      	adds	r2, #1
 8025a44:	428a      	cmp	r2, r1
 8025a46:	9208      	str	r2, [sp, #32]
 8025a48:	f040 8091 	bne.w	8025b6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 8025a4c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8025a50:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8025a54:	9b04      	ldr	r3, [sp, #16]
 8025a56:	eba5 050c 	sub.w	r5, r5, ip
 8025a5a:	b2ad      	uxth	r5, r5
 8025a5c:	2d00      	cmp	r5, #0
 8025a5e:	bf0c      	ite	eq
 8025a60:	4619      	moveq	r1, r3
 8025a62:	2100      	movne	r1, #0
 8025a64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025a66:	b289      	uxth	r1, r1
 8025a68:	3301      	adds	r3, #1
 8025a6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025a6c:	e701      	b.n	8025872 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 8025a6e:	bf00      	nop
 8025a70:	20011ffc 	.word	0x20011ffc
 8025a74:	20011ff6 	.word	0x20011ff6
 8025a78:	fffff7fb 	.word	0xfffff7fb
 8025a7c:	46d9      	mov	r9, fp
 8025a7e:	9d00      	ldr	r5, [sp, #0]
 8025a80:	42aa      	cmp	r2, r5
 8025a82:	d0d1      	beq.n	8025a28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 8025a84:	1c55      	adds	r5, r2, #1
 8025a86:	4422      	add	r2, r4
 8025a88:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 8025a8c:	9a06      	ldr	r2, [sp, #24]
 8025a8e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025a92:	4472      	add	r2, lr
 8025a94:	9212      	str	r2, [sp, #72]	@ 0x48
 8025a96:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8025a98:	f8b9 2000 	ldrh.w	r2, [r9]
 8025a9c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8025aa0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8025aa2:	1216      	asrs	r6, r2, #8
 8025aa4:	fb1a fa07 	smulbb	sl, sl, r7
 8025aa8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8025aac:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8025aae:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8025ab2:	fb06 a607 	mla	r6, r6, r7, sl
 8025ab6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8025ab8:	9517      	str	r5, [sp, #92]	@ 0x5c
 8025aba:	f897 a001 	ldrb.w	sl, [r7, #1]
 8025abe:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8025ac0:	10d5      	asrs	r5, r2, #3
 8025ac2:	fb1a fa07 	smulbb	sl, sl, r7
 8025ac6:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8025aca:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8025acc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8025ad0:	fb05 a507 	mla	r5, r5, r7, sl
 8025ad4:	9f06      	ldr	r7, [sp, #24]
 8025ad6:	00d2      	lsls	r2, r2, #3
 8025ad8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025adc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8025ade:	b2d2      	uxtb	r2, r2
 8025ae0:	fb1e fe07 	smulbb	lr, lr, r7
 8025ae4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8025ae6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025aea:	fb02 e207 	mla	r2, r2, r7, lr
 8025aee:	b2b6      	uxth	r6, r6
 8025af0:	b292      	uxth	r2, r2
 8025af2:	b2ad      	uxth	r5, r5
 8025af4:	f106 0a01 	add.w	sl, r6, #1
 8025af8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8025afc:	f102 0e01 	add.w	lr, r2, #1
 8025b00:	f105 0a01 	add.w	sl, r5, #1
 8025b04:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8025b08:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8025b0c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8025b10:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025b14:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025b18:	ea4e 0606 	orr.w	r6, lr, r6
 8025b1c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8025b20:	ea46 060a 	orr.w	r6, r6, sl
 8025b24:	f829 6b02 	strh.w	r6, [r9], #2
 8025b28:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8025b2c:	e7a7      	b.n	8025a7e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 8025b2e:	f102 0e01 	add.w	lr, r2, #1
 8025b32:	4422      	add	r2, r4
 8025b34:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8025b38:	9a06      	ldr	r2, [sp, #24]
 8025b3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025b3e:	eb02 0a05 	add.w	sl, r2, r5
 8025b42:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8025b46:	4a13      	ldr	r2, [pc, #76]	@ (8025b94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 8025b48:	9f06      	ldr	r7, [sp, #24]
 8025b4a:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8025b4e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025b52:	00d2      	lsls	r2, r2, #3
 8025b54:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025b58:	ea49 0202 	orr.w	r2, r9, r2
 8025b5c:	f817 9005 	ldrb.w	r9, [r7, r5]
 8025b60:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8025b64:	f826 2b02 	strh.w	r2, [r6], #2
 8025b68:	fa1f f28e 	uxth.w	r2, lr
 8025b6c:	e758      	b.n	8025a20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 8025b6e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8025b72:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8025b76:	1a2d      	subs	r5, r5, r0
 8025b78:	b2ad      	uxth	r5, r5
 8025b7a:	2d00      	cmp	r5, #0
 8025b7c:	bf18      	it	ne
 8025b7e:	2000      	movne	r0, #0
 8025b80:	e731      	b.n	80259e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 8025b82:	4b05      	ldr	r3, [pc, #20]	@ (8025b98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 8025b84:	6818      	ldr	r0, [r3, #0]
 8025b86:	6803      	ldr	r3, [r0, #0]
 8025b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025b8a:	4798      	blx	r3
 8025b8c:	b01f      	add	sp, #124	@ 0x7c
 8025b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b92:	bf00      	nop
 8025b94:	fffff800 	.word	0xfffff800
 8025b98:	20011ffc 	.word	0x20011ffc

08025b9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8025b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ba0:	469b      	mov	fp, r3
 8025ba2:	4616      	mov	r6, r2
 8025ba4:	b091      	sub	sp, #68	@ 0x44
 8025ba6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8025baa:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8025bae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8025bb2:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8025bb6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8025bba:	4604      	mov	r4, r0
 8025bbc:	460d      	mov	r5, r1
 8025bbe:	4640      	mov	r0, r8
 8025bc0:	4659      	mov	r1, fp
 8025bc2:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8025bc6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8025bca:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8025bce:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8025bd2:	f7f2 fd85 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 8025bd6:	4631      	mov	r1, r6
 8025bd8:	4640      	mov	r0, r8
 8025bda:	f7f2 fd81 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 8025bde:	4b74      	ldr	r3, [pc, #464]	@ (8025db0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8025be0:	8818      	ldrh	r0, [r3, #0]
 8025be2:	4b74      	ldr	r3, [pc, #464]	@ (8025db4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8025be4:	b202      	sxth	r2, r0
 8025be6:	8819      	ldrh	r1, [r3, #0]
 8025be8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8025bec:	b20e      	sxth	r6, r1
 8025bee:	2b00      	cmp	r3, #0
 8025bf0:	da07      	bge.n	8025c02 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8025bf2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8025bf6:	4463      	add	r3, ip
 8025bf8:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8025bfc:	2300      	movs	r3, #0
 8025bfe:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8025c02:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8025c06:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8025c0a:	1ad2      	subs	r2, r2, r3
 8025c0c:	4594      	cmp	ip, r2
 8025c0e:	bfc4      	itt	gt
 8025c10:	1ac2      	subgt	r2, r0, r3
 8025c12:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8025c16:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8025c1a:	2a00      	cmp	r2, #0
 8025c1c:	da07      	bge.n	8025c2e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8025c1e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8025c22:	4462      	add	r2, ip
 8025c24:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8025c28:	2200      	movs	r2, #0
 8025c2a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8025c2e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8025c32:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8025c36:	eba6 060a 	sub.w	r6, r6, sl
 8025c3a:	42b2      	cmp	r2, r6
 8025c3c:	bfc4      	itt	gt
 8025c3e:	eba1 020a 	subgt.w	r2, r1, sl
 8025c42:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8025c46:	4a5c      	ldr	r2, [pc, #368]	@ (8025db8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8025c48:	7812      	ldrb	r2, [r2, #0]
 8025c4a:	b9a2      	cbnz	r2, 8025c76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8025c4c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8025c50:	4286      	cmp	r6, r0
 8025c52:	4640      	mov	r0, r8
 8025c54:	9303      	str	r3, [sp, #12]
 8025c56:	bf14      	ite	ne
 8025c58:	2600      	movne	r6, #0
 8025c5a:	2601      	moveq	r6, #1
 8025c5c:	f7f2 fd83 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 8025c60:	9b03      	ldr	r3, [sp, #12]
 8025c62:	b160      	cbz	r0, 8025c7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8025c64:	2300      	movs	r3, #0
 8025c66:	8023      	strh	r3, [r4, #0]
 8025c68:	8063      	strh	r3, [r4, #2]
 8025c6a:	80a3      	strh	r3, [r4, #4]
 8025c6c:	4620      	mov	r0, r4
 8025c6e:	80e3      	strh	r3, [r4, #6]
 8025c70:	b011      	add	sp, #68	@ 0x44
 8025c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c76:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8025c7a:	428e      	cmp	r6, r1
 8025c7c:	e7e9      	b.n	8025c52 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8025c7e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8025c82:	a90e      	add	r1, sp, #56	@ 0x38
 8025c84:	9205      	str	r2, [sp, #20]
 8025c86:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8025c8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8025c8c:	9206      	str	r2, [sp, #24]
 8025c8e:	f8bb 2000 	ldrh.w	r2, [fp]
 8025c92:	a80c      	add	r0, sp, #48	@ 0x30
 8025c94:	1a9b      	subs	r3, r3, r2
 8025c96:	b21b      	sxth	r3, r3
 8025c98:	9303      	str	r3, [sp, #12]
 8025c9a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025c9e:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8025ca2:	ebaa 0a03 	sub.w	sl, sl, r3
 8025ca6:	fa0f f38a 	sxth.w	r3, sl
 8025caa:	9304      	str	r3, [sp, #16]
 8025cac:	9b03      	ldr	r3, [sp, #12]
 8025cae:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8025cb2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8025cb6:	9b04      	ldr	r3, [sp, #16]
 8025cb8:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8025dc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8025cbc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8025cc0:	9b05      	ldr	r3, [sp, #20]
 8025cc2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8025cc6:	9b06      	ldr	r3, [sp, #24]
 8025cc8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8025ccc:	f7f7 fe26 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025cd0:	4640      	mov	r0, r8
 8025cd2:	f7f7 fdfb 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025cd6:	a80e      	add	r0, sp, #56	@ 0x38
 8025cd8:	f7f7 fdf8 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025cdc:	4b37      	ldr	r3, [pc, #220]	@ (8025dbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8025cde:	4628      	mov	r0, r5
 8025ce0:	881b      	ldrh	r3, [r3, #0]
 8025ce2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8025ce6:	9307      	str	r3, [sp, #28]
 8025ce8:	682b      	ldr	r3, [r5, #0]
 8025cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025cec:	4798      	blx	r3
 8025cee:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8025cf2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8025cf6:	4681      	mov	r9, r0
 8025cf8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8025cfc:	f8db 0000 	ldr.w	r0, [fp]
 8025d00:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8025d02:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8025d06:	6803      	ldr	r3, [r0, #0]
 8025d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025d0a:	4798      	blx	r3
 8025d0c:	4607      	mov	r7, r0
 8025d0e:	f8db 0000 	ldr.w	r0, [fp]
 8025d12:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8025d16:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8025d1a:	6803      	ldr	r3, [r0, #0]
 8025d1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8025d1e:	9208      	str	r2, [sp, #32]
 8025d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025d22:	4798      	blx	r3
 8025d24:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8025d28:	f010 0f01 	tst.w	r0, #1
 8025d2c:	d012      	beq.n	8025d54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8025d2e:	f8db 0000 	ldr.w	r0, [fp]
 8025d32:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8025d36:	6803      	ldr	r3, [r0, #0]
 8025d38:	9200      	str	r2, [sp, #0]
 8025d3a:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8025d3c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8025d40:	462b      	mov	r3, r5
 8025d42:	47b0      	blx	r6
 8025d44:	9b03      	ldr	r3, [sp, #12]
 8025d46:	8023      	strh	r3, [r4, #0]
 8025d48:	9b04      	ldr	r3, [sp, #16]
 8025d4a:	8063      	strh	r3, [r4, #2]
 8025d4c:	9b05      	ldr	r3, [sp, #20]
 8025d4e:	80a3      	strh	r3, [r4, #4]
 8025d50:	9b06      	ldr	r3, [sp, #24]
 8025d52:	e78b      	b.n	8025c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8025d54:	fb09 f202 	mul.w	r2, r9, r2
 8025d58:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8025d5c:	440f      	add	r7, r1
 8025d5e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8025d62:	b166      	cbz	r6, 8025d7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8025d64:	9a07      	ldr	r2, [sp, #28]
 8025d66:	4592      	cmp	sl, r2
 8025d68:	d109      	bne.n	8025d7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8025d6a:	f8db 0000 	ldr.w	r0, [fp]
 8025d6e:	fb09 f303 	mul.w	r3, r9, r3
 8025d72:	6802      	ldr	r2, [r0, #0]
 8025d74:	4629      	mov	r1, r5
 8025d76:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8025d78:	463a      	mov	r2, r7
 8025d7a:	47b0      	blx	r6
 8025d7c:	e7e2      	b.n	8025d44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8025d7e:	fb0a f303 	mul.w	r3, sl, r3
 8025d82:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8025dc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8025d86:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8025d8a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8025d8e:	4545      	cmp	r5, r8
 8025d90:	d2d8      	bcs.n	8025d44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8025d92:	f8db 0000 	ldr.w	r0, [fp]
 8025d96:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8025d9a:	6802      	ldr	r2, [r0, #0]
 8025d9c:	4629      	mov	r1, r5
 8025d9e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8025da2:	005b      	lsls	r3, r3, #1
 8025da4:	463a      	mov	r2, r7
 8025da6:	47d0      	blx	sl
 8025da8:	444f      	add	r7, r9
 8025daa:	4435      	add	r5, r6
 8025dac:	e7ef      	b.n	8025d8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8025dae:	bf00      	nop
 8025db0:	20011ff0 	.word	0x20011ff0
 8025db4:	20011ff2 	.word	0x20011ff2
 8025db8:	20011ff4 	.word	0x20011ff4
 8025dbc:	20011ff6 	.word	0x20011ff6
 8025dc0:	20011ffc 	.word	0x20011ffc

08025dc4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8025dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025dc6:	4606      	mov	r6, r0
 8025dc8:	b087      	sub	sp, #28
 8025dca:	460c      	mov	r4, r1
 8025dcc:	4617      	mov	r7, r2
 8025dce:	461d      	mov	r5, r3
 8025dd0:	b333      	cbz	r3, 8025e20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8025dd2:	4608      	mov	r0, r1
 8025dd4:	f7f2 fcc7 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 8025dd8:	bb10      	cbnz	r0, 8025e20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8025dda:	6820      	ldr	r0, [r4, #0]
 8025ddc:	6861      	ldr	r1, [r4, #4]
 8025dde:	ab04      	add	r3, sp, #16
 8025de0:	4c1b      	ldr	r4, [pc, #108]	@ (8025e50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8025de2:	c303      	stmia	r3!, {r0, r1}
 8025de4:	a804      	add	r0, sp, #16
 8025de6:	f7f7 fd71 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025dea:	6820      	ldr	r0, [r4, #0]
 8025dec:	6803      	ldr	r3, [r0, #0]
 8025dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025df0:	4798      	blx	r3
 8025df2:	2dff      	cmp	r5, #255	@ 0xff
 8025df4:	d016      	beq.n	8025e24 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8025df6:	f010 0f08 	tst.w	r0, #8
 8025dfa:	6820      	ldr	r0, [r4, #0]
 8025dfc:	d015      	beq.n	8025e2a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8025dfe:	2400      	movs	r4, #0
 8025e00:	6801      	ldr	r1, [r0, #0]
 8025e02:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8025e06:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8025e0a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8025e0e:	9401      	str	r4, [sp, #4]
 8025e10:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8025e14:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8025e18:	9400      	str	r4, [sp, #0]
 8025e1a:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8025e1c:	4639      	mov	r1, r7
 8025e1e:	47a0      	blx	r4
 8025e20:	b007      	add	sp, #28
 8025e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025e24:	f010 0f02 	tst.w	r0, #2
 8025e28:	e7e7      	b.n	8025dfa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8025e2a:	6803      	ldr	r3, [r0, #0]
 8025e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025e2e:	4798      	blx	r3
 8025e30:	4b08      	ldr	r3, [pc, #32]	@ (8025e54 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8025e32:	4601      	mov	r1, r0
 8025e34:	881a      	ldrh	r2, [r3, #0]
 8025e36:	e9cd 7500 	strd	r7, r5, [sp]
 8025e3a:	6833      	ldr	r3, [r6, #0]
 8025e3c:	4630      	mov	r0, r6
 8025e3e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8025e40:	ab04      	add	r3, sp, #16
 8025e42:	47a8      	blx	r5
 8025e44:	6820      	ldr	r0, [r4, #0]
 8025e46:	6803      	ldr	r3, [r0, #0]
 8025e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025e4a:	4798      	blx	r3
 8025e4c:	e7e8      	b.n	8025e20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8025e4e:	bf00      	nop
 8025e50:	20011ffc 	.word	0x20011ffc
 8025e54:	20011ff6 	.word	0x20011ff6

08025e58 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8025e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e5c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8025e60:	4688      	mov	r8, r1
 8025e62:	4614      	mov	r4, r2
 8025e64:	461d      	mov	r5, r3
 8025e66:	9e08      	ldr	r6, [sp, #32]
 8025e68:	2f00      	cmp	r7, #0
 8025e6a:	f000 80a9 	beq.w	8025fc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8025e6e:	4618      	mov	r0, r3
 8025e70:	f7f2 fc79 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 8025e74:	2800      	cmp	r0, #0
 8025e76:	f040 80a3 	bne.w	8025fc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8025e7a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8025e7e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8025e82:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8025e86:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8025e8a:	fb04 1303 	mla	r3, r4, r3, r1
 8025e8e:	4365      	muls	r5, r4
 8025e90:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8025e94:	2fff      	cmp	r7, #255	@ 0xff
 8025e96:	eba4 0200 	sub.w	r2, r4, r0
 8025e9a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8025e9e:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8025ea2:	d04a      	beq.n	8025f3a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8025ea4:	b2bc      	uxth	r4, r7
 8025ea6:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8025eaa:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8025eae:	fa5f f788 	uxtb.w	r7, r8
 8025eb2:	b2f3      	uxtb	r3, r6
 8025eb4:	fb0e fe04 	mul.w	lr, lr, r4
 8025eb8:	4367      	muls	r7, r4
 8025eba:	4363      	muls	r3, r4
 8025ebc:	0040      	lsls	r0, r0, #1
 8025ebe:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8025ec2:	fa1f fc8c 	uxth.w	ip, ip
 8025ec6:	42a9      	cmp	r1, r5
 8025ec8:	d27a      	bcs.n	8025fc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8025eca:	eb01 0900 	add.w	r9, r1, r0
 8025ece:	4549      	cmp	r1, r9
 8025ed0:	d231      	bcs.n	8025f36 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8025ed2:	880a      	ldrh	r2, [r1, #0]
 8025ed4:	1214      	asrs	r4, r2, #8
 8025ed6:	10d6      	asrs	r6, r2, #3
 8025ed8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8025edc:	00d2      	lsls	r2, r2, #3
 8025ede:	b2d2      	uxtb	r2, r2
 8025ee0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025ee4:	fb14 f40c 	smulbb	r4, r4, ip
 8025ee8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025eec:	fb12 f20c 	smulbb	r2, r2, ip
 8025ef0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8025ef4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8025ef8:	4474      	add	r4, lr
 8025efa:	fb16 f60c 	smulbb	r6, r6, ip
 8025efe:	b2a4      	uxth	r4, r4
 8025f00:	441a      	add	r2, r3
 8025f02:	b292      	uxth	r2, r2
 8025f04:	f104 0a01 	add.w	sl, r4, #1
 8025f08:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8025f0c:	f102 0a01 	add.w	sl, r2, #1
 8025f10:	443e      	add	r6, r7
 8025f12:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8025f16:	b2b6      	uxth	r6, r6
 8025f18:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8025f1c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025f20:	4322      	orrs	r2, r4
 8025f22:	1c74      	adds	r4, r6, #1
 8025f24:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8025f28:	0976      	lsrs	r6, r6, #5
 8025f2a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8025f2e:	4332      	orrs	r2, r6
 8025f30:	f821 2b02 	strh.w	r2, [r1], #2
 8025f34:	e7cb      	b.n	8025ece <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8025f36:	4441      	add	r1, r8
 8025f38:	e7c5      	b.n	8025ec6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8025f3a:	4f22      	ldr	r7, [pc, #136]	@ (8025fc4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8025f3c:	0973      	lsrs	r3, r6, #5
 8025f3e:	ea08 0707 	and.w	r7, r8, r7
 8025f42:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025f46:	433b      	orrs	r3, r7
 8025f48:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8025f4c:	4333      	orrs	r3, r6
 8025f4e:	07e7      	lsls	r7, r4, #31
 8025f50:	b29b      	uxth	r3, r3
 8025f52:	d50b      	bpl.n	8025f6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8025f54:	0040      	lsls	r0, r0, #1
 8025f56:	0052      	lsls	r2, r2, #1
 8025f58:	42a9      	cmp	r1, r5
 8025f5a:	d231      	bcs.n	8025fc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8025f5c:	180c      	adds	r4, r1, r0
 8025f5e:	42a1      	cmp	r1, r4
 8025f60:	d202      	bcs.n	8025f68 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8025f62:	f821 3b02 	strh.w	r3, [r1], #2
 8025f66:	e7fa      	b.n	8025f5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8025f68:	4411      	add	r1, r2
 8025f6a:	e7f5      	b.n	8025f58 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8025f6c:	078e      	lsls	r6, r1, #30
 8025f6e:	d008      	beq.n	8025f82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8025f70:	460a      	mov	r2, r1
 8025f72:	0066      	lsls	r6, r4, #1
 8025f74:	42aa      	cmp	r2, r5
 8025f76:	d202      	bcs.n	8025f7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8025f78:	8013      	strh	r3, [r2, #0]
 8025f7a:	4432      	add	r2, r6
 8025f7c:	e7fa      	b.n	8025f74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8025f7e:	3102      	adds	r1, #2
 8025f80:	3801      	subs	r0, #1
 8025f82:	07c2      	lsls	r2, r0, #31
 8025f84:	d50b      	bpl.n	8025f9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8025f86:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8025f8a:	3a01      	subs	r2, #1
 8025f8c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8025f90:	0066      	lsls	r6, r4, #1
 8025f92:	42aa      	cmp	r2, r5
 8025f94:	d202      	bcs.n	8025f9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8025f96:	8013      	strh	r3, [r2, #0]
 8025f98:	4432      	add	r2, r6
 8025f9a:	e7fa      	b.n	8025f92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8025f9c:	3801      	subs	r0, #1
 8025f9e:	b178      	cbz	r0, 8025fc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8025fa0:	1040      	asrs	r0, r0, #1
 8025fa2:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8025fa6:	0080      	lsls	r0, r0, #2
 8025fa8:	0064      	lsls	r4, r4, #1
 8025faa:	42a9      	cmp	r1, r5
 8025fac:	d208      	bcs.n	8025fc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8025fae:	460a      	mov	r2, r1
 8025fb0:	180e      	adds	r6, r1, r0
 8025fb2:	42b2      	cmp	r2, r6
 8025fb4:	d202      	bcs.n	8025fbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8025fb6:	f842 3b04 	str.w	r3, [r2], #4
 8025fba:	e7fa      	b.n	8025fb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8025fbc:	4421      	add	r1, r4
 8025fbe:	e7f4      	b.n	8025faa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8025fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025fc4:	00fff800 	.word	0x00fff800

08025fc8 <_ZN8touchgfx8LCD16bppC1Ev>:
 8025fc8:	2200      	movs	r2, #0
 8025fca:	4912      	ldr	r1, [pc, #72]	@ (8026014 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8025fcc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8025fd0:	6001      	str	r1, [r0, #0]
 8025fd2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025fd6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8025fda:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8025fde:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8025fe2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8025fe6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8025fea:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8025fee:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8025ff2:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8025ff6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8025ffa:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8025ffe:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8026002:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8026006:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 802600a:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 802600e:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8026012:	4770      	bx	lr
 8026014:	08033b98 	.word	0x08033b98

08026018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8026018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802601c:	460d      	mov	r5, r1
 802601e:	4604      	mov	r4, r0
 8026020:	4699      	mov	r9, r3
 8026022:	b08d      	sub	sp, #52	@ 0x34
 8026024:	6808      	ldr	r0, [r1, #0]
 8026026:	6849      	ldr	r1, [r1, #4]
 8026028:	ab08      	add	r3, sp, #32
 802602a:	c303      	stmia	r3!, {r0, r1}
 802602c:	6810      	ldr	r0, [r2, #0]
 802602e:	6851      	ldr	r1, [r2, #4]
 8026030:	ab0a      	add	r3, sp, #40	@ 0x28
 8026032:	c303      	stmia	r3!, {r0, r1}
 8026034:	a808      	add	r0, sp, #32
 8026036:	f7f7 fc49 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802603a:	4629      	mov	r1, r5
 802603c:	a80a      	add	r0, sp, #40	@ 0x28
 802603e:	f7f7 fc6d 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026042:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8026046:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 802604a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 802604e:	4d63      	ldr	r5, [pc, #396]	@ (80261dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8026050:	fb11 2103 	smlabb	r1, r1, r3, r2
 8026054:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8026058:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 802605c:	6828      	ldr	r0, [r5, #0]
 802605e:	440a      	add	r2, r1
 8026060:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8026064:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8026068:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 802606c:	4413      	add	r3, r2
 802606e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8026072:	6803      	ldr	r3, [r0, #0]
 8026074:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8026078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802607a:	4798      	blx	r3
 802607c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026080:	d119      	bne.n	80260b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8026082:	f010 0f20 	tst.w	r0, #32
 8026086:	6828      	ldr	r0, [r5, #0]
 8026088:	d018      	beq.n	80260bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 802608a:	2500      	movs	r5, #0
 802608c:	6801      	ldr	r1, [r0, #0]
 802608e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8026092:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8026096:	b2b6      	uxth	r6, r6
 8026098:	9502      	str	r5, [sp, #8]
 802609a:	fa1f f588 	uxth.w	r5, r8
 802609e:	9601      	str	r6, [sp, #4]
 80260a0:	9500      	str	r5, [sp, #0]
 80260a2:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80260a4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80260a8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80260ac:	4621      	mov	r1, r4
 80260ae:	47a8      	blx	r5
 80260b0:	b00d      	add	sp, #52	@ 0x34
 80260b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260b6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80260ba:	e7e4      	b.n	8026086 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80260bc:	6803      	ldr	r3, [r0, #0]
 80260be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80260c0:	4798      	blx	r3
 80260c2:	4947      	ldr	r1, [pc, #284]	@ (80261e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80260c4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80260c8:	468a      	mov	sl, r1
 80260ca:	880b      	ldrh	r3, [r1, #0]
 80260cc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 80260d0:	fb03 5202 	mla	r2, r3, r2, r5
 80260d4:	4373      	muls	r3, r6
 80260d6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80260da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80260de:	9307      	str	r3, [sp, #28]
 80260e0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80260e4:	9306      	str	r3, [sp, #24]
 80260e6:	9b07      	ldr	r3, [sp, #28]
 80260e8:	4298      	cmp	r0, r3
 80260ea:	d270      	bcs.n	80261ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80260ec:	4621      	mov	r1, r4
 80260ee:	9b06      	ldr	r3, [sp, #24]
 80260f0:	eb00 0b03 	add.w	fp, r0, r3
 80260f4:	4558      	cmp	r0, fp
 80260f6:	d25d      	bcs.n	80261b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 80260f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80260fc:	0e23      	lsrs	r3, r4, #24
 80260fe:	d014      	beq.n	802612a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8026100:	2bff      	cmp	r3, #255	@ 0xff
 8026102:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8026106:	d112      	bne.n	802612e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8026108:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802610c:	d10f      	bne.n	802612e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802610e:	0963      	lsrs	r3, r4, #5
 8026110:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8026114:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026118:	f02c 0c07 	bic.w	ip, ip, #7
 802611c:	ea43 0c0c 	orr.w	ip, r3, ip
 8026120:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8026124:	ea4c 0404 	orr.w	r4, ip, r4
 8026128:	8004      	strh	r4, [r0, #0]
 802612a:	3002      	adds	r0, #2
 802612c:	e7e2      	b.n	80260f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802612e:	fb09 f303 	mul.w	r3, r9, r3
 8026132:	1c5a      	adds	r2, r3, #1
 8026134:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8026138:	1212      	asrs	r2, r2, #8
 802613a:	b293      	uxth	r3, r2
 802613c:	43d2      	mvns	r2, r2
 802613e:	8807      	ldrh	r7, [r0, #0]
 8026140:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8026144:	fb1e fe03 	smulbb	lr, lr, r3
 8026148:	123e      	asrs	r6, r7, #8
 802614a:	fa5f fc8c 	uxtb.w	ip, ip
 802614e:	b2e4      	uxtb	r4, r4
 8026150:	fb1c fc03 	smulbb	ip, ip, r3
 8026154:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8026158:	fb14 f403 	smulbb	r4, r4, r3
 802615c:	b2d2      	uxtb	r2, r2
 802615e:	10fd      	asrs	r5, r7, #3
 8026160:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8026164:	00ff      	lsls	r7, r7, #3
 8026166:	fb06 e602 	mla	r6, r6, r2, lr
 802616a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802616e:	b2ff      	uxtb	r7, r7
 8026170:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8026174:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8026178:	fb05 c502 	mla	r5, r5, r2, ip
 802617c:	fb07 4702 	mla	r7, r7, r2, r4
 8026180:	b2b6      	uxth	r6, r6
 8026182:	f106 0e01 	add.w	lr, r6, #1
 8026186:	b2ad      	uxth	r5, r5
 8026188:	b2bf      	uxth	r7, r7
 802618a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802618e:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8026192:	f105 0c01 	add.w	ip, r5, #1
 8026196:	1c7e      	adds	r6, r7, #1
 8026198:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802619c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80261a0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80261a4:	096d      	lsrs	r5, r5, #5
 80261a6:	ea46 060e 	orr.w	r6, r6, lr
 80261aa:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80261ae:	432e      	orrs	r6, r5
 80261b0:	8006      	strh	r6, [r0, #0]
 80261b2:	e7ba      	b.n	802612a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80261b4:	f8ba 3000 	ldrh.w	r3, [sl]
 80261b8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 80261bc:	eba3 0308 	sub.w	r3, r3, r8
 80261c0:	eba4 0408 	sub.w	r4, r4, r8
 80261c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80261c8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80261cc:	e78b      	b.n	80260e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80261ce:	4b03      	ldr	r3, [pc, #12]	@ (80261dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80261d0:	6818      	ldr	r0, [r3, #0]
 80261d2:	6803      	ldr	r3, [r0, #0]
 80261d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80261d6:	4798      	blx	r3
 80261d8:	e76a      	b.n	80260b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80261da:	bf00      	nop
 80261dc:	20011ffc 	.word	0x20011ffc
 80261e0:	20011ff6 	.word	0x20011ff6

080261e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80261e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80261e8:	b085      	sub	sp, #20
 80261ea:	466d      	mov	r5, sp
 80261ec:	4616      	mov	r6, r2
 80261ee:	460c      	mov	r4, r1
 80261f0:	6810      	ldr	r0, [r2, #0]
 80261f2:	6851      	ldr	r1, [r2, #4]
 80261f4:	c503      	stmia	r5!, {r0, r1}
 80261f6:	6818      	ldr	r0, [r3, #0]
 80261f8:	6859      	ldr	r1, [r3, #4]
 80261fa:	c503      	stmia	r5!, {r0, r1}
 80261fc:	4668      	mov	r0, sp
 80261fe:	f7f7 fb65 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026202:	4631      	mov	r1, r6
 8026204:	a802      	add	r0, sp, #8
 8026206:	f7f7 fb89 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802620a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802620e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8026212:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8026216:	4d28      	ldr	r5, [pc, #160]	@ (80262b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8026218:	fb11 2103 	smlabb	r1, r1, r3, r2
 802621c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8026220:	f8bd 1000 	ldrh.w	r1, [sp]
 8026224:	6828      	ldr	r0, [r5, #0]
 8026226:	440a      	add	r2, r1
 8026228:	f8ad 2008 	strh.w	r2, [sp, #8]
 802622c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8026230:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8026234:	4413      	add	r3, r2
 8026236:	f8ad 300a 	strh.w	r3, [sp, #10]
 802623a:	6803      	ldr	r3, [r0, #0]
 802623c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8026240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026242:	4798      	blx	r3
 8026244:	4e1d      	ldr	r6, [pc, #116]	@ (80262bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8026246:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802624a:	8833      	ldrh	r3, [r6, #0]
 802624c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8026250:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80262c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8026254:	fb03 1202 	mla	r2, r3, r2, r1
 8026258:	fb08 f303 	mul.w	r3, r8, r3
 802625c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8026260:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8026264:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8026268:	4298      	cmp	r0, r3
 802626a:	d21d      	bcs.n	80262a8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 802626c:	eb00 080c 	add.w	r8, r0, ip
 8026270:	4540      	cmp	r0, r8
 8026272:	d20f      	bcs.n	8026294 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8026274:	f854 1b04 	ldr.w	r1, [r4], #4
 8026278:	ea4f 1951 	mov.w	r9, r1, lsr #5
 802627c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8026280:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026284:	ea42 0209 	orr.w	r2, r2, r9
 8026288:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802628c:	430a      	orrs	r2, r1
 802628e:	f820 2b02 	strh.w	r2, [r0], #2
 8026292:	e7ed      	b.n	8026270 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8026294:	8832      	ldrh	r2, [r6, #0]
 8026296:	1bd2      	subs	r2, r2, r7
 8026298:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802629c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80262a0:	1bd2      	subs	r2, r2, r7
 80262a2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80262a6:	e7df      	b.n	8026268 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80262a8:	6828      	ldr	r0, [r5, #0]
 80262aa:	6803      	ldr	r3, [r0, #0]
 80262ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80262ae:	4798      	blx	r3
 80262b0:	b005      	add	sp, #20
 80262b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80262b6:	bf00      	nop
 80262b8:	20011ffc 	.word	0x20011ffc
 80262bc:	20011ff6 	.word	0x20011ff6
 80262c0:	fffff800 	.word	0xfffff800

080262c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80262c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80262c8:	460e      	mov	r6, r1
 80262ca:	4604      	mov	r4, r0
 80262cc:	461d      	mov	r5, r3
 80262ce:	b08e      	sub	sp, #56	@ 0x38
 80262d0:	6808      	ldr	r0, [r1, #0]
 80262d2:	6849      	ldr	r1, [r1, #4]
 80262d4:	ab0a      	add	r3, sp, #40	@ 0x28
 80262d6:	c303      	stmia	r3!, {r0, r1}
 80262d8:	6810      	ldr	r0, [r2, #0]
 80262da:	6851      	ldr	r1, [r2, #4]
 80262dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80262de:	c303      	stmia	r3!, {r0, r1}
 80262e0:	a80a      	add	r0, sp, #40	@ 0x28
 80262e2:	f7f7 faf3 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80262e6:	4631      	mov	r1, r6
 80262e8:	a80c      	add	r0, sp, #48	@ 0x30
 80262ea:	f7f7 fb17 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80262ee:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80262f2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80262f6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80262fa:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80264ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80262fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8026302:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026306:	440c      	add	r4, r1
 8026308:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802630c:	f8d8 0000 	ldr.w	r0, [r8]
 8026310:	440a      	add	r2, r1
 8026312:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8026316:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 802631a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 802631e:	4413      	add	r3, r2
 8026320:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8026324:	6803      	ldr	r3, [r0, #0]
 8026326:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802632a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802632c:	4798      	blx	r3
 802632e:	2dff      	cmp	r5, #255	@ 0xff
 8026330:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80264b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8026334:	d124      	bne.n	8026380 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8026336:	f010 0f01 	tst.w	r0, #1
 802633a:	f8d8 0000 	ldr.w	r0, [r8]
 802633e:	d022      	beq.n	8026386 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8026340:	2100      	movs	r1, #0
 8026342:	f04f 0e01 	mov.w	lr, #1
 8026346:	f8d0 c000 	ldr.w	ip, [r0]
 802634a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802634e:	f8cd e018 	str.w	lr, [sp, #24]
 8026352:	f8b9 e000 	ldrh.w	lr, [r9]
 8026356:	b2b6      	uxth	r6, r6
 8026358:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802635c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8026360:	b2bf      	uxth	r7, r7
 8026362:	9102      	str	r1, [sp, #8]
 8026364:	9503      	str	r5, [sp, #12]
 8026366:	9601      	str	r6, [sp, #4]
 8026368:	9700      	str	r7, [sp, #0]
 802636a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 802636e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8026372:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8026376:	4621      	mov	r1, r4
 8026378:	47a8      	blx	r5
 802637a:	b00e      	add	sp, #56	@ 0x38
 802637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026380:	f010 0f04 	tst.w	r0, #4
 8026384:	e7d9      	b.n	802633a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8026386:	6803      	ldr	r3, [r0, #0]
 8026388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802638a:	4798      	blx	r3
 802638c:	f8b9 3000 	ldrh.w	r3, [r9]
 8026390:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8026394:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8026398:	435e      	muls	r6, r3
 802639a:	fb03 1202 	mla	r2, r3, r2, r1
 802639e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80263a2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80263a6:	ebac 0c07 	sub.w	ip, ip, r7
 80263aa:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80263ae:	2dff      	cmp	r5, #255	@ 0xff
 80263b0:	eba3 0707 	sub.w	r7, r3, r7
 80263b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80263b8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80263bc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80263c0:	d049      	beq.n	8026456 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80263c2:	43eb      	mvns	r3, r5
 80263c4:	fa1f f985 	uxth.w	r9, r5
 80263c8:	b2db      	uxtb	r3, r3
 80263ca:	42b0      	cmp	r0, r6
 80263cc:	d266      	bcs.n	802649c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80263ce:	eb00 0a0e 	add.w	sl, r0, lr
 80263d2:	4550      	cmp	r0, sl
 80263d4:	4621      	mov	r1, r4
 80263d6:	f104 0403 	add.w	r4, r4, #3
 80263da:	d25b      	bcs.n	8026494 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80263dc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80263e0:	8802      	ldrh	r2, [r0, #0]
 80263e2:	fb11 f109 	smulbb	r1, r1, r9
 80263e6:	ea4f 2822 	mov.w	r8, r2, asr #8
 80263ea:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80263ee:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80263f2:	fb08 1803 	mla	r8, r8, r3, r1
 80263f6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80263fa:	10d5      	asrs	r5, r2, #3
 80263fc:	fb11 f109 	smulbb	r1, r1, r9
 8026400:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026404:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8026408:	fb05 1503 	mla	r5, r5, r3, r1
 802640c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8026410:	00d2      	lsls	r2, r2, #3
 8026412:	fb11 f109 	smulbb	r1, r1, r9
 8026416:	b2d2      	uxtb	r2, r2
 8026418:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802641c:	fb02 1203 	mla	r2, r2, r3, r1
 8026420:	fa1f f888 	uxth.w	r8, r8
 8026424:	b292      	uxth	r2, r2
 8026426:	f108 0101 	add.w	r1, r8, #1
 802642a:	b2ad      	uxth	r5, r5
 802642c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8026430:	1c51      	adds	r1, r2, #1
 8026432:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026436:	1c69      	adds	r1, r5, #1
 8026438:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802643c:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8026440:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026444:	096d      	lsrs	r5, r5, #5
 8026446:	ea42 0208 	orr.w	r2, r2, r8
 802644a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802644e:	432a      	orrs	r2, r5
 8026450:	f820 2b02 	strh.w	r2, [r0], #2
 8026454:	e7bd      	b.n	80263d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8026456:	4a14      	ldr	r2, [pc, #80]	@ (80264a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8026458:	42b0      	cmp	r0, r6
 802645a:	d21f      	bcs.n	802649c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802645c:	eb00 050e 	add.w	r5, r0, lr
 8026460:	42a8      	cmp	r0, r5
 8026462:	4621      	mov	r1, r4
 8026464:	f104 0403 	add.w	r4, r4, #3
 8026468:	d210      	bcs.n	802648c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802646a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802646e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8026472:	00db      	lsls	r3, r3, #3
 8026474:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8026478:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802647c:	430b      	orrs	r3, r1
 802647e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8026482:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8026486:	f820 3b02 	strh.w	r3, [r0], #2
 802648a:	e7e9      	b.n	8026460 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 802648c:	4438      	add	r0, r7
 802648e:	eb01 040c 	add.w	r4, r1, ip
 8026492:	e7e1      	b.n	8026458 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8026494:	4438      	add	r0, r7
 8026496:	eb01 040c 	add.w	r4, r1, ip
 802649a:	e796      	b.n	80263ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 802649c:	4b03      	ldr	r3, [pc, #12]	@ (80264ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802649e:	6818      	ldr	r0, [r3, #0]
 80264a0:	6803      	ldr	r3, [r0, #0]
 80264a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80264a4:	4798      	blx	r3
 80264a6:	e768      	b.n	802637a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80264a8:	fffff800 	.word	0xfffff800
 80264ac:	20011ffc 	.word	0x20011ffc
 80264b0:	20011ff6 	.word	0x20011ff6

080264b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80264b4:	b4f0      	push	{r4, r5, r6, r7}
 80264b6:	4616      	mov	r6, r2
 80264b8:	2e01      	cmp	r6, #1
 80264ba:	461c      	mov	r4, r3
 80264bc:	460d      	mov	r5, r1
 80264be:	9a04      	ldr	r2, [sp, #16]
 80264c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80264c4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80264c8:	d012      	beq.n	80264f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80264ca:	d303      	bcc.n	80264d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80264cc:	2e02      	cmp	r6, #2
 80264ce:	d00a      	beq.n	80264e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80264d0:	bcf0      	pop	{r4, r5, r6, r7}
 80264d2:	4770      	bx	lr
 80264d4:	6805      	ldr	r5, [r0, #0]
 80264d6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80264da:	68ed      	ldr	r5, [r5, #12]
 80264dc:	4613      	mov	r3, r2
 80264de:	46ac      	mov	ip, r5
 80264e0:	4622      	mov	r2, r4
 80264e2:	bcf0      	pop	{r4, r5, r6, r7}
 80264e4:	4760      	bx	ip
 80264e6:	4621      	mov	r1, r4
 80264e8:	4628      	mov	r0, r5
 80264ea:	bcf0      	pop	{r4, r5, r6, r7}
 80264ec:	f7ff bd94 	b.w	8026018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80264f0:	4621      	mov	r1, r4
 80264f2:	4628      	mov	r0, r5
 80264f4:	bcf0      	pop	{r4, r5, r6, r7}
 80264f6:	f7ff bee5 	b.w	80262c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080264fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80264fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026500:	4616      	mov	r6, r2
 8026502:	4681      	mov	r9, r0
 8026504:	b093      	sub	sp, #76	@ 0x4c
 8026506:	6810      	ldr	r0, [r2, #0]
 8026508:	4688      	mov	r8, r1
 802650a:	6851      	ldr	r1, [r2, #4]
 802650c:	ac0e      	add	r4, sp, #56	@ 0x38
 802650e:	c403      	stmia	r4!, {r0, r1}
 8026510:	6818      	ldr	r0, [r3, #0]
 8026512:	6859      	ldr	r1, [r3, #4]
 8026514:	ac10      	add	r4, sp, #64	@ 0x40
 8026516:	c403      	stmia	r4!, {r0, r1}
 8026518:	a80e      	add	r0, sp, #56	@ 0x38
 802651a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 802651e:	f7f7 f9d5 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026522:	4631      	mov	r1, r6
 8026524:	a810      	add	r0, sp, #64	@ 0x40
 8026526:	f7f7 f9f9 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802652a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802652e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8026532:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8026536:	4e62      	ldr	r6, [pc, #392]	@ (80266c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8026538:	fb11 2103 	smlabb	r1, r1, r3, r2
 802653c:	4489      	add	r9, r1
 802653e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8026542:	6830      	ldr	r0, [r6, #0]
 8026544:	440a      	add	r2, r1
 8026546:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802654a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802654e:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8026552:	4413      	add	r3, r2
 8026554:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8026558:	6803      	ldr	r3, [r0, #0]
 802655a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8026560:	4798      	blx	r3
 8026562:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8026566:	4f57      	ldr	r7, [pc, #348]	@ (80266c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8026568:	6830      	ldr	r0, [r6, #0]
 802656a:	d01d      	beq.n	80265a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802656c:	2200      	movs	r2, #0
 802656e:	6801      	ldr	r1, [r0, #0]
 8026570:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8026574:	220b      	movs	r2, #11
 8026576:	9207      	str	r2, [sp, #28]
 8026578:	883a      	ldrh	r2, [r7, #0]
 802657a:	b2a4      	uxth	r4, r4
 802657c:	9206      	str	r2, [sp, #24]
 802657e:	2201      	movs	r2, #1
 8026580:	e9cd a204 	strd	sl, r2, [sp, #16]
 8026584:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8026588:	b2ad      	uxth	r5, r5
 802658a:	9203      	str	r2, [sp, #12]
 802658c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8026590:	9502      	str	r5, [sp, #8]
 8026592:	9200      	str	r2, [sp, #0]
 8026594:	9401      	str	r4, [sp, #4]
 8026596:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8026598:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802659c:	4642      	mov	r2, r8
 802659e:	4649      	mov	r1, r9
 80265a0:	47a0      	blx	r4
 80265a2:	b013      	add	sp, #76	@ 0x4c
 80265a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265a8:	6803      	ldr	r3, [r0, #0]
 80265aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80265ac:	4798      	blx	r3
 80265ae:	f04f 0e04 	mov.w	lr, #4
 80265b2:	883b      	ldrh	r3, [r7, #0]
 80265b4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80265b8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80265bc:	435d      	muls	r5, r3
 80265be:	fb03 1202 	mla	r2, r3, r2, r1
 80265c2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80265c6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80265ca:	920c      	str	r2, [sp, #48]	@ 0x30
 80265cc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80265d0:	1b12      	subs	r2, r2, r4
 80265d2:	920d      	str	r2, [sp, #52]	@ 0x34
 80265d4:	0062      	lsls	r2, r4, #1
 80265d6:	1b1c      	subs	r4, r3, r4
 80265d8:	0063      	lsls	r3, r4, #1
 80265da:	920a      	str	r2, [sp, #40]	@ 0x28
 80265dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80265de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80265e0:	4298      	cmp	r0, r3
 80265e2:	d266      	bcs.n	80266b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80265e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80265e6:	eb00 0b03 	add.w	fp, r0, r3
 80265ea:	4558      	cmp	r0, fp
 80265ec:	d25c      	bcs.n	80266a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80265ee:	f819 3b01 	ldrb.w	r3, [r9], #1
 80265f2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80265f6:	f858 2003 	ldr.w	r2, [r8, r3]
 80265fa:	0e11      	lsrs	r1, r2, #24
 80265fc:	d012      	beq.n	8026624 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80265fe:	29ff      	cmp	r1, #255	@ 0xff
 8026600:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8026604:	d110      	bne.n	8026628 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8026606:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802660a:	d10d      	bne.n	8026628 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802660c:	0953      	lsrs	r3, r2, #5
 802660e:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8026612:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026616:	f027 0707 	bic.w	r7, r7, #7
 802661a:	431f      	orrs	r7, r3
 802661c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026620:	433a      	orrs	r2, r7
 8026622:	8002      	strh	r2, [r0, #0]
 8026624:	3002      	adds	r0, #2
 8026626:	e7e0      	b.n	80265ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8026628:	fb0a f101 	mul.w	r1, sl, r1
 802662c:	1c4b      	adds	r3, r1, #1
 802662e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8026632:	121b      	asrs	r3, r3, #8
 8026634:	b299      	uxth	r1, r3
 8026636:	43db      	mvns	r3, r3
 8026638:	8806      	ldrh	r6, [r0, #0]
 802663a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802663e:	b2d2      	uxtb	r2, r2
 8026640:	fb1c fc01 	smulbb	ip, ip, r1
 8026644:	fb12 f201 	smulbb	r2, r2, r1
 8026648:	1235      	asrs	r5, r6, #8
 802664a:	10f4      	asrs	r4, r6, #3
 802664c:	00f6      	lsls	r6, r6, #3
 802664e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026652:	b2f6      	uxtb	r6, r6
 8026654:	b2ff      	uxtb	r7, r7
 8026656:	b2db      	uxtb	r3, r3
 8026658:	fb17 f701 	smulbb	r7, r7, r1
 802665c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8026660:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8026664:	fb05 c503 	mla	r5, r5, r3, ip
 8026668:	fb06 2203 	mla	r2, r6, r3, r2
 802666c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8026670:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8026674:	fb04 7403 	mla	r4, r4, r3, r7
 8026678:	b2ad      	uxth	r5, r5
 802667a:	b292      	uxth	r2, r2
 802667c:	f105 0c01 	add.w	ip, r5, #1
 8026680:	1c57      	adds	r7, r2, #1
 8026682:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026686:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802668a:	b2a4      	uxth	r4, r4
 802668c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026690:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026694:	433d      	orrs	r5, r7
 8026696:	1c67      	adds	r7, r4, #1
 8026698:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802669c:	0964      	lsrs	r4, r4, #5
 802669e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80266a2:	4325      	orrs	r5, r4
 80266a4:	8005      	strh	r5, [r0, #0]
 80266a6:	e7bd      	b.n	8026624 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80266a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80266aa:	4418      	add	r0, r3
 80266ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80266ae:	4499      	add	r9, r3
 80266b0:	e795      	b.n	80265de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80266b2:	4b03      	ldr	r3, [pc, #12]	@ (80266c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80266b4:	6818      	ldr	r0, [r3, #0]
 80266b6:	6803      	ldr	r3, [r0, #0]
 80266b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80266ba:	4798      	blx	r3
 80266bc:	e771      	b.n	80265a2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80266be:	bf00      	nop
 80266c0:	20011ffc 	.word	0x20011ffc
 80266c4:	20011ff6 	.word	0x20011ff6

080266c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80266c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266cc:	b087      	sub	sp, #28
 80266ce:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80266d2:	4680      	mov	r8, r0
 80266d4:	460d      	mov	r5, r1
 80266d6:	4614      	mov	r4, r2
 80266d8:	2e00      	cmp	r6, #0
 80266da:	f000 80b9 	beq.w	8026850 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80266de:	6810      	ldr	r0, [r2, #0]
 80266e0:	6851      	ldr	r1, [r2, #4]
 80266e2:	af02      	add	r7, sp, #8
 80266e4:	c703      	stmia	r7!, {r0, r1}
 80266e6:	6818      	ldr	r0, [r3, #0]
 80266e8:	6859      	ldr	r1, [r3, #4]
 80266ea:	af04      	add	r7, sp, #16
 80266ec:	c703      	stmia	r7!, {r0, r1}
 80266ee:	a802      	add	r0, sp, #8
 80266f0:	f7f7 f8ec 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80266f4:	4621      	mov	r1, r4
 80266f6:	a804      	add	r0, sp, #16
 80266f8:	f7f7 f910 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80266fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026700:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026704:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8026708:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802670c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8026710:	eb08 0401 	add.w	r4, r8, r1
 8026714:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8026718:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802671c:	440a      	add	r2, r1
 802671e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8026722:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8026726:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802672a:	4413      	add	r3, r2
 802672c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8026730:	4b49      	ldr	r3, [pc, #292]	@ (8026858 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8026732:	6818      	ldr	r0, [r3, #0]
 8026734:	6803      	ldr	r3, [r0, #0]
 8026736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026738:	4798      	blx	r3
 802673a:	4b48      	ldr	r3, [pc, #288]	@ (802685c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 802673c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8026740:	881a      	ldrh	r2, [r3, #0]
 8026742:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8026746:	2eff      	cmp	r6, #255	@ 0xff
 8026748:	fb02 c101 	mla	r1, r2, r1, ip
 802674c:	fb02 f207 	mul.w	r2, r2, r7
 8026750:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8026754:	f105 0104 	add.w	r1, r5, #4
 8026758:	461d      	mov	r5, r3
 802675a:	d05a      	beq.n	8026812 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802675c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8026760:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8026764:	b2b6      	uxth	r6, r6
 8026766:	fa1f fe8e 	uxth.w	lr, lr
 802676a:	9301      	str	r3, [sp, #4]
 802676c:	4282      	cmp	r2, r0
 802676e:	d96a      	bls.n	8026846 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8026770:	eb00 0b0a 	add.w	fp, r0, sl
 8026774:	4583      	cmp	fp, r0
 8026776:	d940      	bls.n	80267fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8026778:	8805      	ldrh	r5, [r0, #0]
 802677a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802677e:	122f      	asrs	r7, r5, #8
 8026780:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8026784:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8026788:	fb17 f70e 	smulbb	r7, r7, lr
 802678c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8026790:	00ed      	lsls	r5, r5, #3
 8026792:	b2ed      	uxtb	r5, r5
 8026794:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026798:	fb15 f50e 	smulbb	r5, r5, lr
 802679c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80267a0:	fb0c 7c06 	mla	ip, ip, r6, r7
 80267a4:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80267a8:	10df      	asrs	r7, r3, #3
 80267aa:	00db      	lsls	r3, r3, #3
 80267ac:	fb19 f90e 	smulbb	r9, r9, lr
 80267b0:	b2db      	uxtb	r3, r3
 80267b2:	fb03 5306 	mla	r3, r3, r6, r5
 80267b6:	fa1f fc8c 	uxth.w	ip, ip
 80267ba:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80267be:	fb07 9706 	mla	r7, r7, r6, r9
 80267c2:	f10c 0901 	add.w	r9, ip, #1
 80267c6:	b29b      	uxth	r3, r3
 80267c8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80267cc:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80267d0:	f103 0c01 	add.w	ip, r3, #1
 80267d4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80267d8:	b2bf      	uxth	r7, r7
 80267da:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80267de:	ea4c 0c09 	orr.w	ip, ip, r9
 80267e2:	f107 0901 	add.w	r9, r7, #1
 80267e6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80267ea:	097f      	lsrs	r7, r7, #5
 80267ec:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80267f0:	ea4c 0c07 	orr.w	ip, ip, r7
 80267f4:	f820 cb02 	strh.w	ip, [r0], #2
 80267f8:	e7bc      	b.n	8026774 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80267fa:	9b01      	ldr	r3, [sp, #4]
 80267fc:	881b      	ldrh	r3, [r3, #0]
 80267fe:	eba3 0308 	sub.w	r3, r3, r8
 8026802:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8026806:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802680a:	eba3 0308 	sub.w	r3, r3, r8
 802680e:	441c      	add	r4, r3
 8026810:	e7ac      	b.n	802676c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8026812:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8026816:	4282      	cmp	r2, r0
 8026818:	d915      	bls.n	8026846 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802681a:	eb00 060a 	add.w	r6, r0, sl
 802681e:	4286      	cmp	r6, r0
 8026820:	d906      	bls.n	8026830 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8026822:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026826:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802682a:	f820 3b02 	strh.w	r3, [r0], #2
 802682e:	e7f6      	b.n	802681e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8026830:	882b      	ldrh	r3, [r5, #0]
 8026832:	eba3 0308 	sub.w	r3, r3, r8
 8026836:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802683a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802683e:	eba3 0308 	sub.w	r3, r3, r8
 8026842:	441c      	add	r4, r3
 8026844:	e7e7      	b.n	8026816 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8026846:	4b04      	ldr	r3, [pc, #16]	@ (8026858 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8026848:	6818      	ldr	r0, [r3, #0]
 802684a:	6803      	ldr	r3, [r0, #0]
 802684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802684e:	4798      	blx	r3
 8026850:	b007      	add	sp, #28
 8026852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026856:	bf00      	nop
 8026858:	20011ffc 	.word	0x20011ffc
 802685c:	20011ff6 	.word	0x20011ff6

08026860 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8026860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026864:	b091      	sub	sp, #68	@ 0x44
 8026866:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 802686a:	4680      	mov	r8, r0
 802686c:	460f      	mov	r7, r1
 802686e:	4614      	mov	r4, r2
 8026870:	2d00      	cmp	r5, #0
 8026872:	d051      	beq.n	8026918 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8026874:	6810      	ldr	r0, [r2, #0]
 8026876:	6851      	ldr	r1, [r2, #4]
 8026878:	ae0c      	add	r6, sp, #48	@ 0x30
 802687a:	c603      	stmia	r6!, {r0, r1}
 802687c:	6818      	ldr	r0, [r3, #0]
 802687e:	6859      	ldr	r1, [r3, #4]
 8026880:	ae0e      	add	r6, sp, #56	@ 0x38
 8026882:	c603      	stmia	r6!, {r0, r1}
 8026884:	a80c      	add	r0, sp, #48	@ 0x30
 8026886:	f7f7 f821 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802688a:	4621      	mov	r1, r4
 802688c:	a80e      	add	r0, sp, #56	@ 0x38
 802688e:	f7f7 f845 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026892:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8026896:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802689a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 802689e:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 8026a7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80268a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80268a6:	eb08 0401 	add.w	r4, r8, r1
 80268aa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80268ae:	f8d9 0000 	ldr.w	r0, [r9]
 80268b2:	440a      	add	r2, r1
 80268b4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80268b8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80268bc:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80268c0:	4413      	add	r3, r2
 80268c2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80268c6:	6803      	ldr	r3, [r0, #0]
 80268c8:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80268cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80268ce:	4798      	blx	r3
 80268d0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80268d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8026a80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80268d8:	f8d9 0000 	ldr.w	r0, [r9]
 80268dc:	d01f      	beq.n	802691e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80268de:	2200      	movs	r2, #0
 80268e0:	6801      	ldr	r1, [r0, #0]
 80268e2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80268e6:	220b      	movs	r2, #11
 80268e8:	9207      	str	r2, [sp, #28]
 80268ea:	f8b8 2000 	ldrh.w	r2, [r8]
 80268ee:	b2b6      	uxth	r6, r6
 80268f0:	9206      	str	r2, [sp, #24]
 80268f2:	2201      	movs	r2, #1
 80268f4:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80268f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80268fc:	9601      	str	r6, [sp, #4]
 80268fe:	9203      	str	r2, [sp, #12]
 8026900:	fa1f f28a 	uxth.w	r2, sl
 8026904:	9202      	str	r2, [sp, #8]
 8026906:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802690a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802690e:	9200      	str	r2, [sp, #0]
 8026910:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8026912:	463a      	mov	r2, r7
 8026914:	4621      	mov	r1, r4
 8026916:	47a8      	blx	r5
 8026918:	b011      	add	sp, #68	@ 0x44
 802691a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802691e:	6803      	ldr	r3, [r0, #0]
 8026920:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8026924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026926:	4798      	blx	r3
 8026928:	f8b8 2000 	ldrh.w	r2, [r8]
 802692c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8026930:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8026934:	2dff      	cmp	r5, #255	@ 0xff
 8026936:	fb02 1303 	mla	r3, r2, r3, r1
 802693a:	fb0a fa02 	mul.w	sl, sl, r2
 802693e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8026942:	d062      	beq.n	8026a0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8026944:	ea6f 0c05 	mvn.w	ip, r5
 8026948:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802694c:	930a      	str	r3, [sp, #40]	@ 0x28
 802694e:	b2ad      	uxth	r5, r5
 8026950:	fa5f fc8c 	uxtb.w	ip, ip
 8026954:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8026958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802695a:	4298      	cmp	r0, r3
 802695c:	f080 8085 	bcs.w	8026a6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8026960:	eb00 0b09 	add.w	fp, r0, r9
 8026964:	4558      	cmp	r0, fp
 8026966:	d246      	bcs.n	80269f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8026968:	2303      	movs	r3, #3
 802696a:	2204      	movs	r2, #4
 802696c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8026970:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8026974:	eb07 0a0e 	add.w	sl, r7, lr
 8026978:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802697c:	8803      	ldrh	r3, [r0, #0]
 802697e:	fb18 f805 	smulbb	r8, r8, r5
 8026982:	1219      	asrs	r1, r3, #8
 8026984:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026988:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802698c:	fb01 810c 	mla	r1, r1, ip, r8
 8026990:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026994:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026998:	fb1e fe05 	smulbb	lr, lr, r5
 802699c:	fb18 f805 	smulbb	r8, r8, r5
 80269a0:	10da      	asrs	r2, r3, #3
 80269a2:	00db      	lsls	r3, r3, #3
 80269a4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80269a8:	b2db      	uxtb	r3, r3
 80269aa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80269ae:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80269b2:	fb02 820c 	mla	r2, r2, ip, r8
 80269b6:	fb03 e30c 	mla	r3, r3, ip, lr
 80269ba:	b289      	uxth	r1, r1
 80269bc:	b292      	uxth	r2, r2
 80269be:	b29b      	uxth	r3, r3
 80269c0:	f101 0801 	add.w	r8, r1, #1
 80269c4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80269c8:	f103 0e01 	add.w	lr, r3, #1
 80269cc:	f102 0801 	add.w	r8, r2, #1
 80269d0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80269d4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80269d8:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80269dc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80269e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80269e4:	ea4e 0101 	orr.w	r1, lr, r1
 80269e8:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80269ec:	ea41 0108 	orr.w	r1, r1, r8
 80269f0:	f820 1b02 	strh.w	r1, [r0], #2
 80269f4:	e7b6      	b.n	8026964 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80269f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80269f8:	881b      	ldrh	r3, [r3, #0]
 80269fa:	1b9b      	subs	r3, r3, r6
 80269fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8026a00:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8026a04:	1b9b      	subs	r3, r3, r6
 8026a06:	441c      	add	r4, r3
 8026a08:	e7a6      	b.n	8026958 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8026a0a:	2203      	movs	r2, #3
 8026a0c:	2504      	movs	r5, #4
 8026a0e:	491a      	ldr	r1, [pc, #104]	@ (8026a78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8026a10:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8026a14:	4550      	cmp	r0, sl
 8026a16:	d228      	bcs.n	8026a6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8026a18:	eb00 0c09 	add.w	ip, r0, r9
 8026a1c:	4560      	cmp	r0, ip
 8026a1e:	4623      	mov	r3, r4
 8026a20:	d219      	bcs.n	8026a56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8026a22:	f893 e000 	ldrb.w	lr, [r3]
 8026a26:	3401      	adds	r4, #1
 8026a28:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8026a2c:	eb07 0b0e 	add.w	fp, r7, lr
 8026a30:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8026a34:	f89b b001 	ldrb.w	fp, [fp, #1]
 8026a38:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8026a3c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8026a40:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8026a44:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8026a48:	ea43 030b 	orr.w	r3, r3, fp
 8026a4c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8026a50:	f820 3b02 	strh.w	r3, [r0], #2
 8026a54:	e7e2      	b.n	8026a1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8026a56:	f8b8 3000 	ldrh.w	r3, [r8]
 8026a5a:	1b9b      	subs	r3, r3, r6
 8026a5c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8026a60:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8026a64:	1b9b      	subs	r3, r3, r6
 8026a66:	441c      	add	r4, r3
 8026a68:	e7d4      	b.n	8026a14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8026a6a:	4b04      	ldr	r3, [pc, #16]	@ (8026a7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8026a6c:	6818      	ldr	r0, [r3, #0]
 8026a6e:	6803      	ldr	r3, [r0, #0]
 8026a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026a72:	4798      	blx	r3
 8026a74:	e750      	b.n	8026918 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8026a76:	bf00      	nop
 8026a78:	fffff800 	.word	0xfffff800
 8026a7c:	20011ffc 	.word	0x20011ffc
 8026a80:	20011ff6 	.word	0x20011ff6

08026a84 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8026a84:	b4f0      	push	{r4, r5, r6, r7}
 8026a86:	460c      	mov	r4, r1
 8026a88:	4611      	mov	r1, r2
 8026a8a:	780f      	ldrb	r7, [r1, #0]
 8026a8c:	461a      	mov	r2, r3
 8026a8e:	2f01      	cmp	r7, #1
 8026a90:	9b04      	ldr	r3, [sp, #16]
 8026a92:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8026a96:	784e      	ldrb	r6, [r1, #1]
 8026a98:	d038      	beq.n	8026b0c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8026a9a:	d31f      	bcc.n	8026adc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8026a9c:	2f02      	cmp	r7, #2
 8026a9e:	d14d      	bne.n	8026b3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8026aa0:	2e03      	cmp	r6, #3
 8026aa2:	d84b      	bhi.n	8026b3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8026aa4:	e8df f006 	tbb	[pc, r6]
 8026aa8:	17140702 	.word	0x17140702
 8026aac:	9504      	str	r5, [sp, #16]
 8026aae:	4620      	mov	r0, r4
 8026ab0:	bcf0      	pop	{r4, r5, r6, r7}
 8026ab2:	f7ff be09 	b.w	80266c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8026ab6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8026ab8:	2800      	cmp	r0, #0
 8026aba:	d03f      	beq.n	8026b3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8026abc:	6806      	ldr	r6, [r0, #0]
 8026abe:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8026ac2:	68b5      	ldr	r5, [r6, #8]
 8026ac4:	4613      	mov	r3, r2
 8026ac6:	46ac      	mov	ip, r5
 8026ac8:	460a      	mov	r2, r1
 8026aca:	4621      	mov	r1, r4
 8026acc:	bcf0      	pop	{r4, r5, r6, r7}
 8026ace:	4760      	bx	ip
 8026ad0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8026ad4:	e7f0      	b.n	8026ab8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8026ad6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8026ada:	e7ed      	b.n	8026ab8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8026adc:	2e03      	cmp	r6, #3
 8026ade:	d82d      	bhi.n	8026b3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8026ae0:	e8df f006 	tbb	[pc, r6]
 8026ae4:	110e0702 	.word	0x110e0702
 8026ae8:	9504      	str	r5, [sp, #16]
 8026aea:	4620      	mov	r0, r4
 8026aec:	bcf0      	pop	{r4, r5, r6, r7}
 8026aee:	f7ff bd05 	b.w	80264fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8026af2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8026af4:	b310      	cbz	r0, 8026b3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8026af6:	6806      	ldr	r6, [r0, #0]
 8026af8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8026afc:	68f5      	ldr	r5, [r6, #12]
 8026afe:	e7e1      	b.n	8026ac4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8026b00:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8026b04:	e7f6      	b.n	8026af4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8026b06:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8026b0a:	e7f3      	b.n	8026af4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8026b0c:	2e03      	cmp	r6, #3
 8026b0e:	d815      	bhi.n	8026b3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8026b10:	e8df f006 	tbb	[pc, r6]
 8026b14:	110e0702 	.word	0x110e0702
 8026b18:	9504      	str	r5, [sp, #16]
 8026b1a:	4620      	mov	r0, r4
 8026b1c:	bcf0      	pop	{r4, r5, r6, r7}
 8026b1e:	f7ff be9f 	b.w	8026860 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8026b22:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8026b24:	b150      	cbz	r0, 8026b3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8026b26:	6806      	ldr	r6, [r0, #0]
 8026b28:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8026b2c:	6935      	ldr	r5, [r6, #16]
 8026b2e:	e7c9      	b.n	8026ac4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8026b30:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8026b34:	e7f6      	b.n	8026b24 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8026b36:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8026b3a:	e7f3      	b.n	8026b24 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8026b3c:	bcf0      	pop	{r4, r5, r6, r7}
 8026b3e:	4770      	bx	lr

08026b40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8026b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b44:	4617      	mov	r7, r2
 8026b46:	4604      	mov	r4, r0
 8026b48:	460e      	mov	r6, r1
 8026b4a:	b087      	sub	sp, #28
 8026b4c:	6810      	ldr	r0, [r2, #0]
 8026b4e:	6851      	ldr	r1, [r2, #4]
 8026b50:	ad02      	add	r5, sp, #8
 8026b52:	c503      	stmia	r5!, {r0, r1}
 8026b54:	6818      	ldr	r0, [r3, #0]
 8026b56:	6859      	ldr	r1, [r3, #4]
 8026b58:	ad04      	add	r5, sp, #16
 8026b5a:	c503      	stmia	r5!, {r0, r1}
 8026b5c:	a802      	add	r0, sp, #8
 8026b5e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8026b62:	f7f6 feb3 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026b66:	4639      	mov	r1, r7
 8026b68:	a804      	add	r0, sp, #16
 8026b6a:	f7f6 fed7 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026b6e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026b72:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026b76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8026b7a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8026b7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8026b82:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8026b86:	440e      	add	r6, r1
 8026b88:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8026b8c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8026b90:	440a      	add	r2, r1
 8026b92:	f8ad 2010 	strh.w	r2, [sp, #16]
 8026b96:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8026b9a:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8026d88 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8026b9e:	4413      	add	r3, r2
 8026ba0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8026ba4:	4b77      	ldr	r3, [pc, #476]	@ (8026d84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8026ba6:	6818      	ldr	r0, [r3, #0]
 8026ba8:	6803      	ldr	r3, [r0, #0]
 8026baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026bac:	4798      	blx	r3
 8026bae:	f8b9 b000 	ldrh.w	fp, [r9]
 8026bb2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026bb6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026bba:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8026bbe:	fb0b 2303 	mla	r3, fp, r3, r2
 8026bc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8026bc6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8026bca:	fb05 f50b 	mul.w	r5, r5, fp
 8026bce:	9300      	str	r3, [sp, #0]
 8026bd0:	d069      	beq.n	8026ca6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8026bd2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8026bd6:	4558      	cmp	r0, fp
 8026bd8:	f080 80cc 	bcs.w	8026d74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8026bdc:	4631      	mov	r1, r6
 8026bde:	9b00      	ldr	r3, [sp, #0]
 8026be0:	18c3      	adds	r3, r0, r3
 8026be2:	9301      	str	r3, [sp, #4]
 8026be4:	9b01      	ldr	r3, [sp, #4]
 8026be6:	4298      	cmp	r0, r3
 8026be8:	d24f      	bcs.n	8026c8a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8026bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bee:	2a00      	cmp	r2, #0
 8026bf0:	d048      	beq.n	8026c84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8026bf2:	fb0a f202 	mul.w	r2, sl, r2
 8026bf6:	1c53      	adds	r3, r2, #1
 8026bf8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026bfc:	121b      	asrs	r3, r3, #8
 8026bfe:	d041      	beq.n	8026c84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8026c00:	b29e      	uxth	r6, r3
 8026c02:	43db      	mvns	r3, r3
 8026c04:	8802      	ldrh	r2, [r0, #0]
 8026c06:	b2db      	uxtb	r3, r3
 8026c08:	1215      	asrs	r5, r2, #8
 8026c0a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026c0e:	f8b4 c000 	ldrh.w	ip, [r4]
 8026c12:	fb15 f503 	smulbb	r5, r5, r3
 8026c16:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8026c1a:	00d2      	lsls	r2, r2, #3
 8026c1c:	b2d2      	uxtb	r2, r2
 8026c1e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8026c22:	fb12 f203 	smulbb	r2, r2, r3
 8026c26:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8026c2a:	fb07 5706 	mla	r7, r7, r6, r5
 8026c2e:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8026c32:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026c36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026c3a:	fb1e fe03 	smulbb	lr, lr, r3
 8026c3e:	fa5f fc8c 	uxtb.w	ip, ip
 8026c42:	fb0c 2c06 	mla	ip, ip, r6, r2
 8026c46:	b2bf      	uxth	r7, r7
 8026c48:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026c4c:	fb05 e506 	mla	r5, r5, r6, lr
 8026c50:	f107 0e01 	add.w	lr, r7, #1
 8026c54:	fa1f fc8c 	uxth.w	ip, ip
 8026c58:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8026c5c:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8026c60:	f10c 0701 	add.w	r7, ip, #1
 8026c64:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026c68:	b2ad      	uxth	r5, r5
 8026c6a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026c6e:	ea47 070e 	orr.w	r7, r7, lr
 8026c72:	f105 0e01 	add.w	lr, r5, #1
 8026c76:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8026c7a:	096d      	lsrs	r5, r5, #5
 8026c7c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026c80:	432f      	orrs	r7, r5
 8026c82:	8007      	strh	r7, [r0, #0]
 8026c84:	3002      	adds	r0, #2
 8026c86:	3402      	adds	r4, #2
 8026c88:	e7ac      	b.n	8026be4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8026c8a:	f8b9 3000 	ldrh.w	r3, [r9]
 8026c8e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8026c92:	eba3 0308 	sub.w	r3, r3, r8
 8026c96:	eba6 0608 	sub.w	r6, r6, r8
 8026c9a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8026c9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8026ca2:	440e      	add	r6, r1
 8026ca4:	e797      	b.n	8026bd6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8026ca6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8026caa:	42a8      	cmp	r0, r5
 8026cac:	d262      	bcs.n	8026d74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8026cae:	4631      	mov	r1, r6
 8026cb0:	9b00      	ldr	r3, [sp, #0]
 8026cb2:	eb00 0b03 	add.w	fp, r0, r3
 8026cb6:	4558      	cmp	r0, fp
 8026cb8:	d24e      	bcs.n	8026d58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8026cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026cbe:	b12b      	cbz	r3, 8026ccc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8026cc0:	2bff      	cmp	r3, #255	@ 0xff
 8026cc2:	f8b4 e000 	ldrh.w	lr, [r4]
 8026cc6:	d104      	bne.n	8026cd2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8026cc8:	f8a0 e000 	strh.w	lr, [r0]
 8026ccc:	3002      	adds	r0, #2
 8026cce:	3402      	adds	r4, #2
 8026cd0:	e7f1      	b.n	8026cb6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8026cd2:	b29f      	uxth	r7, r3
 8026cd4:	43db      	mvns	r3, r3
 8026cd6:	8802      	ldrh	r2, [r0, #0]
 8026cd8:	b2db      	uxtb	r3, r3
 8026cda:	1216      	asrs	r6, r2, #8
 8026cdc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8026ce0:	fb16 f603 	smulbb	r6, r6, r3
 8026ce4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8026ce8:	00d2      	lsls	r2, r2, #3
 8026cea:	b2d2      	uxtb	r2, r2
 8026cec:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8026cf0:	fb1a fa03 	smulbb	sl, sl, r3
 8026cf4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8026cf8:	fb12 f303 	smulbb	r3, r2, r3
 8026cfc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8026d00:	fb0c 6c07 	mla	ip, ip, r7, r6
 8026d04:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8026d08:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026d0c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8026d10:	fa5f fe8e 	uxtb.w	lr, lr
 8026d14:	fb06 a607 	mla	r6, r6, r7, sl
 8026d18:	fb0e 3307 	mla	r3, lr, r7, r3
 8026d1c:	fa1f fc8c 	uxth.w	ip, ip
 8026d20:	f10c 0201 	add.w	r2, ip, #1
 8026d24:	b2b6      	uxth	r6, r6
 8026d26:	b29b      	uxth	r3, r3
 8026d28:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8026d2c:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8026d30:	f106 0a01 	add.w	sl, r6, #1
 8026d34:	f103 0c01 	add.w	ip, r3, #1
 8026d38:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8026d3c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8026d40:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026d44:	0976      	lsrs	r6, r6, #5
 8026d46:	ea4c 0c02 	orr.w	ip, ip, r2
 8026d4a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8026d4e:	ea4c 0c06 	orr.w	ip, ip, r6
 8026d52:	f8a0 c000 	strh.w	ip, [r0]
 8026d56:	e7b9      	b.n	8026ccc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8026d58:	f8b9 3000 	ldrh.w	r3, [r9]
 8026d5c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8026d60:	eba3 0308 	sub.w	r3, r3, r8
 8026d64:	eba6 0608 	sub.w	r6, r6, r8
 8026d68:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8026d6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8026d70:	440e      	add	r6, r1
 8026d72:	e79a      	b.n	8026caa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8026d74:	4b03      	ldr	r3, [pc, #12]	@ (8026d84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8026d76:	6818      	ldr	r0, [r3, #0]
 8026d78:	6803      	ldr	r3, [r0, #0]
 8026d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026d7c:	4798      	blx	r3
 8026d7e:	b007      	add	sp, #28
 8026d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d84:	20011ffc 	.word	0x20011ffc
 8026d88:	20011ff6 	.word	0x20011ff6

08026d8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8026d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d90:	b089      	sub	sp, #36	@ 0x24
 8026d92:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8026d96:	4607      	mov	r7, r0
 8026d98:	4688      	mov	r8, r1
 8026d9a:	4692      	mov	sl, r2
 8026d9c:	4699      	mov	r9, r3
 8026d9e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026da0:	2e00      	cmp	r6, #0
 8026da2:	d048      	beq.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026da4:	4608      	mov	r0, r1
 8026da6:	f7fa f823 	bl	8020df0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8026daa:	4605      	mov	r5, r0
 8026dac:	4640      	mov	r0, r8
 8026dae:	f7fa f853 	bl	8020e58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8026db2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8026db6:	4640      	mov	r0, r8
 8026db8:	f8ad a008 	strh.w	sl, [sp, #8]
 8026dbc:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026dc0:	f8ad 900a 	strh.w	r9, [sp, #10]
 8026dc4:	f7fa f906 	bl	8020fd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8026dc8:	4605      	mov	r5, r0
 8026dca:	4640      	mov	r0, r8
 8026dcc:	f7fa f932 	bl	8021034 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8026dd0:	4682      	mov	sl, r0
 8026dd2:	4640      	mov	r0, r8
 8026dd4:	f7fa f982 	bl	80210dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8026dd8:	2810      	cmp	r0, #16
 8026dda:	d82c      	bhi.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026ddc:	e8df f010 	tbh	[pc, r0, lsl #1]
 8026de0:	00ba00ca 	.word	0x00ba00ca
 8026de4:	002b0011 	.word	0x002b0011
 8026de8:	002b002b 	.word	0x002b002b
 8026dec:	002b002b 	.word	0x002b002b
 8026df0:	002b002b 	.word	0x002b002b
 8026df4:	00c1002b 	.word	0x00c1002b
 8026df8:	002b002b 	.word	0x002b002b
 8026dfc:	002b0180 	.word	0x002b0180
 8026e00:	0173      	.short	0x0173
 8026e02:	4bbc      	ldr	r3, [pc, #752]	@ (80270f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8026e04:	6818      	ldr	r0, [r3, #0]
 8026e06:	6803      	ldr	r3, [r0, #0]
 8026e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8026e0a:	4798      	blx	r3
 8026e0c:	2eff      	cmp	r6, #255	@ 0xff
 8026e0e:	d101      	bne.n	8026e14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8026e10:	0683      	lsls	r3, r0, #26
 8026e12:	d506      	bpl.n	8026e22 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8026e14:	4633      	mov	r3, r6
 8026e16:	4622      	mov	r2, r4
 8026e18:	a902      	add	r1, sp, #8
 8026e1a:	4628      	mov	r0, r5
 8026e1c:	f7ff f8fc 	bl	8026018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8026e20:	e009      	b.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026e22:	4640      	mov	r0, r8
 8026e24:	f7fa f89e 	bl	8020f64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8026e28:	b940      	cbnz	r0, 8026e3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8026e2a:	4623      	mov	r3, r4
 8026e2c:	aa02      	add	r2, sp, #8
 8026e2e:	4629      	mov	r1, r5
 8026e30:	4638      	mov	r0, r7
 8026e32:	f7ff f9d7 	bl	80261e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8026e36:	b009      	add	sp, #36	@ 0x24
 8026e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e3c:	f10d 0918 	add.w	r9, sp, #24
 8026e40:	4641      	mov	r1, r8
 8026e42:	4648      	mov	r0, r9
 8026e44:	f10d 0810 	add.w	r8, sp, #16
 8026e48:	f7fa f83a 	bl	8020ec0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8026e4c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026e50:	e888 0003 	stmia.w	r8, {r0, r1}
 8026e54:	4640      	mov	r0, r8
 8026e56:	4621      	mov	r1, r4
 8026e58:	f7f1 fc42 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 8026e5c:	4640      	mov	r0, r8
 8026e5e:	f7f1 fc82 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 8026e62:	2800      	cmp	r0, #0
 8026e64:	d1d6      	bne.n	8026e14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8026e66:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026e6a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8026e6e:	4293      	cmp	r3, r2
 8026e70:	dd12      	ble.n	8026e98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8026e72:	f9b4 0000 	ldrsh.w	r0, [r4]
 8026e76:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026e7a:	1a9b      	subs	r3, r3, r2
 8026e7c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8026e80:	f8ad 201a 	strh.w	r2, [sp, #26]
 8026e84:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026e88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026e8c:	464a      	mov	r2, r9
 8026e8e:	4633      	mov	r3, r6
 8026e90:	a902      	add	r1, sp, #8
 8026e92:	4628      	mov	r0, r5
 8026e94:	f7ff f8c0 	bl	8026018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8026e98:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8026e9c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8026ea0:	4293      	cmp	r3, r2
 8026ea2:	dd12      	ble.n	8026eca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8026ea4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8026ea8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8026eac:	1a9b      	subs	r3, r3, r2
 8026eae:	f8ad 2018 	strh.w	r2, [sp, #24]
 8026eb2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8026eb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026eba:	f8ad 101e 	strh.w	r1, [sp, #30]
 8026ebe:	23ff      	movs	r3, #255	@ 0xff
 8026ec0:	464a      	mov	r2, r9
 8026ec2:	a902      	add	r1, sp, #8
 8026ec4:	4628      	mov	r0, r5
 8026ec6:	f7ff f8a7 	bl	8026018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8026eca:	4643      	mov	r3, r8
 8026ecc:	aa02      	add	r2, sp, #8
 8026ece:	4629      	mov	r1, r5
 8026ed0:	4638      	mov	r0, r7
 8026ed2:	f7ff f987 	bl	80261e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8026ed6:	88a2      	ldrh	r2, [r4, #4]
 8026ed8:	8823      	ldrh	r3, [r4, #0]
 8026eda:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8026ede:	4413      	add	r3, r2
 8026ee0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8026ee4:	b29b      	uxth	r3, r3
 8026ee6:	440a      	add	r2, r1
 8026ee8:	b292      	uxth	r2, r2
 8026eea:	b211      	sxth	r1, r2
 8026eec:	b218      	sxth	r0, r3
 8026eee:	4288      	cmp	r0, r1
 8026ef0:	dd12      	ble.n	8026f18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8026ef2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8026ef6:	1a9b      	subs	r3, r3, r2
 8026ef8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8026efc:	f8ad 1018 	strh.w	r1, [sp, #24]
 8026f00:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026f04:	f8ad 001e 	strh.w	r0, [sp, #30]
 8026f08:	23ff      	movs	r3, #255	@ 0xff
 8026f0a:	464a      	mov	r2, r9
 8026f0c:	a902      	add	r1, sp, #8
 8026f0e:	4628      	mov	r0, r5
 8026f10:	f8ad 601a 	strh.w	r6, [sp, #26]
 8026f14:	f7ff f880 	bl	8026018 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8026f18:	88e2      	ldrh	r2, [r4, #6]
 8026f1a:	8863      	ldrh	r3, [r4, #2]
 8026f1c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8026f20:	4413      	add	r3, r2
 8026f22:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8026f26:	b29b      	uxth	r3, r3
 8026f28:	440a      	add	r2, r1
 8026f2a:	b292      	uxth	r2, r2
 8026f2c:	b211      	sxth	r1, r2
 8026f2e:	b218      	sxth	r0, r3
 8026f30:	4288      	cmp	r0, r1
 8026f32:	dd80      	ble.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026f34:	f9b4 6000 	ldrsh.w	r6, [r4]
 8026f38:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8026f3c:	1a9b      	subs	r3, r3, r2
 8026f3e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026f42:	f8ad 6018 	strh.w	r6, [sp, #24]
 8026f46:	f8ad 101a 	strh.w	r1, [sp, #26]
 8026f4a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8026f4e:	23ff      	movs	r3, #255	@ 0xff
 8026f50:	464a      	mov	r2, r9
 8026f52:	e761      	b.n	8026e18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8026f54:	4633      	mov	r3, r6
 8026f56:	4622      	mov	r2, r4
 8026f58:	a902      	add	r1, sp, #8
 8026f5a:	4628      	mov	r0, r5
 8026f5c:	f7ff f9b2 	bl	80262c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8026f60:	e769      	b.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026f62:	e9cd 4600 	strd	r4, r6, [sp]
 8026f66:	ab02      	add	r3, sp, #8
 8026f68:	4652      	mov	r2, sl
 8026f6a:	4629      	mov	r1, r5
 8026f6c:	4638      	mov	r0, r7
 8026f6e:	f7ff fd89 	bl	8026a84 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8026f72:	e760      	b.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026f74:	4640      	mov	r0, r8
 8026f76:	f7f9 fff5 	bl	8020f64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8026f7a:	b948      	cbnz	r0, 8026f90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8026f7c:	683b      	ldr	r3, [r7, #0]
 8026f7e:	e9cd 6000 	strd	r6, r0, [sp]
 8026f82:	aa02      	add	r2, sp, #8
 8026f84:	68de      	ldr	r6, [r3, #12]
 8026f86:	4629      	mov	r1, r5
 8026f88:	4623      	mov	r3, r4
 8026f8a:	4638      	mov	r0, r7
 8026f8c:	47b0      	blx	r6
 8026f8e:	e752      	b.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026f90:	f10d 0918 	add.w	r9, sp, #24
 8026f94:	4641      	mov	r1, r8
 8026f96:	4648      	mov	r0, r9
 8026f98:	f10d 0810 	add.w	r8, sp, #16
 8026f9c:	f7f9 ff90 	bl	8020ec0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8026fa0:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026fa4:	e888 0003 	stmia.w	r8, {r0, r1}
 8026fa8:	4640      	mov	r0, r8
 8026faa:	4621      	mov	r1, r4
 8026fac:	f7f1 fb98 	bl	80186e0 <_ZN8touchgfx4RectaNERKS0_>
 8026fb0:	4640      	mov	r0, r8
 8026fb2:	f7f1 fbd8 	bl	8018766 <_ZNK8touchgfx4Rect7isEmptyEv>
 8026fb6:	b138      	cbz	r0, 8026fc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8026fb8:	4623      	mov	r3, r4
 8026fba:	9600      	str	r6, [sp, #0]
 8026fbc:	aa02      	add	r2, sp, #8
 8026fbe:	4651      	mov	r1, sl
 8026fc0:	4628      	mov	r0, r5
 8026fc2:	f7ff fdbd 	bl	8026b40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8026fc6:	e736      	b.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8026fc8:	683b      	ldr	r3, [r7, #0]
 8026fca:	e9cd 6000 	strd	r6, r0, [sp]
 8026fce:	aa02      	add	r2, sp, #8
 8026fd0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8026fd4:	4629      	mov	r1, r5
 8026fd6:	4643      	mov	r3, r8
 8026fd8:	4638      	mov	r0, r7
 8026fda:	47d8      	blx	fp
 8026fdc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026fe0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8026fe4:	4293      	cmp	r3, r2
 8026fe6:	dd13      	ble.n	8027010 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8026fe8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8026fec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026ff0:	1a9b      	subs	r3, r3, r2
 8026ff2:	f8ad 0018 	strh.w	r0, [sp, #24]
 8026ff6:	f8ad 201a 	strh.w	r2, [sp, #26]
 8026ffa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026ffe:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027002:	9600      	str	r6, [sp, #0]
 8027004:	464b      	mov	r3, r9
 8027006:	aa02      	add	r2, sp, #8
 8027008:	4651      	mov	r1, sl
 802700a:	4628      	mov	r0, r5
 802700c:	f7ff fd98 	bl	8026b40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8027010:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8027014:	f9b4 2000 	ldrsh.w	r2, [r4]
 8027018:	4293      	cmp	r3, r2
 802701a:	dd13      	ble.n	8027044 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 802701c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8027020:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8027024:	1a9b      	subs	r3, r3, r2
 8027026:	f8ad 2018 	strh.w	r2, [sp, #24]
 802702a:	f8ad 001a 	strh.w	r0, [sp, #26]
 802702e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027032:	f8ad 101e 	strh.w	r1, [sp, #30]
 8027036:	9600      	str	r6, [sp, #0]
 8027038:	464b      	mov	r3, r9
 802703a:	aa02      	add	r2, sp, #8
 802703c:	4651      	mov	r1, sl
 802703e:	4628      	mov	r0, r5
 8027040:	f7ff fd7e 	bl	8026b40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8027044:	88a2      	ldrh	r2, [r4, #4]
 8027046:	8823      	ldrh	r3, [r4, #0]
 8027048:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802704c:	4413      	add	r3, r2
 802704e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8027052:	b29b      	uxth	r3, r3
 8027054:	440a      	add	r2, r1
 8027056:	b292      	uxth	r2, r2
 8027058:	b211      	sxth	r1, r2
 802705a:	b218      	sxth	r0, r3
 802705c:	4288      	cmp	r0, r1
 802705e:	dd13      	ble.n	8027088 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8027060:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8027064:	1a9b      	subs	r3, r3, r2
 8027066:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 802706a:	f8ad 1018 	strh.w	r1, [sp, #24]
 802706e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027072:	f8ad 001e 	strh.w	r0, [sp, #30]
 8027076:	9600      	str	r6, [sp, #0]
 8027078:	464b      	mov	r3, r9
 802707a:	aa02      	add	r2, sp, #8
 802707c:	4651      	mov	r1, sl
 802707e:	4628      	mov	r0, r5
 8027080:	f8ad 701a 	strh.w	r7, [sp, #26]
 8027084:	f7ff fd5c 	bl	8026b40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8027088:	88e2      	ldrh	r2, [r4, #6]
 802708a:	8863      	ldrh	r3, [r4, #2]
 802708c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8027090:	4413      	add	r3, r2
 8027092:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8027096:	b29b      	uxth	r3, r3
 8027098:	440a      	add	r2, r1
 802709a:	b292      	uxth	r2, r2
 802709c:	b211      	sxth	r1, r2
 802709e:	b218      	sxth	r0, r3
 80270a0:	4288      	cmp	r0, r1
 80270a2:	f77f aec8 	ble.w	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80270a6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80270aa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80270ae:	1a9b      	subs	r3, r3, r2
 80270b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80270b4:	f8ad 7018 	strh.w	r7, [sp, #24]
 80270b8:	f8ad 101a 	strh.w	r1, [sp, #26]
 80270bc:	f8ad 001c 	strh.w	r0, [sp, #28]
 80270c0:	9600      	str	r6, [sp, #0]
 80270c2:	464b      	mov	r3, r9
 80270c4:	e77a      	b.n	8026fbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80270c6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80270ca:	2800      	cmp	r0, #0
 80270cc:	f43f aeb3 	beq.w	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80270d0:	6803      	ldr	r3, [r0, #0]
 80270d2:	9600      	str	r6, [sp, #0]
 80270d4:	68de      	ldr	r6, [r3, #12]
 80270d6:	4623      	mov	r3, r4
 80270d8:	aa02      	add	r2, sp, #8
 80270da:	4629      	mov	r1, r5
 80270dc:	47b0      	blx	r6
 80270de:	e6aa      	b.n	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80270e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80270e4:	2800      	cmp	r0, #0
 80270e6:	f43f aea6 	beq.w	8026e36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80270ea:	6803      	ldr	r3, [r0, #0]
 80270ec:	9600      	str	r6, [sp, #0]
 80270ee:	689e      	ldr	r6, [r3, #8]
 80270f0:	e7f1      	b.n	80270d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 80270f2:	bf00      	nop
 80270f4:	20011ffc 	.word	0x20011ffc

080270f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80270f8:	b180      	cbz	r0, 802711c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 80270fa:	2903      	cmp	r1, #3
 80270fc:	d81c      	bhi.n	8027138 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80270fe:	e8df f001 	tbb	[pc, r1]
 8027102:	1d02      	.short	0x1d02
 8027104:	1f08      	.short	0x1f08
 8027106:	4b10      	ldr	r3, [pc, #64]	@ (8027148 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8027108:	8818      	ldrh	r0, [r3, #0]
 802710a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802710e:	4240      	negs	r0, r0
 8027110:	4770      	bx	lr
 8027112:	4b0d      	ldr	r3, [pc, #52]	@ (8027148 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8027114:	8818      	ldrh	r0, [r3, #0]
 8027116:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802711a:	4770      	bx	lr
 802711c:	2903      	cmp	r1, #3
 802711e:	d80b      	bhi.n	8027138 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8027120:	a301      	add	r3, pc, #4	@ (adr r3, 8027128 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8027122:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8027126:	bf00      	nop
 8027128:	0802713d 	.word	0x0802713d
 802712c:	08027113 	.word	0x08027113
 8027130:	08027141 	.word	0x08027141
 8027134:	08027107 	.word	0x08027107
 8027138:	2000      	movs	r0, #0
 802713a:	4770      	bx	lr
 802713c:	2001      	movs	r0, #1
 802713e:	4770      	bx	lr
 8027140:	f04f 30ff 	mov.w	r0, #4294967295
 8027144:	4770      	bx	lr
 8027146:	bf00      	nop
 8027148:	20011ff6 	.word	0x20011ff6

0802714c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 802714c:	b180      	cbz	r0, 8027170 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 802714e:	2903      	cmp	r1, #3
 8027150:	d81c      	bhi.n	802718c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8027152:	e8df f001 	tbb	[pc, r1]
 8027156:	021d      	.short	0x021d
 8027158:	071f      	.short	0x071f
 802715a:	4b10      	ldr	r3, [pc, #64]	@ (802719c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802715c:	8818      	ldrh	r0, [r3, #0]
 802715e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8027162:	4770      	bx	lr
 8027164:	4b0d      	ldr	r3, [pc, #52]	@ (802719c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8027166:	8818      	ldrh	r0, [r3, #0]
 8027168:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802716c:	4240      	negs	r0, r0
 802716e:	4770      	bx	lr
 8027170:	2903      	cmp	r1, #3
 8027172:	d80b      	bhi.n	802718c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8027174:	a301      	add	r3, pc, #4	@ (adr r3, 802717c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8027176:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802717a:	bf00      	nop
 802717c:	0802715b 	.word	0x0802715b
 8027180:	08027195 	.word	0x08027195
 8027184:	08027165 	.word	0x08027165
 8027188:	08027191 	.word	0x08027191
 802718c:	2000      	movs	r0, #0
 802718e:	4770      	bx	lr
 8027190:	2001      	movs	r0, #1
 8027192:	4770      	bx	lr
 8027194:	f04f 30ff 	mov.w	r0, #4294967295
 8027198:	4770      	bx	lr
 802719a:	bf00      	nop
 802719c:	20011ff6 	.word	0x20011ff6

080271a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80271a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271a4:	b099      	sub	sp, #100	@ 0x64
 80271a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80271a8:	a914      	add	r1, sp, #80	@ 0x50
 80271aa:	e881 000c 	stmia.w	r1, {r2, r3}
 80271ae:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 80271b2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80271b6:	f891 900d 	ldrb.w	r9, [r1, #13]
 80271ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80271bc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80271c0:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80271c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80271c6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80271ca:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 80271ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80271d0:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 80271d4:	798f      	ldrb	r7, [r1, #6]
 80271d6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 80271da:	431f      	orrs	r7, r3
 80271dc:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 80271e0:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80271e4:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80271e8:	f000 8194 	beq.w	8027514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80271ec:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80271f0:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80271f4:	f891 9007 	ldrb.w	r9, [r1, #7]
 80271f8:	ea59 0903 	orrs.w	r9, r9, r3
 80271fc:	f000 818a 	beq.w	8027514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8027200:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8027204:	b29b      	uxth	r3, r3
 8027206:	2d00      	cmp	r5, #0
 8027208:	f000 812f 	beq.w	802746a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 802720c:	1aed      	subs	r5, r5, r3
 802720e:	b2ad      	uxth	r5, r5
 8027210:	042b      	lsls	r3, r5, #16
 8027212:	d502      	bpl.n	802721a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8027214:	1b64      	subs	r4, r4, r5
 8027216:	2500      	movs	r5, #0
 8027218:	b224      	sxth	r4, r4
 802721a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802721e:	a814      	add	r0, sp, #80	@ 0x50
 8027220:	428c      	cmp	r4, r1
 8027222:	b28b      	uxth	r3, r1
 8027224:	bfbf      	itttt	lt
 8027226:	18ed      	addlt	r5, r5, r3
 8027228:	1b2c      	sublt	r4, r5, r4
 802722a:	b2a5      	uxthlt	r5, r4
 802722c:	460c      	movlt	r4, r1
 802722e:	8891      	ldrh	r1, [r2, #4]
 8027230:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8027234:	440b      	add	r3, r1
 8027236:	b21b      	sxth	r3, r3
 8027238:	930f      	str	r3, [sp, #60]	@ 0x3c
 802723a:	88d3      	ldrh	r3, [r2, #6]
 802723c:	8852      	ldrh	r2, [r2, #2]
 802723e:	4621      	mov	r1, r4
 8027240:	4413      	add	r3, r2
 8027242:	b21b      	sxth	r3, r3
 8027244:	930d      	str	r3, [sp, #52]	@ 0x34
 8027246:	4bbd      	ldr	r3, [pc, #756]	@ (802753c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8027248:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802724a:	f893 b000 	ldrb.w	fp, [r3]
 802724e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8027252:	f1dc 0300 	rsbs	r3, ip, #0
 8027256:	eb43 030c 	adc.w	r3, r3, ip
 802725a:	930e      	str	r3, [sp, #56]	@ 0x38
 802725c:	4653      	mov	r3, sl
 802725e:	f7f6 f9aa 	bl	801d5b6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8027262:	4621      	mov	r1, r4
 8027264:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8027268:	4653      	mov	r3, sl
 802726a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802726c:	a814      	add	r0, sp, #80	@ 0x50
 802726e:	f7f6 f9bf 	bl	801d5f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8027272:	a918      	add	r1, sp, #96	@ 0x60
 8027274:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8027278:	a817      	add	r0, sp, #92	@ 0x5c
 802727a:	f7f6 fae5 	bl	801d848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802727e:	f1ba 0f00 	cmp.w	sl, #0
 8027282:	f040 80f5 	bne.w	8027470 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 8027286:	f1bb 0f01 	cmp.w	fp, #1
 802728a:	f040 80f9 	bne.w	8027480 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 802728e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027290:	2b00      	cmp	r3, #0
 8027292:	f040 8144 	bne.w	802751e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 8027296:	b2ba      	uxth	r2, r7
 8027298:	b905      	cbnz	r5, 802729c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 802729a:	b16e      	cbz	r6, 80272b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 802729c:	4631      	mov	r1, r6
 802729e:	fb06 5302 	mla	r3, r6, r2, r5
 80272a2:	fb08 f303 	mul.w	r3, r8, r3
 80272a6:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80272a8:	f003 0607 	and.w	r6, r3, #7
 80272ac:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80272b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80272b2:	eba9 0301 	sub.w	r3, r9, r1
 80272b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80272b8:	4651      	mov	r1, sl
 80272ba:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80272bc:	f7ff ff1c 	bl	80270f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80272c0:	4681      	mov	r9, r0
 80272c2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80272c4:	f7ff ff42 	bl	802714c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80272c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80272ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80272cc:	4683      	mov	fp, r0
 80272ce:	eba3 0a01 	sub.w	sl, r3, r1
 80272d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80272d4:	459a      	cmp	sl, r3
 80272d6:	bfa8      	it	ge
 80272d8:	469a      	movge	sl, r3
 80272da:	f1ba 0f00 	cmp.w	sl, #0
 80272de:	f340 8119 	ble.w	8027514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80272e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272e4:	1b64      	subs	r4, r4, r5
 80272e6:	1b1c      	subs	r4, r3, r4
 80272e8:	42bc      	cmp	r4, r7
 80272ea:	bfd4      	ite	le
 80272ec:	ebc5 0504 	rsble	r5, r5, r4
 80272f0:	ebc5 0507 	rsbgt	r5, r5, r7
 80272f4:	2d00      	cmp	r5, #0
 80272f6:	f340 810d 	ble.w	8027514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80272fa:	1b52      	subs	r2, r2, r5
 80272fc:	fb08 f302 	mul.w	r3, r8, r2
 8027300:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027304:	2b00      	cmp	r3, #0
 8027306:	f040 8115 	bne.w	8027534 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 802730a:	4b8d      	ldr	r3, [pc, #564]	@ (8027540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 802730c:	6818      	ldr	r0, [r3, #0]
 802730e:	6803      	ldr	r3, [r0, #0]
 8027310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027312:	4798      	blx	r3
 8027314:	2301      	movs	r3, #1
 8027316:	fa03 f308 	lsl.w	r3, r3, r8
 802731a:	4a8a      	ldr	r2, [pc, #552]	@ (8027544 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802731c:	3b01      	subs	r3, #1
 802731e:	b2db      	uxtb	r3, r3
 8027320:	8811      	ldrh	r1, [r2, #0]
 8027322:	930e      	str	r3, [sp, #56]	@ 0x38
 8027324:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8027328:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 802732c:	fb01 2303 	mla	r3, r1, r3, r2
 8027330:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8027334:	930a      	str	r3, [sp, #40]	@ 0x28
 8027336:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027338:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802733c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802733e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027340:	0a19      	lsrs	r1, r3, #8
 8027342:	b2cb      	uxtb	r3, r1
 8027344:	9312      	str	r3, [sp, #72]	@ 0x48
 8027346:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027348:	b2db      	uxtb	r3, r3
 802734a:	9311      	str	r3, [sp, #68]	@ 0x44
 802734c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802734e:	095a      	lsrs	r2, r3, #5
 8027350:	4b7d      	ldr	r3, [pc, #500]	@ (8027548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8027352:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027356:	400b      	ands	r3, r1
 8027358:	4313      	orrs	r3, r2
 802735a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802735c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027360:	4313      	orrs	r3, r2
 8027362:	b29b      	uxth	r3, r3
 8027364:	9310      	str	r3, [sp, #64]	@ 0x40
 8027366:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027368:	781a      	ldrb	r2, [r3, #0]
 802736a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802736e:	fb05 b919 	mls	r9, r5, r9, fp
 8027372:	fb03 fb05 	mul.w	fp, r3, r5
 8027376:	4132      	asrs	r2, r6
 8027378:	b2d2      	uxtb	r2, r2
 802737a:	930d      	str	r3, [sp, #52]	@ 0x34
 802737c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8027380:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8027384:	f0c0 80f3 	bcc.w	802756e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8027388:	46ae      	mov	lr, r5
 802738a:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 802738e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8027392:	f0c0 80db 	bcc.w	802754c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8027396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027398:	4013      	ands	r3, r2
 802739a:	d055      	beq.n	8027448 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802739c:	20ff      	movs	r0, #255	@ 0xff
 802739e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80273a0:	fb90 f1f1 	sdiv	r1, r0, r1
 80273a4:	434b      	muls	r3, r1
 80273a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80273a8:	dd03      	ble.n	80273b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80273aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80273ac:	4281      	cmp	r1, r0
 80273ae:	f000 80c3 	beq.w	8027538 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80273b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80273b4:	f8bc 4000 	ldrh.w	r4, [ip]
 80273b8:	fb11 f303 	smulbb	r3, r1, r3
 80273bc:	b29b      	uxth	r3, r3
 80273be:	1c59      	adds	r1, r3, #1
 80273c0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80273c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80273c8:	b29f      	uxth	r7, r3
 80273ca:	43db      	mvns	r3, r3
 80273cc:	b2db      	uxtb	r3, r3
 80273ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80273d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80273d2:	1220      	asrs	r0, r4, #8
 80273d4:	fb13 f907 	smulbb	r9, r3, r7
 80273d8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80273dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273de:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80273e2:	fb00 9003 	mla	r0, r0, r3, r9
 80273e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80273e8:	10e1      	asrs	r1, r4, #3
 80273ea:	fb13 f907 	smulbb	r9, r3, r7
 80273ee:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80273f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273f4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80273f8:	fb01 9103 	mla	r1, r1, r3, r9
 80273fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80273fe:	00e4      	lsls	r4, r4, #3
 8027400:	fb13 f707 	smulbb	r7, r3, r7
 8027404:	b2e4      	uxtb	r4, r4
 8027406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027408:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802740c:	fb04 7403 	mla	r4, r4, r3, r7
 8027410:	b280      	uxth	r0, r0
 8027412:	b2a4      	uxth	r4, r4
 8027414:	1c43      	adds	r3, r0, #1
 8027416:	f104 0901 	add.w	r9, r4, #1
 802741a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802741e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8027422:	b289      	uxth	r1, r1
 8027424:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8027428:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802742c:	ea49 0000 	orr.w	r0, r9, r0
 8027430:	f101 0901 	add.w	r9, r1, #1
 8027434:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8027438:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802743c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027440:	ea40 0009 	orr.w	r0, r0, r9
 8027444:	f8ac 0000 	strh.w	r0, [ip]
 8027448:	4446      	add	r6, r8
 802744a:	b2b6      	uxth	r6, r6
 802744c:	2e07      	cmp	r6, #7
 802744e:	bf89      	itett	hi
 8027450:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8027452:	fa42 f208 	asrls.w	r2, r2, r8
 8027456:	785a      	ldrbhi	r2, [r3, #1]
 8027458:	3301      	addhi	r3, #1
 802745a:	bf88      	it	hi
 802745c:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 802745e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027460:	bf94      	ite	ls
 8027462:	b2d2      	uxtbls	r2, r2
 8027464:	2600      	movhi	r6, #0
 8027466:	449c      	add	ip, r3
 8027468:	e791      	b.n	802738e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 802746a:	441c      	add	r4, r3
 802746c:	b224      	sxth	r4, r4
 802746e:	e6d4      	b.n	802721a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8027470:	f1ba 0f01 	cmp.w	sl, #1
 8027474:	f47f af0b 	bne.w	802728e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8027478:	f1bb 0f01 	cmp.w	fp, #1
 802747c:	f47f af07 	bne.w	802728e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8027480:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8027540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8027484:	f8db 0000 	ldr.w	r0, [fp]
 8027488:	6803      	ldr	r3, [r0, #0]
 802748a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802748c:	4798      	blx	r3
 802748e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8027492:	465a      	mov	r2, fp
 8027494:	d006      	beq.n	80274a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8027496:	f1b8 0f04 	cmp.w	r8, #4
 802749a:	d13e      	bne.n	802751a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 802749c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802749e:	3300      	adds	r3, #0
 80274a0:	bf18      	it	ne
 80274a2:	2301      	movne	r3, #1
 80274a4:	0580      	lsls	r0, r0, #22
 80274a6:	d56b      	bpl.n	8027580 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 80274a8:	f1b8 0f08 	cmp.w	r8, #8
 80274ac:	d168      	bne.n	8027580 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 80274ae:	2b00      	cmp	r3, #0
 80274b0:	bf0c      	ite	eq
 80274b2:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80274b6:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80274ba:	2d00      	cmp	r5, #0
 80274bc:	f47f aee7 	bne.w	802728e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80274c0:	2e00      	cmp	r6, #0
 80274c2:	f47f aee4 	bne.w	802728e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80274c6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80274c8:	19e3      	adds	r3, r4, r7
 80274ca:	4283      	cmp	r3, r0
 80274cc:	f73f aedf 	bgt.w	802728e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80274d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274d2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80274d4:	444b      	add	r3, r9
 80274d6:	4283      	cmp	r3, r0
 80274d8:	f73f aed9 	bgt.w	802728e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80274dc:	2500      	movs	r5, #0
 80274de:	6810      	ldr	r0, [r2, #0]
 80274e0:	b2bf      	uxth	r7, r7
 80274e2:	6804      	ldr	r4, [r0, #0]
 80274e4:	f1b8 0f08 	cmp.w	r8, #8
 80274e8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80274ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80274ee:	bf1c      	itt	ne
 80274f0:	3701      	addne	r7, #1
 80274f2:	f027 0701 	bicne.w	r7, r7, #1
 80274f6:	9104      	str	r1, [sp, #16]
 80274f8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80274fa:	bf18      	it	ne
 80274fc:	b2bf      	uxthne	r7, r7
 80274fe:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8027502:	e9cd 7900 	strd	r7, r9, [sp]
 8027506:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 802750a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802750e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8027510:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027512:	47a0      	blx	r4
 8027514:	b019      	add	sp, #100	@ 0x64
 8027516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802751a:	2300      	movs	r3, #0
 802751c:	e7c2      	b.n	80274a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 802751e:	2208      	movs	r2, #8
 8027520:	fb92 f3f8 	sdiv	r3, r2, r8
 8027524:	1e5a      	subs	r2, r3, #1
 8027526:	443a      	add	r2, r7
 8027528:	fb92 f2f3 	sdiv	r2, r2, r3
 802752c:	fb12 f203 	smulbb	r2, r2, r3
 8027530:	b292      	uxth	r2, r2
 8027532:	e6b1      	b.n	8027298 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8027534:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8027536:	e6ed      	b.n	8027314 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8027538:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802753a:	e783      	b.n	8027444 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802753c:	20011ff4 	.word	0x20011ff4
 8027540:	20011ffc 	.word	0x20011ffc
 8027544:	20011ff6 	.word	0x20011ff6
 8027548:	00fff800 	.word	0x00fff800
 802754c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802754e:	b153      	cbz	r3, 8027566 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 8027550:	441e      	add	r6, r3
 8027552:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027554:	b2b6      	uxth	r6, r6
 8027556:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802755a:	781a      	ldrb	r2, [r3, #0]
 802755c:	f006 0607 	and.w	r6, r6, #7
 8027560:	4132      	asrs	r2, r6
 8027562:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027564:	b2d2      	uxtb	r2, r2
 8027566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027568:	445b      	add	r3, fp
 802756a:	930a      	str	r3, [sp, #40]	@ 0x28
 802756c:	e708      	b.n	8027380 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 802756e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027570:	2b00      	cmp	r3, #0
 8027572:	d1cf      	bne.n	8027514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8027574:	4b05      	ldr	r3, [pc, #20]	@ (802758c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 8027576:	6818      	ldr	r0, [r3, #0]
 8027578:	6803      	ldr	r3, [r0, #0]
 802757a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802757c:	4798      	blx	r3
 802757e:	e7c9      	b.n	8027514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8027580:	2b00      	cmp	r3, #0
 8027582:	f43f ae84 	beq.w	802728e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8027586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 802758a:	e796      	b.n	80274ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 802758c:	20011ffc 	.word	0x20011ffc

08027590 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8027590:	b538      	push	{r3, r4, r5, lr}
 8027592:	4605      	mov	r5, r0
 8027594:	4c13      	ldr	r4, [pc, #76]	@ (80275e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 8027596:	e8d4 3f8f 	ldab	r3, [r4]
 802759a:	07da      	lsls	r2, r3, #31
 802759c:	d40b      	bmi.n	80275b6 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 802759e:	4620      	mov	r0, r4
 80275a0:	f008 f9cf 	bl	802f942 <__cxa_guard_acquire>
 80275a4:	b138      	cbz	r0, 80275b6 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 80275a6:	4620      	mov	r0, r4
 80275a8:	f008 f9d7 	bl	802f95a <__cxa_guard_release>
 80275ac:	4a0e      	ldr	r2, [pc, #56]	@ (80275e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80275ae:	490f      	ldr	r1, [pc, #60]	@ (80275ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80275b0:	480f      	ldr	r0, [pc, #60]	@ (80275f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80275b2:	f008 f9bf 	bl	802f934 <__aeabi_atexit>
 80275b6:	4c0f      	ldr	r4, [pc, #60]	@ (80275f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80275b8:	e8d4 3f8f 	ldab	r3, [r4]
 80275bc:	07db      	lsls	r3, r3, #31
 80275be:	d40b      	bmi.n	80275d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 80275c0:	4620      	mov	r0, r4
 80275c2:	f008 f9be 	bl	802f942 <__cxa_guard_acquire>
 80275c6:	b138      	cbz	r0, 80275d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 80275c8:	4620      	mov	r0, r4
 80275ca:	f008 f9c6 	bl	802f95a <__cxa_guard_release>
 80275ce:	4a06      	ldr	r2, [pc, #24]	@ (80275e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80275d0:	4909      	ldr	r1, [pc, #36]	@ (80275f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80275d2:	480a      	ldr	r0, [pc, #40]	@ (80275fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80275d4:	f008 f9ae 	bl	802f934 <__aeabi_atexit>
 80275d8:	4b05      	ldr	r3, [pc, #20]	@ (80275f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80275da:	616b      	str	r3, [r5, #20]
 80275dc:	4b07      	ldr	r3, [pc, #28]	@ (80275fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80275de:	61ab      	str	r3, [r5, #24]
 80275e0:	bd38      	pop	{r3, r4, r5, pc}
 80275e2:	bf00      	nop
 80275e4:	200120e0 	.word	0x200120e0
 80275e8:	20000000 	.word	0x20000000
 80275ec:	08023753 	.word	0x08023753
 80275f0:	20000070 	.word	0x20000070
 80275f4:	200120e4 	.word	0x200120e4
 80275f8:	08023751 	.word	0x08023751
 80275fc:	20000074 	.word	0x20000074

08027600 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8027600:	b538      	push	{r3, r4, r5, lr}
 8027602:	4605      	mov	r5, r0
 8027604:	4c13      	ldr	r4, [pc, #76]	@ (8027654 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 8027606:	e8d4 3f8f 	ldab	r3, [r4]
 802760a:	07da      	lsls	r2, r3, #31
 802760c:	d40b      	bmi.n	8027626 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 802760e:	4620      	mov	r0, r4
 8027610:	f008 f997 	bl	802f942 <__cxa_guard_acquire>
 8027614:	b138      	cbz	r0, 8027626 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 8027616:	4620      	mov	r0, r4
 8027618:	f008 f99f 	bl	802f95a <__cxa_guard_release>
 802761c:	4a0e      	ldr	r2, [pc, #56]	@ (8027658 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802761e:	490f      	ldr	r1, [pc, #60]	@ (802765c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8027620:	480f      	ldr	r0, [pc, #60]	@ (8027660 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8027622:	f008 f987 	bl	802f934 <__aeabi_atexit>
 8027626:	4c0f      	ldr	r4, [pc, #60]	@ (8027664 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8027628:	e8d4 3f8f 	ldab	r3, [r4]
 802762c:	07db      	lsls	r3, r3, #31
 802762e:	d40b      	bmi.n	8027648 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8027630:	4620      	mov	r0, r4
 8027632:	f008 f986 	bl	802f942 <__cxa_guard_acquire>
 8027636:	b138      	cbz	r0, 8027648 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8027638:	4620      	mov	r0, r4
 802763a:	f008 f98e 	bl	802f95a <__cxa_guard_release>
 802763e:	4a06      	ldr	r2, [pc, #24]	@ (8027658 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8027640:	4909      	ldr	r1, [pc, #36]	@ (8027668 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8027642:	480a      	ldr	r0, [pc, #40]	@ (802766c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8027644:	f008 f976 	bl	802f934 <__aeabi_atexit>
 8027648:	4b05      	ldr	r3, [pc, #20]	@ (8027660 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802764a:	60eb      	str	r3, [r5, #12]
 802764c:	4b07      	ldr	r3, [pc, #28]	@ (802766c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802764e:	612b      	str	r3, [r5, #16]
 8027650:	bd38      	pop	{r3, r4, r5, pc}
 8027652:	bf00      	nop
 8027654:	200120b8 	.word	0x200120b8
 8027658:	20000000 	.word	0x20000000
 802765c:	08023757 	.word	0x08023757
 8027660:	20000048 	.word	0x20000048
 8027664:	200120bc 	.word	0x200120bc
 8027668:	08023755 	.word	0x08023755
 802766c:	2000004c 	.word	0x2000004c

08027670 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8027670:	b510      	push	{r4, lr}
 8027672:	4604      	mov	r4, r0
 8027674:	f7ff ff8c 	bl	8027590 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8027678:	4620      	mov	r0, r4
 802767a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802767e:	f7ff bfbf 	b.w	8027600 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08027684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8027684:	b538      	push	{r3, r4, r5, lr}
 8027686:	4605      	mov	r5, r0
 8027688:	4c13      	ldr	r4, [pc, #76]	@ (80276d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 802768a:	e8d4 3f8f 	ldab	r3, [r4]
 802768e:	07da      	lsls	r2, r3, #31
 8027690:	d40b      	bmi.n	80276aa <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8027692:	4620      	mov	r0, r4
 8027694:	f008 f955 	bl	802f942 <__cxa_guard_acquire>
 8027698:	b138      	cbz	r0, 80276aa <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 802769a:	4620      	mov	r0, r4
 802769c:	f008 f95d 	bl	802f95a <__cxa_guard_release>
 80276a0:	4a0e      	ldr	r2, [pc, #56]	@ (80276dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80276a2:	490f      	ldr	r1, [pc, #60]	@ (80276e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80276a4:	480f      	ldr	r0, [pc, #60]	@ (80276e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80276a6:	f008 f945 	bl	802f934 <__aeabi_atexit>
 80276aa:	4c0f      	ldr	r4, [pc, #60]	@ (80276e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80276ac:	e8d4 3f8f 	ldab	r3, [r4]
 80276b0:	07db      	lsls	r3, r3, #31
 80276b2:	d40b      	bmi.n	80276cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 80276b4:	4620      	mov	r0, r4
 80276b6:	f008 f944 	bl	802f942 <__cxa_guard_acquire>
 80276ba:	b138      	cbz	r0, 80276cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 80276bc:	4620      	mov	r0, r4
 80276be:	f008 f94c 	bl	802f95a <__cxa_guard_release>
 80276c2:	4a06      	ldr	r2, [pc, #24]	@ (80276dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80276c4:	4909      	ldr	r1, [pc, #36]	@ (80276ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80276c6:	480a      	ldr	r0, [pc, #40]	@ (80276f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80276c8:	f008 f934 	bl	802f934 <__aeabi_atexit>
 80276cc:	4b05      	ldr	r3, [pc, #20]	@ (80276e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80276ce:	626b      	str	r3, [r5, #36]	@ 0x24
 80276d0:	4b07      	ldr	r3, [pc, #28]	@ (80276f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80276d2:	62ab      	str	r3, [r5, #40]	@ 0x28
 80276d4:	bd38      	pop	{r3, r4, r5, pc}
 80276d6:	bf00      	nop
 80276d8:	200120e8 	.word	0x200120e8
 80276dc:	20000000 	.word	0x20000000
 80276e0:	0802374b 	.word	0x0802374b
 80276e4:	20000078 	.word	0x20000078
 80276e8:	200120ec 	.word	0x200120ec
 80276ec:	08023749 	.word	0x08023749
 80276f0:	2000007c 	.word	0x2000007c

080276f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80276f4:	b538      	push	{r3, r4, r5, lr}
 80276f6:	4605      	mov	r5, r0
 80276f8:	4c13      	ldr	r4, [pc, #76]	@ (8027748 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 80276fa:	e8d4 3f8f 	ldab	r3, [r4]
 80276fe:	07da      	lsls	r2, r3, #31
 8027700:	d40b      	bmi.n	802771a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 8027702:	4620      	mov	r0, r4
 8027704:	f008 f91d 	bl	802f942 <__cxa_guard_acquire>
 8027708:	b138      	cbz	r0, 802771a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 802770a:	4620      	mov	r0, r4
 802770c:	f008 f925 	bl	802f95a <__cxa_guard_release>
 8027710:	4a0e      	ldr	r2, [pc, #56]	@ (802774c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8027712:	490f      	ldr	r1, [pc, #60]	@ (8027750 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8027714:	480f      	ldr	r0, [pc, #60]	@ (8027754 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8027716:	f008 f90d 	bl	802f934 <__aeabi_atexit>
 802771a:	4c0f      	ldr	r4, [pc, #60]	@ (8027758 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802771c:	e8d4 3f8f 	ldab	r3, [r4]
 8027720:	07db      	lsls	r3, r3, #31
 8027722:	d40b      	bmi.n	802773c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8027724:	4620      	mov	r0, r4
 8027726:	f008 f90c 	bl	802f942 <__cxa_guard_acquire>
 802772a:	b138      	cbz	r0, 802773c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 802772c:	4620      	mov	r0, r4
 802772e:	f008 f914 	bl	802f95a <__cxa_guard_release>
 8027732:	4a06      	ldr	r2, [pc, #24]	@ (802774c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8027734:	4909      	ldr	r1, [pc, #36]	@ (802775c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8027736:	480a      	ldr	r0, [pc, #40]	@ (8027760 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8027738:	f008 f8fc 	bl	802f934 <__aeabi_atexit>
 802773c:	4b05      	ldr	r3, [pc, #20]	@ (8027754 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802773e:	61eb      	str	r3, [r5, #28]
 8027740:	4b07      	ldr	r3, [pc, #28]	@ (8027760 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8027742:	622b      	str	r3, [r5, #32]
 8027744:	bd38      	pop	{r3, r4, r5, pc}
 8027746:	bf00      	nop
 8027748:	200120c0 	.word	0x200120c0
 802774c:	20000000 	.word	0x20000000
 8027750:	0802374f 	.word	0x0802374f
 8027754:	20000050 	.word	0x20000050
 8027758:	200120c4 	.word	0x200120c4
 802775c:	0802374d 	.word	0x0802374d
 8027760:	20000054 	.word	0x20000054

08027764 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8027764:	b510      	push	{r4, lr}
 8027766:	4604      	mov	r4, r0
 8027768:	f7ff ff8c 	bl	8027684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802776c:	4620      	mov	r0, r4
 802776e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027772:	f7ff bfbf 	b.w	80276f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08027778 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8027778:	b538      	push	{r3, r4, r5, lr}
 802777a:	4605      	mov	r5, r0
 802777c:	4c13      	ldr	r4, [pc, #76]	@ (80277cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 802777e:	e8d4 3f8f 	ldab	r3, [r4]
 8027782:	07da      	lsls	r2, r3, #31
 8027784:	d40b      	bmi.n	802779e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8027786:	4620      	mov	r0, r4
 8027788:	f008 f8db 	bl	802f942 <__cxa_guard_acquire>
 802778c:	b138      	cbz	r0, 802779e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 802778e:	4620      	mov	r0, r4
 8027790:	f008 f8e3 	bl	802f95a <__cxa_guard_release>
 8027794:	4a0e      	ldr	r2, [pc, #56]	@ (80277d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8027796:	490f      	ldr	r1, [pc, #60]	@ (80277d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8027798:	480f      	ldr	r0, [pc, #60]	@ (80277d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802779a:	f008 f8cb 	bl	802f934 <__aeabi_atexit>
 802779e:	4c0f      	ldr	r4, [pc, #60]	@ (80277dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80277a0:	e8d4 3f8f 	ldab	r3, [r4]
 80277a4:	07db      	lsls	r3, r3, #31
 80277a6:	d40b      	bmi.n	80277c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 80277a8:	4620      	mov	r0, r4
 80277aa:	f008 f8ca 	bl	802f942 <__cxa_guard_acquire>
 80277ae:	b138      	cbz	r0, 80277c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 80277b0:	4620      	mov	r0, r4
 80277b2:	f008 f8d2 	bl	802f95a <__cxa_guard_release>
 80277b6:	4a06      	ldr	r2, [pc, #24]	@ (80277d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80277b8:	4909      	ldr	r1, [pc, #36]	@ (80277e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80277ba:	480a      	ldr	r0, [pc, #40]	@ (80277e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80277bc:	f008 f8ba 	bl	802f934 <__aeabi_atexit>
 80277c0:	4b05      	ldr	r3, [pc, #20]	@ (80277d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80277c2:	636b      	str	r3, [r5, #52]	@ 0x34
 80277c4:	4b07      	ldr	r3, [pc, #28]	@ (80277e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80277c6:	63ab      	str	r3, [r5, #56]	@ 0x38
 80277c8:	bd38      	pop	{r3, r4, r5, pc}
 80277ca:	bf00      	nop
 80277cc:	200120f8 	.word	0x200120f8
 80277d0:	20000000 	.word	0x20000000
 80277d4:	08023743 	.word	0x08023743
 80277d8:	20000088 	.word	0x20000088
 80277dc:	200120fc 	.word	0x200120fc
 80277e0:	08023741 	.word	0x08023741
 80277e4:	2000008c 	.word	0x2000008c

080277e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80277e8:	b538      	push	{r3, r4, r5, lr}
 80277ea:	4605      	mov	r5, r0
 80277ec:	4c13      	ldr	r4, [pc, #76]	@ (802783c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 80277ee:	e8d4 3f8f 	ldab	r3, [r4]
 80277f2:	07da      	lsls	r2, r3, #31
 80277f4:	d40b      	bmi.n	802780e <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 80277f6:	4620      	mov	r0, r4
 80277f8:	f008 f8a3 	bl	802f942 <__cxa_guard_acquire>
 80277fc:	b138      	cbz	r0, 802780e <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 80277fe:	4620      	mov	r0, r4
 8027800:	f008 f8ab 	bl	802f95a <__cxa_guard_release>
 8027804:	4a0e      	ldr	r2, [pc, #56]	@ (8027840 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8027806:	490f      	ldr	r1, [pc, #60]	@ (8027844 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8027808:	480f      	ldr	r0, [pc, #60]	@ (8027848 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802780a:	f008 f893 	bl	802f934 <__aeabi_atexit>
 802780e:	4c0f      	ldr	r4, [pc, #60]	@ (802784c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8027810:	e8d4 3f8f 	ldab	r3, [r4]
 8027814:	07db      	lsls	r3, r3, #31
 8027816:	d40b      	bmi.n	8027830 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8027818:	4620      	mov	r0, r4
 802781a:	f008 f892 	bl	802f942 <__cxa_guard_acquire>
 802781e:	b138      	cbz	r0, 8027830 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8027820:	4620      	mov	r0, r4
 8027822:	f008 f89a 	bl	802f95a <__cxa_guard_release>
 8027826:	4a06      	ldr	r2, [pc, #24]	@ (8027840 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8027828:	4909      	ldr	r1, [pc, #36]	@ (8027850 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802782a:	480a      	ldr	r0, [pc, #40]	@ (8027854 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802782c:	f008 f882 	bl	802f934 <__aeabi_atexit>
 8027830:	4b05      	ldr	r3, [pc, #20]	@ (8027848 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8027832:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8027834:	4b07      	ldr	r3, [pc, #28]	@ (8027854 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8027836:	632b      	str	r3, [r5, #48]	@ 0x30
 8027838:	bd38      	pop	{r3, r4, r5, pc}
 802783a:	bf00      	nop
 802783c:	200120c8 	.word	0x200120c8
 8027840:	20000000 	.word	0x20000000
 8027844:	08023747 	.word	0x08023747
 8027848:	20000058 	.word	0x20000058
 802784c:	200120cc 	.word	0x200120cc
 8027850:	08023745 	.word	0x08023745
 8027854:	2000005c 	.word	0x2000005c

08027858 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8027858:	b510      	push	{r4, lr}
 802785a:	4604      	mov	r4, r0
 802785c:	f7ff ff8c 	bl	8027778 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8027860:	4620      	mov	r0, r4
 8027862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027866:	f7ff bfbf 	b.w	80277e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802786c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 802786c:	b538      	push	{r3, r4, r5, lr}
 802786e:	4605      	mov	r5, r0
 8027870:	4c13      	ldr	r4, [pc, #76]	@ (80278c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 8027872:	e8d4 3f8f 	ldab	r3, [r4]
 8027876:	07da      	lsls	r2, r3, #31
 8027878:	d40b      	bmi.n	8027892 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 802787a:	4620      	mov	r0, r4
 802787c:	f008 f861 	bl	802f942 <__cxa_guard_acquire>
 8027880:	b138      	cbz	r0, 8027892 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 8027882:	4620      	mov	r0, r4
 8027884:	f008 f869 	bl	802f95a <__cxa_guard_release>
 8027888:	4a0e      	ldr	r2, [pc, #56]	@ (80278c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802788a:	490f      	ldr	r1, [pc, #60]	@ (80278c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802788c:	480f      	ldr	r0, [pc, #60]	@ (80278cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802788e:	f008 f851 	bl	802f934 <__aeabi_atexit>
 8027892:	4c0f      	ldr	r4, [pc, #60]	@ (80278d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8027894:	e8d4 3f8f 	ldab	r3, [r4]
 8027898:	07db      	lsls	r3, r3, #31
 802789a:	d40b      	bmi.n	80278b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 802789c:	4620      	mov	r0, r4
 802789e:	f008 f850 	bl	802f942 <__cxa_guard_acquire>
 80278a2:	b138      	cbz	r0, 80278b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 80278a4:	4620      	mov	r0, r4
 80278a6:	f008 f858 	bl	802f95a <__cxa_guard_release>
 80278aa:	4a06      	ldr	r2, [pc, #24]	@ (80278c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80278ac:	4909      	ldr	r1, [pc, #36]	@ (80278d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80278ae:	480a      	ldr	r0, [pc, #40]	@ (80278d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80278b0:	f008 f840 	bl	802f934 <__aeabi_atexit>
 80278b4:	4b05      	ldr	r3, [pc, #20]	@ (80278cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80278b6:	656b      	str	r3, [r5, #84]	@ 0x54
 80278b8:	4b07      	ldr	r3, [pc, #28]	@ (80278d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80278ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 80278bc:	bd38      	pop	{r3, r4, r5, pc}
 80278be:	bf00      	nop
 80278c0:	20012100 	.word	0x20012100
 80278c4:	20000000 	.word	0x20000000
 80278c8:	08023733 	.word	0x08023733
 80278cc:	20000090 	.word	0x20000090
 80278d0:	20012104 	.word	0x20012104
 80278d4:	08023731 	.word	0x08023731
 80278d8:	20000094 	.word	0x20000094

080278dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80278dc:	b538      	push	{r3, r4, r5, lr}
 80278de:	4605      	mov	r5, r0
 80278e0:	4c13      	ldr	r4, [pc, #76]	@ (8027930 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 80278e2:	e8d4 3f8f 	ldab	r3, [r4]
 80278e6:	07da      	lsls	r2, r3, #31
 80278e8:	d40b      	bmi.n	8027902 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 80278ea:	4620      	mov	r0, r4
 80278ec:	f008 f829 	bl	802f942 <__cxa_guard_acquire>
 80278f0:	b138      	cbz	r0, 8027902 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 80278f2:	4620      	mov	r0, r4
 80278f4:	f008 f831 	bl	802f95a <__cxa_guard_release>
 80278f8:	4a0e      	ldr	r2, [pc, #56]	@ (8027934 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80278fa:	490f      	ldr	r1, [pc, #60]	@ (8027938 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80278fc:	480f      	ldr	r0, [pc, #60]	@ (802793c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80278fe:	f008 f819 	bl	802f934 <__aeabi_atexit>
 8027902:	4c0f      	ldr	r4, [pc, #60]	@ (8027940 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8027904:	e8d4 3f8f 	ldab	r3, [r4]
 8027908:	07db      	lsls	r3, r3, #31
 802790a:	d40b      	bmi.n	8027924 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 802790c:	4620      	mov	r0, r4
 802790e:	f008 f818 	bl	802f942 <__cxa_guard_acquire>
 8027912:	b138      	cbz	r0, 8027924 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8027914:	4620      	mov	r0, r4
 8027916:	f008 f820 	bl	802f95a <__cxa_guard_release>
 802791a:	4a06      	ldr	r2, [pc, #24]	@ (8027934 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802791c:	4909      	ldr	r1, [pc, #36]	@ (8027944 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802791e:	480a      	ldr	r0, [pc, #40]	@ (8027948 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8027920:	f008 f808 	bl	802f934 <__aeabi_atexit>
 8027924:	4b05      	ldr	r3, [pc, #20]	@ (802793c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8027926:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8027928:	4b07      	ldr	r3, [pc, #28]	@ (8027948 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802792a:	652b      	str	r3, [r5, #80]	@ 0x50
 802792c:	bd38      	pop	{r3, r4, r5, pc}
 802792e:	bf00      	nop
 8027930:	20012108 	.word	0x20012108
 8027934:	20000000 	.word	0x20000000
 8027938:	08023737 	.word	0x08023737
 802793c:	20000098 	.word	0x20000098
 8027940:	2001210c 	.word	0x2001210c
 8027944:	08023735 	.word	0x08023735
 8027948:	2000009c 	.word	0x2000009c

0802794c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 802794c:	b538      	push	{r3, r4, r5, lr}
 802794e:	4605      	mov	r5, r0
 8027950:	4c13      	ldr	r4, [pc, #76]	@ (80279a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 8027952:	e8d4 3f8f 	ldab	r3, [r4]
 8027956:	07da      	lsls	r2, r3, #31
 8027958:	d40b      	bmi.n	8027972 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 802795a:	4620      	mov	r0, r4
 802795c:	f007 fff1 	bl	802f942 <__cxa_guard_acquire>
 8027960:	b138      	cbz	r0, 8027972 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8027962:	4620      	mov	r0, r4
 8027964:	f007 fff9 	bl	802f95a <__cxa_guard_release>
 8027968:	4a0e      	ldr	r2, [pc, #56]	@ (80279a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802796a:	490f      	ldr	r1, [pc, #60]	@ (80279a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802796c:	480f      	ldr	r0, [pc, #60]	@ (80279ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802796e:	f007 ffe1 	bl	802f934 <__aeabi_atexit>
 8027972:	4c0f      	ldr	r4, [pc, #60]	@ (80279b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8027974:	e8d4 3f8f 	ldab	r3, [r4]
 8027978:	07db      	lsls	r3, r3, #31
 802797a:	d40b      	bmi.n	8027994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 802797c:	4620      	mov	r0, r4
 802797e:	f007 ffe0 	bl	802f942 <__cxa_guard_acquire>
 8027982:	b138      	cbz	r0, 8027994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8027984:	4620      	mov	r0, r4
 8027986:	f007 ffe8 	bl	802f95a <__cxa_guard_release>
 802798a:	4a06      	ldr	r2, [pc, #24]	@ (80279a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802798c:	4909      	ldr	r1, [pc, #36]	@ (80279b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802798e:	480a      	ldr	r0, [pc, #40]	@ (80279b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8027990:	f007 ffd0 	bl	802f934 <__aeabi_atexit>
 8027994:	4b05      	ldr	r3, [pc, #20]	@ (80279ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8027996:	646b      	str	r3, [r5, #68]	@ 0x44
 8027998:	4b07      	ldr	r3, [pc, #28]	@ (80279b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802799a:	64ab      	str	r3, [r5, #72]	@ 0x48
 802799c:	bd38      	pop	{r3, r4, r5, pc}
 802799e:	bf00      	nop
 80279a0:	200120d0 	.word	0x200120d0
 80279a4:	20000000 	.word	0x20000000
 80279a8:	0802373b 	.word	0x0802373b
 80279ac:	20000060 	.word	0x20000060
 80279b0:	200120d4 	.word	0x200120d4
 80279b4:	08023739 	.word	0x08023739
 80279b8:	20000064 	.word	0x20000064

080279bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80279bc:	b538      	push	{r3, r4, r5, lr}
 80279be:	4605      	mov	r5, r0
 80279c0:	4c13      	ldr	r4, [pc, #76]	@ (8027a10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 80279c2:	e8d4 3f8f 	ldab	r3, [r4]
 80279c6:	07da      	lsls	r2, r3, #31
 80279c8:	d40b      	bmi.n	80279e2 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 80279ca:	4620      	mov	r0, r4
 80279cc:	f007 ffb9 	bl	802f942 <__cxa_guard_acquire>
 80279d0:	b138      	cbz	r0, 80279e2 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 80279d2:	4620      	mov	r0, r4
 80279d4:	f007 ffc1 	bl	802f95a <__cxa_guard_release>
 80279d8:	4a0e      	ldr	r2, [pc, #56]	@ (8027a14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80279da:	490f      	ldr	r1, [pc, #60]	@ (8027a18 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80279dc:	480f      	ldr	r0, [pc, #60]	@ (8027a1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80279de:	f007 ffa9 	bl	802f934 <__aeabi_atexit>
 80279e2:	4c0f      	ldr	r4, [pc, #60]	@ (8027a20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80279e4:	e8d4 3f8f 	ldab	r3, [r4]
 80279e8:	07db      	lsls	r3, r3, #31
 80279ea:	d40b      	bmi.n	8027a04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 80279ec:	4620      	mov	r0, r4
 80279ee:	f007 ffa8 	bl	802f942 <__cxa_guard_acquire>
 80279f2:	b138      	cbz	r0, 8027a04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 80279f4:	4620      	mov	r0, r4
 80279f6:	f007 ffb0 	bl	802f95a <__cxa_guard_release>
 80279fa:	4a06      	ldr	r2, [pc, #24]	@ (8027a14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80279fc:	4909      	ldr	r1, [pc, #36]	@ (8027a24 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80279fe:	480a      	ldr	r0, [pc, #40]	@ (8027a28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8027a00:	f007 ff98 	bl	802f934 <__aeabi_atexit>
 8027a04:	4b05      	ldr	r3, [pc, #20]	@ (8027a1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8027a06:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8027a08:	4b07      	ldr	r3, [pc, #28]	@ (8027a28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8027a0a:	642b      	str	r3, [r5, #64]	@ 0x40
 8027a0c:	bd38      	pop	{r3, r4, r5, pc}
 8027a0e:	bf00      	nop
 8027a10:	200120f0 	.word	0x200120f0
 8027a14:	20000000 	.word	0x20000000
 8027a18:	0802373f 	.word	0x0802373f
 8027a1c:	20000080 	.word	0x20000080
 8027a20:	200120f4 	.word	0x200120f4
 8027a24:	0802373d 	.word	0x0802373d
 8027a28:	20000084 	.word	0x20000084

08027a2c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8027a2c:	b510      	push	{r4, lr}
 8027a2e:	4604      	mov	r4, r0
 8027a30:	f7ff ff1c 	bl	802786c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8027a34:	4620      	mov	r0, r4
 8027a36:	f7ff ff89 	bl	802794c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8027a3a:	4620      	mov	r0, r4
 8027a3c:	f7ff ff4e 	bl	80278dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8027a40:	4620      	mov	r0, r4
 8027a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027a46:	f7ff bfb9 	b.w	80279bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08027a4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8027a4c:	b538      	push	{r3, r4, r5, lr}
 8027a4e:	4605      	mov	r5, r0
 8027a50:	4c13      	ldr	r4, [pc, #76]	@ (8027aa0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 8027a52:	e8d4 3f8f 	ldab	r3, [r4]
 8027a56:	07da      	lsls	r2, r3, #31
 8027a58:	d40b      	bmi.n	8027a72 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8027a5a:	4620      	mov	r0, r4
 8027a5c:	f007 ff71 	bl	802f942 <__cxa_guard_acquire>
 8027a60:	b138      	cbz	r0, 8027a72 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8027a62:	4620      	mov	r0, r4
 8027a64:	f007 ff79 	bl	802f95a <__cxa_guard_release>
 8027a68:	4a0e      	ldr	r2, [pc, #56]	@ (8027aa4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8027a6a:	490f      	ldr	r1, [pc, #60]	@ (8027aa8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8027a6c:	480f      	ldr	r0, [pc, #60]	@ (8027aac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8027a6e:	f007 ff61 	bl	802f934 <__aeabi_atexit>
 8027a72:	4c0f      	ldr	r4, [pc, #60]	@ (8027ab0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8027a74:	e8d4 3f8f 	ldab	r3, [r4]
 8027a78:	07db      	lsls	r3, r3, #31
 8027a7a:	d40b      	bmi.n	8027a94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8027a7c:	4620      	mov	r0, r4
 8027a7e:	f007 ff60 	bl	802f942 <__cxa_guard_acquire>
 8027a82:	b138      	cbz	r0, 8027a94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8027a84:	4620      	mov	r0, r4
 8027a86:	f007 ff68 	bl	802f95a <__cxa_guard_release>
 8027a8a:	4a06      	ldr	r2, [pc, #24]	@ (8027aa4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8027a8c:	4909      	ldr	r1, [pc, #36]	@ (8027ab4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8027a8e:	480a      	ldr	r0, [pc, #40]	@ (8027ab8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8027a90:	f007 ff50 	bl	802f934 <__aeabi_atexit>
 8027a94:	4b05      	ldr	r3, [pc, #20]	@ (8027aac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8027a96:	666b      	str	r3, [r5, #100]	@ 0x64
 8027a98:	4b07      	ldr	r3, [pc, #28]	@ (8027ab8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8027a9a:	66ab      	str	r3, [r5, #104]	@ 0x68
 8027a9c:	bd38      	pop	{r3, r4, r5, pc}
 8027a9e:	bf00      	nop
 8027aa0:	200120d8 	.word	0x200120d8
 8027aa4:	20000000 	.word	0x20000000
 8027aa8:	0802372b 	.word	0x0802372b
 8027aac:	20000068 	.word	0x20000068
 8027ab0:	200120dc 	.word	0x200120dc
 8027ab4:	08023729 	.word	0x08023729
 8027ab8:	2000006c 	.word	0x2000006c

08027abc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8027abc:	b538      	push	{r3, r4, r5, lr}
 8027abe:	4605      	mov	r5, r0
 8027ac0:	4c13      	ldr	r4, [pc, #76]	@ (8027b10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 8027ac2:	e8d4 3f8f 	ldab	r3, [r4]
 8027ac6:	07da      	lsls	r2, r3, #31
 8027ac8:	d40b      	bmi.n	8027ae2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8027aca:	4620      	mov	r0, r4
 8027acc:	f007 ff39 	bl	802f942 <__cxa_guard_acquire>
 8027ad0:	b138      	cbz	r0, 8027ae2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8027ad2:	4620      	mov	r0, r4
 8027ad4:	f007 ff41 	bl	802f95a <__cxa_guard_release>
 8027ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8027b14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8027ada:	490f      	ldr	r1, [pc, #60]	@ (8027b18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8027adc:	480f      	ldr	r0, [pc, #60]	@ (8027b1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8027ade:	f007 ff29 	bl	802f934 <__aeabi_atexit>
 8027ae2:	4c0f      	ldr	r4, [pc, #60]	@ (8027b20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8027ae4:	e8d4 3f8f 	ldab	r3, [r4]
 8027ae8:	07db      	lsls	r3, r3, #31
 8027aea:	d40b      	bmi.n	8027b04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8027aec:	4620      	mov	r0, r4
 8027aee:	f007 ff28 	bl	802f942 <__cxa_guard_acquire>
 8027af2:	b138      	cbz	r0, 8027b04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8027af4:	4620      	mov	r0, r4
 8027af6:	f007 ff30 	bl	802f95a <__cxa_guard_release>
 8027afa:	4a06      	ldr	r2, [pc, #24]	@ (8027b14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8027afc:	4909      	ldr	r1, [pc, #36]	@ (8027b24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8027afe:	480a      	ldr	r0, [pc, #40]	@ (8027b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8027b00:	f007 ff18 	bl	802f934 <__aeabi_atexit>
 8027b04:	4b05      	ldr	r3, [pc, #20]	@ (8027b1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8027b06:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8027b08:	4b07      	ldr	r3, [pc, #28]	@ (8027b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8027b0a:	662b      	str	r3, [r5, #96]	@ 0x60
 8027b0c:	bd38      	pop	{r3, r4, r5, pc}
 8027b0e:	bf00      	nop
 8027b10:	200120b0 	.word	0x200120b0
 8027b14:	20000000 	.word	0x20000000
 8027b18:	0802372f 	.word	0x0802372f
 8027b1c:	20000040 	.word	0x20000040
 8027b20:	200120b4 	.word	0x200120b4
 8027b24:	0802372d 	.word	0x0802372d
 8027b28:	20000044 	.word	0x20000044

08027b2c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8027b2c:	b510      	push	{r4, lr}
 8027b2e:	4604      	mov	r4, r0
 8027b30:	f7ff ff8c 	bl	8027a4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8027b34:	4620      	mov	r0, r4
 8027b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027b3a:	f7ff bfbf 	b.w	8027abc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08027b40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8027b40:	b538      	push	{r3, r4, r5, lr}
 8027b42:	4605      	mov	r5, r0
 8027b44:	4c13      	ldr	r4, [pc, #76]	@ (8027b94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 8027b46:	e8d4 3f8f 	ldab	r3, [r4]
 8027b4a:	07da      	lsls	r2, r3, #31
 8027b4c:	d40b      	bmi.n	8027b66 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8027b4e:	4620      	mov	r0, r4
 8027b50:	f007 fef7 	bl	802f942 <__cxa_guard_acquire>
 8027b54:	b138      	cbz	r0, 8027b66 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8027b56:	4620      	mov	r0, r4
 8027b58:	f007 feff 	bl	802f95a <__cxa_guard_release>
 8027b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8027b98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8027b5e:	490f      	ldr	r1, [pc, #60]	@ (8027b9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8027b60:	480f      	ldr	r0, [pc, #60]	@ (8027ba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8027b62:	f007 fee7 	bl	802f934 <__aeabi_atexit>
 8027b66:	4c0f      	ldr	r4, [pc, #60]	@ (8027ba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8027b68:	e8d4 3f8f 	ldab	r3, [r4]
 8027b6c:	07db      	lsls	r3, r3, #31
 8027b6e:	d40b      	bmi.n	8027b88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8027b70:	4620      	mov	r0, r4
 8027b72:	f007 fee6 	bl	802f942 <__cxa_guard_acquire>
 8027b76:	b138      	cbz	r0, 8027b88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8027b78:	4620      	mov	r0, r4
 8027b7a:	f007 feee 	bl	802f95a <__cxa_guard_release>
 8027b7e:	4a06      	ldr	r2, [pc, #24]	@ (8027b98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8027b80:	4909      	ldr	r1, [pc, #36]	@ (8027ba8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8027b82:	480a      	ldr	r0, [pc, #40]	@ (8027bac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8027b84:	f007 fed6 	bl	802f934 <__aeabi_atexit>
 8027b88:	4b05      	ldr	r3, [pc, #20]	@ (8027ba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8027b8a:	676b      	str	r3, [r5, #116]	@ 0x74
 8027b8c:	4b07      	ldr	r3, [pc, #28]	@ (8027bac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8027b8e:	67ab      	str	r3, [r5, #120]	@ 0x78
 8027b90:	bd38      	pop	{r3, r4, r5, pc}
 8027b92:	bf00      	nop
 8027b94:	200120a8 	.word	0x200120a8
 8027b98:	20000000 	.word	0x20000000
 8027b9c:	08023723 	.word	0x08023723
 8027ba0:	20000038 	.word	0x20000038
 8027ba4:	200120ac 	.word	0x200120ac
 8027ba8:	08023721 	.word	0x08023721
 8027bac:	2000003c 	.word	0x2000003c

08027bb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8027bb0:	b538      	push	{r3, r4, r5, lr}
 8027bb2:	4605      	mov	r5, r0
 8027bb4:	4c13      	ldr	r4, [pc, #76]	@ (8027c04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 8027bb6:	e8d4 3f8f 	ldab	r3, [r4]
 8027bba:	07da      	lsls	r2, r3, #31
 8027bbc:	d40b      	bmi.n	8027bd6 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8027bbe:	4620      	mov	r0, r4
 8027bc0:	f007 febf 	bl	802f942 <__cxa_guard_acquire>
 8027bc4:	b138      	cbz	r0, 8027bd6 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8027bc6:	4620      	mov	r0, r4
 8027bc8:	f007 fec7 	bl	802f95a <__cxa_guard_release>
 8027bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8027c08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8027bce:	490f      	ldr	r1, [pc, #60]	@ (8027c0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8027bd0:	480f      	ldr	r0, [pc, #60]	@ (8027c10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8027bd2:	f007 feaf 	bl	802f934 <__aeabi_atexit>
 8027bd6:	4c0f      	ldr	r4, [pc, #60]	@ (8027c14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8027bd8:	e8d4 3f8f 	ldab	r3, [r4]
 8027bdc:	07db      	lsls	r3, r3, #31
 8027bde:	d40b      	bmi.n	8027bf8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8027be0:	4620      	mov	r0, r4
 8027be2:	f007 feae 	bl	802f942 <__cxa_guard_acquire>
 8027be6:	b138      	cbz	r0, 8027bf8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8027be8:	4620      	mov	r0, r4
 8027bea:	f007 feb6 	bl	802f95a <__cxa_guard_release>
 8027bee:	4a06      	ldr	r2, [pc, #24]	@ (8027c08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8027bf0:	4909      	ldr	r1, [pc, #36]	@ (8027c18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8027bf2:	480a      	ldr	r0, [pc, #40]	@ (8027c1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8027bf4:	f007 fe9e 	bl	802f934 <__aeabi_atexit>
 8027bf8:	4b05      	ldr	r3, [pc, #20]	@ (8027c10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8027bfa:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8027bfc:	4b07      	ldr	r3, [pc, #28]	@ (8027c1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8027bfe:	672b      	str	r3, [r5, #112]	@ 0x70
 8027c00:	bd38      	pop	{r3, r4, r5, pc}
 8027c02:	bf00      	nop
 8027c04:	200120a0 	.word	0x200120a0
 8027c08:	20000000 	.word	0x20000000
 8027c0c:	08023727 	.word	0x08023727
 8027c10:	20000030 	.word	0x20000030
 8027c14:	200120a4 	.word	0x200120a4
 8027c18:	08023725 	.word	0x08023725
 8027c1c:	20000034 	.word	0x20000034

08027c20 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8027c20:	b510      	push	{r4, lr}
 8027c22:	4604      	mov	r4, r0
 8027c24:	f7ff ff8c 	bl	8027b40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8027c28:	4620      	mov	r0, r4
 8027c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027c2e:	f7ff bfbf 	b.w	8027bb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08027c32 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8027c32:	b510      	push	{r4, lr}
 8027c34:	4604      	mov	r4, r0
 8027c36:	f7ff fff3 	bl	8027c20 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8027c3a:	4620      	mov	r0, r4
 8027c3c:	f7ff ff76 	bl	8027b2c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8027c40:	4620      	mov	r0, r4
 8027c42:	f7ff fe09 	bl	8027858 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8027c46:	4620      	mov	r0, r4
 8027c48:	f7ff fd12 	bl	8027670 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8027c4c:	4620      	mov	r0, r4
 8027c4e:	f7ff fd89 	bl	8027764 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8027c52:	4620      	mov	r0, r4
 8027c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027c58:	f7ff bee8 	b.w	8027a2c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08027c5c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8027c5c:	b538      	push	{r3, r4, r5, lr}
 8027c5e:	4605      	mov	r5, r0
 8027c60:	4c09      	ldr	r4, [pc, #36]	@ (8027c88 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 8027c62:	e8d4 3f8f 	ldab	r3, [r4]
 8027c66:	07db      	lsls	r3, r3, #31
 8027c68:	d40b      	bmi.n	8027c82 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8027c6a:	4620      	mov	r0, r4
 8027c6c:	f007 fe69 	bl	802f942 <__cxa_guard_acquire>
 8027c70:	b138      	cbz	r0, 8027c82 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8027c72:	4620      	mov	r0, r4
 8027c74:	f007 fe71 	bl	802f95a <__cxa_guard_release>
 8027c78:	4a04      	ldr	r2, [pc, #16]	@ (8027c8c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8027c7a:	4905      	ldr	r1, [pc, #20]	@ (8027c90 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8027c7c:	4805      	ldr	r0, [pc, #20]	@ (8027c94 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8027c7e:	f007 fe59 	bl	802f934 <__aeabi_atexit>
 8027c82:	4b04      	ldr	r3, [pc, #16]	@ (8027c94 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8027c84:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8027c86:	bd38      	pop	{r3, r4, r5, pc}
 8027c88:	20012094 	.word	0x20012094
 8027c8c:	20000000 	.word	0x20000000
 8027c90:	0802371f 	.word	0x0802371f
 8027c94:	20000028 	.word	0x20000028

08027c98 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8027c98:	b538      	push	{r3, r4, r5, lr}
 8027c9a:	4605      	mov	r5, r0
 8027c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8027cc8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8027c9e:	e8d4 3f8f 	ldab	r3, [r4]
 8027ca2:	07db      	lsls	r3, r3, #31
 8027ca4:	d40b      	bmi.n	8027cbe <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8027ca6:	4620      	mov	r0, r4
 8027ca8:	f007 fe4b 	bl	802f942 <__cxa_guard_acquire>
 8027cac:	b138      	cbz	r0, 8027cbe <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8027cae:	4620      	mov	r0, r4
 8027cb0:	f007 fe53 	bl	802f95a <__cxa_guard_release>
 8027cb4:	4a05      	ldr	r2, [pc, #20]	@ (8027ccc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8027cb6:	4906      	ldr	r1, [pc, #24]	@ (8027cd0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8027cb8:	4806      	ldr	r0, [pc, #24]	@ (8027cd4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8027cba:	f007 fe3b 	bl	802f934 <__aeabi_atexit>
 8027cbe:	4b05      	ldr	r3, [pc, #20]	@ (8027cd4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8027cc0:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8027cc4:	bd38      	pop	{r3, r4, r5, pc}
 8027cc6:	bf00      	nop
 8027cc8:	20012098 	.word	0x20012098
 8027ccc:	20000000 	.word	0x20000000
 8027cd0:	0802371d 	.word	0x0802371d
 8027cd4:	2000002c 	.word	0x2000002c

08027cd8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8027cd8:	b570      	push	{r4, r5, r6, lr}
 8027cda:	4606      	mov	r6, r0
 8027cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8027d0c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8027cde:	e8d5 3f8f 	ldab	r3, [r5]
 8027ce2:	f013 0f01 	tst.w	r3, #1
 8027ce6:	4c0a      	ldr	r4, [pc, #40]	@ (8027d10 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8027ce8:	d10d      	bne.n	8027d06 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8027cea:	4628      	mov	r0, r5
 8027cec:	f007 fe29 	bl	802f942 <__cxa_guard_acquire>
 8027cf0:	b148      	cbz	r0, 8027d06 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8027cf2:	4b08      	ldr	r3, [pc, #32]	@ (8027d14 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8027cf4:	4628      	mov	r0, r5
 8027cf6:	6023      	str	r3, [r4, #0]
 8027cf8:	f007 fe2f 	bl	802f95a <__cxa_guard_release>
 8027cfc:	4a06      	ldr	r2, [pc, #24]	@ (8027d18 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8027cfe:	4907      	ldr	r1, [pc, #28]	@ (8027d1c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8027d00:	4620      	mov	r0, r4
 8027d02:	f007 fe17 	bl	802f934 <__aeabi_atexit>
 8027d06:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8027d0a:	bd70      	pop	{r4, r5, r6, pc}
 8027d0c:	2001209c 	.word	0x2001209c
 8027d10:	20012214 	.word	0x20012214
 8027d14:	08033934 	.word	0x08033934
 8027d18:	20000000 	.word	0x20000000
 8027d1c:	0802371b 	.word	0x0802371b

08027d20 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8027d20:	b510      	push	{r4, lr}
 8027d22:	4604      	mov	r4, r0
 8027d24:	f7ff ff9a 	bl	8027c5c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8027d28:	4620      	mov	r0, r4
 8027d2a:	f7ff ffb5 	bl	8027c98 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8027d2e:	4620      	mov	r0, r4
 8027d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027d34:	f7ff bfd0 	b.w	8027cd8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08027d38 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8027d38:	b570      	push	{r4, r5, r6, lr}
 8027d3a:	4606      	mov	r6, r0
 8027d3c:	4d0b      	ldr	r5, [pc, #44]	@ (8027d6c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8027d3e:	e8d5 3f8f 	ldab	r3, [r5]
 8027d42:	f013 0f01 	tst.w	r3, #1
 8027d46:	4c0a      	ldr	r4, [pc, #40]	@ (8027d70 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8027d48:	d10d      	bne.n	8027d66 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8027d4a:	4628      	mov	r0, r5
 8027d4c:	f007 fdf9 	bl	802f942 <__cxa_guard_acquire>
 8027d50:	b148      	cbz	r0, 8027d66 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8027d52:	4b08      	ldr	r3, [pc, #32]	@ (8027d74 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8027d54:	4628      	mov	r0, r5
 8027d56:	6023      	str	r3, [r4, #0]
 8027d58:	f007 fdff 	bl	802f95a <__cxa_guard_release>
 8027d5c:	4a06      	ldr	r2, [pc, #24]	@ (8027d78 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8027d5e:	4907      	ldr	r1, [pc, #28]	@ (8027d7c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8027d60:	4620      	mov	r0, r4
 8027d62:	f007 fde7 	bl	802f934 <__aeabi_atexit>
 8027d66:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8027d6a:	bd70      	pop	{r4, r5, r6, pc}
 8027d6c:	20012090 	.word	0x20012090
 8027d70:	20012110 	.word	0x20012110
 8027d74:	08033950 	.word	0x08033950
 8027d78:	20000000 	.word	0x20000000
 8027d7c:	08023719 	.word	0x08023719

08027d80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8027d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d84:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8027d88:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8027d8c:	fb05 4c0e 	mla	ip, r5, lr, r4
 8027d90:	2d00      	cmp	r5, #0
 8027d92:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8027d96:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8027d9a:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8027d9e:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8027da2:	eb02 0a0c 	add.w	sl, r2, ip
 8027da6:	8808      	ldrh	r0, [r1, #0]
 8027da8:	f2c0 80b0 	blt.w	8027f0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8027dac:	45ab      	cmp	fp, r5
 8027dae:	f340 80ad 	ble.w	8027f0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8027db2:	2c00      	cmp	r4, #0
 8027db4:	f2c0 80a8 	blt.w	8027f08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8027db8:	45a6      	cmp	lr, r4
 8027dba:	f340 80a5 	ble.w	8027f08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8027dbe:	f812 200c 	ldrb.w	r2, [r2, ip]
 8027dc2:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8027dc6:	1c62      	adds	r2, r4, #1
 8027dc8:	f100 80a3 	bmi.w	8027f12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8027dcc:	4596      	cmp	lr, r2
 8027dce:	f340 80a0 	ble.w	8027f12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8027dd2:	f1b9 0f00 	cmp.w	r9, #0
 8027dd6:	f000 809c 	beq.w	8027f12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8027dda:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8027dde:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8027de2:	3501      	adds	r5, #1
 8027de4:	f100 8099 	bmi.w	8027f1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8027de8:	45ab      	cmp	fp, r5
 8027dea:	f340 8096 	ble.w	8027f1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8027dee:	2f00      	cmp	r7, #0
 8027df0:	f000 8093 	beq.w	8027f1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8027df4:	2c00      	cmp	r4, #0
 8027df6:	f2c0 808e 	blt.w	8027f16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8027dfa:	45a6      	cmp	lr, r4
 8027dfc:	f340 808b 	ble.w	8027f16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8027e00:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8027e04:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8027e08:	3401      	adds	r4, #1
 8027e0a:	f100 8089 	bmi.w	8027f20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8027e0e:	45a6      	cmp	lr, r4
 8027e10:	f340 8086 	ble.w	8027f20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8027e14:	f1b9 0f00 	cmp.w	r9, #0
 8027e18:	f000 8082 	beq.w	8027f20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8027e1c:	44d6      	add	lr, sl
 8027e1e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8027e22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8027e26:	fb19 fe07 	smulbb	lr, r9, r7
 8027e2a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027e2e:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027e32:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8027e36:	ea44 0808 	orr.w	r8, r4, r8
 8027e3a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027e3e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027e42:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027e46:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027e4a:	ea44 0c0c 	orr.w	ip, r4, ip
 8027e4e:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8027e52:	fb04 f40c 	mul.w	r4, r4, ip
 8027e56:	f1c7 0210 	rsb	r2, r7, #16
 8027e5a:	eba2 0209 	sub.w	r2, r2, r9
 8027e5e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027e62:	fb02 4808 	mla	r8, r2, r8, r4
 8027e66:	b2b4      	uxth	r4, r6
 8027e68:	43f6      	mvns	r6, r6
 8027e6a:	041a      	lsls	r2, r3, #16
 8027e6c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027e70:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027e74:	4313      	orrs	r3, r2
 8027e76:	fb0e 8303 	mla	r3, lr, r3, r8
 8027e7a:	042a      	lsls	r2, r5, #16
 8027e7c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027e80:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027e84:	432a      	orrs	r2, r5
 8027e86:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8027e8a:	fb07 3202 	mla	r2, r7, r2, r3
 8027e8e:	0d53      	lsrs	r3, r2, #21
 8027e90:	0952      	lsrs	r2, r2, #5
 8027e92:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027e96:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027e9a:	431a      	orrs	r2, r3
 8027e9c:	b293      	uxth	r3, r2
 8027e9e:	1202      	asrs	r2, r0, #8
 8027ea0:	b2f6      	uxtb	r6, r6
 8027ea2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027ea6:	fb12 f206 	smulbb	r2, r2, r6
 8027eaa:	10c7      	asrs	r7, r0, #3
 8027eac:	00c0      	lsls	r0, r0, #3
 8027eae:	b2c0      	uxtb	r0, r0
 8027eb0:	121d      	asrs	r5, r3, #8
 8027eb2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027eb6:	fb10 f006 	smulbb	r0, r0, r6
 8027eba:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027ebe:	fb17 f706 	smulbb	r7, r7, r6
 8027ec2:	fb05 2504 	mla	r5, r5, r4, r2
 8027ec6:	10da      	asrs	r2, r3, #3
 8027ec8:	00db      	lsls	r3, r3, #3
 8027eca:	b2db      	uxtb	r3, r3
 8027ecc:	fb03 0004 	mla	r0, r3, r4, r0
 8027ed0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027ed4:	fb02 7204 	mla	r2, r2, r4, r7
 8027ed8:	b2ad      	uxth	r5, r5
 8027eda:	b280      	uxth	r0, r0
 8027edc:	1c6b      	adds	r3, r5, #1
 8027ede:	b292      	uxth	r2, r2
 8027ee0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027ee4:	1c43      	adds	r3, r0, #1
 8027ee6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027eea:	1c50      	adds	r0, r2, #1
 8027eec:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8027ef0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027ef4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ef8:	0952      	lsrs	r2, r2, #5
 8027efa:	432b      	orrs	r3, r5
 8027efc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027f00:	4313      	orrs	r3, r2
 8027f02:	800b      	strh	r3, [r1, #0]
 8027f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f08:	4680      	mov	r8, r0
 8027f0a:	e75c      	b.n	8027dc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8027f0c:	4684      	mov	ip, r0
 8027f0e:	4680      	mov	r8, r0
 8027f10:	e767      	b.n	8027de2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8027f12:	4684      	mov	ip, r0
 8027f14:	e765      	b.n	8027de2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8027f16:	4605      	mov	r5, r0
 8027f18:	e776      	b.n	8027e08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8027f1a:	4603      	mov	r3, r0
 8027f1c:	4605      	mov	r5, r0
 8027f1e:	e782      	b.n	8027e26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8027f20:	4603      	mov	r3, r0
 8027f22:	e780      	b.n	8027e26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08027f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f28:	b099      	sub	sp, #100	@ 0x64
 8027f2a:	9215      	str	r2, [sp, #84]	@ 0x54
 8027f2c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027f2e:	9016      	str	r0, [sp, #88]	@ 0x58
 8027f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f32:	6850      	ldr	r0, [r2, #4]
 8027f34:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8027f38:	910c      	str	r1, [sp, #48]	@ 0x30
 8027f3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8027f3c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8027f40:	fb00 1303 	mla	r3, r0, r3, r1
 8027f44:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8027f48:	6812      	ldr	r2, [r2, #0]
 8027f4a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8027f4e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027f50:	681b      	ldr	r3, [r3, #0]
 8027f52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027f54:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027f56:	685e      	ldr	r6, [r3, #4]
 8027f58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027f5a:	3604      	adds	r6, #4
 8027f5c:	43db      	mvns	r3, r3
 8027f5e:	b2db      	uxtb	r3, r3
 8027f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8027f62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027f64:	2b00      	cmp	r3, #0
 8027f66:	dc03      	bgt.n	8027f70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027f68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027f6a:	2b00      	cmp	r3, #0
 8027f6c:	f340 8225 	ble.w	80283ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8027f70:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027f72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f76:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027f7a:	1e48      	subs	r0, r1, #1
 8027f7c:	1e57      	subs	r7, r2, #1
 8027f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	f340 80e3 	ble.w	802814c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8027f86:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8027f8a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8027f8e:	d406      	bmi.n	8027f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027f90:	4584      	cmp	ip, r0
 8027f92:	da04      	bge.n	8027f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027f94:	2b00      	cmp	r3, #0
 8027f96:	db02      	blt.n	8027f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027f98:	42bb      	cmp	r3, r7
 8027f9a:	f2c0 80d8 	blt.w	802814e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8027f9e:	f11c 0c01 	adds.w	ip, ip, #1
 8027fa2:	f100 80c9 	bmi.w	8028138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027fa6:	4561      	cmp	r1, ip
 8027fa8:	f2c0 80c6 	blt.w	8028138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027fac:	3301      	adds	r3, #1
 8027fae:	f100 80c3 	bmi.w	8028138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027fb2:	429a      	cmp	r2, r3
 8027fb4:	f2c0 80c0 	blt.w	8028138 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027fb8:	4647      	mov	r7, r8
 8027fba:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8027fbe:	f1bb 0f00 	cmp.w	fp, #0
 8027fc2:	f340 80e3 	ble.w	802818c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8027fc6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8027fc8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027fca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027fce:	ea5f 422a 	movs.w	r2, sl, asr #16
 8027fd2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8027fd6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8027fda:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027fde:	689b      	ldr	r3, [r3, #8]
 8027fe0:	f100 8121 	bmi.w	8028226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8027fe4:	f103 39ff 	add.w	r9, r3, #4294967295
 8027fe8:	454a      	cmp	r2, r9
 8027fea:	f280 811c 	bge.w	8028226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8027fee:	f1bc 0f00 	cmp.w	ip, #0
 8027ff2:	f2c0 8118 	blt.w	8028226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8027ff6:	f10e 39ff 	add.w	r9, lr, #4294967295
 8027ffa:	45cc      	cmp	ip, r9
 8027ffc:	f280 8113 	bge.w	8028226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8028000:	b21b      	sxth	r3, r3
 8028002:	fb0c 2203 	mla	r2, ip, r3, r2
 8028006:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028008:	eb04 0902 	add.w	r9, r4, r2
 802800c:	5ca2      	ldrb	r2, [r4, r2]
 802800e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8028012:	2800      	cmp	r0, #0
 8028014:	f000 80fe 	beq.w	8028214 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8028018:	f899 2001 	ldrb.w	r2, [r9, #1]
 802801c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8028020:	9211      	str	r2, [sp, #68]	@ 0x44
 8028022:	b151      	cbz	r1, 802803a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8028024:	eb09 0203 	add.w	r2, r9, r3
 8028028:	f819 3003 	ldrb.w	r3, [r9, r3]
 802802c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028030:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028032:	7853      	ldrb	r3, [r2, #1]
 8028034:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028038:	9312      	str	r3, [sp, #72]	@ 0x48
 802803a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802803c:	fb10 f201 	smulbb	r2, r0, r1
 8028040:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8028044:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028048:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802804c:	ea4c 0c03 	orr.w	ip, ip, r3
 8028050:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028052:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8028054:	041b      	lsls	r3, r3, #16
 8028056:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802805a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802805e:	10d2      	asrs	r2, r2, #3
 8028060:	4323      	orrs	r3, r4
 8028062:	4353      	muls	r3, r2
 8028064:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8028068:	fb09 330c 	mla	r3, r9, ip, r3
 802806c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8028070:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028074:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028078:	ea4c 0e0e 	orr.w	lr, ip, lr
 802807c:	f1c1 0c10 	rsb	ip, r1, #16
 8028080:	ebac 0c00 	sub.w	ip, ip, r0
 8028084:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8028088:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802808c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802808e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8028092:	0418      	lsls	r0, r3, #16
 8028094:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028098:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802809c:	4318      	orrs	r0, r3
 802809e:	fb02 c200 	mla	r2, r2, r0, ip
 80280a2:	8838      	ldrh	r0, [r7, #0]
 80280a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80280a6:	0d53      	lsrs	r3, r2, #21
 80280a8:	1201      	asrs	r1, r0, #8
 80280aa:	0952      	lsrs	r2, r2, #5
 80280ac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80280b0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80280b4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80280b8:	431a      	orrs	r2, r3
 80280ba:	fb11 f104 	smulbb	r1, r1, r4
 80280be:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80280c2:	00c0      	lsls	r0, r0, #3
 80280c4:	b292      	uxth	r2, r2
 80280c6:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80280ca:	b2c0      	uxtb	r0, r0
 80280cc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80280d0:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80280d4:	fb1e fe04 	smulbb	lr, lr, r4
 80280d8:	fb10 f004 	smulbb	r0, r0, r4
 80280dc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80280e0:	fb0c 1c03 	mla	ip, ip, r3, r1
 80280e4:	10d1      	asrs	r1, r2, #3
 80280e6:	00d2      	lsls	r2, r2, #3
 80280e8:	b2d2      	uxtb	r2, r2
 80280ea:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80280ee:	fb01 e103 	mla	r1, r1, r3, lr
 80280f2:	fb02 0303 	mla	r3, r2, r3, r0
 80280f6:	fa1f fc8c 	uxth.w	ip, ip
 80280fa:	b29a      	uxth	r2, r3
 80280fc:	f10c 0301 	add.w	r3, ip, #1
 8028100:	b289      	uxth	r1, r1
 8028102:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028106:	1c53      	adds	r3, r2, #1
 8028108:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802810c:	1c4a      	adds	r2, r1, #1
 802810e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028112:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8028116:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802811a:	0949      	lsrs	r1, r1, #5
 802811c:	ea43 030c 	orr.w	r3, r3, ip
 8028120:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028124:	430b      	orrs	r3, r1
 8028126:	803b      	strh	r3, [r7, #0]
 8028128:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802812a:	3702      	adds	r7, #2
 802812c:	449a      	add	sl, r3
 802812e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028130:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028134:	441d      	add	r5, r3
 8028136:	e742      	b.n	8027fbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028138:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802813a:	f108 0802 	add.w	r8, r8, #2
 802813e:	449a      	add	sl, r3
 8028140:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028142:	441d      	add	r5, r3
 8028144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028146:	3b01      	subs	r3, #1
 8028148:	9309      	str	r3, [sp, #36]	@ 0x24
 802814a:	e718      	b.n	8027f7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802814c:	d023      	beq.n	8028196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802814e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028150:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8028152:	3b01      	subs	r3, #1
 8028154:	fb00 a003 	mla	r0, r0, r3, sl
 8028158:	1400      	asrs	r0, r0, #16
 802815a:	f53f af2d 	bmi.w	8027fb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802815e:	3901      	subs	r1, #1
 8028160:	4288      	cmp	r0, r1
 8028162:	f6bf af29 	bge.w	8027fb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028166:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8028168:	fb01 5303 	mla	r3, r1, r3, r5
 802816c:	141b      	asrs	r3, r3, #16
 802816e:	f53f af23 	bmi.w	8027fb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028172:	3a01      	subs	r2, #1
 8028174:	4293      	cmp	r3, r2
 8028176:	f6bf af1f 	bge.w	8027fb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802817a:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802817e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8028182:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8028186:	f1be 0f00 	cmp.w	lr, #0
 802818a:	dc6c      	bgt.n	8028266 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802818c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802818e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028192:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8028196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028198:	2b00      	cmp	r3, #0
 802819a:	f340 810e 	ble.w	80283ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802819e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80281a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80281a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80281aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80281ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80281b2:	eef0 6a62 	vmov.f32	s13, s5
 80281b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80281ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80281be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80281c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80281ca:	ee16 aa90 	vmov	sl, s13
 80281ce:	eef0 6a43 	vmov.f32	s13, s6
 80281d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80281d6:	ee12 2a90 	vmov	r2, s5
 80281da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80281de:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80281e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80281e8:	ee13 2a10 	vmov	r2, s6
 80281ec:	9325      	str	r3, [sp, #148]	@ 0x94
 80281ee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80281f0:	ee16 5a90 	vmov	r5, s13
 80281f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80281f8:	9326      	str	r3, [sp, #152]	@ 0x98
 80281fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80281fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80281fe:	3b01      	subs	r3, #1
 8028200:	930c      	str	r3, [sp, #48]	@ 0x30
 8028202:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8028204:	bf08      	it	eq
 8028206:	4613      	moveq	r3, r2
 8028208:	eeb0 3a67 	vmov.f32	s6, s15
 802820c:	9309      	str	r3, [sp, #36]	@ 0x24
 802820e:	eef0 2a47 	vmov.f32	s5, s14
 8028212:	e6a6      	b.n	8027f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8028214:	2900      	cmp	r1, #0
 8028216:	f43f af10 	beq.w	802803a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802821a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802821e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028222:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028224:	e709      	b.n	802803a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8028226:	f112 0901 	adds.w	r9, r2, #1
 802822a:	f53f af7d 	bmi.w	8028128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802822e:	454b      	cmp	r3, r9
 8028230:	f6ff af7a 	blt.w	8028128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8028234:	f11c 0901 	adds.w	r9, ip, #1
 8028238:	f53f af76 	bmi.w	8028128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802823c:	45ce      	cmp	lr, r9
 802823e:	f6ff af73 	blt.w	8028128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8028242:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028244:	9202      	str	r2, [sp, #8]
 8028246:	b21b      	sxth	r3, r3
 8028248:	fa0f f28e 	sxth.w	r2, lr
 802824c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8028250:	e9cd c003 	strd	ip, r0, [sp, #12]
 8028254:	9201      	str	r2, [sp, #4]
 8028256:	9300      	str	r3, [sp, #0]
 8028258:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802825a:	4633      	mov	r3, r6
 802825c:	4639      	mov	r1, r7
 802825e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8028260:	f7ff fd8e 	bl	8027d80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8028264:	e760      	b.n	8028128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8028266:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028268:	ea4f 422a 	mov.w	r2, sl, asr #16
 802826c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028270:	1429      	asrs	r1, r5, #16
 8028272:	fb03 2101 	mla	r1, r3, r1, r2
 8028276:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028278:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802827a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802827e:	440a      	add	r2, r1
 8028280:	5c61      	ldrb	r1, [r4, r1]
 8028282:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8028286:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802828a:	f1bc 0f00 	cmp.w	ip, #0
 802828e:	f000 808c 	beq.w	80283aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8028292:	7857      	ldrb	r7, [r2, #1]
 8028294:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8028298:	9413      	str	r4, [sp, #76]	@ 0x4c
 802829a:	b140      	cbz	r0, 80282ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802829c:	18d7      	adds	r7, r2, r3
 802829e:	5cd3      	ldrb	r3, [r2, r3]
 80282a0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80282a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80282a6:	787b      	ldrb	r3, [r7, #1]
 80282a8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80282ac:	9314      	str	r3, [sp, #80]	@ 0x50
 80282ae:	fb1c f200 	smulbb	r2, ip, r0
 80282b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80282b4:	10d2      	asrs	r2, r2, #3
 80282b6:	041f      	lsls	r7, r3, #16
 80282b8:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 80282bc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80282c0:	431f      	orrs	r7, r3
 80282c2:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80282c6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80282c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80282ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80282cc:	041b      	lsls	r3, r3, #16
 80282ce:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 80282d2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80282d6:	ea43 030b 	orr.w	r3, r3, fp
 80282da:	4353      	muls	r3, r2
 80282dc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80282de:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80282e2:	fb04 3707 	mla	r7, r4, r7, r3
 80282e6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80282ea:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80282ee:	ea43 0b01 	orr.w	fp, r3, r1
 80282f2:	f1c0 0110 	rsb	r1, r0, #16
 80282f6:	eba1 0c0c 	sub.w	ip, r1, ip
 80282fa:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80282fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028300:	fb0c 770b 	mla	r7, ip, fp, r7
 8028304:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8028308:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 802830c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028310:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8028314:	ea4c 0c0b 	orr.w	ip, ip, fp
 8028318:	fb02 770c 	mla	r7, r2, ip, r7
 802831c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802831e:	0d79      	lsrs	r1, r7, #21
 8028320:	8812      	ldrh	r2, [r2, #0]
 8028322:	097f      	lsrs	r7, r7, #5
 8028324:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028328:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802832c:	430f      	orrs	r7, r1
 802832e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028330:	1211      	asrs	r1, r2, #8
 8028332:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028336:	b2bb      	uxth	r3, r7
 8028338:	fb11 f104 	smulbb	r1, r1, r4
 802833c:	10d7      	asrs	r7, r2, #3
 802833e:	00d2      	lsls	r2, r2, #3
 8028340:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8028344:	b2d2      	uxtb	r2, r2
 8028346:	1218      	asrs	r0, r3, #8
 8028348:	fb17 f704 	smulbb	r7, r7, r4
 802834c:	fb12 f204 	smulbb	r2, r2, r4
 8028350:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028354:	fb00 1009 	mla	r0, r0, r9, r1
 8028358:	10d9      	asrs	r1, r3, #3
 802835a:	00db      	lsls	r3, r3, #3
 802835c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028360:	b2db      	uxtb	r3, r3
 8028362:	fb01 7109 	mla	r1, r1, r9, r7
 8028366:	fb03 2309 	mla	r3, r3, r9, r2
 802836a:	b280      	uxth	r0, r0
 802836c:	b29b      	uxth	r3, r3
 802836e:	b289      	uxth	r1, r1
 8028370:	1c42      	adds	r2, r0, #1
 8028372:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028376:	1c4f      	adds	r7, r1, #1
 8028378:	1c5a      	adds	r2, r3, #1
 802837a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802837e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8028382:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8028386:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802838a:	0949      	lsrs	r1, r1, #5
 802838c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802838e:	4310      	orrs	r0, r2
 8028390:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028394:	4308      	orrs	r0, r1
 8028396:	f823 0b02 	strh.w	r0, [r3], #2
 802839a:	930e      	str	r3, [sp, #56]	@ 0x38
 802839c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802839e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80283a2:	449a      	add	sl, r3
 80283a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80283a6:	441d      	add	r5, r3
 80283a8:	e6ed      	b.n	8028186 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80283aa:	2800      	cmp	r0, #0
 80283ac:	f43f af7f 	beq.w	80282ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80283b0:	5cd3      	ldrb	r3, [r2, r3]
 80283b2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80283b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80283b8:	e779      	b.n	80282ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80283ba:	b019      	add	sp, #100	@ 0x64
 80283bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080283c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80283c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80283c4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80283c8:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 80283cc:	fb08 470e 	mla	r7, r8, lr, r4
 80283d0:	f1b8 0f00 	cmp.w	r8, #0
 80283d4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 80283d8:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 80283dc:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80283e0:	eb02 0907 	add.w	r9, r2, r7
 80283e4:	8808      	ldrh	r0, [r1, #0]
 80283e6:	db67      	blt.n	80284b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80283e8:	45c2      	cmp	sl, r8
 80283ea:	dd65      	ble.n	80284b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80283ec:	2c00      	cmp	r4, #0
 80283ee:	db61      	blt.n	80284b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80283f0:	45a6      	cmp	lr, r4
 80283f2:	dd5f      	ble.n	80284b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80283f4:	5dd2      	ldrb	r2, [r2, r7]
 80283f6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80283fa:	1c62      	adds	r2, r4, #1
 80283fc:	d45f      	bmi.n	80284be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80283fe:	4596      	cmp	lr, r2
 8028400:	dd5d      	ble.n	80284be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8028402:	2d00      	cmp	r5, #0
 8028404:	d05b      	beq.n	80284be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8028406:	f899 2001 	ldrb.w	r2, [r9, #1]
 802840a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802840e:	f118 0801 	adds.w	r8, r8, #1
 8028412:	d458      	bmi.n	80284c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8028414:	45c2      	cmp	sl, r8
 8028416:	dd56      	ble.n	80284c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8028418:	2e00      	cmp	r6, #0
 802841a:	d054      	beq.n	80284c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802841c:	2c00      	cmp	r4, #0
 802841e:	db50      	blt.n	80284c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8028420:	45a6      	cmp	lr, r4
 8028422:	dd4e      	ble.n	80284c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8028424:	f819 200e 	ldrb.w	r2, [r9, lr]
 8028428:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802842c:	3401      	adds	r4, #1
 802842e:	d407      	bmi.n	8028440 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8028430:	45a6      	cmp	lr, r4
 8028432:	dd05      	ble.n	8028440 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8028434:	b125      	cbz	r5, 8028440 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8028436:	44ce      	add	lr, r9
 8028438:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802843c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8028440:	fb15 f406 	smulbb	r4, r5, r6
 8028444:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8028448:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802844c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8028450:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028454:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8028458:	ea43 0c0c 	orr.w	ip, r3, ip
 802845c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8028460:	f1c6 0310 	rsb	r3, r6, #16
 8028464:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8028468:	1b5b      	subs	r3, r3, r5
 802846a:	ea4e 0707 	orr.w	r7, lr, r7
 802846e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8028472:	437d      	muls	r5, r7
 8028474:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028478:	fb03 5c0c 	mla	ip, r3, ip, r5
 802847c:	0403      	lsls	r3, r0, #16
 802847e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8028482:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028486:	4318      	orrs	r0, r3
 8028488:	fb04 c000 	mla	r0, r4, r0, ip
 802848c:	0413      	lsls	r3, r2, #16
 802848e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8028492:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028496:	4313      	orrs	r3, r2
 8028498:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802849c:	fb06 0003 	mla	r0, r6, r3, r0
 80284a0:	0d43      	lsrs	r3, r0, #21
 80284a2:	0940      	lsrs	r0, r0, #5
 80284a4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80284a8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80284ac:	4318      	orrs	r0, r3
 80284ae:	8008      	strh	r0, [r1, #0]
 80284b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80284b4:	4684      	mov	ip, r0
 80284b6:	e7a0      	b.n	80283fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80284b8:	4607      	mov	r7, r0
 80284ba:	4684      	mov	ip, r0
 80284bc:	e7a7      	b.n	802840e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80284be:	4607      	mov	r7, r0
 80284c0:	e7a5      	b.n	802840e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80284c2:	4602      	mov	r2, r0
 80284c4:	e7b2      	b.n	802842c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80284c6:	4602      	mov	r2, r0
 80284c8:	e7ba      	b.n	8028440 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080284ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80284ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80284ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284d2:	b093      	sub	sp, #76	@ 0x4c
 80284d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80284d6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80284d8:	9010      	str	r0, [sp, #64]	@ 0x40
 80284da:	6850      	ldr	r0, [r2, #4]
 80284dc:	9108      	str	r1, [sp, #32]
 80284de:	9306      	str	r3, [sp, #24]
 80284e0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80284e4:	fb00 1303 	mla	r3, r0, r3, r1
 80284e8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80284ec:	6812      	ldr	r2, [r2, #0]
 80284ee:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80284f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80284f4:	681b      	ldr	r3, [r3, #0]
 80284f6:	9307      	str	r3, [sp, #28]
 80284f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80284fa:	685f      	ldr	r7, [r3, #4]
 80284fc:	3704      	adds	r7, #4
 80284fe:	9b08      	ldr	r3, [sp, #32]
 8028500:	2b00      	cmp	r3, #0
 8028502:	dc03      	bgt.n	802850c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8028504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028506:	2b00      	cmp	r3, #0
 8028508:	f340 81b2 	ble.w	8028870 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802850c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802850e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028512:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028516:	1e48      	subs	r0, r1, #1
 8028518:	f102 3cff 	add.w	ip, r2, #4294967295
 802851c:	9b06      	ldr	r3, [sp, #24]
 802851e:	2b00      	cmp	r3, #0
 8028520:	f340 80a9 	ble.w	8028676 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8028524:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028528:	ea4f 4326 	mov.w	r3, r6, asr #16
 802852c:	d406      	bmi.n	802853c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802852e:	4586      	cmp	lr, r0
 8028530:	da04      	bge.n	802853c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8028532:	2b00      	cmp	r3, #0
 8028534:	db02      	blt.n	802853c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8028536:	4563      	cmp	r3, ip
 8028538:	f2c0 809e 	blt.w	8028678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802853c:	f11e 0e01 	adds.w	lr, lr, #1
 8028540:	f100 808f 	bmi.w	8028662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8028544:	4571      	cmp	r1, lr
 8028546:	f2c0 808c 	blt.w	8028662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802854a:	3301      	adds	r3, #1
 802854c:	f100 8089 	bmi.w	8028662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8028550:	429a      	cmp	r2, r3
 8028552:	f2c0 8086 	blt.w	8028662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8028556:	46c8      	mov	r8, r9
 8028558:	f8dd b018 	ldr.w	fp, [sp, #24]
 802855c:	f1bb 0f00 	cmp.w	fp, #0
 8028560:	f340 80a6 	ble.w	80286b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8028564:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8028566:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028568:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802856c:	1422      	asrs	r2, r4, #16
 802856e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028572:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028576:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802857a:	689b      	ldr	r3, [r3, #8]
 802857c:	f100 80e3 	bmi.w	8028746 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8028580:	f103 3aff 	add.w	sl, r3, #4294967295
 8028584:	4552      	cmp	r2, sl
 8028586:	f280 80de 	bge.w	8028746 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802858a:	f1bc 0f00 	cmp.w	ip, #0
 802858e:	f2c0 80da 	blt.w	8028746 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8028592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028596:	45d4      	cmp	ip, sl
 8028598:	f280 80d5 	bge.w	8028746 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802859c:	b21b      	sxth	r3, r3
 802859e:	fb0c 2203 	mla	r2, ip, r3, r2
 80285a2:	9d07      	ldr	r5, [sp, #28]
 80285a4:	eb05 0a02 	add.w	sl, r5, r2
 80285a8:	5caa      	ldrb	r2, [r5, r2]
 80285aa:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80285ae:	2800      	cmp	r0, #0
 80285b0:	f000 80c0 	beq.w	8028734 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80285b4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80285b8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80285bc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80285be:	b151      	cbz	r1, 80285d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80285c0:	eb0a 0203 	add.w	r2, sl, r3
 80285c4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80285c8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80285cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80285ce:	7853      	ldrb	r3, [r2, #1]
 80285d0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80285d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80285d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80285d8:	fb10 f201 	smulbb	r2, r0, r1
 80285dc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80285e0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80285e4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80285e8:	ea4c 0c03 	orr.w	ip, ip, r3
 80285ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80285ee:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80285f0:	041b      	lsls	r3, r3, #16
 80285f2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80285f6:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80285fa:	10d2      	asrs	r2, r2, #3
 80285fc:	432b      	orrs	r3, r5
 80285fe:	4353      	muls	r3, r2
 8028600:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8028604:	fb0a 330c 	mla	r3, sl, ip, r3
 8028608:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802860c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028610:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028614:	ea4c 0e0e 	orr.w	lr, ip, lr
 8028618:	f1c1 0c10 	rsb	ip, r1, #16
 802861c:	ebac 0c00 	sub.w	ip, ip, r0
 8028620:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8028624:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8028628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802862a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802862e:	0418      	lsls	r0, r3, #16
 8028630:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028634:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028638:	4318      	orrs	r0, r3
 802863a:	fb02 c200 	mla	r2, r2, r0, ip
 802863e:	0d53      	lsrs	r3, r2, #21
 8028640:	0952      	lsrs	r2, r2, #5
 8028642:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028646:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802864a:	431a      	orrs	r2, r3
 802864c:	f8a8 2000 	strh.w	r2, [r8]
 8028650:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028652:	f108 0802 	add.w	r8, r8, #2
 8028656:	441c      	add	r4, r3
 8028658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802865a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802865e:	441e      	add	r6, r3
 8028660:	e77c      	b.n	802855c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028662:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028664:	f109 0902 	add.w	r9, r9, #2
 8028668:	441c      	add	r4, r3
 802866a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802866c:	441e      	add	r6, r3
 802866e:	9b06      	ldr	r3, [sp, #24]
 8028670:	3b01      	subs	r3, #1
 8028672:	9306      	str	r3, [sp, #24]
 8028674:	e752      	b.n	802851c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8028676:	d020      	beq.n	80286ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8028678:	9b06      	ldr	r3, [sp, #24]
 802867a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802867c:	3b01      	subs	r3, #1
 802867e:	fb00 4003 	mla	r0, r0, r3, r4
 8028682:	1400      	asrs	r0, r0, #16
 8028684:	f53f af67 	bmi.w	8028556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028688:	3901      	subs	r1, #1
 802868a:	4288      	cmp	r0, r1
 802868c:	f6bf af63 	bge.w	8028556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028690:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028692:	fb01 6303 	mla	r3, r1, r3, r6
 8028696:	141b      	asrs	r3, r3, #16
 8028698:	f53f af5d 	bmi.w	8028556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802869c:	3a01      	subs	r2, #1
 802869e:	4293      	cmp	r3, r2
 80286a0:	f6bf af59 	bge.w	8028556 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80286a4:	46ca      	mov	sl, r9
 80286a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80286aa:	f1b8 0f00 	cmp.w	r8, #0
 80286ae:	dc67      	bgt.n	8028780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80286b0:	9b06      	ldr	r3, [sp, #24]
 80286b2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80286b6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80286ba:	9b08      	ldr	r3, [sp, #32]
 80286bc:	2b00      	cmp	r3, #0
 80286be:	f340 80d7 	ble.w	8028870 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80286c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80286c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80286ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80286ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80286d2:	eeb0 6a62 	vmov.f32	s12, s5
 80286d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80286da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80286de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80286e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80286e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80286ea:	ee16 4a10 	vmov	r4, s12
 80286ee:	eeb0 6a43 	vmov.f32	s12, s6
 80286f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80286f6:	ee12 2a90 	vmov	r2, s5
 80286fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80286fe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028700:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8028704:	fb92 f3f3 	sdiv	r3, r2, r3
 8028708:	ee13 2a10 	vmov	r2, s6
 802870c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802870e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028710:	ee16 6a10 	vmov	r6, s12
 8028714:	fb92 f3f3 	sdiv	r3, r2, r3
 8028718:	9320      	str	r3, [sp, #128]	@ 0x80
 802871a:	9b08      	ldr	r3, [sp, #32]
 802871c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802871e:	3b01      	subs	r3, #1
 8028720:	9308      	str	r3, [sp, #32]
 8028722:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028724:	bf08      	it	eq
 8028726:	4613      	moveq	r3, r2
 8028728:	eeb0 3a67 	vmov.f32	s6, s15
 802872c:	9306      	str	r3, [sp, #24]
 802872e:	eef0 2a47 	vmov.f32	s5, s14
 8028732:	e6e4      	b.n	80284fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028734:	2900      	cmp	r1, #0
 8028736:	f43f af4e 	beq.w	80285d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802873a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802873e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8028742:	9309      	str	r3, [sp, #36]	@ 0x24
 8028744:	e747      	b.n	80285d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8028746:	f112 0a01 	adds.w	sl, r2, #1
 802874a:	d481      	bmi.n	8028650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802874c:	4553      	cmp	r3, sl
 802874e:	f6ff af7f 	blt.w	8028650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028752:	f11c 0a01 	adds.w	sl, ip, #1
 8028756:	f53f af7b 	bmi.w	8028650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802875a:	45d6      	cmp	lr, sl
 802875c:	f6ff af78 	blt.w	8028650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028760:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8028764:	b21b      	sxth	r3, r3
 8028766:	fa0f f28e 	sxth.w	r2, lr
 802876a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802876e:	9201      	str	r2, [sp, #4]
 8028770:	9300      	str	r3, [sp, #0]
 8028772:	9a07      	ldr	r2, [sp, #28]
 8028774:	463b      	mov	r3, r7
 8028776:	4641      	mov	r1, r8
 8028778:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802877a:	f7ff fe21 	bl	80283c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802877e:	e767      	b.n	8028650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028780:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028782:	1422      	asrs	r2, r4, #16
 8028784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028788:	1431      	asrs	r1, r6, #16
 802878a:	fb03 2101 	mla	r1, r3, r1, r2
 802878e:	9d07      	ldr	r5, [sp, #28]
 8028790:	9a07      	ldr	r2, [sp, #28]
 8028792:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8028796:	440a      	add	r2, r1
 8028798:	5c69      	ldrb	r1, [r5, r1]
 802879a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802879e:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80287a2:	f1be 0f00 	cmp.w	lr, #0
 80287a6:	d05c      	beq.n	8028862 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80287a8:	f892 c001 	ldrb.w	ip, [r2, #1]
 80287ac:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80287b0:	950d      	str	r5, [sp, #52]	@ 0x34
 80287b2:	b150      	cbz	r0, 80287ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80287b4:	eb02 0c03 	add.w	ip, r2, r3
 80287b8:	5cd3      	ldrb	r3, [r2, r3]
 80287ba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80287be:	930a      	str	r3, [sp, #40]	@ 0x28
 80287c0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80287c4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80287c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80287ca:	fb1e f200 	smulbb	r2, lr, r0
 80287ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80287d0:	10d2      	asrs	r2, r2, #3
 80287d2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80287d6:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80287da:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80287de:	ea4c 0c03 	orr.w	ip, ip, r3
 80287e2:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80287e6:	9311      	str	r3, [sp, #68]	@ 0x44
 80287e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80287ea:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80287ec:	041b      	lsls	r3, r3, #16
 80287ee:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 80287f2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80287f6:	ea43 030b 	orr.w	r3, r3, fp
 80287fa:	4353      	muls	r3, r2
 80287fc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80287fe:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028802:	fb05 3c0c 	mla	ip, r5, ip, r3
 8028806:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802880a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802880e:	ea43 0b01 	orr.w	fp, r3, r1
 8028812:	f1c0 0110 	rsb	r1, r0, #16
 8028816:	eba1 0e0e 	sub.w	lr, r1, lr
 802881a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802881e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028820:	fb0e cc0b 	mla	ip, lr, fp, ip
 8028824:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8028828:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 802882c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028830:	ea4b 0e0e 	orr.w	lr, fp, lr
 8028834:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8028838:	fb02 cc0e 	mla	ip, r2, lr, ip
 802883c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8028840:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028844:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028848:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802884c:	ea43 0c0c 	orr.w	ip, r3, ip
 8028850:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028852:	f82a cb02 	strh.w	ip, [sl], #2
 8028856:	441c      	add	r4, r3
 8028858:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802885a:	f108 38ff 	add.w	r8, r8, #4294967295
 802885e:	441e      	add	r6, r3
 8028860:	e723      	b.n	80286aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8028862:	2800      	cmp	r0, #0
 8028864:	d0b1      	beq.n	80287ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8028866:	5cd3      	ldrb	r3, [r2, r3]
 8028868:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802886c:	930a      	str	r3, [sp, #40]	@ 0x28
 802886e:	e7ac      	b.n	80287ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8028870:	b013      	add	sp, #76	@ 0x4c
 8028872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028876 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8028876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802887a:	880d      	ldrh	r5, [r1, #0]
 802887c:	b087      	sub	sp, #28
 802887e:	10ef      	asrs	r7, r5, #3
 8028880:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8028884:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8028888:	00ed      	lsls	r5, r5, #3
 802888a:	9701      	str	r7, [sp, #4]
 802888c:	b2ed      	uxtb	r5, r5
 802888e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 8028892:	9502      	str	r5, [sp, #8]
 8028894:	9d01      	ldr	r5, [sp, #4]
 8028896:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 802889a:	fb06 0709 	mla	r7, r6, r9, r0
 802889e:	9103      	str	r1, [sp, #12]
 80288a0:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 80288a4:	022d      	lsls	r5, r5, #8
 80288a6:	9902      	ldr	r1, [sp, #8]
 80288a8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80288ac:	430d      	orrs	r5, r1
 80288ae:	2e00      	cmp	r6, #0
 80288b0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80288b4:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80288b8:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 80288bc:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 80288c0:	eb02 0c07 	add.w	ip, r2, r7
 80288c4:	9505      	str	r5, [sp, #20]
 80288c6:	f2c0 80b6 	blt.w	8028a36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80288ca:	45b3      	cmp	fp, r6
 80288cc:	f340 80b3 	ble.w	8028a36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80288d0:	2800      	cmp	r0, #0
 80288d2:	f2c0 80ae 	blt.w	8028a32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80288d6:	4581      	cmp	r9, r0
 80288d8:	f340 80ab 	ble.w	8028a32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80288dc:	5dd7      	ldrb	r7, [r2, r7]
 80288de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80288e2:	441f      	add	r7, r3
 80288e4:	1c42      	adds	r2, r0, #1
 80288e6:	f100 80a9 	bmi.w	8028a3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80288ea:	4591      	cmp	r9, r2
 80288ec:	f340 80a6 	ble.w	8028a3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80288f0:	2c00      	cmp	r4, #0
 80288f2:	f000 80a3 	beq.w	8028a3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80288f6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80288fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80288fe:	441d      	add	r5, r3
 8028900:	3601      	adds	r6, #1
 8028902:	f100 809f 	bmi.w	8028a44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8028906:	45b3      	cmp	fp, r6
 8028908:	f340 809c 	ble.w	8028a44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802890c:	f1be 0f00 	cmp.w	lr, #0
 8028910:	f000 8098 	beq.w	8028a44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8028914:	2800      	cmp	r0, #0
 8028916:	f2c0 8093 	blt.w	8028a40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802891a:	4581      	cmp	r9, r0
 802891c:	f340 8090 	ble.w	8028a40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8028920:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8028924:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8028928:	441e      	add	r6, r3
 802892a:	3001      	adds	r0, #1
 802892c:	f100 808d 	bmi.w	8028a4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8028930:	4581      	cmp	r9, r0
 8028932:	f340 808a 	ble.w	8028a4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8028936:	2c00      	cmp	r4, #0
 8028938:	f000 8087 	beq.w	8028a4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802893c:	44e1      	add	r9, ip
 802893e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8028942:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028946:	4413      	add	r3, r2
 8028948:	b2a4      	uxth	r4, r4
 802894a:	fa1f fe8e 	uxth.w	lr, lr
 802894e:	fb04 fb0e 	mul.w	fp, r4, lr
 8028952:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8028956:	fa1f f08e 	uxth.w	r0, lr
 802895a:	fa1f fe88 	uxth.w	lr, r8
 802895e:	ea6f 0808 	mvn.w	r8, r8
 8028962:	0124      	lsls	r4, r4, #4
 8028964:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8028968:	eba4 040b 	sub.w	r4, r4, fp
 802896c:	b2a2      	uxth	r2, r4
 802896e:	78ac      	ldrb	r4, [r5, #2]
 8028970:	f897 c002 	ldrb.w	ip, [r7, #2]
 8028974:	4354      	muls	r4, r2
 8028976:	eba9 0900 	sub.w	r9, r9, r0
 802897a:	fa1f f989 	uxth.w	r9, r9
 802897e:	fb09 440c 	mla	r4, r9, ip, r4
 8028982:	f896 c002 	ldrb.w	ip, [r6, #2]
 8028986:	fa5f f888 	uxtb.w	r8, r8
 802898a:	fb00 440c 	mla	r4, r0, ip, r4
 802898e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8028992:	fb1a fa08 	smulbb	sl, sl, r8
 8028996:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802899a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802899e:	fb0c ac0e 	mla	ip, ip, lr, sl
 80289a2:	f895 a001 	ldrb.w	sl, [r5, #1]
 80289a6:	782d      	ldrb	r5, [r5, #0]
 80289a8:	fb02 fa0a 	mul.w	sl, r2, sl
 80289ac:	436a      	muls	r2, r5
 80289ae:	787c      	ldrb	r4, [r7, #1]
 80289b0:	783f      	ldrb	r7, [r7, #0]
 80289b2:	fb09 aa04 	mla	sl, r9, r4, sl
 80289b6:	fb09 2207 	mla	r2, r9, r7, r2
 80289ba:	7874      	ldrb	r4, [r6, #1]
 80289bc:	7835      	ldrb	r5, [r6, #0]
 80289be:	fb00 aa04 	mla	sl, r0, r4, sl
 80289c2:	fb00 2005 	mla	r0, r0, r5, r2
 80289c6:	785c      	ldrb	r4, [r3, #1]
 80289c8:	781b      	ldrb	r3, [r3, #0]
 80289ca:	fb0b a404 	mla	r4, fp, r4, sl
 80289ce:	9901      	ldr	r1, [sp, #4]
 80289d0:	fb0b 0b03 	mla	fp, fp, r3, r0
 80289d4:	9b02      	ldr	r3, [sp, #8]
 80289d6:	fb11 fa08 	smulbb	sl, r1, r8
 80289da:	fb13 f808 	smulbb	r8, r3, r8
 80289de:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80289e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80289e6:	fb04 a40e 	mla	r4, r4, lr, sl
 80289ea:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80289ee:	fa1f fc8c 	uxth.w	ip, ip
 80289f2:	f10c 0301 	add.w	r3, ip, #1
 80289f6:	fa1f fe8e 	uxth.w	lr, lr
 80289fa:	b2a4      	uxth	r4, r4
 80289fc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028a00:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 8028a04:	f104 0a01 	add.w	sl, r4, #1
 8028a08:	f10e 0c01 	add.w	ip, lr, #1
 8028a0c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028a10:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8028a14:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028a18:	0964      	lsrs	r4, r4, #5
 8028a1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8028a1e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028a22:	9b03      	ldr	r3, [sp, #12]
 8028a24:	ea4c 0c04 	orr.w	ip, ip, r4
 8028a28:	f8a3 c000 	strh.w	ip, [r3]
 8028a2c:	b007      	add	sp, #28
 8028a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a32:	af05      	add	r7, sp, #20
 8028a34:	e756      	b.n	80288e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8028a36:	ad05      	add	r5, sp, #20
 8028a38:	462f      	mov	r7, r5
 8028a3a:	e761      	b.n	8028900 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8028a3c:	ad05      	add	r5, sp, #20
 8028a3e:	e75f      	b.n	8028900 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8028a40:	ae05      	add	r6, sp, #20
 8028a42:	e772      	b.n	802892a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8028a44:	ab05      	add	r3, sp, #20
 8028a46:	461e      	mov	r6, r3
 8028a48:	e77e      	b.n	8028948 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8028a4a:	ab05      	add	r3, sp, #20
 8028a4c:	e77c      	b.n	8028948 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08028a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a52:	b095      	sub	sp, #84	@ 0x54
 8028a54:	9212      	str	r2, [sp, #72]	@ 0x48
 8028a56:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8028a58:	9013      	str	r0, [sp, #76]	@ 0x4c
 8028a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a5c:	6850      	ldr	r0, [r2, #4]
 8028a5e:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8028a62:	910e      	str	r1, [sp, #56]	@ 0x38
 8028a64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028a66:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8028a6a:	fb00 1303 	mla	r3, r0, r3, r1
 8028a6e:	6812      	ldr	r2, [r2, #0]
 8028a70:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028a74:	930a      	str	r3, [sp, #40]	@ 0x28
 8028a76:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028a78:	681b      	ldr	r3, [r3, #0]
 8028a7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8028a7c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028a7e:	685c      	ldr	r4, [r3, #4]
 8028a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a82:	3404      	adds	r4, #4
 8028a84:	43db      	mvns	r3, r3
 8028a86:	b2db      	uxtb	r3, r3
 8028a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028a8c:	2b00      	cmp	r3, #0
 8028a8e:	dc03      	bgt.n	8028a98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028a90:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028a92:	2b00      	cmp	r3, #0
 8028a94:	f340 8255 	ble.w	8028f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8028a98:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028a9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028a9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028aa2:	1e48      	subs	r0, r1, #1
 8028aa4:	1e55      	subs	r5, r2, #1
 8028aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028aa8:	2b00      	cmp	r3, #0
 8028aaa:	f340 80f9 	ble.w	8028ca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028aae:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8028ab0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028ab2:	1436      	asrs	r6, r6, #16
 8028ab4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028ab8:	d406      	bmi.n	8028ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8028aba:	4286      	cmp	r6, r0
 8028abc:	da04      	bge.n	8028ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	db02      	blt.n	8028ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8028ac2:	42ab      	cmp	r3, r5
 8028ac4:	f2c0 80ed 	blt.w	8028ca2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8028ac8:	3601      	adds	r6, #1
 8028aca:	f100 80da 	bmi.w	8028c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028ace:	42b1      	cmp	r1, r6
 8028ad0:	f2c0 80d7 	blt.w	8028c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028ad4:	3301      	adds	r3, #1
 8028ad6:	f100 80d4 	bmi.w	8028c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028ada:	429a      	cmp	r2, r3
 8028adc:	f2c0 80d1 	blt.w	8028c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028ae2:	9311      	str	r3, [sp, #68]	@ 0x44
 8028ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028ae6:	930c      	str	r3, [sp, #48]	@ 0x30
 8028ae8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028aea:	2b00      	cmp	r3, #0
 8028aec:	f340 80fa 	ble.w	8028ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8028af0:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8028af2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028af4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8028af6:	68c6      	ldr	r6, [r0, #12]
 8028af8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028afa:	141d      	asrs	r5, r3, #16
 8028afc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8028b00:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028b02:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8028b04:	1400      	asrs	r0, r0, #16
 8028b06:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8028b0a:	6892      	ldr	r2, [r2, #8]
 8028b0c:	f100 813e 	bmi.w	8028d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028b10:	1e57      	subs	r7, r2, #1
 8028b12:	42b8      	cmp	r0, r7
 8028b14:	f280 813a 	bge.w	8028d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028b18:	2d00      	cmp	r5, #0
 8028b1a:	f2c0 8137 	blt.w	8028d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028b1e:	1e77      	subs	r7, r6, #1
 8028b20:	42bd      	cmp	r5, r7
 8028b22:	f280 8133 	bge.w	8028d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028b26:	b212      	sxth	r2, r2
 8028b28:	fb05 0002 	mla	r0, r5, r2, r0
 8028b2c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028b2e:	f815 a000 	ldrb.w	sl, [r5, r0]
 8028b32:	182e      	adds	r6, r5, r0
 8028b34:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8028b38:	eb04 050a 	add.w	r5, r4, sl
 8028b3c:	2b00      	cmp	r3, #0
 8028b3e:	f000 8117 	beq.w	8028d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028b42:	f896 c001 	ldrb.w	ip, [r6, #1]
 8028b46:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8028b4a:	44a4      	add	ip, r4
 8028b4c:	2900      	cmp	r1, #0
 8028b4e:	f000 8117 	beq.w	8028d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8028b52:	18b0      	adds	r0, r6, r2
 8028b54:	7840      	ldrb	r0, [r0, #1]
 8028b56:	5cb2      	ldrb	r2, [r6, r2]
 8028b58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028b5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028b60:	4422      	add	r2, r4
 8028b62:	4420      	add	r0, r4
 8028b64:	b29b      	uxth	r3, r3
 8028b66:	b289      	uxth	r1, r1
 8028b68:	fb03 f901 	mul.w	r9, r3, r1
 8028b6c:	011b      	lsls	r3, r3, #4
 8028b6e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8028b72:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8028b76:	eba3 0309 	sub.w	r3, r3, r9
 8028b7a:	b29b      	uxth	r3, r3
 8028b7c:	435f      	muls	r7, r3
 8028b7e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028b82:	b289      	uxth	r1, r1
 8028b84:	f895 b002 	ldrb.w	fp, [r5, #2]
 8028b88:	eba8 0801 	sub.w	r8, r8, r1
 8028b8c:	fa1f f888 	uxth.w	r8, r8
 8028b90:	fb08 770b 	mla	r7, r8, fp, r7
 8028b94:	f892 b002 	ldrb.w	fp, [r2, #2]
 8028b98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028b9a:	fb01 770b 	mla	r7, r1, fp, r7
 8028b9e:	f8b6 e000 	ldrh.w	lr, [r6]
 8028ba2:	f890 b002 	ldrb.w	fp, [r0, #2]
 8028ba6:	9310      	str	r3, [sp, #64]	@ 0x40
 8028ba8:	fb09 770b 	mla	r7, r9, fp, r7
 8028bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028bae:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8028bb2:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8028bb6:	fb1b fb03 	smulbb	fp, fp, r3
 8028bba:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8028bbe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8028bc2:	fb07 b706 	mla	r7, r7, r6, fp
 8028bc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028bc8:	f895 b001 	ldrb.w	fp, [r5, #1]
 8028bcc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8028bd0:	f89c c000 	ldrb.w	ip, [ip]
 8028bd4:	435d      	muls	r5, r3
 8028bd6:	fb08 550b 	mla	r5, r8, fp, r5
 8028bda:	f892 b001 	ldrb.w	fp, [r2, #1]
 8028bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028be0:	fb01 550b 	mla	r5, r1, fp, r5
 8028be4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8028be8:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8028bec:	fb09 550b 	mla	r5, r9, fp, r5
 8028bf0:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8028bf4:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8028bf8:	fb1b fb03 	smulbb	fp, fp, r3
 8028bfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028bfe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028c02:	fb03 f30c 	mul.w	r3, r3, ip
 8028c06:	fb08 330a 	mla	r3, r8, sl, r3
 8028c0a:	f892 c000 	ldrb.w	ip, [r2]
 8028c0e:	fa5f fe8e 	uxtb.w	lr, lr
 8028c12:	fb01 330c 	mla	r3, r1, ip, r3
 8028c16:	f890 c000 	ldrb.w	ip, [r0]
 8028c1a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8028c1e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028c24:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8028c28:	fb1e fe03 	smulbb	lr, lr, r3
 8028c2c:	fb05 b506 	mla	r5, r5, r6, fp
 8028c30:	fb0c e606 	mla	r6, ip, r6, lr
 8028c34:	b2bf      	uxth	r7, r7
 8028c36:	1c7b      	adds	r3, r7, #1
 8028c38:	b2ad      	uxth	r5, r5
 8028c3a:	b2b6      	uxth	r6, r6
 8028c3c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8028c40:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8028c44:	f105 0b01 	add.w	fp, r5, #1
 8028c48:	1c77      	adds	r7, r6, #1
 8028c4a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8028c4e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8028c52:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8028c56:	096d      	lsrs	r5, r5, #5
 8028c58:	431f      	orrs	r7, r3
 8028c5a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028c60:	433d      	orrs	r5, r7
 8028c62:	801d      	strh	r5, [r3, #0]
 8028c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028c66:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028c68:	3302      	adds	r3, #2
 8028c6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8028c6c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028c6e:	4413      	add	r3, r2
 8028c70:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028c72:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8028c74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028c76:	4413      	add	r3, r2
 8028c78:	9320      	str	r3, [sp, #128]	@ 0x80
 8028c7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028c7c:	3b01      	subs	r3, #1
 8028c7e:	9311      	str	r3, [sp, #68]	@ 0x44
 8028c80:	e732      	b.n	8028ae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028c82:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028c84:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8028c86:	4433      	add	r3, r6
 8028c88:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028c8a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8028c8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028c8e:	4433      	add	r3, r6
 8028c90:	9320      	str	r3, [sp, #128]	@ 0x80
 8028c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028c94:	3b01      	subs	r3, #1
 8028c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028c9a:	3302      	adds	r3, #2
 8028c9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8028c9e:	e702      	b.n	8028aa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028ca0:	d027      	beq.n	8028cf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8028ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028ca4:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8028ca6:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8028ca8:	3b01      	subs	r3, #1
 8028caa:	fb00 5003 	mla	r0, r0, r3, r5
 8028cae:	1400      	asrs	r0, r0, #16
 8028cb0:	f53f af16 	bmi.w	8028ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028cb4:	3901      	subs	r1, #1
 8028cb6:	4288      	cmp	r0, r1
 8028cb8:	f6bf af12 	bge.w	8028ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028cbc:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8028cbe:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8028cc0:	fb01 0303 	mla	r3, r1, r3, r0
 8028cc4:	141b      	asrs	r3, r3, #16
 8028cc6:	f53f af0b 	bmi.w	8028ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028cca:	3a01      	subs	r2, #1
 8028ccc:	4293      	cmp	r3, r2
 8028cce:	f6bf af07 	bge.w	8028ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028cd4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8028cd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8028cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8028cde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	dc70      	bgt.n	8028dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8028ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028ce6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028ce8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028cec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8028cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028cf4:	2b00      	cmp	r3, #0
 8028cf6:	f340 8124 	ble.w	8028f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8028cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028cfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028d02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028d06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028d0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028d0e:	eef0 6a62 	vmov.f32	s13, s5
 8028d12:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028d16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028d1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028d1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028d26:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8028d2a:	eef0 6a43 	vmov.f32	s13, s6
 8028d2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028d32:	ee12 2a90 	vmov	r2, s5
 8028d36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028d3a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028d3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d44:	ee13 2a10 	vmov	r2, s6
 8028d48:	9321      	str	r3, [sp, #132]	@ 0x84
 8028d4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028d4c:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8028d50:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d54:	9322      	str	r3, [sp, #136]	@ 0x88
 8028d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028d58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8028d5a:	3b01      	subs	r3, #1
 8028d5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8028d5e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028d60:	bf08      	it	eq
 8028d62:	4613      	moveq	r3, r2
 8028d64:	eeb0 3a67 	vmov.f32	s6, s15
 8028d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8028d6a:	eef0 2a47 	vmov.f32	s5, s14
 8028d6e:	e68c      	b.n	8028a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028d70:	b149      	cbz	r1, 8028d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8028d72:	4628      	mov	r0, r5
 8028d74:	5cb2      	ldrb	r2, [r6, r2]
 8028d76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028d7a:	4422      	add	r2, r4
 8028d7c:	46ac      	mov	ip, r5
 8028d7e:	e6f1      	b.n	8028b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8028d80:	4628      	mov	r0, r5
 8028d82:	462a      	mov	r2, r5
 8028d84:	e6ee      	b.n	8028b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8028d86:	4628      	mov	r0, r5
 8028d88:	462a      	mov	r2, r5
 8028d8a:	e7f7      	b.n	8028d7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8028d8c:	1c47      	adds	r7, r0, #1
 8028d8e:	f53f af69 	bmi.w	8028c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8028d92:	42ba      	cmp	r2, r7
 8028d94:	f6ff af66 	blt.w	8028c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8028d98:	1c6f      	adds	r7, r5, #1
 8028d9a:	f53f af63 	bmi.w	8028c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8028d9e:	42be      	cmp	r6, r7
 8028da0:	f6ff af60 	blt.w	8028c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8028da4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8028da6:	b236      	sxth	r6, r6
 8028da8:	b212      	sxth	r2, r2
 8028daa:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8028dae:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8028db2:	9002      	str	r0, [sp, #8]
 8028db4:	9200      	str	r2, [sp, #0]
 8028db6:	9601      	str	r6, [sp, #4]
 8028db8:	4623      	mov	r3, r4
 8028dba:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8028dbe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028dc0:	f7ff fd59 	bl	8028876 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8028dc4:	e74e      	b.n	8028c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8028dc6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8028dc8:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8028dca:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8028dce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8028dd0:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8028dd2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8028dd6:	142d      	asrs	r5, r5, #16
 8028dd8:	1400      	asrs	r0, r0, #16
 8028dda:	fb02 5000 	mla	r0, r2, r0, r5
 8028dde:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028de0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028de2:	f815 9000 	ldrb.w	r9, [r5, r0]
 8028de6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8028dea:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8028dee:	182e      	adds	r6, r5, r0
 8028df0:	eb04 0509 	add.w	r5, r4, r9
 8028df4:	2b00      	cmp	r3, #0
 8028df6:	f000 8096 	beq.w	8028f26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8028dfa:	7877      	ldrb	r7, [r6, #1]
 8028dfc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8028e00:	4427      	add	r7, r4
 8028e02:	2900      	cmp	r1, #0
 8028e04:	f000 8097 	beq.w	8028f36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8028e08:	18b0      	adds	r0, r6, r2
 8028e0a:	7840      	ldrb	r0, [r0, #1]
 8028e0c:	5cb2      	ldrb	r2, [r6, r2]
 8028e0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028e12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028e16:	4422      	add	r2, r4
 8028e18:	4420      	add	r0, r4
 8028e1a:	b29b      	uxth	r3, r3
 8028e1c:	b289      	uxth	r1, r1
 8028e1e:	fb03 f801 	mul.w	r8, r3, r1
 8028e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028e24:	011b      	lsls	r3, r3, #4
 8028e26:	f8b6 c000 	ldrh.w	ip, [r6]
 8028e2a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8028e2e:	78be      	ldrb	r6, [r7, #2]
 8028e30:	eba3 0308 	sub.w	r3, r3, r8
 8028e34:	b29b      	uxth	r3, r3
 8028e36:	435e      	muls	r6, r3
 8028e38:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8028e3c:	b289      	uxth	r1, r1
 8028e3e:	f895 b002 	ldrb.w	fp, [r5, #2]
 8028e42:	ebae 0e01 	sub.w	lr, lr, r1
 8028e46:	fa1f fe8e 	uxth.w	lr, lr
 8028e4a:	fb0e 660b 	mla	r6, lr, fp, r6
 8028e4e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8028e52:	9310      	str	r3, [sp, #64]	@ 0x40
 8028e54:	fb01 660b 	mla	r6, r1, fp, r6
 8028e58:	f890 b002 	ldrb.w	fp, [r0, #2]
 8028e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028e5e:	fb08 660b 	mla	r6, r8, fp, r6
 8028e62:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8028e66:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8028e6a:	fb1b fb03 	smulbb	fp, fp, r3
 8028e6e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028e72:	fb06 b60a 	mla	r6, r6, sl, fp
 8028e76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028e78:	f895 b001 	ldrb.w	fp, [r5, #1]
 8028e7c:	787d      	ldrb	r5, [r7, #1]
 8028e7e:	783f      	ldrb	r7, [r7, #0]
 8028e80:	435d      	muls	r5, r3
 8028e82:	fb0e 550b 	mla	r5, lr, fp, r5
 8028e86:	f892 b001 	ldrb.w	fp, [r2, #1]
 8028e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028e8c:	fb01 550b 	mla	r5, r1, fp, r5
 8028e90:	f890 b001 	ldrb.w	fp, [r0, #1]
 8028e94:	f814 9009 	ldrb.w	r9, [r4, r9]
 8028e98:	fb08 550b 	mla	r5, r8, fp, r5
 8028e9c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8028ea0:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8028ea4:	fb1b fb03 	smulbb	fp, fp, r3
 8028ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028eaa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028eae:	437b      	muls	r3, r7
 8028eb0:	fb0e 3309 	mla	r3, lr, r9, r3
 8028eb4:	7817      	ldrb	r7, [r2, #0]
 8028eb6:	fa5f fc8c 	uxtb.w	ip, ip
 8028eba:	fb01 3307 	mla	r3, r1, r7, r3
 8028ebe:	7807      	ldrb	r7, [r0, #0]
 8028ec0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8028ec4:	fb08 3707 	mla	r7, r8, r7, r3
 8028ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028eca:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8028ece:	fb1c fc03 	smulbb	ip, ip, r3
 8028ed2:	fb05 b50a 	mla	r5, r5, sl, fp
 8028ed6:	fb07 c70a 	mla	r7, r7, sl, ip
 8028eda:	b2b6      	uxth	r6, r6
 8028edc:	b2ad      	uxth	r5, r5
 8028ede:	b2bf      	uxth	r7, r7
 8028ee0:	1c73      	adds	r3, r6, #1
 8028ee2:	1c7a      	adds	r2, r7, #1
 8028ee4:	f105 0b01 	add.w	fp, r5, #1
 8028ee8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8028eec:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8028ef0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8028ef4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028ef8:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8028efc:	096d      	lsrs	r5, r5, #5
 8028efe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028f00:	4316      	orrs	r6, r2
 8028f02:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028f06:	432e      	orrs	r6, r5
 8028f08:	f823 6b02 	strh.w	r6, [r3], #2
 8028f0c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028f0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8028f10:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028f12:	4413      	add	r3, r2
 8028f14:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028f16:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8028f18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028f1a:	4413      	add	r3, r2
 8028f1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8028f1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028f20:	3b01      	subs	r3, #1
 8028f22:	9311      	str	r3, [sp, #68]	@ 0x44
 8028f24:	e6db      	b.n	8028cde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8028f26:	b149      	cbz	r1, 8028f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8028f28:	4628      	mov	r0, r5
 8028f2a:	5cb2      	ldrb	r2, [r6, r2]
 8028f2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028f30:	4422      	add	r2, r4
 8028f32:	462f      	mov	r7, r5
 8028f34:	e771      	b.n	8028e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8028f36:	4628      	mov	r0, r5
 8028f38:	462a      	mov	r2, r5
 8028f3a:	e76e      	b.n	8028e1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8028f3c:	4628      	mov	r0, r5
 8028f3e:	462a      	mov	r2, r5
 8028f40:	e7f7      	b.n	8028f32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028f42:	b015      	add	sp, #84	@ 0x54
 8028f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028f48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8028f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f4c:	880f      	ldrh	r7, [r1, #0]
 8028f4e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8028f52:	023c      	lsls	r4, r7, #8
 8028f54:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8028f58:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8028f5c:	fb05 ca0e 	mla	sl, r5, lr, ip
 8028f60:	017c      	lsls	r4, r7, #5
 8028f62:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8028f66:	00ff      	lsls	r7, r7, #3
 8028f68:	ea4b 0404 	orr.w	r4, fp, r4
 8028f6c:	b2ff      	uxtb	r7, r7
 8028f6e:	4327      	orrs	r7, r4
 8028f70:	2d00      	cmp	r5, #0
 8028f72:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8028f76:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8028f7a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8028f7e:	eb02 080a 	add.w	r8, r2, sl
 8028f82:	9701      	str	r7, [sp, #4]
 8028f84:	db7e      	blt.n	8029084 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8028f86:	45a9      	cmp	r9, r5
 8028f88:	dd7c      	ble.n	8029084 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8028f8a:	f1bc 0f00 	cmp.w	ip, #0
 8028f8e:	db77      	blt.n	8029080 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8028f90:	45e6      	cmp	lr, ip
 8028f92:	dd75      	ble.n	8029080 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8028f94:	f812 700a 	ldrb.w	r7, [r2, sl]
 8028f98:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8028f9c:	441f      	add	r7, r3
 8028f9e:	f11c 0201 	adds.w	r2, ip, #1
 8028fa2:	d472      	bmi.n	802908a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8028fa4:	4596      	cmp	lr, r2
 8028fa6:	dd70      	ble.n	802908a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8028fa8:	2800      	cmp	r0, #0
 8028faa:	d06e      	beq.n	802908a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8028fac:	f898 4001 	ldrb.w	r4, [r8, #1]
 8028fb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028fb4:	441c      	add	r4, r3
 8028fb6:	3501      	adds	r5, #1
 8028fb8:	d46b      	bmi.n	8029092 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8028fba:	45a9      	cmp	r9, r5
 8028fbc:	dd69      	ble.n	8029092 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8028fbe:	2e00      	cmp	r6, #0
 8028fc0:	d067      	beq.n	8029092 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8028fc2:	f1bc 0f00 	cmp.w	ip, #0
 8028fc6:	db62      	blt.n	802908e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8028fc8:	45e6      	cmp	lr, ip
 8028fca:	dd60      	ble.n	802908e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8028fcc:	f818 500e 	ldrb.w	r5, [r8, lr]
 8028fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028fd4:	441d      	add	r5, r3
 8028fd6:	f11c 0201 	adds.w	r2, ip, #1
 8028fda:	d45d      	bmi.n	8029098 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8028fdc:	4596      	cmp	lr, r2
 8028fde:	dd5b      	ble.n	8029098 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8028fe0:	2800      	cmp	r0, #0
 8028fe2:	d059      	beq.n	8029098 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8028fe4:	44c6      	add	lr, r8
 8028fe6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8028fea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028fee:	4413      	add	r3, r2
 8028ff0:	b280      	uxth	r0, r0
 8028ff2:	b2b2      	uxth	r2, r6
 8028ff4:	fb00 f602 	mul.w	r6, r0, r2
 8028ff8:	0100      	lsls	r0, r0, #4
 8028ffa:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8028ffe:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8029002:	1b80      	subs	r0, r0, r6
 8029004:	fa1f fc82 	uxth.w	ip, r2
 8029008:	b282      	uxth	r2, r0
 802900a:	78a0      	ldrb	r0, [r4, #2]
 802900c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8029010:	4350      	muls	r0, r2
 8029012:	eba8 080c 	sub.w	r8, r8, ip
 8029016:	fa1f f888 	uxth.w	r8, r8
 802901a:	fb08 0e0e 	mla	lr, r8, lr, r0
 802901e:	78a8      	ldrb	r0, [r5, #2]
 8029020:	f897 9000 	ldrb.w	r9, [r7]
 8029024:	fb0c e000 	mla	r0, ip, r0, lr
 8029028:	f893 e002 	ldrb.w	lr, [r3, #2]
 802902c:	787f      	ldrb	r7, [r7, #1]
 802902e:	fb06 0e0e 	mla	lr, r6, lr, r0
 8029032:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8029036:	f894 e000 	ldrb.w	lr, [r4]
 802903a:	fb02 fe0e 	mul.w	lr, r2, lr
 802903e:	fb08 e909 	mla	r9, r8, r9, lr
 8029042:	f895 e000 	ldrb.w	lr, [r5]
 8029046:	fb0c 990e 	mla	r9, ip, lr, r9
 802904a:	f893 e000 	ldrb.w	lr, [r3]
 802904e:	785b      	ldrb	r3, [r3, #1]
 8029050:	fb06 9e0e 	mla	lr, r6, lr, r9
 8029054:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8029058:	ea4e 0e00 	orr.w	lr, lr, r0
 802905c:	7860      	ldrb	r0, [r4, #1]
 802905e:	4350      	muls	r0, r2
 8029060:	fb08 0007 	mla	r0, r8, r7, r0
 8029064:	786a      	ldrb	r2, [r5, #1]
 8029066:	fb0c 0202 	mla	r2, ip, r2, r0
 802906a:	fb06 2303 	mla	r3, r6, r3, r2
 802906e:	095b      	lsrs	r3, r3, #5
 8029070:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029074:	ea4e 0303 	orr.w	r3, lr, r3
 8029078:	800b      	strh	r3, [r1, #0]
 802907a:	b003      	add	sp, #12
 802907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029080:	af01      	add	r7, sp, #4
 8029082:	e78c      	b.n	8028f9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8029084:	ac01      	add	r4, sp, #4
 8029086:	4627      	mov	r7, r4
 8029088:	e795      	b.n	8028fb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802908a:	ac01      	add	r4, sp, #4
 802908c:	e793      	b.n	8028fb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802908e:	ad01      	add	r5, sp, #4
 8029090:	e7a1      	b.n	8028fd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8029092:	ab01      	add	r3, sp, #4
 8029094:	461d      	mov	r5, r3
 8029096:	e7ab      	b.n	8028ff0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8029098:	ab01      	add	r3, sp, #4
 802909a:	e7a9      	b.n	8028ff0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0802909c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290a0:	b08f      	sub	sp, #60	@ 0x3c
 80290a2:	920c      	str	r2, [sp, #48]	@ 0x30
 80290a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80290a6:	900d      	str	r0, [sp, #52]	@ 0x34
 80290a8:	6850      	ldr	r0, [r2, #4]
 80290aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80290ac:	9306      	str	r3, [sp, #24]
 80290ae:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 80290b2:	fb00 1303 	mla	r3, r0, r3, r1
 80290b6:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 80290ba:	6812      	ldr	r2, [r2, #0]
 80290bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80290c0:	9307      	str	r3, [sp, #28]
 80290c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	9308      	str	r3, [sp, #32]
 80290c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80290ca:	685c      	ldr	r4, [r3, #4]
 80290cc:	3404      	adds	r4, #4
 80290ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80290d0:	2b00      	cmp	r3, #0
 80290d2:	dc03      	bgt.n	80290dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80290d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80290d6:	2b00      	cmp	r3, #0
 80290d8:	f340 81d6 	ble.w	8029488 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80290dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80290de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80290e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80290e6:	1e48      	subs	r0, r1, #1
 80290e8:	1e56      	subs	r6, r2, #1
 80290ea:	9b06      	ldr	r3, [sp, #24]
 80290ec:	2b00      	cmp	r3, #0
 80290ee:	f340 80b7 	ble.w	8029260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80290f2:	ea5f 472b 	movs.w	r7, fp, asr #16
 80290f6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80290fa:	d406      	bmi.n	802910a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80290fc:	4287      	cmp	r7, r0
 80290fe:	da04      	bge.n	802910a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8029100:	2b00      	cmp	r3, #0
 8029102:	db02      	blt.n	802910a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8029104:	42b3      	cmp	r3, r6
 8029106:	f2c0 80ac 	blt.w	8029262 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802910a:	3701      	adds	r7, #1
 802910c:	f100 809d 	bmi.w	802924a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8029110:	42b9      	cmp	r1, r7
 8029112:	f2c0 809a 	blt.w	802924a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8029116:	3301      	adds	r3, #1
 8029118:	f100 8097 	bmi.w	802924a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802911c:	429a      	cmp	r2, r3
 802911e:	f2c0 8094 	blt.w	802924a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8029122:	9b06      	ldr	r3, [sp, #24]
 8029124:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029126:	9b07      	ldr	r3, [sp, #28]
 8029128:	9309      	str	r3, [sp, #36]	@ 0x24
 802912a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802912c:	2b00      	cmp	r3, #0
 802912e:	f340 80b5 	ble.w	802929c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8029132:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8029134:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8029136:	68c7      	ldr	r7, [r0, #12]
 8029138:	ea5f 402b 	movs.w	r0, fp, asr #16
 802913c:	ea4f 4625 	mov.w	r6, r5, asr #16
 8029140:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8029144:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8029148:	6892      	ldr	r2, [r2, #8]
 802914a:	f100 80fb 	bmi.w	8029344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802914e:	f102 3cff 	add.w	ip, r2, #4294967295
 8029152:	4560      	cmp	r0, ip
 8029154:	f280 80f6 	bge.w	8029344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8029158:	2e00      	cmp	r6, #0
 802915a:	f2c0 80f3 	blt.w	8029344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802915e:	f107 3cff 	add.w	ip, r7, #4294967295
 8029162:	4566      	cmp	r6, ip
 8029164:	f280 80ee 	bge.w	8029344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8029168:	b212      	sxth	r2, r2
 802916a:	fb06 0002 	mla	r0, r6, r2, r0
 802916e:	9e08      	ldr	r6, [sp, #32]
 8029170:	1837      	adds	r7, r6, r0
 8029172:	5c30      	ldrb	r0, [r6, r0]
 8029174:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8029178:	eb04 0c08 	add.w	ip, r4, r8
 802917c:	2b00      	cmp	r3, #0
 802917e:	f000 80d3 	beq.w	8029328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8029182:	787e      	ldrb	r6, [r7, #1]
 8029184:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8029188:	4426      	add	r6, r4
 802918a:	2900      	cmp	r1, #0
 802918c:	f000 80d4 	beq.w	8029338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8029190:	18b8      	adds	r0, r7, r2
 8029192:	7840      	ldrb	r0, [r0, #1]
 8029194:	5cba      	ldrb	r2, [r7, r2]
 8029196:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802919a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802919e:	4422      	add	r2, r4
 80291a0:	4420      	add	r0, r4
 80291a2:	b29b      	uxth	r3, r3
 80291a4:	b289      	uxth	r1, r1
 80291a6:	fb03 f901 	mul.w	r9, r3, r1
 80291aa:	011b      	lsls	r3, r3, #4
 80291ac:	78b7      	ldrb	r7, [r6, #2]
 80291ae:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80291b2:	eba3 0309 	sub.w	r3, r3, r9
 80291b6:	b29b      	uxth	r3, r3
 80291b8:	435f      	muls	r7, r3
 80291ba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80291be:	b289      	uxth	r1, r1
 80291c0:	f89c a002 	ldrb.w	sl, [ip, #2]
 80291c4:	ebae 0e01 	sub.w	lr, lr, r1
 80291c8:	fa1f fe8e 	uxth.w	lr, lr
 80291cc:	fb0e 770a 	mla	r7, lr, sl, r7
 80291d0:	f892 a002 	ldrb.w	sl, [r2, #2]
 80291d4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80291d8:	fb01 770a 	mla	r7, r1, sl, r7
 80291dc:	f890 a002 	ldrb.w	sl, [r0, #2]
 80291e0:	fb09 7a0a 	mla	sl, r9, sl, r7
 80291e4:	f814 7008 	ldrb.w	r7, [r4, r8]
 80291e8:	f896 8000 	ldrb.w	r8, [r6]
 80291ec:	7876      	ldrb	r6, [r6, #1]
 80291ee:	fb03 f808 	mul.w	r8, r3, r8
 80291f2:	fb0e 8807 	mla	r8, lr, r7, r8
 80291f6:	7817      	ldrb	r7, [r2, #0]
 80291f8:	4373      	muls	r3, r6
 80291fa:	fb01 8807 	mla	r8, r1, r7, r8
 80291fe:	7807      	ldrb	r7, [r0, #0]
 8029200:	fb0e 330c 	mla	r3, lr, ip, r3
 8029204:	fb09 8707 	mla	r7, r9, r7, r8
 8029208:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 802920c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8029210:	ea47 070a 	orr.w	r7, r7, sl
 8029214:	f892 a001 	ldrb.w	sl, [r2, #1]
 8029218:	fb01 310a 	mla	r1, r1, sl, r3
 802921c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8029220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029222:	fb09 1a0a 	mla	sl, r9, sl, r1
 8029226:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802922a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802922e:	ea47 070a 	orr.w	r7, r7, sl
 8029232:	801f      	strh	r7, [r3, #0]
 8029234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029236:	3302      	adds	r3, #2
 8029238:	9309      	str	r3, [sp, #36]	@ 0x24
 802923a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802923c:	449b      	add	fp, r3
 802923e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029240:	441d      	add	r5, r3
 8029242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029244:	3b01      	subs	r3, #1
 8029246:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029248:	e76f      	b.n	802912a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802924a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802924c:	449b      	add	fp, r3
 802924e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029250:	441d      	add	r5, r3
 8029252:	9b06      	ldr	r3, [sp, #24]
 8029254:	3b01      	subs	r3, #1
 8029256:	9306      	str	r3, [sp, #24]
 8029258:	9b07      	ldr	r3, [sp, #28]
 802925a:	3302      	adds	r3, #2
 802925c:	9307      	str	r3, [sp, #28]
 802925e:	e744      	b.n	80290ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8029260:	d023      	beq.n	80292aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029262:	9b06      	ldr	r3, [sp, #24]
 8029264:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029266:	3b01      	subs	r3, #1
 8029268:	fb00 b003 	mla	r0, r0, r3, fp
 802926c:	1400      	asrs	r0, r0, #16
 802926e:	f53f af58 	bmi.w	8029122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8029272:	3901      	subs	r1, #1
 8029274:	4288      	cmp	r0, r1
 8029276:	f6bf af54 	bge.w	8029122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802927a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802927c:	fb01 5303 	mla	r3, r1, r3, r5
 8029280:	141b      	asrs	r3, r3, #16
 8029282:	f53f af4e 	bmi.w	8029122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8029286:	3a01      	subs	r2, #1
 8029288:	4293      	cmp	r3, r2
 802928a:	f6bf af4a 	bge.w	8029122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802928e:	9b06      	ldr	r3, [sp, #24]
 8029290:	9309      	str	r3, [sp, #36]	@ 0x24
 8029292:	9b07      	ldr	r3, [sp, #28]
 8029294:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029298:	2b00      	cmp	r3, #0
 802929a:	dc70      	bgt.n	802937e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802929c:	9b06      	ldr	r3, [sp, #24]
 802929e:	9a07      	ldr	r2, [sp, #28]
 80292a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80292a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80292a8:	9307      	str	r3, [sp, #28]
 80292aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80292ac:	2b00      	cmp	r3, #0
 80292ae:	f340 80eb 	ble.w	8029488 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80292b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80292b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80292ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80292be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80292c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80292c6:	eef0 6a62 	vmov.f32	s13, s5
 80292ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80292ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80292d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80292d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80292da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80292de:	ee16 ba90 	vmov	fp, s13
 80292e2:	eef0 6a43 	vmov.f32	s13, s6
 80292e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80292ea:	ee12 2a90 	vmov	r2, s5
 80292ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80292f2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80292f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80292f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80292fc:	ee13 2a10 	vmov	r2, s6
 8029300:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029302:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029304:	ee16 5a90 	vmov	r5, s13
 8029308:	fb92 f3f3 	sdiv	r3, r2, r3
 802930c:	931c      	str	r3, [sp, #112]	@ 0x70
 802930e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029310:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029312:	3b01      	subs	r3, #1
 8029314:	930a      	str	r3, [sp, #40]	@ 0x28
 8029316:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029318:	bf08      	it	eq
 802931a:	4613      	moveq	r3, r2
 802931c:	eeb0 3a67 	vmov.f32	s6, s15
 8029320:	9306      	str	r3, [sp, #24]
 8029322:	eef0 2a47 	vmov.f32	s5, s14
 8029326:	e6d2      	b.n	80290ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8029328:	b149      	cbz	r1, 802933e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802932a:	4660      	mov	r0, ip
 802932c:	5cba      	ldrb	r2, [r7, r2]
 802932e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8029332:	4422      	add	r2, r4
 8029334:	4666      	mov	r6, ip
 8029336:	e734      	b.n	80291a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8029338:	4660      	mov	r0, ip
 802933a:	4662      	mov	r2, ip
 802933c:	e731      	b.n	80291a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802933e:	4660      	mov	r0, ip
 8029340:	4662      	mov	r2, ip
 8029342:	e7f7      	b.n	8029334 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8029344:	f110 0c01 	adds.w	ip, r0, #1
 8029348:	f53f af74 	bmi.w	8029234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802934c:	4562      	cmp	r2, ip
 802934e:	f6ff af71 	blt.w	8029234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8029352:	f116 0c01 	adds.w	ip, r6, #1
 8029356:	f53f af6d 	bmi.w	8029234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802935a:	4567      	cmp	r7, ip
 802935c:	f6ff af6a 	blt.w	8029234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8029360:	b23f      	sxth	r7, r7
 8029362:	b212      	sxth	r2, r2
 8029364:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8029368:	e9cd 0602 	strd	r0, r6, [sp, #8]
 802936c:	9200      	str	r2, [sp, #0]
 802936e:	9701      	str	r7, [sp, #4]
 8029370:	4623      	mov	r3, r4
 8029372:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8029376:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029378:	f7ff fde6 	bl	8028f48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802937c:	e75a      	b.n	8029234 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802937e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8029380:	ea4f 462b 	mov.w	r6, fp, asr #16
 8029384:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8029388:	1428      	asrs	r0, r5, #16
 802938a:	fb02 6000 	mla	r0, r2, r0, r6
 802938e:	9e08      	ldr	r6, [sp, #32]
 8029390:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8029394:	f816 8000 	ldrb.w	r8, [r6, r0]
 8029398:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802939c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80293a0:	1837      	adds	r7, r6, r0
 80293a2:	eb04 0c08 	add.w	ip, r4, r8
 80293a6:	2b00      	cmp	r3, #0
 80293a8:	d060      	beq.n	802946c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 80293aa:	787e      	ldrb	r6, [r7, #1]
 80293ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80293b0:	4426      	add	r6, r4
 80293b2:	2900      	cmp	r1, #0
 80293b4:	d062      	beq.n	802947c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 80293b6:	18b8      	adds	r0, r7, r2
 80293b8:	7840      	ldrb	r0, [r0, #1]
 80293ba:	5cba      	ldrb	r2, [r7, r2]
 80293bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80293c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80293c4:	4422      	add	r2, r4
 80293c6:	4420      	add	r0, r4
 80293c8:	b29b      	uxth	r3, r3
 80293ca:	b289      	uxth	r1, r1
 80293cc:	fb03 f901 	mul.w	r9, r3, r1
 80293d0:	011b      	lsls	r3, r3, #4
 80293d2:	78b7      	ldrb	r7, [r6, #2]
 80293d4:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80293d8:	eba3 0309 	sub.w	r3, r3, r9
 80293dc:	b29b      	uxth	r3, r3
 80293de:	435f      	muls	r7, r3
 80293e0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80293e4:	b289      	uxth	r1, r1
 80293e6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80293ea:	ebae 0e01 	sub.w	lr, lr, r1
 80293ee:	fa1f fe8e 	uxth.w	lr, lr
 80293f2:	fb0e 770a 	mla	r7, lr, sl, r7
 80293f6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80293fa:	f89c c001 	ldrb.w	ip, [ip, #1]
 80293fe:	fb01 770a 	mla	r7, r1, sl, r7
 8029402:	f890 a002 	ldrb.w	sl, [r0, #2]
 8029406:	fb09 7a0a 	mla	sl, r9, sl, r7
 802940a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802940e:	f896 8000 	ldrb.w	r8, [r6]
 8029412:	7876      	ldrb	r6, [r6, #1]
 8029414:	fb03 f808 	mul.w	r8, r3, r8
 8029418:	fb0e 8807 	mla	r8, lr, r7, r8
 802941c:	7817      	ldrb	r7, [r2, #0]
 802941e:	4373      	muls	r3, r6
 8029420:	fb01 8807 	mla	r8, r1, r7, r8
 8029424:	7807      	ldrb	r7, [r0, #0]
 8029426:	fb0e 330c 	mla	r3, lr, ip, r3
 802942a:	fb09 8707 	mla	r7, r9, r7, r8
 802942e:	7856      	ldrb	r6, [r2, #1]
 8029430:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8029434:	fb01 3306 	mla	r3, r1, r6, r3
 8029438:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802943c:	ea47 070a 	orr.w	r7, r7, sl
 8029440:	f890 a001 	ldrb.w	sl, [r0, #1]
 8029444:	fb09 3a0a 	mla	sl, r9, sl, r3
 8029448:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802944c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802944e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8029452:	ea47 070a 	orr.w	r7, r7, sl
 8029456:	f823 7b02 	strh.w	r7, [r3], #2
 802945a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802945c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802945e:	449b      	add	fp, r3
 8029460:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029462:	441d      	add	r5, r3
 8029464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029466:	3b01      	subs	r3, #1
 8029468:	9309      	str	r3, [sp, #36]	@ 0x24
 802946a:	e714      	b.n	8029296 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802946c:	b149      	cbz	r1, 8029482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802946e:	4660      	mov	r0, ip
 8029470:	5cba      	ldrb	r2, [r7, r2]
 8029472:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8029476:	4422      	add	r2, r4
 8029478:	4666      	mov	r6, ip
 802947a:	e7a5      	b.n	80293c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802947c:	4660      	mov	r0, ip
 802947e:	4662      	mov	r2, ip
 8029480:	e7a2      	b.n	80293c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8029482:	4660      	mov	r0, ip
 8029484:	4662      	mov	r2, ip
 8029486:	e7f7      	b.n	8029478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8029488:	b00f      	add	sp, #60	@ 0x3c
 802948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802948e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802948e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029492:	b085      	sub	sp, #20
 8029494:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8029498:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 802949c:	9102      	str	r1, [sp, #8]
 802949e:	fb04 710c 	mla	r1, r4, ip, r7
 80294a2:	2c00      	cmp	r4, #0
 80294a4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 80294a8:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80294ac:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80294b0:	eb02 0e01 	add.w	lr, r2, r1
 80294b4:	f2c0 8122 	blt.w	80296fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80294b8:	45a0      	cmp	r8, r4
 80294ba:	f340 811f 	ble.w	80296fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80294be:	2f00      	cmp	r7, #0
 80294c0:	f2c0 811a 	blt.w	80296f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80294c4:	45bc      	cmp	ip, r7
 80294c6:	f340 8117 	ble.w	80296f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80294ca:	5c52      	ldrb	r2, [r2, r1]
 80294cc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80294d0:	1c7a      	adds	r2, r7, #1
 80294d2:	f100 8116 	bmi.w	8029702 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80294d6:	4594      	cmp	ip, r2
 80294d8:	f340 8113 	ble.w	8029702 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80294dc:	2e00      	cmp	r6, #0
 80294de:	f000 8112 	beq.w	8029706 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80294e2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80294e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80294ea:	3401      	adds	r4, #1
 80294ec:	f100 810f 	bmi.w	802970e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80294f0:	45a0      	cmp	r8, r4
 80294f2:	f340 810c 	ble.w	802970e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80294f6:	2800      	cmp	r0, #0
 80294f8:	f000 810c 	beq.w	8029714 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80294fc:	2f00      	cmp	r7, #0
 80294fe:	f2c0 8104 	blt.w	802970a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8029502:	45bc      	cmp	ip, r7
 8029504:	f340 8101 	ble.w	802970a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8029508:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802950c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8029510:	3701      	adds	r7, #1
 8029512:	f100 8102 	bmi.w	802971a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8029516:	45bc      	cmp	ip, r7
 8029518:	f340 80ff 	ble.w	802971a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802951c:	2e00      	cmp	r6, #0
 802951e:	f000 80fe 	beq.w	802971e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8029522:	44f4      	add	ip, lr
 8029524:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8029528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802952c:	b2b6      	uxth	r6, r6
 802952e:	b280      	uxth	r0, r0
 8029530:	fb00 fe06 	mul.w	lr, r0, r6
 8029534:	0136      	lsls	r6, r6, #4
 8029536:	eba6 070e 	sub.w	r7, r6, lr
 802953a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802953e:	b2bf      	uxth	r7, r7
 8029540:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8029544:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029548:	fb0a f607 	mul.w	r6, sl, r7
 802954c:	b280      	uxth	r0, r0
 802954e:	1a1b      	subs	r3, r3, r0
 8029550:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8029554:	b29b      	uxth	r3, r3
 8029556:	fb0b 6603 	mla	r6, fp, r3, r6
 802955a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802955e:	fb00 6609 	mla	r6, r0, r9, r6
 8029562:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8029566:	fb0e 6608 	mla	r6, lr, r8, r6
 802956a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802956e:	9600      	str	r6, [sp, #0]
 8029570:	2e00      	cmp	r6, #0
 8029572:	f000 80be 	beq.w	80296f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8029576:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802957a:	fb0b fc0c 	mul.w	ip, fp, ip
 802957e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029582:	fb0b f505 	mul.w	r5, fp, r5
 8029586:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802958a:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802958e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029592:	44dc      	add	ip, fp
 8029594:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029598:	9501      	str	r5, [sp, #4]
 802959a:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802959e:	9503      	str	r5, [sp, #12]
 80295a0:	9d01      	ldr	r5, [sp, #4]
 80295a2:	9e02      	ldr	r6, [sp, #8]
 80295a4:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80295a8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80295ac:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80295b0:	fb0a fc0c 	mul.w	ip, sl, ip
 80295b4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80295b8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80295bc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80295c0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80295c4:	4465      	add	r5, ip
 80295c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80295ca:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80295ce:	fb09 fc0c 	mul.w	ip, r9, ip
 80295d2:	fb09 f904 	mul.w	r9, r9, r4
 80295d6:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80295da:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80295de:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80295e2:	fb08 f404 	mul.w	r4, r8, r4
 80295e6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80295ea:	fb08 f802 	mul.w	r8, r8, r2
 80295ee:	0a2d      	lsrs	r5, r5, #8
 80295f0:	0a22      	lsrs	r2, r4, #8
 80295f2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80295f6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80295fa:	437d      	muls	r5, r7
 80295fc:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8029600:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029604:	4414      	add	r4, r2
 8029606:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802960a:	fb0a fa01 	mul.w	sl, sl, r1
 802960e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8029612:	9a03      	ldr	r2, [sp, #12]
 8029614:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8029618:	fb02 5503 	mla	r5, r2, r3, r5
 802961c:	0a24      	lsrs	r4, r4, #8
 802961e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8029622:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8029626:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802962a:	fb04 540e 	mla	r4, r4, lr, r5
 802962e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029632:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029636:	4461      	add	r1, ip
 8029638:	0a09      	lsrs	r1, r1, #8
 802963a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802963e:	fb01 4100 	mla	r1, r1, r0, r4
 8029642:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029646:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802964a:	fb07 f70a 	mul.w	r7, r7, sl
 802964e:	0a09      	lsrs	r1, r1, #8
 8029650:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8029654:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8029658:	fb03 7101 	mla	r1, r3, r1, r7
 802965c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029660:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8029664:	fb0e 1e08 	mla	lr, lr, r8, r1
 8029668:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802966c:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8029670:	fb00 e101 	mla	r1, r0, r1, lr
 8029674:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8029678:	9a00      	ldr	r2, [sp, #0]
 802967a:	b287      	uxth	r7, r0
 802967c:	437a      	muls	r2, r7
 802967e:	1c53      	adds	r3, r2, #1
 8029680:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029684:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029688:	0a09      	lsrs	r1, r1, #8
 802968a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802968e:	4321      	orrs	r1, r4
 8029690:	0c0a      	lsrs	r2, r1, #16
 8029692:	8836      	ldrh	r6, [r6, #0]
 8029694:	fb12 f207 	smulbb	r2, r2, r7
 8029698:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802969c:	b2c8      	uxtb	r0, r1
 802969e:	1235      	asrs	r5, r6, #8
 80296a0:	fb14 f407 	smulbb	r4, r4, r7
 80296a4:	fb10 f007 	smulbb	r0, r0, r7
 80296a8:	b2db      	uxtb	r3, r3
 80296aa:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80296ae:	fb05 2503 	mla	r5, r5, r3, r2
 80296b2:	10f2      	asrs	r2, r6, #3
 80296b4:	00f6      	lsls	r6, r6, #3
 80296b6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80296ba:	b2f6      	uxtb	r6, r6
 80296bc:	fb02 4203 	mla	r2, r2, r3, r4
 80296c0:	fb06 0303 	mla	r3, r6, r3, r0
 80296c4:	b2ad      	uxth	r5, r5
 80296c6:	b299      	uxth	r1, r3
 80296c8:	b294      	uxth	r4, r2
 80296ca:	1c6b      	adds	r3, r5, #1
 80296cc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80296d0:	1c62      	adds	r2, r4, #1
 80296d2:	1c4b      	adds	r3, r1, #1
 80296d4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80296d8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80296dc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80296e0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80296e4:	0952      	lsrs	r2, r2, #5
 80296e6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80296ea:	432b      	orrs	r3, r5
 80296ec:	4313      	orrs	r3, r2
 80296ee:	9a02      	ldr	r2, [sp, #8]
 80296f0:	8013      	strh	r3, [r2, #0]
 80296f2:	b005      	add	sp, #20
 80296f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296f8:	2500      	movs	r5, #0
 80296fa:	e6e9      	b.n	80294d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80296fc:	2100      	movs	r1, #0
 80296fe:	460d      	mov	r5, r1
 8029700:	e6f3      	b.n	80294ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8029702:	2100      	movs	r1, #0
 8029704:	e6f1      	b.n	80294ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8029706:	4631      	mov	r1, r6
 8029708:	e6ef      	b.n	80294ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802970a:	2400      	movs	r4, #0
 802970c:	e700      	b.n	8029510 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802970e:	2200      	movs	r2, #0
 8029710:	4614      	mov	r4, r2
 8029712:	e70b      	b.n	802952c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8029714:	4602      	mov	r2, r0
 8029716:	4604      	mov	r4, r0
 8029718:	e708      	b.n	802952c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802971a:	2200      	movs	r2, #0
 802971c:	e706      	b.n	802952c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802971e:	4632      	mov	r2, r6
 8029720:	e704      	b.n	802952c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08029722 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029726:	b09f      	sub	sp, #124	@ 0x7c
 8029728:	921b      	str	r2, [sp, #108]	@ 0x6c
 802972a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802972c:	901d      	str	r0, [sp, #116]	@ 0x74
 802972e:	9309      	str	r3, [sp, #36]	@ 0x24
 8029730:	6850      	ldr	r0, [r2, #4]
 8029732:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8029736:	9119      	str	r1, [sp, #100]	@ 0x64
 8029738:	931c      	str	r3, [sp, #112]	@ 0x70
 802973a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802973e:	fb00 1303 	mla	r3, r0, r3, r1
 8029742:	6812      	ldr	r2, [r2, #0]
 8029744:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8029746:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802974a:	930c      	str	r3, [sp, #48]	@ 0x30
 802974c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802974e:	681b      	ldr	r3, [r3, #0]
 8029750:	9312      	str	r3, [sp, #72]	@ 0x48
 8029752:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029754:	685e      	ldr	r6, [r3, #4]
 8029756:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802975a:	3604      	adds	r6, #4
 802975c:	930d      	str	r3, [sp, #52]	@ 0x34
 802975e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8029760:	2b00      	cmp	r3, #0
 8029762:	dc03      	bgt.n	802976c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8029764:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029766:	2b00      	cmp	r3, #0
 8029768:	f340 8387 	ble.w	8029e7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802976c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802976e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029772:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029776:	1e48      	subs	r0, r1, #1
 8029778:	1e57      	subs	r7, r2, #1
 802977a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802977c:	2b00      	cmp	r3, #0
 802977e:	f340 8194 	ble.w	8029aaa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8029782:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8029784:	142b      	asrs	r3, r5, #16
 8029786:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802978a:	d406      	bmi.n	802979a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802978c:	4584      	cmp	ip, r0
 802978e:	da04      	bge.n	802979a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029790:	2b00      	cmp	r3, #0
 8029792:	db02      	blt.n	802979a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029794:	42bb      	cmp	r3, r7
 8029796:	f2c0 8189 	blt.w	8029aac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802979a:	f11c 0c01 	adds.w	ip, ip, #1
 802979e:	f100 8177 	bmi.w	8029a90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80297a2:	4561      	cmp	r1, ip
 80297a4:	f2c0 8174 	blt.w	8029a90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80297a8:	3301      	adds	r3, #1
 80297aa:	f100 8171 	bmi.w	8029a90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80297ae:	429a      	cmp	r2, r3
 80297b0:	f2c0 816e 	blt.w	8029a90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80297b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80297b6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80297b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80297ba:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80297bc:	2b00      	cmp	r3, #0
 80297be:	f340 8193 	ble.w	8029ae8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80297c2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80297c4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80297c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80297cc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80297ce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80297d2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80297d6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80297d8:	141b      	asrs	r3, r3, #16
 80297da:	f100 81d6 	bmi.w	8029b8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80297de:	f100 38ff 	add.w	r8, r0, #4294967295
 80297e2:	4543      	cmp	r3, r8
 80297e4:	f280 81d1 	bge.w	8029b8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80297e8:	f1bc 0f00 	cmp.w	ip, #0
 80297ec:	f2c0 81cd 	blt.w	8029b8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80297f0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80297f4:	45c4      	cmp	ip, r8
 80297f6:	f280 81c8 	bge.w	8029b8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80297fa:	b200      	sxth	r0, r0
 80297fc:	fb0c 3300 	mla	r3, ip, r0, r3
 8029800:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8029802:	eb04 0803 	add.w	r8, r4, r3
 8029806:	5ce3      	ldrb	r3, [r4, r3]
 8029808:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802980c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8029810:	2a00      	cmp	r2, #0
 8029812:	f000 81af 	beq.w	8029b74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029816:	f898 c001 	ldrb.w	ip, [r8, #1]
 802981a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802981e:	940e      	str	r4, [sp, #56]	@ 0x38
 8029820:	0e24      	lsrs	r4, r4, #24
 8029822:	9415      	str	r4, [sp, #84]	@ 0x54
 8029824:	b179      	cbz	r1, 8029846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8029826:	eb08 0c00 	add.w	ip, r8, r0
 802982a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802982e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8029832:	900a      	str	r0, [sp, #40]	@ 0x28
 8029834:	0e00      	lsrs	r0, r0, #24
 8029836:	9013      	str	r0, [sp, #76]	@ 0x4c
 8029838:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802983c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8029840:	900f      	str	r0, [sp, #60]	@ 0x3c
 8029842:	0e00      	lsrs	r0, r0, #24
 8029844:	9016      	str	r0, [sp, #88]	@ 0x58
 8029846:	b292      	uxth	r2, r2
 8029848:	b289      	uxth	r1, r1
 802984a:	fb02 f901 	mul.w	r9, r2, r1
 802984e:	0112      	lsls	r2, r2, #4
 8029850:	eba2 0809 	sub.w	r8, r2, r9
 8029854:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8029856:	fa1f f888 	uxth.w	r8, r8
 802985a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802985e:	fb08 f000 	mul.w	r0, r8, r0
 8029862:	b289      	uxth	r1, r1
 8029864:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8029868:	1a52      	subs	r2, r2, r1
 802986a:	b292      	uxth	r2, r2
 802986c:	fb02 000e 	mla	r0, r2, lr, r0
 8029870:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8029872:	fb01 0004 	mla	r0, r1, r4, r0
 8029876:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8029878:	fb09 0004 	mla	r0, r9, r4, r0
 802987c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029880:	2800      	cmp	r0, #0
 8029882:	f000 80fa 	beq.w	8029a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029886:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802988a:	d01b      	beq.n	80298c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802988c:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029890:	fb0e fa0a 	mul.w	sl, lr, sl
 8029894:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029898:	fb0e fe03 	mul.w	lr, lr, r3
 802989c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80298a0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80298a4:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80298a8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80298ac:	4453      	add	r3, sl
 80298ae:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80298b2:	0a1b      	lsrs	r3, r3, #8
 80298b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80298b8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80298bc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80298c0:	ea43 030c 	orr.w	r3, r3, ip
 80298c4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80298c6:	2cff      	cmp	r4, #255	@ 0xff
 80298c8:	d021      	beq.n	802990e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80298ca:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80298cc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80298d0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80298d2:	fb04 fb0b 	mul.w	fp, r4, fp
 80298d6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80298d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80298dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80298e0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80298e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80298e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80298ea:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80298ee:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80298f2:	44de      	add	lr, fp
 80298f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80298f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80298fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029900:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029904:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029908:	ea4e 040a 	orr.w	r4, lr, sl
 802990c:	940e      	str	r4, [sp, #56]	@ 0x38
 802990e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8029910:	2cff      	cmp	r4, #255	@ 0xff
 8029912:	d021      	beq.n	8029958 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8029914:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029916:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802991a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802991c:	fb04 fb0b 	mul.w	fp, r4, fp
 8029920:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029922:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029926:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802992a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802992c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029930:	fb04 fa0a 	mul.w	sl, r4, sl
 8029934:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029938:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802993c:	44de      	add	lr, fp
 802993e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029942:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029946:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802994a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802994e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029952:	ea4e 040a 	orr.w	r4, lr, sl
 8029956:	940a      	str	r4, [sp, #40]	@ 0x28
 8029958:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802995a:	2cff      	cmp	r4, #255	@ 0xff
 802995c:	d021      	beq.n	80299a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802995e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8029960:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8029964:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8029966:	fb04 fb0b 	mul.w	fp, r4, fp
 802996a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802996c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029970:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029974:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8029976:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802997a:	fb04 fa0a 	mul.w	sl, r4, sl
 802997e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029982:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029986:	44de      	add	lr, fp
 8029988:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802998c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029990:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029994:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029998:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802999c:	ea4e 040a 	orr.w	r4, lr, sl
 80299a0:	940f      	str	r4, [sp, #60]	@ 0x3c
 80299a2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80299a4:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80299a8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80299ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80299b0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80299b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80299b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80299ba:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80299be:	fb01 cc0e 	mla	ip, r1, lr, ip
 80299c2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80299c4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80299c8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80299ca:	fb09 cc0e 	mla	ip, r9, lr, ip
 80299ce:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80299d2:	fb08 f80e 	mul.w	r8, r8, lr
 80299d6:	fb02 8303 	mla	r3, r2, r3, r8
 80299da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80299dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80299e0:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80299e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80299e6:	fb01 330a 	mla	r3, r1, sl, r3
 80299ea:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80299ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80299f0:	fb09 3901 	mla	r9, r9, r1, r3
 80299f4:	4342      	muls	r2, r0
 80299f6:	1c50      	adds	r0, r2, #1
 80299f8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80299fc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029a00:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029a04:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029a08:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8029a0c:	ea4c 0c09 	orr.w	ip, ip, r9
 8029a10:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029a12:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029a16:	883b      	ldrh	r3, [r7, #0]
 8029a18:	fb12 f204 	smulbb	r2, r2, r4
 8029a1c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029a20:	fa5f fc8c 	uxtb.w	ip, ip
 8029a24:	1219      	asrs	r1, r3, #8
 8029a26:	fb1c fc04 	smulbb	ip, ip, r4
 8029a2a:	b2c0      	uxtb	r0, r0
 8029a2c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8029a30:	fb01 2100 	mla	r1, r1, r0, r2
 8029a34:	10da      	asrs	r2, r3, #3
 8029a36:	00db      	lsls	r3, r3, #3
 8029a38:	fb1e fe04 	smulbb	lr, lr, r4
 8029a3c:	b2db      	uxtb	r3, r3
 8029a3e:	fb03 c300 	mla	r3, r3, r0, ip
 8029a42:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8029a46:	b289      	uxth	r1, r1
 8029a48:	fb02 e200 	mla	r2, r2, r0, lr
 8029a4c:	fa1f fc83 	uxth.w	ip, r3
 8029a50:	1c4b      	adds	r3, r1, #1
 8029a52:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029a56:	f10c 0301 	add.w	r3, ip, #1
 8029a5a:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029a5e:	b292      	uxth	r2, r2
 8029a60:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8029a64:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029a68:	430b      	orrs	r3, r1
 8029a6a:	1c51      	adds	r1, r2, #1
 8029a6c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029a70:	0952      	lsrs	r2, r2, #5
 8029a72:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029a76:	4313      	orrs	r3, r2
 8029a78:	803b      	strh	r3, [r7, #0]
 8029a7a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029a7c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8029a7e:	3702      	adds	r7, #2
 8029a80:	441a      	add	r2, r3
 8029a82:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029a84:	9229      	str	r2, [sp, #164]	@ 0xa4
 8029a86:	441d      	add	r5, r3
 8029a88:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8029a8a:	3b01      	subs	r3, #1
 8029a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8029a8e:	e694      	b.n	80297ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029a90:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029a92:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8029a94:	441c      	add	r4, r3
 8029a96:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029a98:	9429      	str	r4, [sp, #164]	@ 0xa4
 8029a9a:	441d      	add	r5, r3
 8029a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029a9e:	3b01      	subs	r3, #1
 8029aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8029aa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029aa4:	3302      	adds	r3, #2
 8029aa6:	930c      	str	r3, [sp, #48]	@ 0x30
 8029aa8:	e667      	b.n	802977a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029aaa:	d024      	beq.n	8029af6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8029aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029aae:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8029ab0:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8029ab2:	3b01      	subs	r3, #1
 8029ab4:	fb00 4003 	mla	r0, r0, r3, r4
 8029ab8:	1400      	asrs	r0, r0, #16
 8029aba:	f53f ae7b 	bmi.w	80297b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029abe:	3901      	subs	r1, #1
 8029ac0:	4288      	cmp	r0, r1
 8029ac2:	f6bf ae77 	bge.w	80297b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029ac6:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8029ac8:	fb01 5303 	mla	r3, r1, r3, r5
 8029acc:	141b      	asrs	r3, r3, #16
 8029ace:	f53f ae71 	bmi.w	80297b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029ad2:	3a01      	subs	r2, #1
 8029ad4:	4293      	cmp	r3, r2
 8029ad6:	f6bf ae6d 	bge.w	80297b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029ada:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8029ade:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8029ae2:	f1bb 0f00 	cmp.w	fp, #0
 8029ae6:	dc70      	bgt.n	8029bca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8029ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029aea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029af0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8029af4:	930c      	str	r3, [sp, #48]	@ 0x30
 8029af6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8029af8:	2b00      	cmp	r3, #0
 8029afa:	f340 81be 	ble.w	8029e7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8029afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029b02:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029b06:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029b0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029b0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029b12:	eef0 6a62 	vmov.f32	s13, s5
 8029b16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029b1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029b1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029b22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029b26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029b2a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8029b2e:	eef0 6a43 	vmov.f32	s13, s6
 8029b32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029b36:	ee12 2a90 	vmov	r2, s5
 8029b3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029b3e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b48:	ee13 2a10 	vmov	r2, s6
 8029b4c:	932b      	str	r3, [sp, #172]	@ 0xac
 8029b4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b50:	ee16 5a90 	vmov	r5, s13
 8029b54:	fb92 f3f3 	sdiv	r3, r2, r3
 8029b58:	932c      	str	r3, [sp, #176]	@ 0xb0
 8029b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8029b5c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8029b5e:	3b01      	subs	r3, #1
 8029b60:	9319      	str	r3, [sp, #100]	@ 0x64
 8029b62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029b64:	bf08      	it	eq
 8029b66:	4613      	moveq	r3, r2
 8029b68:	eeb0 3a67 	vmov.f32	s6, s15
 8029b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8029b6e:	eef0 2a47 	vmov.f32	s5, s14
 8029b72:	e5f4      	b.n	802975e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8029b74:	2900      	cmp	r1, #0
 8029b76:	f43f ae66 	beq.w	8029846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8029b7a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8029b7e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8029b82:	900a      	str	r0, [sp, #40]	@ 0x28
 8029b84:	0e00      	lsrs	r0, r0, #24
 8029b86:	9013      	str	r0, [sp, #76]	@ 0x4c
 8029b88:	e65d      	b.n	8029846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8029b8a:	f113 0801 	adds.w	r8, r3, #1
 8029b8e:	f53f af74 	bmi.w	8029a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029b92:	4540      	cmp	r0, r8
 8029b94:	f6ff af71 	blt.w	8029a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029b98:	f11c 0801 	adds.w	r8, ip, #1
 8029b9c:	f53f af6d 	bmi.w	8029a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029ba0:	45c6      	cmp	lr, r8
 8029ba2:	f6ff af6a 	blt.w	8029a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029ba6:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8029ba8:	9302      	str	r3, [sp, #8]
 8029baa:	b200      	sxth	r0, r0
 8029bac:	fa0f f38e 	sxth.w	r3, lr
 8029bb0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8029bb4:	e9cd c203 	strd	ip, r2, [sp, #12]
 8029bb8:	9301      	str	r3, [sp, #4]
 8029bba:	9000      	str	r0, [sp, #0]
 8029bbc:	4633      	mov	r3, r6
 8029bbe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029bc0:	4639      	mov	r1, r7
 8029bc2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8029bc4:	f7ff fc63 	bl	802948e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8029bc8:	e757      	b.n	8029a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8029bca:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029bcc:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8029bce:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029bd2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029bd4:	1427      	asrs	r7, r4, #16
 8029bd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029bda:	142b      	asrs	r3, r5, #16
 8029bdc:	fb01 7303 	mla	r3, r1, r3, r7
 8029be0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8029be2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8029be6:	18e7      	adds	r7, r4, r3
 8029be8:	5ce3      	ldrb	r3, [r4, r3]
 8029bea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029bee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029bf2:	2a00      	cmp	r2, #0
 8029bf4:	f000 8137 	beq.w	8029e66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8029bf8:	f897 e001 	ldrb.w	lr, [r7, #1]
 8029bfc:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8029c00:	9410      	str	r4, [sp, #64]	@ 0x40
 8029c02:	0e24      	lsrs	r4, r4, #24
 8029c04:	9417      	str	r4, [sp, #92]	@ 0x5c
 8029c06:	b170      	cbz	r0, 8029c26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8029c08:	eb07 0e01 	add.w	lr, r7, r1
 8029c0c:	5c79      	ldrb	r1, [r7, r1]
 8029c0e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8029c12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029c14:	0e09      	lsrs	r1, r1, #24
 8029c16:	9114      	str	r1, [sp, #80]	@ 0x50
 8029c18:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8029c1c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8029c20:	9111      	str	r1, [sp, #68]	@ 0x44
 8029c22:	0e09      	lsrs	r1, r1, #24
 8029c24:	9118      	str	r1, [sp, #96]	@ 0x60
 8029c26:	b292      	uxth	r2, r2
 8029c28:	b280      	uxth	r0, r0
 8029c2a:	fb02 f800 	mul.w	r8, r2, r0
 8029c2e:	0112      	lsls	r2, r2, #4
 8029c30:	eba2 0e08 	sub.w	lr, r2, r8
 8029c34:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8029c36:	fa1f fe8e 	uxth.w	lr, lr
 8029c3a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029c3e:	fb0e f101 	mul.w	r1, lr, r1
 8029c42:	b280      	uxth	r0, r0
 8029c44:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8029c48:	1a12      	subs	r2, r2, r0
 8029c4a:	b292      	uxth	r2, r2
 8029c4c:	fb02 110c 	mla	r1, r2, ip, r1
 8029c50:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8029c52:	fb00 1104 	mla	r1, r0, r4, r1
 8029c56:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8029c58:	fb08 1104 	mla	r1, r8, r4, r1
 8029c5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029c60:	2900      	cmp	r1, #0
 8029c62:	f000 80f5 	beq.w	8029e50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8029c66:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8029c6a:	d019      	beq.n	8029ca0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029c6c:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029c70:	fb0c fa0a 	mul.w	sl, ip, sl
 8029c74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029c78:	fb0c fc03 	mul.w	ip, ip, r3
 8029c7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029c80:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029c84:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029c88:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8029c8c:	4453      	add	r3, sl
 8029c8e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029c92:	0a1b      	lsrs	r3, r3, #8
 8029c94:	0a3f      	lsrs	r7, r7, #8
 8029c96:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029c9a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029c9e:	433b      	orrs	r3, r7
 8029ca0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8029ca2:	2cff      	cmp	r4, #255	@ 0xff
 8029ca4:	d020      	beq.n	8029ce8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8029ca6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029ca8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8029cac:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8029cae:	4367      	muls	r7, r4
 8029cb0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029cb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029cb6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029cba:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8029cbc:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029cc0:	fb04 fa0a 	mul.w	sl, r4, sl
 8029cc4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029cc8:	44bc      	add	ip, r7
 8029cca:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029cce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029cd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029cd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029cda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029cde:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029ce2:	ea4c 040a 	orr.w	r4, ip, sl
 8029ce6:	9410      	str	r4, [sp, #64]	@ 0x40
 8029ce8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8029cea:	2cff      	cmp	r4, #255	@ 0xff
 8029cec:	d020      	beq.n	8029d30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8029cee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029cf0:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8029cf4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8029cf6:	4367      	muls	r7, r4
 8029cf8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029cfa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029cfe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029d02:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8029d04:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029d08:	fb04 fa0a 	mul.w	sl, r4, sl
 8029d0c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d10:	44bc      	add	ip, r7
 8029d12:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029d16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029d2a:	ea4c 040a 	orr.w	r4, ip, sl
 8029d2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029d30:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8029d32:	2cff      	cmp	r4, #255	@ 0xff
 8029d34:	d020      	beq.n	8029d78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8029d36:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8029d38:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8029d3c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8029d3e:	4367      	muls	r7, r4
 8029d40:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8029d42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d46:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8029d4a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8029d4c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029d50:	fb04 fa0a 	mul.w	sl, r4, sl
 8029d54:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d58:	44bc      	add	ip, r7
 8029d5a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029d5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d6e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029d72:	ea4c 040a 	orr.w	r4, ip, sl
 8029d76:	9411      	str	r4, [sp, #68]	@ 0x44
 8029d78:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029d7a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8029d7e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8029d82:	fb0e f707 	mul.w	r7, lr, r7
 8029d86:	fb02 770c 	mla	r7, r2, ip, r7
 8029d8a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029d8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029d90:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029d94:	fb00 770c 	mla	r7, r0, ip, r7
 8029d98:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8029d9a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029d9e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029da0:	fb08 770c 	mla	r7, r8, ip, r7
 8029da4:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8029da8:	fb0e fe0c 	mul.w	lr, lr, ip
 8029dac:	fb02 e303 	mla	r3, r2, r3, lr
 8029db0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029db2:	0a3f      	lsrs	r7, r7, #8
 8029db4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8029db8:	fb00 330a 	mla	r3, r0, sl, r3
 8029dbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029dbe:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029dc2:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8029dc6:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029dcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029dd0:	434b      	muls	r3, r1
 8029dd2:	1c59      	adds	r1, r3, #1
 8029dd4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029dd8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029ddc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029de0:	ea47 070c 	orr.w	r7, r7, ip
 8029de4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029de6:	0c3b      	lsrs	r3, r7, #16
 8029de8:	f8b9 0000 	ldrh.w	r0, [r9]
 8029dec:	fb13 f304 	smulbb	r3, r3, r4
 8029df0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029df4:	b2ff      	uxtb	r7, r7
 8029df6:	1202      	asrs	r2, r0, #8
 8029df8:	fb17 f704 	smulbb	r7, r7, r4
 8029dfc:	b2c9      	uxtb	r1, r1
 8029dfe:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8029e02:	fb02 3201 	mla	r2, r2, r1, r3
 8029e06:	10c3      	asrs	r3, r0, #3
 8029e08:	00c0      	lsls	r0, r0, #3
 8029e0a:	fb1c fc04 	smulbb	ip, ip, r4
 8029e0e:	b2c0      	uxtb	r0, r0
 8029e10:	fb00 7001 	mla	r0, r0, r1, r7
 8029e14:	b292      	uxth	r2, r2
 8029e16:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029e1a:	fb03 c301 	mla	r3, r3, r1, ip
 8029e1e:	f102 0c01 	add.w	ip, r2, #1
 8029e22:	b280      	uxth	r0, r0
 8029e24:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8029e28:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8029e2c:	1c42      	adds	r2, r0, #1
 8029e2e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029e32:	b29b      	uxth	r3, r3
 8029e34:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8029e38:	ea42 020c 	orr.w	r2, r2, ip
 8029e3c:	f103 0c01 	add.w	ip, r3, #1
 8029e40:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029e44:	095b      	lsrs	r3, r3, #5
 8029e46:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029e4a:	431a      	orrs	r2, r3
 8029e4c:	f8a9 2000 	strh.w	r2, [r9]
 8029e50:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029e52:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8029e54:	f109 0902 	add.w	r9, r9, #2
 8029e58:	441a      	add	r2, r3
 8029e5a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029e5c:	9229      	str	r2, [sp, #164]	@ 0xa4
 8029e5e:	441d      	add	r5, r3
 8029e60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029e64:	e63d      	b.n	8029ae2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8029e66:	2800      	cmp	r0, #0
 8029e68:	f43f aedd 	beq.w	8029c26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8029e6c:	5c79      	ldrb	r1, [r7, r1]
 8029e6e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8029e72:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029e74:	0e09      	lsrs	r1, r1, #24
 8029e76:	9114      	str	r1, [sp, #80]	@ 0x50
 8029e78:	e6d5      	b.n	8029c26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8029e7a:	b01f      	add	sp, #124	@ 0x7c
 8029e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029e80 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8029e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e84:	b089      	sub	sp, #36	@ 0x24
 8029e86:	9101      	str	r1, [sp, #4]
 8029e88:	9801      	ldr	r0, [sp, #4]
 8029e8a:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8029e8e:	8800      	ldrh	r0, [r0, #0]
 8029e90:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8029e94:	1206      	asrs	r6, r0, #8
 8029e96:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8029e9a:	9602      	str	r6, [sp, #8]
 8029e9c:	10c6      	asrs	r6, r0, #3
 8029e9e:	00c0      	lsls	r0, r0, #3
 8029ea0:	b2c0      	uxtb	r0, r0
 8029ea2:	9004      	str	r0, [sp, #16]
 8029ea4:	fb07 100c 	mla	r0, r7, ip, r1
 8029ea8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8029eac:	2f00      	cmp	r7, #0
 8029eae:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8029eb2:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8029eb6:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8029eba:	9603      	str	r6, [sp, #12]
 8029ebc:	eb02 0e00 	add.w	lr, r2, r0
 8029ec0:	f2c0 810a 	blt.w	802a0d8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8029ec4:	45b8      	cmp	r8, r7
 8029ec6:	f340 8107 	ble.w	802a0d8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8029eca:	2900      	cmp	r1, #0
 8029ecc:	f2c0 8102 	blt.w	802a0d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8029ed0:	458c      	cmp	ip, r1
 8029ed2:	f340 80ff 	ble.w	802a0d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8029ed6:	5c12      	ldrb	r2, [r2, r0]
 8029ed8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8029edc:	1c4a      	adds	r2, r1, #1
 8029ede:	f100 80fe 	bmi.w	802a0de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8029ee2:	4594      	cmp	ip, r2
 8029ee4:	f340 80fb 	ble.w	802a0de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8029ee8:	2d00      	cmp	r5, #0
 8029eea:	f000 80fa 	beq.w	802a0e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8029eee:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8029ef2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8029ef6:	3701      	adds	r7, #1
 8029ef8:	f100 80f7 	bmi.w	802a0ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8029efc:	45b8      	cmp	r8, r7
 8029efe:	f340 80f4 	ble.w	802a0ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8029f02:	2c00      	cmp	r4, #0
 8029f04:	f000 80f4 	beq.w	802a0f0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8029f08:	2900      	cmp	r1, #0
 8029f0a:	eb0e 020c 	add.w	r2, lr, ip
 8029f0e:	f2c0 80ea 	blt.w	802a0e6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8029f12:	458c      	cmp	ip, r1
 8029f14:	f340 80e7 	ble.w	802a0e6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8029f18:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8029f1c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8029f20:	3101      	adds	r1, #1
 8029f22:	f100 80e8 	bmi.w	802a0f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8029f26:	458c      	cmp	ip, r1
 8029f28:	f340 80e5 	ble.w	802a0f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8029f2c:	2d00      	cmp	r5, #0
 8029f2e:	f000 80e4 	beq.w	802a0fa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8029f32:	7852      	ldrb	r2, [r2, #1]
 8029f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029f38:	0e0b      	lsrs	r3, r1, #24
 8029f3a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8029f3e:	9300      	str	r3, [sp, #0]
 8029f40:	b2a4      	uxth	r4, r4
 8029f42:	b2ab      	uxth	r3, r5
 8029f44:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8029f48:	fb03 f904 	mul.w	r9, r3, r4
 8029f4c:	fb0a f505 	mul.w	r5, sl, r5
 8029f50:	011b      	lsls	r3, r3, #4
 8029f52:	eba3 0e09 	sub.w	lr, r3, r9
 8029f56:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8029f5a:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8029f5e:	0a28      	lsrs	r0, r5, #8
 8029f60:	fb0a f303 	mul.w	r3, sl, r3
 8029f64:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8029f68:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8029f6c:	4405      	add	r5, r0
 8029f6e:	0a2d      	lsrs	r5, r5, #8
 8029f70:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8029f74:	9005      	str	r0, [sp, #20]
 8029f76:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8029f7a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8029f7e:	0a1b      	lsrs	r3, r3, #8
 8029f80:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8029f84:	9306      	str	r3, [sp, #24]
 8029f86:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8029f8a:	fb0b f303 	mul.w	r3, fp, r3
 8029f8e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8029f92:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8029f96:	fb0b f606 	mul.w	r6, fp, r6
 8029f9a:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8029f9e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029fa2:	fb08 f707 	mul.w	r7, r8, r7
 8029fa6:	0a1d      	lsrs	r5, r3, #8
 8029fa8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029fac:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8029fb0:	441d      	add	r5, r3
 8029fb2:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8029fb6:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8029fba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8029fbe:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8029fc2:	fb08 fc0c 	mul.w	ip, r8, ip
 8029fc6:	0a1b      	lsrs	r3, r3, #8
 8029fc8:	9307      	str	r3, [sp, #28]
 8029fca:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8029fce:	0e0b      	lsrs	r3, r1, #24
 8029fd0:	0a2d      	lsrs	r5, r5, #8
 8029fd2:	fa1f fe8e 	uxth.w	lr, lr
 8029fd6:	435f      	muls	r7, r3
 8029fd8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029fdc:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8029fe0:	fb05 f50e 	mul.w	r5, r5, lr
 8029fe4:	b2a4      	uxth	r4, r4
 8029fe6:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8029fea:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029fee:	4359      	muls	r1, r3
 8029ff0:	1b12      	subs	r2, r2, r4
 8029ff2:	9b05      	ldr	r3, [sp, #20]
 8029ff4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029ff8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8029ffc:	b292      	uxth	r2, r2
 8029ffe:	4460      	add	r0, ip
 802a000:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a004:	fb03 5502 	mla	r5, r3, r2, r5
 802a008:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a00c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a010:	44bc      	add	ip, r7
 802a012:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a016:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a01a:	0a36      	lsrs	r6, r6, #8
 802a01c:	fb0c 5509 	mla	r5, ip, r9, r5
 802a020:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802a024:	fb0e f606 	mul.w	r6, lr, r6
 802a028:	9b06      	ldr	r3, [sp, #24]
 802a02a:	0a00      	lsrs	r0, r0, #8
 802a02c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802a030:	fb00 5504 	mla	r5, r0, r4, r5
 802a034:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 802a038:	fb02 6000 	mla	r0, r2, r0, r6
 802a03c:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 802a040:	fb0e fe0b 	mul.w	lr, lr, fp
 802a044:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802a048:	0a09      	lsrs	r1, r1, #8
 802a04a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802a04e:	fb09 0001 	mla	r0, r9, r1, r0
 802a052:	fb02 e20a 	mla	r2, r2, sl, lr
 802a056:	9b07      	ldr	r3, [sp, #28]
 802a058:	0a2d      	lsrs	r5, r5, #8
 802a05a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a05e:	fb04 0003 	mla	r0, r4, r3, r0
 802a062:	fb04 2408 	mla	r4, r4, r8, r2
 802a066:	9b00      	ldr	r3, [sp, #0]
 802a068:	9a04      	ldr	r2, [sp, #16]
 802a06a:	fb09 4903 	mla	r9, r9, r3, r4
 802a06e:	ea6f 2929 	mvn.w	r9, r9, asr #8
 802a072:	9b02      	ldr	r3, [sp, #8]
 802a074:	fa5f f989 	uxtb.w	r9, r9
 802a078:	fb03 f109 	mul.w	r1, r3, r9
 802a07c:	9b03      	ldr	r3, [sp, #12]
 802a07e:	0a00      	lsrs	r0, r0, #8
 802a080:	fb03 f309 	mul.w	r3, r3, r9
 802a084:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a088:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a08c:	4305      	orrs	r5, r0
 802a08e:	fb02 f909 	mul.w	r9, r2, r9
 802a092:	1c58      	adds	r0, r3, #1
 802a094:	1c4a      	adds	r2, r1, #1
 802a096:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802a09a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a09e:	0a2b      	lsrs	r3, r5, #8
 802a0a0:	0c2a      	lsrs	r2, r5, #16
 802a0a2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802a0a6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802a0aa:	00db      	lsls	r3, r3, #3
 802a0ac:	0212      	lsls	r2, r2, #8
 802a0ae:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 802a0b2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a0b6:	4313      	orrs	r3, r2
 802a0b8:	f109 0201 	add.w	r2, r9, #1
 802a0bc:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802a0c0:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802a0c4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802a0c8:	431d      	orrs	r5, r3
 802a0ca:	9b01      	ldr	r3, [sp, #4]
 802a0cc:	801d      	strh	r5, [r3, #0]
 802a0ce:	b009      	add	sp, #36	@ 0x24
 802a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a0d4:	2000      	movs	r0, #0
 802a0d6:	e701      	b.n	8029edc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802a0d8:	2600      	movs	r6, #0
 802a0da:	4630      	mov	r0, r6
 802a0dc:	e70b      	b.n	8029ef6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802a0de:	2600      	movs	r6, #0
 802a0e0:	e709      	b.n	8029ef6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802a0e2:	462e      	mov	r6, r5
 802a0e4:	e707      	b.n	8029ef6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802a0e6:	2700      	movs	r7, #0
 802a0e8:	e71a      	b.n	8029f20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 802a0ea:	2100      	movs	r1, #0
 802a0ec:	460f      	mov	r7, r1
 802a0ee:	e723      	b.n	8029f38 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802a0f0:	4621      	mov	r1, r4
 802a0f2:	4627      	mov	r7, r4
 802a0f4:	e720      	b.n	8029f38 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802a0f6:	2100      	movs	r1, #0
 802a0f8:	e71e      	b.n	8029f38 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802a0fa:	4629      	mov	r1, r5
 802a0fc:	e71c      	b.n	8029f38 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

0802a100 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a104:	b09b      	sub	sp, #108	@ 0x6c
 802a106:	9218      	str	r2, [sp, #96]	@ 0x60
 802a108:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a10a:	9019      	str	r0, [sp, #100]	@ 0x64
 802a10c:	6850      	ldr	r0, [r2, #4]
 802a10e:	9116      	str	r1, [sp, #88]	@ 0x58
 802a110:	9307      	str	r3, [sp, #28]
 802a112:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a116:	fb00 1303 	mla	r3, r0, r3, r1
 802a11a:	6812      	ldr	r2, [r2, #0]
 802a11c:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 802a11e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a122:	930a      	str	r3, [sp, #40]	@ 0x28
 802a124:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a126:	681b      	ldr	r3, [r3, #0]
 802a128:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a12a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a12c:	685e      	ldr	r6, [r3, #4]
 802a12e:	3604      	adds	r6, #4
 802a130:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a132:	2b00      	cmp	r3, #0
 802a134:	dc03      	bgt.n	802a13e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802a136:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a138:	2b00      	cmp	r3, #0
 802a13a:	f340 8373 	ble.w	802a824 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802a13e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a140:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a144:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a148:	1e48      	subs	r0, r1, #1
 802a14a:	1e57      	subs	r7, r2, #1
 802a14c:	9b07      	ldr	r3, [sp, #28]
 802a14e:	2b00      	cmp	r3, #0
 802a150:	f340 818f 	ble.w	802a472 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802a154:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802a156:	142b      	asrs	r3, r5, #16
 802a158:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a15c:	d406      	bmi.n	802a16c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a15e:	4584      	cmp	ip, r0
 802a160:	da04      	bge.n	802a16c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a162:	2b00      	cmp	r3, #0
 802a164:	db02      	blt.n	802a16c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a166:	42bb      	cmp	r3, r7
 802a168:	f2c0 8184 	blt.w	802a474 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802a16c:	f11c 0c01 	adds.w	ip, ip, #1
 802a170:	f100 8172 	bmi.w	802a458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802a174:	4561      	cmp	r1, ip
 802a176:	f2c0 816f 	blt.w	802a458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802a17a:	3301      	adds	r3, #1
 802a17c:	f100 816c 	bmi.w	802a458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802a180:	429a      	cmp	r2, r3
 802a182:	f2c0 8169 	blt.w	802a458 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802a186:	9b07      	ldr	r3, [sp, #28]
 802a188:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802a18a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a18c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a18e:	2b00      	cmp	r3, #0
 802a190:	f340 818e 	ble.w	802a4b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 802a194:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802a196:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802a19a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802a19e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a1a0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802a1a4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802a1a8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802a1aa:	141b      	asrs	r3, r3, #16
 802a1ac:	f100 81d1 	bmi.w	802a552 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a1b0:	f101 38ff 	add.w	r8, r1, #4294967295
 802a1b4:	4543      	cmp	r3, r8
 802a1b6:	f280 81cc 	bge.w	802a552 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a1ba:	f1bc 0f00 	cmp.w	ip, #0
 802a1be:	f2c0 81c8 	blt.w	802a552 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a1c2:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a1c6:	45c4      	cmp	ip, r8
 802a1c8:	f280 81c3 	bge.w	802a552 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a1cc:	b209      	sxth	r1, r1
 802a1ce:	fb0c 3301 	mla	r3, ip, r1, r3
 802a1d2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802a1d4:	eb04 0803 	add.w	r8, r4, r3
 802a1d8:	5ce3      	ldrb	r3, [r4, r3]
 802a1da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802a1de:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802a1e2:	2a00      	cmp	r2, #0
 802a1e4:	f000 81aa 	beq.w	802a53c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802a1e8:	f898 c001 	ldrb.w	ip, [r8, #1]
 802a1ec:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802a1f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 802a1f2:	0e24      	lsrs	r4, r4, #24
 802a1f4:	9412      	str	r4, [sp, #72]	@ 0x48
 802a1f6:	b178      	cbz	r0, 802a218 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802a1f8:	eb08 0c01 	add.w	ip, r8, r1
 802a1fc:	f818 1001 	ldrb.w	r1, [r8, r1]
 802a200:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802a204:	9108      	str	r1, [sp, #32]
 802a206:	0e09      	lsrs	r1, r1, #24
 802a208:	9110      	str	r1, [sp, #64]	@ 0x40
 802a20a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802a20e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802a212:	910c      	str	r1, [sp, #48]	@ 0x30
 802a214:	0e09      	lsrs	r1, r1, #24
 802a216:	9113      	str	r1, [sp, #76]	@ 0x4c
 802a218:	b292      	uxth	r2, r2
 802a21a:	b280      	uxth	r0, r0
 802a21c:	fb02 f900 	mul.w	r9, r2, r0
 802a220:	0112      	lsls	r2, r2, #4
 802a222:	eba2 0809 	sub.w	r8, r2, r9
 802a226:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802a228:	fa1f f888 	uxth.w	r8, r8
 802a22c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a230:	fb08 f101 	mul.w	r1, r8, r1
 802a234:	b280      	uxth	r0, r0
 802a236:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802a23a:	1a12      	subs	r2, r2, r0
 802a23c:	b292      	uxth	r2, r2
 802a23e:	fb02 110e 	mla	r1, r2, lr, r1
 802a242:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802a244:	fb00 1104 	mla	r1, r0, r4, r1
 802a248:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802a24a:	fb09 1104 	mla	r1, r9, r4, r1
 802a24e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802a252:	2900      	cmp	r1, #0
 802a254:	f000 80f5 	beq.w	802a442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a258:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802a25c:	d01b      	beq.n	802a296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802a25e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802a262:	fb0e fa0a 	mul.w	sl, lr, sl
 802a266:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a26a:	fb0e fe03 	mul.w	lr, lr, r3
 802a26e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a272:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a276:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802a27a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802a27e:	4453      	add	r3, sl
 802a280:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a284:	0a1b      	lsrs	r3, r3, #8
 802a286:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a28a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a28e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a292:	ea43 030c 	orr.w	r3, r3, ip
 802a296:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802a298:	2cff      	cmp	r4, #255	@ 0xff
 802a29a:	d021      	beq.n	802a2e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802a29c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802a29e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802a2a2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802a2a4:	fb04 fb0b 	mul.w	fp, r4, fp
 802a2a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802a2aa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a2ae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802a2b2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802a2b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a2b8:	fb04 fa0a 	mul.w	sl, r4, sl
 802a2bc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a2c0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a2c4:	44de      	add	lr, fp
 802a2c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a2ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a2ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a2d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a2d6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a2da:	ea4e 040a 	orr.w	r4, lr, sl
 802a2de:	940b      	str	r4, [sp, #44]	@ 0x2c
 802a2e0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802a2e2:	2cff      	cmp	r4, #255	@ 0xff
 802a2e4:	d021      	beq.n	802a32a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802a2e6:	9c08      	ldr	r4, [sp, #32]
 802a2e8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802a2ec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802a2ee:	fb04 fb0b 	mul.w	fp, r4, fp
 802a2f2:	9c08      	ldr	r4, [sp, #32]
 802a2f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a2f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802a2fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802a2fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a302:	fb04 fa0a 	mul.w	sl, r4, sl
 802a306:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a30a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a30e:	44de      	add	lr, fp
 802a310:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a314:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a318:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a31c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a320:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a324:	ea4e 040a 	orr.w	r4, lr, sl
 802a328:	9408      	str	r4, [sp, #32]
 802a32a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802a32c:	2cff      	cmp	r4, #255	@ 0xff
 802a32e:	d021      	beq.n	802a374 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a330:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802a332:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802a336:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802a338:	fb04 fb0b 	mul.w	fp, r4, fp
 802a33c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802a33e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a342:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802a346:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802a348:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a34c:	fb04 fa0a 	mul.w	sl, r4, sl
 802a350:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a354:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a358:	44de      	add	lr, fp
 802a35a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a35e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a362:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a366:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a36a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a36e:	ea4e 040a 	orr.w	r4, lr, sl
 802a372:	940c      	str	r4, [sp, #48]	@ 0x30
 802a374:	43c9      	mvns	r1, r1
 802a376:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802a378:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802a37c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802a380:	fb08 fc0c 	mul.w	ip, r8, ip
 802a384:	fb02 cc0e 	mla	ip, r2, lr, ip
 802a388:	9c08      	ldr	r4, [sp, #32]
 802a38a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a38e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802a392:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a396:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802a398:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802a39c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802a39e:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a3a2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802a3a6:	fb08 f80e 	mul.w	r8, r8, lr
 802a3aa:	fb02 8303 	mla	r3, r2, r3, r8
 802a3ae:	9a08      	ldr	r2, [sp, #32]
 802a3b0:	f8b7 8000 	ldrh.w	r8, [r7]
 802a3b4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802a3b8:	fb00 330a 	mla	r3, r0, sl, r3
 802a3bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a3be:	fa5f fe81 	uxtb.w	lr, r1
 802a3c2:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 802a3c6:	fb09 3900 	mla	r9, r9, r0, r3
 802a3ca:	ea4f 2228 	mov.w	r2, r8, asr #8
 802a3ce:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802a3d2:	fb02 f20e 	mul.w	r2, r2, lr
 802a3d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a3da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a3de:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802a3e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a3e6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802a3ea:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a3ee:	ea4c 0c09 	orr.w	ip, ip, r9
 802a3f2:	fb00 f00e 	mul.w	r0, r0, lr
 802a3f6:	1c53      	adds	r3, r2, #1
 802a3f8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802a3fc:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802a400:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a404:	4a62      	ldr	r2, [pc, #392]	@ (802a590 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802a406:	b2db      	uxtb	r3, r3
 802a408:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802a40c:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802a410:	b2c9      	uxtb	r1, r1
 802a412:	1c43      	adds	r3, r0, #1
 802a414:	fb01 f10e 	mul.w	r1, r1, lr
 802a418:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a41c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802a420:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802a424:	00db      	lsls	r3, r3, #3
 802a426:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a42a:	4313      	orrs	r3, r2
 802a42c:	1c4a      	adds	r2, r1, #1
 802a42e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a432:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802a436:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a43a:	ea4c 0c03 	orr.w	ip, ip, r3
 802a43e:	f8a7 c000 	strh.w	ip, [r7]
 802a442:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a444:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a446:	3702      	adds	r7, #2
 802a448:	441a      	add	r2, r3
 802a44a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a44c:	9225      	str	r2, [sp, #148]	@ 0x94
 802a44e:	441d      	add	r5, r3
 802a450:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a452:	3b01      	subs	r3, #1
 802a454:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a456:	e699      	b.n	802a18c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a458:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a45a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802a45c:	441c      	add	r4, r3
 802a45e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a460:	9425      	str	r4, [sp, #148]	@ 0x94
 802a462:	441d      	add	r5, r3
 802a464:	9b07      	ldr	r3, [sp, #28]
 802a466:	3b01      	subs	r3, #1
 802a468:	9307      	str	r3, [sp, #28]
 802a46a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a46c:	3302      	adds	r3, #2
 802a46e:	930a      	str	r3, [sp, #40]	@ 0x28
 802a470:	e66c      	b.n	802a14c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802a472:	d024      	beq.n	802a4be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802a474:	9b07      	ldr	r3, [sp, #28]
 802a476:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a478:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802a47a:	3b01      	subs	r3, #1
 802a47c:	fb00 4003 	mla	r0, r0, r3, r4
 802a480:	1400      	asrs	r0, r0, #16
 802a482:	f53f ae80 	bmi.w	802a186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802a486:	3901      	subs	r1, #1
 802a488:	4288      	cmp	r0, r1
 802a48a:	f6bf ae7c 	bge.w	802a186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802a48e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a490:	fb01 5303 	mla	r3, r1, r3, r5
 802a494:	141b      	asrs	r3, r3, #16
 802a496:	f53f ae76 	bmi.w	802a186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802a49a:	3a01      	subs	r2, #1
 802a49c:	4293      	cmp	r3, r2
 802a49e:	f6bf ae72 	bge.w	802a186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802a4a2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a4a6:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802a4aa:	f1bb 0f00 	cmp.w	fp, #0
 802a4ae:	dc71      	bgt.n	802a594 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802a4b0:	9b07      	ldr	r3, [sp, #28]
 802a4b2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802a4b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a4b8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802a4bc:	930a      	str	r3, [sp, #40]	@ 0x28
 802a4be:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a4c0:	2b00      	cmp	r3, #0
 802a4c2:	f340 81af 	ble.w	802a824 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802a4c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a4ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a4ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a4d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a4d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a4da:	eef0 6a62 	vmov.f32	s13, s5
 802a4de:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a4e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a4e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a4ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a4ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a4f2:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 802a4f6:	eef0 6a43 	vmov.f32	s13, s6
 802a4fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a4fe:	ee12 2a90 	vmov	r2, s5
 802a502:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a506:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a508:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a50c:	fb92 f3f3 	sdiv	r3, r2, r3
 802a510:	ee13 2a10 	vmov	r2, s6
 802a514:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a516:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a518:	ee16 5a90 	vmov	r5, s13
 802a51c:	fb92 f3f3 	sdiv	r3, r2, r3
 802a520:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a522:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a524:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802a526:	3b01      	subs	r3, #1
 802a528:	9316      	str	r3, [sp, #88]	@ 0x58
 802a52a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a52c:	bf08      	it	eq
 802a52e:	4613      	moveq	r3, r2
 802a530:	eeb0 3a67 	vmov.f32	s6, s15
 802a534:	9307      	str	r3, [sp, #28]
 802a536:	eef0 2a47 	vmov.f32	s5, s14
 802a53a:	e5f9      	b.n	802a130 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802a53c:	2800      	cmp	r0, #0
 802a53e:	f43f ae6b 	beq.w	802a218 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802a542:	f818 1001 	ldrb.w	r1, [r8, r1]
 802a546:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802a54a:	9108      	str	r1, [sp, #32]
 802a54c:	0e09      	lsrs	r1, r1, #24
 802a54e:	9110      	str	r1, [sp, #64]	@ 0x40
 802a550:	e662      	b.n	802a218 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802a552:	f113 0801 	adds.w	r8, r3, #1
 802a556:	f53f af74 	bmi.w	802a442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a55a:	4541      	cmp	r1, r8
 802a55c:	f6ff af71 	blt.w	802a442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a560:	f11c 0801 	adds.w	r8, ip, #1
 802a564:	f53f af6d 	bmi.w	802a442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a568:	45c6      	cmp	lr, r8
 802a56a:	f6ff af6a 	blt.w	802a442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a56e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802a572:	b209      	sxth	r1, r1
 802a574:	fa0f f38e 	sxth.w	r3, lr
 802a578:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802a57c:	9301      	str	r3, [sp, #4]
 802a57e:	9100      	str	r1, [sp, #0]
 802a580:	4633      	mov	r3, r6
 802a582:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a584:	4639      	mov	r1, r7
 802a586:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802a588:	f7ff fc7a 	bl	8029e80 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802a58c:	e759      	b.n	802a442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a58e:	bf00      	nop
 802a590:	fffff800 	.word	0xfffff800
 802a594:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802a596:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802a598:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802a59c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a59e:	1427      	asrs	r7, r4, #16
 802a5a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a5a4:	142b      	asrs	r3, r5, #16
 802a5a6:	fb01 7303 	mla	r3, r1, r3, r7
 802a5aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802a5ac:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802a5b0:	18e7      	adds	r7, r4, r3
 802a5b2:	5ce3      	ldrb	r3, [r4, r3]
 802a5b4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802a5b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a5bc:	2a00      	cmp	r2, #0
 802a5be:	f000 8127 	beq.w	802a810 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802a5c2:	f897 e001 	ldrb.w	lr, [r7, #1]
 802a5c6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802a5ca:	940d      	str	r4, [sp, #52]	@ 0x34
 802a5cc:	0e24      	lsrs	r4, r4, #24
 802a5ce:	9414      	str	r4, [sp, #80]	@ 0x50
 802a5d0:	b170      	cbz	r0, 802a5f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802a5d2:	eb07 0e01 	add.w	lr, r7, r1
 802a5d6:	5c79      	ldrb	r1, [r7, r1]
 802a5d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802a5dc:	9109      	str	r1, [sp, #36]	@ 0x24
 802a5de:	0e09      	lsrs	r1, r1, #24
 802a5e0:	9111      	str	r1, [sp, #68]	@ 0x44
 802a5e2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802a5e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802a5ea:	910e      	str	r1, [sp, #56]	@ 0x38
 802a5ec:	0e09      	lsrs	r1, r1, #24
 802a5ee:	9115      	str	r1, [sp, #84]	@ 0x54
 802a5f0:	b292      	uxth	r2, r2
 802a5f2:	b280      	uxth	r0, r0
 802a5f4:	fb02 f800 	mul.w	r8, r2, r0
 802a5f8:	0112      	lsls	r2, r2, #4
 802a5fa:	eba2 0e08 	sub.w	lr, r2, r8
 802a5fe:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802a602:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a604:	fa1f fe8e 	uxth.w	lr, lr
 802a608:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802a60c:	fb0e f202 	mul.w	r2, lr, r2
 802a610:	b280      	uxth	r0, r0
 802a612:	1a09      	subs	r1, r1, r0
 802a614:	b289      	uxth	r1, r1
 802a616:	fb01 220c 	mla	r2, r1, ip, r2
 802a61a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802a61c:	fb00 2204 	mla	r2, r0, r4, r2
 802a620:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802a622:	fb08 2204 	mla	r2, r8, r4, r2
 802a626:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a62a:	2a00      	cmp	r2, #0
 802a62c:	f000 80e5 	beq.w	802a7fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802a630:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802a634:	d019      	beq.n	802a66a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802a636:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802a63a:	fb0c fa0a 	mul.w	sl, ip, sl
 802a63e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a642:	fb0c fc03 	mul.w	ip, ip, r3
 802a646:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a64a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a64e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802a652:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802a656:	4453      	add	r3, sl
 802a658:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a65c:	0a1b      	lsrs	r3, r3, #8
 802a65e:	0a3f      	lsrs	r7, r7, #8
 802a660:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a664:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802a668:	433b      	orrs	r3, r7
 802a66a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802a66c:	2cff      	cmp	r4, #255	@ 0xff
 802a66e:	d020      	beq.n	802a6b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 802a670:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802a672:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802a676:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802a678:	4367      	muls	r7, r4
 802a67a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802a67c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a680:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802a684:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802a686:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a68a:	fb04 fa0a 	mul.w	sl, r4, sl
 802a68e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a692:	44bc      	add	ip, r7
 802a694:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a698:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a69c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a6a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a6a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a6ac:	ea4c 040a 	orr.w	r4, ip, sl
 802a6b0:	940d      	str	r4, [sp, #52]	@ 0x34
 802a6b2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802a6b4:	2cff      	cmp	r4, #255	@ 0xff
 802a6b6:	d020      	beq.n	802a6fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802a6b8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802a6ba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802a6be:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802a6c0:	4367      	muls	r7, r4
 802a6c2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802a6c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a6c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802a6cc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802a6ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a6d2:	fb04 fa0a 	mul.w	sl, r4, sl
 802a6d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a6da:	44bc      	add	ip, r7
 802a6dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a6e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a6e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a6e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a6f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a6f4:	ea4c 040a 	orr.w	r4, ip, sl
 802a6f8:	9409      	str	r4, [sp, #36]	@ 0x24
 802a6fa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802a6fc:	2cff      	cmp	r4, #255	@ 0xff
 802a6fe:	d020      	beq.n	802a742 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 802a700:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802a702:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802a706:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802a708:	4367      	muls	r7, r4
 802a70a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802a70c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a710:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802a714:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802a716:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a71a:	fb04 fa0a 	mul.w	sl, r4, sl
 802a71e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a722:	44bc      	add	ip, r7
 802a724:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a728:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a72c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a730:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a734:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a738:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a73c:	ea4c 040a 	orr.w	r4, ip, sl
 802a740:	940e      	str	r4, [sp, #56]	@ 0x38
 802a742:	43d2      	mvns	r2, r2
 802a744:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802a746:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802a74a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802a74e:	fb0e f707 	mul.w	r7, lr, r7
 802a752:	fb01 770c 	mla	r7, r1, ip, r7
 802a756:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802a758:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a75c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802a760:	fb00 770c 	mla	r7, r0, ip, r7
 802a764:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802a766:	b2d2      	uxtb	r2, r2
 802a768:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802a76c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802a76e:	fb08 770c 	mla	r7, r8, ip, r7
 802a772:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802a776:	fb0e fe0c 	mul.w	lr, lr, ip
 802a77a:	fb01 e303 	mla	r3, r1, r3, lr
 802a77e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a780:	0a3f      	lsrs	r7, r7, #8
 802a782:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802a786:	fb00 330a 	mla	r3, r0, sl, r3
 802a78a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802a78c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802a790:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802a794:	fb08 3c0c 	mla	ip, r8, ip, r3
 802a798:	f8b9 3000 	ldrh.w	r3, [r9]
 802a79c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a7a0:	1218      	asrs	r0, r3, #8
 802a7a2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a7a6:	4350      	muls	r0, r2
 802a7a8:	10d9      	asrs	r1, r3, #3
 802a7aa:	00db      	lsls	r3, r3, #3
 802a7ac:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a7b0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a7b4:	b2db      	uxtb	r3, r3
 802a7b6:	ea47 070c 	orr.w	r7, r7, ip
 802a7ba:	4351      	muls	r1, r2
 802a7bc:	4353      	muls	r3, r2
 802a7be:	1c42      	adds	r2, r0, #1
 802a7c0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a7c4:	0c3a      	lsrs	r2, r7, #16
 802a7c6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a7ca:	4a18      	ldr	r2, [pc, #96]	@ (802a82c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 802a7cc:	b2c0      	uxtb	r0, r0
 802a7ce:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802a7d2:	1c4a      	adds	r2, r1, #1
 802a7d4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a7d8:	0a3a      	lsrs	r2, r7, #8
 802a7da:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a7de:	00c9      	lsls	r1, r1, #3
 802a7e0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a7e4:	4301      	orrs	r1, r0
 802a7e6:	1c58      	adds	r0, r3, #1
 802a7e8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802a7ec:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802a7f0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802a7f4:	4308      	orrs	r0, r1
 802a7f6:	f8a9 0000 	strh.w	r0, [r9]
 802a7fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a7fc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802a7fe:	f109 0902 	add.w	r9, r9, #2
 802a802:	441a      	add	r2, r3
 802a804:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a806:	9225      	str	r2, [sp, #148]	@ 0x94
 802a808:	441d      	add	r5, r3
 802a80a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a80e:	e64c      	b.n	802a4aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802a810:	2800      	cmp	r0, #0
 802a812:	f43f aeed 	beq.w	802a5f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802a816:	5c79      	ldrb	r1, [r7, r1]
 802a818:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802a81c:	9109      	str	r1, [sp, #36]	@ 0x24
 802a81e:	0e09      	lsrs	r1, r1, #24
 802a820:	9111      	str	r1, [sp, #68]	@ 0x44
 802a822:	e6e5      	b.n	802a5f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802a824:	b01b      	add	sp, #108	@ 0x6c
 802a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a82a:	bf00      	nop
 802a82c:	fffff800 	.word	0xfffff800

0802a830 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 802a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a834:	b085      	sub	sp, #20
 802a836:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802a83a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 802a83e:	fb00 7406 	mla	r4, r0, r6, r7
 802a842:	2800      	cmp	r0, #0
 802a844:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 802a848:	9103      	str	r1, [sp, #12]
 802a84a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802a84e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802a852:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802a856:	9501      	str	r5, [sp, #4]
 802a858:	eb03 0904 	add.w	r9, r3, r4
 802a85c:	f2c0 8150 	blt.w	802ab00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802a860:	4583      	cmp	fp, r0
 802a862:	f340 814d 	ble.w	802ab00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802a866:	2f00      	cmp	r7, #0
 802a868:	f2c0 8146 	blt.w	802aaf8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802a86c:	42be      	cmp	r6, r7
 802a86e:	f340 8143 	ble.w	802aaf8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802a872:	f813 c004 	ldrb.w	ip, [r3, r4]
 802a876:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802a87a:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802a87e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a882:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802a886:	4355      	muls	r5, r2
 802a888:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a88c:	fb0c f203 	mul.w	r2, ip, r3
 802a890:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802a894:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802a898:	441d      	add	r5, r3
 802a89a:	f102 0320 	add.w	r3, r2, #32
 802a89e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a8a2:	0a1b      	lsrs	r3, r3, #8
 802a8a4:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802a8a8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a8ac:	431c      	orrs	r4, r3
 802a8ae:	1c7b      	adds	r3, r7, #1
 802a8b0:	f100 812b 	bmi.w	802ab0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802a8b4:	429e      	cmp	r6, r3
 802a8b6:	f340 8128 	ble.w	802ab0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802a8ba:	2900      	cmp	r1, #0
 802a8bc:	f000 8128 	beq.w	802ab10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 802a8c0:	9a01      	ldr	r2, [sp, #4]
 802a8c2:	f899 3001 	ldrb.w	r3, [r9, #1]
 802a8c6:	8855      	ldrh	r5, [r2, #2]
 802a8c8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802a8cc:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 802a8d0:	fb08 f802 	mul.w	r8, r8, r2
 802a8d4:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802a8d8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802a8dc:	435d      	muls	r5, r3
 802a8de:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802a8e2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802a8e6:	44d0      	add	r8, sl
 802a8e8:	f105 0a20 	add.w	sl, r5, #32
 802a8ec:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802a8f0:	0a2d      	lsrs	r5, r5, #8
 802a8f2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802a8f6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802a8fa:	432a      	orrs	r2, r5
 802a8fc:	3001      	adds	r0, #1
 802a8fe:	f100 810d 	bmi.w	802ab1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802a902:	4583      	cmp	fp, r0
 802a904:	f340 810a 	ble.w	802ab1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802a908:	f1be 0f00 	cmp.w	lr, #0
 802a90c:	f000 810b 	beq.w	802ab26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 802a910:	2f00      	cmp	r7, #0
 802a912:	f2c0 8100 	blt.w	802ab16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802a916:	42be      	cmp	r6, r7
 802a918:	f340 80fd 	ble.w	802ab16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802a91c:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802a920:	9801      	ldr	r0, [sp, #4]
 802a922:	f819 5006 	ldrb.w	r5, [r9, r6]
 802a926:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802a92a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802a92e:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 802a932:	fb0a fa00 	mul.w	sl, sl, r0
 802a936:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802a93a:	fb05 f808 	mul.w	r8, r5, r8
 802a93e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802a942:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802a946:	4482      	add	sl, r0
 802a948:	f108 0020 	add.w	r0, r8, #32
 802a94c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802a950:	0a00      	lsrs	r0, r0, #8
 802a952:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802a956:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a95a:	ea4b 0b00 	orr.w	fp, fp, r0
 802a95e:	3701      	adds	r7, #1
 802a960:	f100 80e6 	bmi.w	802ab30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802a964:	42be      	cmp	r6, r7
 802a966:	f340 80e3 	ble.w	802ab30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802a96a:	2900      	cmp	r1, #0
 802a96c:	f000 80e3 	beq.w	802ab36 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 802a970:	9801      	ldr	r0, [sp, #4]
 802a972:	3601      	adds	r6, #1
 802a974:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802a978:	f819 7006 	ldrb.w	r7, [r9, r6]
 802a97c:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 802a980:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a984:	fb07 f800 	mul.w	r8, r7, r0
 802a988:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 802a98c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802a990:	fb09 f906 	mul.w	r9, r9, r6
 802a994:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802a998:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 802a99c:	44d1      	add	r9, sl
 802a99e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802a9a2:	f108 0020 	add.w	r0, r8, #32
 802a9a6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802a9aa:	0a00      	lsrs	r0, r0, #8
 802a9ac:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a9b0:	4330      	orrs	r0, r6
 802a9b2:	b28e      	uxth	r6, r1
 802a9b4:	fa1f f98e 	uxth.w	r9, lr
 802a9b8:	fb06 f809 	mul.w	r8, r6, r9
 802a9bc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802a9c0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802a9c4:	0136      	lsls	r6, r6, #4
 802a9c6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802a9ca:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802a9ce:	9601      	str	r6, [sp, #4]
 802a9d0:	ea4a 0404 	orr.w	r4, sl, r4
 802a9d4:	fa1f f689 	uxth.w	r6, r9
 802a9d8:	9602      	str	r6, [sp, #8]
 802a9da:	4626      	mov	r6, r4
 802a9dc:	fb11 f90e 	smulbb	r9, r1, lr
 802a9e0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802a9e4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802a9e8:	f1ce 0410 	rsb	r4, lr, #16
 802a9ec:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802a9f0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802a9f4:	1a64      	subs	r4, r4, r1
 802a9f6:	ea4a 0202 	orr.w	r2, sl, r2
 802a9fa:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802a9fe:	434a      	muls	r2, r1
 802aa00:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802aa04:	fb04 2406 	mla	r4, r4, r6, r2
 802aa08:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802aa0c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802aa10:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802aa14:	ea4a 0000 	orr.w	r0, sl, r0
 802aa18:	fb09 4200 	mla	r2, r9, r0, r4
 802aa1c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802aa20:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802aa24:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802aa28:	ea44 0b0b 	orr.w	fp, r4, fp
 802aa2c:	9c01      	ldr	r4, [sp, #4]
 802aa2e:	9e02      	ldr	r6, [sp, #8]
 802aa30:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 802aa34:	1ba4      	subs	r4, r4, r6
 802aa36:	9e01      	ldr	r6, [sp, #4]
 802aa38:	b2a4      	uxth	r4, r4
 802aa3a:	eba6 0608 	sub.w	r6, r6, r8
 802aa3e:	b2b6      	uxth	r6, r6
 802aa40:	4373      	muls	r3, r6
 802aa42:	fb0c 3304 	mla	r3, ip, r4, r3
 802aa46:	9c02      	ldr	r4, [sp, #8]
 802aa48:	9903      	ldr	r1, [sp, #12]
 802aa4a:	fb04 3505 	mla	r5, r4, r5, r3
 802aa4e:	fb08 5707 	mla	r7, r8, r7, r5
 802aa52:	8808      	ldrh	r0, [r1, #0]
 802aa54:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 802aa58:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802aa5c:	b289      	uxth	r1, r1
 802aa5e:	434f      	muls	r7, r1
 802aa60:	1c7b      	adds	r3, r7, #1
 802aa62:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802aa66:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802aa6a:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802aa6e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802aa72:	1203      	asrs	r3, r0, #8
 802aa74:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802aa78:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802aa7c:	b2ff      	uxtb	r7, r7
 802aa7e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802aa82:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802aa86:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802aa8a:	fb13 f307 	smulbb	r3, r3, r7
 802aa8e:	ea42 0e0e 	orr.w	lr, r2, lr
 802aa92:	fa1f f28e 	uxth.w	r2, lr
 802aa96:	1215      	asrs	r5, r2, #8
 802aa98:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802aa9c:	fb05 3501 	mla	r5, r5, r1, r3
 802aaa0:	10c3      	asrs	r3, r0, #3
 802aaa2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802aaa6:	fb13 f307 	smulbb	r3, r3, r7
 802aaaa:	10d4      	asrs	r4, r2, #3
 802aaac:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802aab0:	fb04 3401 	mla	r4, r4, r1, r3
 802aab4:	00c3      	lsls	r3, r0, #3
 802aab6:	b2db      	uxtb	r3, r3
 802aab8:	fb13 f307 	smulbb	r3, r3, r7
 802aabc:	00d2      	lsls	r2, r2, #3
 802aabe:	b2d2      	uxtb	r2, r2
 802aac0:	fb02 3101 	mla	r1, r2, r1, r3
 802aac4:	b2ad      	uxth	r5, r5
 802aac6:	b289      	uxth	r1, r1
 802aac8:	b2a4      	uxth	r4, r4
 802aaca:	1c6b      	adds	r3, r5, #1
 802aacc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802aad0:	1c62      	adds	r2, r4, #1
 802aad2:	1c4b      	adds	r3, r1, #1
 802aad4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802aad8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802aadc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802aae0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802aae4:	0964      	lsrs	r4, r4, #5
 802aae6:	432b      	orrs	r3, r5
 802aae8:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802aaec:	9a03      	ldr	r2, [sp, #12]
 802aaee:	4323      	orrs	r3, r4
 802aaf0:	8013      	strh	r3, [r2, #0]
 802aaf2:	b005      	add	sp, #20
 802aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aaf8:	f04f 0c00 	mov.w	ip, #0
 802aafc:	4664      	mov	r4, ip
 802aafe:	e6d6      	b.n	802a8ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 802ab00:	2300      	movs	r3, #0
 802ab02:	469c      	mov	ip, r3
 802ab04:	461a      	mov	r2, r3
 802ab06:	461c      	mov	r4, r3
 802ab08:	e6f8      	b.n	802a8fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802ab0a:	2300      	movs	r3, #0
 802ab0c:	461a      	mov	r2, r3
 802ab0e:	e6f5      	b.n	802a8fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802ab10:	460b      	mov	r3, r1
 802ab12:	460a      	mov	r2, r1
 802ab14:	e6f2      	b.n	802a8fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802ab16:	2500      	movs	r5, #0
 802ab18:	46ab      	mov	fp, r5
 802ab1a:	e720      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 802ab1c:	2700      	movs	r7, #0
 802ab1e:	463d      	mov	r5, r7
 802ab20:	4638      	mov	r0, r7
 802ab22:	46bb      	mov	fp, r7
 802ab24:	e745      	b.n	802a9b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802ab26:	4677      	mov	r7, lr
 802ab28:	4675      	mov	r5, lr
 802ab2a:	4670      	mov	r0, lr
 802ab2c:	46f3      	mov	fp, lr
 802ab2e:	e740      	b.n	802a9b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802ab30:	2700      	movs	r7, #0
 802ab32:	4638      	mov	r0, r7
 802ab34:	e73d      	b.n	802a9b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802ab36:	460f      	mov	r7, r1
 802ab38:	4608      	mov	r0, r1
 802ab3a:	e73a      	b.n	802a9b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0802ab3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab40:	b097      	sub	sp, #92	@ 0x5c
 802ab42:	9214      	str	r2, [sp, #80]	@ 0x50
 802ab44:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802ab46:	9015      	str	r0, [sp, #84]	@ 0x54
 802ab48:	9308      	str	r3, [sp, #32]
 802ab4a:	6850      	ldr	r0, [r2, #4]
 802ab4c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802ab50:	9111      	str	r1, [sp, #68]	@ 0x44
 802ab52:	9312      	str	r3, [sp, #72]	@ 0x48
 802ab54:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802ab58:	fb00 1303 	mla	r3, r0, r3, r1
 802ab5c:	6812      	ldr	r2, [r2, #0]
 802ab5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802ab62:	9309      	str	r3, [sp, #36]	@ 0x24
 802ab64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ab66:	681b      	ldr	r3, [r3, #0]
 802ab68:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ab6a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ab6c:	685b      	ldr	r3, [r3, #4]
 802ab6e:	930c      	str	r3, [sp, #48]	@ 0x30
 802ab70:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 802ab74:	930a      	str	r3, [sp, #40]	@ 0x28
 802ab76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802ab78:	2b00      	cmp	r3, #0
 802ab7a:	dc03      	bgt.n	802ab84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802ab7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802ab7e:	2b00      	cmp	r3, #0
 802ab80:	f340 83cb 	ble.w	802b31a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 802ab84:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ab86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802ab8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802ab8e:	1e48      	subs	r0, r1, #1
 802ab90:	1e55      	subs	r5, r2, #1
 802ab92:	9b08      	ldr	r3, [sp, #32]
 802ab94:	2b00      	cmp	r3, #0
 802ab96:	f340 81a3 	ble.w	802aee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802ab9a:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 802ab9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802ab9e:	1436      	asrs	r6, r6, #16
 802aba0:	ea4f 4323 	mov.w	r3, r3, asr #16
 802aba4:	d406      	bmi.n	802abb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802aba6:	4286      	cmp	r6, r0
 802aba8:	da04      	bge.n	802abb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802abaa:	2b00      	cmp	r3, #0
 802abac:	db02      	blt.n	802abb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802abae:	42ab      	cmp	r3, r5
 802abb0:	f2c0 8197 	blt.w	802aee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802abb4:	3601      	adds	r6, #1
 802abb6:	f100 8184 	bmi.w	802aec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802abba:	42b1      	cmp	r1, r6
 802abbc:	f2c0 8181 	blt.w	802aec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802abc0:	3301      	adds	r3, #1
 802abc2:	f100 817e 	bmi.w	802aec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802abc6:	429a      	cmp	r2, r3
 802abc8:	f2c0 817b 	blt.w	802aec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802abcc:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802abd0:	9b08      	ldr	r3, [sp, #32]
 802abd2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802abd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 802abd6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802abd8:	2b00      	cmp	r3, #0
 802abda:	f340 81a4 	ble.w	802af26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802abde:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802abe0:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 802abe2:	1418      	asrs	r0, r3, #16
 802abe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802abe6:	142d      	asrs	r5, r5, #16
 802abe8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802abec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802abee:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802abf2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802abf4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802abf8:	f100 81f8 	bmi.w	802afec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802abfc:	f102 3eff 	add.w	lr, r2, #4294967295
 802ac00:	4575      	cmp	r5, lr
 802ac02:	f280 81f3 	bge.w	802afec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802ac06:	2800      	cmp	r0, #0
 802ac08:	f2c0 81f0 	blt.w	802afec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802ac0c:	f103 3eff 	add.w	lr, r3, #4294967295
 802ac10:	4570      	cmp	r0, lr
 802ac12:	f280 81eb 	bge.w	802afec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802ac16:	b212      	sxth	r2, r2
 802ac18:	fb00 5002 	mla	r0, r0, r2, r5
 802ac1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802ac1e:	fa1f fe81 	uxth.w	lr, r1
 802ac22:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802ac26:	eb03 0a00 	add.w	sl, r3, r0
 802ac2a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802ac2e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802ac32:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802ac36:	b29b      	uxth	r3, r3
 802ac38:	f1bc 0f00 	cmp.w	ip, #0
 802ac3c:	f000 81b9 	beq.w	802afb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802ac40:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802ac44:	eb0a 0b02 	add.w	fp, sl, r2
 802ac48:	fa1f fa8c 	uxth.w	sl, ip
 802ac4c:	fb0a fe0e 	mul.w	lr, sl, lr
 802ac50:	eba5 050e 	sub.w	r5, r5, lr
 802ac54:	b2ad      	uxth	r5, r5
 802ac56:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802ac5a:	fb08 f505 	mul.w	r5, r8, r5
 802ac5e:	fa1f fa8a 	uxth.w	sl, sl
 802ac62:	eba3 030a 	sub.w	r3, r3, sl
 802ac66:	b29b      	uxth	r3, r3
 802ac68:	940d      	str	r4, [sp, #52]	@ 0x34
 802ac6a:	fb09 5303 	mla	r3, r9, r3, r5
 802ac6e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802ac72:	940e      	str	r4, [sp, #56]	@ 0x38
 802ac74:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802ac76:	fb0a 3304 	mla	r3, sl, r4, r3
 802ac7a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802ac7c:	fb0e 3304 	mla	r3, lr, r4, r3
 802ac80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ac84:	2b00      	cmp	r3, #0
 802ac86:	f000 810f 	beq.w	802aea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802ac8a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802ac8c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802ac90:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802ac94:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802ac98:	f000 8190 	beq.w	802afbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802ac9c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802aca0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802aca4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802aca8:	fb09 f000 	mul.w	r0, r9, r0
 802acac:	fb0a fe0e 	mul.w	lr, sl, lr
 802acb0:	f100 0b20 	add.w	fp, r0, #32
 802acb4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802acb8:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802acbc:	44ce      	add	lr, r9
 802acbe:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802acc2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802acc6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802acca:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802acce:	ea4e 0909 	orr.w	r9, lr, r9
 802acd2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802acd6:	8868      	ldrh	r0, [r5, #2]
 802acd8:	d019      	beq.n	802ad0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802acda:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802acde:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802ace2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802ace6:	fb08 f800 	mul.w	r8, r8, r0
 802acea:	fb0a fe0e 	mul.w	lr, sl, lr
 802acee:	f108 0b20 	add.w	fp, r8, #32
 802acf2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802acf6:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802acfa:	4486      	add	lr, r0
 802acfc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802ad00:	0a00      	lsrs	r0, r0, #8
 802ad02:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802ad06:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802ad0a:	ea4e 0000 	orr.w	r0, lr, r0
 802ad0e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802ad12:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802ad16:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802ad1a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802ad1e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802ad22:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802ad26:	ea4e 0909 	orr.w	r9, lr, r9
 802ad2a:	ea4a 0000 	orr.w	r0, sl, r0
 802ad2e:	f1bc 0f00 	cmp.w	ip, #0
 802ad32:	f000 8145 	beq.w	802afc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802ad36:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802ad3a:	3a01      	subs	r2, #1
 802ad3c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802ad3e:	0052      	lsls	r2, r2, #1
 802ad40:	3202      	adds	r2, #2
 802ad42:	2cff      	cmp	r4, #255	@ 0xff
 802ad44:	eb05 0e02 	add.w	lr, r5, r2
 802ad48:	5aaa      	ldrh	r2, [r5, r2]
 802ad4a:	d018      	beq.n	802ad7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802ad4c:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 802ad50:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802ad54:	fb04 fa02 	mul.w	sl, r4, r2
 802ad58:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802ad5c:	fb08 f805 	mul.w	r8, r8, r5
 802ad60:	f10a 0520 	add.w	r5, sl, #32
 802ad64:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802ad68:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802ad6c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802ad70:	4442      	add	r2, r8
 802ad72:	0a2d      	lsrs	r5, r5, #8
 802ad74:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802ad78:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802ad7c:	432a      	orrs	r2, r5
 802ad7e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802ad80:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802ad84:	2cff      	cmp	r4, #255	@ 0xff
 802ad86:	d01a      	beq.n	802adbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802ad88:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 802ad8c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802ad90:	fb04 fa05 	mul.w	sl, r4, r5
 802ad94:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802ad98:	fb08 f80e 	mul.w	r8, r8, lr
 802ad9c:	f10a 0e20 	add.w	lr, sl, #32
 802ada0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802ada4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802ada8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802adac:	4445      	add	r5, r8
 802adae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802adb2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802adb6:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802adba:	ea45 050e 	orr.w	r5, r5, lr
 802adbe:	fb1c fe01 	smulbb	lr, ip, r1
 802adc2:	f1cc 0810 	rsb	r8, ip, #16
 802adc6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802adca:	eba8 0801 	sub.w	r8, r8, r1
 802adce:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802add2:	4341      	muls	r1, r0
 802add4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802add8:	fb09 1108 	mla	r1, r9, r8, r1
 802addc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802ade0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802ade4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802ade8:	ea4a 0202 	orr.w	r2, sl, r2
 802adec:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802adf0:	fb0c 1102 	mla	r1, ip, r2, r1
 802adf4:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802adf8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802adfc:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802ae00:	ea4b 0505 	orr.w	r5, fp, r5
 802ae04:	fb0e 1e05 	mla	lr, lr, r5, r1
 802ae08:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802ae0c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802ae10:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802ae14:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802ae18:	ea42 0e0e 	orr.w	lr, r2, lr
 802ae1c:	fa1f f28e 	uxth.w	r2, lr
 802ae20:	2bff      	cmp	r3, #255	@ 0xff
 802ae22:	d103      	bne.n	802ae2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802ae24:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802ae26:	29ff      	cmp	r1, #255	@ 0xff
 802ae28:	f000 80de 	beq.w	802afe8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 802ae2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802ae2e:	8838      	ldrh	r0, [r7, #0]
 802ae30:	434b      	muls	r3, r1
 802ae32:	f103 0c01 	add.w	ip, r3, #1
 802ae36:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802ae3a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802ae3e:	fa5f fc83 	uxtb.w	ip, r3
 802ae42:	1203      	asrs	r3, r0, #8
 802ae44:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802ae48:	fb13 f30c 	smulbb	r3, r3, ip
 802ae4c:	1215      	asrs	r5, r2, #8
 802ae4e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802ae52:	fb05 3501 	mla	r5, r5, r1, r3
 802ae56:	10c3      	asrs	r3, r0, #3
 802ae58:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802ae5c:	fb13 f30c 	smulbb	r3, r3, ip
 802ae60:	10d1      	asrs	r1, r2, #3
 802ae62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802ae64:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802ae68:	fb01 3104 	mla	r1, r1, r4, r3
 802ae6c:	00c3      	lsls	r3, r0, #3
 802ae6e:	b2db      	uxtb	r3, r3
 802ae70:	fb13 f30c 	smulbb	r3, r3, ip
 802ae74:	00d2      	lsls	r2, r2, #3
 802ae76:	b2d2      	uxtb	r2, r2
 802ae78:	fb02 3304 	mla	r3, r2, r4, r3
 802ae7c:	b2ad      	uxth	r5, r5
 802ae7e:	b29a      	uxth	r2, r3
 802ae80:	1c6b      	adds	r3, r5, #1
 802ae82:	b289      	uxth	r1, r1
 802ae84:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802ae88:	1c53      	adds	r3, r2, #1
 802ae8a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802ae8e:	1c4a      	adds	r2, r1, #1
 802ae90:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802ae94:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802ae98:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802ae9c:	0949      	lsrs	r1, r1, #5
 802ae9e:	432b      	orrs	r3, r5
 802aea0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802aea4:	430b      	orrs	r3, r1
 802aea6:	803b      	strh	r3, [r7, #0]
 802aea8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802aeaa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802aeac:	3702      	adds	r7, #2
 802aeae:	4413      	add	r3, r2
 802aeb0:	9321      	str	r3, [sp, #132]	@ 0x84
 802aeb2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802aeb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802aeb6:	441a      	add	r2, r3
 802aeb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802aeba:	9222      	str	r2, [sp, #136]	@ 0x88
 802aebc:	3b01      	subs	r3, #1
 802aebe:	9313      	str	r3, [sp, #76]	@ 0x4c
 802aec0:	e689      	b.n	802abd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802aec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802aec4:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 802aec6:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 802aec8:	4433      	add	r3, r6
 802aeca:	9321      	str	r3, [sp, #132]	@ 0x84
 802aecc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802aece:	441c      	add	r4, r3
 802aed0:	9b08      	ldr	r3, [sp, #32]
 802aed2:	9422      	str	r4, [sp, #136]	@ 0x88
 802aed4:	3b01      	subs	r3, #1
 802aed6:	9308      	str	r3, [sp, #32]
 802aed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aeda:	3302      	adds	r3, #2
 802aedc:	9309      	str	r3, [sp, #36]	@ 0x24
 802aede:	e658      	b.n	802ab92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802aee0:	d028      	beq.n	802af34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802aee2:	9b08      	ldr	r3, [sp, #32]
 802aee4:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802aee6:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 802aee8:	3b01      	subs	r3, #1
 802aeea:	fb00 5003 	mla	r0, r0, r3, r5
 802aeee:	1400      	asrs	r0, r0, #16
 802aef0:	f53f ae6c 	bmi.w	802abcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802aef4:	3901      	subs	r1, #1
 802aef6:	4288      	cmp	r0, r1
 802aef8:	f6bf ae68 	bge.w	802abcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802aefc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802aefe:	9822      	ldr	r0, [sp, #136]	@ 0x88
 802af00:	fb01 0303 	mla	r3, r1, r3, r0
 802af04:	141b      	asrs	r3, r3, #16
 802af06:	f53f ae61 	bmi.w	802abcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802af0a:	3a01      	subs	r2, #1
 802af0c:	4293      	cmp	r3, r2
 802af0e:	f6bf ae5d 	bge.w	802abcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802af12:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802af16:	9b08      	ldr	r3, [sp, #32]
 802af18:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802af1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802af1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802af20:	2b00      	cmp	r3, #0
 802af22:	f300 8082 	bgt.w	802b02a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802af26:	9b08      	ldr	r3, [sp, #32]
 802af28:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802af2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802af2e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802af32:	9309      	str	r3, [sp, #36]	@ 0x24
 802af34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802af36:	2b00      	cmp	r3, #0
 802af38:	f340 81ef 	ble.w	802b31a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 802af3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802af40:	ee30 0a04 	vadd.f32	s0, s0, s8
 802af44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802af48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802af4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802af50:	eef0 6a62 	vmov.f32	s13, s5
 802af54:	ee31 1a05 	vadd.f32	s2, s2, s10
 802af58:	ee77 2a62 	vsub.f32	s5, s14, s5
 802af5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802af60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802af64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802af68:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 802af6c:	eef0 6a43 	vmov.f32	s13, s6
 802af70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802af74:	ee12 2a90 	vmov	r2, s5
 802af78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802af7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802af7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802af82:	fb92 f3f3 	sdiv	r3, r2, r3
 802af86:	ee13 2a10 	vmov	r2, s6
 802af8a:	9323      	str	r3, [sp, #140]	@ 0x8c
 802af8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802af8e:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 802af92:	fb92 f3f3 	sdiv	r3, r2, r3
 802af96:	9324      	str	r3, [sp, #144]	@ 0x90
 802af98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802af9a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802af9c:	3b01      	subs	r3, #1
 802af9e:	9311      	str	r3, [sp, #68]	@ 0x44
 802afa0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802afa2:	bf08      	it	eq
 802afa4:	4613      	moveq	r3, r2
 802afa6:	eeb0 3a67 	vmov.f32	s6, s15
 802afaa:	9308      	str	r3, [sp, #32]
 802afac:	eef0 2a47 	vmov.f32	s5, s14
 802afb0:	e5e1      	b.n	802ab76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802afb2:	fb08 f505 	mul.w	r5, r8, r5
 802afb6:	fb09 5303 	mla	r3, r9, r3, r5
 802afba:	e661      	b.n	802ac80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802afbc:	4681      	mov	r9, r0
 802afbe:	e688      	b.n	802acd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802afc0:	f1c1 0210 	rsb	r2, r1, #16
 802afc4:	4341      	muls	r1, r0
 802afc6:	fb09 1902 	mla	r9, r9, r2, r1
 802afca:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802afce:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802afd2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802afd6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802afda:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802afde:	ea42 0909 	orr.w	r9, r2, r9
 802afe2:	fa1f f289 	uxth.w	r2, r9
 802afe6:	e71b      	b.n	802ae20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802afe8:	803a      	strh	r2, [r7, #0]
 802afea:	e75d      	b.n	802aea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802afec:	f115 0e01 	adds.w	lr, r5, #1
 802aff0:	f53f af5a 	bmi.w	802aea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802aff4:	4572      	cmp	r2, lr
 802aff6:	f6ff af57 	blt.w	802aea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802affa:	f110 0e01 	adds.w	lr, r0, #1
 802affe:	f53f af53 	bmi.w	802aea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802b002:	4573      	cmp	r3, lr
 802b004:	f6ff af50 	blt.w	802aea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802b008:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802b00a:	b21b      	sxth	r3, r3
 802b00c:	b212      	sxth	r2, r2
 802b00e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802b012:	9301      	str	r3, [sp, #4]
 802b014:	9200      	str	r2, [sp, #0]
 802b016:	e9cd c405 	strd	ip, r4, [sp, #20]
 802b01a:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 802b01e:	9502      	str	r5, [sp, #8]
 802b020:	4639      	mov	r1, r7
 802b022:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802b024:	f7ff fc04 	bl	802a830 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802b028:	e73e      	b.n	802aea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802b02a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802b02c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802b030:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802b032:	fa1f fc82 	uxth.w	ip, r2
 802b036:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802b03a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b03c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802b040:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b044:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802b046:	141f      	asrs	r7, r3, #16
 802b048:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802b04a:	141b      	asrs	r3, r3, #16
 802b04c:	fb01 3707 	mla	r7, r1, r7, r3
 802b050:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b052:	eb03 0a07 	add.w	sl, r3, r7
 802b056:	f813 9007 	ldrb.w	r9, [r3, r7]
 802b05a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802b05e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802b062:	b29b      	uxth	r3, r3
 802b064:	2d00      	cmp	r5, #0
 802b066:	f000 813d 	beq.w	802b2e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802b06a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802b06e:	eb0a 0b01 	add.w	fp, sl, r1
 802b072:	fa1f fa85 	uxth.w	sl, r5
 802b076:	fb0a fc0c 	mul.w	ip, sl, ip
 802b07a:	eba0 000c 	sub.w	r0, r0, ip
 802b07e:	b280      	uxth	r0, r0
 802b080:	fb08 f000 	mul.w	r0, r8, r0
 802b084:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802b088:	fa1f fa8a 	uxth.w	sl, sl
 802b08c:	eba3 030a 	sub.w	r3, r3, sl
 802b090:	b29b      	uxth	r3, r3
 802b092:	fb09 0303 	mla	r3, r9, r3, r0
 802b096:	940f      	str	r4, [sp, #60]	@ 0x3c
 802b098:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802b09a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802b09e:	fb0a 3300 	mla	r3, sl, r0, r3
 802b0a2:	fb0c 3304 	mla	r3, ip, r4, r3
 802b0a6:	9410      	str	r4, [sp, #64]	@ 0x40
 802b0a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b0ac:	2b00      	cmp	r3, #0
 802b0ae:	f000 810b 	beq.w	802b2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802b0b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802b0b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802b0b6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802b0ba:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802b0be:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802b0c2:	f000 8114 	beq.w	802b2ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 802b0c6:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802b0ca:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802b0ce:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802b0d2:	fb09 f707 	mul.w	r7, r9, r7
 802b0d6:	fb0a fc0c 	mul.w	ip, sl, ip
 802b0da:	f107 0b20 	add.w	fp, r7, #32
 802b0de:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802b0e2:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802b0e6:	44cc      	add	ip, r9
 802b0e8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802b0ec:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802b0f0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802b0f4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802b0f8:	ea4c 0909 	orr.w	r9, ip, r9
 802b0fc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802b100:	8847      	ldrh	r7, [r0, #2]
 802b102:	d019      	beq.n	802b138 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 802b104:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802b108:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802b10c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802b110:	fb08 f807 	mul.w	r8, r8, r7
 802b114:	fb0a fc0c 	mul.w	ip, sl, ip
 802b118:	f108 0b20 	add.w	fp, r8, #32
 802b11c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802b120:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802b124:	44bc      	add	ip, r7
 802b126:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802b12a:	0a3f      	lsrs	r7, r7, #8
 802b12c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802b130:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802b134:	ea4c 0707 	orr.w	r7, ip, r7
 802b138:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802b13c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802b140:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802b144:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802b148:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802b14c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802b150:	ea4c 0909 	orr.w	r9, ip, r9
 802b154:	ea4a 0707 	orr.w	r7, sl, r7
 802b158:	2d00      	cmp	r5, #0
 802b15a:	f000 80ca 	beq.w	802b2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802b15e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802b162:	3901      	subs	r1, #1
 802b164:	0049      	lsls	r1, r1, #1
 802b166:	3102      	adds	r1, #2
 802b168:	eb00 0c01 	add.w	ip, r0, r1
 802b16c:	5a41      	ldrh	r1, [r0, r1]
 802b16e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802b170:	28ff      	cmp	r0, #255	@ 0xff
 802b172:	d019      	beq.n	802b1a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 802b174:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802b176:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802b17a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802b17e:	fb04 fa01 	mul.w	sl, r4, r1
 802b182:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802b186:	fb08 f800 	mul.w	r8, r8, r0
 802b18a:	f10a 0020 	add.w	r0, sl, #32
 802b18e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802b192:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802b196:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802b19a:	4441      	add	r1, r8
 802b19c:	0a00      	lsrs	r0, r0, #8
 802b19e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802b1a2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b1a6:	4301      	orrs	r1, r0
 802b1a8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802b1aa:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802b1ae:	2cff      	cmp	r4, #255	@ 0xff
 802b1b0:	d01a      	beq.n	802b1e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802b1b2:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802b1b6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b1ba:	fb04 fa00 	mul.w	sl, r4, r0
 802b1be:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802b1c2:	fb08 f80c 	mul.w	r8, r8, ip
 802b1c6:	f10a 0c20 	add.w	ip, sl, #32
 802b1ca:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802b1ce:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802b1d2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802b1d6:	4440      	add	r0, r8
 802b1d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b1dc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802b1e0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802b1e4:	ea40 000c 	orr.w	r0, r0, ip
 802b1e8:	fb15 fc02 	smulbb	ip, r5, r2
 802b1ec:	f1c5 0810 	rsb	r8, r5, #16
 802b1f0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802b1f4:	eba8 0802 	sub.w	r8, r8, r2
 802b1f8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802b1fc:	437a      	muls	r2, r7
 802b1fe:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802b202:	fb09 2208 	mla	r2, r9, r8, r2
 802b206:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802b20a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802b20e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802b212:	ea4a 0101 	orr.w	r1, sl, r1
 802b216:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802b21a:	fb05 2201 	mla	r2, r5, r1, r2
 802b21e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802b222:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802b226:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802b22a:	ea4b 0000 	orr.w	r0, fp, r0
 802b22e:	fb0c 2200 	mla	r2, ip, r0, r2
 802b232:	0d57      	lsrs	r7, r2, #21
 802b234:	0952      	lsrs	r2, r2, #5
 802b236:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802b23a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802b23e:	433a      	orrs	r2, r7
 802b240:	2bff      	cmp	r3, #255	@ 0xff
 802b242:	b292      	uxth	r2, r2
 802b244:	d102      	bne.n	802b24c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802b246:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802b248:	29ff      	cmp	r1, #255	@ 0xff
 802b24a:	d063      	beq.n	802b314 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 802b24c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802b24e:	f8be 1000 	ldrh.w	r1, [lr]
 802b252:	4343      	muls	r3, r0
 802b254:	1c58      	adds	r0, r3, #1
 802b256:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802b25a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802b25e:	1208      	asrs	r0, r1, #8
 802b260:	b2db      	uxtb	r3, r3
 802b262:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802b266:	fb10 f003 	smulbb	r0, r0, r3
 802b26a:	10cf      	asrs	r7, r1, #3
 802b26c:	00c9      	lsls	r1, r1, #3
 802b26e:	b2c9      	uxtb	r1, r1
 802b270:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b272:	1215      	asrs	r5, r2, #8
 802b274:	fb11 f103 	smulbb	r1, r1, r3
 802b278:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802b27c:	fb05 0504 	mla	r5, r5, r4, r0
 802b280:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802b284:	10d0      	asrs	r0, r2, #3
 802b286:	00d2      	lsls	r2, r2, #3
 802b288:	fb17 f703 	smulbb	r7, r7, r3
 802b28c:	b2d2      	uxtb	r2, r2
 802b28e:	fb02 1204 	mla	r2, r2, r4, r1
 802b292:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802b296:	fb00 7004 	mla	r0, r0, r4, r7
 802b29a:	b2ad      	uxth	r5, r5
 802b29c:	b292      	uxth	r2, r2
 802b29e:	1c6b      	adds	r3, r5, #1
 802b2a0:	1c57      	adds	r7, r2, #1
 802b2a2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802b2a6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802b2aa:	b280      	uxth	r0, r0
 802b2ac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802b2b0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802b2b4:	433d      	orrs	r5, r7
 802b2b6:	1c47      	adds	r7, r0, #1
 802b2b8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802b2bc:	097f      	lsrs	r7, r7, #5
 802b2be:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802b2c2:	433d      	orrs	r5, r7
 802b2c4:	f8ae 5000 	strh.w	r5, [lr]
 802b2c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802b2ca:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802b2cc:	f10e 0e02 	add.w	lr, lr, #2
 802b2d0:	4413      	add	r3, r2
 802b2d2:	9321      	str	r3, [sp, #132]	@ 0x84
 802b2d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802b2d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b2d8:	441a      	add	r2, r3
 802b2da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802b2dc:	9222      	str	r2, [sp, #136]	@ 0x88
 802b2de:	3b01      	subs	r3, #1
 802b2e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b2e2:	e61c      	b.n	802af1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802b2e4:	fb08 f000 	mul.w	r0, r8, r0
 802b2e8:	fb09 0303 	mla	r3, r9, r3, r0
 802b2ec:	e6dc      	b.n	802b0a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802b2ee:	46b9      	mov	r9, r7
 802b2f0:	e704      	b.n	802b0fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 802b2f2:	f1c2 0110 	rsb	r1, r2, #16
 802b2f6:	437a      	muls	r2, r7
 802b2f8:	fb09 2901 	mla	r9, r9, r1, r2
 802b2fc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802b300:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802b304:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802b308:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b30c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802b310:	4302      	orrs	r2, r0
 802b312:	e795      	b.n	802b240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802b314:	f8ae 2000 	strh.w	r2, [lr]
 802b318:	e7d6      	b.n	802b2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802b31a:	b017      	add	sp, #92	@ 0x5c
 802b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b320 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b324:	b085      	sub	sp, #20
 802b326:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802b32a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 802b32e:	fb00 7406 	mla	r4, r0, r6, r7
 802b332:	2800      	cmp	r0, #0
 802b334:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802b338:	9103      	str	r1, [sp, #12]
 802b33a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802b33e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802b342:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802b346:	9501      	str	r5, [sp, #4]
 802b348:	eb02 0904 	add.w	r9, r2, r4
 802b34c:	f2c0 8141 	blt.w	802b5d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802b350:	4583      	cmp	fp, r0
 802b352:	f340 813e 	ble.w	802b5d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802b356:	2f00      	cmp	r7, #0
 802b358:	f2c0 8137 	blt.w	802b5ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802b35c:	42be      	cmp	r6, r7
 802b35e:	f340 8134 	ble.w	802b5ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802b362:	f812 c004 	ldrb.w	ip, [r2, r4]
 802b366:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802b36a:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802b36e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b372:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802b376:	4355      	muls	r5, r2
 802b378:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802b37c:	fb0c f203 	mul.w	r2, ip, r3
 802b380:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802b384:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802b388:	441d      	add	r5, r3
 802b38a:	f102 0320 	add.w	r3, r2, #32
 802b38e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b392:	0a1b      	lsrs	r3, r3, #8
 802b394:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802b398:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802b39c:	431c      	orrs	r4, r3
 802b39e:	1c7b      	adds	r3, r7, #1
 802b3a0:	f100 811c 	bmi.w	802b5dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802b3a4:	429e      	cmp	r6, r3
 802b3a6:	f340 8119 	ble.w	802b5dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802b3aa:	2900      	cmp	r1, #0
 802b3ac:	f000 8119 	beq.w	802b5e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 802b3b0:	9a01      	ldr	r2, [sp, #4]
 802b3b2:	f899 3001 	ldrb.w	r3, [r9, #1]
 802b3b6:	8855      	ldrh	r5, [r2, #2]
 802b3b8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802b3bc:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 802b3c0:	fb08 f802 	mul.w	r8, r8, r2
 802b3c4:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802b3c8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802b3cc:	435d      	muls	r5, r3
 802b3ce:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802b3d2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802b3d6:	44d0      	add	r8, sl
 802b3d8:	f105 0a20 	add.w	sl, r5, #32
 802b3dc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802b3e0:	0a2d      	lsrs	r5, r5, #8
 802b3e2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802b3e6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802b3ea:	432a      	orrs	r2, r5
 802b3ec:	3001      	adds	r0, #1
 802b3ee:	f100 80fe 	bmi.w	802b5ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802b3f2:	4583      	cmp	fp, r0
 802b3f4:	f340 80fb 	ble.w	802b5ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802b3f8:	f1be 0f00 	cmp.w	lr, #0
 802b3fc:	f000 80fc 	beq.w	802b5f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 802b400:	2f00      	cmp	r7, #0
 802b402:	f2c0 80f1 	blt.w	802b5e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802b406:	42be      	cmp	r6, r7
 802b408:	f340 80ee 	ble.w	802b5e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802b40c:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802b410:	9801      	ldr	r0, [sp, #4]
 802b412:	f819 5006 	ldrb.w	r5, [r9, r6]
 802b416:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802b41a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802b41e:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 802b422:	fb0a fa00 	mul.w	sl, sl, r0
 802b426:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802b42a:	fb05 f808 	mul.w	r8, r5, r8
 802b42e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802b432:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802b436:	4482      	add	sl, r0
 802b438:	f108 0020 	add.w	r0, r8, #32
 802b43c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802b440:	0a00      	lsrs	r0, r0, #8
 802b442:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802b446:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b44a:	ea4b 0b00 	orr.w	fp, fp, r0
 802b44e:	3701      	adds	r7, #1
 802b450:	f100 80d7 	bmi.w	802b602 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802b454:	42be      	cmp	r6, r7
 802b456:	f340 80d4 	ble.w	802b602 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802b45a:	2900      	cmp	r1, #0
 802b45c:	f000 80d4 	beq.w	802b608 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 802b460:	9801      	ldr	r0, [sp, #4]
 802b462:	3601      	adds	r6, #1
 802b464:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802b468:	f819 7006 	ldrb.w	r7, [r9, r6]
 802b46c:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 802b470:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b474:	fb07 f800 	mul.w	r8, r7, r0
 802b478:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 802b47c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802b480:	fb09 f906 	mul.w	r9, r9, r6
 802b484:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802b488:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 802b48c:	44d1      	add	r9, sl
 802b48e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802b492:	f108 0020 	add.w	r0, r8, #32
 802b496:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802b49a:	0a00      	lsrs	r0, r0, #8
 802b49c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b4a0:	4330      	orrs	r0, r6
 802b4a2:	b28e      	uxth	r6, r1
 802b4a4:	fa1f f98e 	uxth.w	r9, lr
 802b4a8:	fb06 f809 	mul.w	r8, r6, r9
 802b4ac:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802b4b0:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802b4b4:	0136      	lsls	r6, r6, #4
 802b4b6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802b4ba:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802b4be:	9601      	str	r6, [sp, #4]
 802b4c0:	ea4a 0404 	orr.w	r4, sl, r4
 802b4c4:	fa1f f689 	uxth.w	r6, r9
 802b4c8:	9602      	str	r6, [sp, #8]
 802b4ca:	4626      	mov	r6, r4
 802b4cc:	fb11 f90e 	smulbb	r9, r1, lr
 802b4d0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802b4d4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802b4d8:	f1ce 0410 	rsb	r4, lr, #16
 802b4dc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802b4e0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802b4e4:	1a64      	subs	r4, r4, r1
 802b4e6:	ea4a 0202 	orr.w	r2, sl, r2
 802b4ea:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802b4ee:	434a      	muls	r2, r1
 802b4f0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802b4f4:	fb04 2406 	mla	r4, r4, r6, r2
 802b4f8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802b4fc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802b500:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802b504:	ea4a 0000 	orr.w	r0, sl, r0
 802b508:	fb09 4200 	mla	r2, r9, r0, r4
 802b50c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802b510:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802b514:	9801      	ldr	r0, [sp, #4]
 802b516:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802b51a:	ea44 0b0b 	orr.w	fp, r4, fp
 802b51e:	9c02      	ldr	r4, [sp, #8]
 802b520:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 802b524:	1b00      	subs	r0, r0, r4
 802b526:	9c01      	ldr	r4, [sp, #4]
 802b528:	b280      	uxth	r0, r0
 802b52a:	eba4 0608 	sub.w	r6, r4, r8
 802b52e:	b2b6      	uxth	r6, r6
 802b530:	4373      	muls	r3, r6
 802b532:	fb0c 3300 	mla	r3, ip, r0, r3
 802b536:	9802      	ldr	r0, [sp, #8]
 802b538:	9903      	ldr	r1, [sp, #12]
 802b53a:	fb00 3505 	mla	r5, r0, r5, r3
 802b53e:	fb08 5707 	mla	r7, r8, r7, r5
 802b542:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802b546:	8809      	ldrh	r1, [r1, #0]
 802b548:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802b54c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802b550:	120b      	asrs	r3, r1, #8
 802b552:	b2ff      	uxtb	r7, r7
 802b554:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802b558:	437b      	muls	r3, r7
 802b55a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802b55e:	10c8      	asrs	r0, r1, #3
 802b560:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802b564:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b568:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802b56c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802b570:	00c9      	lsls	r1, r1, #3
 802b572:	4378      	muls	r0, r7
 802b574:	ea42 0e0e 	orr.w	lr, r2, lr
 802b578:	b2c9      	uxtb	r1, r1
 802b57a:	fa1f f28e 	uxth.w	r2, lr
 802b57e:	434f      	muls	r7, r1
 802b580:	1c59      	adds	r1, r3, #1
 802b582:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b586:	1213      	asrs	r3, r2, #8
 802b588:	f023 0307 	bic.w	r3, r3, #7
 802b58c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802b590:	1c41      	adds	r1, r0, #1
 802b592:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802b596:	10d1      	asrs	r1, r2, #3
 802b598:	f021 0103 	bic.w	r1, r1, #3
 802b59c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b5a0:	021b      	lsls	r3, r3, #8
 802b5a2:	00c9      	lsls	r1, r1, #3
 802b5a4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802b5a8:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802b5ac:	430b      	orrs	r3, r1
 802b5ae:	1c79      	adds	r1, r7, #1
 802b5b0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802b5b4:	00d2      	lsls	r2, r2, #3
 802b5b6:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802b5ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b5be:	431a      	orrs	r2, r3
 802b5c0:	9b03      	ldr	r3, [sp, #12]
 802b5c2:	801a      	strh	r2, [r3, #0]
 802b5c4:	b005      	add	sp, #20
 802b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b5ca:	f04f 0c00 	mov.w	ip, #0
 802b5ce:	4664      	mov	r4, ip
 802b5d0:	e6e5      	b.n	802b39e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802b5d2:	2300      	movs	r3, #0
 802b5d4:	469c      	mov	ip, r3
 802b5d6:	461a      	mov	r2, r3
 802b5d8:	461c      	mov	r4, r3
 802b5da:	e707      	b.n	802b3ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802b5dc:	2300      	movs	r3, #0
 802b5de:	461a      	mov	r2, r3
 802b5e0:	e704      	b.n	802b3ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802b5e2:	460b      	mov	r3, r1
 802b5e4:	460a      	mov	r2, r1
 802b5e6:	e701      	b.n	802b3ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802b5e8:	2500      	movs	r5, #0
 802b5ea:	46ab      	mov	fp, r5
 802b5ec:	e72f      	b.n	802b44e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802b5ee:	2700      	movs	r7, #0
 802b5f0:	463d      	mov	r5, r7
 802b5f2:	4638      	mov	r0, r7
 802b5f4:	46bb      	mov	fp, r7
 802b5f6:	e754      	b.n	802b4a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802b5f8:	4677      	mov	r7, lr
 802b5fa:	4675      	mov	r5, lr
 802b5fc:	4670      	mov	r0, lr
 802b5fe:	46f3      	mov	fp, lr
 802b600:	e74f      	b.n	802b4a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802b602:	2700      	movs	r7, #0
 802b604:	4638      	mov	r0, r7
 802b606:	e74c      	b.n	802b4a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802b608:	460f      	mov	r7, r1
 802b60a:	4608      	mov	r0, r1
 802b60c:	e749      	b.n	802b4a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0802b610 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b614:	b093      	sub	sp, #76	@ 0x4c
 802b616:	9210      	str	r2, [sp, #64]	@ 0x40
 802b618:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802b61a:	9011      	str	r0, [sp, #68]	@ 0x44
 802b61c:	6850      	ldr	r0, [r2, #4]
 802b61e:	910e      	str	r1, [sp, #56]	@ 0x38
 802b620:	9306      	str	r3, [sp, #24]
 802b622:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802b626:	fb00 1303 	mla	r3, r0, r3, r1
 802b62a:	6812      	ldr	r2, [r2, #0]
 802b62c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802b630:	9307      	str	r3, [sp, #28]
 802b632:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b634:	681b      	ldr	r3, [r3, #0]
 802b636:	9308      	str	r3, [sp, #32]
 802b638:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b63a:	685b      	ldr	r3, [r3, #4]
 802b63c:	9309      	str	r3, [sp, #36]	@ 0x24
 802b63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b640:	2b00      	cmp	r3, #0
 802b642:	dc03      	bgt.n	802b64c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802b644:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b646:	2b00      	cmp	r3, #0
 802b648:	f340 83b4 	ble.w	802bdb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 802b64c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b64e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b652:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b656:	1e48      	subs	r0, r1, #1
 802b658:	1e55      	subs	r5, r2, #1
 802b65a:	9b06      	ldr	r3, [sp, #24]
 802b65c:	2b00      	cmp	r3, #0
 802b65e:	f340 8163 	ble.w	802b928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802b662:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802b664:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802b666:	1436      	asrs	r6, r6, #16
 802b668:	ea4f 4323 	mov.w	r3, r3, asr #16
 802b66c:	d406      	bmi.n	802b67c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802b66e:	4286      	cmp	r6, r0
 802b670:	da04      	bge.n	802b67c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802b672:	2b00      	cmp	r3, #0
 802b674:	db02      	blt.n	802b67c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802b676:	42ab      	cmp	r3, r5
 802b678:	f2c0 8157 	blt.w	802b92a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802b67c:	3601      	adds	r6, #1
 802b67e:	f100 8144 	bmi.w	802b90a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802b682:	42b1      	cmp	r1, r6
 802b684:	f2c0 8141 	blt.w	802b90a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802b688:	3301      	adds	r3, #1
 802b68a:	f100 813e 	bmi.w	802b90a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802b68e:	429a      	cmp	r2, r3
 802b690:	f2c0 813b 	blt.w	802b90a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802b694:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802b698:	9b06      	ldr	r3, [sp, #24]
 802b69a:	9f07      	ldr	r7, [sp, #28]
 802b69c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b69e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b6a0:	2b00      	cmp	r3, #0
 802b6a2:	f340 8164 	ble.w	802b96e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802b6a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802b6a8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802b6aa:	1418      	asrs	r0, r3, #16
 802b6ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b6ae:	142d      	asrs	r5, r5, #16
 802b6b0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802b6b4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802b6b6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802b6ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b6bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802b6c0:	f100 81ee 	bmi.w	802baa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802b6c4:	f102 3eff 	add.w	lr, r2, #4294967295
 802b6c8:	4575      	cmp	r5, lr
 802b6ca:	f280 81e9 	bge.w	802baa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802b6ce:	2800      	cmp	r0, #0
 802b6d0:	f2c0 81e6 	blt.w	802baa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802b6d4:	f103 3eff 	add.w	lr, r3, #4294967295
 802b6d8:	4570      	cmp	r0, lr
 802b6da:	f280 81e1 	bge.w	802baa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802b6de:	b212      	sxth	r2, r2
 802b6e0:	fb00 5002 	mla	r0, r0, r2, r5
 802b6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b6e6:	fa1f fe81 	uxth.w	lr, r1
 802b6ea:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802b6ee:	eb03 0a00 	add.w	sl, r3, r0
 802b6f2:	f813 9000 	ldrb.w	r9, [r3, r0]
 802b6f6:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802b6fa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802b6fe:	b29b      	uxth	r3, r3
 802b700:	f1bc 0f00 	cmp.w	ip, #0
 802b704:	f000 8179 	beq.w	802b9fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802b708:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802b70c:	eb0a 0b02 	add.w	fp, sl, r2
 802b710:	fa1f fa8c 	uxth.w	sl, ip
 802b714:	fb0a fe0e 	mul.w	lr, sl, lr
 802b718:	eba5 050e 	sub.w	r5, r5, lr
 802b71c:	b2ad      	uxth	r5, r5
 802b71e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802b722:	fb08 f505 	mul.w	r5, r8, r5
 802b726:	fa1f fa8a 	uxth.w	sl, sl
 802b72a:	eba3 030a 	sub.w	r3, r3, sl
 802b72e:	b29b      	uxth	r3, r3
 802b730:	940a      	str	r4, [sp, #40]	@ 0x28
 802b732:	fb09 5303 	mla	r3, r9, r3, r5
 802b736:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802b73a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802b73c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b73e:	fb0a 3304 	mla	r3, sl, r4, r3
 802b742:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802b744:	fb0e 3304 	mla	r3, lr, r4, r3
 802b748:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b74c:	2b00      	cmp	r3, #0
 802b74e:	f000 80cf 	beq.w	802b8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802b752:	9c08      	ldr	r4, [sp, #32]
 802b754:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802b758:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802b75c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802b760:	f000 8150 	beq.w	802ba04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802b764:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802b768:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802b76c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b770:	fb09 f000 	mul.w	r0, r9, r0
 802b774:	fb0a fe0e 	mul.w	lr, sl, lr
 802b778:	f100 0b20 	add.w	fp, r0, #32
 802b77c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802b780:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802b784:	44ce      	add	lr, r9
 802b786:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802b78a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802b78e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802b792:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802b796:	ea4e 0909 	orr.w	r9, lr, r9
 802b79a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802b79e:	8868      	ldrh	r0, [r5, #2]
 802b7a0:	d019      	beq.n	802b7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b7a2:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802b7a6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802b7aa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b7ae:	fb08 f800 	mul.w	r8, r8, r0
 802b7b2:	fb0a fe0e 	mul.w	lr, sl, lr
 802b7b6:	f108 0b20 	add.w	fp, r8, #32
 802b7ba:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802b7be:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802b7c2:	4486      	add	lr, r0
 802b7c4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802b7c8:	0a00      	lsrs	r0, r0, #8
 802b7ca:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802b7ce:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b7d2:	ea4e 0000 	orr.w	r0, lr, r0
 802b7d6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802b7da:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802b7de:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802b7e2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802b7e6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802b7ea:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802b7ee:	ea4e 0909 	orr.w	r9, lr, r9
 802b7f2:	ea4a 0000 	orr.w	r0, sl, r0
 802b7f6:	f1bc 0f00 	cmp.w	ip, #0
 802b7fa:	f000 8105 	beq.w	802ba08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802b7fe:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802b802:	3a01      	subs	r2, #1
 802b804:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802b806:	0052      	lsls	r2, r2, #1
 802b808:	3202      	adds	r2, #2
 802b80a:	2cff      	cmp	r4, #255	@ 0xff
 802b80c:	eb05 0e02 	add.w	lr, r5, r2
 802b810:	5aaa      	ldrh	r2, [r5, r2]
 802b812:	d018      	beq.n	802b846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802b814:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 802b818:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b81c:	fb04 fa02 	mul.w	sl, r4, r2
 802b820:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802b824:	fb08 f805 	mul.w	r8, r8, r5
 802b828:	f10a 0520 	add.w	r5, sl, #32
 802b82c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802b830:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802b834:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802b838:	4442      	add	r2, r8
 802b83a:	0a2d      	lsrs	r5, r5, #8
 802b83c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802b840:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802b844:	432a      	orrs	r2, r5
 802b846:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802b848:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802b84c:	2cff      	cmp	r4, #255	@ 0xff
 802b84e:	d01a      	beq.n	802b886 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802b850:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 802b854:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802b858:	fb04 fa05 	mul.w	sl, r4, r5
 802b85c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802b860:	fb08 f80e 	mul.w	r8, r8, lr
 802b864:	f10a 0e20 	add.w	lr, sl, #32
 802b868:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802b86c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802b870:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802b874:	4445      	add	r5, r8
 802b876:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b87a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802b87e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802b882:	ea45 050e 	orr.w	r5, r5, lr
 802b886:	fb1c fe01 	smulbb	lr, ip, r1
 802b88a:	f1cc 0810 	rsb	r8, ip, #16
 802b88e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802b892:	eba8 0801 	sub.w	r8, r8, r1
 802b896:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802b89a:	4341      	muls	r1, r0
 802b89c:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802b8a0:	fb09 1108 	mla	r1, r9, r8, r1
 802b8a4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802b8a8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802b8ac:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802b8b0:	ea4a 0202 	orr.w	r2, sl, r2
 802b8b4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802b8b8:	fb0c 1102 	mla	r1, ip, r2, r1
 802b8bc:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802b8c0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802b8c4:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802b8c8:	ea4b 0505 	orr.w	r5, fp, r5
 802b8cc:	fb0e 1e05 	mla	lr, lr, r5, r1
 802b8d0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802b8d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802b8d8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b8dc:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802b8e0:	ea42 0e0e 	orr.w	lr, r2, lr
 802b8e4:	fa1f f28e 	uxth.w	r2, lr
 802b8e8:	2bff      	cmp	r3, #255	@ 0xff
 802b8ea:	f040 80a1 	bne.w	802ba30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802b8ee:	803a      	strh	r2, [r7, #0]
 802b8f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b8f2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802b8f4:	3702      	adds	r7, #2
 802b8f6:	4413      	add	r3, r2
 802b8f8:	931d      	str	r3, [sp, #116]	@ 0x74
 802b8fa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802b8fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b8fe:	441a      	add	r2, r3
 802b900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b902:	921e      	str	r2, [sp, #120]	@ 0x78
 802b904:	3b01      	subs	r3, #1
 802b906:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b908:	e6c9      	b.n	802b69e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802b90a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802b90c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802b90e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 802b910:	4433      	add	r3, r6
 802b912:	931d      	str	r3, [sp, #116]	@ 0x74
 802b914:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b916:	441c      	add	r4, r3
 802b918:	9b06      	ldr	r3, [sp, #24]
 802b91a:	941e      	str	r4, [sp, #120]	@ 0x78
 802b91c:	3b01      	subs	r3, #1
 802b91e:	9306      	str	r3, [sp, #24]
 802b920:	9b07      	ldr	r3, [sp, #28]
 802b922:	3302      	adds	r3, #2
 802b924:	9307      	str	r3, [sp, #28]
 802b926:	e698      	b.n	802b65a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802b928:	d028      	beq.n	802b97c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802b92a:	9b06      	ldr	r3, [sp, #24]
 802b92c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802b92e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802b930:	3b01      	subs	r3, #1
 802b932:	fb00 5003 	mla	r0, r0, r3, r5
 802b936:	1400      	asrs	r0, r0, #16
 802b938:	f53f aeac 	bmi.w	802b694 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802b93c:	3901      	subs	r1, #1
 802b93e:	4288      	cmp	r0, r1
 802b940:	f6bf aea8 	bge.w	802b694 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802b944:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802b946:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802b948:	fb01 0303 	mla	r3, r1, r3, r0
 802b94c:	141b      	asrs	r3, r3, #16
 802b94e:	f53f aea1 	bmi.w	802b694 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802b952:	3a01      	subs	r2, #1
 802b954:	4293      	cmp	r3, r2
 802b956:	f6bf ae9d 	bge.w	802b694 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802b95a:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802b95e:	9b06      	ldr	r3, [sp, #24]
 802b960:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802b964:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b966:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b968:	2b00      	cmp	r3, #0
 802b96a:	f300 80b6 	bgt.w	802bada <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 802b96e:	9b06      	ldr	r3, [sp, #24]
 802b970:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802b974:	9b07      	ldr	r3, [sp, #28]
 802b976:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802b97a:	9307      	str	r3, [sp, #28]
 802b97c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b97e:	2b00      	cmp	r3, #0
 802b980:	f340 8218 	ble.w	802bdb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 802b984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802b988:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b98c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b990:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b998:	eef0 6a62 	vmov.f32	s13, s5
 802b99c:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b9a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b9a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b9a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b9ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b9b0:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 802b9b4:	eef0 6a43 	vmov.f32	s13, s6
 802b9b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b9bc:	ee12 2a90 	vmov	r2, s5
 802b9c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b9c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b9c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b9ca:	fb92 f3f3 	sdiv	r3, r2, r3
 802b9ce:	ee13 2a10 	vmov	r2, s6
 802b9d2:	931f      	str	r3, [sp, #124]	@ 0x7c
 802b9d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b9d6:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802b9da:	fb92 f3f3 	sdiv	r3, r2, r3
 802b9de:	9320      	str	r3, [sp, #128]	@ 0x80
 802b9e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b9e2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802b9e4:	3b01      	subs	r3, #1
 802b9e6:	930e      	str	r3, [sp, #56]	@ 0x38
 802b9e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b9ea:	bf08      	it	eq
 802b9ec:	4613      	moveq	r3, r2
 802b9ee:	eeb0 3a67 	vmov.f32	s6, s15
 802b9f2:	9306      	str	r3, [sp, #24]
 802b9f4:	eef0 2a47 	vmov.f32	s5, s14
 802b9f8:	e621      	b.n	802b63e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802b9fa:	fb08 f505 	mul.w	r5, r8, r5
 802b9fe:	fb09 5303 	mla	r3, r9, r3, r5
 802ba02:	e6a1      	b.n	802b748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802ba04:	4681      	mov	r9, r0
 802ba06:	e6c8      	b.n	802b79a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802ba08:	f1c1 0210 	rsb	r2, r1, #16
 802ba0c:	4341      	muls	r1, r0
 802ba0e:	fb09 1902 	mla	r9, r9, r2, r1
 802ba12:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802ba16:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802ba1a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802ba1e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802ba22:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802ba26:	ea42 0909 	orr.w	r9, r2, r9
 802ba2a:	fa1f f289 	uxth.w	r2, r9
 802ba2e:	e75b      	b.n	802b8e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802ba30:	43db      	mvns	r3, r3
 802ba32:	f8b7 c000 	ldrh.w	ip, [r7]
 802ba36:	fa5f fe83 	uxtb.w	lr, r3
 802ba3a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802ba3e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802ba42:	fb00 f00e 	mul.w	r0, r0, lr
 802ba46:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802ba4a:	1c41      	adds	r1, r0, #1
 802ba4c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802ba50:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802ba54:	fb05 f50e 	mul.w	r5, r5, lr
 802ba58:	1211      	asrs	r1, r2, #8
 802ba5a:	f021 0107 	bic.w	r1, r1, #7
 802ba5e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802ba62:	48d6      	ldr	r0, [pc, #856]	@ (802bdbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802ba64:	b2c9      	uxtb	r1, r1
 802ba66:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802ba6a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802ba6e:	1c69      	adds	r1, r5, #1
 802ba70:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802ba74:	b2db      	uxtb	r3, r3
 802ba76:	10d1      	asrs	r1, r2, #3
 802ba78:	fb03 f30e 	mul.w	r3, r3, lr
 802ba7c:	f021 0103 	bic.w	r1, r1, #3
 802ba80:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802ba84:	00c9      	lsls	r1, r1, #3
 802ba86:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802ba8a:	4301      	orrs	r1, r0
 802ba8c:	1c58      	adds	r0, r3, #1
 802ba8e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802ba92:	00d2      	lsls	r2, r2, #3
 802ba94:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802ba98:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ba9c:	430a      	orrs	r2, r1
 802ba9e:	e726      	b.n	802b8ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 802baa0:	f115 0e01 	adds.w	lr, r5, #1
 802baa4:	f53f af24 	bmi.w	802b8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802baa8:	4572      	cmp	r2, lr
 802baaa:	f6ff af21 	blt.w	802b8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802baae:	f110 0e01 	adds.w	lr, r0, #1
 802bab2:	f53f af1d 	bmi.w	802b8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802bab6:	4573      	cmp	r3, lr
 802bab8:	f6ff af1a 	blt.w	802b8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802babc:	b21b      	sxth	r3, r3
 802babe:	b212      	sxth	r2, r2
 802bac0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 802bac4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802bac8:	9301      	str	r3, [sp, #4]
 802baca:	9200      	str	r2, [sp, #0]
 802bacc:	4639      	mov	r1, r7
 802bace:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802bad2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802bad4:	f7ff fc24 	bl	802b320 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802bad8:	e70a      	b.n	802b8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802bada:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802badc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802bae0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bae2:	fa1f fc82 	uxth.w	ip, r2
 802bae6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802baea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802baec:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802baf0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802baf4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802baf6:	141f      	asrs	r7, r3, #16
 802baf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802bafa:	141b      	asrs	r3, r3, #16
 802bafc:	fb01 3707 	mla	r7, r1, r7, r3
 802bb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bb02:	eb03 0a07 	add.w	sl, r3, r7
 802bb06:	f813 9007 	ldrb.w	r9, [r3, r7]
 802bb0a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802bb0e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802bb12:	b29b      	uxth	r3, r3
 802bb14:	2d00      	cmp	r5, #0
 802bb16:	f000 80fe 	beq.w	802bd16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802bb1a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802bb1e:	eb0a 0b01 	add.w	fp, sl, r1
 802bb22:	fa1f fa85 	uxth.w	sl, r5
 802bb26:	fb0a fc0c 	mul.w	ip, sl, ip
 802bb2a:	eba0 000c 	sub.w	r0, r0, ip
 802bb2e:	b280      	uxth	r0, r0
 802bb30:	fb08 f000 	mul.w	r0, r8, r0
 802bb34:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802bb38:	fa1f fa8a 	uxth.w	sl, sl
 802bb3c:	eba3 030a 	sub.w	r3, r3, sl
 802bb40:	b29b      	uxth	r3, r3
 802bb42:	fb09 0303 	mla	r3, r9, r3, r0
 802bb46:	940c      	str	r4, [sp, #48]	@ 0x30
 802bb48:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802bb4a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802bb4e:	fb0a 3300 	mla	r3, sl, r0, r3
 802bb52:	fb0c 3304 	mla	r3, ip, r4, r3
 802bb56:	940d      	str	r4, [sp, #52]	@ 0x34
 802bb58:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802bb5c:	2b00      	cmp	r3, #0
 802bb5e:	f000 80cc 	beq.w	802bcfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802bb62:	9808      	ldr	r0, [sp, #32]
 802bb64:	9c08      	ldr	r4, [sp, #32]
 802bb66:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802bb6a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802bb6e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802bb72:	f000 80d5 	beq.w	802bd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802bb76:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802bb7a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802bb7e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802bb82:	fb09 f707 	mul.w	r7, r9, r7
 802bb86:	fb0a fc0c 	mul.w	ip, sl, ip
 802bb8a:	f107 0b20 	add.w	fp, r7, #32
 802bb8e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802bb92:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802bb96:	44cc      	add	ip, r9
 802bb98:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802bb9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802bba0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802bba4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802bba8:	ea4c 0909 	orr.w	r9, ip, r9
 802bbac:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802bbb0:	8847      	ldrh	r7, [r0, #2]
 802bbb2:	d019      	beq.n	802bbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 802bbb4:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802bbb8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802bbbc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802bbc0:	fb08 f807 	mul.w	r8, r8, r7
 802bbc4:	fb0a fc0c 	mul.w	ip, sl, ip
 802bbc8:	f108 0b20 	add.w	fp, r8, #32
 802bbcc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802bbd0:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802bbd4:	44bc      	add	ip, r7
 802bbd6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802bbda:	0a3f      	lsrs	r7, r7, #8
 802bbdc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802bbe0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802bbe4:	ea4c 0707 	orr.w	r7, ip, r7
 802bbe8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802bbec:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802bbf0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802bbf4:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802bbf8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802bbfc:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802bc00:	ea4c 0909 	orr.w	r9, ip, r9
 802bc04:	ea4a 0707 	orr.w	r7, sl, r7
 802bc08:	2d00      	cmp	r5, #0
 802bc0a:	f000 808b 	beq.w	802bd24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802bc0e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802bc12:	3901      	subs	r1, #1
 802bc14:	0049      	lsls	r1, r1, #1
 802bc16:	3102      	adds	r1, #2
 802bc18:	eb00 0c01 	add.w	ip, r0, r1
 802bc1c:	5a41      	ldrh	r1, [r0, r1]
 802bc1e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802bc20:	28ff      	cmp	r0, #255	@ 0xff
 802bc22:	d019      	beq.n	802bc58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 802bc24:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802bc26:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802bc2a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802bc2e:	fb04 fa01 	mul.w	sl, r4, r1
 802bc32:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802bc36:	fb08 f800 	mul.w	r8, r8, r0
 802bc3a:	f10a 0020 	add.w	r0, sl, #32
 802bc3e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802bc42:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802bc46:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802bc4a:	4441      	add	r1, r8
 802bc4c:	0a00      	lsrs	r0, r0, #8
 802bc4e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802bc52:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802bc56:	4301      	orrs	r1, r0
 802bc58:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802bc5a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802bc5e:	2cff      	cmp	r4, #255	@ 0xff
 802bc60:	d01a      	beq.n	802bc98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 802bc62:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802bc66:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802bc6a:	fb04 fa00 	mul.w	sl, r4, r0
 802bc6e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802bc72:	fb08 f80c 	mul.w	r8, r8, ip
 802bc76:	f10a 0c20 	add.w	ip, sl, #32
 802bc7a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802bc7e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802bc82:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802bc86:	4440      	add	r0, r8
 802bc88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bc8c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802bc90:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802bc94:	ea40 000c 	orr.w	r0, r0, ip
 802bc98:	fb15 fc02 	smulbb	ip, r5, r2
 802bc9c:	f1c5 0810 	rsb	r8, r5, #16
 802bca0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802bca4:	eba8 0802 	sub.w	r8, r8, r2
 802bca8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802bcac:	437a      	muls	r2, r7
 802bcae:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802bcb2:	fb09 2208 	mla	r2, r9, r8, r2
 802bcb6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802bcba:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802bcbe:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802bcc2:	ea4a 0101 	orr.w	r1, sl, r1
 802bcc6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802bcca:	fb05 2201 	mla	r2, r5, r1, r2
 802bcce:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802bcd2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802bcd6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802bcda:	ea4b 0000 	orr.w	r0, fp, r0
 802bcde:	fb0c 2200 	mla	r2, ip, r0, r2
 802bce2:	0d57      	lsrs	r7, r2, #21
 802bce4:	0952      	lsrs	r2, r2, #5
 802bce6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802bcea:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802bcee:	433a      	orrs	r2, r7
 802bcf0:	2bff      	cmp	r3, #255	@ 0xff
 802bcf2:	b292      	uxth	r2, r2
 802bcf4:	d127      	bne.n	802bd46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802bcf6:	f8ae 2000 	strh.w	r2, [lr]
 802bcfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802bcfc:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802bcfe:	f10e 0e02 	add.w	lr, lr, #2
 802bd02:	4413      	add	r3, r2
 802bd04:	931d      	str	r3, [sp, #116]	@ 0x74
 802bd06:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802bd08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802bd0a:	441a      	add	r2, r3
 802bd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802bd0e:	921e      	str	r2, [sp, #120]	@ 0x78
 802bd10:	3b01      	subs	r3, #1
 802bd12:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bd14:	e627      	b.n	802b966 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802bd16:	fb08 f000 	mul.w	r0, r8, r0
 802bd1a:	fb09 0303 	mla	r3, r9, r3, r0
 802bd1e:	e71b      	b.n	802bb58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 802bd20:	46b9      	mov	r9, r7
 802bd22:	e743      	b.n	802bbac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 802bd24:	f1c2 0110 	rsb	r1, r2, #16
 802bd28:	437a      	muls	r2, r7
 802bd2a:	fb09 2901 	mla	r9, r9, r1, r2
 802bd2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802bd32:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802bd36:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802bd3a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802bd3e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802bd42:	4302      	orrs	r2, r0
 802bd44:	e7d4      	b.n	802bcf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802bd46:	43db      	mvns	r3, r3
 802bd48:	f8be 7000 	ldrh.w	r7, [lr]
 802bd4c:	fa5f fc83 	uxtb.w	ip, r3
 802bd50:	1238      	asrs	r0, r7, #8
 802bd52:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802bd56:	fb00 f00c 	mul.w	r0, r0, ip
 802bd5a:	10fd      	asrs	r5, r7, #3
 802bd5c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802bd60:	fb05 f10c 	mul.w	r1, r5, ip
 802bd64:	1c45      	adds	r5, r0, #1
 802bd66:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802bd6a:	1215      	asrs	r5, r2, #8
 802bd6c:	f025 0507 	bic.w	r5, r5, #7
 802bd70:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802bd74:	00fb      	lsls	r3, r7, #3
 802bd76:	1c4d      	adds	r5, r1, #1
 802bd78:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802bd7c:	b2db      	uxtb	r3, r3
 802bd7e:	10d1      	asrs	r1, r2, #3
 802bd80:	fb03 f30c 	mul.w	r3, r3, ip
 802bd84:	f021 0103 	bic.w	r1, r1, #3
 802bd88:	4c0c      	ldr	r4, [pc, #48]	@ (802bdbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802bd8a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802bd8e:	b2c0      	uxtb	r0, r0
 802bd90:	00c9      	lsls	r1, r1, #3
 802bd92:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802bd96:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802bd9a:	4308      	orrs	r0, r1
 802bd9c:	1c59      	adds	r1, r3, #1
 802bd9e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802bda2:	00d2      	lsls	r2, r2, #3
 802bda4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802bda8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802bdac:	4318      	orrs	r0, r3
 802bdae:	f8ae 0000 	strh.w	r0, [lr]
 802bdb2:	e7a2      	b.n	802bcfa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802bdb4:	b013      	add	sp, #76	@ 0x4c
 802bdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bdba:	bf00      	nop
 802bdbc:	fffff800 	.word	0xfffff800

0802bdc0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802bdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bdc4:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 802bdc8:	fb05 4c03 	mla	ip, r5, r3, r4
 802bdcc:	2d00      	cmp	r5, #0
 802bdce:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802bdd2:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 802bdd6:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802bdda:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 802bdde:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802bde2:	8808      	ldrh	r0, [r1, #0]
 802bde4:	f2c0 80a7 	blt.w	802bf36 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802bde8:	45aa      	cmp	sl, r5
 802bdea:	f340 80a4 	ble.w	802bf36 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802bdee:	2c00      	cmp	r4, #0
 802bdf0:	f2c0 809f 	blt.w	802bf32 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802bdf4:	42a3      	cmp	r3, r4
 802bdf6:	f340 809c 	ble.w	802bf32 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802bdfa:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802bdfe:	1c62      	adds	r2, r4, #1
 802be00:	f100 809c 	bmi.w	802bf3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802be04:	4293      	cmp	r3, r2
 802be06:	f340 8099 	ble.w	802bf3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802be0a:	f1b9 0f00 	cmp.w	r9, #0
 802be0e:	f000 8095 	beq.w	802bf3c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802be12:	f8be c002 	ldrh.w	ip, [lr, #2]
 802be16:	3501      	adds	r5, #1
 802be18:	f100 8094 	bmi.w	802bf44 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802be1c:	45aa      	cmp	sl, r5
 802be1e:	f340 8091 	ble.w	802bf44 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802be22:	2f00      	cmp	r7, #0
 802be24:	f000 808e 	beq.w	802bf44 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802be28:	2c00      	cmp	r4, #0
 802be2a:	f2c0 8089 	blt.w	802bf40 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802be2e:	42a3      	cmp	r3, r4
 802be30:	f340 8086 	ble.w	802bf40 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802be34:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 802be38:	3401      	adds	r4, #1
 802be3a:	f100 8086 	bmi.w	802bf4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802be3e:	42a3      	cmp	r3, r4
 802be40:	f340 8083 	ble.w	802bf4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802be44:	f1b9 0f00 	cmp.w	r9, #0
 802be48:	d07f      	beq.n	802bf4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802be4a:	3301      	adds	r3, #1
 802be4c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802be50:	fb19 fe07 	smulbb	lr, r9, r7
 802be54:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802be58:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802be5c:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 802be60:	ea44 0808 	orr.w	r8, r4, r8
 802be64:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802be68:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 802be6c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802be70:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802be74:	ea44 0c0c 	orr.w	ip, r4, ip
 802be78:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802be7c:	fb04 f40c 	mul.w	r4, r4, ip
 802be80:	f1c7 0210 	rsb	r2, r7, #16
 802be84:	eba2 0209 	sub.w	r2, r2, r9
 802be88:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802be8c:	fb02 4808 	mla	r8, r2, r8, r4
 802be90:	b2b4      	uxth	r4, r6
 802be92:	43f6      	mvns	r6, r6
 802be94:	041a      	lsls	r2, r3, #16
 802be96:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802be9a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802be9e:	4313      	orrs	r3, r2
 802bea0:	fb0e 8303 	mla	r3, lr, r3, r8
 802bea4:	042a      	lsls	r2, r5, #16
 802bea6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802beaa:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802beae:	432a      	orrs	r2, r5
 802beb0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802beb4:	fb07 3202 	mla	r2, r7, r2, r3
 802beb8:	0d53      	lsrs	r3, r2, #21
 802beba:	0952      	lsrs	r2, r2, #5
 802bebc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802bec0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802bec4:	431a      	orrs	r2, r3
 802bec6:	b293      	uxth	r3, r2
 802bec8:	1202      	asrs	r2, r0, #8
 802beca:	b2f6      	uxtb	r6, r6
 802becc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802bed0:	fb12 f206 	smulbb	r2, r2, r6
 802bed4:	10c7      	asrs	r7, r0, #3
 802bed6:	00c0      	lsls	r0, r0, #3
 802bed8:	b2c0      	uxtb	r0, r0
 802beda:	121d      	asrs	r5, r3, #8
 802bedc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802bee0:	fb10 f006 	smulbb	r0, r0, r6
 802bee4:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802bee8:	fb17 f706 	smulbb	r7, r7, r6
 802beec:	fb05 2504 	mla	r5, r5, r4, r2
 802bef0:	10da      	asrs	r2, r3, #3
 802bef2:	00db      	lsls	r3, r3, #3
 802bef4:	b2db      	uxtb	r3, r3
 802bef6:	fb03 0004 	mla	r0, r3, r4, r0
 802befa:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802befe:	fb02 7204 	mla	r2, r2, r4, r7
 802bf02:	b2ad      	uxth	r5, r5
 802bf04:	b280      	uxth	r0, r0
 802bf06:	1c6b      	adds	r3, r5, #1
 802bf08:	b292      	uxth	r2, r2
 802bf0a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802bf0e:	1c43      	adds	r3, r0, #1
 802bf10:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802bf14:	1c50      	adds	r0, r2, #1
 802bf16:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802bf1a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802bf1e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802bf22:	0952      	lsrs	r2, r2, #5
 802bf24:	432b      	orrs	r3, r5
 802bf26:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802bf2a:	4313      	orrs	r3, r2
 802bf2c:	800b      	strh	r3, [r1, #0]
 802bf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bf32:	4680      	mov	r8, r0
 802bf34:	e763      	b.n	802bdfe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802bf36:	4684      	mov	ip, r0
 802bf38:	4680      	mov	r8, r0
 802bf3a:	e76c      	b.n	802be16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802bf3c:	4684      	mov	ip, r0
 802bf3e:	e76a      	b.n	802be16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802bf40:	4605      	mov	r5, r0
 802bf42:	e779      	b.n	802be38 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 802bf44:	4603      	mov	r3, r0
 802bf46:	4605      	mov	r5, r0
 802bf48:	e782      	b.n	802be50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802bf4a:	4603      	mov	r3, r0
 802bf4c:	e780      	b.n	802be50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802bf4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802bf4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bf52:	b093      	sub	sp, #76	@ 0x4c
 802bf54:	461d      	mov	r5, r3
 802bf56:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802bf5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802bf5c:	910a      	str	r1, [sp, #40]	@ 0x28
 802bf5e:	9210      	str	r2, [sp, #64]	@ 0x40
 802bf60:	6859      	ldr	r1, [r3, #4]
 802bf62:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 802bf66:	681b      	ldr	r3, [r3, #0]
 802bf68:	920b      	str	r2, [sp, #44]	@ 0x2c
 802bf6a:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 802bf6e:	fb01 2707 	mla	r7, r1, r7, r2
 802bf72:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802bf76:	9307      	str	r3, [sp, #28]
 802bf78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802bf7a:	9011      	str	r0, [sp, #68]	@ 0x44
 802bf7c:	681b      	ldr	r3, [r3, #0]
 802bf7e:	9309      	str	r3, [sp, #36]	@ 0x24
 802bf80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802bf82:	43db      	mvns	r3, r3
 802bf84:	b2db      	uxtb	r3, r3
 802bf86:	9308      	str	r3, [sp, #32]
 802bf88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bf8a:	2b00      	cmp	r3, #0
 802bf8c:	dc03      	bgt.n	802bf96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802bf8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802bf90:	2b00      	cmp	r3, #0
 802bf92:	f340 8203 	ble.w	802c39c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802bf96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802bf98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802bf9c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802bfa0:	1e48      	subs	r0, r1, #1
 802bfa2:	f102 3cff 	add.w	ip, r2, #4294967295
 802bfa6:	2d00      	cmp	r5, #0
 802bfa8:	f340 80da 	ble.w	802c160 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802bfac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802bfb0:	ea4f 4326 	mov.w	r3, r6, asr #16
 802bfb4:	d406      	bmi.n	802bfc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802bfb6:	4586      	cmp	lr, r0
 802bfb8:	da04      	bge.n	802bfc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802bfba:	2b00      	cmp	r3, #0
 802bfbc:	db02      	blt.n	802bfc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802bfbe:	4563      	cmp	r3, ip
 802bfc0:	f2c0 80cf 	blt.w	802c162 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802bfc4:	f11e 0e01 	adds.w	lr, lr, #1
 802bfc8:	f100 80c1 	bmi.w	802c14e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802bfcc:	4571      	cmp	r1, lr
 802bfce:	f2c0 80be 	blt.w	802c14e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802bfd2:	3301      	adds	r3, #1
 802bfd4:	f100 80bb 	bmi.w	802c14e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802bfd8:	429a      	cmp	r2, r3
 802bfda:	f2c0 80b8 	blt.w	802c14e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802bfde:	46a9      	mov	r9, r5
 802bfe0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802bfe4:	f1b9 0f00 	cmp.w	r9, #0
 802bfe8:	f340 80d8 	ble.w	802c19c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802bfec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802bfee:	1421      	asrs	r1, r4, #16
 802bff0:	ea4f 4026 	mov.w	r0, r6, asr #16
 802bff4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802bff8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802bffc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802c000:	f100 8111 	bmi.w	802c226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802c004:	f10e 3aff 	add.w	sl, lr, #4294967295
 802c008:	4551      	cmp	r1, sl
 802c00a:	f280 810c 	bge.w	802c226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802c00e:	2800      	cmp	r0, #0
 802c010:	f2c0 8109 	blt.w	802c226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802c014:	f103 3aff 	add.w	sl, r3, #4294967295
 802c018:	4550      	cmp	r0, sl
 802c01a:	f280 8104 	bge.w	802c226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802c01e:	fa0f f38e 	sxth.w	r3, lr
 802c022:	fb00 1103 	mla	r1, r0, r3, r1
 802c026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c028:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802c02c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802c030:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802c034:	f1bc 0f00 	cmp.w	ip, #0
 802c038:	d007      	beq.n	802c04a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802c03a:	005b      	lsls	r3, r3, #1
 802c03c:	eb0a 0003 	add.w	r0, sl, r3
 802c040:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802c044:	930c      	str	r3, [sp, #48]	@ 0x30
 802c046:	8843      	ldrh	r3, [r0, #2]
 802c048:	930d      	str	r3, [sp, #52]	@ 0x34
 802c04a:	fb12 f30c 	smulbb	r3, r2, ip
 802c04e:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802c052:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802c056:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802c05a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802c05e:	10db      	asrs	r3, r3, #3
 802c060:	ea40 000e 	orr.w	r0, r0, lr
 802c064:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802c068:	f1cc 0e10 	rsb	lr, ip, #16
 802c06c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802c070:	ebae 0e02 	sub.w	lr, lr, r2
 802c074:	ea4a 0101 	orr.w	r1, sl, r1
 802c078:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802c07c:	4351      	muls	r1, r2
 802c07e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802c082:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802c084:	fb0e 1e00 	mla	lr, lr, r0, r1
 802c088:	0410      	lsls	r0, r2, #16
 802c08a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802c08e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802c092:	4310      	orrs	r0, r2
 802c094:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802c096:	fb03 e000 	mla	r0, r3, r0, lr
 802c09a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802c09c:	0412      	lsls	r2, r2, #16
 802c09e:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 802c0a2:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802c0a6:	ea42 020e 	orr.w	r2, r2, lr
 802c0aa:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802c0ae:	fb03 0302 	mla	r3, r3, r2, r0
 802c0b2:	f8b8 0000 	ldrh.w	r0, [r8]
 802c0b6:	9f08      	ldr	r7, [sp, #32]
 802c0b8:	0d5a      	lsrs	r2, r3, #21
 802c0ba:	1201      	asrs	r1, r0, #8
 802c0bc:	095b      	lsrs	r3, r3, #5
 802c0be:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802c0c2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802c0c6:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802c0ca:	4313      	orrs	r3, r2
 802c0cc:	fb11 f107 	smulbb	r1, r1, r7
 802c0d0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802c0d4:	00c0      	lsls	r0, r0, #3
 802c0d6:	b29b      	uxth	r3, r3
 802c0d8:	b2c0      	uxtb	r0, r0
 802c0da:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 802c0de:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802c0e2:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802c0e6:	fb10 f007 	smulbb	r0, r0, r7
 802c0ea:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802c0ee:	fb1e fe07 	smulbb	lr, lr, r7
 802c0f2:	fb0c 1c02 	mla	ip, ip, r2, r1
 802c0f6:	10d9      	asrs	r1, r3, #3
 802c0f8:	00db      	lsls	r3, r3, #3
 802c0fa:	b2db      	uxtb	r3, r3
 802c0fc:	fb03 0302 	mla	r3, r3, r2, r0
 802c100:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802c104:	fb01 e102 	mla	r1, r1, r2, lr
 802c108:	fa1f fc8c 	uxth.w	ip, ip
 802c10c:	b29a      	uxth	r2, r3
 802c10e:	f10c 0301 	add.w	r3, ip, #1
 802c112:	b289      	uxth	r1, r1
 802c114:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802c118:	1c53      	adds	r3, r2, #1
 802c11a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802c11e:	1c4a      	adds	r2, r1, #1
 802c120:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802c124:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802c128:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802c12c:	0949      	lsrs	r1, r1, #5
 802c12e:	ea43 030c 	orr.w	r3, r3, ip
 802c132:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802c136:	430b      	orrs	r3, r1
 802c138:	f8a8 3000 	strh.w	r3, [r8]
 802c13c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802c13e:	f108 0802 	add.w	r8, r8, #2
 802c142:	441c      	add	r4, r3
 802c144:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802c146:	f109 39ff 	add.w	r9, r9, #4294967295
 802c14a:	441e      	add	r6, r3
 802c14c:	e74a      	b.n	802bfe4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802c14e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802c150:	3d01      	subs	r5, #1
 802c152:	441c      	add	r4, r3
 802c154:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802c156:	441e      	add	r6, r3
 802c158:	9b07      	ldr	r3, [sp, #28]
 802c15a:	3302      	adds	r3, #2
 802c15c:	9307      	str	r3, [sp, #28]
 802c15e:	e722      	b.n	802bfa6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802c160:	d022      	beq.n	802c1a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802c162:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802c164:	1e6b      	subs	r3, r5, #1
 802c166:	fb00 4003 	mla	r0, r0, r3, r4
 802c16a:	1400      	asrs	r0, r0, #16
 802c16c:	f53f af37 	bmi.w	802bfde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802c170:	3901      	subs	r1, #1
 802c172:	4288      	cmp	r0, r1
 802c174:	f6bf af33 	bge.w	802bfde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802c178:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802c17a:	fb01 6303 	mla	r3, r1, r3, r6
 802c17e:	141b      	asrs	r3, r3, #16
 802c180:	f53f af2d 	bmi.w	802bfde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802c184:	3a01      	subs	r2, #1
 802c186:	4293      	cmp	r3, r2
 802c188:	f6bf af29 	bge.w	802bfde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802c18c:	46a8      	mov	r8, r5
 802c18e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802c192:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 802c196:	f1b8 0f00 	cmp.w	r8, #0
 802c19a:	dc5e      	bgt.n	802c25a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802c19c:	9b07      	ldr	r3, [sp, #28]
 802c19e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802c1a2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802c1a6:	9307      	str	r3, [sp, #28]
 802c1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c1aa:	2b00      	cmp	r3, #0
 802c1ac:	f340 80f6 	ble.w	802c39c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802c1b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802c1b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 802c1b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802c1bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c1c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802c1c4:	eef0 6a62 	vmov.f32	s13, s5
 802c1c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 802c1cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 802c1d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 802c1d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c1d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802c1dc:	ee16 4a90 	vmov	r4, s13
 802c1e0:	eef0 6a43 	vmov.f32	s13, s6
 802c1e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802c1e8:	ee12 2a90 	vmov	r2, s5
 802c1ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802c1f0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802c1f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c1f6:	fb92 f3f3 	sdiv	r3, r2, r3
 802c1fa:	ee13 2a10 	vmov	r2, s6
 802c1fe:	931f      	str	r3, [sp, #124]	@ 0x7c
 802c200:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802c202:	ee16 6a90 	vmov	r6, s13
 802c206:	fb92 f3f3 	sdiv	r3, r2, r3
 802c20a:	9320      	str	r3, [sp, #128]	@ 0x80
 802c20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c20e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802c210:	3b01      	subs	r3, #1
 802c212:	930a      	str	r3, [sp, #40]	@ 0x28
 802c214:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802c216:	bf0c      	ite	eq
 802c218:	4615      	moveq	r5, r2
 802c21a:	461d      	movne	r5, r3
 802c21c:	eeb0 3a67 	vmov.f32	s6, s15
 802c220:	eef0 2a47 	vmov.f32	s5, s14
 802c224:	e6b0      	b.n	802bf88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802c226:	f111 0a01 	adds.w	sl, r1, #1
 802c22a:	d487      	bmi.n	802c13c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802c22c:	45d6      	cmp	lr, sl
 802c22e:	db85      	blt.n	802c13c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802c230:	f110 0a01 	adds.w	sl, r0, #1
 802c234:	d482      	bmi.n	802c13c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802c236:	4553      	cmp	r3, sl
 802c238:	db80      	blt.n	802c13c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802c23a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802c23c:	b21b      	sxth	r3, r3
 802c23e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802c242:	9101      	str	r1, [sp, #4]
 802c244:	9300      	str	r3, [sp, #0]
 802c246:	e9cd c704 	strd	ip, r7, [sp, #16]
 802c24a:	fa0f f38e 	sxth.w	r3, lr
 802c24e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c250:	4641      	mov	r1, r8
 802c252:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802c254:	f7ff fdb4 	bl	802bdc0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802c258:	e770      	b.n	802c13c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802c25a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802c25c:	1430      	asrs	r0, r6, #16
 802c25e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802c262:	1423      	asrs	r3, r4, #16
 802c264:	fb01 3000 	mla	r0, r1, r0, r3
 802c268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c26a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802c26c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802c270:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802c274:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802c278:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802c27c:	8858      	ldrh	r0, [r3, #2]
 802c27e:	f1be 0f00 	cmp.w	lr, #0
 802c282:	d00b      	beq.n	802c29c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802c284:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802c288:	3901      	subs	r1, #1
 802c28a:	0049      	lsls	r1, r1, #1
 802c28c:	3102      	adds	r1, #2
 802c28e:	eb03 0b01 	add.w	fp, r3, r1
 802c292:	5a5b      	ldrh	r3, [r3, r1]
 802c294:	930e      	str	r3, [sp, #56]	@ 0x38
 802c296:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802c29a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c29c:	fb12 f30e 	smulbb	r3, r2, lr
 802c2a0:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802c2a4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802c2a8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802c2ac:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 802c2b0:	10db      	asrs	r3, r3, #3
 802c2b2:	ea41 010c 	orr.w	r1, r1, ip
 802c2b6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802c2ba:	f1ce 0c10 	rsb	ip, lr, #16
 802c2be:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802c2c2:	ebac 0c02 	sub.w	ip, ip, r2
 802c2c6:	ea4b 0000 	orr.w	r0, fp, r0
 802c2ca:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802c2ce:	4350      	muls	r0, r2
 802c2d0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802c2d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802c2d6:	fb0c 0c01 	mla	ip, ip, r1, r0
 802c2da:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802c2de:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802c2e2:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 802c2e6:	ea4b 0101 	orr.w	r1, fp, r1
 802c2ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802c2ec:	fb03 c101 	mla	r1, r3, r1, ip
 802c2f0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802c2f2:	0412      	lsls	r2, r2, #16
 802c2f4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802c2f8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802c2fc:	4302      	orrs	r2, r0
 802c2fe:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802c302:	fb03 1202 	mla	r2, r3, r2, r1
 802c306:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802c30a:	0952      	lsrs	r2, r2, #5
 802c30c:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 802c310:	f8b9 2000 	ldrh.w	r2, [r9]
 802c314:	9f08      	ldr	r7, [sp, #32]
 802c316:	1211      	asrs	r1, r2, #8
 802c318:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802c31c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802c320:	fb11 f107 	smulbb	r1, r1, r7
 802c324:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802c328:	ea4b 0303 	orr.w	r3, fp, r3
 802c32c:	00d2      	lsls	r2, r2, #3
 802c32e:	b29b      	uxth	r3, r3
 802c330:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 802c334:	b2d2      	uxtb	r2, r2
 802c336:	1218      	asrs	r0, r3, #8
 802c338:	fb1c fc07 	smulbb	ip, ip, r7
 802c33c:	fb12 f207 	smulbb	r2, r2, r7
 802c340:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802c344:	fb00 100a 	mla	r0, r0, sl, r1
 802c348:	10d9      	asrs	r1, r3, #3
 802c34a:	00db      	lsls	r3, r3, #3
 802c34c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802c350:	b2db      	uxtb	r3, r3
 802c352:	fb01 c10a 	mla	r1, r1, sl, ip
 802c356:	fb03 230a 	mla	r3, r3, sl, r2
 802c35a:	b280      	uxth	r0, r0
 802c35c:	b29b      	uxth	r3, r3
 802c35e:	b289      	uxth	r1, r1
 802c360:	1c42      	adds	r2, r0, #1
 802c362:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802c366:	f101 0c01 	add.w	ip, r1, #1
 802c36a:	1c5a      	adds	r2, r3, #1
 802c36c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802c370:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802c374:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802c376:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802c37a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802c37e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802c382:	4310      	orrs	r0, r2
 802c384:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802c388:	441c      	add	r4, r3
 802c38a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802c38c:	ea40 000c 	orr.w	r0, r0, ip
 802c390:	f829 0b02 	strh.w	r0, [r9], #2
 802c394:	441e      	add	r6, r3
 802c396:	f108 38ff 	add.w	r8, r8, #4294967295
 802c39a:	e6fc      	b.n	802c196 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802c39c:	b013      	add	sp, #76	@ 0x4c
 802c39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802c3a2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802c3a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802c3a6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802c3aa:	fb0e 4703 	mla	r7, lr, r3, r4
 802c3ae:	f1be 0f00 	cmp.w	lr, #0
 802c3b2:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802c3b6:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 802c3ba:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 802c3be:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802c3c2:	8808      	ldrh	r0, [r1, #0]
 802c3c4:	db60      	blt.n	802c488 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802c3c6:	45f1      	cmp	r9, lr
 802c3c8:	dd5e      	ble.n	802c488 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802c3ca:	2c00      	cmp	r4, #0
 802c3cc:	db5a      	blt.n	802c484 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802c3ce:	42a3      	cmp	r3, r4
 802c3d0:	dd58      	ble.n	802c484 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802c3d2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802c3d6:	1c62      	adds	r2, r4, #1
 802c3d8:	d459      	bmi.n	802c48e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802c3da:	4293      	cmp	r3, r2
 802c3dc:	dd57      	ble.n	802c48e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802c3de:	2d00      	cmp	r5, #0
 802c3e0:	d055      	beq.n	802c48e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802c3e2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802c3e6:	f11e 0e01 	adds.w	lr, lr, #1
 802c3ea:	d454      	bmi.n	802c496 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802c3ec:	45f1      	cmp	r9, lr
 802c3ee:	dd52      	ble.n	802c496 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802c3f0:	2e00      	cmp	r6, #0
 802c3f2:	d050      	beq.n	802c496 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802c3f4:	2c00      	cmp	r4, #0
 802c3f6:	db4c      	blt.n	802c492 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802c3f8:	42a3      	cmp	r3, r4
 802c3fa:	dd4a      	ble.n	802c492 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802c3fc:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 802c400:	3401      	adds	r4, #1
 802c402:	d405      	bmi.n	802c410 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802c404:	42a3      	cmp	r3, r4
 802c406:	dd03      	ble.n	802c410 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802c408:	b115      	cbz	r5, 802c410 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802c40a:	3301      	adds	r3, #1
 802c40c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 802c410:	fb15 f406 	smulbb	r4, r5, r6
 802c414:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802c418:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802c41c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802c420:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802c424:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802c428:	ea43 0c0c 	orr.w	ip, r3, ip
 802c42c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802c430:	f1c6 0310 	rsb	r3, r6, #16
 802c434:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802c438:	1b5b      	subs	r3, r3, r5
 802c43a:	ea4e 0707 	orr.w	r7, lr, r7
 802c43e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802c442:	437d      	muls	r5, r7
 802c444:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802c448:	fb03 5c0c 	mla	ip, r3, ip, r5
 802c44c:	0403      	lsls	r3, r0, #16
 802c44e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802c452:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802c456:	4318      	orrs	r0, r3
 802c458:	fb04 c000 	mla	r0, r4, r0, ip
 802c45c:	0413      	lsls	r3, r2, #16
 802c45e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802c462:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802c466:	4313      	orrs	r3, r2
 802c468:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802c46c:	fb06 0003 	mla	r0, r6, r3, r0
 802c470:	0d43      	lsrs	r3, r0, #21
 802c472:	0940      	lsrs	r0, r0, #5
 802c474:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802c478:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802c47c:	4318      	orrs	r0, r3
 802c47e:	8008      	strh	r0, [r1, #0]
 802c480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c484:	4684      	mov	ip, r0
 802c486:	e7a6      	b.n	802c3d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 802c488:	4607      	mov	r7, r0
 802c48a:	4684      	mov	ip, r0
 802c48c:	e7ab      	b.n	802c3e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802c48e:	4607      	mov	r7, r0
 802c490:	e7a9      	b.n	802c3e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802c492:	4602      	mov	r2, r0
 802c494:	e7b4      	b.n	802c400 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802c496:	4602      	mov	r2, r0
 802c498:	e7ba      	b.n	802c410 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802c49a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802c49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c49e:	b08f      	sub	sp, #60	@ 0x3c
 802c4a0:	461d      	mov	r5, r3
 802c4a2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 802c4a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802c4a8:	9107      	str	r1, [sp, #28]
 802c4aa:	6859      	ldr	r1, [r3, #4]
 802c4ac:	920c      	str	r2, [sp, #48]	@ 0x30
 802c4ae:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 802c4b2:	fb01 2707 	mla	r7, r1, r7, r2
 802c4b6:	681b      	ldr	r3, [r3, #0]
 802c4b8:	900d      	str	r0, [sp, #52]	@ 0x34
 802c4ba:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802c4be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802c4c0:	f8d3 8000 	ldr.w	r8, [r3]
 802c4c4:	9b07      	ldr	r3, [sp, #28]
 802c4c6:	2b00      	cmp	r3, #0
 802c4c8:	dc03      	bgt.n	802c4d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802c4ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802c4cc:	2b00      	cmp	r3, #0
 802c4ce:	f340 8181 	ble.w	802c7d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802c4d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802c4d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802c4d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802c4dc:	1e48      	subs	r0, r1, #1
 802c4de:	f102 3cff 	add.w	ip, r2, #4294967295
 802c4e2:	2d00      	cmp	r5, #0
 802c4e4:	f340 809b 	ble.w	802c61e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802c4e8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802c4ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 802c4f0:	d406      	bmi.n	802c500 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802c4f2:	4586      	cmp	lr, r0
 802c4f4:	da04      	bge.n	802c500 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802c4f6:	2b00      	cmp	r3, #0
 802c4f8:	db02      	blt.n	802c500 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802c4fa:	4563      	cmp	r3, ip
 802c4fc:	f2c0 8090 	blt.w	802c620 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802c500:	f11e 0e01 	adds.w	lr, lr, #1
 802c504:	f100 8084 	bmi.w	802c610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802c508:	4571      	cmp	r1, lr
 802c50a:	f2c0 8081 	blt.w	802c610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802c50e:	3301      	adds	r3, #1
 802c510:	d47e      	bmi.n	802c610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802c512:	429a      	cmp	r2, r3
 802c514:	db7c      	blt.n	802c610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802c516:	46aa      	mov	sl, r5
 802c518:	46b9      	mov	r9, r7
 802c51a:	f1ba 0f00 	cmp.w	sl, #0
 802c51e:	f340 8099 	ble.w	802c654 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802c522:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802c524:	1421      	asrs	r1, r4, #16
 802c526:	ea4f 4026 	mov.w	r0, r6, asr #16
 802c52a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802c52e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802c532:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802c536:	f100 80d0 	bmi.w	802c6da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802c53a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802c53e:	4559      	cmp	r1, fp
 802c540:	f280 80cb 	bge.w	802c6da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802c544:	2800      	cmp	r0, #0
 802c546:	f2c0 80c8 	blt.w	802c6da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802c54a:	f103 3bff 	add.w	fp, r3, #4294967295
 802c54e:	4558      	cmp	r0, fp
 802c550:	f280 80c3 	bge.w	802c6da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802c554:	fa0f fe8e 	sxth.w	lr, lr
 802c558:	fb00 110e 	mla	r1, r0, lr, r1
 802c55c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802c560:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802c564:	8841      	ldrh	r1, [r0, #2]
 802c566:	f1bc 0f00 	cmp.w	ip, #0
 802c56a:	d00b      	beq.n	802c584 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802c56c:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802c570:	3b01      	subs	r3, #1
 802c572:	005b      	lsls	r3, r3, #1
 802c574:	3302      	adds	r3, #2
 802c576:	eb00 0e03 	add.w	lr, r0, r3
 802c57a:	5ac3      	ldrh	r3, [r0, r3]
 802c57c:	9308      	str	r3, [sp, #32]
 802c57e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802c582:	9309      	str	r3, [sp, #36]	@ 0x24
 802c584:	fb12 f30c 	smulbb	r3, r2, ip
 802c588:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802c58c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802c590:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802c594:	ea40 000b 	orr.w	r0, r0, fp
 802c598:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802c59c:	10db      	asrs	r3, r3, #3
 802c59e:	f1cc 0e10 	rsb	lr, ip, #16
 802c5a2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802c5a6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802c5aa:	ebae 0e02 	sub.w	lr, lr, r2
 802c5ae:	ea4b 0101 	orr.w	r1, fp, r1
 802c5b2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802c5b6:	4351      	muls	r1, r2
 802c5b8:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802c5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c5be:	fb0e 1e00 	mla	lr, lr, r0, r1
 802c5c2:	0410      	lsls	r0, r2, #16
 802c5c4:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802c5c8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802c5cc:	4310      	orrs	r0, r2
 802c5ce:	9a08      	ldr	r2, [sp, #32]
 802c5d0:	fb03 e000 	mla	r0, r3, r0, lr
 802c5d4:	9908      	ldr	r1, [sp, #32]
 802c5d6:	0412      	lsls	r2, r2, #16
 802c5d8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802c5dc:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 802c5e0:	ea42 020e 	orr.w	r2, r2, lr
 802c5e4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802c5e8:	fb03 0302 	mla	r3, r3, r2, r0
 802c5ec:	0d5a      	lsrs	r2, r3, #21
 802c5ee:	095b      	lsrs	r3, r3, #5
 802c5f0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802c5f4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802c5f8:	4313      	orrs	r3, r2
 802c5fa:	f8a9 3000 	strh.w	r3, [r9]
 802c5fe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802c600:	f109 0902 	add.w	r9, r9, #2
 802c604:	441c      	add	r4, r3
 802c606:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802c608:	f10a 3aff 	add.w	sl, sl, #4294967295
 802c60c:	441e      	add	r6, r3
 802c60e:	e784      	b.n	802c51a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802c610:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802c612:	3d01      	subs	r5, #1
 802c614:	441c      	add	r4, r3
 802c616:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802c618:	3702      	adds	r7, #2
 802c61a:	441e      	add	r6, r3
 802c61c:	e761      	b.n	802c4e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802c61e:	d01d      	beq.n	802c65c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802c620:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802c622:	1e6b      	subs	r3, r5, #1
 802c624:	fb00 4003 	mla	r0, r0, r3, r4
 802c628:	1400      	asrs	r0, r0, #16
 802c62a:	f53f af74 	bmi.w	802c516 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802c62e:	3901      	subs	r1, #1
 802c630:	4288      	cmp	r0, r1
 802c632:	f6bf af70 	bge.w	802c516 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802c636:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802c638:	fb01 6303 	mla	r3, r1, r3, r6
 802c63c:	141b      	asrs	r3, r3, #16
 802c63e:	f53f af6a 	bmi.w	802c516 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802c642:	3a01      	subs	r2, #1
 802c644:	4293      	cmp	r3, r2
 802c646:	f6bf af66 	bge.w	802c516 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802c64a:	46a9      	mov	r9, r5
 802c64c:	46ba      	mov	sl, r7
 802c64e:	f1b9 0f00 	cmp.w	r9, #0
 802c652:	dc5a      	bgt.n	802c70a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 802c654:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802c658:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802c65c:	9b07      	ldr	r3, [sp, #28]
 802c65e:	2b00      	cmp	r3, #0
 802c660:	f340 80b8 	ble.w	802c7d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802c664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802c668:	ee30 0a04 	vadd.f32	s0, s0, s8
 802c66c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802c670:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c674:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802c678:	eef0 6a62 	vmov.f32	s13, s5
 802c67c:	ee31 1a05 	vadd.f32	s2, s2, s10
 802c680:	ee77 2a62 	vsub.f32	s5, s14, s5
 802c684:	ee61 7a27 	vmul.f32	s15, s2, s15
 802c688:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c68c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802c690:	ee16 4a90 	vmov	r4, s13
 802c694:	eef0 6a43 	vmov.f32	s13, s6
 802c698:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802c69c:	ee12 2a90 	vmov	r2, s5
 802c6a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802c6a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802c6a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c6aa:	fb92 f3f3 	sdiv	r3, r2, r3
 802c6ae:	ee13 2a10 	vmov	r2, s6
 802c6b2:	931b      	str	r3, [sp, #108]	@ 0x6c
 802c6b4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802c6b6:	ee16 6a90 	vmov	r6, s13
 802c6ba:	fb92 f3f3 	sdiv	r3, r2, r3
 802c6be:	931c      	str	r3, [sp, #112]	@ 0x70
 802c6c0:	9b07      	ldr	r3, [sp, #28]
 802c6c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802c6c4:	3b01      	subs	r3, #1
 802c6c6:	9307      	str	r3, [sp, #28]
 802c6c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802c6ca:	bf0c      	ite	eq
 802c6cc:	4615      	moveq	r5, r2
 802c6ce:	461d      	movne	r5, r3
 802c6d0:	eeb0 3a67 	vmov.f32	s6, s15
 802c6d4:	eef0 2a47 	vmov.f32	s5, s14
 802c6d8:	e6f4      	b.n	802c4c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802c6da:	f111 0b01 	adds.w	fp, r1, #1
 802c6de:	d48e      	bmi.n	802c5fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802c6e0:	45de      	cmp	lr, fp
 802c6e2:	db8c      	blt.n	802c5fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802c6e4:	f110 0b01 	adds.w	fp, r0, #1
 802c6e8:	d489      	bmi.n	802c5fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802c6ea:	455b      	cmp	r3, fp
 802c6ec:	db87      	blt.n	802c5fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802c6ee:	b21b      	sxth	r3, r3
 802c6f0:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802c6f4:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802c6f8:	9300      	str	r3, [sp, #0]
 802c6fa:	4642      	mov	r2, r8
 802c6fc:	fa0f f38e 	sxth.w	r3, lr
 802c700:	4649      	mov	r1, r9
 802c702:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802c704:	f7ff fe4d 	bl	802c3a2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802c708:	e779      	b.n	802c5fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802c70a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802c70c:	1420      	asrs	r0, r4, #16
 802c70e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802c712:	1431      	asrs	r1, r6, #16
 802c714:	fb03 0101 	mla	r1, r3, r1, r0
 802c718:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802c71c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802c720:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802c724:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802c728:	8841      	ldrh	r1, [r0, #2]
 802c72a:	f1be 0f00 	cmp.w	lr, #0
 802c72e:	d00b      	beq.n	802c748 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802c730:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802c734:	3b01      	subs	r3, #1
 802c736:	005b      	lsls	r3, r3, #1
 802c738:	3302      	adds	r3, #2
 802c73a:	eb00 0b03 	add.w	fp, r0, r3
 802c73e:	5ac3      	ldrh	r3, [r0, r3]
 802c740:	930a      	str	r3, [sp, #40]	@ 0x28
 802c742:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802c746:	930b      	str	r3, [sp, #44]	@ 0x2c
 802c748:	fb12 f30e 	smulbb	r3, r2, lr
 802c74c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802c750:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802c754:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802c758:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802c75c:	10db      	asrs	r3, r3, #3
 802c75e:	ea40 000c 	orr.w	r0, r0, ip
 802c762:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802c766:	f1ce 0c10 	rsb	ip, lr, #16
 802c76a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802c76e:	ebac 0c02 	sub.w	ip, ip, r2
 802c772:	ea4b 0101 	orr.w	r1, fp, r1
 802c776:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802c77a:	4351      	muls	r1, r2
 802c77c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802c780:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802c782:	fb0c 1c00 	mla	ip, ip, r0, r1
 802c786:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802c78a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802c78e:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 802c792:	ea4b 0000 	orr.w	r0, fp, r0
 802c796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802c798:	fb03 c000 	mla	r0, r3, r0, ip
 802c79c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802c79e:	0412      	lsls	r2, r2, #16
 802c7a0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802c7a4:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 802c7a8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802c7ac:	ea42 0b0b 	orr.w	fp, r2, fp
 802c7b0:	fb03 000b 	mla	r0, r3, fp, r0
 802c7b4:	0d43      	lsrs	r3, r0, #21
 802c7b6:	0940      	lsrs	r0, r0, #5
 802c7b8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802c7bc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802c7c0:	4318      	orrs	r0, r3
 802c7c2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802c7c4:	f82a 0b02 	strh.w	r0, [sl], #2
 802c7c8:	441c      	add	r4, r3
 802c7ca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802c7cc:	f109 39ff 	add.w	r9, r9, #4294967295
 802c7d0:	441e      	add	r6, r3
 802c7d2:	e73c      	b.n	802c64e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802c7d4:	b00f      	add	sp, #60	@ 0x3c
 802c7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802c7da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802c7da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c7de:	b085      	sub	sp, #20
 802c7e0:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 802c7e4:	9102      	str	r1, [sp, #8]
 802c7e6:	fb04 7103 	mla	r1, r4, r3, r7
 802c7ea:	2c00      	cmp	r4, #0
 802c7ec:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 802c7f0:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802c7f4:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802c7f8:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802c7fc:	f2c0 811b 	blt.w	802ca36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802c800:	45a6      	cmp	lr, r4
 802c802:	f340 8118 	ble.w	802ca36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802c806:	2f00      	cmp	r7, #0
 802c808:	f2c0 8113 	blt.w	802ca32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802c80c:	42bb      	cmp	r3, r7
 802c80e:	f340 8110 	ble.w	802ca32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802c812:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802c816:	1c7a      	adds	r2, r7, #1
 802c818:	f100 8110 	bmi.w	802ca3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802c81c:	4293      	cmp	r3, r2
 802c81e:	f340 810d 	ble.w	802ca3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802c822:	2e00      	cmp	r6, #0
 802c824:	f000 810c 	beq.w	802ca40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802c828:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802c82c:	3401      	adds	r4, #1
 802c82e:	f100 810b 	bmi.w	802ca48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802c832:	45a6      	cmp	lr, r4
 802c834:	f340 8108 	ble.w	802ca48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802c838:	2800      	cmp	r0, #0
 802c83a:	f000 8108 	beq.w	802ca4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802c83e:	2f00      	cmp	r7, #0
 802c840:	f2c0 8100 	blt.w	802ca44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802c844:	42bb      	cmp	r3, r7
 802c846:	f340 80fd 	ble.w	802ca44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802c84a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802c84e:	3701      	adds	r7, #1
 802c850:	f100 8100 	bmi.w	802ca54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802c854:	42bb      	cmp	r3, r7
 802c856:	f340 80fd 	ble.w	802ca54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802c85a:	2e00      	cmp	r6, #0
 802c85c:	f000 80fc 	beq.w	802ca58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802c860:	3301      	adds	r3, #1
 802c862:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802c866:	b2b6      	uxth	r6, r6
 802c868:	b280      	uxth	r0, r0
 802c86a:	fb00 fe06 	mul.w	lr, r0, r6
 802c86e:	0136      	lsls	r6, r6, #4
 802c870:	eba6 070e 	sub.w	r7, r6, lr
 802c874:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802c878:	b2bf      	uxth	r7, r7
 802c87a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802c87e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802c882:	fb0a f607 	mul.w	r6, sl, r7
 802c886:	b280      	uxth	r0, r0
 802c888:	1a1b      	subs	r3, r3, r0
 802c88a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802c88e:	b29b      	uxth	r3, r3
 802c890:	fb0b 6603 	mla	r6, fp, r3, r6
 802c894:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802c898:	fb00 6609 	mla	r6, r0, r9, r6
 802c89c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802c8a0:	fb0e 6608 	mla	r6, lr, r8, r6
 802c8a4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802c8a8:	9600      	str	r6, [sp, #0]
 802c8aa:	2e00      	cmp	r6, #0
 802c8ac:	f000 80be 	beq.w	802ca2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802c8b0:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802c8b4:	fb0b fc0c 	mul.w	ip, fp, ip
 802c8b8:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802c8bc:	fb0b f505 	mul.w	r5, fp, r5
 802c8c0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802c8c4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802c8c8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802c8cc:	44dc      	add	ip, fp
 802c8ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802c8d2:	9501      	str	r5, [sp, #4]
 802c8d4:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802c8d8:	9503      	str	r5, [sp, #12]
 802c8da:	9d01      	ldr	r5, [sp, #4]
 802c8dc:	9e02      	ldr	r6, [sp, #8]
 802c8de:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802c8e2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802c8e6:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802c8ea:	fb0a fc0c 	mul.w	ip, sl, ip
 802c8ee:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802c8f2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802c8f6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802c8fa:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802c8fe:	4465      	add	r5, ip
 802c900:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802c904:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802c908:	fb09 fc0c 	mul.w	ip, r9, ip
 802c90c:	fb09 f904 	mul.w	r9, r9, r4
 802c910:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802c914:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802c918:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 802c91c:	fb08 f404 	mul.w	r4, r8, r4
 802c920:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802c924:	fb08 f802 	mul.w	r8, r8, r2
 802c928:	0a2d      	lsrs	r5, r5, #8
 802c92a:	0a22      	lsrs	r2, r4, #8
 802c92c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802c930:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802c934:	437d      	muls	r5, r7
 802c936:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802c93a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802c93e:	4414      	add	r4, r2
 802c940:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802c944:	fb0a fa01 	mul.w	sl, sl, r1
 802c948:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802c94c:	9a03      	ldr	r2, [sp, #12]
 802c94e:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802c952:	fb02 5503 	mla	r5, r2, r3, r5
 802c956:	0a24      	lsrs	r4, r4, #8
 802c958:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802c95c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802c960:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802c964:	fb04 540e 	mla	r4, r4, lr, r5
 802c968:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802c96c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802c970:	4461      	add	r1, ip
 802c972:	0a09      	lsrs	r1, r1, #8
 802c974:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802c978:	fb01 4100 	mla	r1, r1, r0, r4
 802c97c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802c980:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802c984:	fb07 f70a 	mul.w	r7, r7, sl
 802c988:	0a09      	lsrs	r1, r1, #8
 802c98a:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802c98e:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802c992:	fb03 7101 	mla	r1, r3, r1, r7
 802c996:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802c99a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802c99e:	fb0e 1e08 	mla	lr, lr, r8, r1
 802c9a2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802c9a6:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802c9aa:	fb00 e101 	mla	r1, r0, r1, lr
 802c9ae:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802c9b2:	9a00      	ldr	r2, [sp, #0]
 802c9b4:	b287      	uxth	r7, r0
 802c9b6:	437a      	muls	r2, r7
 802c9b8:	1c53      	adds	r3, r2, #1
 802c9ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802c9be:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802c9c2:	0a09      	lsrs	r1, r1, #8
 802c9c4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802c9c8:	4321      	orrs	r1, r4
 802c9ca:	0c0a      	lsrs	r2, r1, #16
 802c9cc:	8836      	ldrh	r6, [r6, #0]
 802c9ce:	fb12 f207 	smulbb	r2, r2, r7
 802c9d2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802c9d6:	b2c8      	uxtb	r0, r1
 802c9d8:	1235      	asrs	r5, r6, #8
 802c9da:	fb14 f407 	smulbb	r4, r4, r7
 802c9de:	fb10 f007 	smulbb	r0, r0, r7
 802c9e2:	b2db      	uxtb	r3, r3
 802c9e4:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802c9e8:	fb05 2503 	mla	r5, r5, r3, r2
 802c9ec:	10f2      	asrs	r2, r6, #3
 802c9ee:	00f6      	lsls	r6, r6, #3
 802c9f0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802c9f4:	b2f6      	uxtb	r6, r6
 802c9f6:	fb02 4203 	mla	r2, r2, r3, r4
 802c9fa:	fb06 0303 	mla	r3, r6, r3, r0
 802c9fe:	b2ad      	uxth	r5, r5
 802ca00:	b299      	uxth	r1, r3
 802ca02:	b294      	uxth	r4, r2
 802ca04:	1c6b      	adds	r3, r5, #1
 802ca06:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802ca0a:	1c62      	adds	r2, r4, #1
 802ca0c:	1c4b      	adds	r3, r1, #1
 802ca0e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802ca12:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802ca16:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802ca1a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802ca1e:	0952      	lsrs	r2, r2, #5
 802ca20:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802ca24:	432b      	orrs	r3, r5
 802ca26:	4313      	orrs	r3, r2
 802ca28:	9a02      	ldr	r2, [sp, #8]
 802ca2a:	8013      	strh	r3, [r2, #0]
 802ca2c:	b005      	add	sp, #20
 802ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ca32:	2500      	movs	r5, #0
 802ca34:	e6ef      	b.n	802c816 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802ca36:	2100      	movs	r1, #0
 802ca38:	460d      	mov	r5, r1
 802ca3a:	e6f7      	b.n	802c82c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802ca3c:	2100      	movs	r1, #0
 802ca3e:	e6f5      	b.n	802c82c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802ca40:	4631      	mov	r1, r6
 802ca42:	e6f3      	b.n	802c82c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802ca44:	2400      	movs	r4, #0
 802ca46:	e702      	b.n	802c84e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802ca48:	2200      	movs	r2, #0
 802ca4a:	4614      	mov	r4, r2
 802ca4c:	e70b      	b.n	802c866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802ca4e:	4602      	mov	r2, r0
 802ca50:	4604      	mov	r4, r0
 802ca52:	e708      	b.n	802c866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802ca54:	2200      	movs	r2, #0
 802ca56:	e706      	b.n	802c866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802ca58:	4632      	mov	r2, r6
 802ca5a:	e704      	b.n	802c866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802ca5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca60:	b09d      	sub	sp, #116	@ 0x74
 802ca62:	9219      	str	r2, [sp, #100]	@ 0x64
 802ca64:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802ca66:	901b      	str	r0, [sp, #108]	@ 0x6c
 802ca68:	9307      	str	r3, [sp, #28]
 802ca6a:	6850      	ldr	r0, [r2, #4]
 802ca6c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 802ca70:	9117      	str	r1, [sp, #92]	@ 0x5c
 802ca72:	931a      	str	r3, [sp, #104]	@ 0x68
 802ca74:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802ca78:	fb00 1303 	mla	r3, r0, r3, r1
 802ca7c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 802ca80:	6812      	ldr	r2, [r2, #0]
 802ca82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802ca86:	930a      	str	r3, [sp, #40]	@ 0x28
 802ca88:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802ca8a:	681b      	ldr	r3, [r3, #0]
 802ca8c:	9310      	str	r3, [sp, #64]	@ 0x40
 802ca8e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802ca92:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ca94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ca96:	2b00      	cmp	r3, #0
 802ca98:	dc03      	bgt.n	802caa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802ca9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802ca9c:	2b00      	cmp	r3, #0
 802ca9e:	f340 8375 	ble.w	802d18c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802caa2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802caa4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802caa8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802caac:	1e48      	subs	r0, r1, #1
 802caae:	1e57      	subs	r7, r2, #1
 802cab0:	9b07      	ldr	r3, [sp, #28]
 802cab2:	2b00      	cmp	r3, #0
 802cab4:	f340 818e 	ble.w	802cdd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802cab8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802cabc:	ea4f 4326 	mov.w	r3, r6, asr #16
 802cac0:	d406      	bmi.n	802cad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802cac2:	4584      	cmp	ip, r0
 802cac4:	da04      	bge.n	802cad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802cac6:	2b00      	cmp	r3, #0
 802cac8:	db02      	blt.n	802cad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802caca:	42bb      	cmp	r3, r7
 802cacc:	f2c0 8183 	blt.w	802cdd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802cad0:	f11c 0c01 	adds.w	ip, ip, #1
 802cad4:	f100 8173 	bmi.w	802cdbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802cad8:	4561      	cmp	r1, ip
 802cada:	f2c0 8170 	blt.w	802cdbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802cade:	3301      	adds	r3, #1
 802cae0:	f100 816d 	bmi.w	802cdbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802cae4:	429a      	cmp	r2, r3
 802cae6:	f2c0 816a 	blt.w	802cdbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802caea:	9b07      	ldr	r3, [sp, #28]
 802caec:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802caee:	9318      	str	r3, [sp, #96]	@ 0x60
 802caf0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802caf2:	2b00      	cmp	r3, #0
 802caf4:	f340 818c 	ble.w	802ce10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802caf8:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 802cafa:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802cafc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802cb00:	1422      	asrs	r2, r4, #16
 802cb02:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802cb06:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802cb0a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802cb0e:	689b      	ldr	r3, [r3, #8]
 802cb10:	f100 81cd 	bmi.w	802ceae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802cb14:	f103 38ff 	add.w	r8, r3, #4294967295
 802cb18:	4542      	cmp	r2, r8
 802cb1a:	f280 81c8 	bge.w	802ceae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802cb1e:	f1bc 0f00 	cmp.w	ip, #0
 802cb22:	f2c0 81c4 	blt.w	802ceae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802cb26:	f10e 38ff 	add.w	r8, lr, #4294967295
 802cb2a:	45c4      	cmp	ip, r8
 802cb2c:	f280 81bf 	bge.w	802ceae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802cb30:	b21b      	sxth	r3, r3
 802cb32:	fb0c 2203 	mla	r2, ip, r3, r2
 802cb36:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802cb38:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802cb3c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802cb40:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802cb44:	2800      	cmp	r0, #0
 802cb46:	f000 81a9 	beq.w	802ce9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802cb4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802cb4e:	950c      	str	r5, [sp, #48]	@ 0x30
 802cb50:	0e2d      	lsrs	r5, r5, #24
 802cb52:	9513      	str	r5, [sp, #76]	@ 0x4c
 802cb54:	b181      	cbz	r1, 802cb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802cb56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802cb5a:	3b01      	subs	r3, #1
 802cb5c:	009b      	lsls	r3, r3, #2
 802cb5e:	3304      	adds	r3, #4
 802cb60:	eb08 0c03 	add.w	ip, r8, r3
 802cb64:	f858 3003 	ldr.w	r3, [r8, r3]
 802cb68:	9308      	str	r3, [sp, #32]
 802cb6a:	0e1b      	lsrs	r3, r3, #24
 802cb6c:	9311      	str	r3, [sp, #68]	@ 0x44
 802cb6e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802cb72:	930d      	str	r3, [sp, #52]	@ 0x34
 802cb74:	0e1b      	lsrs	r3, r3, #24
 802cb76:	9314      	str	r3, [sp, #80]	@ 0x50
 802cb78:	b280      	uxth	r0, r0
 802cb7a:	b289      	uxth	r1, r1
 802cb7c:	fb00 f901 	mul.w	r9, r0, r1
 802cb80:	0100      	lsls	r0, r0, #4
 802cb82:	eba0 0809 	sub.w	r8, r0, r9
 802cb86:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802cb8a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802cb8c:	fa1f f888 	uxth.w	r8, r8
 802cb90:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802cb94:	fb08 f000 	mul.w	r0, r8, r0
 802cb98:	b289      	uxth	r1, r1
 802cb9a:	1a5b      	subs	r3, r3, r1
 802cb9c:	b29b      	uxth	r3, r3
 802cb9e:	fb03 000e 	mla	r0, r3, lr, r0
 802cba2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802cba4:	fb01 0005 	mla	r0, r1, r5, r0
 802cba8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802cbaa:	fb09 0005 	mla	r0, r9, r5, r0
 802cbae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802cbb2:	2800      	cmp	r0, #0
 802cbb4:	f000 80fa 	beq.w	802cdac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802cbb8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802cbbc:	d01b      	beq.n	802cbf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802cbbe:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802cbc2:	fb0e fa0a 	mul.w	sl, lr, sl
 802cbc6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802cbca:	fb0e fe02 	mul.w	lr, lr, r2
 802cbce:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802cbd2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802cbd6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802cbda:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802cbde:	4452      	add	r2, sl
 802cbe0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802cbe4:	0a12      	lsrs	r2, r2, #8
 802cbe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802cbea:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802cbee:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802cbf2:	ea42 020c 	orr.w	r2, r2, ip
 802cbf6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802cbf8:	2dff      	cmp	r5, #255	@ 0xff
 802cbfa:	d021      	beq.n	802cc40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802cbfc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802cbfe:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802cc02:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802cc04:	fb05 fb0b 	mul.w	fp, r5, fp
 802cc08:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802cc0a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802cc0e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802cc12:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802cc14:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802cc18:	fb05 fa0a 	mul.w	sl, r5, sl
 802cc1c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802cc20:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802cc24:	44de      	add	lr, fp
 802cc26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802cc2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802cc2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802cc32:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802cc36:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802cc3a:	ea4e 050a 	orr.w	r5, lr, sl
 802cc3e:	950c      	str	r5, [sp, #48]	@ 0x30
 802cc40:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802cc42:	2dff      	cmp	r5, #255	@ 0xff
 802cc44:	d021      	beq.n	802cc8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802cc46:	9d08      	ldr	r5, [sp, #32]
 802cc48:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802cc4c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802cc4e:	fb05 fb0b 	mul.w	fp, r5, fp
 802cc52:	9d08      	ldr	r5, [sp, #32]
 802cc54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802cc58:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802cc5c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802cc5e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802cc62:	fb05 fa0a 	mul.w	sl, r5, sl
 802cc66:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802cc6a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802cc6e:	44de      	add	lr, fp
 802cc70:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802cc74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802cc78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802cc7c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802cc80:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802cc84:	ea4e 050a 	orr.w	r5, lr, sl
 802cc88:	9508      	str	r5, [sp, #32]
 802cc8a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802cc8c:	2dff      	cmp	r5, #255	@ 0xff
 802cc8e:	d021      	beq.n	802ccd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802cc90:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802cc92:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802cc96:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802cc98:	fb05 fb0b 	mul.w	fp, r5, fp
 802cc9c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802cc9e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802cca2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802cca6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802cca8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ccac:	fb05 fa0a 	mul.w	sl, r5, sl
 802ccb0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802ccb4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802ccb8:	44de      	add	lr, fp
 802ccba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802ccbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802ccc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ccc6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802ccca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802ccce:	ea4e 050a 	orr.w	r5, lr, sl
 802ccd2:	950d      	str	r5, [sp, #52]	@ 0x34
 802ccd4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802ccd6:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802ccda:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802ccde:	fb08 fc0c 	mul.w	ip, r8, ip
 802cce2:	fb03 cc0e 	mla	ip, r3, lr, ip
 802cce6:	9d08      	ldr	r5, [sp, #32]
 802cce8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802ccec:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802ccf0:	fb01 cc0e 	mla	ip, r1, lr, ip
 802ccf4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802ccf6:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802ccfa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802ccfc:	fb09 cc0e 	mla	ip, r9, lr, ip
 802cd00:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802cd04:	fb08 f80e 	mul.w	r8, r8, lr
 802cd08:	fb03 8202 	mla	r2, r3, r2, r8
 802cd0c:	9b08      	ldr	r3, [sp, #32]
 802cd0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802cd12:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802cd16:	fb01 220a 	mla	r2, r1, sl, r2
 802cd1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802cd1c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802cd20:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 802cd24:	fb09 2901 	mla	r9, r9, r1, r2
 802cd28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802cd2a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802cd2e:	4342      	muls	r2, r0
 802cd30:	1c50      	adds	r0, r2, #1
 802cd32:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802cd36:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802cd3a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802cd3e:	ea4c 0c09 	orr.w	ip, ip, r9
 802cd42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802cd44:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802cd48:	883b      	ldrh	r3, [r7, #0]
 802cd4a:	fb12 f205 	smulbb	r2, r2, r5
 802cd4e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802cd52:	fa5f fc8c 	uxtb.w	ip, ip
 802cd56:	1219      	asrs	r1, r3, #8
 802cd58:	fb1c fc05 	smulbb	ip, ip, r5
 802cd5c:	b2c0      	uxtb	r0, r0
 802cd5e:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802cd62:	fb01 2100 	mla	r1, r1, r0, r2
 802cd66:	10da      	asrs	r2, r3, #3
 802cd68:	00db      	lsls	r3, r3, #3
 802cd6a:	fb1e fe05 	smulbb	lr, lr, r5
 802cd6e:	b2db      	uxtb	r3, r3
 802cd70:	fb03 c300 	mla	r3, r3, r0, ip
 802cd74:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802cd78:	b289      	uxth	r1, r1
 802cd7a:	fb02 e200 	mla	r2, r2, r0, lr
 802cd7e:	fa1f fc83 	uxth.w	ip, r3
 802cd82:	1c4b      	adds	r3, r1, #1
 802cd84:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802cd88:	f10c 0301 	add.w	r3, ip, #1
 802cd8c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802cd90:	b292      	uxth	r2, r2
 802cd92:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802cd96:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802cd9a:	430b      	orrs	r3, r1
 802cd9c:	1c51      	adds	r1, r2, #1
 802cd9e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802cda2:	0952      	lsrs	r2, r2, #5
 802cda4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802cda8:	4313      	orrs	r3, r2
 802cdaa:	803b      	strh	r3, [r7, #0]
 802cdac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802cdae:	3702      	adds	r7, #2
 802cdb0:	441c      	add	r4, r3
 802cdb2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802cdb4:	441e      	add	r6, r3
 802cdb6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802cdb8:	3b01      	subs	r3, #1
 802cdba:	9318      	str	r3, [sp, #96]	@ 0x60
 802cdbc:	e698      	b.n	802caf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802cdbe:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802cdc0:	441c      	add	r4, r3
 802cdc2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802cdc4:	441e      	add	r6, r3
 802cdc6:	9b07      	ldr	r3, [sp, #28]
 802cdc8:	3b01      	subs	r3, #1
 802cdca:	9307      	str	r3, [sp, #28]
 802cdcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802cdce:	3302      	adds	r3, #2
 802cdd0:	930a      	str	r3, [sp, #40]	@ 0x28
 802cdd2:	e66d      	b.n	802cab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802cdd4:	d023      	beq.n	802ce1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802cdd6:	9b07      	ldr	r3, [sp, #28]
 802cdd8:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802cdda:	3b01      	subs	r3, #1
 802cddc:	fb00 4003 	mla	r0, r0, r3, r4
 802cde0:	1400      	asrs	r0, r0, #16
 802cde2:	f53f ae82 	bmi.w	802caea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802cde6:	3901      	subs	r1, #1
 802cde8:	4288      	cmp	r0, r1
 802cdea:	f6bf ae7e 	bge.w	802caea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802cdee:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802cdf0:	fb01 6303 	mla	r3, r1, r3, r6
 802cdf4:	141b      	asrs	r3, r3, #16
 802cdf6:	f53f ae78 	bmi.w	802caea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802cdfa:	3a01      	subs	r2, #1
 802cdfc:	4293      	cmp	r3, r2
 802cdfe:	f6bf ae74 	bge.w	802caea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802ce02:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802ce06:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802ce0a:	f1bb 0f00 	cmp.w	fp, #0
 802ce0e:	dc6c      	bgt.n	802ceea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802ce10:	9b07      	ldr	r3, [sp, #28]
 802ce12:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802ce16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ce18:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802ce1c:	930a      	str	r3, [sp, #40]	@ 0x28
 802ce1e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ce20:	2b00      	cmp	r3, #0
 802ce22:	f340 81b3 	ble.w	802d18c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802ce26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802ce2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802ce2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802ce32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ce36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802ce3a:	eef0 6a62 	vmov.f32	s13, s5
 802ce3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 802ce42:	ee77 2a62 	vsub.f32	s5, s14, s5
 802ce46:	ee61 7a27 	vmul.f32	s15, s2, s15
 802ce4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ce4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802ce52:	ee16 4a90 	vmov	r4, s13
 802ce56:	eef0 6a43 	vmov.f32	s13, s6
 802ce5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802ce5e:	ee12 2a90 	vmov	r2, s5
 802ce62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802ce66:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802ce68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ce6c:	fb92 f3f3 	sdiv	r3, r2, r3
 802ce70:	ee13 2a10 	vmov	r2, s6
 802ce74:	9329      	str	r3, [sp, #164]	@ 0xa4
 802ce76:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802ce78:	ee16 6a90 	vmov	r6, s13
 802ce7c:	fb92 f3f3 	sdiv	r3, r2, r3
 802ce80:	932a      	str	r3, [sp, #168]	@ 0xa8
 802ce82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802ce84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802ce86:	3b01      	subs	r3, #1
 802ce88:	9317      	str	r3, [sp, #92]	@ 0x5c
 802ce8a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802ce8c:	bf08      	it	eq
 802ce8e:	4613      	moveq	r3, r2
 802ce90:	eeb0 3a67 	vmov.f32	s6, s15
 802ce94:	9307      	str	r3, [sp, #28]
 802ce96:	eef0 2a47 	vmov.f32	s5, s14
 802ce9a:	e5fb      	b.n	802ca94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802ce9c:	2900      	cmp	r1, #0
 802ce9e:	f43f ae6b 	beq.w	802cb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802cea2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802cea6:	9308      	str	r3, [sp, #32]
 802cea8:	0e1b      	lsrs	r3, r3, #24
 802ceaa:	9311      	str	r3, [sp, #68]	@ 0x44
 802ceac:	e664      	b.n	802cb78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802ceae:	f112 0801 	adds.w	r8, r2, #1
 802ceb2:	f53f af7b 	bmi.w	802cdac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802ceb6:	4543      	cmp	r3, r8
 802ceb8:	f6ff af78 	blt.w	802cdac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802cebc:	f11c 0801 	adds.w	r8, ip, #1
 802cec0:	f53f af74 	bmi.w	802cdac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802cec4:	45c6      	cmp	lr, r8
 802cec6:	f6ff af71 	blt.w	802cdac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802ceca:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 802cecc:	9201      	str	r2, [sp, #4]
 802cece:	fa0f f28e 	sxth.w	r2, lr
 802ced2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802ced6:	e9cd c002 	strd	ip, r0, [sp, #8]
 802ceda:	9200      	str	r2, [sp, #0]
 802cedc:	b21b      	sxth	r3, r3
 802cede:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802cee0:	4639      	mov	r1, r7
 802cee2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802cee4:	f7ff fc79 	bl	802c7da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802cee8:	e760      	b.n	802cdac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802ceea:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802ceec:	1427      	asrs	r7, r4, #16
 802ceee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802cef2:	1433      	asrs	r3, r6, #16
 802cef4:	fb01 7303 	mla	r3, r1, r3, r7
 802cef8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802cefa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802cefe:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802cf02:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802cf06:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802cf0a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802cf0e:	2a00      	cmp	r2, #0
 802cf10:	f000 8133 	beq.w	802d17a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802cf14:	687d      	ldr	r5, [r7, #4]
 802cf16:	950e      	str	r5, [sp, #56]	@ 0x38
 802cf18:	0e2d      	lsrs	r5, r5, #24
 802cf1a:	9515      	str	r5, [sp, #84]	@ 0x54
 802cf1c:	b178      	cbz	r0, 802cf3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802cf1e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 802cf22:	3901      	subs	r1, #1
 802cf24:	0089      	lsls	r1, r1, #2
 802cf26:	3104      	adds	r1, #4
 802cf28:	eb07 0e01 	add.w	lr, r7, r1
 802cf2c:	5879      	ldr	r1, [r7, r1]
 802cf2e:	9109      	str	r1, [sp, #36]	@ 0x24
 802cf30:	0e09      	lsrs	r1, r1, #24
 802cf32:	9112      	str	r1, [sp, #72]	@ 0x48
 802cf34:	f8de 1004 	ldr.w	r1, [lr, #4]
 802cf38:	910f      	str	r1, [sp, #60]	@ 0x3c
 802cf3a:	0e09      	lsrs	r1, r1, #24
 802cf3c:	9116      	str	r1, [sp, #88]	@ 0x58
 802cf3e:	b292      	uxth	r2, r2
 802cf40:	b280      	uxth	r0, r0
 802cf42:	fb02 f800 	mul.w	r8, r2, r0
 802cf46:	0112      	lsls	r2, r2, #4
 802cf48:	eba2 0e08 	sub.w	lr, r2, r8
 802cf4c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802cf4e:	fa1f fe8e 	uxth.w	lr, lr
 802cf52:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802cf56:	fb0e f101 	mul.w	r1, lr, r1
 802cf5a:	b280      	uxth	r0, r0
 802cf5c:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802cf60:	1a12      	subs	r2, r2, r0
 802cf62:	b292      	uxth	r2, r2
 802cf64:	fb02 110c 	mla	r1, r2, ip, r1
 802cf68:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802cf6a:	fb00 1105 	mla	r1, r0, r5, r1
 802cf6e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802cf70:	fb08 1105 	mla	r1, r8, r5, r1
 802cf74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802cf78:	2900      	cmp	r1, #0
 802cf7a:	f000 80f5 	beq.w	802d168 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802cf7e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802cf82:	d019      	beq.n	802cfb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 802cf84:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802cf88:	fb0c fa0a 	mul.w	sl, ip, sl
 802cf8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802cf90:	fb0c fc03 	mul.w	ip, ip, r3
 802cf94:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802cf98:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802cf9c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802cfa0:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802cfa4:	4453      	add	r3, sl
 802cfa6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802cfaa:	0a1b      	lsrs	r3, r3, #8
 802cfac:	0a3f      	lsrs	r7, r7, #8
 802cfae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802cfb2:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802cfb6:	433b      	orrs	r3, r7
 802cfb8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802cfba:	2dff      	cmp	r5, #255	@ 0xff
 802cfbc:	d020      	beq.n	802d000 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802cfbe:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802cfc0:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802cfc4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802cfc6:	436f      	muls	r7, r5
 802cfc8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802cfca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802cfce:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802cfd2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802cfd4:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802cfd8:	fb05 fa0a 	mul.w	sl, r5, sl
 802cfdc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802cfe0:	44bc      	add	ip, r7
 802cfe2:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802cfe6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802cfea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802cfee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802cff2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802cff6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802cffa:	ea4c 050a 	orr.w	r5, ip, sl
 802cffe:	950e      	str	r5, [sp, #56]	@ 0x38
 802d000:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802d002:	2dff      	cmp	r5, #255	@ 0xff
 802d004:	d020      	beq.n	802d048 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802d006:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802d008:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802d00c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802d00e:	436f      	muls	r7, r5
 802d010:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802d012:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802d016:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802d01a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802d01c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802d020:	fb05 fa0a 	mul.w	sl, r5, sl
 802d024:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d028:	44bc      	add	ip, r7
 802d02a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802d02e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802d032:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d036:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d03a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d03e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d042:	ea4c 050a 	orr.w	r5, ip, sl
 802d046:	9509      	str	r5, [sp, #36]	@ 0x24
 802d048:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802d04a:	2dff      	cmp	r5, #255	@ 0xff
 802d04c:	d020      	beq.n	802d090 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802d04e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802d050:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802d054:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802d056:	436f      	muls	r7, r5
 802d058:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802d05a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802d05e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802d062:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802d064:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802d068:	fb05 fa0a 	mul.w	sl, r5, sl
 802d06c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d070:	44bc      	add	ip, r7
 802d072:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802d076:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802d07a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d07e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d082:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d086:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d08a:	ea4c 050a 	orr.w	r5, ip, sl
 802d08e:	950f      	str	r5, [sp, #60]	@ 0x3c
 802d090:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802d092:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802d096:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802d09a:	fb0e f707 	mul.w	r7, lr, r7
 802d09e:	fb02 770c 	mla	r7, r2, ip, r7
 802d0a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802d0a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802d0a8:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802d0ac:	fb00 770c 	mla	r7, r0, ip, r7
 802d0b0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802d0b2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802d0b6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802d0b8:	fb08 770c 	mla	r7, r8, ip, r7
 802d0bc:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802d0c0:	fb0e fe0c 	mul.w	lr, lr, ip
 802d0c4:	fb02 e303 	mla	r3, r2, r3, lr
 802d0c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d0ca:	0a3f      	lsrs	r7, r7, #8
 802d0cc:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802d0d0:	fb00 330a 	mla	r3, r0, sl, r3
 802d0d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802d0d6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802d0da:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802d0de:	fb08 3c0c 	mla	ip, r8, ip, r3
 802d0e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d0e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d0e8:	4359      	muls	r1, r3
 802d0ea:	1c4b      	adds	r3, r1, #1
 802d0ec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802d0f0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802d0f4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802d0f8:	ea47 070c 	orr.w	r7, r7, ip
 802d0fc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802d0fe:	0c3b      	lsrs	r3, r7, #16
 802d100:	f8b9 0000 	ldrh.w	r0, [r9]
 802d104:	fb13 f305 	smulbb	r3, r3, r5
 802d108:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802d10c:	b2ff      	uxtb	r7, r7
 802d10e:	1202      	asrs	r2, r0, #8
 802d110:	fb17 f705 	smulbb	r7, r7, r5
 802d114:	b2c9      	uxtb	r1, r1
 802d116:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802d11a:	fb02 3201 	mla	r2, r2, r1, r3
 802d11e:	10c3      	asrs	r3, r0, #3
 802d120:	00c0      	lsls	r0, r0, #3
 802d122:	fb1c fc05 	smulbb	ip, ip, r5
 802d126:	b2c0      	uxtb	r0, r0
 802d128:	fb00 7001 	mla	r0, r0, r1, r7
 802d12c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802d130:	fb03 c301 	mla	r3, r3, r1, ip
 802d134:	b292      	uxth	r2, r2
 802d136:	b280      	uxth	r0, r0
 802d138:	1c51      	adds	r1, r2, #1
 802d13a:	f100 0c01 	add.w	ip, r0, #1
 802d13e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802d142:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802d146:	b29b      	uxth	r3, r3
 802d148:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802d14c:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 802d150:	ea4c 0202 	orr.w	r2, ip, r2
 802d154:	f103 0c01 	add.w	ip, r3, #1
 802d158:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802d15c:	095b      	lsrs	r3, r3, #5
 802d15e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802d162:	431a      	orrs	r2, r3
 802d164:	f8a9 2000 	strh.w	r2, [r9]
 802d168:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802d16a:	f109 0902 	add.w	r9, r9, #2
 802d16e:	441c      	add	r4, r3
 802d170:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802d172:	f10b 3bff 	add.w	fp, fp, #4294967295
 802d176:	441e      	add	r6, r3
 802d178:	e647      	b.n	802ce0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802d17a:	2800      	cmp	r0, #0
 802d17c:	f43f aedf 	beq.w	802cf3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802d180:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802d184:	9109      	str	r1, [sp, #36]	@ 0x24
 802d186:	0e09      	lsrs	r1, r1, #24
 802d188:	9112      	str	r1, [sp, #72]	@ 0x48
 802d18a:	e6d8      	b.n	802cf3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802d18c:	b01d      	add	sp, #116	@ 0x74
 802d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802d192 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802d192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d196:	b085      	sub	sp, #20
 802d198:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 802d19c:	9102      	str	r1, [sp, #8]
 802d19e:	fb04 7103 	mla	r1, r4, r3, r7
 802d1a2:	2c00      	cmp	r4, #0
 802d1a4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 802d1a8:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802d1ac:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802d1b0:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802d1b4:	f2c0 810c 	blt.w	802d3d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802d1b8:	45a6      	cmp	lr, r4
 802d1ba:	f340 8109 	ble.w	802d3d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802d1be:	2f00      	cmp	r7, #0
 802d1c0:	f2c0 8104 	blt.w	802d3cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802d1c4:	42bb      	cmp	r3, r7
 802d1c6:	f340 8101 	ble.w	802d3cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802d1ca:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802d1ce:	1c7a      	adds	r2, r7, #1
 802d1d0:	f100 8101 	bmi.w	802d3d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802d1d4:	4293      	cmp	r3, r2
 802d1d6:	f340 80fe 	ble.w	802d3d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802d1da:	2e00      	cmp	r6, #0
 802d1dc:	f000 80fd 	beq.w	802d3da <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802d1e0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802d1e4:	3401      	adds	r4, #1
 802d1e6:	f100 80fc 	bmi.w	802d3e2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802d1ea:	45a6      	cmp	lr, r4
 802d1ec:	f340 80f9 	ble.w	802d3e2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802d1f0:	2800      	cmp	r0, #0
 802d1f2:	f000 80f9 	beq.w	802d3e8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802d1f6:	2f00      	cmp	r7, #0
 802d1f8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802d1fc:	f2c0 80ef 	blt.w	802d3de <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802d200:	42bb      	cmp	r3, r7
 802d202:	f340 80ec 	ble.w	802d3de <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802d206:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802d20a:	3701      	adds	r7, #1
 802d20c:	f100 80ef 	bmi.w	802d3ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802d210:	42bb      	cmp	r3, r7
 802d212:	f340 80ec 	ble.w	802d3ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802d216:	2e00      	cmp	r6, #0
 802d218:	f000 80eb 	beq.w	802d3f2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802d21c:	6852      	ldr	r2, [r2, #4]
 802d21e:	b2b6      	uxth	r6, r6
 802d220:	b280      	uxth	r0, r0
 802d222:	fb00 fe06 	mul.w	lr, r0, r6
 802d226:	0136      	lsls	r6, r6, #4
 802d228:	eba6 070e 	sub.w	r7, r6, lr
 802d22c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802d230:	b2bf      	uxth	r7, r7
 802d232:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802d236:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802d23a:	fb07 f60a 	mul.w	r6, r7, sl
 802d23e:	b280      	uxth	r0, r0
 802d240:	1a1b      	subs	r3, r3, r0
 802d242:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802d246:	b29b      	uxth	r3, r3
 802d248:	fb0b 6603 	mla	r6, fp, r3, r6
 802d24c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802d250:	fb00 6609 	mla	r6, r0, r9, r6
 802d254:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802d258:	fb0e 6608 	mla	r6, lr, r8, r6
 802d25c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802d260:	9600      	str	r6, [sp, #0]
 802d262:	2e00      	cmp	r6, #0
 802d264:	f000 80af 	beq.w	802d3c6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802d268:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802d26c:	fb0b fc0c 	mul.w	ip, fp, ip
 802d270:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802d274:	fb0b f505 	mul.w	r5, fp, r5
 802d278:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802d27c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802d280:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802d284:	44dc      	add	ip, fp
 802d286:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d28a:	9501      	str	r5, [sp, #4]
 802d28c:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802d290:	9503      	str	r5, [sp, #12]
 802d292:	9d01      	ldr	r5, [sp, #4]
 802d294:	9e02      	ldr	r6, [sp, #8]
 802d296:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802d29a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802d29e:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802d2a2:	fb0a fc0c 	mul.w	ip, sl, ip
 802d2a6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802d2aa:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802d2ae:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802d2b2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802d2b6:	4465      	add	r5, ip
 802d2b8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802d2bc:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802d2c0:	fb09 fc0c 	mul.w	ip, r9, ip
 802d2c4:	fb09 f904 	mul.w	r9, r9, r4
 802d2c8:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802d2cc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802d2d0:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 802d2d4:	fb08 f404 	mul.w	r4, r8, r4
 802d2d8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802d2dc:	fb08 f802 	mul.w	r8, r8, r2
 802d2e0:	0a2d      	lsrs	r5, r5, #8
 802d2e2:	0a22      	lsrs	r2, r4, #8
 802d2e4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802d2e8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802d2ec:	437d      	muls	r5, r7
 802d2ee:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802d2f2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802d2f6:	4414      	add	r4, r2
 802d2f8:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802d2fc:	fb0a fa01 	mul.w	sl, sl, r1
 802d300:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802d304:	9a03      	ldr	r2, [sp, #12]
 802d306:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802d30a:	fb02 5503 	mla	r5, r2, r3, r5
 802d30e:	0a24      	lsrs	r4, r4, #8
 802d310:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802d314:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802d318:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802d31c:	fb04 540e 	mla	r4, r4, lr, r5
 802d320:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802d324:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802d328:	4461      	add	r1, ip
 802d32a:	0a09      	lsrs	r1, r1, #8
 802d32c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802d330:	fb01 4100 	mla	r1, r1, r0, r4
 802d334:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d338:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d33c:	fb07 f70a 	mul.w	r7, r7, sl
 802d340:	0a09      	lsrs	r1, r1, #8
 802d342:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802d346:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802d34a:	fb03 7101 	mla	r1, r3, r1, r7
 802d34e:	9b00      	ldr	r3, [sp, #0]
 802d350:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802d354:	43da      	mvns	r2, r3
 802d356:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802d35a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802d35e:	8836      	ldrh	r6, [r6, #0]
 802d360:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802d364:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802d368:	fb00 e101 	mla	r1, r0, r1, lr
 802d36c:	1233      	asrs	r3, r6, #8
 802d36e:	b2d2      	uxtb	r2, r2
 802d370:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802d374:	4353      	muls	r3, r2
 802d376:	10f0      	asrs	r0, r6, #3
 802d378:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802d37c:	4350      	muls	r0, r2
 802d37e:	0a09      	lsrs	r1, r1, #8
 802d380:	00f6      	lsls	r6, r6, #3
 802d382:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802d386:	b2f6      	uxtb	r6, r6
 802d388:	4321      	orrs	r1, r4
 802d38a:	4356      	muls	r6, r2
 802d38c:	1c5a      	adds	r2, r3, #1
 802d38e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802d392:	0c0b      	lsrs	r3, r1, #16
 802d394:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802d398:	1c42      	adds	r2, r0, #1
 802d39a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802d39e:	0a0a      	lsrs	r2, r1, #8
 802d3a0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802d3a4:	021b      	lsls	r3, r3, #8
 802d3a6:	00d2      	lsls	r2, r2, #3
 802d3a8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802d3ac:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802d3b0:	4313      	orrs	r3, r2
 802d3b2:	1c72      	adds	r2, r6, #1
 802d3b4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802d3b8:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802d3bc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802d3c0:	4319      	orrs	r1, r3
 802d3c2:	9b02      	ldr	r3, [sp, #8]
 802d3c4:	8019      	strh	r1, [r3, #0]
 802d3c6:	b005      	add	sp, #20
 802d3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d3cc:	2500      	movs	r5, #0
 802d3ce:	e6fe      	b.n	802d1ce <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802d3d0:	2100      	movs	r1, #0
 802d3d2:	460d      	mov	r5, r1
 802d3d4:	e706      	b.n	802d1e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802d3d6:	2100      	movs	r1, #0
 802d3d8:	e704      	b.n	802d1e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802d3da:	4631      	mov	r1, r6
 802d3dc:	e702      	b.n	802d1e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802d3de:	2400      	movs	r4, #0
 802d3e0:	e713      	b.n	802d20a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802d3e2:	2200      	movs	r2, #0
 802d3e4:	4614      	mov	r4, r2
 802d3e6:	e71a      	b.n	802d21e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802d3e8:	4602      	mov	r2, r0
 802d3ea:	4604      	mov	r4, r0
 802d3ec:	e717      	b.n	802d21e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802d3ee:	2200      	movs	r2, #0
 802d3f0:	e715      	b.n	802d21e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802d3f2:	4632      	mov	r2, r6
 802d3f4:	e713      	b.n	802d21e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802d3f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d3fc:	b09b      	sub	sp, #108	@ 0x6c
 802d3fe:	9218      	str	r2, [sp, #96]	@ 0x60
 802d400:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802d402:	9019      	str	r0, [sp, #100]	@ 0x64
 802d404:	6850      	ldr	r0, [r2, #4]
 802d406:	9116      	str	r1, [sp, #88]	@ 0x58
 802d408:	9307      	str	r3, [sp, #28]
 802d40a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802d40e:	fb00 1303 	mla	r3, r0, r3, r1
 802d412:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802d416:	6812      	ldr	r2, [r2, #0]
 802d418:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802d41c:	930a      	str	r3, [sp, #40]	@ 0x28
 802d41e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802d420:	681b      	ldr	r3, [r3, #0]
 802d422:	930f      	str	r3, [sp, #60]	@ 0x3c
 802d424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802d426:	2b00      	cmp	r3, #0
 802d428:	dc03      	bgt.n	802d432 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802d42a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802d42c:	2b00      	cmp	r3, #0
 802d42e:	f340 8387 	ble.w	802db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802d432:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802d434:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802d438:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802d43c:	1e48      	subs	r0, r1, #1
 802d43e:	1e57      	subs	r7, r2, #1
 802d440:	9b07      	ldr	r3, [sp, #28]
 802d442:	2b00      	cmp	r3, #0
 802d444:	f340 8166 	ble.w	802d714 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802d448:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802d44c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802d450:	d406      	bmi.n	802d460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802d452:	4584      	cmp	ip, r0
 802d454:	da04      	bge.n	802d460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802d456:	2b00      	cmp	r3, #0
 802d458:	db02      	blt.n	802d460 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802d45a:	42bb      	cmp	r3, r7
 802d45c:	f2c0 815b 	blt.w	802d716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802d460:	f11c 0c01 	adds.w	ip, ip, #1
 802d464:	f100 814b 	bmi.w	802d6fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802d468:	4561      	cmp	r1, ip
 802d46a:	f2c0 8148 	blt.w	802d6fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802d46e:	3301      	adds	r3, #1
 802d470:	f100 8145 	bmi.w	802d6fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802d474:	429a      	cmp	r2, r3
 802d476:	f2c0 8142 	blt.w	802d6fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802d47a:	9b07      	ldr	r3, [sp, #28]
 802d47c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802d47e:	9317      	str	r3, [sp, #92]	@ 0x5c
 802d480:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d482:	2b00      	cmp	r3, #0
 802d484:	f340 8165 	ble.w	802d752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802d488:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802d48a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802d48c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802d490:	1422      	asrs	r2, r4, #16
 802d492:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802d496:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802d49a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802d49e:	689b      	ldr	r3, [r3, #8]
 802d4a0:	f100 81d5 	bmi.w	802d84e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802d4a4:	f103 38ff 	add.w	r8, r3, #4294967295
 802d4a8:	4542      	cmp	r2, r8
 802d4aa:	f280 81d0 	bge.w	802d84e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802d4ae:	f1bc 0f00 	cmp.w	ip, #0
 802d4b2:	f2c0 81cc 	blt.w	802d84e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802d4b6:	f10e 38ff 	add.w	r8, lr, #4294967295
 802d4ba:	45c4      	cmp	ip, r8
 802d4bc:	f280 81c7 	bge.w	802d84e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802d4c0:	b21b      	sxth	r3, r3
 802d4c2:	fb0c 2203 	mla	r2, ip, r3, r2
 802d4c6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802d4c8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802d4cc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802d4d0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802d4d4:	2900      	cmp	r1, #0
 802d4d6:	f000 8182 	beq.w	802d7de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802d4da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802d4de:	950b      	str	r5, [sp, #44]	@ 0x2c
 802d4e0:	0e2d      	lsrs	r5, r5, #24
 802d4e2:	9512      	str	r5, [sp, #72]	@ 0x48
 802d4e4:	b180      	cbz	r0, 802d508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802d4e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802d4ea:	3b01      	subs	r3, #1
 802d4ec:	009b      	lsls	r3, r3, #2
 802d4ee:	3304      	adds	r3, #4
 802d4f0:	eb08 0c03 	add.w	ip, r8, r3
 802d4f4:	f858 3003 	ldr.w	r3, [r8, r3]
 802d4f8:	9308      	str	r3, [sp, #32]
 802d4fa:	0e1b      	lsrs	r3, r3, #24
 802d4fc:	9310      	str	r3, [sp, #64]	@ 0x40
 802d4fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802d502:	930c      	str	r3, [sp, #48]	@ 0x30
 802d504:	0e1b      	lsrs	r3, r3, #24
 802d506:	9313      	str	r3, [sp, #76]	@ 0x4c
 802d508:	b289      	uxth	r1, r1
 802d50a:	b280      	uxth	r0, r0
 802d50c:	fb01 f900 	mul.w	r9, r1, r0
 802d510:	0109      	lsls	r1, r1, #4
 802d512:	eba1 0809 	sub.w	r8, r1, r9
 802d516:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802d518:	fa1f f888 	uxth.w	r8, r8
 802d51c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802d520:	fb08 f303 	mul.w	r3, r8, r3
 802d524:	b280      	uxth	r0, r0
 802d526:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802d52a:	1a09      	subs	r1, r1, r0
 802d52c:	b289      	uxth	r1, r1
 802d52e:	fb01 330e 	mla	r3, r1, lr, r3
 802d532:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802d534:	fb00 3305 	mla	r3, r0, r5, r3
 802d538:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802d53a:	fb09 3305 	mla	r3, r9, r5, r3
 802d53e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802d542:	2b00      	cmp	r3, #0
 802d544:	f000 80d2 	beq.w	802d6ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802d548:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802d54c:	d01b      	beq.n	802d586 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802d54e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802d552:	fb0e fa0a 	mul.w	sl, lr, sl
 802d556:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802d55a:	fb0e fe02 	mul.w	lr, lr, r2
 802d55e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802d562:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802d566:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802d56a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802d56e:	4452      	add	r2, sl
 802d570:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802d574:	0a12      	lsrs	r2, r2, #8
 802d576:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d57a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802d57e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802d582:	ea42 020c 	orr.w	r2, r2, ip
 802d586:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802d588:	2dff      	cmp	r5, #255	@ 0xff
 802d58a:	d021      	beq.n	802d5d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802d58c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802d58e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802d592:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802d594:	fb05 fb0b 	mul.w	fp, r5, fp
 802d598:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802d59a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802d59e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802d5a2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802d5a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802d5a8:	fb05 fa0a 	mul.w	sl, r5, sl
 802d5ac:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802d5b0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802d5b4:	44de      	add	lr, fp
 802d5b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802d5ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802d5be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d5c2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802d5c6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d5ca:	ea4e 050a 	orr.w	r5, lr, sl
 802d5ce:	950b      	str	r5, [sp, #44]	@ 0x2c
 802d5d0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802d5d2:	2dff      	cmp	r5, #255	@ 0xff
 802d5d4:	d021      	beq.n	802d61a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802d5d6:	9d08      	ldr	r5, [sp, #32]
 802d5d8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802d5dc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802d5de:	fb05 fb0b 	mul.w	fp, r5, fp
 802d5e2:	9d08      	ldr	r5, [sp, #32]
 802d5e4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802d5e8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802d5ea:	fb05 fa0e 	mul.w	sl, r5, lr
 802d5ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802d5f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802d5f6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802d5fa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802d5fe:	44de      	add	lr, fp
 802d600:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802d604:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802d608:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d60c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802d610:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d614:	ea4e 050a 	orr.w	r5, lr, sl
 802d618:	9508      	str	r5, [sp, #32]
 802d61a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802d61c:	2dff      	cmp	r5, #255	@ 0xff
 802d61e:	d021      	beq.n	802d664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802d620:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802d622:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802d626:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802d628:	fb05 fb0b 	mul.w	fp, r5, fp
 802d62c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802d62e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802d632:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802d636:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802d638:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802d63c:	fb05 fa0a 	mul.w	sl, r5, sl
 802d640:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802d644:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802d648:	44de      	add	lr, fp
 802d64a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802d64e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802d652:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d656:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802d65a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d65e:	ea4e 050a 	orr.w	r5, lr, sl
 802d662:	950c      	str	r5, [sp, #48]	@ 0x30
 802d664:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802d666:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802d66a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802d66e:	fb08 fc0c 	mul.w	ip, r8, ip
 802d672:	fb01 cc0e 	mla	ip, r1, lr, ip
 802d676:	9d08      	ldr	r5, [sp, #32]
 802d678:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802d67c:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802d680:	fb00 cc0e 	mla	ip, r0, lr, ip
 802d684:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802d686:	2bff      	cmp	r3, #255	@ 0xff
 802d688:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802d68c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802d68e:	fb09 cc0e 	mla	ip, r9, lr, ip
 802d692:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802d696:	fb08 f80e 	mul.w	r8, r8, lr
 802d69a:	fb01 8202 	mla	r2, r1, r2, r8
 802d69e:	9908      	ldr	r1, [sp, #32]
 802d6a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d6a4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802d6a8:	fb00 220a 	mla	r2, r0, sl, r2
 802d6ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802d6ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d6b2:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802d6b6:	fb09 2900 	mla	r9, r9, r0, r2
 802d6ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802d6be:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802d6c2:	ea4c 0c09 	orr.w	ip, ip, r9
 802d6c6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802d6ca:	f040 8091 	bne.w	802d7f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802d6ce:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802d6d2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 802d6d6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802d6da:	f022 0207 	bic.w	r2, r2, #7
 802d6de:	431a      	orrs	r2, r3
 802d6e0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802d6e4:	ea4c 0c02 	orr.w	ip, ip, r2
 802d6e8:	f8a7 c000 	strh.w	ip, [r7]
 802d6ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802d6ee:	3702      	adds	r7, #2
 802d6f0:	441c      	add	r4, r3
 802d6f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802d6f4:	441e      	add	r6, r3
 802d6f6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d6f8:	3b01      	subs	r3, #1
 802d6fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 802d6fc:	e6c0      	b.n	802d480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802d6fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802d700:	441c      	add	r4, r3
 802d702:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802d704:	441e      	add	r6, r3
 802d706:	9b07      	ldr	r3, [sp, #28]
 802d708:	3b01      	subs	r3, #1
 802d70a:	9307      	str	r3, [sp, #28]
 802d70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d70e:	3302      	adds	r3, #2
 802d710:	930a      	str	r3, [sp, #40]	@ 0x28
 802d712:	e695      	b.n	802d440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802d714:	d024      	beq.n	802d760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802d716:	9b07      	ldr	r3, [sp, #28]
 802d718:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802d71a:	3b01      	subs	r3, #1
 802d71c:	fb00 4003 	mla	r0, r0, r3, r4
 802d720:	1400      	asrs	r0, r0, #16
 802d722:	f53f aeaa 	bmi.w	802d47a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802d726:	3901      	subs	r1, #1
 802d728:	4288      	cmp	r0, r1
 802d72a:	f6bf aea6 	bge.w	802d47a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802d72e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802d730:	fb01 6303 	mla	r3, r1, r3, r6
 802d734:	141b      	asrs	r3, r3, #16
 802d736:	f53f aea0 	bmi.w	802d47a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802d73a:	3a01      	subs	r2, #1
 802d73c:	4293      	cmp	r3, r2
 802d73e:	f6bf ae9c 	bge.w	802d47a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802d742:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802d746:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802d74a:	f1bb 0f00 	cmp.w	fp, #0
 802d74e:	f300 809a 	bgt.w	802d886 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802d752:	9b07      	ldr	r3, [sp, #28]
 802d754:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802d758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d75a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802d75e:	930a      	str	r3, [sp, #40]	@ 0x28
 802d760:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802d762:	2b00      	cmp	r3, #0
 802d764:	f340 81ec 	ble.w	802db40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802d768:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802d76c:	ee30 0a04 	vadd.f32	s0, s0, s8
 802d770:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802d774:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802d778:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802d77c:	eef0 6a62 	vmov.f32	s13, s5
 802d780:	ee31 1a05 	vadd.f32	s2, s2, s10
 802d784:	ee77 2a62 	vsub.f32	s5, s14, s5
 802d788:	ee61 7a27 	vmul.f32	s15, s2, s15
 802d78c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802d790:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802d794:	ee16 4a90 	vmov	r4, s13
 802d798:	eef0 6a43 	vmov.f32	s13, s6
 802d79c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802d7a0:	ee12 2a90 	vmov	r2, s5
 802d7a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802d7a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802d7aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802d7ae:	fb92 f3f3 	sdiv	r3, r2, r3
 802d7b2:	ee13 2a10 	vmov	r2, s6
 802d7b6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802d7b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802d7ba:	ee16 6a90 	vmov	r6, s13
 802d7be:	fb92 f3f3 	sdiv	r3, r2, r3
 802d7c2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802d7c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802d7c6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802d7c8:	3b01      	subs	r3, #1
 802d7ca:	9316      	str	r3, [sp, #88]	@ 0x58
 802d7cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802d7ce:	bf08      	it	eq
 802d7d0:	4613      	moveq	r3, r2
 802d7d2:	eeb0 3a67 	vmov.f32	s6, s15
 802d7d6:	9307      	str	r3, [sp, #28]
 802d7d8:	eef0 2a47 	vmov.f32	s5, s14
 802d7dc:	e622      	b.n	802d424 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802d7de:	2800      	cmp	r0, #0
 802d7e0:	f43f ae92 	beq.w	802d508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802d7e4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802d7e8:	9308      	str	r3, [sp, #32]
 802d7ea:	0e1b      	lsrs	r3, r3, #24
 802d7ec:	9310      	str	r3, [sp, #64]	@ 0x40
 802d7ee:	e68b      	b.n	802d508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802d7f0:	43db      	mvns	r3, r3
 802d7f2:	8839      	ldrh	r1, [r7, #0]
 802d7f4:	fa5f f883 	uxtb.w	r8, r3
 802d7f8:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802d7fc:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802d800:	fb0e fe08 	mul.w	lr, lr, r8
 802d804:	10c8      	asrs	r0, r1, #3
 802d806:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802d80a:	fb00 f008 	mul.w	r0, r0, r8
 802d80e:	00cb      	lsls	r3, r1, #3
 802d810:	f10e 0101 	add.w	r1, lr, #1
 802d814:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802d818:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802d81c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802d820:	b2db      	uxtb	r3, r3
 802d822:	f100 0e01 	add.w	lr, r0, #1
 802d826:	fb03 f308 	mul.w	r3, r3, r8
 802d82a:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802d82e:	4dc6      	ldr	r5, [pc, #792]	@ (802db48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802d830:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802d834:	b2c9      	uxtb	r1, r1
 802d836:	00d2      	lsls	r2, r2, #3
 802d838:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802d83c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802d840:	430a      	orrs	r2, r1
 802d842:	1c59      	adds	r1, r3, #1
 802d844:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802d848:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802d84c:	e748      	b.n	802d6e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802d84e:	f112 0801 	adds.w	r8, r2, #1
 802d852:	f53f af4b 	bmi.w	802d6ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802d856:	4543      	cmp	r3, r8
 802d858:	f6ff af48 	blt.w	802d6ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802d85c:	f11c 0801 	adds.w	r8, ip, #1
 802d860:	f53f af44 	bmi.w	802d6ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802d864:	45c6      	cmp	lr, r8
 802d866:	f6ff af41 	blt.w	802d6ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802d86a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802d86e:	fa0f f28e 	sxth.w	r2, lr
 802d872:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802d876:	9200      	str	r2, [sp, #0]
 802d878:	b21b      	sxth	r3, r3
 802d87a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802d87c:	4639      	mov	r1, r7
 802d87e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802d880:	f7ff fc87 	bl	802d192 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802d884:	e732      	b.n	802d6ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802d886:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802d888:	1421      	asrs	r1, r4, #16
 802d88a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802d88e:	1433      	asrs	r3, r6, #16
 802d890:	fb07 1303 	mla	r3, r7, r3, r1
 802d894:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802d896:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802d898:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802d89c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802d8a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802d8a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802d8a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802d8ac:	2a00      	cmp	r2, #0
 802d8ae:	f000 8108 	beq.w	802dac2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802d8b2:	684d      	ldr	r5, [r1, #4]
 802d8b4:	950d      	str	r5, [sp, #52]	@ 0x34
 802d8b6:	0e2d      	lsrs	r5, r5, #24
 802d8b8:	9514      	str	r5, [sp, #80]	@ 0x50
 802d8ba:	b178      	cbz	r0, 802d8dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802d8bc:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 802d8c0:	3f01      	subs	r7, #1
 802d8c2:	00bf      	lsls	r7, r7, #2
 802d8c4:	3704      	adds	r7, #4
 802d8c6:	eb01 0e07 	add.w	lr, r1, r7
 802d8ca:	59c9      	ldr	r1, [r1, r7]
 802d8cc:	9109      	str	r1, [sp, #36]	@ 0x24
 802d8ce:	0e09      	lsrs	r1, r1, #24
 802d8d0:	9111      	str	r1, [sp, #68]	@ 0x44
 802d8d2:	f8de 1004 	ldr.w	r1, [lr, #4]
 802d8d6:	910e      	str	r1, [sp, #56]	@ 0x38
 802d8d8:	0e09      	lsrs	r1, r1, #24
 802d8da:	9115      	str	r1, [sp, #84]	@ 0x54
 802d8dc:	b292      	uxth	r2, r2
 802d8de:	b280      	uxth	r0, r0
 802d8e0:	fb02 f900 	mul.w	r9, r2, r0
 802d8e4:	0112      	lsls	r2, r2, #4
 802d8e6:	eba2 0e09 	sub.w	lr, r2, r9
 802d8ea:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802d8ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802d8f0:	fa1f fe8e 	uxth.w	lr, lr
 802d8f4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802d8f8:	fb0e f202 	mul.w	r2, lr, r2
 802d8fc:	b280      	uxth	r0, r0
 802d8fe:	1a09      	subs	r1, r1, r0
 802d900:	b289      	uxth	r1, r1
 802d902:	fb01 220c 	mla	r2, r1, ip, r2
 802d906:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802d908:	fb00 2205 	mla	r2, r0, r5, r2
 802d90c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802d90e:	fb09 2205 	mla	r2, r9, r5, r2
 802d912:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802d916:	2a00      	cmp	r2, #0
 802d918:	f000 80ca 	beq.w	802dab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802d91c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802d920:	d019      	beq.n	802d956 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802d922:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802d926:	fb0c fa0a 	mul.w	sl, ip, sl
 802d92a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802d92e:	fb0c fc03 	mul.w	ip, ip, r3
 802d932:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802d936:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802d93a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802d93e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802d942:	4453      	add	r3, sl
 802d944:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802d948:	0a1b      	lsrs	r3, r3, #8
 802d94a:	0a3f      	lsrs	r7, r7, #8
 802d94c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802d950:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802d954:	433b      	orrs	r3, r7
 802d956:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802d958:	2dff      	cmp	r5, #255	@ 0xff
 802d95a:	d020      	beq.n	802d99e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802d95c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802d95e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802d962:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802d964:	436f      	muls	r7, r5
 802d966:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802d968:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802d96c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802d970:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802d972:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802d976:	fb05 fa0a 	mul.w	sl, r5, sl
 802d97a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d97e:	44bc      	add	ip, r7
 802d980:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802d984:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802d988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d98c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d990:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d994:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d998:	ea4c 050a 	orr.w	r5, ip, sl
 802d99c:	950d      	str	r5, [sp, #52]	@ 0x34
 802d99e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802d9a0:	2dff      	cmp	r5, #255	@ 0xff
 802d9a2:	d020      	beq.n	802d9e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802d9a4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802d9a6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802d9aa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802d9ac:	436f      	muls	r7, r5
 802d9ae:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802d9b0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802d9b4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802d9b6:	fb05 fa0c 	mul.w	sl, r5, ip
 802d9ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802d9be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d9c2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802d9c6:	44bc      	add	ip, r7
 802d9c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802d9cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802d9d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802d9d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802d9d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802d9dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802d9e0:	ea4c 050a 	orr.w	r5, ip, sl
 802d9e4:	9509      	str	r5, [sp, #36]	@ 0x24
 802d9e6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802d9e8:	2dff      	cmp	r5, #255	@ 0xff
 802d9ea:	d020      	beq.n	802da2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802d9ec:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802d9ee:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802d9f2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802d9f4:	436f      	muls	r7, r5
 802d9f6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802d9f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802d9fc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802da00:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802da02:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802da06:	fb05 fa0a 	mul.w	sl, r5, sl
 802da0a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802da0e:	44bc      	add	ip, r7
 802da10:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802da14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802da18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802da1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802da20:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802da24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802da28:	ea4c 050a 	orr.w	r5, ip, sl
 802da2c:	950e      	str	r5, [sp, #56]	@ 0x38
 802da2e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802da30:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802da34:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802da38:	fb0e f707 	mul.w	r7, lr, r7
 802da3c:	fb01 770c 	mla	r7, r1, ip, r7
 802da40:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802da42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802da46:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802da4a:	fb00 770c 	mla	r7, r0, ip, r7
 802da4e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802da50:	2aff      	cmp	r2, #255	@ 0xff
 802da52:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802da56:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802da58:	fb09 770c 	mla	r7, r9, ip, r7
 802da5c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802da60:	fb0e fe0c 	mul.w	lr, lr, ip
 802da64:	fb01 e303 	mla	r3, r1, r3, lr
 802da68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802da6a:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802da6e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802da72:	fb00 330a 	mla	r3, r0, sl, r3
 802da76:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802da78:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802da7c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802da80:	fb09 3c0c 	mla	ip, r9, ip, r3
 802da84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802da88:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802da8c:	ea47 070c 	orr.w	r7, r7, ip
 802da90:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802da94:	d11e      	bne.n	802dad4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802da96:	097a      	lsrs	r2, r7, #5
 802da98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 802da9c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802daa0:	f023 0307 	bic.w	r3, r3, #7
 802daa4:	4313      	orrs	r3, r2
 802daa6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802daaa:	431f      	orrs	r7, r3
 802daac:	f8a8 7000 	strh.w	r7, [r8]
 802dab0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802dab2:	f108 0802 	add.w	r8, r8, #2
 802dab6:	441c      	add	r4, r3
 802dab8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802daba:	f10b 3bff 	add.w	fp, fp, #4294967295
 802dabe:	441e      	add	r6, r3
 802dac0:	e643      	b.n	802d74a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802dac2:	2800      	cmp	r0, #0
 802dac4:	f43f af0a 	beq.w	802d8dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802dac8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802dacc:	9109      	str	r1, [sp, #36]	@ 0x24
 802dace:	0e09      	lsrs	r1, r1, #24
 802dad0:	9111      	str	r1, [sp, #68]	@ 0x44
 802dad2:	e703      	b.n	802d8dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802dad4:	43d2      	mvns	r2, r2
 802dad6:	f8b8 1000 	ldrh.w	r1, [r8]
 802dada:	fa5f fe82 	uxtb.w	lr, r2
 802dade:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802dae2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802dae6:	fb0c fc0e 	mul.w	ip, ip, lr
 802daea:	10c8      	asrs	r0, r1, #3
 802daec:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802daf0:	fb00 f00e 	mul.w	r0, r0, lr
 802daf4:	00ca      	lsls	r2, r1, #3
 802daf6:	f10c 0101 	add.w	r1, ip, #1
 802dafa:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802dafe:	b2d2      	uxtb	r2, r2
 802db00:	0c39      	lsrs	r1, r7, #16
 802db02:	fb02 f20e 	mul.w	r2, r2, lr
 802db06:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802db0a:	490f      	ldr	r1, [pc, #60]	@ (802db48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802db0c:	fa5f fc8c 	uxtb.w	ip, ip
 802db10:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802db14:	1c41      	adds	r1, r0, #1
 802db16:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802db1a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802db1e:	1c51      	adds	r1, r2, #1
 802db20:	00c0      	lsls	r0, r0, #3
 802db22:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802db26:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802db2a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802db2e:	ea4c 0c00 	orr.w	ip, ip, r0
 802db32:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802db36:	ea47 0c0c 	orr.w	ip, r7, ip
 802db3a:	f8a8 c000 	strh.w	ip, [r8]
 802db3e:	e7b7      	b.n	802dab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802db40:	b01b      	add	sp, #108	@ 0x6c
 802db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802db46:	bf00      	nop
 802db48:	fffff800 	.word	0xfffff800

0802db4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802db4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802db50:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802db54:	2d00      	cmp	r5, #0
 802db56:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802db5a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802db5e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802db62:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802db66:	fb05 0e03 	mla	lr, r5, r3, r0
 802db6a:	f2c0 808c 	blt.w	802dc86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802db6e:	45a9      	cmp	r9, r5
 802db70:	f340 8089 	ble.w	802dc86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802db74:	2800      	cmp	r0, #0
 802db76:	f2c0 8084 	blt.w	802dc82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802db7a:	4580      	cmp	r8, r0
 802db7c:	f340 8081 	ble.w	802dc82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802db80:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802db84:	5d16      	ldrb	r6, [r2, r4]
 802db86:	f01e 0f01 	tst.w	lr, #1
 802db8a:	bf0c      	ite	eq
 802db8c:	f006 060f 	andeq.w	r6, r6, #15
 802db90:	1136      	asrne	r6, r6, #4
 802db92:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802db96:	b2f6      	uxtb	r6, r6
 802db98:	1c44      	adds	r4, r0, #1
 802db9a:	d477      	bmi.n	802dc8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802db9c:	45a0      	cmp	r8, r4
 802db9e:	dd75      	ble.n	802dc8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802dba0:	2f00      	cmp	r7, #0
 802dba2:	d075      	beq.n	802dc90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802dba4:	f10e 0a01 	add.w	sl, lr, #1
 802dba8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802dbac:	5d14      	ldrb	r4, [r2, r4]
 802dbae:	f01a 0f01 	tst.w	sl, #1
 802dbb2:	bf0c      	ite	eq
 802dbb4:	f004 040f 	andeq.w	r4, r4, #15
 802dbb8:	1124      	asrne	r4, r4, #4
 802dbba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802dbbe:	b2e4      	uxtb	r4, r4
 802dbc0:	3501      	adds	r5, #1
 802dbc2:	d469      	bmi.n	802dc98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802dbc4:	45a9      	cmp	r9, r5
 802dbc6:	dd67      	ble.n	802dc98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802dbc8:	f1bc 0f00 	cmp.w	ip, #0
 802dbcc:	d067      	beq.n	802dc9e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802dbce:	2800      	cmp	r0, #0
 802dbd0:	db60      	blt.n	802dc94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802dbd2:	4580      	cmp	r8, r0
 802dbd4:	dd5e      	ble.n	802dc94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802dbd6:	eb03 090e 	add.w	r9, r3, lr
 802dbda:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802dbde:	5d55      	ldrb	r5, [r2, r5]
 802dbe0:	f019 0f01 	tst.w	r9, #1
 802dbe4:	bf0c      	ite	eq
 802dbe6:	f005 050f 	andeq.w	r5, r5, #15
 802dbea:	112d      	asrne	r5, r5, #4
 802dbec:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802dbf0:	b2ed      	uxtb	r5, r5
 802dbf2:	3001      	adds	r0, #1
 802dbf4:	d456      	bmi.n	802dca4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802dbf6:	4580      	cmp	r8, r0
 802dbf8:	dd54      	ble.n	802dca4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802dbfa:	2f00      	cmp	r7, #0
 802dbfc:	d054      	beq.n	802dca8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802dbfe:	3301      	adds	r3, #1
 802dc00:	449e      	add	lr, r3
 802dc02:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802dc06:	5cd0      	ldrb	r0, [r2, r3]
 802dc08:	f01e 0f01 	tst.w	lr, #1
 802dc0c:	bf0c      	ite	eq
 802dc0e:	f000 000f 	andeq.w	r0, r0, #15
 802dc12:	1100      	asrne	r0, r0, #4
 802dc14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802dc18:	b2c3      	uxtb	r3, r0
 802dc1a:	b2ba      	uxth	r2, r7
 802dc1c:	fa1f fc8c 	uxth.w	ip, ip
 802dc20:	fb02 f00c 	mul.w	r0, r2, ip
 802dc24:	0112      	lsls	r2, r2, #4
 802dc26:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802dc2a:	1a12      	subs	r2, r2, r0
 802dc2c:	b292      	uxth	r2, r2
 802dc2e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802dc32:	4362      	muls	r2, r4
 802dc34:	fa1f fc8c 	uxth.w	ip, ip
 802dc38:	eba7 070c 	sub.w	r7, r7, ip
 802dc3c:	b2bf      	uxth	r7, r7
 802dc3e:	fb06 2207 	mla	r2, r6, r7, r2
 802dc42:	fb0c 2505 	mla	r5, ip, r5, r2
 802dc46:	fb00 5303 	mla	r3, r0, r3, r5
 802dc4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802dc4e:	b1b3      	cbz	r3, 802dc7e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802dc50:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 802dc54:	435a      	muls	r2, r3
 802dc56:	1c53      	adds	r3, r2, #1
 802dc58:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802dc5c:	4a2d      	ldr	r2, [pc, #180]	@ (802dd14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802dc5e:	121b      	asrs	r3, r3, #8
 802dc60:	6812      	ldr	r2, [r2, #0]
 802dc62:	2bff      	cmp	r3, #255	@ 0xff
 802dc64:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802dc68:	d120      	bne.n	802dcac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802dc6a:	4b2b      	ldr	r3, [pc, #172]	@ (802dd18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802dc6c:	0950      	lsrs	r0, r2, #5
 802dc6e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802dc72:	4033      	ands	r3, r6
 802dc74:	4318      	orrs	r0, r3
 802dc76:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802dc7a:	4302      	orrs	r2, r0
 802dc7c:	800a      	strh	r2, [r1, #0]
 802dc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802dc82:	2600      	movs	r6, #0
 802dc84:	e788      	b.n	802db98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802dc86:	2400      	movs	r4, #0
 802dc88:	4626      	mov	r6, r4
 802dc8a:	e799      	b.n	802dbc0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802dc8c:	2400      	movs	r4, #0
 802dc8e:	e797      	b.n	802dbc0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802dc90:	463c      	mov	r4, r7
 802dc92:	e795      	b.n	802dbc0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802dc94:	2500      	movs	r5, #0
 802dc96:	e7ac      	b.n	802dbf2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802dc98:	2300      	movs	r3, #0
 802dc9a:	461d      	mov	r5, r3
 802dc9c:	e7bd      	b.n	802dc1a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802dc9e:	4663      	mov	r3, ip
 802dca0:	4665      	mov	r5, ip
 802dca2:	e7ba      	b.n	802dc1a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802dca4:	2300      	movs	r3, #0
 802dca6:	e7b8      	b.n	802dc1a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802dca8:	463b      	mov	r3, r7
 802dcaa:	e7b6      	b.n	802dc1a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802dcac:	b29f      	uxth	r7, r3
 802dcae:	43db      	mvns	r3, r3
 802dcb0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802dcb4:	880d      	ldrh	r5, [r1, #0]
 802dcb6:	fb10 f007 	smulbb	r0, r0, r7
 802dcba:	b2f6      	uxtb	r6, r6
 802dcbc:	b2d2      	uxtb	r2, r2
 802dcbe:	122c      	asrs	r4, r5, #8
 802dcc0:	fb12 f207 	smulbb	r2, r2, r7
 802dcc4:	fb16 f607 	smulbb	r6, r6, r7
 802dcc8:	b2db      	uxtb	r3, r3
 802dcca:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802dcce:	fb04 0403 	mla	r4, r4, r3, r0
 802dcd2:	10e8      	asrs	r0, r5, #3
 802dcd4:	00ed      	lsls	r5, r5, #3
 802dcd6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802dcda:	b2ed      	uxtb	r5, r5
 802dcdc:	fb00 6603 	mla	r6, r0, r3, r6
 802dce0:	fb05 2303 	mla	r3, r5, r3, r2
 802dce4:	b2a4      	uxth	r4, r4
 802dce6:	b29a      	uxth	r2, r3
 802dce8:	1c63      	adds	r3, r4, #1
 802dcea:	b2b0      	uxth	r0, r6
 802dcec:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802dcf0:	1c53      	adds	r3, r2, #1
 802dcf2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802dcf6:	1c42      	adds	r2, r0, #1
 802dcf8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802dcfc:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802dd00:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802dd04:	0940      	lsrs	r0, r0, #5
 802dd06:	4323      	orrs	r3, r4
 802dd08:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802dd0c:	4303      	orrs	r3, r0
 802dd0e:	800b      	strh	r3, [r1, #0]
 802dd10:	e7b5      	b.n	802dc7e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802dd12:	bf00      	nop
 802dd14:	2001200c 	.word	0x2001200c
 802dd18:	00fff800 	.word	0x00fff800

0802dd1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802dd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dd20:	b097      	sub	sp, #92	@ 0x5c
 802dd22:	9214      	str	r2, [sp, #80]	@ 0x50
 802dd24:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802dd26:	9015      	str	r0, [sp, #84]	@ 0x54
 802dd28:	9309      	str	r3, [sp, #36]	@ 0x24
 802dd2a:	6850      	ldr	r0, [r2, #4]
 802dd2c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802dd30:	910d      	str	r1, [sp, #52]	@ 0x34
 802dd32:	930f      	str	r3, [sp, #60]	@ 0x3c
 802dd34:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802dd38:	fb00 1303 	mla	r3, r0, r3, r1
 802dd3c:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 802dd40:	6812      	ldr	r2, [r2, #0]
 802dd42:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802dd46:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802dd48:	689b      	ldr	r3, [r3, #8]
 802dd4a:	3301      	adds	r3, #1
 802dd4c:	f023 0301 	bic.w	r3, r3, #1
 802dd50:	930a      	str	r3, [sp, #40]	@ 0x28
 802dd52:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802dd54:	681f      	ldr	r7, [r3, #0]
 802dd56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802dd58:	2b00      	cmp	r3, #0
 802dd5a:	dc03      	bgt.n	802dd64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802dd5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802dd5e:	2b00      	cmp	r3, #0
 802dd60:	f340 8287 	ble.w	802e272 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802dd64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802dd66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802dd6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802dd6e:	1e48      	subs	r0, r1, #1
 802dd70:	f102 3cff 	add.w	ip, r2, #4294967295
 802dd74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802dd76:	2b00      	cmp	r3, #0
 802dd78:	f340 80c3 	ble.w	802df02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802dd7c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802dd80:	ea4f 4326 	mov.w	r3, r6, asr #16
 802dd84:	d406      	bmi.n	802dd94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802dd86:	4586      	cmp	lr, r0
 802dd88:	da04      	bge.n	802dd94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802dd8a:	2b00      	cmp	r3, #0
 802dd8c:	db02      	blt.n	802dd94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802dd8e:	4563      	cmp	r3, ip
 802dd90:	f2c0 80b8 	blt.w	802df04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802dd94:	f11e 0e01 	adds.w	lr, lr, #1
 802dd98:	f100 80a9 	bmi.w	802deee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802dd9c:	4571      	cmp	r1, lr
 802dd9e:	f2c0 80a6 	blt.w	802deee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802dda2:	3301      	adds	r3, #1
 802dda4:	f100 80a3 	bmi.w	802deee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802dda8:	429a      	cmp	r2, r3
 802ddaa:	f2c0 80a0 	blt.w	802deee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802ddae:	46c8      	mov	r8, r9
 802ddb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ddb2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 802ddb6:	930e      	str	r3, [sp, #56]	@ 0x38
 802ddb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ddba:	2b00      	cmp	r3, #0
 802ddbc:	f340 80c2 	ble.w	802df44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802ddc0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ddc2:	1430      	asrs	r0, r6, #16
 802ddc4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ddc8:	1423      	asrs	r3, r4, #16
 802ddca:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ddce:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ddd2:	f100 814d 	bmi.w	802e070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ddd6:	f10c 3bff 	add.w	fp, ip, #4294967295
 802ddda:	455b      	cmp	r3, fp
 802dddc:	f280 8148 	bge.w	802e070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802dde0:	2800      	cmp	r0, #0
 802dde2:	f2c0 8145 	blt.w	802e070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802dde6:	f10e 3bff 	add.w	fp, lr, #4294967295
 802ddea:	4558      	cmp	r0, fp
 802ddec:	f280 8140 	bge.w	802e070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ddf0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802ddf2:	fb00 3305 	mla	r3, r0, r5, r3
 802ddf6:	0858      	lsrs	r0, r3, #1
 802ddf8:	f817 c000 	ldrb.w	ip, [r7, r0]
 802ddfc:	07dd      	lsls	r5, r3, #31
 802ddfe:	bf54      	ite	pl
 802de00:	f00c 0c0f 	andpl.w	ip, ip, #15
 802de04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802de08:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802de0c:	fa5f fc8c 	uxtb.w	ip, ip
 802de10:	2a00      	cmp	r2, #0
 802de12:	f000 80db 	beq.w	802dfcc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802de16:	1c58      	adds	r0, r3, #1
 802de18:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802de1c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802de20:	07c0      	lsls	r0, r0, #31
 802de22:	bf54      	ite	pl
 802de24:	f00e 0e0f 	andpl.w	lr, lr, #15
 802de28:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802de2c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802de30:	fa5f f08e 	uxtb.w	r0, lr
 802de34:	9010      	str	r0, [sp, #64]	@ 0x40
 802de36:	b1c9      	cbz	r1, 802de6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802de38:	4453      	add	r3, sl
 802de3a:	0858      	lsrs	r0, r3, #1
 802de3c:	5c38      	ldrb	r0, [r7, r0]
 802de3e:	07dd      	lsls	r5, r3, #31
 802de40:	bf54      	ite	pl
 802de42:	f000 000f 	andpl.w	r0, r0, #15
 802de46:	1100      	asrmi	r0, r0, #4
 802de48:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802de4c:	3301      	adds	r3, #1
 802de4e:	b2c0      	uxtb	r0, r0
 802de50:	900b      	str	r0, [sp, #44]	@ 0x2c
 802de52:	0858      	lsrs	r0, r3, #1
 802de54:	f817 e000 	ldrb.w	lr, [r7, r0]
 802de58:	07dd      	lsls	r5, r3, #31
 802de5a:	bf54      	ite	pl
 802de5c:	f00e 030f 	andpl.w	r3, lr, #15
 802de60:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802de64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802de68:	b2db      	uxtb	r3, r3
 802de6a:	9311      	str	r3, [sp, #68]	@ 0x44
 802de6c:	b292      	uxth	r2, r2
 802de6e:	b289      	uxth	r1, r1
 802de70:	fb02 f301 	mul.w	r3, r2, r1
 802de74:	0112      	lsls	r2, r2, #4
 802de76:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802de7a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802de7c:	1ad2      	subs	r2, r2, r3
 802de7e:	b292      	uxth	r2, r2
 802de80:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802de84:	436a      	muls	r2, r5
 802de86:	b289      	uxth	r1, r1
 802de88:	1a40      	subs	r0, r0, r1
 802de8a:	b280      	uxth	r0, r0
 802de8c:	fb0c 2c00 	mla	ip, ip, r0, r2
 802de90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802de92:	fb01 c102 	mla	r1, r1, r2, ip
 802de96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802de98:	fb03 1302 	mla	r3, r3, r2, r1
 802de9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802dea0:	b1db      	cbz	r3, 802deda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802dea2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802dea4:	4353      	muls	r3, r2
 802dea6:	1c5a      	adds	r2, r3, #1
 802dea8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802deac:	4ac6      	ldr	r2, [pc, #792]	@ (802e1c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802deae:	121b      	asrs	r3, r3, #8
 802deb0:	6812      	ldr	r2, [r2, #0]
 802deb2:	2bff      	cmp	r3, #255	@ 0xff
 802deb4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802deb8:	f040 8099 	bne.w	802dfee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802debc:	0953      	lsrs	r3, r2, #5
 802debe:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802dec2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802dec6:	f02c 0c07 	bic.w	ip, ip, #7
 802deca:	ea43 0c0c 	orr.w	ip, r3, ip
 802dece:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ded2:	ea4c 0202 	orr.w	r2, ip, r2
 802ded6:	f8a8 2000 	strh.w	r2, [r8]
 802deda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802dedc:	f108 0802 	add.w	r8, r8, #2
 802dee0:	441c      	add	r4, r3
 802dee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802dee4:	441e      	add	r6, r3
 802dee6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dee8:	3b01      	subs	r3, #1
 802deea:	930e      	str	r3, [sp, #56]	@ 0x38
 802deec:	e764      	b.n	802ddb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802deee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802def0:	f109 0902 	add.w	r9, r9, #2
 802def4:	441c      	add	r4, r3
 802def6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802def8:	441e      	add	r6, r3
 802defa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802defc:	3b01      	subs	r3, #1
 802defe:	9309      	str	r3, [sp, #36]	@ 0x24
 802df00:	e738      	b.n	802dd74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802df02:	d024      	beq.n	802df4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802df04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802df06:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802df08:	3b01      	subs	r3, #1
 802df0a:	fb00 4003 	mla	r0, r0, r3, r4
 802df0e:	1400      	asrs	r0, r0, #16
 802df10:	f53f af4d 	bmi.w	802ddae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802df14:	3901      	subs	r1, #1
 802df16:	4288      	cmp	r0, r1
 802df18:	f6bf af49 	bge.w	802ddae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802df1c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802df1e:	fb01 6303 	mla	r3, r1, r3, r6
 802df22:	141b      	asrs	r3, r3, #16
 802df24:	f53f af43 	bmi.w	802ddae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802df28:	3a01      	subs	r2, #1
 802df2a:	4293      	cmp	r3, r2
 802df2c:	f6bf af3f 	bge.w	802ddae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802df30:	46c8      	mov	r8, r9
 802df32:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 802df36:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802df3a:	930e      	str	r3, [sp, #56]	@ 0x38
 802df3c:	f1bb 0f00 	cmp.w	fp, #0
 802df40:	f300 80b7 	bgt.w	802e0b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 802df44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802df46:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802df4a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802df4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802df50:	2b00      	cmp	r3, #0
 802df52:	f340 818e 	ble.w	802e272 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802df56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802df5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802df5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802df62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802df66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802df6a:	eef0 6a62 	vmov.f32	s13, s5
 802df6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 802df72:	ee77 2a62 	vsub.f32	s5, s14, s5
 802df76:	ee61 7a27 	vmul.f32	s15, s2, s15
 802df7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802df7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802df82:	ee16 4a90 	vmov	r4, s13
 802df86:	eef0 6a43 	vmov.f32	s13, s6
 802df8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802df8e:	ee12 2a90 	vmov	r2, s5
 802df92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802df96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802df98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802df9c:	fb92 f3f3 	sdiv	r3, r2, r3
 802dfa0:	ee13 2a10 	vmov	r2, s6
 802dfa4:	9323      	str	r3, [sp, #140]	@ 0x8c
 802dfa6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802dfa8:	ee16 6a90 	vmov	r6, s13
 802dfac:	fb92 f3f3 	sdiv	r3, r2, r3
 802dfb0:	9324      	str	r3, [sp, #144]	@ 0x90
 802dfb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802dfb4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802dfb6:	3b01      	subs	r3, #1
 802dfb8:	930d      	str	r3, [sp, #52]	@ 0x34
 802dfba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802dfbc:	bf08      	it	eq
 802dfbe:	4613      	moveq	r3, r2
 802dfc0:	eeb0 3a67 	vmov.f32	s6, s15
 802dfc4:	9309      	str	r3, [sp, #36]	@ 0x24
 802dfc6:	eef0 2a47 	vmov.f32	s5, s14
 802dfca:	e6c4      	b.n	802dd56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802dfcc:	2900      	cmp	r1, #0
 802dfce:	f43f af4d 	beq.w	802de6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802dfd2:	eb0a 0003 	add.w	r0, sl, r3
 802dfd6:	0843      	lsrs	r3, r0, #1
 802dfd8:	5cfb      	ldrb	r3, [r7, r3]
 802dfda:	07c0      	lsls	r0, r0, #31
 802dfdc:	bf54      	ite	pl
 802dfde:	f003 030f 	andpl.w	r3, r3, #15
 802dfe2:	111b      	asrmi	r3, r3, #4
 802dfe4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802dfe8:	b2db      	uxtb	r3, r3
 802dfea:	930b      	str	r3, [sp, #44]	@ 0x2c
 802dfec:	e73e      	b.n	802de6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802dfee:	fa1f fb83 	uxth.w	fp, r3
 802dff2:	43db      	mvns	r3, r3
 802dff4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802dff8:	f8b8 e000 	ldrh.w	lr, [r8]
 802dffc:	fb11 f10b 	smulbb	r1, r1, fp
 802e000:	fa5f fc8c 	uxtb.w	ip, ip
 802e004:	b2d2      	uxtb	r2, r2
 802e006:	ea4f 202e 	mov.w	r0, lr, asr #8
 802e00a:	fb1c fc0b 	smulbb	ip, ip, fp
 802e00e:	fb12 fb0b 	smulbb	fp, r2, fp
 802e012:	b2db      	uxtb	r3, r3
 802e014:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802e018:	fb00 1003 	mla	r0, r0, r3, r1
 802e01c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802e020:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802e024:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802e028:	fa5f fe8e 	uxtb.w	lr, lr
 802e02c:	fb01 cc03 	mla	ip, r1, r3, ip
 802e030:	fb0e bb03 	mla	fp, lr, r3, fp
 802e034:	b280      	uxth	r0, r0
 802e036:	1c43      	adds	r3, r0, #1
 802e038:	fa1f fc8c 	uxth.w	ip, ip
 802e03c:	fa1f fb8b 	uxth.w	fp, fp
 802e040:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802e044:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802e048:	f10c 0101 	add.w	r1, ip, #1
 802e04c:	f10b 0001 	add.w	r0, fp, #1
 802e050:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802e054:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802e058:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802e05c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802e060:	4318      	orrs	r0, r3
 802e062:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802e066:	ea40 000c 	orr.w	r0, r0, ip
 802e06a:	f8a8 0000 	strh.w	r0, [r8]
 802e06e:	e734      	b.n	802deda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802e070:	f113 0b01 	adds.w	fp, r3, #1
 802e074:	f53f af31 	bmi.w	802deda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802e078:	45dc      	cmp	ip, fp
 802e07a:	f6ff af2e 	blt.w	802deda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802e07e:	f110 0b01 	adds.w	fp, r0, #1
 802e082:	f53f af2a 	bmi.w	802deda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802e086:	45de      	cmp	lr, fp
 802e088:	f6ff af27 	blt.w	802deda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802e08c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802e08e:	9302      	str	r3, [sp, #8]
 802e090:	fa0f f38e 	sxth.w	r3, lr
 802e094:	9301      	str	r3, [sp, #4]
 802e096:	fa0f f38c 	sxth.w	r3, ip
 802e09a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802e09e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802e0a2:	9300      	str	r3, [sp, #0]
 802e0a4:	463a      	mov	r2, r7
 802e0a6:	4653      	mov	r3, sl
 802e0a8:	4641      	mov	r1, r8
 802e0aa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802e0ac:	f7ff fd4e 	bl	802db4c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802e0b0:	e713      	b.n	802deda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802e0b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802e0b4:	1422      	asrs	r2, r4, #16
 802e0b6:	1433      	asrs	r3, r6, #16
 802e0b8:	fb05 2303 	mla	r3, r5, r3, r2
 802e0bc:	085a      	lsrs	r2, r3, #1
 802e0be:	5cba      	ldrb	r2, [r7, r2]
 802e0c0:	07dd      	lsls	r5, r3, #31
 802e0c2:	bf54      	ite	pl
 802e0c4:	f002 020f 	andpl.w	r2, r2, #15
 802e0c8:	1112      	asrmi	r2, r2, #4
 802e0ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802e0ce:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802e0d2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802e0d6:	b2d2      	uxtb	r2, r2
 802e0d8:	2900      	cmp	r1, #0
 802e0da:	d077      	beq.n	802e1cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802e0dc:	f103 0e01 	add.w	lr, r3, #1
 802e0e0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802e0e4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802e0e8:	f01e 0f01 	tst.w	lr, #1
 802e0ec:	bf0c      	ite	eq
 802e0ee:	f00c 0c0f 	andeq.w	ip, ip, #15
 802e0f2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802e0f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802e0fa:	fa5f f58c 	uxtb.w	r5, ip
 802e0fe:	9512      	str	r5, [sp, #72]	@ 0x48
 802e100:	b300      	cbz	r0, 802e144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802e102:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802e104:	442b      	add	r3, r5
 802e106:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802e10a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802e10e:	07dd      	lsls	r5, r3, #31
 802e110:	bf54      	ite	pl
 802e112:	f00c 0c0f 	andpl.w	ip, ip, #15
 802e116:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802e11a:	3301      	adds	r3, #1
 802e11c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802e120:	fa5f f58c 	uxtb.w	r5, ip
 802e124:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802e128:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802e12c:	950c      	str	r5, [sp, #48]	@ 0x30
 802e12e:	07dd      	lsls	r5, r3, #31
 802e130:	bf54      	ite	pl
 802e132:	f00c 0c0f 	andpl.w	ip, ip, #15
 802e136:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802e13a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802e13e:	fa5f f38c 	uxtb.w	r3, ip
 802e142:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e144:	b289      	uxth	r1, r1
 802e146:	b280      	uxth	r0, r0
 802e148:	fb01 f300 	mul.w	r3, r1, r0
 802e14c:	0109      	lsls	r1, r1, #4
 802e14e:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802e152:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802e154:	1ac9      	subs	r1, r1, r3
 802e156:	b289      	uxth	r1, r1
 802e158:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802e15c:	4369      	muls	r1, r5
 802e15e:	b280      	uxth	r0, r0
 802e160:	ebac 0c00 	sub.w	ip, ip, r0
 802e164:	fa1f fc8c 	uxth.w	ip, ip
 802e168:	fb02 120c 	mla	r2, r2, ip, r1
 802e16c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802e16e:	fb00 2001 	mla	r0, r0, r1, r2
 802e172:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e174:	fb03 0302 	mla	r3, r3, r2, r0
 802e178:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802e17c:	b1d3      	cbz	r3, 802e1b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802e17e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802e180:	4353      	muls	r3, r2
 802e182:	1c5a      	adds	r2, r3, #1
 802e184:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802e188:	4a0f      	ldr	r2, [pc, #60]	@ (802e1c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802e18a:	121b      	asrs	r3, r3, #8
 802e18c:	6812      	ldr	r2, [r2, #0]
 802e18e:	2bff      	cmp	r3, #255	@ 0xff
 802e190:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802e194:	d12e      	bne.n	802e1f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802e196:	0953      	lsrs	r3, r2, #5
 802e198:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802e19c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802e1a0:	f02c 0c07 	bic.w	ip, ip, #7
 802e1a4:	ea43 0c0c 	orr.w	ip, r3, ip
 802e1a8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802e1ac:	ea4c 0202 	orr.w	r2, ip, r2
 802e1b0:	f8a8 2000 	strh.w	r2, [r8]
 802e1b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e1b6:	f108 0802 	add.w	r8, r8, #2
 802e1ba:	441c      	add	r4, r3
 802e1bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e1be:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e1c2:	441e      	add	r6, r3
 802e1c4:	e6ba      	b.n	802df3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802e1c6:	bf00      	nop
 802e1c8:	2001200c 	.word	0x2001200c
 802e1cc:	2800      	cmp	r0, #0
 802e1ce:	d0b9      	beq.n	802e144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802e1d0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802e1d2:	442b      	add	r3, r5
 802e1d4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802e1d8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802e1dc:	07db      	lsls	r3, r3, #31
 802e1de:	bf54      	ite	pl
 802e1e0:	f00c 0c0f 	andpl.w	ip, ip, #15
 802e1e4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802e1e8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802e1ec:	fa5f f38c 	uxtb.w	r3, ip
 802e1f0:	930c      	str	r3, [sp, #48]	@ 0x30
 802e1f2:	e7a7      	b.n	802e144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802e1f4:	fa1f fa83 	uxth.w	sl, r3
 802e1f8:	43db      	mvns	r3, r3
 802e1fa:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802e1fe:	f8b8 e000 	ldrh.w	lr, [r8]
 802e202:	fb11 f10a 	smulbb	r1, r1, sl
 802e206:	b2d2      	uxtb	r2, r2
 802e208:	ea4f 202e 	mov.w	r0, lr, asr #8
 802e20c:	fb12 f20a 	smulbb	r2, r2, sl
 802e210:	b2db      	uxtb	r3, r3
 802e212:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802e216:	fb00 1003 	mla	r0, r0, r3, r1
 802e21a:	fa5f fc8c 	uxtb.w	ip, ip
 802e21e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802e222:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802e226:	fb1c fc0a 	smulbb	ip, ip, sl
 802e22a:	fa5f fe8e 	uxtb.w	lr, lr
 802e22e:	fb0e 2203 	mla	r2, lr, r3, r2
 802e232:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802e236:	fb01 cc03 	mla	ip, r1, r3, ip
 802e23a:	b280      	uxth	r0, r0
 802e23c:	b292      	uxth	r2, r2
 802e23e:	1c43      	adds	r3, r0, #1
 802e240:	1c51      	adds	r1, r2, #1
 802e242:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802e246:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802e24a:	fa1f fc8c 	uxth.w	ip, ip
 802e24e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802e252:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802e256:	4308      	orrs	r0, r1
 802e258:	f10c 0101 	add.w	r1, ip, #1
 802e25c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802e260:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802e264:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802e268:	ea40 000c 	orr.w	r0, r0, ip
 802e26c:	f8a8 0000 	strh.w	r0, [r8]
 802e270:	e7a0      	b.n	802e1b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802e272:	b017      	add	sp, #92	@ 0x5c
 802e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802e278 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802e278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e27c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802e280:	2d00      	cmp	r5, #0
 802e282:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802e286:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802e28a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802e28e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802e292:	fb05 0e03 	mla	lr, r5, r3, r0
 802e296:	f2c0 80b0 	blt.w	802e3fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802e29a:	45a9      	cmp	r9, r5
 802e29c:	f340 80ad 	ble.w	802e3fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802e2a0:	2800      	cmp	r0, #0
 802e2a2:	f2c0 80a8 	blt.w	802e3f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802e2a6:	4580      	cmp	r8, r0
 802e2a8:	f340 80a5 	ble.w	802e3f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802e2ac:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802e2b0:	5d16      	ldrb	r6, [r2, r4]
 802e2b2:	f01e 0f01 	tst.w	lr, #1
 802e2b6:	bf0c      	ite	eq
 802e2b8:	f006 060f 	andeq.w	r6, r6, #15
 802e2bc:	1136      	asrne	r6, r6, #4
 802e2be:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802e2c2:	b2f6      	uxtb	r6, r6
 802e2c4:	1c44      	adds	r4, r0, #1
 802e2c6:	f100 809b 	bmi.w	802e400 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802e2ca:	45a0      	cmp	r8, r4
 802e2cc:	f340 8098 	ble.w	802e400 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802e2d0:	2f00      	cmp	r7, #0
 802e2d2:	f000 8097 	beq.w	802e404 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802e2d6:	f10e 0a01 	add.w	sl, lr, #1
 802e2da:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802e2de:	5d14      	ldrb	r4, [r2, r4]
 802e2e0:	f01a 0f01 	tst.w	sl, #1
 802e2e4:	bf0c      	ite	eq
 802e2e6:	f004 040f 	andeq.w	r4, r4, #15
 802e2ea:	1124      	asrne	r4, r4, #4
 802e2ec:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802e2f0:	b2e4      	uxtb	r4, r4
 802e2f2:	3501      	adds	r5, #1
 802e2f4:	f100 808a 	bmi.w	802e40c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802e2f8:	45a9      	cmp	r9, r5
 802e2fa:	f340 8087 	ble.w	802e40c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802e2fe:	f1bc 0f00 	cmp.w	ip, #0
 802e302:	f000 8086 	beq.w	802e412 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802e306:	2800      	cmp	r0, #0
 802e308:	db7e      	blt.n	802e408 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802e30a:	4580      	cmp	r8, r0
 802e30c:	dd7c      	ble.n	802e408 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802e30e:	eb03 090e 	add.w	r9, r3, lr
 802e312:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802e316:	5d55      	ldrb	r5, [r2, r5]
 802e318:	f019 0f01 	tst.w	r9, #1
 802e31c:	bf0c      	ite	eq
 802e31e:	f005 050f 	andeq.w	r5, r5, #15
 802e322:	112d      	asrne	r5, r5, #4
 802e324:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802e328:	b2ed      	uxtb	r5, r5
 802e32a:	3001      	adds	r0, #1
 802e32c:	d474      	bmi.n	802e418 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802e32e:	4580      	cmp	r8, r0
 802e330:	dd72      	ble.n	802e418 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802e332:	2f00      	cmp	r7, #0
 802e334:	d072      	beq.n	802e41c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802e336:	3301      	adds	r3, #1
 802e338:	449e      	add	lr, r3
 802e33a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802e33e:	5cd0      	ldrb	r0, [r2, r3]
 802e340:	f01e 0f01 	tst.w	lr, #1
 802e344:	bf0c      	ite	eq
 802e346:	f000 000f 	andeq.w	r0, r0, #15
 802e34a:	1100      	asrne	r0, r0, #4
 802e34c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802e350:	b2c3      	uxtb	r3, r0
 802e352:	b2ba      	uxth	r2, r7
 802e354:	fa1f fc8c 	uxth.w	ip, ip
 802e358:	fb02 f00c 	mul.w	r0, r2, ip
 802e35c:	0112      	lsls	r2, r2, #4
 802e35e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802e362:	1a12      	subs	r2, r2, r0
 802e364:	b292      	uxth	r2, r2
 802e366:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802e36a:	4362      	muls	r2, r4
 802e36c:	fa1f fc8c 	uxth.w	ip, ip
 802e370:	eba7 070c 	sub.w	r7, r7, ip
 802e374:	b2bf      	uxth	r7, r7
 802e376:	fb06 2207 	mla	r2, r6, r7, r2
 802e37a:	fb0c 2505 	mla	r5, ip, r5, r2
 802e37e:	fb00 5303 	mla	r3, r0, r3, r5
 802e382:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802e386:	b3a3      	cbz	r3, 802e3f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802e388:	4a25      	ldr	r2, [pc, #148]	@ (802e420 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802e38a:	880e      	ldrh	r6, [r1, #0]
 802e38c:	6815      	ldr	r5, [r2, #0]
 802e38e:	b29a      	uxth	r2, r3
 802e390:	43db      	mvns	r3, r3
 802e392:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802e396:	fb10 f002 	smulbb	r0, r0, r2
 802e39a:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802e39e:	b2ed      	uxtb	r5, r5
 802e3a0:	1234      	asrs	r4, r6, #8
 802e3a2:	fb17 f702 	smulbb	r7, r7, r2
 802e3a6:	fb15 f202 	smulbb	r2, r5, r2
 802e3aa:	b2db      	uxtb	r3, r3
 802e3ac:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802e3b0:	fb04 0403 	mla	r4, r4, r3, r0
 802e3b4:	10f0      	asrs	r0, r6, #3
 802e3b6:	00f6      	lsls	r6, r6, #3
 802e3b8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802e3bc:	b2f6      	uxtb	r6, r6
 802e3be:	fb00 7003 	mla	r0, r0, r3, r7
 802e3c2:	fb06 2303 	mla	r3, r6, r3, r2
 802e3c6:	b2a4      	uxth	r4, r4
 802e3c8:	b29a      	uxth	r2, r3
 802e3ca:	1c63      	adds	r3, r4, #1
 802e3cc:	b280      	uxth	r0, r0
 802e3ce:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802e3d2:	1c53      	adds	r3, r2, #1
 802e3d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802e3d8:	1c42      	adds	r2, r0, #1
 802e3da:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802e3de:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802e3e2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802e3e6:	0940      	lsrs	r0, r0, #5
 802e3e8:	4323      	orrs	r3, r4
 802e3ea:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802e3ee:	4303      	orrs	r3, r0
 802e3f0:	800b      	strh	r3, [r1, #0]
 802e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e3f6:	2600      	movs	r6, #0
 802e3f8:	e764      	b.n	802e2c4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802e3fa:	2400      	movs	r4, #0
 802e3fc:	4626      	mov	r6, r4
 802e3fe:	e778      	b.n	802e2f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802e400:	2400      	movs	r4, #0
 802e402:	e776      	b.n	802e2f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802e404:	463c      	mov	r4, r7
 802e406:	e774      	b.n	802e2f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802e408:	2500      	movs	r5, #0
 802e40a:	e78e      	b.n	802e32a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802e40c:	2300      	movs	r3, #0
 802e40e:	461d      	mov	r5, r3
 802e410:	e79f      	b.n	802e352 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802e412:	4663      	mov	r3, ip
 802e414:	4665      	mov	r5, ip
 802e416:	e79c      	b.n	802e352 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802e418:	2300      	movs	r3, #0
 802e41a:	e79a      	b.n	802e352 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802e41c:	463b      	mov	r3, r7
 802e41e:	e798      	b.n	802e352 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802e420:	2001200c 	.word	0x2001200c

0802e424 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802e424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e428:	b093      	sub	sp, #76	@ 0x4c
 802e42a:	920c      	str	r2, [sp, #48]	@ 0x30
 802e42c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802e42e:	9011      	str	r0, [sp, #68]	@ 0x44
 802e430:	6850      	ldr	r0, [r2, #4]
 802e432:	9107      	str	r1, [sp, #28]
 802e434:	461d      	mov	r5, r3
 802e436:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802e43a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802e43e:	fb00 1303 	mla	r3, r0, r3, r1
 802e442:	6812      	ldr	r2, [r2, #0]
 802e444:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802e448:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e44a:	689b      	ldr	r3, [r3, #8]
 802e44c:	3301      	adds	r3, #1
 802e44e:	f023 0301 	bic.w	r3, r3, #1
 802e452:	9306      	str	r3, [sp, #24]
 802e454:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e456:	681f      	ldr	r7, [r3, #0]
 802e458:	9b07      	ldr	r3, [sp, #28]
 802e45a:	2b00      	cmp	r3, #0
 802e45c:	dc03      	bgt.n	802e466 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802e45e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802e460:	2b00      	cmp	r3, #0
 802e462:	f340 8265 	ble.w	802e930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802e466:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e468:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802e46c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802e470:	1e48      	subs	r0, r1, #1
 802e472:	f102 3cff 	add.w	ip, r2, #4294967295
 802e476:	2d00      	cmp	r5, #0
 802e478:	f340 80b7 	ble.w	802e5ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802e47c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802e480:	ea4f 4326 	mov.w	r3, r6, asr #16
 802e484:	d406      	bmi.n	802e494 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802e486:	4586      	cmp	lr, r0
 802e488:	da04      	bge.n	802e494 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802e48a:	2b00      	cmp	r3, #0
 802e48c:	db02      	blt.n	802e494 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802e48e:	4563      	cmp	r3, ip
 802e490:	f2c0 80ac 	blt.w	802e5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802e494:	f11e 0e01 	adds.w	lr, lr, #1
 802e498:	f100 809f 	bmi.w	802e5da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802e49c:	4571      	cmp	r1, lr
 802e49e:	f2c0 809c 	blt.w	802e5da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802e4a2:	3301      	adds	r3, #1
 802e4a4:	f100 8099 	bmi.w	802e5da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802e4a8:	429a      	cmp	r2, r3
 802e4aa:	f2c0 8096 	blt.w	802e5da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802e4ae:	46c8      	mov	r8, r9
 802e4b0:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802e4b4:	9509      	str	r5, [sp, #36]	@ 0x24
 802e4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e4b8:	2b00      	cmp	r3, #0
 802e4ba:	f340 80b5 	ble.w	802e628 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802e4be:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802e4c2:	9308      	str	r3, [sp, #32]
 802e4c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802e4c6:	1430      	asrs	r0, r6, #16
 802e4c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802e4cc:	1423      	asrs	r3, r4, #16
 802e4ce:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802e4d2:	f100 813e 	bmi.w	802e752 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802e4d6:	f10c 3bff 	add.w	fp, ip, #4294967295
 802e4da:	455b      	cmp	r3, fp
 802e4dc:	f280 8139 	bge.w	802e752 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802e4e0:	2800      	cmp	r0, #0
 802e4e2:	f2c0 8136 	blt.w	802e752 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802e4e6:	f10e 3bff 	add.w	fp, lr, #4294967295
 802e4ea:	4558      	cmp	r0, fp
 802e4ec:	f280 8131 	bge.w	802e752 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802e4f0:	9a06      	ldr	r2, [sp, #24]
 802e4f2:	fb00 3302 	mla	r3, r0, r2, r3
 802e4f6:	0858      	lsrs	r0, r3, #1
 802e4f8:	f817 c000 	ldrb.w	ip, [r7, r0]
 802e4fc:	07da      	lsls	r2, r3, #31
 802e4fe:	bf54      	ite	pl
 802e500:	f00c 0c0f 	andpl.w	ip, ip, #15
 802e504:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802e508:	9a08      	ldr	r2, [sp, #32]
 802e50a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802e50e:	fa5f fc8c 	uxtb.w	ip, ip
 802e512:	2a00      	cmp	r2, #0
 802e514:	f000 80cb 	beq.w	802e6ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802e518:	1c58      	adds	r0, r3, #1
 802e51a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802e51e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802e522:	07c0      	lsls	r0, r0, #31
 802e524:	bf54      	ite	pl
 802e526:	f00e 0e0f 	andpl.w	lr, lr, #15
 802e52a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802e52e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802e532:	fa5f fe8e 	uxtb.w	lr, lr
 802e536:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802e53a:	b1b9      	cbz	r1, 802e56c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802e53c:	4453      	add	r3, sl
 802e53e:	0858      	lsrs	r0, r3, #1
 802e540:	5c38      	ldrb	r0, [r7, r0]
 802e542:	07da      	lsls	r2, r3, #31
 802e544:	bf54      	ite	pl
 802e546:	f000 000f 	andpl.w	r0, r0, #15
 802e54a:	1100      	asrmi	r0, r0, #4
 802e54c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802e550:	b2c0      	uxtb	r0, r0
 802e552:	900a      	str	r0, [sp, #40]	@ 0x28
 802e554:	1c58      	adds	r0, r3, #1
 802e556:	0843      	lsrs	r3, r0, #1
 802e558:	5cfb      	ldrb	r3, [r7, r3]
 802e55a:	07c2      	lsls	r2, r0, #31
 802e55c:	bf54      	ite	pl
 802e55e:	f003 030f 	andpl.w	r3, r3, #15
 802e562:	111b      	asrmi	r3, r3, #4
 802e564:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802e568:	b2db      	uxtb	r3, r3
 802e56a:	930e      	str	r3, [sp, #56]	@ 0x38
 802e56c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802e570:	b289      	uxth	r1, r1
 802e572:	fb02 f301 	mul.w	r3, r2, r1
 802e576:	0112      	lsls	r2, r2, #4
 802e578:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802e57c:	b289      	uxth	r1, r1
 802e57e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802e582:	1a40      	subs	r0, r0, r1
 802e584:	fa1f fe80 	uxth.w	lr, r0
 802e588:	1ad2      	subs	r2, r2, r3
 802e58a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802e58c:	b292      	uxth	r2, r2
 802e58e:	4342      	muls	r2, r0
 802e590:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802e594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802e596:	fb01 c102 	mla	r1, r1, r2, ip
 802e59a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e59c:	fb03 1302 	mla	r3, r3, r2, r1
 802e5a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802e5a4:	2bff      	cmp	r3, #255	@ 0xff
 802e5a6:	f040 8093 	bne.w	802e6d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802e5aa:	4bbe      	ldr	r3, [pc, #760]	@ (802e8a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802e5ac:	681a      	ldr	r2, [r3, #0]
 802e5ae:	4bbe      	ldr	r3, [pc, #760]	@ (802e8a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802e5b0:	0951      	lsrs	r1, r2, #5
 802e5b2:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802e5b6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802e5ba:	430b      	orrs	r3, r1
 802e5bc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802e5c0:	4313      	orrs	r3, r2
 802e5c2:	f8a8 3000 	strh.w	r3, [r8]
 802e5c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802e5c8:	f108 0802 	add.w	r8, r8, #2
 802e5cc:	441c      	add	r4, r3
 802e5ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802e5d0:	441e      	add	r6, r3
 802e5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e5d4:	3b01      	subs	r3, #1
 802e5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 802e5d8:	e76d      	b.n	802e4b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802e5da:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802e5dc:	3d01      	subs	r5, #1
 802e5de:	441c      	add	r4, r3
 802e5e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802e5e2:	f109 0902 	add.w	r9, r9, #2
 802e5e6:	441e      	add	r6, r3
 802e5e8:	e745      	b.n	802e476 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802e5ea:	d021      	beq.n	802e630 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802e5ec:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802e5ee:	1e6b      	subs	r3, r5, #1
 802e5f0:	fb00 4003 	mla	r0, r0, r3, r4
 802e5f4:	1400      	asrs	r0, r0, #16
 802e5f6:	f53f af5a 	bmi.w	802e4ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802e5fa:	3901      	subs	r1, #1
 802e5fc:	4288      	cmp	r0, r1
 802e5fe:	f6bf af56 	bge.w	802e4ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802e602:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802e604:	fb01 6303 	mla	r3, r1, r3, r6
 802e608:	141b      	asrs	r3, r3, #16
 802e60a:	f53f af50 	bmi.w	802e4ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802e60e:	3a01      	subs	r2, #1
 802e610:	4293      	cmp	r3, r2
 802e612:	f6bf af4c 	bge.w	802e4ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802e616:	46a8      	mov	r8, r5
 802e618:	46ce      	mov	lr, r9
 802e61a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802e61e:	9308      	str	r3, [sp, #32]
 802e620:	f1b8 0f00 	cmp.w	r8, #0
 802e624:	f300 80b5 	bgt.w	802e792 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802e628:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802e62c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802e630:	9b07      	ldr	r3, [sp, #28]
 802e632:	2b00      	cmp	r3, #0
 802e634:	f340 817c 	ble.w	802e930 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802e638:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802e63c:	ee30 0a04 	vadd.f32	s0, s0, s8
 802e640:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802e644:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802e648:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802e64c:	eef0 6a62 	vmov.f32	s13, s5
 802e650:	ee31 1a05 	vadd.f32	s2, s2, s10
 802e654:	ee77 2a62 	vsub.f32	s5, s14, s5
 802e658:	ee61 7a27 	vmul.f32	s15, s2, s15
 802e65c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802e660:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802e664:	ee16 4a90 	vmov	r4, s13
 802e668:	eef0 6a43 	vmov.f32	s13, s6
 802e66c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802e670:	ee12 2a90 	vmov	r2, s5
 802e674:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802e678:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802e67a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802e67e:	fb92 f3f3 	sdiv	r3, r2, r3
 802e682:	ee13 2a10 	vmov	r2, s6
 802e686:	931f      	str	r3, [sp, #124]	@ 0x7c
 802e688:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802e68a:	ee16 6a90 	vmov	r6, s13
 802e68e:	fb92 f3f3 	sdiv	r3, r2, r3
 802e692:	9320      	str	r3, [sp, #128]	@ 0x80
 802e694:	9b07      	ldr	r3, [sp, #28]
 802e696:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802e698:	3b01      	subs	r3, #1
 802e69a:	9307      	str	r3, [sp, #28]
 802e69c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802e69e:	bf0c      	ite	eq
 802e6a0:	4615      	moveq	r5, r2
 802e6a2:	461d      	movne	r5, r3
 802e6a4:	eeb0 3a67 	vmov.f32	s6, s15
 802e6a8:	eef0 2a47 	vmov.f32	s5, s14
 802e6ac:	e6d4      	b.n	802e458 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802e6ae:	2900      	cmp	r1, #0
 802e6b0:	f43f af5c 	beq.w	802e56c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802e6b4:	eb0a 0003 	add.w	r0, sl, r3
 802e6b8:	0843      	lsrs	r3, r0, #1
 802e6ba:	5cfb      	ldrb	r3, [r7, r3]
 802e6bc:	07c0      	lsls	r0, r0, #31
 802e6be:	bf54      	ite	pl
 802e6c0:	f003 030f 	andpl.w	r3, r3, #15
 802e6c4:	111b      	asrmi	r3, r3, #4
 802e6c6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802e6ca:	b2db      	uxtb	r3, r3
 802e6cc:	930a      	str	r3, [sp, #40]	@ 0x28
 802e6ce:	e74d      	b.n	802e56c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802e6d0:	2b00      	cmp	r3, #0
 802e6d2:	f43f af78 	beq.w	802e5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802e6d6:	fa1f fe83 	uxth.w	lr, r3
 802e6da:	43db      	mvns	r3, r3
 802e6dc:	4a71      	ldr	r2, [pc, #452]	@ (802e8a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802e6de:	f8b8 c000 	ldrh.w	ip, [r8]
 802e6e2:	6810      	ldr	r0, [r2, #0]
 802e6e4:	ea4f 212c 	mov.w	r1, ip, asr #8
 802e6e8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802e6ec:	fb12 f20e 	smulbb	r2, r2, lr
 802e6f0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802e6f4:	b2c0      	uxtb	r0, r0
 802e6f6:	fb1b fb0e 	smulbb	fp, fp, lr
 802e6fa:	fb10 fe0e 	smulbb	lr, r0, lr
 802e6fe:	b2db      	uxtb	r3, r3
 802e700:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802e704:	fb01 2103 	mla	r1, r1, r3, r2
 802e708:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802e70c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802e710:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802e714:	fa5f fc8c 	uxtb.w	ip, ip
 802e718:	fb02 b203 	mla	r2, r2, r3, fp
 802e71c:	fb0c e303 	mla	r3, ip, r3, lr
 802e720:	b289      	uxth	r1, r1
 802e722:	1c48      	adds	r0, r1, #1
 802e724:	b292      	uxth	r2, r2
 802e726:	b29b      	uxth	r3, r3
 802e728:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802e72c:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802e730:	f102 0b01 	add.w	fp, r2, #1
 802e734:	1c59      	adds	r1, r3, #1
 802e736:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802e73a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802e73e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802e742:	0952      	lsrs	r2, r2, #5
 802e744:	4301      	orrs	r1, r0
 802e746:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802e74a:	4311      	orrs	r1, r2
 802e74c:	f8a8 1000 	strh.w	r1, [r8]
 802e750:	e739      	b.n	802e5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802e752:	f113 0b01 	adds.w	fp, r3, #1
 802e756:	f53f af36 	bmi.w	802e5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802e75a:	45dc      	cmp	ip, fp
 802e75c:	f6ff af33 	blt.w	802e5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802e760:	f110 0b01 	adds.w	fp, r0, #1
 802e764:	f53f af2f 	bmi.w	802e5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802e768:	45de      	cmp	lr, fp
 802e76a:	f6ff af2c 	blt.w	802e5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802e76e:	9a08      	ldr	r2, [sp, #32]
 802e770:	9302      	str	r3, [sp, #8]
 802e772:	fa0f f38e 	sxth.w	r3, lr
 802e776:	9301      	str	r3, [sp, #4]
 802e778:	fa0f f38c 	sxth.w	r3, ip
 802e77c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802e780:	9105      	str	r1, [sp, #20]
 802e782:	9300      	str	r3, [sp, #0]
 802e784:	463a      	mov	r2, r7
 802e786:	4653      	mov	r3, sl
 802e788:	4641      	mov	r1, r8
 802e78a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802e78c:	f7ff fd74 	bl	802e278 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802e790:	e719      	b.n	802e5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802e792:	9906      	ldr	r1, [sp, #24]
 802e794:	1422      	asrs	r2, r4, #16
 802e796:	1433      	asrs	r3, r6, #16
 802e798:	fb01 2303 	mla	r3, r1, r3, r2
 802e79c:	085a      	lsrs	r2, r3, #1
 802e79e:	5cba      	ldrb	r2, [r7, r2]
 802e7a0:	07d9      	lsls	r1, r3, #31
 802e7a2:	bf54      	ite	pl
 802e7a4:	f002 020f 	andpl.w	r2, r2, #15
 802e7a8:	1112      	asrmi	r2, r2, #4
 802e7aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802e7ae:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802e7b2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802e7b6:	b2d2      	uxtb	r2, r2
 802e7b8:	2800      	cmp	r0, #0
 802e7ba:	d062      	beq.n	802e882 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802e7bc:	f103 0a01 	add.w	sl, r3, #1
 802e7c0:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802e7c4:	5c79      	ldrb	r1, [r7, r1]
 802e7c6:	f01a 0f01 	tst.w	sl, #1
 802e7ca:	bf0c      	ite	eq
 802e7cc:	f001 010f 	andeq.w	r1, r1, #15
 802e7d0:	1109      	asrne	r1, r1, #4
 802e7d2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802e7d6:	b2c9      	uxtb	r1, r1
 802e7d8:	910f      	str	r1, [sp, #60]	@ 0x3c
 802e7da:	f1bc 0f00 	cmp.w	ip, #0
 802e7de:	d019      	beq.n	802e814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802e7e0:	9908      	ldr	r1, [sp, #32]
 802e7e2:	440b      	add	r3, r1
 802e7e4:	0859      	lsrs	r1, r3, #1
 802e7e6:	5c79      	ldrb	r1, [r7, r1]
 802e7e8:	f013 0f01 	tst.w	r3, #1
 802e7ec:	bf0c      	ite	eq
 802e7ee:	f001 010f 	andeq.w	r1, r1, #15
 802e7f2:	1109      	asrne	r1, r1, #4
 802e7f4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802e7f8:	b2c9      	uxtb	r1, r1
 802e7fa:	3301      	adds	r3, #1
 802e7fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 802e7fe:	0859      	lsrs	r1, r3, #1
 802e800:	5c79      	ldrb	r1, [r7, r1]
 802e802:	07db      	lsls	r3, r3, #31
 802e804:	bf54      	ite	pl
 802e806:	f001 010f 	andpl.w	r1, r1, #15
 802e80a:	1109      	asrmi	r1, r1, #4
 802e80c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802e810:	b2c9      	uxtb	r1, r1
 802e812:	9110      	str	r1, [sp, #64]	@ 0x40
 802e814:	b280      	uxth	r0, r0
 802e816:	fa1f fc8c 	uxth.w	ip, ip
 802e81a:	fb00 f30c 	mul.w	r3, r0, ip
 802e81e:	0100      	lsls	r0, r0, #4
 802e820:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802e824:	fa1f fc8c 	uxth.w	ip, ip
 802e828:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802e82c:	eba1 010c 	sub.w	r1, r1, ip
 802e830:	fa1f fa81 	uxth.w	sl, r1
 802e834:	1ac0      	subs	r0, r0, r3
 802e836:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802e838:	b280      	uxth	r0, r0
 802e83a:	4348      	muls	r0, r1
 802e83c:	fb02 020a 	mla	r2, r2, sl, r0
 802e840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802e842:	fb0c 2c01 	mla	ip, ip, r1, r2
 802e846:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802e848:	fb03 c302 	mla	r3, r3, r2, ip
 802e84c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802e850:	2bff      	cmp	r3, #255	@ 0xff
 802e852:	d12b      	bne.n	802e8ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802e854:	4b13      	ldr	r3, [pc, #76]	@ (802e8a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802e856:	681a      	ldr	r2, [r3, #0]
 802e858:	4b13      	ldr	r3, [pc, #76]	@ (802e8a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802e85a:	0951      	lsrs	r1, r2, #5
 802e85c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802e860:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802e864:	430b      	orrs	r3, r1
 802e866:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802e86a:	4313      	orrs	r3, r2
 802e86c:	f8ae 3000 	strh.w	r3, [lr]
 802e870:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802e872:	f10e 0e02 	add.w	lr, lr, #2
 802e876:	441c      	add	r4, r3
 802e878:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802e87a:	f108 38ff 	add.w	r8, r8, #4294967295
 802e87e:	441e      	add	r6, r3
 802e880:	e6ce      	b.n	802e620 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802e882:	f1bc 0f00 	cmp.w	ip, #0
 802e886:	d0c5      	beq.n	802e814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802e888:	9908      	ldr	r1, [sp, #32]
 802e88a:	440b      	add	r3, r1
 802e88c:	0859      	lsrs	r1, r3, #1
 802e88e:	5c79      	ldrb	r1, [r7, r1]
 802e890:	07db      	lsls	r3, r3, #31
 802e892:	bf54      	ite	pl
 802e894:	f001 010f 	andpl.w	r1, r1, #15
 802e898:	1109      	asrmi	r1, r1, #4
 802e89a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802e89e:	b2c9      	uxtb	r1, r1
 802e8a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 802e8a2:	e7b7      	b.n	802e814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802e8a4:	2001200c 	.word	0x2001200c
 802e8a8:	fffff800 	.word	0xfffff800
 802e8ac:	2b00      	cmp	r3, #0
 802e8ae:	d0df      	beq.n	802e870 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802e8b0:	fa1f fa83 	uxth.w	sl, r3
 802e8b4:	43db      	mvns	r3, r3
 802e8b6:	4a20      	ldr	r2, [pc, #128]	@ (802e938 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802e8b8:	f8be c000 	ldrh.w	ip, [lr]
 802e8bc:	6810      	ldr	r0, [r2, #0]
 802e8be:	ea4f 212c 	mov.w	r1, ip, asr #8
 802e8c2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802e8c6:	fb12 f20a 	smulbb	r2, r2, sl
 802e8ca:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802e8ce:	b2c0      	uxtb	r0, r0
 802e8d0:	fb10 f00a 	smulbb	r0, r0, sl
 802e8d4:	b2db      	uxtb	r3, r3
 802e8d6:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802e8da:	fb01 2103 	mla	r1, r1, r3, r2
 802e8de:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802e8e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802e8e6:	fb1b fb0a 	smulbb	fp, fp, sl
 802e8ea:	fa5f fc8c 	uxtb.w	ip, ip
 802e8ee:	fb0c 0003 	mla	r0, ip, r3, r0
 802e8f2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802e8f6:	fb02 b203 	mla	r2, r2, r3, fp
 802e8fa:	b289      	uxth	r1, r1
 802e8fc:	b280      	uxth	r0, r0
 802e8fe:	1c4b      	adds	r3, r1, #1
 802e900:	f100 0b01 	add.w	fp, r0, #1
 802e904:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802e908:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802e90c:	b292      	uxth	r2, r2
 802e90e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802e912:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802e916:	ea4b 0101 	orr.w	r1, fp, r1
 802e91a:	f102 0b01 	add.w	fp, r2, #1
 802e91e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802e922:	0952      	lsrs	r2, r2, #5
 802e924:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802e928:	4311      	orrs	r1, r2
 802e92a:	f8ae 1000 	strh.w	r1, [lr]
 802e92e:	e79f      	b.n	802e870 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802e930:	b013      	add	sp, #76	@ 0x4c
 802e932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e936:	bf00      	nop
 802e938:	2001200c 	.word	0x2001200c

0802e93c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802e93c:	b570      	push	{r4, r5, r6, lr}
 802e93e:	1208      	asrs	r0, r1, #8
 802e940:	b29e      	uxth	r6, r3
 802e942:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802e946:	1213      	asrs	r3, r2, #8
 802e948:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802e94c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802e950:	fb13 f305 	smulbb	r3, r3, r5
 802e954:	fb10 f006 	smulbb	r0, r0, r6
 802e958:	10cc      	asrs	r4, r1, #3
 802e95a:	4418      	add	r0, r3
 802e95c:	10d3      	asrs	r3, r2, #3
 802e95e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802e962:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802e966:	fb13 f305 	smulbb	r3, r3, r5
 802e96a:	fb14 f406 	smulbb	r4, r4, r6
 802e96e:	00c9      	lsls	r1, r1, #3
 802e970:	00d2      	lsls	r2, r2, #3
 802e972:	441c      	add	r4, r3
 802e974:	b2d2      	uxtb	r2, r2
 802e976:	b2cb      	uxtb	r3, r1
 802e978:	fb12 f205 	smulbb	r2, r2, r5
 802e97c:	fb13 f306 	smulbb	r3, r3, r6
 802e980:	b280      	uxth	r0, r0
 802e982:	4413      	add	r3, r2
 802e984:	1c42      	adds	r2, r0, #1
 802e986:	b29b      	uxth	r3, r3
 802e988:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802e98c:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802e990:	1c58      	adds	r0, r3, #1
 802e992:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802e996:	b2a4      	uxth	r4, r4
 802e998:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802e99c:	4310      	orrs	r0, r2
 802e99e:	1c62      	adds	r2, r4, #1
 802e9a0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802e9a4:	0964      	lsrs	r4, r4, #5
 802e9a6:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802e9aa:	4320      	orrs	r0, r4
 802e9ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0802e9b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e9b4:	b08f      	sub	sp, #60	@ 0x3c
 802e9b6:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802e9ba:	461c      	mov	r4, r3
 802e9bc:	9004      	str	r0, [sp, #16]
 802e9be:	460d      	mov	r5, r1
 802e9c0:	4616      	mov	r6, r2
 802e9c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802e9c4:	2f00      	cmp	r7, #0
 802e9c6:	f000 80f5 	beq.w	802ebb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802e9ca:	f04f 0802 	mov.w	r8, #2
 802e9ce:	6820      	ldr	r0, [r4, #0]
 802e9d0:	6861      	ldr	r1, [r4, #4]
 802e9d2:	aa0a      	add	r2, sp, #40	@ 0x28
 802e9d4:	c203      	stmia	r2!, {r0, r1}
 802e9d6:	6818      	ldr	r0, [r3, #0]
 802e9d8:	6859      	ldr	r1, [r3, #4]
 802e9da:	aa0c      	add	r2, sp, #48	@ 0x30
 802e9dc:	c203      	stmia	r2!, {r0, r1}
 802e9de:	a80a      	add	r0, sp, #40	@ 0x28
 802e9e0:	f7ee ff74 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802e9e4:	4621      	mov	r1, r4
 802e9e6:	a80c      	add	r0, sp, #48	@ 0x30
 802e9e8:	f7ee ff98 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802e9ec:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802e9f0:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802e9f4:	f002 0301 	and.w	r3, r2, #1
 802e9f8:	9306      	str	r3, [sp, #24]
 802e9fa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802e9fe:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802ea02:	f003 0101 	and.w	r1, r3, #1
 802ea06:	9105      	str	r1, [sp, #20]
 802ea08:	9805      	ldr	r0, [sp, #20]
 802ea0a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802ea0e:	4403      	add	r3, r0
 802ea10:	fb01 2303 	mla	r3, r1, r3, r2
 802ea14:	fb93 f3f8 	sdiv	r3, r3, r8
 802ea18:	441d      	add	r5, r3
 802ea1a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802ea1e:	3604      	adds	r6, #4
 802ea20:	441a      	add	r2, r3
 802ea22:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802ea26:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802ea2a:	4419      	add	r1, r3
 802ea2c:	4b63      	ldr	r3, [pc, #396]	@ (802ebbc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802ea2e:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802ea32:	6818      	ldr	r0, [r3, #0]
 802ea34:	6803      	ldr	r3, [r0, #0]
 802ea36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ea38:	4798      	blx	r3
 802ea3a:	4a61      	ldr	r2, [pc, #388]	@ (802ebc0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802ea3c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802ea40:	8813      	ldrh	r3, [r2, #0]
 802ea42:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802ea46:	2fff      	cmp	r7, #255	@ 0xff
 802ea48:	fb03 a404 	mla	r4, r3, r4, sl
 802ea4c:	4611      	mov	r1, r2
 802ea4e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ea52:	fb03 fb0b 	mul.w	fp, r3, fp
 802ea56:	d06b      	beq.n	802eb30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802ea58:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802ea5c:	9303      	str	r3, [sp, #12]
 802ea5e:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802ea62:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802ea66:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802ea6a:	9b07      	ldr	r3, [sp, #28]
 802ea6c:	42a3      	cmp	r3, r4
 802ea6e:	f240 809c 	bls.w	802ebaa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802ea72:	9b06      	ldr	r3, [sp, #24]
 802ea74:	2b00      	cmp	r3, #0
 802ea76:	d039      	beq.n	802eaec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802ea78:	782b      	ldrb	r3, [r5, #0]
 802ea7a:	8822      	ldrh	r2, [r4, #0]
 802ea7c:	f003 030f 	and.w	r3, r3, #15
 802ea80:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ea84:	9b03      	ldr	r3, [sp, #12]
 802ea86:	9804      	ldr	r0, [sp, #16]
 802ea88:	9300      	str	r3, [sp, #0]
 802ea8a:	463b      	mov	r3, r7
 802ea8c:	f7ff ff56 	bl	802e93c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ea90:	f105 0801 	add.w	r8, r5, #1
 802ea94:	f824 0b02 	strh.w	r0, [r4], #2
 802ea98:	f109 3bff 	add.w	fp, r9, #4294967295
 802ea9c:	f1bb 0f01 	cmp.w	fp, #1
 802eaa0:	46a2      	mov	sl, r4
 802eaa2:	f104 0404 	add.w	r4, r4, #4
 802eaa6:	dd24      	ble.n	802eaf2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802eaa8:	f898 3000 	ldrb.w	r3, [r8]
 802eaac:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802eab0:	091b      	lsrs	r3, r3, #4
 802eab2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802eab6:	9b03      	ldr	r3, [sp, #12]
 802eab8:	9804      	ldr	r0, [sp, #16]
 802eaba:	9300      	str	r3, [sp, #0]
 802eabc:	463b      	mov	r3, r7
 802eabe:	f7ff ff3d 	bl	802e93c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802eac2:	f824 0c04 	strh.w	r0, [r4, #-4]
 802eac6:	f818 3b01 	ldrb.w	r3, [r8], #1
 802eaca:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802eace:	f003 030f 	and.w	r3, r3, #15
 802ead2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ead6:	9b03      	ldr	r3, [sp, #12]
 802ead8:	9804      	ldr	r0, [sp, #16]
 802eada:	9300      	str	r3, [sp, #0]
 802eadc:	463b      	mov	r3, r7
 802eade:	f7ff ff2d 	bl	802e93c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802eae2:	f1ab 0b02 	sub.w	fp, fp, #2
 802eae6:	f824 0c02 	strh.w	r0, [r4, #-2]
 802eaea:	e7d7      	b.n	802ea9c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802eaec:	46a8      	mov	r8, r5
 802eaee:	46cb      	mov	fp, r9
 802eaf0:	e7d4      	b.n	802ea9c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802eaf2:	d10e      	bne.n	802eb12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802eaf4:	f898 3000 	ldrb.w	r3, [r8]
 802eaf8:	f8ba 2000 	ldrh.w	r2, [sl]
 802eafc:	091b      	lsrs	r3, r3, #4
 802eafe:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802eb02:	9b03      	ldr	r3, [sp, #12]
 802eb04:	9804      	ldr	r0, [sp, #16]
 802eb06:	9300      	str	r3, [sp, #0]
 802eb08:	463b      	mov	r3, r7
 802eb0a:	f7ff ff17 	bl	802e93c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802eb0e:	f82a 0b02 	strh.w	r0, [sl], #2
 802eb12:	9b08      	ldr	r3, [sp, #32]
 802eb14:	9a05      	ldr	r2, [sp, #20]
 802eb16:	881c      	ldrh	r4, [r3, #0]
 802eb18:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802eb1c:	eba4 0409 	sub.w	r4, r4, r9
 802eb20:	4413      	add	r3, r2
 802eb22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802eb24:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802eb28:	fb93 f3f2 	sdiv	r3, r3, r2
 802eb2c:	441d      	add	r5, r3
 802eb2e:	e79c      	b.n	802ea6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802eb30:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802eb34:	45a3      	cmp	fp, r4
 802eb36:	d938      	bls.n	802ebaa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802eb38:	9b06      	ldr	r3, [sp, #24]
 802eb3a:	b1f3      	cbz	r3, 802eb7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 802eb3c:	782b      	ldrb	r3, [r5, #0]
 802eb3e:	1c6a      	adds	r2, r5, #1
 802eb40:	f003 030f 	and.w	r3, r3, #15
 802eb44:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802eb48:	f109 30ff 	add.w	r0, r9, #4294967295
 802eb4c:	8023      	strh	r3, [r4, #0]
 802eb4e:	3402      	adds	r4, #2
 802eb50:	2801      	cmp	r0, #1
 802eb52:	4623      	mov	r3, r4
 802eb54:	f104 0404 	add.w	r4, r4, #4
 802eb58:	dd12      	ble.n	802eb80 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 802eb5a:	7813      	ldrb	r3, [r2, #0]
 802eb5c:	3802      	subs	r0, #2
 802eb5e:	091b      	lsrs	r3, r3, #4
 802eb60:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802eb64:	f824 3c04 	strh.w	r3, [r4, #-4]
 802eb68:	f812 3b01 	ldrb.w	r3, [r2], #1
 802eb6c:	f003 030f 	and.w	r3, r3, #15
 802eb70:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802eb74:	f824 3c02 	strh.w	r3, [r4, #-2]
 802eb78:	e7ea      	b.n	802eb50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802eb7a:	462a      	mov	r2, r5
 802eb7c:	4648      	mov	r0, r9
 802eb7e:	e7e7      	b.n	802eb50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802eb80:	d106      	bne.n	802eb90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802eb82:	7812      	ldrb	r2, [r2, #0]
 802eb84:	3302      	adds	r3, #2
 802eb86:	0912      	lsrs	r2, r2, #4
 802eb88:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802eb8c:	f823 2c02 	strh.w	r2, [r3, #-2]
 802eb90:	880c      	ldrh	r4, [r1, #0]
 802eb92:	9a05      	ldr	r2, [sp, #20]
 802eb94:	eba4 0409 	sub.w	r4, r4, r9
 802eb98:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802eb9c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802eba0:	4413      	add	r3, r2
 802eba2:	fb93 f3f8 	sdiv	r3, r3, r8
 802eba6:	441d      	add	r5, r3
 802eba8:	e7c4      	b.n	802eb34 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802ebaa:	4b04      	ldr	r3, [pc, #16]	@ (802ebbc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802ebac:	6818      	ldr	r0, [r3, #0]
 802ebae:	6803      	ldr	r3, [r0, #0]
 802ebb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802ebb2:	4798      	blx	r3
 802ebb4:	b00f      	add	sp, #60	@ 0x3c
 802ebb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ebba:	bf00      	nop
 802ebbc:	20011ffc 	.word	0x20011ffc
 802ebc0:	20011ff6 	.word	0x20011ff6

0802ebc4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802ebc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ebc6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802ebca:	0a0f      	lsrs	r7, r1, #8
 802ebcc:	2dff      	cmp	r5, #255	@ 0xff
 802ebce:	d10c      	bne.n	802ebea <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802ebd0:	2bff      	cmp	r3, #255	@ 0xff
 802ebd2:	d10a      	bne.n	802ebea <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802ebd4:	4b25      	ldr	r3, [pc, #148]	@ (802ec6c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802ebd6:	0948      	lsrs	r0, r1, #5
 802ebd8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802ebdc:	403b      	ands	r3, r7
 802ebde:	4318      	orrs	r0, r3
 802ebe0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802ebe4:	4308      	orrs	r0, r1
 802ebe6:	b280      	uxth	r0, r0
 802ebe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ebea:	fb15 f503 	smulbb	r5, r5, r3
 802ebee:	b2ab      	uxth	r3, r5
 802ebf0:	1c5d      	adds	r5, r3, #1
 802ebf2:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802ebf6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802ebfa:	fa1f fc85 	uxth.w	ip, r5
 802ebfe:	43ed      	mvns	r5, r5
 802ec00:	1214      	asrs	r4, r2, #8
 802ec02:	10d6      	asrs	r6, r2, #3
 802ec04:	00d0      	lsls	r0, r2, #3
 802ec06:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802ec0a:	fb12 f20c 	smulbb	r2, r2, ip
 802ec0e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802ec12:	b2eb      	uxtb	r3, r5
 802ec14:	b2c0      	uxtb	r0, r0
 802ec16:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802ec1a:	fb04 2403 	mla	r4, r4, r3, r2
 802ec1e:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802ec22:	b2c8      	uxtb	r0, r1
 802ec24:	b2fd      	uxtb	r5, r7
 802ec26:	fb10 f00c 	smulbb	r0, r0, ip
 802ec2a:	fb15 f50c 	smulbb	r5, r5, ip
 802ec2e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802ec32:	fb02 0003 	mla	r0, r2, r3, r0
 802ec36:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802ec3a:	fb06 5503 	mla	r5, r6, r3, r5
 802ec3e:	b2a4      	uxth	r4, r4
 802ec40:	b283      	uxth	r3, r0
 802ec42:	1c60      	adds	r0, r4, #1
 802ec44:	b2ad      	uxth	r5, r5
 802ec46:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802ec4a:	1c58      	adds	r0, r3, #1
 802ec4c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802ec50:	1c6b      	adds	r3, r5, #1
 802ec52:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802ec56:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802ec5a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ec5e:	096d      	lsrs	r5, r5, #5
 802ec60:	4320      	orrs	r0, r4
 802ec62:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802ec66:	4328      	orrs	r0, r5
 802ec68:	e7be      	b.n	802ebe8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802ec6a:	bf00      	nop
 802ec6c:	00fff800 	.word	0x00fff800

0802ec70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ec74:	461c      	mov	r4, r3
 802ec76:	f04f 0a02 	mov.w	sl, #2
 802ec7a:	b08d      	sub	sp, #52	@ 0x34
 802ec7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ec7e:	460d      	mov	r5, r1
 802ec80:	4680      	mov	r8, r0
 802ec82:	6861      	ldr	r1, [r4, #4]
 802ec84:	6820      	ldr	r0, [r4, #0]
 802ec86:	4616      	mov	r6, r2
 802ec88:	aa08      	add	r2, sp, #32
 802ec8a:	c203      	stmia	r2!, {r0, r1}
 802ec8c:	6818      	ldr	r0, [r3, #0]
 802ec8e:	6859      	ldr	r1, [r3, #4]
 802ec90:	aa0a      	add	r2, sp, #40	@ 0x28
 802ec92:	c203      	stmia	r2!, {r0, r1}
 802ec94:	a808      	add	r0, sp, #32
 802ec96:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802ec9a:	f7ee fe17 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ec9e:	4621      	mov	r1, r4
 802eca0:	a80a      	add	r0, sp, #40	@ 0x28
 802eca2:	f7ee fe3b 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802eca6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802ecaa:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802ecae:	f002 0301 	and.w	r3, r2, #1
 802ecb2:	9303      	str	r3, [sp, #12]
 802ecb4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802ecb8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802ecbc:	f003 0101 	and.w	r1, r3, #1
 802ecc0:	9102      	str	r1, [sp, #8]
 802ecc2:	9802      	ldr	r0, [sp, #8]
 802ecc4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802ecc8:	4403      	add	r3, r0
 802ecca:	fb01 2303 	mla	r3, r1, r3, r2
 802ecce:	fb93 f3fa 	sdiv	r3, r3, sl
 802ecd2:	441d      	add	r5, r3
 802ecd4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ecd8:	3604      	adds	r6, #4
 802ecda:	441a      	add	r2, r3
 802ecdc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802ece0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802ece4:	4a3e      	ldr	r2, [pc, #248]	@ (802ede0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802ece6:	4419      	add	r1, r3
 802ece8:	6810      	ldr	r0, [r2, #0]
 802ecea:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 802ecee:	6803      	ldr	r3, [r0, #0]
 802ecf0:	9205      	str	r2, [sp, #20]
 802ecf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ecf4:	4798      	blx	r3
 802ecf6:	4b3b      	ldr	r3, [pc, #236]	@ (802ede4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802ecf8:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802ecfc:	8819      	ldrh	r1, [r3, #0]
 802ecfe:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802ed02:	434f      	muls	r7, r1
 802ed04:	fb01 c404 	mla	r4, r1, r4, ip
 802ed08:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802ed0c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ed10:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802ed14:	9204      	str	r2, [sp, #16]
 802ed16:	9b04      	ldr	r3, [sp, #16]
 802ed18:	429c      	cmp	r4, r3
 802ed1a:	d258      	bcs.n	802edce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802ed1c:	9b03      	ldr	r3, [sp, #12]
 802ed1e:	2b00      	cmp	r3, #0
 802ed20:	d034      	beq.n	802ed8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802ed22:	782b      	ldrb	r3, [r5, #0]
 802ed24:	1c6f      	adds	r7, r5, #1
 802ed26:	f003 030f 	and.w	r3, r3, #15
 802ed2a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ed2e:	0e0b      	lsrs	r3, r1, #24
 802ed30:	d006      	beq.n	802ed40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802ed32:	8822      	ldrh	r2, [r4, #0]
 802ed34:	4640      	mov	r0, r8
 802ed36:	9300      	str	r3, [sp, #0]
 802ed38:	464b      	mov	r3, r9
 802ed3a:	f7ff ff43 	bl	802ebc4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ed3e:	8020      	strh	r0, [r4, #0]
 802ed40:	3402      	adds	r4, #2
 802ed42:	f10b 3aff 	add.w	sl, fp, #4294967295
 802ed46:	f1ba 0f01 	cmp.w	sl, #1
 802ed4a:	dd22      	ble.n	802ed92 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802ed4c:	783b      	ldrb	r3, [r7, #0]
 802ed4e:	091b      	lsrs	r3, r3, #4
 802ed50:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ed54:	0e0b      	lsrs	r3, r1, #24
 802ed56:	d006      	beq.n	802ed66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802ed58:	8822      	ldrh	r2, [r4, #0]
 802ed5a:	4640      	mov	r0, r8
 802ed5c:	9300      	str	r3, [sp, #0]
 802ed5e:	464b      	mov	r3, r9
 802ed60:	f7ff ff30 	bl	802ebc4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ed64:	8020      	strh	r0, [r4, #0]
 802ed66:	f817 3b01 	ldrb.w	r3, [r7], #1
 802ed6a:	f003 030f 	and.w	r3, r3, #15
 802ed6e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ed72:	0e0b      	lsrs	r3, r1, #24
 802ed74:	d006      	beq.n	802ed84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802ed76:	8862      	ldrh	r2, [r4, #2]
 802ed78:	4640      	mov	r0, r8
 802ed7a:	9300      	str	r3, [sp, #0]
 802ed7c:	464b      	mov	r3, r9
 802ed7e:	f7ff ff21 	bl	802ebc4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ed82:	8060      	strh	r0, [r4, #2]
 802ed84:	3404      	adds	r4, #4
 802ed86:	f1aa 0a02 	sub.w	sl, sl, #2
 802ed8a:	e7dc      	b.n	802ed46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ed8c:	462f      	mov	r7, r5
 802ed8e:	46da      	mov	sl, fp
 802ed90:	e7d9      	b.n	802ed46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802ed92:	d10d      	bne.n	802edb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802ed94:	783b      	ldrb	r3, [r7, #0]
 802ed96:	091b      	lsrs	r3, r3, #4
 802ed98:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ed9c:	0e0b      	lsrs	r3, r1, #24
 802ed9e:	d006      	beq.n	802edae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802eda0:	8822      	ldrh	r2, [r4, #0]
 802eda2:	4640      	mov	r0, r8
 802eda4:	9300      	str	r3, [sp, #0]
 802eda6:	464b      	mov	r3, r9
 802eda8:	f7ff ff0c 	bl	802ebc4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802edac:	8020      	strh	r0, [r4, #0]
 802edae:	3402      	adds	r4, #2
 802edb0:	9b06      	ldr	r3, [sp, #24]
 802edb2:	9a02      	ldr	r2, [sp, #8]
 802edb4:	881b      	ldrh	r3, [r3, #0]
 802edb6:	eba3 030b 	sub.w	r3, r3, fp
 802edba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802edbe:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802edc2:	4413      	add	r3, r2
 802edc4:	9a07      	ldr	r2, [sp, #28]
 802edc6:	fb93 f3f2 	sdiv	r3, r3, r2
 802edca:	441d      	add	r5, r3
 802edcc:	e7a3      	b.n	802ed16 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802edce:	9b05      	ldr	r3, [sp, #20]
 802edd0:	6818      	ldr	r0, [r3, #0]
 802edd2:	6803      	ldr	r3, [r0, #0]
 802edd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802edd6:	4798      	blx	r3
 802edd8:	b00d      	add	sp, #52	@ 0x34
 802edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802edde:	bf00      	nop
 802ede0:	20011ffc 	.word	0x20011ffc
 802ede4:	20011ff6 	.word	0x20011ff6

0802ede8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802ede8:	b570      	push	{r4, r5, r6, lr}
 802edea:	788d      	ldrb	r5, [r1, #2]
 802edec:	1214      	asrs	r4, r2, #8
 802edee:	fb15 f503 	smulbb	r5, r5, r3
 802edf2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802edf6:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802edfa:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802edfe:	fb04 5506 	mla	r5, r4, r6, r5
 802ee02:	784c      	ldrb	r4, [r1, #1]
 802ee04:	7809      	ldrb	r1, [r1, #0]
 802ee06:	fb14 f403 	smulbb	r4, r4, r3
 802ee0a:	fb11 f303 	smulbb	r3, r1, r3
 802ee0e:	10d0      	asrs	r0, r2, #3
 802ee10:	00d2      	lsls	r2, r2, #3
 802ee12:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802ee16:	b2d2      	uxtb	r2, r2
 802ee18:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802ee1c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802ee20:	fb00 4406 	mla	r4, r0, r6, r4
 802ee24:	fb02 3306 	mla	r3, r2, r6, r3
 802ee28:	b2ad      	uxth	r5, r5
 802ee2a:	b29b      	uxth	r3, r3
 802ee2c:	b2a4      	uxth	r4, r4
 802ee2e:	1c68      	adds	r0, r5, #1
 802ee30:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802ee34:	1c62      	adds	r2, r4, #1
 802ee36:	1c58      	adds	r0, r3, #1
 802ee38:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802ee3c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802ee40:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802ee44:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ee48:	0964      	lsrs	r4, r4, #5
 802ee4a:	4328      	orrs	r0, r5
 802ee4c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802ee50:	4320      	orrs	r0, r4
 802ee52:	bd70      	pop	{r4, r5, r6, pc}

0802ee54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee58:	b08f      	sub	sp, #60	@ 0x3c
 802ee5a:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802ee5e:	461c      	mov	r4, r3
 802ee60:	4682      	mov	sl, r0
 802ee62:	460e      	mov	r6, r1
 802ee64:	4615      	mov	r5, r2
 802ee66:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802ee68:	2f00      	cmp	r7, #0
 802ee6a:	f000 8141 	beq.w	802f0f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802ee6e:	f04f 0802 	mov.w	r8, #2
 802ee72:	6820      	ldr	r0, [r4, #0]
 802ee74:	6861      	ldr	r1, [r4, #4]
 802ee76:	aa0a      	add	r2, sp, #40	@ 0x28
 802ee78:	c203      	stmia	r2!, {r0, r1}
 802ee7a:	6818      	ldr	r0, [r3, #0]
 802ee7c:	6859      	ldr	r1, [r3, #4]
 802ee7e:	aa0c      	add	r2, sp, #48	@ 0x30
 802ee80:	c203      	stmia	r2!, {r0, r1}
 802ee82:	a80a      	add	r0, sp, #40	@ 0x28
 802ee84:	f7ee fd22 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ee88:	4621      	mov	r1, r4
 802ee8a:	a80c      	add	r0, sp, #48	@ 0x30
 802ee8c:	f7ee fd46 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ee90:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802ee94:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802ee98:	f002 0301 	and.w	r3, r2, #1
 802ee9c:	9306      	str	r3, [sp, #24]
 802ee9e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802eea2:	3504      	adds	r5, #4
 802eea4:	f003 0101 	and.w	r1, r3, #1
 802eea8:	9105      	str	r1, [sp, #20]
 802eeaa:	9805      	ldr	r0, [sp, #20]
 802eeac:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802eeb0:	4403      	add	r3, r0
 802eeb2:	fb01 2303 	mla	r3, r1, r3, r2
 802eeb6:	fb93 f3f8 	sdiv	r3, r3, r8
 802eeba:	441e      	add	r6, r3
 802eebc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802eec0:	441a      	add	r2, r3
 802eec2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802eec6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802eeca:	4419      	add	r1, r3
 802eecc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802eed0:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802eed4:	9303      	str	r3, [sp, #12]
 802eed6:	4b88      	ldr	r3, [pc, #544]	@ (802f0f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802eed8:	6818      	ldr	r0, [r3, #0]
 802eeda:	6803      	ldr	r3, [r0, #0]
 802eedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802eede:	4798      	blx	r3
 802eee0:	4a86      	ldr	r2, [pc, #536]	@ (802f0fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802eee2:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802eee6:	8813      	ldrh	r3, [r2, #0]
 802eee8:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802eeec:	2fff      	cmp	r7, #255	@ 0xff
 802eeee:	fb03 9404 	mla	r4, r3, r4, r9
 802eef2:	4694      	mov	ip, r2
 802eef4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802eef8:	fb03 f30b 	mul.w	r3, r3, fp
 802eefc:	d071      	beq.n	802efe2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802eefe:	43f9      	mvns	r1, r7
 802ef00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802ef04:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802ef08:	b2c9      	uxtb	r1, r1
 802ef0a:	9104      	str	r1, [sp, #16]
 802ef0c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802ef10:	9b07      	ldr	r3, [sp, #28]
 802ef12:	42a3      	cmp	r3, r4
 802ef14:	f240 80e7 	bls.w	802f0e6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802ef18:	9b06      	ldr	r3, [sp, #24]
 802ef1a:	2b00      	cmp	r3, #0
 802ef1c:	d03d      	beq.n	802ef9a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802ef1e:	7831      	ldrb	r1, [r6, #0]
 802ef20:	9b04      	ldr	r3, [sp, #16]
 802ef22:	f001 010f 	and.w	r1, r1, #15
 802ef26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ef2a:	8822      	ldrh	r2, [r4, #0]
 802ef2c:	4429      	add	r1, r5
 802ef2e:	9300      	str	r3, [sp, #0]
 802ef30:	4650      	mov	r0, sl
 802ef32:	463b      	mov	r3, r7
 802ef34:	f7ff ff58 	bl	802ede8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ef38:	9b03      	ldr	r3, [sp, #12]
 802ef3a:	f106 0801 	add.w	r8, r6, #1
 802ef3e:	f824 0b02 	strh.w	r0, [r4], #2
 802ef42:	f103 3bff 	add.w	fp, r3, #4294967295
 802ef46:	f1bb 0f01 	cmp.w	fp, #1
 802ef4a:	46a1      	mov	r9, r4
 802ef4c:	f104 0404 	add.w	r4, r4, #4
 802ef50:	dd27      	ble.n	802efa2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802ef52:	f898 1000 	ldrb.w	r1, [r8]
 802ef56:	9b04      	ldr	r3, [sp, #16]
 802ef58:	0909      	lsrs	r1, r1, #4
 802ef5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ef5e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802ef62:	4429      	add	r1, r5
 802ef64:	9300      	str	r3, [sp, #0]
 802ef66:	4650      	mov	r0, sl
 802ef68:	463b      	mov	r3, r7
 802ef6a:	f7ff ff3d 	bl	802ede8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ef6e:	f824 0c04 	strh.w	r0, [r4, #-4]
 802ef72:	f818 1b01 	ldrb.w	r1, [r8], #1
 802ef76:	9b04      	ldr	r3, [sp, #16]
 802ef78:	f001 010f 	and.w	r1, r1, #15
 802ef7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802ef80:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802ef84:	4429      	add	r1, r5
 802ef86:	9300      	str	r3, [sp, #0]
 802ef88:	4650      	mov	r0, sl
 802ef8a:	463b      	mov	r3, r7
 802ef8c:	f7ff ff2c 	bl	802ede8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802ef90:	f1ab 0b02 	sub.w	fp, fp, #2
 802ef94:	f824 0c02 	strh.w	r0, [r4, #-2]
 802ef98:	e7d5      	b.n	802ef46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802ef9a:	46b0      	mov	r8, r6
 802ef9c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802efa0:	e7d1      	b.n	802ef46 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802efa2:	d10f      	bne.n	802efc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802efa4:	f898 1000 	ldrb.w	r1, [r8]
 802efa8:	9b04      	ldr	r3, [sp, #16]
 802efaa:	0909      	lsrs	r1, r1, #4
 802efac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802efb0:	f8b9 2000 	ldrh.w	r2, [r9]
 802efb4:	4429      	add	r1, r5
 802efb6:	9300      	str	r3, [sp, #0]
 802efb8:	4650      	mov	r0, sl
 802efba:	463b      	mov	r3, r7
 802efbc:	f7ff ff14 	bl	802ede8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802efc0:	f829 0b02 	strh.w	r0, [r9], #2
 802efc4:	9b08      	ldr	r3, [sp, #32]
 802efc6:	9a05      	ldr	r2, [sp, #20]
 802efc8:	881c      	ldrh	r4, [r3, #0]
 802efca:	9b03      	ldr	r3, [sp, #12]
 802efcc:	1ae4      	subs	r4, r4, r3
 802efce:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802efd2:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802efd6:	4413      	add	r3, r2
 802efd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802efda:	fb93 f3f2 	sdiv	r3, r3, r2
 802efde:	441e      	add	r6, r3
 802efe0:	e796      	b.n	802ef10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802efe2:	4f47      	ldr	r7, [pc, #284]	@ (802f100 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802efe4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802efe8:	42a3      	cmp	r3, r4
 802efea:	d97c      	bls.n	802f0e6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802efec:	9a06      	ldr	r2, [sp, #24]
 802efee:	2a00      	cmp	r2, #0
 802eff0:	d054      	beq.n	802f09c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802eff2:	7830      	ldrb	r0, [r6, #0]
 802eff4:	1c71      	adds	r1, r6, #1
 802eff6:	f000 000f 	and.w	r0, r0, #15
 802effa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802effe:	eb05 0e00 	add.w	lr, r5, r0
 802f002:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802f006:	f89e e001 	ldrb.w	lr, [lr, #1]
 802f00a:	5c28      	ldrb	r0, [r5, r0]
 802f00c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802f010:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802f014:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802f018:	ea42 020e 	orr.w	r2, r2, lr
 802f01c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802f020:	f824 2b02 	strh.w	r2, [r4], #2
 802f024:	9a03      	ldr	r2, [sp, #12]
 802f026:	f102 3eff 	add.w	lr, r2, #4294967295
 802f02a:	f1be 0f01 	cmp.w	lr, #1
 802f02e:	4620      	mov	r0, r4
 802f030:	f104 0404 	add.w	r4, r4, #4
 802f034:	dd36      	ble.n	802f0a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802f036:	7808      	ldrb	r0, [r1, #0]
 802f038:	f1ae 0e02 	sub.w	lr, lr, #2
 802f03c:	0900      	lsrs	r0, r0, #4
 802f03e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802f042:	eb05 0a00 	add.w	sl, r5, r0
 802f046:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802f04a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802f04e:	00d2      	lsls	r2, r2, #3
 802f050:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802f054:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802f058:	ea49 0202 	orr.w	r2, r9, r2
 802f05c:	f815 9000 	ldrb.w	r9, [r5, r0]
 802f060:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802f064:	f824 2c04 	strh.w	r2, [r4, #-4]
 802f068:	f811 0b01 	ldrb.w	r0, [r1], #1
 802f06c:	f000 000f 	and.w	r0, r0, #15
 802f070:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802f074:	eb05 0a00 	add.w	sl, r5, r0
 802f078:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802f07c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802f080:	00d2      	lsls	r2, r2, #3
 802f082:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802f086:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802f08a:	ea49 0202 	orr.w	r2, r9, r2
 802f08e:	f815 9000 	ldrb.w	r9, [r5, r0]
 802f092:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802f096:	f824 2c02 	strh.w	r2, [r4, #-2]
 802f09a:	e7c6      	b.n	802f02a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802f09c:	4631      	mov	r1, r6
 802f09e:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802f0a2:	e7c2      	b.n	802f02a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802f0a4:	d111      	bne.n	802f0ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802f0a6:	7809      	ldrb	r1, [r1, #0]
 802f0a8:	0909      	lsrs	r1, r1, #4
 802f0aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802f0ae:	186c      	adds	r4, r5, r1
 802f0b0:	78a2      	ldrb	r2, [r4, #2]
 802f0b2:	7864      	ldrb	r4, [r4, #1]
 802f0b4:	5c69      	ldrb	r1, [r5, r1]
 802f0b6:	00e4      	lsls	r4, r4, #3
 802f0b8:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802f0bc:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802f0c0:	4322      	orrs	r2, r4
 802f0c2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802f0c6:	f820 2b02 	strh.w	r2, [r0], #2
 802f0ca:	9a03      	ldr	r2, [sp, #12]
 802f0cc:	f8bc 4000 	ldrh.w	r4, [ip]
 802f0d0:	9905      	ldr	r1, [sp, #20]
 802f0d2:	1aa4      	subs	r4, r4, r2
 802f0d4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802f0d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802f0dc:	440a      	add	r2, r1
 802f0de:	fb92 f2f8 	sdiv	r2, r2, r8
 802f0e2:	4416      	add	r6, r2
 802f0e4:	e780      	b.n	802efe8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802f0e6:	4b04      	ldr	r3, [pc, #16]	@ (802f0f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802f0e8:	6818      	ldr	r0, [r3, #0]
 802f0ea:	6803      	ldr	r3, [r0, #0]
 802f0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f0ee:	4798      	blx	r3
 802f0f0:	b00f      	add	sp, #60	@ 0x3c
 802f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f0f6:	bf00      	nop
 802f0f8:	20011ffc 	.word	0x20011ffc
 802f0fc:	20011ff6 	.word	0x20011ff6
 802f100:	fffff800 	.word	0xfffff800

0802f104 <CRC_Lock>:
 802f104:	b530      	push	{r4, r5, lr}
 802f106:	4a2d      	ldr	r2, [pc, #180]	@ (802f1bc <CRC_Lock+0xb8>)
 802f108:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802f10c:	6813      	ldr	r3, [r2, #0]
 802f10e:	f023 0301 	bic.w	r3, r3, #1
 802f112:	6013      	str	r3, [r2, #0]
 802f114:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802f118:	4b29      	ldr	r3, [pc, #164]	@ (802f1c0 <CRC_Lock+0xbc>)
 802f11a:	681c      	ldr	r4, [r3, #0]
 802f11c:	4014      	ands	r4, r2
 802f11e:	42ac      	cmp	r4, r5
 802f120:	d005      	beq.n	802f12e <CRC_Lock+0x2a>
 802f122:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802f126:	681c      	ldr	r4, [r3, #0]
 802f128:	4014      	ands	r4, r2
 802f12a:	42ac      	cmp	r4, r5
 802f12c:	d125      	bne.n	802f17a <CRC_Lock+0x76>
 802f12e:	4b25      	ldr	r3, [pc, #148]	@ (802f1c4 <CRC_Lock+0xc0>)
 802f130:	681b      	ldr	r3, [r3, #0]
 802f132:	2b00      	cmp	r3, #0
 802f134:	d139      	bne.n	802f1aa <CRC_Lock+0xa6>
 802f136:	4b24      	ldr	r3, [pc, #144]	@ (802f1c8 <CRC_Lock+0xc4>)
 802f138:	681a      	ldr	r2, [r3, #0]
 802f13a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802f13e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802f142:	d00d      	beq.n	802f160 <CRC_Lock+0x5c>
 802f144:	f240 4483 	movw	r4, #1155	@ 0x483
 802f148:	681a      	ldr	r2, [r3, #0]
 802f14a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802f14e:	42a2      	cmp	r2, r4
 802f150:	d006      	beq.n	802f160 <CRC_Lock+0x5c>
 802f152:	f240 4285 	movw	r2, #1157	@ 0x485
 802f156:	681b      	ldr	r3, [r3, #0]
 802f158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802f15c:	4293      	cmp	r3, r2
 802f15e:	d124      	bne.n	802f1aa <CRC_Lock+0xa6>
 802f160:	2201      	movs	r2, #1
 802f162:	4b1a      	ldr	r3, [pc, #104]	@ (802f1cc <CRC_Lock+0xc8>)
 802f164:	601a      	str	r2, [r3, #0]
 802f166:	681a      	ldr	r2, [r3, #0]
 802f168:	2a00      	cmp	r2, #0
 802f16a:	d1fc      	bne.n	802f166 <CRC_Lock+0x62>
 802f16c:	4b18      	ldr	r3, [pc, #96]	@ (802f1d0 <CRC_Lock+0xcc>)
 802f16e:	6018      	str	r0, [r3, #0]
 802f170:	6818      	ldr	r0, [r3, #0]
 802f172:	1a43      	subs	r3, r0, r1
 802f174:	4258      	negs	r0, r3
 802f176:	4158      	adcs	r0, r3
 802f178:	e00e      	b.n	802f198 <CRC_Lock+0x94>
 802f17a:	681b      	ldr	r3, [r3, #0]
 802f17c:	4013      	ands	r3, r2
 802f17e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802f182:	4293      	cmp	r3, r2
 802f184:	d111      	bne.n	802f1aa <CRC_Lock+0xa6>
 802f186:	f240 4286 	movw	r2, #1158	@ 0x486
 802f18a:	4b12      	ldr	r3, [pc, #72]	@ (802f1d4 <CRC_Lock+0xd0>)
 802f18c:	681b      	ldr	r3, [r3, #0]
 802f18e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802f192:	4293      	cmp	r3, r2
 802f194:	d001      	beq.n	802f19a <CRC_Lock+0x96>
 802f196:	2000      	movs	r0, #0
 802f198:	bd30      	pop	{r4, r5, pc}
 802f19a:	2201      	movs	r2, #1
 802f19c:	4b0e      	ldr	r3, [pc, #56]	@ (802f1d8 <CRC_Lock+0xd4>)
 802f19e:	601a      	str	r2, [r3, #0]
 802f1a0:	681a      	ldr	r2, [r3, #0]
 802f1a2:	2a00      	cmp	r2, #0
 802f1a4:	d1fc      	bne.n	802f1a0 <CRC_Lock+0x9c>
 802f1a6:	4b0d      	ldr	r3, [pc, #52]	@ (802f1dc <CRC_Lock+0xd8>)
 802f1a8:	e7e1      	b.n	802f16e <CRC_Lock+0x6a>
 802f1aa:	2201      	movs	r2, #1
 802f1ac:	4b0c      	ldr	r3, [pc, #48]	@ (802f1e0 <CRC_Lock+0xdc>)
 802f1ae:	601a      	str	r2, [r3, #0]
 802f1b0:	681a      	ldr	r2, [r3, #0]
 802f1b2:	2a00      	cmp	r2, #0
 802f1b4:	d1fc      	bne.n	802f1b0 <CRC_Lock+0xac>
 802f1b6:	4b0b      	ldr	r3, [pc, #44]	@ (802f1e4 <CRC_Lock+0xe0>)
 802f1b8:	e7d9      	b.n	802f16e <CRC_Lock+0x6a>
 802f1ba:	bf00      	nop
 802f1bc:	e0002000 	.word	0xe0002000
 802f1c0:	e000ed00 	.word	0xe000ed00
 802f1c4:	e0042000 	.word	0xe0042000
 802f1c8:	5c001000 	.word	0x5c001000
 802f1cc:	58024c08 	.word	0x58024c08
 802f1d0:	58024c00 	.word	0x58024c00
 802f1d4:	46008ff0 	.word	0x46008ff0
 802f1d8:	46024c08 	.word	0x46024c08
 802f1dc:	46024c00 	.word	0x46024c00
 802f1e0:	40023008 	.word	0x40023008
 802f1e4:	40023000 	.word	0x40023000

0802f1e8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802f1e8:	6101      	str	r1, [r0, #16]
 802f1ea:	4770      	bx	lr

0802f1ec <_ZN8touchgfx8Gestures4tickEv>:
 802f1ec:	7b83      	ldrb	r3, [r0, #14]
 802f1ee:	b14b      	cbz	r3, 802f204 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802f1f0:	8903      	ldrh	r3, [r0, #8]
 802f1f2:	3301      	adds	r3, #1
 802f1f4:	b29b      	uxth	r3, r3
 802f1f6:	2b07      	cmp	r3, #7
 802f1f8:	8103      	strh	r3, [r0, #8]
 802f1fa:	bf81      	itttt	hi
 802f1fc:	2300      	movhi	r3, #0
 802f1fe:	8143      	strhhi	r3, [r0, #10]
 802f200:	8183      	strhhi	r3, [r0, #12]
 802f202:	7383      	strbhi	r3, [r0, #14]
 802f204:	4770      	bx	lr
	...

0802f208 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802f208:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802f20c:	4698      	mov	r8, r3
 802f20e:	4604      	mov	r4, r0
 802f210:	8883      	ldrh	r3, [r0, #4]
 802f212:	460e      	mov	r6, r1
 802f214:	88c1      	ldrh	r1, [r0, #6]
 802f216:	2000      	movs	r0, #0
 802f218:	f8ad 3006 	strh.w	r3, [sp, #6]
 802f21c:	eba8 0303 	sub.w	r3, r8, r3
 802f220:	b21b      	sxth	r3, r3
 802f222:	4617      	mov	r7, r2
 802f224:	4a17      	ldr	r2, [pc, #92]	@ (802f284 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802f226:	2b00      	cmp	r3, #0
 802f228:	bfb8      	it	lt
 802f22a:	425b      	neglt	r3, r3
 802f22c:	9200      	str	r2, [sp, #0]
 802f22e:	8aa2      	ldrh	r2, [r4, #20]
 802f230:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802f234:	b21b      	sxth	r3, r3
 802f236:	4293      	cmp	r3, r2
 802f238:	f88d 0004 	strb.w	r0, [sp, #4]
 802f23c:	f8ad 1008 	strh.w	r1, [sp, #8]
 802f240:	f8ad 800a 	strh.w	r8, [sp, #10]
 802f244:	f8ad 500c 	strh.w	r5, [sp, #12]
 802f248:	dc07      	bgt.n	802f25a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802f24a:	1a69      	subs	r1, r5, r1
 802f24c:	b209      	sxth	r1, r1
 802f24e:	2900      	cmp	r1, #0
 802f250:	bfb8      	it	lt
 802f252:	4249      	neglt	r1, r1
 802f254:	b209      	sxth	r1, r1
 802f256:	428a      	cmp	r2, r1
 802f258:	da10      	bge.n	802f27c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802f25a:	6920      	ldr	r0, [r4, #16]
 802f25c:	4669      	mov	r1, sp
 802f25e:	6803      	ldr	r3, [r0, #0]
 802f260:	eba8 0606 	sub.w	r6, r8, r6
 802f264:	685b      	ldr	r3, [r3, #4]
 802f266:	4798      	blx	r3
 802f268:	2300      	movs	r3, #0
 802f26a:	2001      	movs	r0, #1
 802f26c:	1bef      	subs	r7, r5, r7
 802f26e:	8123      	strh	r3, [r4, #8]
 802f270:	8166      	strh	r6, [r4, #10]
 802f272:	81a7      	strh	r7, [r4, #12]
 802f274:	f8a4 8004 	strh.w	r8, [r4, #4]
 802f278:	80e5      	strh	r5, [r4, #6]
 802f27a:	73a0      	strb	r0, [r4, #14]
 802f27c:	b004      	add	sp, #16
 802f27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f282:	bf00      	nop
 802f284:	080338a0 	.word	0x080338a0

0802f288 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802f288:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f28a:	461e      	mov	r6, r3
 802f28c:	1e4b      	subs	r3, r1, #1
 802f28e:	2b01      	cmp	r3, #1
 802f290:	b085      	sub	sp, #20
 802f292:	4604      	mov	r4, r0
 802f294:	460d      	mov	r5, r1
 802f296:	4617      	mov	r7, r2
 802f298:	d84b      	bhi.n	802f332 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802f29a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802f29e:	1cd3      	adds	r3, r2, #3
 802f2a0:	b29b      	uxth	r3, r3
 802f2a2:	2b06      	cmp	r3, #6
 802f2a4:	d916      	bls.n	802f2d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802f2a6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802f348 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802f2aa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802f2ae:	f8cd c004 	str.w	ip, [sp, #4]
 802f2b2:	f04f 0c00 	mov.w	ip, #0
 802f2b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802f2ba:	6900      	ldr	r0, [r0, #16]
 802f2bc:	f8ad 100c 	strh.w	r1, [sp, #12]
 802f2c0:	f88d c008 	strb.w	ip, [sp, #8]
 802f2c4:	f8ad 200a 	strh.w	r2, [sp, #10]
 802f2c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802f2cc:	6803      	ldr	r3, [r0, #0]
 802f2ce:	a901      	add	r1, sp, #4
 802f2d0:	689b      	ldr	r3, [r3, #8]
 802f2d2:	4798      	blx	r3
 802f2d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f2d8:	1cd3      	adds	r3, r2, #3
 802f2da:	b29b      	uxth	r3, r3
 802f2dc:	2b06      	cmp	r3, #6
 802f2de:	d916      	bls.n	802f30e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802f2e0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802f348 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802f2e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802f2e8:	f8cd c004 	str.w	ip, [sp, #4]
 802f2ec:	f04f 0c01 	mov.w	ip, #1
 802f2f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802f2f4:	6920      	ldr	r0, [r4, #16]
 802f2f6:	f8ad 100c 	strh.w	r1, [sp, #12]
 802f2fa:	f88d c008 	strb.w	ip, [sp, #8]
 802f2fe:	f8ad 200a 	strh.w	r2, [sp, #10]
 802f302:	f8ad 300e 	strh.w	r3, [sp, #14]
 802f306:	6803      	ldr	r3, [r0, #0]
 802f308:	a901      	add	r1, sp, #4
 802f30a:	689b      	ldr	r3, [r3, #8]
 802f30c:	4798      	blx	r3
 802f30e:	4b0d      	ldr	r3, [pc, #52]	@ (802f344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802f310:	6920      	ldr	r0, [r4, #16]
 802f312:	9301      	str	r3, [sp, #4]
 802f314:	2300      	movs	r3, #0
 802f316:	f88d 5008 	strb.w	r5, [sp, #8]
 802f31a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802f31e:	f8ad 600c 	strh.w	r6, [sp, #12]
 802f322:	f8ad 300e 	strh.w	r3, [sp, #14]
 802f326:	6803      	ldr	r3, [r0, #0]
 802f328:	a901      	add	r1, sp, #4
 802f32a:	681b      	ldr	r3, [r3, #0]
 802f32c:	4798      	blx	r3
 802f32e:	b005      	add	sp, #20
 802f330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f332:	2900      	cmp	r1, #0
 802f334:	d1eb      	bne.n	802f30e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802f336:	80a2      	strh	r2, [r4, #4]
 802f338:	80c6      	strh	r6, [r0, #6]
 802f33a:	60a1      	str	r1, [r4, #8]
 802f33c:	81a1      	strh	r1, [r4, #12]
 802f33e:	73a1      	strb	r1, [r4, #14]
 802f340:	e7e5      	b.n	802f30e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802f342:	bf00      	nop
 802f344:	0803388c 	.word	0x0803388c
 802f348:	080338b4 	.word	0x080338b4

0802f34c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802f34c:	10c9      	asrs	r1, r1, #3
 802f34e:	2900      	cmp	r1, #0
 802f350:	bfb8      	it	lt
 802f352:	4249      	neglt	r1, r1
 802f354:	2801      	cmp	r0, #1
 802f356:	d108      	bne.n	802f36a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802f358:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802f35c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802f360:	4601      	mov	r1, r0
 802f362:	dd02      	ble.n	802f36a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802f364:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802f368:	4770      	bx	lr
 802f36a:	29ff      	cmp	r1, #255	@ 0xff
 802f36c:	bfa8      	it	ge
 802f36e:	21ff      	movge	r1, #255	@ 0xff
 802f370:	4608      	mov	r0, r1
 802f372:	4770      	bx	lr

0802f374 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802f374:	b410      	push	{r4}
 802f376:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802f37a:	429c      	cmp	r4, r3
 802f37c:	d803      	bhi.n	802f386 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802f37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802f382:	f7ec bd99 	b.w	801beb8 <_ZN8touchgfx7Outline6lineToEii>
 802f386:	f85d 4b04 	ldr.w	r4, [sp], #4
 802f38a:	4770      	bx	lr

0802f38c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f390:	b08b      	sub	sp, #44	@ 0x2c
 802f392:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802f396:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802f39a:	4606      	mov	r6, r0
 802f39c:	9308      	str	r3, [sp, #32]
 802f39e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802f3a2:	468a      	mov	sl, r1
 802f3a4:	9309      	str	r3, [sp, #36]	@ 0x24
 802f3a6:	f7ec fef3 	bl	801c190 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802f3aa:	68b5      	ldr	r5, [r6, #8]
 802f3ac:	4604      	mov	r4, r0
 802f3ae:	2d00      	cmp	r5, #0
 802f3b0:	d044      	beq.n	802f43c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802f3b2:	6873      	ldr	r3, [r6, #4]
 802f3b4:	42ab      	cmp	r3, r5
 802f3b6:	d33d      	bcc.n	802f434 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802f3b8:	f04f 0800 	mov.w	r8, #0
 802f3bc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802f3c0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802f3c4:	eb02 0b03 	add.w	fp, r2, r3
 802f3c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802f3cc:	fb02 1203 	mla	r2, r2, r3, r1
 802f3d0:	9205      	str	r2, [sp, #20]
 802f3d2:	1e6a      	subs	r2, r5, #1
 802f3d4:	9204      	str	r2, [sp, #16]
 802f3d6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802f3da:	f9b4 7000 	ldrsh.w	r7, [r4]
 802f3de:	454b      	cmp	r3, r9
 802f3e0:	463a      	mov	r2, r7
 802f3e2:	d008      	beq.n	802f3f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802f3e4:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802f3e8:	eb03 0b09 	add.w	fp, r3, r9
 802f3ec:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802f3f0:	fb03 1309 	mla	r3, r3, r9, r1
 802f3f4:	9305      	str	r3, [sp, #20]
 802f3f6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802f3fa:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802f3fe:	4498      	add	r8, r3
 802f400:	9b04      	ldr	r3, [sp, #16]
 802f402:	3b01      	subs	r3, #1
 802f404:	9304      	str	r3, [sp, #16]
 802f406:	9b04      	ldr	r3, [sp, #16]
 802f408:	3301      	adds	r3, #1
 802f40a:	d015      	beq.n	802f438 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802f40c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802f410:	42bb      	cmp	r3, r7
 802f412:	d117      	bne.n	802f444 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802f414:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802f418:	9b04      	ldr	r3, [sp, #16]
 802f41a:	4548      	cmp	r0, r9
 802f41c:	f103 33ff 	add.w	r3, r3, #4294967295
 802f420:	d17d      	bne.n	802f51e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802f422:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802f426:	4401      	add	r1, r0
 802f428:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802f42c:	4480      	add	r8, r0
 802f42e:	e7e9      	b.n	802f404 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802f430:	461f      	mov	r7, r3
 802f432:	e042      	b.n	802f4ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802f434:	2000      	movs	r0, #0
 802f436:	e002      	b.n	802f43e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802f438:	2900      	cmp	r1, #0
 802f43a:	d16d      	bne.n	802f518 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802f43c:	2001      	movs	r0, #1
 802f43e:	b00b      	add	sp, #44	@ 0x2c
 802f440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f444:	b379      	cbz	r1, 802f4a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802f446:	2f00      	cmp	r7, #0
 802f448:	db29      	blt.n	802f49e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802f44a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802f44e:	42bb      	cmp	r3, r7
 802f450:	dd25      	ble.n	802f49e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802f452:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802f456:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802f45a:	f7ff ff77 	bl	802f34c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802f45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f460:	fb10 f003 	smulbb	r0, r0, r3
 802f464:	b280      	uxth	r0, r0
 802f466:	1c41      	adds	r1, r0, #1
 802f468:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802f46c:	1209      	asrs	r1, r1, #8
 802f46e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802f472:	d014      	beq.n	802f49e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802f474:	b2c9      	uxtb	r1, r1
 802f476:	9102      	str	r1, [sp, #8]
 802f478:	2101      	movs	r1, #1
 802f47a:	9808      	ldr	r0, [sp, #32]
 802f47c:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802f47e:	b2ba      	uxth	r2, r7
 802f480:	4413      	add	r3, r2
 802f482:	9101      	str	r1, [sp, #4]
 802f484:	4402      	add	r2, r0
 802f486:	fa0f f18b 	sxth.w	r1, fp
 802f48a:	f8da 0000 	ldr.w	r0, [sl]
 802f48e:	9100      	str	r1, [sp, #0]
 802f490:	6941      	ldr	r1, [r0, #20]
 802f492:	b21b      	sxth	r3, r3
 802f494:	460d      	mov	r5, r1
 802f496:	b212      	sxth	r2, r2
 802f498:	9905      	ldr	r1, [sp, #20]
 802f49a:	4650      	mov	r0, sl
 802f49c:	47a8      	blx	r5
 802f49e:	9b04      	ldr	r3, [sp, #16]
 802f4a0:	1c7a      	adds	r2, r7, #1
 802f4a2:	3301      	adds	r3, #1
 802f4a4:	d0ca      	beq.n	802f43c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802f4a6:	f9b4 7000 	ldrsh.w	r7, [r4]
 802f4aa:	1abb      	subs	r3, r7, r2
 802f4ac:	2b00      	cmp	r3, #0
 802f4ae:	dd31      	ble.n	802f514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802f4b0:	2a00      	cmp	r2, #0
 802f4b2:	dabd      	bge.n	802f430 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802f4b4:	2f00      	cmp	r7, #0
 802f4b6:	dd2d      	ble.n	802f514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802f4b8:	2200      	movs	r2, #0
 802f4ba:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802f4be:	19d1      	adds	r1, r2, r7
 802f4c0:	4299      	cmp	r1, r3
 802f4c2:	db02      	blt.n	802f4ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802f4c4:	1a9f      	subs	r7, r3, r2
 802f4c6:	2f00      	cmp	r7, #0
 802f4c8:	dd24      	ble.n	802f514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802f4ca:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802f4ce:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802f4d2:	f7ff ff3b 	bl	802f34c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802f4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f4d8:	fb10 f003 	smulbb	r0, r0, r3
 802f4dc:	b280      	uxth	r0, r0
 802f4de:	1c41      	adds	r1, r0, #1
 802f4e0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802f4e4:	1209      	asrs	r1, r1, #8
 802f4e6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802f4ea:	d013      	beq.n	802f514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802f4ec:	9808      	ldr	r0, [sp, #32]
 802f4ee:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802f4f0:	b292      	uxth	r2, r2
 802f4f2:	b2c9      	uxtb	r1, r1
 802f4f4:	4413      	add	r3, r2
 802f4f6:	9102      	str	r1, [sp, #8]
 802f4f8:	4402      	add	r2, r0
 802f4fa:	b23f      	sxth	r7, r7
 802f4fc:	f8da 0000 	ldr.w	r0, [sl]
 802f500:	fa0f f18b 	sxth.w	r1, fp
 802f504:	9100      	str	r1, [sp, #0]
 802f506:	9701      	str	r7, [sp, #4]
 802f508:	6947      	ldr	r7, [r0, #20]
 802f50a:	b21b      	sxth	r3, r3
 802f50c:	b212      	sxth	r2, r2
 802f50e:	9905      	ldr	r1, [sp, #20]
 802f510:	4650      	mov	r0, sl
 802f512:	47b8      	blx	r7
 802f514:	464b      	mov	r3, r9
 802f516:	e75e      	b.n	802f3d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802f518:	2f00      	cmp	r7, #0
 802f51a:	da96      	bge.n	802f44a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802f51c:	e78e      	b.n	802f43c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802f51e:	2900      	cmp	r1, #0
 802f520:	d0f8      	beq.n	802f514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802f522:	e790      	b.n	802f446 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802f524 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802f524:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802f528:	2500      	movs	r5, #0
 802f52a:	461e      	mov	r6, r3
 802f52c:	4b35      	ldr	r3, [pc, #212]	@ (802f604 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802f52e:	4604      	mov	r4, r0
 802f530:	e9c0 3100 	strd	r3, r1, [r0]
 802f534:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802f538:	f100 0814 	add.w	r8, r0, #20
 802f53c:	8103      	strh	r3, [r0, #8]
 802f53e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802f542:	8185      	strh	r5, [r0, #12]
 802f544:	7283      	strb	r3, [r0, #10]
 802f546:	81c5      	strh	r5, [r0, #14]
 802f548:	8205      	strh	r5, [r0, #16]
 802f54a:	8245      	strh	r5, [r0, #18]
 802f54c:	4640      	mov	r0, r8
 802f54e:	4617      	mov	r7, r2
 802f550:	f7eb ffea 	bl	801b528 <_ZN8touchgfx7OutlineC1Ev>
 802f554:	466b      	mov	r3, sp
 802f556:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802f55a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802f55e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802f562:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802f566:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802f56a:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802f56e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802f572:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802f576:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802f57a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802f57e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802f582:	6830      	ldr	r0, [r6, #0]
 802f584:	6871      	ldr	r1, [r6, #4]
 802f586:	8872      	ldrh	r2, [r6, #2]
 802f588:	c303      	stmia	r3!, {r0, r1}
 802f58a:	887b      	ldrh	r3, [r7, #2]
 802f58c:	8835      	ldrh	r5, [r6, #0]
 802f58e:	4413      	add	r3, r2
 802f590:	883a      	ldrh	r2, [r7, #0]
 802f592:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802f596:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802f59a:	442a      	add	r2, r5
 802f59c:	81a2      	strh	r2, [r4, #12]
 802f59e:	81e3      	strh	r3, [r4, #14]
 802f5a0:	8220      	strh	r0, [r4, #16]
 802f5a2:	8261      	strh	r1, [r4, #18]
 802f5a4:	4668      	mov	r0, sp
 802f5a6:	4639      	mov	r1, r7
 802f5a8:	f7ee f9b8 	bl	801d91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802f5ac:	f104 000c 	add.w	r0, r4, #12
 802f5b0:	f7ee f98c 	bl	801d8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802f5b4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802f5b8:	f8bd 2000 	ldrh.w	r2, [sp]
 802f5bc:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802f5c0:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802f5c4:	4640      	mov	r0, r8
 802f5c6:	f7eb ff93 	bl	801b4f0 <_ZN8touchgfx7Outline5resetEv>
 802f5ca:	4620      	mov	r0, r4
 802f5cc:	f9bd 3000 	ldrsh.w	r3, [sp]
 802f5d0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802f5d4:	015b      	lsls	r3, r3, #5
 802f5d6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802f5d8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802f5dc:	015b      	lsls	r3, r3, #5
 802f5de:	6523      	str	r3, [r4, #80]	@ 0x50
 802f5e0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802f5e4:	015b      	lsls	r3, r3, #5
 802f5e6:	6563      	str	r3, [r4, #84]	@ 0x54
 802f5e8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802f5ec:	015b      	lsls	r3, r3, #5
 802f5ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 802f5f0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802f5f4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802f5f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802f5fc:	b002      	add	sp, #8
 802f5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f602:	bf00      	nop
 802f604:	08033bf0 	.word	0x08033bf0

0802f608 <_ZN8touchgfx6Canvas5closeEv>:
 802f608:	b538      	push	{r3, r4, r5, lr}
 802f60a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802f60e:	4604      	mov	r4, r0
 802f610:	b193      	cbz	r3, 802f638 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802f612:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802f616:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802f61a:	4213      	tst	r3, r2
 802f61c:	d10c      	bne.n	802f638 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802f61e:	f100 0514 	add.w	r5, r0, #20
 802f622:	b123      	cbz	r3, 802f62e <_ZN8touchgfx6Canvas5closeEv+0x26>
 802f624:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802f628:	4628      	mov	r0, r5
 802f62a:	f7ff fea3 	bl	802f374 <_ZN8touchgfx10Rasterizer6lineToEii>
 802f62e:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802f632:	4628      	mov	r0, r5
 802f634:	f7ff fe9e 	bl	802f374 <_ZN8touchgfx10Rasterizer6lineToEii>
 802f638:	2300      	movs	r3, #0
 802f63a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802f63e:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802f642:	4298      	cmp	r0, r3
 802f644:	bf34      	ite	cc
 802f646:	2000      	movcc	r0, #0
 802f648:	2001      	movcs	r0, #1
 802f64a:	bd38      	pop	{r3, r4, r5, pc}

0802f64c <_ZN8touchgfx6Canvas6renderEh>:
 802f64c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802f650:	7a85      	ldrb	r5, [r0, #10]
 802f652:	4604      	mov	r4, r0
 802f654:	4369      	muls	r1, r5
 802f656:	1c4d      	adds	r5, r1, #1
 802f658:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802f65c:	122d      	asrs	r5, r5, #8
 802f65e:	f000 8098 	beq.w	802f792 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802f662:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802f666:	2b00      	cmp	r3, #0
 802f668:	f000 8093 	beq.w	802f792 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802f66c:	f7ff ffcc 	bl	802f608 <_ZN8touchgfx6Canvas5closeEv>
 802f670:	4607      	mov	r7, r0
 802f672:	2800      	cmp	r0, #0
 802f674:	d045      	beq.n	802f702 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802f676:	6860      	ldr	r0, [r4, #4]
 802f678:	4e47      	ldr	r6, [pc, #284]	@ (802f798 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802f67a:	6803      	ldr	r3, [r0, #0]
 802f67c:	6837      	ldr	r7, [r6, #0]
 802f67e:	689b      	ldr	r3, [r3, #8]
 802f680:	4798      	blx	r3
 802f682:	4601      	mov	r1, r0
 802f684:	4638      	mov	r0, r7
 802f686:	f7e9 ff27 	bl	80194d8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802f68a:	4607      	mov	r7, r0
 802f68c:	f7dd f9e2 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 802f690:	6803      	ldr	r3, [r0, #0]
 802f692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802f694:	4798      	blx	r3
 802f696:	4680      	mov	r8, r0
 802f698:	f7dd f9dc 	bl	800ca54 <_ZN8touchgfx3HAL3lcdEv>
 802f69c:	6803      	ldr	r3, [r0, #0]
 802f69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f6a0:	4798      	blx	r3
 802f6a2:	280b      	cmp	r0, #11
 802f6a4:	d85a      	bhi.n	802f75c <_ZN8touchgfx6Canvas6renderEh+0x110>
 802f6a6:	e8df f000 	tbb	[pc, r0]
 802f6aa:	5b50      	.short	0x5b50
 802f6ac:	3059066b 	.word	0x3059066b
 802f6b0:	64646440 	.word	0x64646440
 802f6b4:	6464      	.short	0x6464
 802f6b6:	2208      	movs	r2, #8
 802f6b8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802f6bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802f6c0:	fb91 f2f2 	sdiv	r2, r1, r2
 802f6c4:	fb08 2303 	mla	r3, r8, r3, r2
 802f6c8:	441f      	add	r7, r3
 802f6ca:	424b      	negs	r3, r1
 802f6cc:	f003 0307 	and.w	r3, r3, #7
 802f6d0:	f001 0107 	and.w	r1, r1, #7
 802f6d4:	bf58      	it	pl
 802f6d6:	4259      	negpl	r1, r3
 802f6d8:	b2c9      	uxtb	r1, r1
 802f6da:	b2ed      	uxtb	r5, r5
 802f6dc:	463a      	mov	r2, r7
 802f6de:	e9cd 1500 	strd	r1, r5, [sp]
 802f6e2:	fa0f f388 	sxth.w	r3, r8
 802f6e6:	6861      	ldr	r1, [r4, #4]
 802f6e8:	f104 0014 	add.w	r0, r4, #20
 802f6ec:	f7ff fe4e 	bl	802f38c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802f6f0:	4607      	mov	r7, r0
 802f6f2:	6860      	ldr	r0, [r4, #4]
 802f6f4:	6803      	ldr	r3, [r0, #0]
 802f6f6:	691b      	ldr	r3, [r3, #16]
 802f6f8:	4798      	blx	r3
 802f6fa:	6830      	ldr	r0, [r6, #0]
 802f6fc:	6803      	ldr	r3, [r0, #0]
 802f6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802f700:	4798      	blx	r3
 802f702:	4638      	mov	r0, r7
 802f704:	b002      	add	sp, #8
 802f706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f70a:	2204      	movs	r2, #4
 802f70c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802f710:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802f714:	fb91 f2f2 	sdiv	r2, r1, r2
 802f718:	fb08 2303 	mla	r3, r8, r3, r2
 802f71c:	441f      	add	r7, r3
 802f71e:	424b      	negs	r3, r1
 802f720:	f003 0303 	and.w	r3, r3, #3
 802f724:	f001 0103 	and.w	r1, r1, #3
 802f728:	e7d4      	b.n	802f6d4 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802f72a:	2202      	movs	r2, #2
 802f72c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802f730:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802f734:	fb91 f2f2 	sdiv	r2, r1, r2
 802f738:	fb08 2303 	mla	r3, r8, r3, r2
 802f73c:	2900      	cmp	r1, #0
 802f73e:	f001 0101 	and.w	r1, r1, #1
 802f742:	441f      	add	r7, r3
 802f744:	bfb8      	it	lt
 802f746:	4249      	neglt	r1, r1
 802f748:	e7c6      	b.n	802f6d8 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802f74a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802f74e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f752:	fb08 f303 	mul.w	r3, r8, r3
 802f756:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802f75a:	441f      	add	r7, r3
 802f75c:	2100      	movs	r1, #0
 802f75e:	e7bc      	b.n	802f6da <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802f760:	2103      	movs	r1, #3
 802f762:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802f766:	fb08 f203 	mul.w	r2, r8, r3
 802f76a:	89a3      	ldrh	r3, [r4, #12]
 802f76c:	fb13 2301 	smlabb	r3, r3, r1, r2
 802f770:	e7f3      	b.n	802f75a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802f772:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802f776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f77a:	fb08 2303 	mla	r3, r8, r3, r2
 802f77e:	e7ec      	b.n	802f75a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802f780:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802f784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f788:	fb08 f303 	mul.w	r3, r8, r3
 802f78c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802f790:	e7e3      	b.n	802f75a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802f792:	2701      	movs	r7, #1
 802f794:	e7b5      	b.n	802f702 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802f796:	bf00      	nop
 802f798:	20011ffc 	.word	0x20011ffc

0802f79c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802f79c:	b510      	push	{r4, lr}
 802f79e:	4b06      	ldr	r3, [pc, #24]	@ (802f7b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802f7a0:	781b      	ldrb	r3, [r3, #0]
 802f7a2:	2b01      	cmp	r3, #1
 802f7a4:	d107      	bne.n	802f7b6 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802f7a6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802f7aa:	680b      	ldr	r3, [r1, #0]
 802f7ac:	6814      	ldr	r4, [r2, #0]
 802f7ae:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802f7b2:	6013      	str	r3, [r2, #0]
 802f7b4:	600c      	str	r4, [r1, #0]
 802f7b6:	bd10      	pop	{r4, pc}
 802f7b8:	20011ff4 	.word	0x20011ff4

0802f7bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802f7bc:	b513      	push	{r0, r1, r4, lr}
 802f7be:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802f7c2:	4604      	mov	r4, r0
 802f7c4:	e9cd 2100 	strd	r2, r1, [sp]
 802f7c8:	b9a3      	cbnz	r3, 802f7f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802f7ca:	466a      	mov	r2, sp
 802f7cc:	a901      	add	r1, sp, #4
 802f7ce:	4620      	mov	r0, r4
 802f7d0:	f7ff ffe4 	bl	802f79c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802f7d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802f7d6:	9901      	ldr	r1, [sp, #4]
 802f7d8:	9a00      	ldr	r2, [sp, #0]
 802f7da:	1ac9      	subs	r1, r1, r3
 802f7dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802f7de:	9101      	str	r1, [sp, #4]
 802f7e0:	1ad2      	subs	r2, r2, r3
 802f7e2:	2a00      	cmp	r2, #0
 802f7e4:	9200      	str	r2, [sp, #0]
 802f7e6:	da0b      	bge.n	802f800 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802f7e8:	2301      	movs	r3, #1
 802f7ea:	2900      	cmp	r1, #0
 802f7ec:	da0e      	bge.n	802f80c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802f7ee:	f043 0304 	orr.w	r3, r3, #4
 802f7f2:	e013      	b.n	802f81c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802f7f4:	f7ff ff08 	bl	802f608 <_ZN8touchgfx6Canvas5closeEv>
 802f7f8:	2800      	cmp	r0, #0
 802f7fa:	d1e6      	bne.n	802f7ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802f7fc:	b002      	add	sp, #8
 802f7fe:	bd10      	pop	{r4, pc}
 802f800:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802f802:	429a      	cmp	r2, r3
 802f804:	bfac      	ite	ge
 802f806:	2302      	movge	r3, #2
 802f808:	2300      	movlt	r3, #0
 802f80a:	e7ee      	b.n	802f7ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802f80c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802f80e:	4281      	cmp	r1, r0
 802f810:	bfac      	ite	ge
 802f812:	2008      	movge	r0, #8
 802f814:	2000      	movlt	r0, #0
 802f816:	4318      	orrs	r0, r3
 802f818:	b2c3      	uxtb	r3, r0
 802f81a:	b158      	cbz	r0, 802f834 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802f81c:	2200      	movs	r2, #0
 802f81e:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802f822:	9901      	ldr	r1, [sp, #4]
 802f824:	9a00      	ldr	r2, [sp, #0]
 802f826:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802f828:	6722      	str	r2, [r4, #112]	@ 0x70
 802f82a:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802f82e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802f832:	e7e3      	b.n	802f7fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802f834:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802f838:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802f83c:	4298      	cmp	r0, r3
 802f83e:	d803      	bhi.n	802f848 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802f840:	f104 0014 	add.w	r0, r4, #20
 802f844:	f7ec fb52 	bl	801beec <_ZN8touchgfx7Outline6moveToEii>
 802f848:	2301      	movs	r3, #1
 802f84a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802f84e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802f852:	2300      	movs	r3, #0
 802f854:	e7e5      	b.n	802f822 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802f856 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802f856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802f858:	4604      	mov	r4, r0
 802f85a:	ab02      	add	r3, sp, #8
 802f85c:	f843 2d08 	str.w	r2, [r3, #-8]!
 802f860:	461a      	mov	r2, r3
 802f862:	9101      	str	r1, [sp, #4]
 802f864:	a901      	add	r1, sp, #4
 802f866:	f7ff ff99 	bl	802f79c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802f86a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802f86c:	9901      	ldr	r1, [sp, #4]
 802f86e:	9a00      	ldr	r2, [sp, #0]
 802f870:	1ac9      	subs	r1, r1, r3
 802f872:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802f874:	9101      	str	r1, [sp, #4]
 802f876:	1ad2      	subs	r2, r2, r3
 802f878:	2a00      	cmp	r2, #0
 802f87a:	9200      	str	r2, [sp, #0]
 802f87c:	db1c      	blt.n	802f8b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802f87e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802f880:	429a      	cmp	r2, r3
 802f882:	bfac      	ite	ge
 802f884:	2002      	movge	r0, #2
 802f886:	2000      	movlt	r0, #0
 802f888:	2900      	cmp	r1, #0
 802f88a:	db17      	blt.n	802f8bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802f88c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802f88e:	4299      	cmp	r1, r3
 802f890:	bfac      	ite	ge
 802f892:	2308      	movge	r3, #8
 802f894:	2300      	movlt	r3, #0
 802f896:	4303      	orrs	r3, r0
 802f898:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802f89c:	b2dd      	uxtb	r5, r3
 802f89e:	b978      	cbnz	r0, 802f8c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802f8a0:	f104 0014 	add.w	r0, r4, #20
 802f8a4:	f7ff fd66 	bl	802f374 <_ZN8touchgfx10Rasterizer6lineToEii>
 802f8a8:	9b01      	ldr	r3, [sp, #4]
 802f8aa:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802f8ae:	6623      	str	r3, [r4, #96]	@ 0x60
 802f8b0:	9b00      	ldr	r3, [sp, #0]
 802f8b2:	6663      	str	r3, [r4, #100]	@ 0x64
 802f8b4:	b002      	add	sp, #8
 802f8b6:	bd70      	pop	{r4, r5, r6, pc}
 802f8b8:	2001      	movs	r0, #1
 802f8ba:	e7e5      	b.n	802f888 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802f8bc:	2304      	movs	r3, #4
 802f8be:	e7ea      	b.n	802f896 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802f8c0:	b113      	cbz	r3, 802f8c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802f8c2:	ea10 0305 	ands.w	r3, r0, r5
 802f8c6:	d11c      	bne.n	802f902 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802f8c8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802f8cc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802f8d0:	f104 0614 	add.w	r6, r4, #20
 802f8d4:	b98b      	cbnz	r3, 802f8fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802f8d6:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802f8da:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802f8de:	4298      	cmp	r0, r3
 802f8e0:	d802      	bhi.n	802f8e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802f8e2:	4630      	mov	r0, r6
 802f8e4:	f7ec fb02 	bl	801beec <_ZN8touchgfx7Outline6moveToEii>
 802f8e8:	2301      	movs	r3, #1
 802f8ea:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802f8ee:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802f8f2:	e9dd 2100 	ldrd	r2, r1, [sp]
 802f8f6:	4630      	mov	r0, r6
 802f8f8:	e7d4      	b.n	802f8a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802f8fa:	4630      	mov	r0, r6
 802f8fc:	f7ff fd3a 	bl	802f374 <_ZN8touchgfx10Rasterizer6lineToEii>
 802f900:	e7f7      	b.n	802f8f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802f902:	461d      	mov	r5, r3
 802f904:	e7d0      	b.n	802f8a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802f908 <_ZN8touchgfx6CanvasD1Ev>:
 802f908:	b510      	push	{r4, lr}
 802f90a:	4604      	mov	r4, r0
 802f90c:	4b03      	ldr	r3, [pc, #12]	@ (802f91c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802f90e:	f840 3b14 	str.w	r3, [r0], #20
 802f912:	f7eb fde5 	bl	801b4e0 <_ZN8touchgfx7OutlineD1Ev>
 802f916:	4620      	mov	r0, r4
 802f918:	bd10      	pop	{r4, pc}
 802f91a:	bf00      	nop
 802f91c:	08033bf0 	.word	0x08033bf0

0802f920 <_ZN8touchgfx6CanvasD0Ev>:
 802f920:	b510      	push	{r4, lr}
 802f922:	4604      	mov	r4, r0
 802f924:	f7ff fff0 	bl	802f908 <_ZN8touchgfx6CanvasD1Ev>
 802f928:	4620      	mov	r0, r4
 802f92a:	2174      	movs	r1, #116	@ 0x74
 802f92c:	f000 f807 	bl	802f93e <_ZdlPvj>
 802f930:	4620      	mov	r0, r4
 802f932:	bd10      	pop	{r4, pc}

0802f934 <__aeabi_atexit>:
 802f934:	460b      	mov	r3, r1
 802f936:	4601      	mov	r1, r0
 802f938:	4618      	mov	r0, r3
 802f93a:	f000 b90f 	b.w	802fb5c <__cxa_atexit>

0802f93e <_ZdlPvj>:
 802f93e:	f000 b812 	b.w	802f966 <_ZdlPv>

0802f942 <__cxa_guard_acquire>:
 802f942:	6802      	ldr	r2, [r0, #0]
 802f944:	4603      	mov	r3, r0
 802f946:	07d2      	lsls	r2, r2, #31
 802f948:	d405      	bmi.n	802f956 <__cxa_guard_acquire+0x14>
 802f94a:	7842      	ldrb	r2, [r0, #1]
 802f94c:	b102      	cbz	r2, 802f950 <__cxa_guard_acquire+0xe>
 802f94e:	deff      	udf	#255	@ 0xff
 802f950:	2001      	movs	r0, #1
 802f952:	7058      	strb	r0, [r3, #1]
 802f954:	4770      	bx	lr
 802f956:	2000      	movs	r0, #0
 802f958:	4770      	bx	lr

0802f95a <__cxa_guard_release>:
 802f95a:	2301      	movs	r3, #1
 802f95c:	6003      	str	r3, [r0, #0]
 802f95e:	4770      	bx	lr

0802f960 <__cxa_pure_virtual>:
 802f960:	b508      	push	{r3, lr}
 802f962:	f000 f80d 	bl	802f980 <_ZSt9terminatev>

0802f966 <_ZdlPv>:
 802f966:	f000 b843 	b.w	802f9f0 <free>

0802f96a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802f96a:	b508      	push	{r3, lr}
 802f96c:	4780      	blx	r0
 802f96e:	f000 f80c 	bl	802f98a <abort>
	...

0802f974 <_ZSt13get_terminatev>:
 802f974:	4b01      	ldr	r3, [pc, #4]	@ (802f97c <_ZSt13get_terminatev+0x8>)
 802f976:	e8d3 0faf 	lda	r0, [r3]
 802f97a:	4770      	bx	lr
 802f97c:	200000a0 	.word	0x200000a0

0802f980 <_ZSt9terminatev>:
 802f980:	b508      	push	{r3, lr}
 802f982:	f7ff fff7 	bl	802f974 <_ZSt13get_terminatev>
 802f986:	f7ff fff0 	bl	802f96a <_ZN10__cxxabiv111__terminateEPFvvE>

0802f98a <abort>:
 802f98a:	2006      	movs	r0, #6
 802f98c:	b508      	push	{r3, lr}
 802f98e:	f000 fa3b 	bl	802fe08 <raise>
 802f992:	2001      	movs	r0, #1
 802f994:	f7d1 faa6 	bl	8000ee4 <_exit>

0802f998 <__assert_func>:
 802f998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802f99a:	4614      	mov	r4, r2
 802f99c:	461a      	mov	r2, r3
 802f99e:	4b09      	ldr	r3, [pc, #36]	@ (802f9c4 <__assert_func+0x2c>)
 802f9a0:	4605      	mov	r5, r0
 802f9a2:	681b      	ldr	r3, [r3, #0]
 802f9a4:	68d8      	ldr	r0, [r3, #12]
 802f9a6:	b954      	cbnz	r4, 802f9be <__assert_func+0x26>
 802f9a8:	4b07      	ldr	r3, [pc, #28]	@ (802f9c8 <__assert_func+0x30>)
 802f9aa:	461c      	mov	r4, r3
 802f9ac:	9100      	str	r1, [sp, #0]
 802f9ae:	4907      	ldr	r1, [pc, #28]	@ (802f9cc <__assert_func+0x34>)
 802f9b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802f9b4:	462b      	mov	r3, r5
 802f9b6:	f000 f983 	bl	802fcc0 <fiprintf>
 802f9ba:	f7ff ffe6 	bl	802f98a <abort>
 802f9be:	4b04      	ldr	r3, [pc, #16]	@ (802f9d0 <__assert_func+0x38>)
 802f9c0:	e7f4      	b.n	802f9ac <__assert_func+0x14>
 802f9c2:	bf00      	nop
 802f9c4:	200000b0 	.word	0x200000b0
 802f9c8:	08033c37 	.word	0x08033c37
 802f9cc:	08033c09 	.word	0x08033c09
 802f9d0:	08033bfc 	.word	0x08033bfc

0802f9d4 <atexit>:
 802f9d4:	2300      	movs	r3, #0
 802f9d6:	4601      	mov	r1, r0
 802f9d8:	461a      	mov	r2, r3
 802f9da:	4618      	mov	r0, r3
 802f9dc:	f000 bb16 	b.w	803000c <__register_exitproc>

0802f9e0 <malloc>:
 802f9e0:	4b02      	ldr	r3, [pc, #8]	@ (802f9ec <malloc+0xc>)
 802f9e2:	4601      	mov	r1, r0
 802f9e4:	6818      	ldr	r0, [r3, #0]
 802f9e6:	f000 b82d 	b.w	802fa44 <_malloc_r>
 802f9ea:	bf00      	nop
 802f9ec:	200000b0 	.word	0x200000b0

0802f9f0 <free>:
 802f9f0:	4b02      	ldr	r3, [pc, #8]	@ (802f9fc <free+0xc>)
 802f9f2:	4601      	mov	r1, r0
 802f9f4:	6818      	ldr	r0, [r3, #0]
 802f9f6:	f000 bb67 	b.w	80300c8 <_free_r>
 802f9fa:	bf00      	nop
 802f9fc:	200000b0 	.word	0x200000b0

0802fa00 <sbrk_aligned>:
 802fa00:	b570      	push	{r4, r5, r6, lr}
 802fa02:	4e0f      	ldr	r6, [pc, #60]	@ (802fa40 <sbrk_aligned+0x40>)
 802fa04:	460c      	mov	r4, r1
 802fa06:	4605      	mov	r5, r0
 802fa08:	6831      	ldr	r1, [r6, #0]
 802fa0a:	b911      	cbnz	r1, 802fa12 <sbrk_aligned+0x12>
 802fa0c:	f000 faa2 	bl	802ff54 <_sbrk_r>
 802fa10:	6030      	str	r0, [r6, #0]
 802fa12:	4621      	mov	r1, r4
 802fa14:	4628      	mov	r0, r5
 802fa16:	f000 fa9d 	bl	802ff54 <_sbrk_r>
 802fa1a:	1c43      	adds	r3, r0, #1
 802fa1c:	d103      	bne.n	802fa26 <sbrk_aligned+0x26>
 802fa1e:	f04f 34ff 	mov.w	r4, #4294967295
 802fa22:	4620      	mov	r0, r4
 802fa24:	bd70      	pop	{r4, r5, r6, pc}
 802fa26:	1cc4      	adds	r4, r0, #3
 802fa28:	f024 0403 	bic.w	r4, r4, #3
 802fa2c:	42a0      	cmp	r0, r4
 802fa2e:	d0f8      	beq.n	802fa22 <sbrk_aligned+0x22>
 802fa30:	1a21      	subs	r1, r4, r0
 802fa32:	4628      	mov	r0, r5
 802fa34:	f000 fa8e 	bl	802ff54 <_sbrk_r>
 802fa38:	3001      	adds	r0, #1
 802fa3a:	d1f2      	bne.n	802fa22 <sbrk_aligned+0x22>
 802fa3c:	e7ef      	b.n	802fa1e <sbrk_aligned+0x1e>
 802fa3e:	bf00      	nop
 802fa40:	20012a58 	.word	0x20012a58

0802fa44 <_malloc_r>:
 802fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802fa48:	1ccd      	adds	r5, r1, #3
 802fa4a:	4606      	mov	r6, r0
 802fa4c:	f025 0503 	bic.w	r5, r5, #3
 802fa50:	3508      	adds	r5, #8
 802fa52:	2d0c      	cmp	r5, #12
 802fa54:	bf38      	it	cc
 802fa56:	250c      	movcc	r5, #12
 802fa58:	2d00      	cmp	r5, #0
 802fa5a:	db01      	blt.n	802fa60 <_malloc_r+0x1c>
 802fa5c:	42a9      	cmp	r1, r5
 802fa5e:	d904      	bls.n	802fa6a <_malloc_r+0x26>
 802fa60:	230c      	movs	r3, #12
 802fa62:	6033      	str	r3, [r6, #0]
 802fa64:	2000      	movs	r0, #0
 802fa66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802fa6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802fb40 <_malloc_r+0xfc>
 802fa6e:	f000 f869 	bl	802fb44 <__malloc_lock>
 802fa72:	f8d8 3000 	ldr.w	r3, [r8]
 802fa76:	461c      	mov	r4, r3
 802fa78:	bb44      	cbnz	r4, 802facc <_malloc_r+0x88>
 802fa7a:	4629      	mov	r1, r5
 802fa7c:	4630      	mov	r0, r6
 802fa7e:	f7ff ffbf 	bl	802fa00 <sbrk_aligned>
 802fa82:	1c43      	adds	r3, r0, #1
 802fa84:	4604      	mov	r4, r0
 802fa86:	d158      	bne.n	802fb3a <_malloc_r+0xf6>
 802fa88:	f8d8 4000 	ldr.w	r4, [r8]
 802fa8c:	4627      	mov	r7, r4
 802fa8e:	2f00      	cmp	r7, #0
 802fa90:	d143      	bne.n	802fb1a <_malloc_r+0xd6>
 802fa92:	2c00      	cmp	r4, #0
 802fa94:	d04b      	beq.n	802fb2e <_malloc_r+0xea>
 802fa96:	6823      	ldr	r3, [r4, #0]
 802fa98:	4639      	mov	r1, r7
 802fa9a:	4630      	mov	r0, r6
 802fa9c:	eb04 0903 	add.w	r9, r4, r3
 802faa0:	f000 fa58 	bl	802ff54 <_sbrk_r>
 802faa4:	4581      	cmp	r9, r0
 802faa6:	d142      	bne.n	802fb2e <_malloc_r+0xea>
 802faa8:	6821      	ldr	r1, [r4, #0]
 802faaa:	4630      	mov	r0, r6
 802faac:	1a6d      	subs	r5, r5, r1
 802faae:	4629      	mov	r1, r5
 802fab0:	f7ff ffa6 	bl	802fa00 <sbrk_aligned>
 802fab4:	3001      	adds	r0, #1
 802fab6:	d03a      	beq.n	802fb2e <_malloc_r+0xea>
 802fab8:	6823      	ldr	r3, [r4, #0]
 802faba:	442b      	add	r3, r5
 802fabc:	6023      	str	r3, [r4, #0]
 802fabe:	f8d8 3000 	ldr.w	r3, [r8]
 802fac2:	685a      	ldr	r2, [r3, #4]
 802fac4:	bb62      	cbnz	r2, 802fb20 <_malloc_r+0xdc>
 802fac6:	f8c8 7000 	str.w	r7, [r8]
 802faca:	e00f      	b.n	802faec <_malloc_r+0xa8>
 802facc:	6822      	ldr	r2, [r4, #0]
 802face:	1b52      	subs	r2, r2, r5
 802fad0:	d420      	bmi.n	802fb14 <_malloc_r+0xd0>
 802fad2:	2a0b      	cmp	r2, #11
 802fad4:	d917      	bls.n	802fb06 <_malloc_r+0xc2>
 802fad6:	1961      	adds	r1, r4, r5
 802fad8:	42a3      	cmp	r3, r4
 802fada:	6025      	str	r5, [r4, #0]
 802fadc:	bf18      	it	ne
 802fade:	6059      	strne	r1, [r3, #4]
 802fae0:	6863      	ldr	r3, [r4, #4]
 802fae2:	bf08      	it	eq
 802fae4:	f8c8 1000 	streq.w	r1, [r8]
 802fae8:	5162      	str	r2, [r4, r5]
 802faea:	604b      	str	r3, [r1, #4]
 802faec:	4630      	mov	r0, r6
 802faee:	f000 f82f 	bl	802fb50 <__malloc_unlock>
 802faf2:	f104 000b 	add.w	r0, r4, #11
 802faf6:	1d23      	adds	r3, r4, #4
 802faf8:	f020 0007 	bic.w	r0, r0, #7
 802fafc:	1ac2      	subs	r2, r0, r3
 802fafe:	bf1c      	itt	ne
 802fb00:	1a1b      	subne	r3, r3, r0
 802fb02:	50a3      	strne	r3, [r4, r2]
 802fb04:	e7af      	b.n	802fa66 <_malloc_r+0x22>
 802fb06:	6862      	ldr	r2, [r4, #4]
 802fb08:	42a3      	cmp	r3, r4
 802fb0a:	bf0c      	ite	eq
 802fb0c:	f8c8 2000 	streq.w	r2, [r8]
 802fb10:	605a      	strne	r2, [r3, #4]
 802fb12:	e7eb      	b.n	802faec <_malloc_r+0xa8>
 802fb14:	4623      	mov	r3, r4
 802fb16:	6864      	ldr	r4, [r4, #4]
 802fb18:	e7ae      	b.n	802fa78 <_malloc_r+0x34>
 802fb1a:	463c      	mov	r4, r7
 802fb1c:	687f      	ldr	r7, [r7, #4]
 802fb1e:	e7b6      	b.n	802fa8e <_malloc_r+0x4a>
 802fb20:	461a      	mov	r2, r3
 802fb22:	685b      	ldr	r3, [r3, #4]
 802fb24:	42a3      	cmp	r3, r4
 802fb26:	d1fb      	bne.n	802fb20 <_malloc_r+0xdc>
 802fb28:	2300      	movs	r3, #0
 802fb2a:	6053      	str	r3, [r2, #4]
 802fb2c:	e7de      	b.n	802faec <_malloc_r+0xa8>
 802fb2e:	230c      	movs	r3, #12
 802fb30:	4630      	mov	r0, r6
 802fb32:	6033      	str	r3, [r6, #0]
 802fb34:	f000 f80c 	bl	802fb50 <__malloc_unlock>
 802fb38:	e794      	b.n	802fa64 <_malloc_r+0x20>
 802fb3a:	6005      	str	r5, [r0, #0]
 802fb3c:	e7d6      	b.n	802faec <_malloc_r+0xa8>
 802fb3e:	bf00      	nop
 802fb40:	20012a5c 	.word	0x20012a5c

0802fb44 <__malloc_lock>:
 802fb44:	4801      	ldr	r0, [pc, #4]	@ (802fb4c <__malloc_lock+0x8>)
 802fb46:	f000 ba52 	b.w	802ffee <__retarget_lock_acquire_recursive>
 802fb4a:	bf00      	nop
 802fb4c:	20012ba0 	.word	0x20012ba0

0802fb50 <__malloc_unlock>:
 802fb50:	4801      	ldr	r0, [pc, #4]	@ (802fb58 <__malloc_unlock+0x8>)
 802fb52:	f000 ba4d 	b.w	802fff0 <__retarget_lock_release_recursive>
 802fb56:	bf00      	nop
 802fb58:	20012ba0 	.word	0x20012ba0

0802fb5c <__cxa_atexit>:
 802fb5c:	b510      	push	{r4, lr}
 802fb5e:	4604      	mov	r4, r0
 802fb60:	4804      	ldr	r0, [pc, #16]	@ (802fb74 <__cxa_atexit+0x18>)
 802fb62:	4613      	mov	r3, r2
 802fb64:	b120      	cbz	r0, 802fb70 <__cxa_atexit+0x14>
 802fb66:	460a      	mov	r2, r1
 802fb68:	2002      	movs	r0, #2
 802fb6a:	4621      	mov	r1, r4
 802fb6c:	f000 fa4e 	bl	803000c <__register_exitproc>
 802fb70:	bd10      	pop	{r4, pc}
 802fb72:	bf00      	nop
 802fb74:	0803000d 	.word	0x0803000d

0802fb78 <std>:
 802fb78:	2300      	movs	r3, #0
 802fb7a:	b510      	push	{r4, lr}
 802fb7c:	4604      	mov	r4, r0
 802fb7e:	6083      	str	r3, [r0, #8]
 802fb80:	8181      	strh	r1, [r0, #12]
 802fb82:	4619      	mov	r1, r3
 802fb84:	6643      	str	r3, [r0, #100]	@ 0x64
 802fb86:	81c2      	strh	r2, [r0, #14]
 802fb88:	2208      	movs	r2, #8
 802fb8a:	6183      	str	r3, [r0, #24]
 802fb8c:	e9c0 3300 	strd	r3, r3, [r0]
 802fb90:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802fb94:	305c      	adds	r0, #92	@ 0x5c
 802fb96:	f000 f906 	bl	802fda6 <memset>
 802fb9a:	4b0d      	ldr	r3, [pc, #52]	@ (802fbd0 <std+0x58>)
 802fb9c:	6224      	str	r4, [r4, #32]
 802fb9e:	6263      	str	r3, [r4, #36]	@ 0x24
 802fba0:	4b0c      	ldr	r3, [pc, #48]	@ (802fbd4 <std+0x5c>)
 802fba2:	62a3      	str	r3, [r4, #40]	@ 0x28
 802fba4:	4b0c      	ldr	r3, [pc, #48]	@ (802fbd8 <std+0x60>)
 802fba6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802fba8:	4b0c      	ldr	r3, [pc, #48]	@ (802fbdc <std+0x64>)
 802fbaa:	6323      	str	r3, [r4, #48]	@ 0x30
 802fbac:	4b0c      	ldr	r3, [pc, #48]	@ (802fbe0 <std+0x68>)
 802fbae:	429c      	cmp	r4, r3
 802fbb0:	d006      	beq.n	802fbc0 <std+0x48>
 802fbb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802fbb6:	4294      	cmp	r4, r2
 802fbb8:	d002      	beq.n	802fbc0 <std+0x48>
 802fbba:	33d0      	adds	r3, #208	@ 0xd0
 802fbbc:	429c      	cmp	r4, r3
 802fbbe:	d105      	bne.n	802fbcc <std+0x54>
 802fbc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802fbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802fbc8:	f000 ba10 	b.w	802ffec <__retarget_lock_init_recursive>
 802fbcc:	bd10      	pop	{r4, pc}
 802fbce:	bf00      	nop
 802fbd0:	0802fd21 	.word	0x0802fd21
 802fbd4:	0802fd43 	.word	0x0802fd43
 802fbd8:	0802fd7b 	.word	0x0802fd7b
 802fbdc:	0802fd9f 	.word	0x0802fd9f
 802fbe0:	20012a60 	.word	0x20012a60

0802fbe4 <stdio_exit_handler>:
 802fbe4:	4a02      	ldr	r2, [pc, #8]	@ (802fbf0 <stdio_exit_handler+0xc>)
 802fbe6:	4903      	ldr	r1, [pc, #12]	@ (802fbf4 <stdio_exit_handler+0x10>)
 802fbe8:	4803      	ldr	r0, [pc, #12]	@ (802fbf8 <stdio_exit_handler+0x14>)
 802fbea:	f000 b87b 	b.w	802fce4 <_fwalk_sglue>
 802fbee:	bf00      	nop
 802fbf0:	200000a4 	.word	0x200000a4
 802fbf4:	0803080d 	.word	0x0803080d
 802fbf8:	200000b4 	.word	0x200000b4

0802fbfc <cleanup_stdio>:
 802fbfc:	6841      	ldr	r1, [r0, #4]
 802fbfe:	4b0c      	ldr	r3, [pc, #48]	@ (802fc30 <cleanup_stdio+0x34>)
 802fc00:	4299      	cmp	r1, r3
 802fc02:	b510      	push	{r4, lr}
 802fc04:	4604      	mov	r4, r0
 802fc06:	d001      	beq.n	802fc0c <cleanup_stdio+0x10>
 802fc08:	f000 fe00 	bl	803080c <_fflush_r>
 802fc0c:	68a1      	ldr	r1, [r4, #8]
 802fc0e:	4b09      	ldr	r3, [pc, #36]	@ (802fc34 <cleanup_stdio+0x38>)
 802fc10:	4299      	cmp	r1, r3
 802fc12:	d002      	beq.n	802fc1a <cleanup_stdio+0x1e>
 802fc14:	4620      	mov	r0, r4
 802fc16:	f000 fdf9 	bl	803080c <_fflush_r>
 802fc1a:	68e1      	ldr	r1, [r4, #12]
 802fc1c:	4b06      	ldr	r3, [pc, #24]	@ (802fc38 <cleanup_stdio+0x3c>)
 802fc1e:	4299      	cmp	r1, r3
 802fc20:	d004      	beq.n	802fc2c <cleanup_stdio+0x30>
 802fc22:	4620      	mov	r0, r4
 802fc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802fc28:	f000 bdf0 	b.w	803080c <_fflush_r>
 802fc2c:	bd10      	pop	{r4, pc}
 802fc2e:	bf00      	nop
 802fc30:	20012a60 	.word	0x20012a60
 802fc34:	20012ac8 	.word	0x20012ac8
 802fc38:	20012b30 	.word	0x20012b30

0802fc3c <global_stdio_init.part.0>:
 802fc3c:	b510      	push	{r4, lr}
 802fc3e:	4b0b      	ldr	r3, [pc, #44]	@ (802fc6c <global_stdio_init.part.0+0x30>)
 802fc40:	2104      	movs	r1, #4
 802fc42:	4c0b      	ldr	r4, [pc, #44]	@ (802fc70 <global_stdio_init.part.0+0x34>)
 802fc44:	4a0b      	ldr	r2, [pc, #44]	@ (802fc74 <global_stdio_init.part.0+0x38>)
 802fc46:	4620      	mov	r0, r4
 802fc48:	601a      	str	r2, [r3, #0]
 802fc4a:	2200      	movs	r2, #0
 802fc4c:	f7ff ff94 	bl	802fb78 <std>
 802fc50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802fc54:	2201      	movs	r2, #1
 802fc56:	2109      	movs	r1, #9
 802fc58:	f7ff ff8e 	bl	802fb78 <std>
 802fc5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802fc60:	2202      	movs	r2, #2
 802fc62:	2112      	movs	r1, #18
 802fc64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802fc68:	f7ff bf86 	b.w	802fb78 <std>
 802fc6c:	20012b98 	.word	0x20012b98
 802fc70:	20012a60 	.word	0x20012a60
 802fc74:	0802fbe5 	.word	0x0802fbe5

0802fc78 <__sfp_lock_acquire>:
 802fc78:	4801      	ldr	r0, [pc, #4]	@ (802fc80 <__sfp_lock_acquire+0x8>)
 802fc7a:	f000 b9b8 	b.w	802ffee <__retarget_lock_acquire_recursive>
 802fc7e:	bf00      	nop
 802fc80:	20012ba2 	.word	0x20012ba2

0802fc84 <__sfp_lock_release>:
 802fc84:	4801      	ldr	r0, [pc, #4]	@ (802fc8c <__sfp_lock_release+0x8>)
 802fc86:	f000 b9b3 	b.w	802fff0 <__retarget_lock_release_recursive>
 802fc8a:	bf00      	nop
 802fc8c:	20012ba2 	.word	0x20012ba2

0802fc90 <__sinit>:
 802fc90:	b510      	push	{r4, lr}
 802fc92:	4604      	mov	r4, r0
 802fc94:	f7ff fff0 	bl	802fc78 <__sfp_lock_acquire>
 802fc98:	6a23      	ldr	r3, [r4, #32]
 802fc9a:	b11b      	cbz	r3, 802fca4 <__sinit+0x14>
 802fc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802fca0:	f7ff bff0 	b.w	802fc84 <__sfp_lock_release>
 802fca4:	4b04      	ldr	r3, [pc, #16]	@ (802fcb8 <__sinit+0x28>)
 802fca6:	6223      	str	r3, [r4, #32]
 802fca8:	4b04      	ldr	r3, [pc, #16]	@ (802fcbc <__sinit+0x2c>)
 802fcaa:	681b      	ldr	r3, [r3, #0]
 802fcac:	2b00      	cmp	r3, #0
 802fcae:	d1f5      	bne.n	802fc9c <__sinit+0xc>
 802fcb0:	f7ff ffc4 	bl	802fc3c <global_stdio_init.part.0>
 802fcb4:	e7f2      	b.n	802fc9c <__sinit+0xc>
 802fcb6:	bf00      	nop
 802fcb8:	0802fbfd 	.word	0x0802fbfd
 802fcbc:	20012b98 	.word	0x20012b98

0802fcc0 <fiprintf>:
 802fcc0:	b40e      	push	{r1, r2, r3}
 802fcc2:	b503      	push	{r0, r1, lr}
 802fcc4:	ab03      	add	r3, sp, #12
 802fcc6:	4601      	mov	r1, r0
 802fcc8:	4805      	ldr	r0, [pc, #20]	@ (802fce0 <fiprintf+0x20>)
 802fcca:	f853 2b04 	ldr.w	r2, [r3], #4
 802fcce:	6800      	ldr	r0, [r0, #0]
 802fcd0:	9301      	str	r3, [sp, #4]
 802fcd2:	f000 fa6d 	bl	80301b0 <_vfiprintf_r>
 802fcd6:	b002      	add	sp, #8
 802fcd8:	f85d eb04 	ldr.w	lr, [sp], #4
 802fcdc:	b003      	add	sp, #12
 802fcde:	4770      	bx	lr
 802fce0:	200000b0 	.word	0x200000b0

0802fce4 <_fwalk_sglue>:
 802fce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802fce8:	4607      	mov	r7, r0
 802fcea:	4688      	mov	r8, r1
 802fcec:	4614      	mov	r4, r2
 802fcee:	2600      	movs	r6, #0
 802fcf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802fcf4:	f1b9 0901 	subs.w	r9, r9, #1
 802fcf8:	d505      	bpl.n	802fd06 <_fwalk_sglue+0x22>
 802fcfa:	6824      	ldr	r4, [r4, #0]
 802fcfc:	2c00      	cmp	r4, #0
 802fcfe:	d1f7      	bne.n	802fcf0 <_fwalk_sglue+0xc>
 802fd00:	4630      	mov	r0, r6
 802fd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802fd06:	89ab      	ldrh	r3, [r5, #12]
 802fd08:	2b01      	cmp	r3, #1
 802fd0a:	d907      	bls.n	802fd1c <_fwalk_sglue+0x38>
 802fd0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802fd10:	3301      	adds	r3, #1
 802fd12:	d003      	beq.n	802fd1c <_fwalk_sglue+0x38>
 802fd14:	4629      	mov	r1, r5
 802fd16:	4638      	mov	r0, r7
 802fd18:	47c0      	blx	r8
 802fd1a:	4306      	orrs	r6, r0
 802fd1c:	3568      	adds	r5, #104	@ 0x68
 802fd1e:	e7e9      	b.n	802fcf4 <_fwalk_sglue+0x10>

0802fd20 <__sread>:
 802fd20:	b510      	push	{r4, lr}
 802fd22:	460c      	mov	r4, r1
 802fd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fd28:	f000 f8ee 	bl	802ff08 <_read_r>
 802fd2c:	2800      	cmp	r0, #0
 802fd2e:	bfab      	itete	ge
 802fd30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802fd32:	89a3      	ldrhlt	r3, [r4, #12]
 802fd34:	181b      	addge	r3, r3, r0
 802fd36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802fd3a:	bfac      	ite	ge
 802fd3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802fd3e:	81a3      	strhlt	r3, [r4, #12]
 802fd40:	bd10      	pop	{r4, pc}

0802fd42 <__swrite>:
 802fd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802fd46:	461f      	mov	r7, r3
 802fd48:	898b      	ldrh	r3, [r1, #12]
 802fd4a:	4605      	mov	r5, r0
 802fd4c:	460c      	mov	r4, r1
 802fd4e:	05db      	lsls	r3, r3, #23
 802fd50:	4616      	mov	r6, r2
 802fd52:	d505      	bpl.n	802fd60 <__swrite+0x1e>
 802fd54:	2302      	movs	r3, #2
 802fd56:	2200      	movs	r2, #0
 802fd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fd5c:	f000 f8c2 	bl	802fee4 <_lseek_r>
 802fd60:	89a3      	ldrh	r3, [r4, #12]
 802fd62:	4632      	mov	r2, r6
 802fd64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802fd68:	4628      	mov	r0, r5
 802fd6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802fd6e:	81a3      	strh	r3, [r4, #12]
 802fd70:	463b      	mov	r3, r7
 802fd72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802fd76:	f000 b8fd 	b.w	802ff74 <_write_r>

0802fd7a <__sseek>:
 802fd7a:	b510      	push	{r4, lr}
 802fd7c:	460c      	mov	r4, r1
 802fd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fd82:	f000 f8af 	bl	802fee4 <_lseek_r>
 802fd86:	1c43      	adds	r3, r0, #1
 802fd88:	89a3      	ldrh	r3, [r4, #12]
 802fd8a:	bf15      	itete	ne
 802fd8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802fd8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802fd92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802fd96:	81a3      	strheq	r3, [r4, #12]
 802fd98:	bf18      	it	ne
 802fd9a:	81a3      	strhne	r3, [r4, #12]
 802fd9c:	bd10      	pop	{r4, pc}

0802fd9e <__sclose>:
 802fd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fda2:	f000 b839 	b.w	802fe18 <_close_r>

0802fda6 <memset>:
 802fda6:	4402      	add	r2, r0
 802fda8:	4603      	mov	r3, r0
 802fdaa:	4293      	cmp	r3, r2
 802fdac:	d100      	bne.n	802fdb0 <memset+0xa>
 802fdae:	4770      	bx	lr
 802fdb0:	f803 1b01 	strb.w	r1, [r3], #1
 802fdb4:	e7f9      	b.n	802fdaa <memset+0x4>

0802fdb6 <_raise_r>:
 802fdb6:	291f      	cmp	r1, #31
 802fdb8:	b538      	push	{r3, r4, r5, lr}
 802fdba:	4605      	mov	r5, r0
 802fdbc:	460c      	mov	r4, r1
 802fdbe:	d904      	bls.n	802fdca <_raise_r+0x14>
 802fdc0:	2316      	movs	r3, #22
 802fdc2:	6003      	str	r3, [r0, #0]
 802fdc4:	f04f 30ff 	mov.w	r0, #4294967295
 802fdc8:	bd38      	pop	{r3, r4, r5, pc}
 802fdca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802fdcc:	b112      	cbz	r2, 802fdd4 <_raise_r+0x1e>
 802fdce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802fdd2:	b94b      	cbnz	r3, 802fde8 <_raise_r+0x32>
 802fdd4:	4628      	mov	r0, r5
 802fdd6:	f000 f8bb 	bl	802ff50 <_getpid_r>
 802fdda:	4622      	mov	r2, r4
 802fddc:	4601      	mov	r1, r0
 802fdde:	4628      	mov	r0, r5
 802fde0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802fde4:	f000 b8a2 	b.w	802ff2c <_kill_r>
 802fde8:	2b01      	cmp	r3, #1
 802fdea:	d00a      	beq.n	802fe02 <_raise_r+0x4c>
 802fdec:	1c59      	adds	r1, r3, #1
 802fdee:	d103      	bne.n	802fdf8 <_raise_r+0x42>
 802fdf0:	2316      	movs	r3, #22
 802fdf2:	6003      	str	r3, [r0, #0]
 802fdf4:	2001      	movs	r0, #1
 802fdf6:	e7e7      	b.n	802fdc8 <_raise_r+0x12>
 802fdf8:	2100      	movs	r1, #0
 802fdfa:	4620      	mov	r0, r4
 802fdfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802fe00:	4798      	blx	r3
 802fe02:	2000      	movs	r0, #0
 802fe04:	e7e0      	b.n	802fdc8 <_raise_r+0x12>
	...

0802fe08 <raise>:
 802fe08:	4b02      	ldr	r3, [pc, #8]	@ (802fe14 <raise+0xc>)
 802fe0a:	4601      	mov	r1, r0
 802fe0c:	6818      	ldr	r0, [r3, #0]
 802fe0e:	f7ff bfd2 	b.w	802fdb6 <_raise_r>
 802fe12:	bf00      	nop
 802fe14:	200000b0 	.word	0x200000b0

0802fe18 <_close_r>:
 802fe18:	b538      	push	{r3, r4, r5, lr}
 802fe1a:	2300      	movs	r3, #0
 802fe1c:	4d05      	ldr	r5, [pc, #20]	@ (802fe34 <_close_r+0x1c>)
 802fe1e:	4604      	mov	r4, r0
 802fe20:	4608      	mov	r0, r1
 802fe22:	602b      	str	r3, [r5, #0]
 802fe24:	f7d1 f8a2 	bl	8000f6c <_close>
 802fe28:	1c43      	adds	r3, r0, #1
 802fe2a:	d102      	bne.n	802fe32 <_close_r+0x1a>
 802fe2c:	682b      	ldr	r3, [r5, #0]
 802fe2e:	b103      	cbz	r3, 802fe32 <_close_r+0x1a>
 802fe30:	6023      	str	r3, [r4, #0]
 802fe32:	bd38      	pop	{r3, r4, r5, pc}
 802fe34:	20012b9c 	.word	0x20012b9c

0802fe38 <_reclaim_reent>:
 802fe38:	4b29      	ldr	r3, [pc, #164]	@ (802fee0 <_reclaim_reent+0xa8>)
 802fe3a:	681b      	ldr	r3, [r3, #0]
 802fe3c:	4283      	cmp	r3, r0
 802fe3e:	b570      	push	{r4, r5, r6, lr}
 802fe40:	4604      	mov	r4, r0
 802fe42:	d04b      	beq.n	802fedc <_reclaim_reent+0xa4>
 802fe44:	69c3      	ldr	r3, [r0, #28]
 802fe46:	b1ab      	cbz	r3, 802fe74 <_reclaim_reent+0x3c>
 802fe48:	68db      	ldr	r3, [r3, #12]
 802fe4a:	b16b      	cbz	r3, 802fe68 <_reclaim_reent+0x30>
 802fe4c:	2500      	movs	r5, #0
 802fe4e:	69e3      	ldr	r3, [r4, #28]
 802fe50:	68db      	ldr	r3, [r3, #12]
 802fe52:	5959      	ldr	r1, [r3, r5]
 802fe54:	2900      	cmp	r1, #0
 802fe56:	d13b      	bne.n	802fed0 <_reclaim_reent+0x98>
 802fe58:	3504      	adds	r5, #4
 802fe5a:	2d80      	cmp	r5, #128	@ 0x80
 802fe5c:	d1f7      	bne.n	802fe4e <_reclaim_reent+0x16>
 802fe5e:	69e3      	ldr	r3, [r4, #28]
 802fe60:	4620      	mov	r0, r4
 802fe62:	68d9      	ldr	r1, [r3, #12]
 802fe64:	f000 f930 	bl	80300c8 <_free_r>
 802fe68:	69e3      	ldr	r3, [r4, #28]
 802fe6a:	6819      	ldr	r1, [r3, #0]
 802fe6c:	b111      	cbz	r1, 802fe74 <_reclaim_reent+0x3c>
 802fe6e:	4620      	mov	r0, r4
 802fe70:	f000 f92a 	bl	80300c8 <_free_r>
 802fe74:	6961      	ldr	r1, [r4, #20]
 802fe76:	b111      	cbz	r1, 802fe7e <_reclaim_reent+0x46>
 802fe78:	4620      	mov	r0, r4
 802fe7a:	f000 f925 	bl	80300c8 <_free_r>
 802fe7e:	69e1      	ldr	r1, [r4, #28]
 802fe80:	b111      	cbz	r1, 802fe88 <_reclaim_reent+0x50>
 802fe82:	4620      	mov	r0, r4
 802fe84:	f000 f920 	bl	80300c8 <_free_r>
 802fe88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802fe8a:	b111      	cbz	r1, 802fe92 <_reclaim_reent+0x5a>
 802fe8c:	4620      	mov	r0, r4
 802fe8e:	f000 f91b 	bl	80300c8 <_free_r>
 802fe92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802fe94:	b111      	cbz	r1, 802fe9c <_reclaim_reent+0x64>
 802fe96:	4620      	mov	r0, r4
 802fe98:	f000 f916 	bl	80300c8 <_free_r>
 802fe9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802fe9e:	b111      	cbz	r1, 802fea6 <_reclaim_reent+0x6e>
 802fea0:	4620      	mov	r0, r4
 802fea2:	f000 f911 	bl	80300c8 <_free_r>
 802fea6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802fea8:	b111      	cbz	r1, 802feb0 <_reclaim_reent+0x78>
 802feaa:	4620      	mov	r0, r4
 802feac:	f000 f90c 	bl	80300c8 <_free_r>
 802feb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802feb2:	b111      	cbz	r1, 802feba <_reclaim_reent+0x82>
 802feb4:	4620      	mov	r0, r4
 802feb6:	f000 f907 	bl	80300c8 <_free_r>
 802feba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802febc:	b111      	cbz	r1, 802fec4 <_reclaim_reent+0x8c>
 802febe:	4620      	mov	r0, r4
 802fec0:	f000 f902 	bl	80300c8 <_free_r>
 802fec4:	6a23      	ldr	r3, [r4, #32]
 802fec6:	b14b      	cbz	r3, 802fedc <_reclaim_reent+0xa4>
 802fec8:	4620      	mov	r0, r4
 802feca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802fece:	4718      	bx	r3
 802fed0:	680e      	ldr	r6, [r1, #0]
 802fed2:	4620      	mov	r0, r4
 802fed4:	f000 f8f8 	bl	80300c8 <_free_r>
 802fed8:	4631      	mov	r1, r6
 802feda:	e7bb      	b.n	802fe54 <_reclaim_reent+0x1c>
 802fedc:	bd70      	pop	{r4, r5, r6, pc}
 802fede:	bf00      	nop
 802fee0:	200000b0 	.word	0x200000b0

0802fee4 <_lseek_r>:
 802fee4:	b538      	push	{r3, r4, r5, lr}
 802fee6:	4604      	mov	r4, r0
 802fee8:	4d06      	ldr	r5, [pc, #24]	@ (802ff04 <_lseek_r+0x20>)
 802feea:	4608      	mov	r0, r1
 802feec:	4611      	mov	r1, r2
 802feee:	2200      	movs	r2, #0
 802fef0:	602a      	str	r2, [r5, #0]
 802fef2:	461a      	mov	r2, r3
 802fef4:	f7d1 f861 	bl	8000fba <_lseek>
 802fef8:	1c43      	adds	r3, r0, #1
 802fefa:	d102      	bne.n	802ff02 <_lseek_r+0x1e>
 802fefc:	682b      	ldr	r3, [r5, #0]
 802fefe:	b103      	cbz	r3, 802ff02 <_lseek_r+0x1e>
 802ff00:	6023      	str	r3, [r4, #0]
 802ff02:	bd38      	pop	{r3, r4, r5, pc}
 802ff04:	20012b9c 	.word	0x20012b9c

0802ff08 <_read_r>:
 802ff08:	b538      	push	{r3, r4, r5, lr}
 802ff0a:	4604      	mov	r4, r0
 802ff0c:	4d06      	ldr	r5, [pc, #24]	@ (802ff28 <_read_r+0x20>)
 802ff0e:	4608      	mov	r0, r1
 802ff10:	4611      	mov	r1, r2
 802ff12:	2200      	movs	r2, #0
 802ff14:	602a      	str	r2, [r5, #0]
 802ff16:	461a      	mov	r2, r3
 802ff18:	f7d0 ffef 	bl	8000efa <_read>
 802ff1c:	1c43      	adds	r3, r0, #1
 802ff1e:	d102      	bne.n	802ff26 <_read_r+0x1e>
 802ff20:	682b      	ldr	r3, [r5, #0]
 802ff22:	b103      	cbz	r3, 802ff26 <_read_r+0x1e>
 802ff24:	6023      	str	r3, [r4, #0]
 802ff26:	bd38      	pop	{r3, r4, r5, pc}
 802ff28:	20012b9c 	.word	0x20012b9c

0802ff2c <_kill_r>:
 802ff2c:	b538      	push	{r3, r4, r5, lr}
 802ff2e:	2300      	movs	r3, #0
 802ff30:	4d06      	ldr	r5, [pc, #24]	@ (802ff4c <_kill_r+0x20>)
 802ff32:	4604      	mov	r4, r0
 802ff34:	4608      	mov	r0, r1
 802ff36:	4611      	mov	r1, r2
 802ff38:	602b      	str	r3, [r5, #0]
 802ff3a:	f7d0 ffc3 	bl	8000ec4 <_kill>
 802ff3e:	1c43      	adds	r3, r0, #1
 802ff40:	d102      	bne.n	802ff48 <_kill_r+0x1c>
 802ff42:	682b      	ldr	r3, [r5, #0]
 802ff44:	b103      	cbz	r3, 802ff48 <_kill_r+0x1c>
 802ff46:	6023      	str	r3, [r4, #0]
 802ff48:	bd38      	pop	{r3, r4, r5, pc}
 802ff4a:	bf00      	nop
 802ff4c:	20012b9c 	.word	0x20012b9c

0802ff50 <_getpid_r>:
 802ff50:	f7d0 bfb0 	b.w	8000eb4 <_getpid>

0802ff54 <_sbrk_r>:
 802ff54:	b538      	push	{r3, r4, r5, lr}
 802ff56:	2300      	movs	r3, #0
 802ff58:	4d05      	ldr	r5, [pc, #20]	@ (802ff70 <_sbrk_r+0x1c>)
 802ff5a:	4604      	mov	r4, r0
 802ff5c:	4608      	mov	r0, r1
 802ff5e:	602b      	str	r3, [r5, #0]
 802ff60:	f7d1 f838 	bl	8000fd4 <_sbrk>
 802ff64:	1c43      	adds	r3, r0, #1
 802ff66:	d102      	bne.n	802ff6e <_sbrk_r+0x1a>
 802ff68:	682b      	ldr	r3, [r5, #0]
 802ff6a:	b103      	cbz	r3, 802ff6e <_sbrk_r+0x1a>
 802ff6c:	6023      	str	r3, [r4, #0]
 802ff6e:	bd38      	pop	{r3, r4, r5, pc}
 802ff70:	20012b9c 	.word	0x20012b9c

0802ff74 <_write_r>:
 802ff74:	b538      	push	{r3, r4, r5, lr}
 802ff76:	4604      	mov	r4, r0
 802ff78:	4d06      	ldr	r5, [pc, #24]	@ (802ff94 <_write_r+0x20>)
 802ff7a:	4608      	mov	r0, r1
 802ff7c:	4611      	mov	r1, r2
 802ff7e:	2200      	movs	r2, #0
 802ff80:	602a      	str	r2, [r5, #0]
 802ff82:	461a      	mov	r2, r3
 802ff84:	f7d0 ffd6 	bl	8000f34 <_write>
 802ff88:	1c43      	adds	r3, r0, #1
 802ff8a:	d102      	bne.n	802ff92 <_write_r+0x1e>
 802ff8c:	682b      	ldr	r3, [r5, #0]
 802ff8e:	b103      	cbz	r3, 802ff92 <_write_r+0x1e>
 802ff90:	6023      	str	r3, [r4, #0]
 802ff92:	bd38      	pop	{r3, r4, r5, pc}
 802ff94:	20012b9c 	.word	0x20012b9c

0802ff98 <__errno>:
 802ff98:	4b01      	ldr	r3, [pc, #4]	@ (802ffa0 <__errno+0x8>)
 802ff9a:	6818      	ldr	r0, [r3, #0]
 802ff9c:	4770      	bx	lr
 802ff9e:	bf00      	nop
 802ffa0:	200000b0 	.word	0x200000b0

0802ffa4 <__libc_init_array>:
 802ffa4:	b570      	push	{r4, r5, r6, lr}
 802ffa6:	4d0d      	ldr	r5, [pc, #52]	@ (802ffdc <__libc_init_array+0x38>)
 802ffa8:	2600      	movs	r6, #0
 802ffaa:	4c0d      	ldr	r4, [pc, #52]	@ (802ffe0 <__libc_init_array+0x3c>)
 802ffac:	1b64      	subs	r4, r4, r5
 802ffae:	10a4      	asrs	r4, r4, #2
 802ffb0:	42a6      	cmp	r6, r4
 802ffb2:	d109      	bne.n	802ffc8 <__libc_init_array+0x24>
 802ffb4:	4d0b      	ldr	r5, [pc, #44]	@ (802ffe4 <__libc_init_array+0x40>)
 802ffb6:	2600      	movs	r6, #0
 802ffb8:	4c0b      	ldr	r4, [pc, #44]	@ (802ffe8 <__libc_init_array+0x44>)
 802ffba:	f000 fd75 	bl	8030aa8 <_init>
 802ffbe:	1b64      	subs	r4, r4, r5
 802ffc0:	10a4      	asrs	r4, r4, #2
 802ffc2:	42a6      	cmp	r6, r4
 802ffc4:	d105      	bne.n	802ffd2 <__libc_init_array+0x2e>
 802ffc6:	bd70      	pop	{r4, r5, r6, pc}
 802ffc8:	f855 3b04 	ldr.w	r3, [r5], #4
 802ffcc:	3601      	adds	r6, #1
 802ffce:	4798      	blx	r3
 802ffd0:	e7ee      	b.n	802ffb0 <__libc_init_array+0xc>
 802ffd2:	f855 3b04 	ldr.w	r3, [r5], #4
 802ffd6:	3601      	adds	r6, #1
 802ffd8:	4798      	blx	r3
 802ffda:	e7f2      	b.n	802ffc2 <__libc_init_array+0x1e>
 802ffdc:	0803dfcc 	.word	0x0803dfcc
 802ffe0:	0803dfcc 	.word	0x0803dfcc
 802ffe4:	0803dfcc 	.word	0x0803dfcc
 802ffe8:	0803dfe4 	.word	0x0803dfe4

0802ffec <__retarget_lock_init_recursive>:
 802ffec:	4770      	bx	lr

0802ffee <__retarget_lock_acquire_recursive>:
 802ffee:	4770      	bx	lr

0802fff0 <__retarget_lock_release_recursive>:
 802fff0:	4770      	bx	lr

0802fff2 <memcpy>:
 802fff2:	440a      	add	r2, r1
 802fff4:	1e43      	subs	r3, r0, #1
 802fff6:	4291      	cmp	r1, r2
 802fff8:	d100      	bne.n	802fffc <memcpy+0xa>
 802fffa:	4770      	bx	lr
 802fffc:	b510      	push	{r4, lr}
 802fffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8030002:	4291      	cmp	r1, r2
 8030004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8030008:	d1f9      	bne.n	802fffe <memcpy+0xc>
 803000a:	bd10      	pop	{r4, pc}

0803000c <__register_exitproc>:
 803000c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030010:	4d28      	ldr	r5, [pc, #160]	@ (80300b4 <__register_exitproc+0xa8>)
 8030012:	4607      	mov	r7, r0
 8030014:	4691      	mov	r9, r2
 8030016:	460e      	mov	r6, r1
 8030018:	6828      	ldr	r0, [r5, #0]
 803001a:	4698      	mov	r8, r3
 803001c:	f7ff ffe7 	bl	802ffee <__retarget_lock_acquire_recursive>
 8030020:	4a25      	ldr	r2, [pc, #148]	@ (80300b8 <__register_exitproc+0xac>)
 8030022:	6814      	ldr	r4, [r2, #0]
 8030024:	b93c      	cbnz	r4, 8030036 <__register_exitproc+0x2a>
 8030026:	4b25      	ldr	r3, [pc, #148]	@ (80300bc <__register_exitproc+0xb0>)
 8030028:	6013      	str	r3, [r2, #0]
 803002a:	4a25      	ldr	r2, [pc, #148]	@ (80300c0 <__register_exitproc+0xb4>)
 803002c:	b112      	cbz	r2, 8030034 <__register_exitproc+0x28>
 803002e:	6812      	ldr	r2, [r2, #0]
 8030030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8030034:	4c21      	ldr	r4, [pc, #132]	@ (80300bc <__register_exitproc+0xb0>)
 8030036:	6863      	ldr	r3, [r4, #4]
 8030038:	2b1f      	cmp	r3, #31
 803003a:	dd06      	ble.n	803004a <__register_exitproc+0x3e>
 803003c:	6828      	ldr	r0, [r5, #0]
 803003e:	f7ff ffd7 	bl	802fff0 <__retarget_lock_release_recursive>
 8030042:	f04f 30ff 	mov.w	r0, #4294967295
 8030046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803004a:	b33f      	cbz	r7, 803009c <__register_exitproc+0x90>
 803004c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8030050:	b968      	cbnz	r0, 803006e <__register_exitproc+0x62>
 8030052:	4b1c      	ldr	r3, [pc, #112]	@ (80300c4 <__register_exitproc+0xb8>)
 8030054:	2b00      	cmp	r3, #0
 8030056:	d0f1      	beq.n	803003c <__register_exitproc+0x30>
 8030058:	f44f 7084 	mov.w	r0, #264	@ 0x108
 803005c:	f7ff fcc0 	bl	802f9e0 <malloc>
 8030060:	2800      	cmp	r0, #0
 8030062:	d0eb      	beq.n	803003c <__register_exitproc+0x30>
 8030064:	2300      	movs	r3, #0
 8030066:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 803006a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 803006e:	6863      	ldr	r3, [r4, #4]
 8030070:	2201      	movs	r2, #1
 8030072:	2f02      	cmp	r7, #2
 8030074:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8030078:	fa02 f203 	lsl.w	r2, r2, r3
 803007c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8030080:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8030084:	ea43 0302 	orr.w	r3, r3, r2
 8030088:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 803008c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8030090:	bf02      	ittt	eq
 8030092:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8030096:	4313      	orreq	r3, r2
 8030098:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 803009c:	6863      	ldr	r3, [r4, #4]
 803009e:	6828      	ldr	r0, [r5, #0]
 80300a0:	1c5a      	adds	r2, r3, #1
 80300a2:	3302      	adds	r3, #2
 80300a4:	6062      	str	r2, [r4, #4]
 80300a6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80300aa:	f7ff ffa1 	bl	802fff0 <__retarget_lock_release_recursive>
 80300ae:	2000      	movs	r0, #0
 80300b0:	e7c9      	b.n	8030046 <__register_exitproc+0x3a>
 80300b2:	bf00      	nop
 80300b4:	20000100 	.word	0x20000100
 80300b8:	20012c30 	.word	0x20012c30
 80300bc:	20012ba4 	.word	0x20012ba4
 80300c0:	08033c38 	.word	0x08033c38
 80300c4:	0802f9e1 	.word	0x0802f9e1

080300c8 <_free_r>:
 80300c8:	b538      	push	{r3, r4, r5, lr}
 80300ca:	4605      	mov	r5, r0
 80300cc:	2900      	cmp	r1, #0
 80300ce:	d041      	beq.n	8030154 <_free_r+0x8c>
 80300d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80300d4:	1f0c      	subs	r4, r1, #4
 80300d6:	2b00      	cmp	r3, #0
 80300d8:	bfb8      	it	lt
 80300da:	18e4      	addlt	r4, r4, r3
 80300dc:	f7ff fd32 	bl	802fb44 <__malloc_lock>
 80300e0:	4a1d      	ldr	r2, [pc, #116]	@ (8030158 <_free_r+0x90>)
 80300e2:	6813      	ldr	r3, [r2, #0]
 80300e4:	b933      	cbnz	r3, 80300f4 <_free_r+0x2c>
 80300e6:	6063      	str	r3, [r4, #4]
 80300e8:	6014      	str	r4, [r2, #0]
 80300ea:	4628      	mov	r0, r5
 80300ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80300f0:	f7ff bd2e 	b.w	802fb50 <__malloc_unlock>
 80300f4:	42a3      	cmp	r3, r4
 80300f6:	d908      	bls.n	803010a <_free_r+0x42>
 80300f8:	6820      	ldr	r0, [r4, #0]
 80300fa:	1821      	adds	r1, r4, r0
 80300fc:	428b      	cmp	r3, r1
 80300fe:	bf01      	itttt	eq
 8030100:	6819      	ldreq	r1, [r3, #0]
 8030102:	685b      	ldreq	r3, [r3, #4]
 8030104:	1809      	addeq	r1, r1, r0
 8030106:	6021      	streq	r1, [r4, #0]
 8030108:	e7ed      	b.n	80300e6 <_free_r+0x1e>
 803010a:	461a      	mov	r2, r3
 803010c:	685b      	ldr	r3, [r3, #4]
 803010e:	b10b      	cbz	r3, 8030114 <_free_r+0x4c>
 8030110:	42a3      	cmp	r3, r4
 8030112:	d9fa      	bls.n	803010a <_free_r+0x42>
 8030114:	6811      	ldr	r1, [r2, #0]
 8030116:	1850      	adds	r0, r2, r1
 8030118:	42a0      	cmp	r0, r4
 803011a:	d10b      	bne.n	8030134 <_free_r+0x6c>
 803011c:	6820      	ldr	r0, [r4, #0]
 803011e:	4401      	add	r1, r0
 8030120:	1850      	adds	r0, r2, r1
 8030122:	6011      	str	r1, [r2, #0]
 8030124:	4283      	cmp	r3, r0
 8030126:	d1e0      	bne.n	80300ea <_free_r+0x22>
 8030128:	6818      	ldr	r0, [r3, #0]
 803012a:	685b      	ldr	r3, [r3, #4]
 803012c:	4408      	add	r0, r1
 803012e:	6053      	str	r3, [r2, #4]
 8030130:	6010      	str	r0, [r2, #0]
 8030132:	e7da      	b.n	80300ea <_free_r+0x22>
 8030134:	d902      	bls.n	803013c <_free_r+0x74>
 8030136:	230c      	movs	r3, #12
 8030138:	602b      	str	r3, [r5, #0]
 803013a:	e7d6      	b.n	80300ea <_free_r+0x22>
 803013c:	6820      	ldr	r0, [r4, #0]
 803013e:	1821      	adds	r1, r4, r0
 8030140:	428b      	cmp	r3, r1
 8030142:	bf02      	ittt	eq
 8030144:	6819      	ldreq	r1, [r3, #0]
 8030146:	685b      	ldreq	r3, [r3, #4]
 8030148:	1809      	addeq	r1, r1, r0
 803014a:	6063      	str	r3, [r4, #4]
 803014c:	bf08      	it	eq
 803014e:	6021      	streq	r1, [r4, #0]
 8030150:	6054      	str	r4, [r2, #4]
 8030152:	e7ca      	b.n	80300ea <_free_r+0x22>
 8030154:	bd38      	pop	{r3, r4, r5, pc}
 8030156:	bf00      	nop
 8030158:	20012a5c 	.word	0x20012a5c

0803015c <__sfputc_r>:
 803015c:	6893      	ldr	r3, [r2, #8]
 803015e:	3b01      	subs	r3, #1
 8030160:	2b00      	cmp	r3, #0
 8030162:	6093      	str	r3, [r2, #8]
 8030164:	b410      	push	{r4}
 8030166:	da08      	bge.n	803017a <__sfputc_r+0x1e>
 8030168:	6994      	ldr	r4, [r2, #24]
 803016a:	42a3      	cmp	r3, r4
 803016c:	db01      	blt.n	8030172 <__sfputc_r+0x16>
 803016e:	290a      	cmp	r1, #10
 8030170:	d103      	bne.n	803017a <__sfputc_r+0x1e>
 8030172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030176:	f000 bb71 	b.w	803085c <__swbuf_r>
 803017a:	6813      	ldr	r3, [r2, #0]
 803017c:	1c58      	adds	r0, r3, #1
 803017e:	6010      	str	r0, [r2, #0]
 8030180:	4608      	mov	r0, r1
 8030182:	7019      	strb	r1, [r3, #0]
 8030184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030188:	4770      	bx	lr

0803018a <__sfputs_r>:
 803018a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803018c:	4606      	mov	r6, r0
 803018e:	460f      	mov	r7, r1
 8030190:	4614      	mov	r4, r2
 8030192:	18d5      	adds	r5, r2, r3
 8030194:	42ac      	cmp	r4, r5
 8030196:	d101      	bne.n	803019c <__sfputs_r+0x12>
 8030198:	2000      	movs	r0, #0
 803019a:	e007      	b.n	80301ac <__sfputs_r+0x22>
 803019c:	463a      	mov	r2, r7
 803019e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80301a2:	4630      	mov	r0, r6
 80301a4:	f7ff ffda 	bl	803015c <__sfputc_r>
 80301a8:	1c43      	adds	r3, r0, #1
 80301aa:	d1f3      	bne.n	8030194 <__sfputs_r+0xa>
 80301ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080301b0 <_vfiprintf_r>:
 80301b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80301b4:	460d      	mov	r5, r1
 80301b6:	b09d      	sub	sp, #116	@ 0x74
 80301b8:	4614      	mov	r4, r2
 80301ba:	4698      	mov	r8, r3
 80301bc:	4606      	mov	r6, r0
 80301be:	b118      	cbz	r0, 80301c8 <_vfiprintf_r+0x18>
 80301c0:	6a03      	ldr	r3, [r0, #32]
 80301c2:	b90b      	cbnz	r3, 80301c8 <_vfiprintf_r+0x18>
 80301c4:	f7ff fd64 	bl	802fc90 <__sinit>
 80301c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80301ca:	07d9      	lsls	r1, r3, #31
 80301cc:	d405      	bmi.n	80301da <_vfiprintf_r+0x2a>
 80301ce:	89ab      	ldrh	r3, [r5, #12]
 80301d0:	059a      	lsls	r2, r3, #22
 80301d2:	d402      	bmi.n	80301da <_vfiprintf_r+0x2a>
 80301d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80301d6:	f7ff ff0a 	bl	802ffee <__retarget_lock_acquire_recursive>
 80301da:	89ab      	ldrh	r3, [r5, #12]
 80301dc:	071b      	lsls	r3, r3, #28
 80301de:	d501      	bpl.n	80301e4 <_vfiprintf_r+0x34>
 80301e0:	692b      	ldr	r3, [r5, #16]
 80301e2:	b99b      	cbnz	r3, 803020c <_vfiprintf_r+0x5c>
 80301e4:	4629      	mov	r1, r5
 80301e6:	4630      	mov	r0, r6
 80301e8:	f000 fb76 	bl	80308d8 <__swsetup_r>
 80301ec:	b170      	cbz	r0, 803020c <_vfiprintf_r+0x5c>
 80301ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80301f0:	07dc      	lsls	r4, r3, #31
 80301f2:	d504      	bpl.n	80301fe <_vfiprintf_r+0x4e>
 80301f4:	f04f 30ff 	mov.w	r0, #4294967295
 80301f8:	b01d      	add	sp, #116	@ 0x74
 80301fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80301fe:	89ab      	ldrh	r3, [r5, #12]
 8030200:	0598      	lsls	r0, r3, #22
 8030202:	d4f7      	bmi.n	80301f4 <_vfiprintf_r+0x44>
 8030204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8030206:	f7ff fef3 	bl	802fff0 <__retarget_lock_release_recursive>
 803020a:	e7f3      	b.n	80301f4 <_vfiprintf_r+0x44>
 803020c:	2300      	movs	r3, #0
 803020e:	f8cd 800c 	str.w	r8, [sp, #12]
 8030212:	f04f 0901 	mov.w	r9, #1
 8030216:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80303cc <_vfiprintf_r+0x21c>
 803021a:	9309      	str	r3, [sp, #36]	@ 0x24
 803021c:	2320      	movs	r3, #32
 803021e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8030222:	2330      	movs	r3, #48	@ 0x30
 8030224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8030228:	4623      	mov	r3, r4
 803022a:	469a      	mov	sl, r3
 803022c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030230:	b10a      	cbz	r2, 8030236 <_vfiprintf_r+0x86>
 8030232:	2a25      	cmp	r2, #37	@ 0x25
 8030234:	d1f9      	bne.n	803022a <_vfiprintf_r+0x7a>
 8030236:	ebba 0b04 	subs.w	fp, sl, r4
 803023a:	d00b      	beq.n	8030254 <_vfiprintf_r+0xa4>
 803023c:	465b      	mov	r3, fp
 803023e:	4622      	mov	r2, r4
 8030240:	4629      	mov	r1, r5
 8030242:	4630      	mov	r0, r6
 8030244:	f7ff ffa1 	bl	803018a <__sfputs_r>
 8030248:	3001      	adds	r0, #1
 803024a:	f000 80a7 	beq.w	803039c <_vfiprintf_r+0x1ec>
 803024e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8030250:	445a      	add	r2, fp
 8030252:	9209      	str	r2, [sp, #36]	@ 0x24
 8030254:	f89a 3000 	ldrb.w	r3, [sl]
 8030258:	2b00      	cmp	r3, #0
 803025a:	f000 809f 	beq.w	803039c <_vfiprintf_r+0x1ec>
 803025e:	2300      	movs	r3, #0
 8030260:	f04f 32ff 	mov.w	r2, #4294967295
 8030264:	f10a 0a01 	add.w	sl, sl, #1
 8030268:	9304      	str	r3, [sp, #16]
 803026a:	9307      	str	r3, [sp, #28]
 803026c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8030270:	931a      	str	r3, [sp, #104]	@ 0x68
 8030272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030276:	4654      	mov	r4, sl
 8030278:	2205      	movs	r2, #5
 803027a:	4854      	ldr	r0, [pc, #336]	@ (80303cc <_vfiprintf_r+0x21c>)
 803027c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030280:	f000 fb80 	bl	8030984 <memchr>
 8030284:	9a04      	ldr	r2, [sp, #16]
 8030286:	b9d8      	cbnz	r0, 80302c0 <_vfiprintf_r+0x110>
 8030288:	06d1      	lsls	r1, r2, #27
 803028a:	bf44      	itt	mi
 803028c:	2320      	movmi	r3, #32
 803028e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8030292:	0713      	lsls	r3, r2, #28
 8030294:	bf44      	itt	mi
 8030296:	232b      	movmi	r3, #43	@ 0x2b
 8030298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803029c:	f89a 3000 	ldrb.w	r3, [sl]
 80302a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80302a2:	d015      	beq.n	80302d0 <_vfiprintf_r+0x120>
 80302a4:	9a07      	ldr	r2, [sp, #28]
 80302a6:	4654      	mov	r4, sl
 80302a8:	2000      	movs	r0, #0
 80302aa:	f04f 0c0a 	mov.w	ip, #10
 80302ae:	4621      	mov	r1, r4
 80302b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80302b4:	3b30      	subs	r3, #48	@ 0x30
 80302b6:	2b09      	cmp	r3, #9
 80302b8:	d94b      	bls.n	8030352 <_vfiprintf_r+0x1a2>
 80302ba:	b1b0      	cbz	r0, 80302ea <_vfiprintf_r+0x13a>
 80302bc:	9207      	str	r2, [sp, #28]
 80302be:	e014      	b.n	80302ea <_vfiprintf_r+0x13a>
 80302c0:	eba0 0308 	sub.w	r3, r0, r8
 80302c4:	46a2      	mov	sl, r4
 80302c6:	fa09 f303 	lsl.w	r3, r9, r3
 80302ca:	4313      	orrs	r3, r2
 80302cc:	9304      	str	r3, [sp, #16]
 80302ce:	e7d2      	b.n	8030276 <_vfiprintf_r+0xc6>
 80302d0:	9b03      	ldr	r3, [sp, #12]
 80302d2:	1d19      	adds	r1, r3, #4
 80302d4:	681b      	ldr	r3, [r3, #0]
 80302d6:	2b00      	cmp	r3, #0
 80302d8:	9103      	str	r1, [sp, #12]
 80302da:	bfbb      	ittet	lt
 80302dc:	425b      	neglt	r3, r3
 80302de:	f042 0202 	orrlt.w	r2, r2, #2
 80302e2:	9307      	strge	r3, [sp, #28]
 80302e4:	9307      	strlt	r3, [sp, #28]
 80302e6:	bfb8      	it	lt
 80302e8:	9204      	strlt	r2, [sp, #16]
 80302ea:	7823      	ldrb	r3, [r4, #0]
 80302ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80302ee:	d10a      	bne.n	8030306 <_vfiprintf_r+0x156>
 80302f0:	7863      	ldrb	r3, [r4, #1]
 80302f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80302f4:	d132      	bne.n	803035c <_vfiprintf_r+0x1ac>
 80302f6:	9b03      	ldr	r3, [sp, #12]
 80302f8:	3402      	adds	r4, #2
 80302fa:	1d1a      	adds	r2, r3, #4
 80302fc:	681b      	ldr	r3, [r3, #0]
 80302fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8030302:	9203      	str	r2, [sp, #12]
 8030304:	9305      	str	r3, [sp, #20]
 8030306:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80303dc <_vfiprintf_r+0x22c>
 803030a:	2203      	movs	r2, #3
 803030c:	7821      	ldrb	r1, [r4, #0]
 803030e:	4650      	mov	r0, sl
 8030310:	f000 fb38 	bl	8030984 <memchr>
 8030314:	b138      	cbz	r0, 8030326 <_vfiprintf_r+0x176>
 8030316:	eba0 000a 	sub.w	r0, r0, sl
 803031a:	2240      	movs	r2, #64	@ 0x40
 803031c:	9b04      	ldr	r3, [sp, #16]
 803031e:	3401      	adds	r4, #1
 8030320:	4082      	lsls	r2, r0
 8030322:	4313      	orrs	r3, r2
 8030324:	9304      	str	r3, [sp, #16]
 8030326:	f814 1b01 	ldrb.w	r1, [r4], #1
 803032a:	2206      	movs	r2, #6
 803032c:	4828      	ldr	r0, [pc, #160]	@ (80303d0 <_vfiprintf_r+0x220>)
 803032e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8030332:	f000 fb27 	bl	8030984 <memchr>
 8030336:	2800      	cmp	r0, #0
 8030338:	d03f      	beq.n	80303ba <_vfiprintf_r+0x20a>
 803033a:	4b26      	ldr	r3, [pc, #152]	@ (80303d4 <_vfiprintf_r+0x224>)
 803033c:	bb1b      	cbnz	r3, 8030386 <_vfiprintf_r+0x1d6>
 803033e:	9b03      	ldr	r3, [sp, #12]
 8030340:	3307      	adds	r3, #7
 8030342:	f023 0307 	bic.w	r3, r3, #7
 8030346:	3308      	adds	r3, #8
 8030348:	9303      	str	r3, [sp, #12]
 803034a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803034c:	443b      	add	r3, r7
 803034e:	9309      	str	r3, [sp, #36]	@ 0x24
 8030350:	e76a      	b.n	8030228 <_vfiprintf_r+0x78>
 8030352:	fb0c 3202 	mla	r2, ip, r2, r3
 8030356:	460c      	mov	r4, r1
 8030358:	2001      	movs	r0, #1
 803035a:	e7a8      	b.n	80302ae <_vfiprintf_r+0xfe>
 803035c:	2300      	movs	r3, #0
 803035e:	3401      	adds	r4, #1
 8030360:	f04f 0c0a 	mov.w	ip, #10
 8030364:	4619      	mov	r1, r3
 8030366:	9305      	str	r3, [sp, #20]
 8030368:	4620      	mov	r0, r4
 803036a:	f810 2b01 	ldrb.w	r2, [r0], #1
 803036e:	3a30      	subs	r2, #48	@ 0x30
 8030370:	2a09      	cmp	r2, #9
 8030372:	d903      	bls.n	803037c <_vfiprintf_r+0x1cc>
 8030374:	2b00      	cmp	r3, #0
 8030376:	d0c6      	beq.n	8030306 <_vfiprintf_r+0x156>
 8030378:	9105      	str	r1, [sp, #20]
 803037a:	e7c4      	b.n	8030306 <_vfiprintf_r+0x156>
 803037c:	fb0c 2101 	mla	r1, ip, r1, r2
 8030380:	4604      	mov	r4, r0
 8030382:	2301      	movs	r3, #1
 8030384:	e7f0      	b.n	8030368 <_vfiprintf_r+0x1b8>
 8030386:	ab03      	add	r3, sp, #12
 8030388:	462a      	mov	r2, r5
 803038a:	a904      	add	r1, sp, #16
 803038c:	4630      	mov	r0, r6
 803038e:	9300      	str	r3, [sp, #0]
 8030390:	4b11      	ldr	r3, [pc, #68]	@ (80303d8 <_vfiprintf_r+0x228>)
 8030392:	f3af 8000 	nop.w
 8030396:	4607      	mov	r7, r0
 8030398:	1c78      	adds	r0, r7, #1
 803039a:	d1d6      	bne.n	803034a <_vfiprintf_r+0x19a>
 803039c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803039e:	07d9      	lsls	r1, r3, #31
 80303a0:	d405      	bmi.n	80303ae <_vfiprintf_r+0x1fe>
 80303a2:	89ab      	ldrh	r3, [r5, #12]
 80303a4:	059a      	lsls	r2, r3, #22
 80303a6:	d402      	bmi.n	80303ae <_vfiprintf_r+0x1fe>
 80303a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80303aa:	f7ff fe21 	bl	802fff0 <__retarget_lock_release_recursive>
 80303ae:	89ab      	ldrh	r3, [r5, #12]
 80303b0:	065b      	lsls	r3, r3, #25
 80303b2:	f53f af1f 	bmi.w	80301f4 <_vfiprintf_r+0x44>
 80303b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80303b8:	e71e      	b.n	80301f8 <_vfiprintf_r+0x48>
 80303ba:	ab03      	add	r3, sp, #12
 80303bc:	462a      	mov	r2, r5
 80303be:	a904      	add	r1, sp, #16
 80303c0:	4630      	mov	r0, r6
 80303c2:	9300      	str	r3, [sp, #0]
 80303c4:	4b04      	ldr	r3, [pc, #16]	@ (80303d8 <_vfiprintf_r+0x228>)
 80303c6:	f000 f87d 	bl	80304c4 <_printf_i>
 80303ca:	e7e4      	b.n	8030396 <_vfiprintf_r+0x1e6>
 80303cc:	08033c3c 	.word	0x08033c3c
 80303d0:	08033c46 	.word	0x08033c46
 80303d4:	00000000 	.word	0x00000000
 80303d8:	0803018b 	.word	0x0803018b
 80303dc:	08033c42 	.word	0x08033c42

080303e0 <_printf_common>:
 80303e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80303e4:	4616      	mov	r6, r2
 80303e6:	4698      	mov	r8, r3
 80303e8:	688a      	ldr	r2, [r1, #8]
 80303ea:	4607      	mov	r7, r0
 80303ec:	690b      	ldr	r3, [r1, #16]
 80303ee:	460c      	mov	r4, r1
 80303f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80303f4:	4293      	cmp	r3, r2
 80303f6:	bfb8      	it	lt
 80303f8:	4613      	movlt	r3, r2
 80303fa:	6033      	str	r3, [r6, #0]
 80303fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8030400:	b10a      	cbz	r2, 8030406 <_printf_common+0x26>
 8030402:	3301      	adds	r3, #1
 8030404:	6033      	str	r3, [r6, #0]
 8030406:	6823      	ldr	r3, [r4, #0]
 8030408:	0699      	lsls	r1, r3, #26
 803040a:	bf42      	ittt	mi
 803040c:	6833      	ldrmi	r3, [r6, #0]
 803040e:	3302      	addmi	r3, #2
 8030410:	6033      	strmi	r3, [r6, #0]
 8030412:	6825      	ldr	r5, [r4, #0]
 8030414:	f015 0506 	ands.w	r5, r5, #6
 8030418:	d106      	bne.n	8030428 <_printf_common+0x48>
 803041a:	f104 0a19 	add.w	sl, r4, #25
 803041e:	68e3      	ldr	r3, [r4, #12]
 8030420:	6832      	ldr	r2, [r6, #0]
 8030422:	1a9b      	subs	r3, r3, r2
 8030424:	42ab      	cmp	r3, r5
 8030426:	dc2b      	bgt.n	8030480 <_printf_common+0xa0>
 8030428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 803042c:	6822      	ldr	r2, [r4, #0]
 803042e:	3b00      	subs	r3, #0
 8030430:	bf18      	it	ne
 8030432:	2301      	movne	r3, #1
 8030434:	0692      	lsls	r2, r2, #26
 8030436:	d430      	bmi.n	803049a <_printf_common+0xba>
 8030438:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 803043c:	4641      	mov	r1, r8
 803043e:	4638      	mov	r0, r7
 8030440:	47c8      	blx	r9
 8030442:	3001      	adds	r0, #1
 8030444:	d023      	beq.n	803048e <_printf_common+0xae>
 8030446:	6823      	ldr	r3, [r4, #0]
 8030448:	341a      	adds	r4, #26
 803044a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 803044e:	f003 0306 	and.w	r3, r3, #6
 8030452:	2b04      	cmp	r3, #4
 8030454:	bf0a      	itet	eq
 8030456:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 803045a:	2500      	movne	r5, #0
 803045c:	6833      	ldreq	r3, [r6, #0]
 803045e:	f04f 0600 	mov.w	r6, #0
 8030462:	bf08      	it	eq
 8030464:	1aed      	subeq	r5, r5, r3
 8030466:	f854 3c12 	ldr.w	r3, [r4, #-18]
 803046a:	bf08      	it	eq
 803046c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8030470:	4293      	cmp	r3, r2
 8030472:	bfc4      	itt	gt
 8030474:	1a9b      	subgt	r3, r3, r2
 8030476:	18ed      	addgt	r5, r5, r3
 8030478:	42b5      	cmp	r5, r6
 803047a:	d11a      	bne.n	80304b2 <_printf_common+0xd2>
 803047c:	2000      	movs	r0, #0
 803047e:	e008      	b.n	8030492 <_printf_common+0xb2>
 8030480:	2301      	movs	r3, #1
 8030482:	4652      	mov	r2, sl
 8030484:	4641      	mov	r1, r8
 8030486:	4638      	mov	r0, r7
 8030488:	47c8      	blx	r9
 803048a:	3001      	adds	r0, #1
 803048c:	d103      	bne.n	8030496 <_printf_common+0xb6>
 803048e:	f04f 30ff 	mov.w	r0, #4294967295
 8030492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030496:	3501      	adds	r5, #1
 8030498:	e7c1      	b.n	803041e <_printf_common+0x3e>
 803049a:	18e1      	adds	r1, r4, r3
 803049c:	1c5a      	adds	r2, r3, #1
 803049e:	2030      	movs	r0, #48	@ 0x30
 80304a0:	3302      	adds	r3, #2
 80304a2:	4422      	add	r2, r4
 80304a4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80304a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80304ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80304b0:	e7c2      	b.n	8030438 <_printf_common+0x58>
 80304b2:	2301      	movs	r3, #1
 80304b4:	4622      	mov	r2, r4
 80304b6:	4641      	mov	r1, r8
 80304b8:	4638      	mov	r0, r7
 80304ba:	47c8      	blx	r9
 80304bc:	3001      	adds	r0, #1
 80304be:	d0e6      	beq.n	803048e <_printf_common+0xae>
 80304c0:	3601      	adds	r6, #1
 80304c2:	e7d9      	b.n	8030478 <_printf_common+0x98>

080304c4 <_printf_i>:
 80304c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80304c8:	7e0f      	ldrb	r7, [r1, #24]
 80304ca:	4691      	mov	r9, r2
 80304cc:	4680      	mov	r8, r0
 80304ce:	460c      	mov	r4, r1
 80304d0:	2f78      	cmp	r7, #120	@ 0x78
 80304d2:	469a      	mov	sl, r3
 80304d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80304d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80304da:	d807      	bhi.n	80304ec <_printf_i+0x28>
 80304dc:	2f62      	cmp	r7, #98	@ 0x62
 80304de:	d80a      	bhi.n	80304f6 <_printf_i+0x32>
 80304e0:	2f00      	cmp	r7, #0
 80304e2:	f000 80d2 	beq.w	803068a <_printf_i+0x1c6>
 80304e6:	2f58      	cmp	r7, #88	@ 0x58
 80304e8:	f000 80b9 	beq.w	803065e <_printf_i+0x19a>
 80304ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80304f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80304f4:	e03a      	b.n	803056c <_printf_i+0xa8>
 80304f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80304fa:	2b15      	cmp	r3, #21
 80304fc:	d8f6      	bhi.n	80304ec <_printf_i+0x28>
 80304fe:	a101      	add	r1, pc, #4	@ (adr r1, 8030504 <_printf_i+0x40>)
 8030500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8030504:	0803055d 	.word	0x0803055d
 8030508:	08030571 	.word	0x08030571
 803050c:	080304ed 	.word	0x080304ed
 8030510:	080304ed 	.word	0x080304ed
 8030514:	080304ed 	.word	0x080304ed
 8030518:	080304ed 	.word	0x080304ed
 803051c:	08030571 	.word	0x08030571
 8030520:	080304ed 	.word	0x080304ed
 8030524:	080304ed 	.word	0x080304ed
 8030528:	080304ed 	.word	0x080304ed
 803052c:	080304ed 	.word	0x080304ed
 8030530:	08030671 	.word	0x08030671
 8030534:	0803059b 	.word	0x0803059b
 8030538:	0803062b 	.word	0x0803062b
 803053c:	080304ed 	.word	0x080304ed
 8030540:	080304ed 	.word	0x080304ed
 8030544:	08030693 	.word	0x08030693
 8030548:	080304ed 	.word	0x080304ed
 803054c:	0803059b 	.word	0x0803059b
 8030550:	080304ed 	.word	0x080304ed
 8030554:	080304ed 	.word	0x080304ed
 8030558:	08030633 	.word	0x08030633
 803055c:	6833      	ldr	r3, [r6, #0]
 803055e:	1d1a      	adds	r2, r3, #4
 8030560:	681b      	ldr	r3, [r3, #0]
 8030562:	6032      	str	r2, [r6, #0]
 8030564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8030568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 803056c:	2301      	movs	r3, #1
 803056e:	e09d      	b.n	80306ac <_printf_i+0x1e8>
 8030570:	6833      	ldr	r3, [r6, #0]
 8030572:	6820      	ldr	r0, [r4, #0]
 8030574:	1d19      	adds	r1, r3, #4
 8030576:	6031      	str	r1, [r6, #0]
 8030578:	0606      	lsls	r6, r0, #24
 803057a:	d501      	bpl.n	8030580 <_printf_i+0xbc>
 803057c:	681d      	ldr	r5, [r3, #0]
 803057e:	e003      	b.n	8030588 <_printf_i+0xc4>
 8030580:	0645      	lsls	r5, r0, #25
 8030582:	d5fb      	bpl.n	803057c <_printf_i+0xb8>
 8030584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8030588:	2d00      	cmp	r5, #0
 803058a:	da03      	bge.n	8030594 <_printf_i+0xd0>
 803058c:	232d      	movs	r3, #45	@ 0x2d
 803058e:	426d      	negs	r5, r5
 8030590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8030594:	4859      	ldr	r0, [pc, #356]	@ (80306fc <_printf_i+0x238>)
 8030596:	230a      	movs	r3, #10
 8030598:	e011      	b.n	80305be <_printf_i+0xfa>
 803059a:	6821      	ldr	r1, [r4, #0]
 803059c:	6833      	ldr	r3, [r6, #0]
 803059e:	0608      	lsls	r0, r1, #24
 80305a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80305a4:	d402      	bmi.n	80305ac <_printf_i+0xe8>
 80305a6:	0649      	lsls	r1, r1, #25
 80305a8:	bf48      	it	mi
 80305aa:	b2ad      	uxthmi	r5, r5
 80305ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80305ae:	6033      	str	r3, [r6, #0]
 80305b0:	4852      	ldr	r0, [pc, #328]	@ (80306fc <_printf_i+0x238>)
 80305b2:	bf14      	ite	ne
 80305b4:	230a      	movne	r3, #10
 80305b6:	2308      	moveq	r3, #8
 80305b8:	2100      	movs	r1, #0
 80305ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80305be:	6866      	ldr	r6, [r4, #4]
 80305c0:	2e00      	cmp	r6, #0
 80305c2:	60a6      	str	r6, [r4, #8]
 80305c4:	bfa2      	ittt	ge
 80305c6:	6821      	ldrge	r1, [r4, #0]
 80305c8:	f021 0104 	bicge.w	r1, r1, #4
 80305cc:	6021      	strge	r1, [r4, #0]
 80305ce:	b90d      	cbnz	r5, 80305d4 <_printf_i+0x110>
 80305d0:	2e00      	cmp	r6, #0
 80305d2:	d04b      	beq.n	803066c <_printf_i+0x1a8>
 80305d4:	4616      	mov	r6, r2
 80305d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80305da:	fb03 5711 	mls	r7, r3, r1, r5
 80305de:	5dc7      	ldrb	r7, [r0, r7]
 80305e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80305e4:	462f      	mov	r7, r5
 80305e6:	460d      	mov	r5, r1
 80305e8:	42bb      	cmp	r3, r7
 80305ea:	d9f4      	bls.n	80305d6 <_printf_i+0x112>
 80305ec:	2b08      	cmp	r3, #8
 80305ee:	d10b      	bne.n	8030608 <_printf_i+0x144>
 80305f0:	6823      	ldr	r3, [r4, #0]
 80305f2:	07df      	lsls	r7, r3, #31
 80305f4:	d508      	bpl.n	8030608 <_printf_i+0x144>
 80305f6:	6923      	ldr	r3, [r4, #16]
 80305f8:	6861      	ldr	r1, [r4, #4]
 80305fa:	4299      	cmp	r1, r3
 80305fc:	bfde      	ittt	le
 80305fe:	2330      	movle	r3, #48	@ 0x30
 8030600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8030604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8030608:	1b92      	subs	r2, r2, r6
 803060a:	6122      	str	r2, [r4, #16]
 803060c:	464b      	mov	r3, r9
 803060e:	aa03      	add	r2, sp, #12
 8030610:	4621      	mov	r1, r4
 8030612:	4640      	mov	r0, r8
 8030614:	f8cd a000 	str.w	sl, [sp]
 8030618:	f7ff fee2 	bl	80303e0 <_printf_common>
 803061c:	3001      	adds	r0, #1
 803061e:	d14a      	bne.n	80306b6 <_printf_i+0x1f2>
 8030620:	f04f 30ff 	mov.w	r0, #4294967295
 8030624:	b004      	add	sp, #16
 8030626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803062a:	6823      	ldr	r3, [r4, #0]
 803062c:	f043 0320 	orr.w	r3, r3, #32
 8030630:	6023      	str	r3, [r4, #0]
 8030632:	2778      	movs	r7, #120	@ 0x78
 8030634:	4832      	ldr	r0, [pc, #200]	@ (8030700 <_printf_i+0x23c>)
 8030636:	6823      	ldr	r3, [r4, #0]
 8030638:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 803063c:	061f      	lsls	r7, r3, #24
 803063e:	6831      	ldr	r1, [r6, #0]
 8030640:	f851 5b04 	ldr.w	r5, [r1], #4
 8030644:	d402      	bmi.n	803064c <_printf_i+0x188>
 8030646:	065f      	lsls	r7, r3, #25
 8030648:	bf48      	it	mi
 803064a:	b2ad      	uxthmi	r5, r5
 803064c:	6031      	str	r1, [r6, #0]
 803064e:	07d9      	lsls	r1, r3, #31
 8030650:	bf44      	itt	mi
 8030652:	f043 0320 	orrmi.w	r3, r3, #32
 8030656:	6023      	strmi	r3, [r4, #0]
 8030658:	b11d      	cbz	r5, 8030662 <_printf_i+0x19e>
 803065a:	2310      	movs	r3, #16
 803065c:	e7ac      	b.n	80305b8 <_printf_i+0xf4>
 803065e:	4827      	ldr	r0, [pc, #156]	@ (80306fc <_printf_i+0x238>)
 8030660:	e7e9      	b.n	8030636 <_printf_i+0x172>
 8030662:	6823      	ldr	r3, [r4, #0]
 8030664:	f023 0320 	bic.w	r3, r3, #32
 8030668:	6023      	str	r3, [r4, #0]
 803066a:	e7f6      	b.n	803065a <_printf_i+0x196>
 803066c:	4616      	mov	r6, r2
 803066e:	e7bd      	b.n	80305ec <_printf_i+0x128>
 8030670:	6833      	ldr	r3, [r6, #0]
 8030672:	6825      	ldr	r5, [r4, #0]
 8030674:	1d18      	adds	r0, r3, #4
 8030676:	6961      	ldr	r1, [r4, #20]
 8030678:	6030      	str	r0, [r6, #0]
 803067a:	062e      	lsls	r6, r5, #24
 803067c:	681b      	ldr	r3, [r3, #0]
 803067e:	d501      	bpl.n	8030684 <_printf_i+0x1c0>
 8030680:	6019      	str	r1, [r3, #0]
 8030682:	e002      	b.n	803068a <_printf_i+0x1c6>
 8030684:	0668      	lsls	r0, r5, #25
 8030686:	d5fb      	bpl.n	8030680 <_printf_i+0x1bc>
 8030688:	8019      	strh	r1, [r3, #0]
 803068a:	2300      	movs	r3, #0
 803068c:	4616      	mov	r6, r2
 803068e:	6123      	str	r3, [r4, #16]
 8030690:	e7bc      	b.n	803060c <_printf_i+0x148>
 8030692:	6833      	ldr	r3, [r6, #0]
 8030694:	2100      	movs	r1, #0
 8030696:	1d1a      	adds	r2, r3, #4
 8030698:	6032      	str	r2, [r6, #0]
 803069a:	681e      	ldr	r6, [r3, #0]
 803069c:	6862      	ldr	r2, [r4, #4]
 803069e:	4630      	mov	r0, r6
 80306a0:	f000 f970 	bl	8030984 <memchr>
 80306a4:	b108      	cbz	r0, 80306aa <_printf_i+0x1e6>
 80306a6:	1b80      	subs	r0, r0, r6
 80306a8:	6060      	str	r0, [r4, #4]
 80306aa:	6863      	ldr	r3, [r4, #4]
 80306ac:	6123      	str	r3, [r4, #16]
 80306ae:	2300      	movs	r3, #0
 80306b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80306b4:	e7aa      	b.n	803060c <_printf_i+0x148>
 80306b6:	6923      	ldr	r3, [r4, #16]
 80306b8:	4632      	mov	r2, r6
 80306ba:	4649      	mov	r1, r9
 80306bc:	4640      	mov	r0, r8
 80306be:	47d0      	blx	sl
 80306c0:	3001      	adds	r0, #1
 80306c2:	d0ad      	beq.n	8030620 <_printf_i+0x15c>
 80306c4:	6823      	ldr	r3, [r4, #0]
 80306c6:	079b      	lsls	r3, r3, #30
 80306c8:	d413      	bmi.n	80306f2 <_printf_i+0x22e>
 80306ca:	68e0      	ldr	r0, [r4, #12]
 80306cc:	9b03      	ldr	r3, [sp, #12]
 80306ce:	4298      	cmp	r0, r3
 80306d0:	bfb8      	it	lt
 80306d2:	4618      	movlt	r0, r3
 80306d4:	e7a6      	b.n	8030624 <_printf_i+0x160>
 80306d6:	2301      	movs	r3, #1
 80306d8:	4632      	mov	r2, r6
 80306da:	4649      	mov	r1, r9
 80306dc:	4640      	mov	r0, r8
 80306de:	47d0      	blx	sl
 80306e0:	3001      	adds	r0, #1
 80306e2:	d09d      	beq.n	8030620 <_printf_i+0x15c>
 80306e4:	3501      	adds	r5, #1
 80306e6:	68e3      	ldr	r3, [r4, #12]
 80306e8:	9903      	ldr	r1, [sp, #12]
 80306ea:	1a5b      	subs	r3, r3, r1
 80306ec:	42ab      	cmp	r3, r5
 80306ee:	dcf2      	bgt.n	80306d6 <_printf_i+0x212>
 80306f0:	e7eb      	b.n	80306ca <_printf_i+0x206>
 80306f2:	2500      	movs	r5, #0
 80306f4:	f104 0619 	add.w	r6, r4, #25
 80306f8:	e7f5      	b.n	80306e6 <_printf_i+0x222>
 80306fa:	bf00      	nop
 80306fc:	08033c4d 	.word	0x08033c4d
 8030700:	08033c5e 	.word	0x08033c5e

08030704 <__sflush_r>:
 8030704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8030708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803070c:	0716      	lsls	r6, r2, #28
 803070e:	4605      	mov	r5, r0
 8030710:	460c      	mov	r4, r1
 8030712:	d454      	bmi.n	80307be <__sflush_r+0xba>
 8030714:	684b      	ldr	r3, [r1, #4]
 8030716:	2b00      	cmp	r3, #0
 8030718:	dc02      	bgt.n	8030720 <__sflush_r+0x1c>
 803071a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 803071c:	2b00      	cmp	r3, #0
 803071e:	dd48      	ble.n	80307b2 <__sflush_r+0xae>
 8030720:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8030722:	2e00      	cmp	r6, #0
 8030724:	d045      	beq.n	80307b2 <__sflush_r+0xae>
 8030726:	2300      	movs	r3, #0
 8030728:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 803072c:	682f      	ldr	r7, [r5, #0]
 803072e:	6a21      	ldr	r1, [r4, #32]
 8030730:	602b      	str	r3, [r5, #0]
 8030732:	d030      	beq.n	8030796 <__sflush_r+0x92>
 8030734:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8030736:	89a3      	ldrh	r3, [r4, #12]
 8030738:	0759      	lsls	r1, r3, #29
 803073a:	d505      	bpl.n	8030748 <__sflush_r+0x44>
 803073c:	6863      	ldr	r3, [r4, #4]
 803073e:	1ad2      	subs	r2, r2, r3
 8030740:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8030742:	b10b      	cbz	r3, 8030748 <__sflush_r+0x44>
 8030744:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8030746:	1ad2      	subs	r2, r2, r3
 8030748:	2300      	movs	r3, #0
 803074a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 803074c:	6a21      	ldr	r1, [r4, #32]
 803074e:	4628      	mov	r0, r5
 8030750:	47b0      	blx	r6
 8030752:	1c43      	adds	r3, r0, #1
 8030754:	89a3      	ldrh	r3, [r4, #12]
 8030756:	d106      	bne.n	8030766 <__sflush_r+0x62>
 8030758:	6829      	ldr	r1, [r5, #0]
 803075a:	291d      	cmp	r1, #29
 803075c:	d82b      	bhi.n	80307b6 <__sflush_r+0xb2>
 803075e:	4a2a      	ldr	r2, [pc, #168]	@ (8030808 <__sflush_r+0x104>)
 8030760:	410a      	asrs	r2, r1
 8030762:	07d6      	lsls	r6, r2, #31
 8030764:	d427      	bmi.n	80307b6 <__sflush_r+0xb2>
 8030766:	2200      	movs	r2, #0
 8030768:	04d9      	lsls	r1, r3, #19
 803076a:	6062      	str	r2, [r4, #4]
 803076c:	6922      	ldr	r2, [r4, #16]
 803076e:	6022      	str	r2, [r4, #0]
 8030770:	d504      	bpl.n	803077c <__sflush_r+0x78>
 8030772:	1c42      	adds	r2, r0, #1
 8030774:	d101      	bne.n	803077a <__sflush_r+0x76>
 8030776:	682b      	ldr	r3, [r5, #0]
 8030778:	b903      	cbnz	r3, 803077c <__sflush_r+0x78>
 803077a:	6560      	str	r0, [r4, #84]	@ 0x54
 803077c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803077e:	602f      	str	r7, [r5, #0]
 8030780:	b1b9      	cbz	r1, 80307b2 <__sflush_r+0xae>
 8030782:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8030786:	4299      	cmp	r1, r3
 8030788:	d002      	beq.n	8030790 <__sflush_r+0x8c>
 803078a:	4628      	mov	r0, r5
 803078c:	f7ff fc9c 	bl	80300c8 <_free_r>
 8030790:	2300      	movs	r3, #0
 8030792:	6363      	str	r3, [r4, #52]	@ 0x34
 8030794:	e00d      	b.n	80307b2 <__sflush_r+0xae>
 8030796:	2301      	movs	r3, #1
 8030798:	4628      	mov	r0, r5
 803079a:	47b0      	blx	r6
 803079c:	4602      	mov	r2, r0
 803079e:	1c50      	adds	r0, r2, #1
 80307a0:	d1c9      	bne.n	8030736 <__sflush_r+0x32>
 80307a2:	682b      	ldr	r3, [r5, #0]
 80307a4:	2b00      	cmp	r3, #0
 80307a6:	d0c6      	beq.n	8030736 <__sflush_r+0x32>
 80307a8:	2b1d      	cmp	r3, #29
 80307aa:	d001      	beq.n	80307b0 <__sflush_r+0xac>
 80307ac:	2b16      	cmp	r3, #22
 80307ae:	d11d      	bne.n	80307ec <__sflush_r+0xe8>
 80307b0:	602f      	str	r7, [r5, #0]
 80307b2:	2000      	movs	r0, #0
 80307b4:	e021      	b.n	80307fa <__sflush_r+0xf6>
 80307b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80307ba:	b21b      	sxth	r3, r3
 80307bc:	e01a      	b.n	80307f4 <__sflush_r+0xf0>
 80307be:	690f      	ldr	r7, [r1, #16]
 80307c0:	2f00      	cmp	r7, #0
 80307c2:	d0f6      	beq.n	80307b2 <__sflush_r+0xae>
 80307c4:	0793      	lsls	r3, r2, #30
 80307c6:	680e      	ldr	r6, [r1, #0]
 80307c8:	600f      	str	r7, [r1, #0]
 80307ca:	bf0c      	ite	eq
 80307cc:	694b      	ldreq	r3, [r1, #20]
 80307ce:	2300      	movne	r3, #0
 80307d0:	eba6 0807 	sub.w	r8, r6, r7
 80307d4:	608b      	str	r3, [r1, #8]
 80307d6:	f1b8 0f00 	cmp.w	r8, #0
 80307da:	ddea      	ble.n	80307b2 <__sflush_r+0xae>
 80307dc:	4643      	mov	r3, r8
 80307de:	463a      	mov	r2, r7
 80307e0:	6a21      	ldr	r1, [r4, #32]
 80307e2:	4628      	mov	r0, r5
 80307e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80307e6:	47b0      	blx	r6
 80307e8:	2800      	cmp	r0, #0
 80307ea:	dc08      	bgt.n	80307fe <__sflush_r+0xfa>
 80307ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80307f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80307f4:	f04f 30ff 	mov.w	r0, #4294967295
 80307f8:	81a3      	strh	r3, [r4, #12]
 80307fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80307fe:	4407      	add	r7, r0
 8030800:	eba8 0800 	sub.w	r8, r8, r0
 8030804:	e7e7      	b.n	80307d6 <__sflush_r+0xd2>
 8030806:	bf00      	nop
 8030808:	dfbffffe 	.word	0xdfbffffe

0803080c <_fflush_r>:
 803080c:	b538      	push	{r3, r4, r5, lr}
 803080e:	690b      	ldr	r3, [r1, #16]
 8030810:	4605      	mov	r5, r0
 8030812:	460c      	mov	r4, r1
 8030814:	b913      	cbnz	r3, 803081c <_fflush_r+0x10>
 8030816:	2500      	movs	r5, #0
 8030818:	4628      	mov	r0, r5
 803081a:	bd38      	pop	{r3, r4, r5, pc}
 803081c:	b118      	cbz	r0, 8030826 <_fflush_r+0x1a>
 803081e:	6a03      	ldr	r3, [r0, #32]
 8030820:	b90b      	cbnz	r3, 8030826 <_fflush_r+0x1a>
 8030822:	f7ff fa35 	bl	802fc90 <__sinit>
 8030826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803082a:	2b00      	cmp	r3, #0
 803082c:	d0f3      	beq.n	8030816 <_fflush_r+0xa>
 803082e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8030830:	07d0      	lsls	r0, r2, #31
 8030832:	d404      	bmi.n	803083e <_fflush_r+0x32>
 8030834:	0599      	lsls	r1, r3, #22
 8030836:	d402      	bmi.n	803083e <_fflush_r+0x32>
 8030838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803083a:	f7ff fbd8 	bl	802ffee <__retarget_lock_acquire_recursive>
 803083e:	4628      	mov	r0, r5
 8030840:	4621      	mov	r1, r4
 8030842:	f7ff ff5f 	bl	8030704 <__sflush_r>
 8030846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030848:	4605      	mov	r5, r0
 803084a:	07da      	lsls	r2, r3, #31
 803084c:	d4e4      	bmi.n	8030818 <_fflush_r+0xc>
 803084e:	89a3      	ldrh	r3, [r4, #12]
 8030850:	059b      	lsls	r3, r3, #22
 8030852:	d4e1      	bmi.n	8030818 <_fflush_r+0xc>
 8030854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030856:	f7ff fbcb 	bl	802fff0 <__retarget_lock_release_recursive>
 803085a:	e7dd      	b.n	8030818 <_fflush_r+0xc>

0803085c <__swbuf_r>:
 803085c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803085e:	460e      	mov	r6, r1
 8030860:	4614      	mov	r4, r2
 8030862:	4605      	mov	r5, r0
 8030864:	b118      	cbz	r0, 803086e <__swbuf_r+0x12>
 8030866:	6a03      	ldr	r3, [r0, #32]
 8030868:	b90b      	cbnz	r3, 803086e <__swbuf_r+0x12>
 803086a:	f7ff fa11 	bl	802fc90 <__sinit>
 803086e:	69a3      	ldr	r3, [r4, #24]
 8030870:	60a3      	str	r3, [r4, #8]
 8030872:	89a3      	ldrh	r3, [r4, #12]
 8030874:	071a      	lsls	r2, r3, #28
 8030876:	d501      	bpl.n	803087c <__swbuf_r+0x20>
 8030878:	6923      	ldr	r3, [r4, #16]
 803087a:	b943      	cbnz	r3, 803088e <__swbuf_r+0x32>
 803087c:	4621      	mov	r1, r4
 803087e:	4628      	mov	r0, r5
 8030880:	f000 f82a 	bl	80308d8 <__swsetup_r>
 8030884:	b118      	cbz	r0, 803088e <__swbuf_r+0x32>
 8030886:	f04f 37ff 	mov.w	r7, #4294967295
 803088a:	4638      	mov	r0, r7
 803088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803088e:	6823      	ldr	r3, [r4, #0]
 8030890:	b2f6      	uxtb	r6, r6
 8030892:	6922      	ldr	r2, [r4, #16]
 8030894:	4637      	mov	r7, r6
 8030896:	1a98      	subs	r0, r3, r2
 8030898:	6963      	ldr	r3, [r4, #20]
 803089a:	4283      	cmp	r3, r0
 803089c:	dc05      	bgt.n	80308aa <__swbuf_r+0x4e>
 803089e:	4621      	mov	r1, r4
 80308a0:	4628      	mov	r0, r5
 80308a2:	f7ff ffb3 	bl	803080c <_fflush_r>
 80308a6:	2800      	cmp	r0, #0
 80308a8:	d1ed      	bne.n	8030886 <__swbuf_r+0x2a>
 80308aa:	68a3      	ldr	r3, [r4, #8]
 80308ac:	3b01      	subs	r3, #1
 80308ae:	60a3      	str	r3, [r4, #8]
 80308b0:	6823      	ldr	r3, [r4, #0]
 80308b2:	1c5a      	adds	r2, r3, #1
 80308b4:	6022      	str	r2, [r4, #0]
 80308b6:	701e      	strb	r6, [r3, #0]
 80308b8:	1c43      	adds	r3, r0, #1
 80308ba:	6962      	ldr	r2, [r4, #20]
 80308bc:	429a      	cmp	r2, r3
 80308be:	d004      	beq.n	80308ca <__swbuf_r+0x6e>
 80308c0:	89a3      	ldrh	r3, [r4, #12]
 80308c2:	07db      	lsls	r3, r3, #31
 80308c4:	d5e1      	bpl.n	803088a <__swbuf_r+0x2e>
 80308c6:	2e0a      	cmp	r6, #10
 80308c8:	d1df      	bne.n	803088a <__swbuf_r+0x2e>
 80308ca:	4621      	mov	r1, r4
 80308cc:	4628      	mov	r0, r5
 80308ce:	f7ff ff9d 	bl	803080c <_fflush_r>
 80308d2:	2800      	cmp	r0, #0
 80308d4:	d0d9      	beq.n	803088a <__swbuf_r+0x2e>
 80308d6:	e7d6      	b.n	8030886 <__swbuf_r+0x2a>

080308d8 <__swsetup_r>:
 80308d8:	b538      	push	{r3, r4, r5, lr}
 80308da:	4b29      	ldr	r3, [pc, #164]	@ (8030980 <__swsetup_r+0xa8>)
 80308dc:	4605      	mov	r5, r0
 80308de:	460c      	mov	r4, r1
 80308e0:	6818      	ldr	r0, [r3, #0]
 80308e2:	b118      	cbz	r0, 80308ec <__swsetup_r+0x14>
 80308e4:	6a03      	ldr	r3, [r0, #32]
 80308e6:	b90b      	cbnz	r3, 80308ec <__swsetup_r+0x14>
 80308e8:	f7ff f9d2 	bl	802fc90 <__sinit>
 80308ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80308f0:	0719      	lsls	r1, r3, #28
 80308f2:	d422      	bmi.n	803093a <__swsetup_r+0x62>
 80308f4:	06da      	lsls	r2, r3, #27
 80308f6:	d407      	bmi.n	8030908 <__swsetup_r+0x30>
 80308f8:	2209      	movs	r2, #9
 80308fa:	602a      	str	r2, [r5, #0]
 80308fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030900:	f04f 30ff 	mov.w	r0, #4294967295
 8030904:	81a3      	strh	r3, [r4, #12]
 8030906:	e033      	b.n	8030970 <__swsetup_r+0x98>
 8030908:	0758      	lsls	r0, r3, #29
 803090a:	d512      	bpl.n	8030932 <__swsetup_r+0x5a>
 803090c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803090e:	b141      	cbz	r1, 8030922 <__swsetup_r+0x4a>
 8030910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8030914:	4299      	cmp	r1, r3
 8030916:	d002      	beq.n	803091e <__swsetup_r+0x46>
 8030918:	4628      	mov	r0, r5
 803091a:	f7ff fbd5 	bl	80300c8 <_free_r>
 803091e:	2300      	movs	r3, #0
 8030920:	6363      	str	r3, [r4, #52]	@ 0x34
 8030922:	89a3      	ldrh	r3, [r4, #12]
 8030924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8030928:	81a3      	strh	r3, [r4, #12]
 803092a:	2300      	movs	r3, #0
 803092c:	6063      	str	r3, [r4, #4]
 803092e:	6923      	ldr	r3, [r4, #16]
 8030930:	6023      	str	r3, [r4, #0]
 8030932:	89a3      	ldrh	r3, [r4, #12]
 8030934:	f043 0308 	orr.w	r3, r3, #8
 8030938:	81a3      	strh	r3, [r4, #12]
 803093a:	6923      	ldr	r3, [r4, #16]
 803093c:	b94b      	cbnz	r3, 8030952 <__swsetup_r+0x7a>
 803093e:	89a3      	ldrh	r3, [r4, #12]
 8030940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8030944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8030948:	d003      	beq.n	8030952 <__swsetup_r+0x7a>
 803094a:	4621      	mov	r1, r4
 803094c:	4628      	mov	r0, r5
 803094e:	f000 f84c 	bl	80309ea <__smakebuf_r>
 8030952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030956:	f013 0201 	ands.w	r2, r3, #1
 803095a:	d00a      	beq.n	8030972 <__swsetup_r+0x9a>
 803095c:	2200      	movs	r2, #0
 803095e:	60a2      	str	r2, [r4, #8]
 8030960:	6962      	ldr	r2, [r4, #20]
 8030962:	4252      	negs	r2, r2
 8030964:	61a2      	str	r2, [r4, #24]
 8030966:	6922      	ldr	r2, [r4, #16]
 8030968:	b942      	cbnz	r2, 803097c <__swsetup_r+0xa4>
 803096a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 803096e:	d1c5      	bne.n	80308fc <__swsetup_r+0x24>
 8030970:	bd38      	pop	{r3, r4, r5, pc}
 8030972:	0799      	lsls	r1, r3, #30
 8030974:	bf58      	it	pl
 8030976:	6962      	ldrpl	r2, [r4, #20]
 8030978:	60a2      	str	r2, [r4, #8]
 803097a:	e7f4      	b.n	8030966 <__swsetup_r+0x8e>
 803097c:	2000      	movs	r0, #0
 803097e:	e7f7      	b.n	8030970 <__swsetup_r+0x98>
 8030980:	200000b0 	.word	0x200000b0

08030984 <memchr>:
 8030984:	b2c9      	uxtb	r1, r1
 8030986:	4603      	mov	r3, r0
 8030988:	4402      	add	r2, r0
 803098a:	b510      	push	{r4, lr}
 803098c:	4293      	cmp	r3, r2
 803098e:	4618      	mov	r0, r3
 8030990:	d101      	bne.n	8030996 <memchr+0x12>
 8030992:	2000      	movs	r0, #0
 8030994:	e003      	b.n	803099e <memchr+0x1a>
 8030996:	7804      	ldrb	r4, [r0, #0]
 8030998:	3301      	adds	r3, #1
 803099a:	428c      	cmp	r4, r1
 803099c:	d1f6      	bne.n	803098c <memchr+0x8>
 803099e:	bd10      	pop	{r4, pc}

080309a0 <__swhatbuf_r>:
 80309a0:	b570      	push	{r4, r5, r6, lr}
 80309a2:	460c      	mov	r4, r1
 80309a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80309a8:	b096      	sub	sp, #88	@ 0x58
 80309aa:	4615      	mov	r5, r2
 80309ac:	2900      	cmp	r1, #0
 80309ae:	461e      	mov	r6, r3
 80309b0:	da0c      	bge.n	80309cc <__swhatbuf_r+0x2c>
 80309b2:	89a3      	ldrh	r3, [r4, #12]
 80309b4:	2100      	movs	r1, #0
 80309b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80309ba:	bf14      	ite	ne
 80309bc:	2340      	movne	r3, #64	@ 0x40
 80309be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80309c2:	2000      	movs	r0, #0
 80309c4:	6031      	str	r1, [r6, #0]
 80309c6:	602b      	str	r3, [r5, #0]
 80309c8:	b016      	add	sp, #88	@ 0x58
 80309ca:	bd70      	pop	{r4, r5, r6, pc}
 80309cc:	466a      	mov	r2, sp
 80309ce:	f000 f849 	bl	8030a64 <_fstat_r>
 80309d2:	2800      	cmp	r0, #0
 80309d4:	dbed      	blt.n	80309b2 <__swhatbuf_r+0x12>
 80309d6:	9901      	ldr	r1, [sp, #4]
 80309d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80309dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80309e0:	4259      	negs	r1, r3
 80309e2:	4159      	adcs	r1, r3
 80309e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80309e8:	e7eb      	b.n	80309c2 <__swhatbuf_r+0x22>

080309ea <__smakebuf_r>:
 80309ea:	898b      	ldrh	r3, [r1, #12]
 80309ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80309ee:	079d      	lsls	r5, r3, #30
 80309f0:	4606      	mov	r6, r0
 80309f2:	460c      	mov	r4, r1
 80309f4:	d507      	bpl.n	8030a06 <__smakebuf_r+0x1c>
 80309f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80309fa:	6023      	str	r3, [r4, #0]
 80309fc:	6123      	str	r3, [r4, #16]
 80309fe:	2301      	movs	r3, #1
 8030a00:	6163      	str	r3, [r4, #20]
 8030a02:	b003      	add	sp, #12
 8030a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030a06:	ab01      	add	r3, sp, #4
 8030a08:	466a      	mov	r2, sp
 8030a0a:	f7ff ffc9 	bl	80309a0 <__swhatbuf_r>
 8030a0e:	9f00      	ldr	r7, [sp, #0]
 8030a10:	4605      	mov	r5, r0
 8030a12:	4630      	mov	r0, r6
 8030a14:	4639      	mov	r1, r7
 8030a16:	f7ff f815 	bl	802fa44 <_malloc_r>
 8030a1a:	b948      	cbnz	r0, 8030a30 <__smakebuf_r+0x46>
 8030a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030a20:	059a      	lsls	r2, r3, #22
 8030a22:	d4ee      	bmi.n	8030a02 <__smakebuf_r+0x18>
 8030a24:	f023 0303 	bic.w	r3, r3, #3
 8030a28:	f043 0302 	orr.w	r3, r3, #2
 8030a2c:	81a3      	strh	r3, [r4, #12]
 8030a2e:	e7e2      	b.n	80309f6 <__smakebuf_r+0xc>
 8030a30:	89a3      	ldrh	r3, [r4, #12]
 8030a32:	6020      	str	r0, [r4, #0]
 8030a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8030a38:	81a3      	strh	r3, [r4, #12]
 8030a3a:	9b01      	ldr	r3, [sp, #4]
 8030a3c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8030a40:	b15b      	cbz	r3, 8030a5a <__smakebuf_r+0x70>
 8030a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030a46:	4630      	mov	r0, r6
 8030a48:	f000 f81e 	bl	8030a88 <_isatty_r>
 8030a4c:	b128      	cbz	r0, 8030a5a <__smakebuf_r+0x70>
 8030a4e:	89a3      	ldrh	r3, [r4, #12]
 8030a50:	f023 0303 	bic.w	r3, r3, #3
 8030a54:	f043 0301 	orr.w	r3, r3, #1
 8030a58:	81a3      	strh	r3, [r4, #12]
 8030a5a:	89a3      	ldrh	r3, [r4, #12]
 8030a5c:	431d      	orrs	r5, r3
 8030a5e:	81a5      	strh	r5, [r4, #12]
 8030a60:	e7cf      	b.n	8030a02 <__smakebuf_r+0x18>
	...

08030a64 <_fstat_r>:
 8030a64:	b538      	push	{r3, r4, r5, lr}
 8030a66:	2300      	movs	r3, #0
 8030a68:	4d06      	ldr	r5, [pc, #24]	@ (8030a84 <_fstat_r+0x20>)
 8030a6a:	4604      	mov	r4, r0
 8030a6c:	4608      	mov	r0, r1
 8030a6e:	4611      	mov	r1, r2
 8030a70:	602b      	str	r3, [r5, #0]
 8030a72:	f7d0 fa87 	bl	8000f84 <_fstat>
 8030a76:	1c43      	adds	r3, r0, #1
 8030a78:	d102      	bne.n	8030a80 <_fstat_r+0x1c>
 8030a7a:	682b      	ldr	r3, [r5, #0]
 8030a7c:	b103      	cbz	r3, 8030a80 <_fstat_r+0x1c>
 8030a7e:	6023      	str	r3, [r4, #0]
 8030a80:	bd38      	pop	{r3, r4, r5, pc}
 8030a82:	bf00      	nop
 8030a84:	20012b9c 	.word	0x20012b9c

08030a88 <_isatty_r>:
 8030a88:	b538      	push	{r3, r4, r5, lr}
 8030a8a:	2300      	movs	r3, #0
 8030a8c:	4d05      	ldr	r5, [pc, #20]	@ (8030aa4 <_isatty_r+0x1c>)
 8030a8e:	4604      	mov	r4, r0
 8030a90:	4608      	mov	r0, r1
 8030a92:	602b      	str	r3, [r5, #0]
 8030a94:	f7d0 fa86 	bl	8000fa4 <_isatty>
 8030a98:	1c43      	adds	r3, r0, #1
 8030a9a:	d102      	bne.n	8030aa2 <_isatty_r+0x1a>
 8030a9c:	682b      	ldr	r3, [r5, #0]
 8030a9e:	b103      	cbz	r3, 8030aa2 <_isatty_r+0x1a>
 8030aa0:	6023      	str	r3, [r4, #0]
 8030aa2:	bd38      	pop	{r3, r4, r5, pc}
 8030aa4:	20012b9c 	.word	0x20012b9c

08030aa8 <_init>:
 8030aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030aaa:	bf00      	nop
 8030aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8030aae:	bc08      	pop	{r3}
 8030ab0:	469e      	mov	lr, r3
 8030ab2:	4770      	bx	lr

08030ab4 <_fini>:
 8030ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030ab6:	bf00      	nop
 8030ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8030aba:	bc08      	pop	{r3}
 8030abc:	469e      	mov	lr, r3
 8030abe:	4770      	bx	lr

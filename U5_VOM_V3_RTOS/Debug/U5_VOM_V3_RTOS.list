
U5_VOM_V3_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c9a4  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000324f  0802cbe4  0802cbe4  0002dbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009d8a  0802fe34  0802fe34  00030e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000004c8  08039bc0  08039bc0  0003abc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000060  0803a088  0803a088  0003b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000018  0803a0e8  0803a0e8  0003b0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  0803a100  0803a100  0003b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0803a10c  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 TouchGFX_ScratchbufferA 00000100  20000120  0803a210  0003c120  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferB 00000100  20000220  0803a310  0003c220  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001294c  20000320  0803a410  0003c320  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20012c6c  0803a410  0003cc6c  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  0003c320  2**0
                  CONTENTS, READONLY
 14 .debug_info   000a4a50  00000000  00000000  0003c356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00010fa1  00000000  00000000  000e0da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000040c8  00000000  00000000  000f1d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000030bb  00000000  00000000  000f5e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f3d5  00000000  00000000  000f8ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d94c  00000000  00000000  001382a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00172a7d  00000000  00000000  00185bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c2  00000000  00000000  002f8669  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00011c70  00000000  00000000  002f872c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  0030a39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000320 	.word	0x20000320
 800025c:	00000000 	.word	0x00000000
 8000260:	0802cbcc 	.word	0x0802cbcc

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000324 	.word	0x20000324
 800027c:	0802cbcc 	.word	0x0802cbcc

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_THREADS */
#endif
  /* add threads, ... */
  //Remove default task.

  Init_Tasks();
 8000284:	f001 f886 	bl	8001394 <Init_Tasks>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}

0800028c <Setup_LCD_TouchGFX>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Setup_LCD_TouchGFX()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	//Init the LCD & turn on the display.
	// initialize the display and set the initial display orientation (here is orientaton: 0Â°)
	// - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
	Displ_Init(Displ_Orientat_0);
 8000290:	2000      	movs	r0, #0
 8000292:	f001 fb63 	bl	800195c <Displ_Init>
	// initialize backlight and turn it on at init level
	Displ_BackLight('1');
 8000296:	2031      	movs	r0, #49	@ 0x31
 8000298:	f001 fbf6 	bl	8001a88 <Displ_BackLight>
	//Call the first sync.
	touchgfxSignalVSync();
 800029c:	f013 fe94 	bl	8013fc8 <touchgfxSignalVSync>
	//Start Sync timer for TouchGFX.
	//This timer is 25Hz -> FPS = 25. This is depending on the max speed of SPI LCD.
	//SPI max speed = 32Mhz
	//Time to stransfer 1 frame = 240x320x16(bit)/32Mhz = ~= 0.0384s. <=> Refresh rate = 1/0.0384 = ~ 26Hz.
	//So take the max FPS 25, is the best choice for this case.
	if (HAL_TIM_Base_Start_IT(&TGFX_T) != HAL_OK) {
 80002a0:	4804      	ldr	r0, [pc, #16]	@ (80002b4 <Setup_LCD_TouchGFX+0x28>)
 80002a2:	f008 fde5 	bl	8008e70 <HAL_TIM_Base_Start_IT>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <Setup_LCD_TouchGFX+0x24>
		Error_Handler();
 80002ac:	f000 fb3e 	bl	800092c <Error_Handler>
	}
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	200005c0 	.word	0x200005c0

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f001 fc50 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f820 	bl	8000304 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80002c4:	f000 f87f 	bl	80003c6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c8:	f000 fa74 	bl	80007b4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80002cc:	f000 f940 	bl	8000550 <MX_GPDMA1_Init>
  MX_SPI1_Init();
 80002d0:	f000 f9b2 	bl	8000638 <MX_SPI1_Init>
  MX_TIM3_Init();
 80002d4:	f000 fa20 	bl	8000718 <MX_TIM3_Init>
  MX_CRC_Init();
 80002d8:	f000 f918 	bl	800050c <MX_CRC_Init>
  MX_ICACHE_Init();
 80002dc:	f000 f998 	bl	8000610 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80002e0:	f000 f956 	bl	8000590 <MX_I2C1_Init>
  MX_ADC1_Init();
 80002e4:	f000 f890 	bl	8000408 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 80002e8:	f00c ff05 	bl	800d0f6 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80002ec:	f00c fefc 	bl	800d0e8 <MX_TouchGFX_PreOSInit>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80002f0:	f000 f875 	bl	80003de <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002f4:	f009 fbea 	bl	8009acc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80002f8:	f7ff ffc2 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80002fc:	f009 fc0c 	bl	8009b18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <main+0x48>

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09e      	sub	sp, #120	@ 0x78
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2260      	movs	r2, #96	@ 0x60
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f02b fdd9 	bl	802beca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	463b      	mov	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]
 8000326:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000328:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800032c:	f005 fac4 	bl	80058b8 <HAL_PWREx_ControlVoltageScaling>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000336:	f000 faf9 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800033a:	2312      	movs	r3, #18
 800033c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000344:	2310      	movs	r3, #16
 8000346:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000348:	2301      	movs	r3, #1
 800034a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800034c:	2310      	movs	r3, #16
 800034e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000350:	2300      	movs	r3, #0
 8000352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000358:	2301      	movs	r3, #1
 800035a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800035c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000360:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000362:	2303      	movs	r3, #3
 8000364:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000366:	2308      	movs	r3, #8
 8000368:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800036a:	2302      	movs	r3, #2
 800036c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800036e:	2302      	movs	r3, #2
 8000370:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000376:	230c      	movs	r3, #12
 8000378:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	4618      	mov	r0, r3
 8000384:	f005 fb84 	bl	8005a90 <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800038e:	f000 facd 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	231f      	movs	r3, #31
 8000394:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2303      	movs	r3, #3
 8000398:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003aa:	463b      	mov	r3, r7
 80003ac:	2103      	movs	r1, #3
 80003ae:	4618      	mov	r0, r3
 80003b0:	f006 fa4a 	bl	8006848 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003ba:	f000 fab7 	bl	800092c <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3778      	adds	r7, #120	@ 0x78
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80003ca:	2002      	movs	r0, #2
 80003cc:	f005 fb00 	bl	80059d0 <HAL_PWREx_ConfigSupply>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemPower_Config+0x14>
  {
    Error_Handler();
 80003d6:	f000 faa9 	bl	800092c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}

080003de <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
  /* GPDMA1_Channel11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 5, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2105      	movs	r1, #5
 80003e6:	2053      	movs	r0, #83	@ 0x53
 80003e8:	f003 fda0 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 80003ec:	2053      	movs	r0, #83	@ 0x53
 80003ee:	f003 fdb7 	bl	8003f60 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2105      	movs	r1, #5
 80003f6:	202e      	movs	r0, #46	@ 0x2e
 80003f8:	f003 fd98 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80003fc:	202e      	movs	r0, #46	@ 0x2e
 80003fe:	f003 fdaf 	bl	8003f60 <HAL_NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	463b      	mov	r3, r7
 8000410:	2220      	movs	r2, #32
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f02b fd58 	bl	802beca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800041a:	4b38      	ldr	r3, [pc, #224]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800041c:	4a38      	ldr	r2, [pc, #224]	@ (8000500 <MX_ADC1_Init+0xf8>)
 800041e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000420:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000422:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000426:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000428:	4b34      	ldr	r3, [pc, #208]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800042e:	4b33      	ldr	r3, [pc, #204]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000434:	4b31      	ldr	r3, [pc, #196]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800043a:	4b30      	ldr	r3, [pc, #192]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800043c:	2201      	movs	r2, #1
 800043e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000440:	4b2e      	ldr	r3, [pc, #184]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000442:	2204      	movs	r2, #4
 8000444:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000446:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000448:	2200      	movs	r2, #0
 800044a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800044c:	4b2b      	ldr	r3, [pc, #172]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800044e:	2201      	movs	r2, #1
 8000450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 2;
 8000454:	4b29      	ldr	r3, [pc, #164]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000456:	2202      	movs	r2, #2
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000462:	4b26      	ldr	r3, [pc, #152]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000464:	2200      	movs	r2, #0
 8000466:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000468:	4b24      	ldr	r3, [pc, #144]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800046a:	2200      	movs	r2, #0
 800046c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800046e:	4b23      	ldr	r3, [pc, #140]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000470:	2201      	movs	r2, #1
 8000472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000476:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000478:	2200      	movs	r2, #0
 800047a:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800047c:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800047e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000482:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000484:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000486:	2200      	movs	r2, #0
 8000488:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800048a:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800048c:	2201      	movs	r2, #1
 800048e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000490:	4b1a      	ldr	r3, [pc, #104]	@ (80004fc <MX_ADC1_Init+0xf4>)
 8000492:	2200      	movs	r2, #0
 8000494:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000498:	4818      	ldr	r0, [pc, #96]	@ (80004fc <MX_ADC1_Init+0xf4>)
 800049a:	f001 ff1f 	bl	80022dc <HAL_ADC_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80004a4:	f000 fa42 	bl	800092c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <MX_ADC1_Init+0xfc>)
 80004aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	2306      	movs	r3, #6
 80004ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ba:	2304      	movs	r3, #4
 80004bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c2:	463b      	mov	r3, r7
 80004c4:	4619      	mov	r1, r3
 80004c6:	480d      	ldr	r0, [pc, #52]	@ (80004fc <MX_ADC1_Init+0xf4>)
 80004c8:	f002 faf0 	bl	8002aac <HAL_ADC_ConfigChannel>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80004d2:	f000 fa2b 	bl	800092c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_ADC1_Init+0x100>)
 80004d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004da:	230c      	movs	r3, #12
 80004dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004de:	463b      	mov	r3, r7
 80004e0:	4619      	mov	r1, r3
 80004e2:	4806      	ldr	r0, [pc, #24]	@ (80004fc <MX_ADC1_Init+0xf4>)
 80004e4:	f002 fae2 	bl	8002aac <HAL_ADC_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80004ee:	f000 fa1d 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000033c 	.word	0x2000033c
 8000500:	42028000 	.word	0x42028000
 8000504:	3e008000 	.word	0x3e008000
 8000508:	42010000 	.word	0x42010000

0800050c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <MX_CRC_Init+0x40>)
 8000514:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000518:	2200      	movs	r2, #0
 800051a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <MX_CRC_Init+0x3c>)
 800051e:	2200      	movs	r2, #0
 8000520:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <MX_CRC_Init+0x3c>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000530:	2201      	movs	r2, #1
 8000532:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000534:	4804      	ldr	r0, [pc, #16]	@ (8000548 <MX_CRC_Init+0x3c>)
 8000536:	f003 fd79 	bl	800402c <HAL_CRC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000540:	f000 f9f4 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000440 	.word	0x20000440
 800054c:	40023000 	.word	0x40023000

08000550 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <MX_GPDMA1_Init+0x3c>)
 8000558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800055c:	4a0b      	ldr	r2, [pc, #44]	@ (800058c <MX_GPDMA1_Init+0x3c>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <MX_GPDMA1_Init+0x3c>)
 8000568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 5, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2105      	movs	r1, #5
 8000578:	2052      	movs	r0, #82	@ 0x52
 800057a:	f003 fcd7 	bl	8003f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 800057e:	2052      	movs	r0, #82	@ 0x52
 8000580:	f003 fcee 	bl	8003f60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPDMA1_Init 2 */
	//handle_GPDMA1_Channel11.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
	//handle_GPDMA1_Channel11.Init.DestDataWidth  = DMA_SRC_DATAWIDTH_BYTE;
  /* USER CODE END GPDMA1_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	46020c00 	.word	0x46020c00

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <MX_I2C1_Init+0x74>)
 8000596:	4a1c      	ldr	r2, [pc, #112]	@ (8000608 <MX_I2C1_Init+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <MX_I2C1_Init+0x74>)
 800059c:	4a1b      	ldr	r2, [pc, #108]	@ (800060c <MX_I2C1_Init+0x7c>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ca:	480e      	ldr	r0, [pc, #56]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005cc:	f005 f812 	bl	80055f4 <HAL_I2C_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d6:	f000 f9a9 	bl	800092c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005da:	2100      	movs	r1, #0
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005de:	f005 f8a4 	bl	800572a <HAL_I2CEx_ConfigAnalogFilter>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e8:	f000 f9a0 	bl	800092c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ec:	2100      	movs	r1, #0
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_I2C1_Init+0x74>)
 80005f0:	f005 f8e6 	bl	80057c0 <HAL_I2CEx_ConfigDigitalFilter>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f997 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000464 	.word	0x20000464
 8000608:	40005400 	.word	0x40005400
 800060c:	20a0c4df 	.word	0x20a0c4df

08000610 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000614:	2000      	movs	r0, #0
 8000616:	f005 f91f 	bl	8005858 <HAL_ICACHE_ConfigAssociativityMode>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000620:	f000 f984 	bl	800092c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000624:	f005 f938 	bl	8005898 <HAL_ICACHE_Enable>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800062e:	f000 f97d 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000648:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <MX_SPI1_Init+0xd8>)
 800064a:	4a32      	ldr	r2, [pc, #200]	@ (8000714 <MX_SPI1_Init+0xdc>)
 800064c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064e:	4b30      	ldr	r3, [pc, #192]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000650:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000656:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000658:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800065c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000660:	2207      	movs	r2, #7
 8000662:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000664:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_SPI1_Init+0xd8>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000672:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000676:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000678:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <MX_SPI1_Init+0xd8>)
 800067a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800067e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000686:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068c:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_SPI1_Init+0xd8>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <MX_SPI1_Init+0xd8>)
 8000694:	2207      	movs	r2, #7
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_SPI1_Init+0xd8>)
 800069a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800069e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006d8:	f007 fb04 	bl	8007ce4 <HAL_SPI_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80006e2:	f000 f923 	bl	800092c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80006ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006ee:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_SPI1_Init+0xd8>)
 80006fa:	f008 fb20 	bl	8008d3e <HAL_SPIEx_SetConfigAutonomousMode>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000704:	f000 f912 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200004b8 	.word	0x200004b8
 8000714:	40013000 	.word	0x40013000

08000718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <MX_TIM3_Init+0x94>)
 8000738:	4a1d      	ldr	r2, [pc, #116]	@ (80007b0 <MX_TIM3_Init+0x98>)
 800073a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <MX_TIM3_Init+0x94>)
 800073e:	2277      	movs	r2, #119	@ 0x77
 8000740:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <MX_TIM3_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33333-1;
 8000748:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_TIM3_Init+0x94>)
 800074a:	f248 2234 	movw	r2, #33332	@ 0x8234
 800074e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <MX_TIM3_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_TIM3_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800075c:	4813      	ldr	r0, [pc, #76]	@ (80007ac <MX_TIM3_Init+0x94>)
 800075e:	f008 fb2f 	bl	8008dc0 <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000768:	f000 f8e0 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	@ (80007ac <MX_TIM3_Init+0x94>)
 800077a:	f008 fd69 	bl	8009250 <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 f8d2 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_TIM3_Init+0x94>)
 8000796:	f009 f827 	bl	80097e8 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007a0:	f000 f8c4 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200005c0 	.word	0x200005c0
 80007b0:	40000400 	.word	0x40000400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b3e      	ldr	r3, [pc, #248]	@ (80008c4 <MX_GPIO_Init+0x110>)
 80007cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d0:	4a3c      	ldr	r2, [pc, #240]	@ (80008c4 <MX_GPIO_Init+0x110>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007da:	4b3a      	ldr	r3, [pc, #232]	@ (80008c4 <MX_GPIO_Init+0x110>)
 80007dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b36      	ldr	r3, [pc, #216]	@ (80008c4 <MX_GPIO_Init+0x110>)
 80007ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ee:	4a35      	ldr	r2, [pc, #212]	@ (80008c4 <MX_GPIO_Init+0x110>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007f8:	4b32      	ldr	r3, [pc, #200]	@ (80008c4 <MX_GPIO_Init+0x110>)
 80007fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_LED_Pin|DISPL_RST_Pin|LED_GREEN_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f240 1129 	movw	r1, #297	@ 0x129
 800080c:	482e      	ldr	r0, [pc, #184]	@ (80008c8 <MX_GPIO_Init+0x114>)
 800080e:	f004 febf 	bl	8005590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_INDICATOR_Pin|DISPL_CS_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000818:	482c      	ldr	r0, [pc, #176]	@ (80008cc <MX_GPIO_Init+0x118>)
 800081a:	f004 feb9 	bl	8005590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPL_LED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = DISPL_LED_Pin|LED_GREEN_Pin;
 800081e:	2321      	movs	r3, #33	@ 0x21
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4824      	ldr	r0, [pc, #144]	@ (80008c8 <MX_GPIO_Init+0x114>)
 8000836:	f004 fcd3 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	481d      	ldr	r0, [pc, #116]	@ (80008c8 <MX_GPIO_Init+0x114>)
 8000852:	f004 fcc5 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8000856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4816      	ldr	r0, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0x114>)
 8000870:	f004 fcb6 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_INDICATOR_Pin */
  GPIO_InitStruct.Pin = LED_INDICATOR_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4810      	ldr	r0, [pc, #64]	@ (80008cc <MX_GPIO_Init+0x118>)
 800088c:	f004 fca8 	bl	80051e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8000890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089a:	2301      	movs	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4808      	ldr	r0, [pc, #32]	@ (80008cc <MX_GPIO_Init+0x118>)
 80008aa:	f004 fc99 	bl	80051e0 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80008b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008b8:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	46020c00 	.word	0x46020c00
 80008c8:	42020000 	.word	0x42020000
 80008cc:	42020400 	.word	0x42020400
 80008d0:	46000400 	.word	0x46000400

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	//Due to the Rtos timer, the callback is fixed here, we don't want to touch it, and we keep all the timer ISR code in this file & func.
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d102      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80008e6:	f001 f96b 	bl	8001bc0 <HAL_IncTick>
			count_fps_1s = 0;
		}
	}

  /* USER CODE END Callback 1 */
}
 80008ea:	e013      	b.n	8000914 <HAL_TIM_PeriodElapsedCallback+0x40>
	else if (htim == &TGFX_T) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d10f      	bne.n	8000914 <HAL_TIM_PeriodElapsedCallback+0x40>
		touchgfxSignalVSync();
 80008f4:	f013 fb68 	bl	8013fc8 <touchgfxSignalVSync>
		if(count_fps_1s++ == TOUCH_GFX_FPS)
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	4909      	ldr	r1, [pc, #36]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000900:	600a      	str	r2, [r1, #0]
 8000902:	2b19      	cmp	r3, #25
 8000904:	d106      	bne.n	8000914 <HAL_TIM_PeriodElapsedCallback+0x40>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000906:	2120      	movs	r1, #32
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800090a:	f004 fe59 	bl	80055c0 <HAL_GPIO_TogglePin>
			count_fps_1s = 0;
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40014000 	.word	0x40014000
 8000920:	200005c0 	.word	0x200005c0
 8000924:	2000060c 	.word	0x2000060c
 8000928:	42020000 	.word	0x42020000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x3c>)
 8000940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000944:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <HAL_MspInit+0x3c>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x3c>)
 8000950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 800095c:	f005 f888 	bl	8005a70 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	210f      	movs	r1, #15
 8000964:	f06f 0001 	mvn.w	r0, #1
 8000968:	f003 fae0 	bl	8003f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	46020c00 	.word	0x46020c00

08000978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ba      	sub	sp, #232	@ 0xe8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	22c0      	movs	r2, #192	@ 0xc0
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f02b fa96 	bl	802beca <memset>
  if(hadc->Instance==ADC1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a46      	ldr	r2, [pc, #280]	@ (8000abc <HAL_ADC_MspInit+0x144>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	f040 8084 	bne.w	8000ab2 <HAL_ADC_MspInit+0x13a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80009aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80009b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 fb20 	bl	8007008 <HAL_RCCEx_PeriphCLKConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 80009ce:	f7ff ffad 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009d2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac0 <HAL_ADC_MspInit+0x148>)
 80009d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d8:	4a39      	ldr	r2, [pc, #228]	@ (8000ac0 <HAL_ADC_MspInit+0x148>)
 80009da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009e2:	4b37      	ldr	r3, [pc, #220]	@ (8000ac0 <HAL_ADC_MspInit+0x148>)
 80009e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b33      	ldr	r3, [pc, #204]	@ (8000ac0 <HAL_ADC_MspInit+0x148>)
 80009f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f6:	4a32      	ldr	r2, [pc, #200]	@ (8000ac0 <HAL_ADC_MspInit+0x148>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <HAL_ADC_MspInit+0x148>)
 8000a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4827      	ldr	r0, [pc, #156]	@ (8000ac4 <HAL_ADC_MspInit+0x14c>)
 8000a28:	f004 fbda 	bl	80051e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a2e:	4a27      	ldr	r2, [pc, #156]	@ (8000acc <HAL_ADC_MspInit+0x154>)
 8000a30:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel10.Init.Request = GPDMA1_REQUEST_ADC1;
 8000a32:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel10.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000a38:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel10.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel10.Init.SrcInc = DMA_SINC_FIXED;
 8000a44:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel10.Init.DestInc = DMA_DINC_INCREMENTED;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a50:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel10.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel10.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a5e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel10.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000a60:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel10.Init.SrcBurstLength = 1;
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel10.Init.DestBurstLength = 1;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel10.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel10.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel10.Init.Mode = DMA_NORMAL;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 8000a84:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a86:	f003 fbc3 	bl	8004210 <HAL_DMA_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x11c>
    {
      Error_Handler();
 8000a90:	f7ff ff4c 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel10);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a98:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <HAL_ADC_MspInit+0x150>)
 8000aa4:	f003 fed6 	bl	8004854 <HAL_DMA_ConfigChannelAttributes>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_ADC_MspInit+0x13a>
    {
      Error_Handler();
 8000aae:	f7ff ff3d 	bl	800092c <Error_Handler>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ab2:	bf00      	nop
 8000ab4:	37e8      	adds	r7, #232	@ 0xe8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	42028000 	.word	0x42028000
 8000ac0:	46020c00 	.word	0x46020c00
 8000ac4:	42020400 	.word	0x42020400
 8000ac8:	200003c8 	.word	0x200003c8
 8000acc:	40020550 	.word	0x40020550

08000ad0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0b      	ldr	r2, [pc, #44]	@ (8000b0c <HAL_CRC_MspInit+0x3c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10e      	bne.n	8000b00 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_CRC_MspInit+0x40>)
 8000ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae8:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <HAL_CRC_MspInit+0x40>)
 8000aea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <HAL_CRC_MspInit+0x40>)
 8000af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023000 	.word	0x40023000
 8000b10:	46020c00 	.word	0x46020c00

08000b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0ba      	sub	sp, #232	@ 0xe8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	22c0      	movs	r2, #192	@ 0xc0
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f02b f9c8 	bl	802beca <memset>
  if(hi2c->Instance==I2C1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_I2C_MspInit+0xc4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d144      	bne.n	8000bce <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b44:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f006 fa55 	bl	8007008 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000b64:	f7ff fee2 	bl	800092c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_I2C_MspInit+0xc8>)
 8000b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <HAL_I2C_MspInit+0xc8>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_I2C_MspInit+0xc8>)
 8000b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b86:	23c0      	movs	r3, #192	@ 0xc0
 8000b88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <HAL_I2C_MspInit+0xcc>)
 8000bac:	f004 fb18 	bl	80051e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_I2C_MspInit+0xc8>)
 8000bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bb6:	4a09      	ldr	r2, [pc, #36]	@ (8000bdc <HAL_I2C_MspInit+0xc8>)
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bbc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_I2C_MspInit+0xc8>)
 8000bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	37e8      	adds	r7, #232	@ 0xe8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	46020c00 	.word	0x46020c00
 8000be0:	42020400 	.word	0x42020400

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ba      	sub	sp, #232	@ 0xe8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	22c0      	movs	r2, #192	@ 0xc0
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f02b f960 	bl	802beca <memset>
  if(hspi->Instance==SPI1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8000d44 <HAL_SPI_MspInit+0x160>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	f040 8093 	bne.w	8000d3c <HAL_SPI_MspInit+0x158>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c1a:	f04f 0300 	mov.w	r3, #0
 8000c1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000c22:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f006 f9ea 	bl	8007008 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 8000c3a:	f7ff fe77 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3e:	4b42      	ldr	r3, [pc, #264]	@ (8000d48 <HAL_SPI_MspInit+0x164>)
 8000c40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c44:	4a40      	ldr	r2, [pc, #256]	@ (8000d48 <HAL_SPI_MspInit+0x164>)
 8000c46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c4a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d48 <HAL_SPI_MspInit+0x164>)
 8000c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <HAL_SPI_MspInit+0x164>)
 8000c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c62:	4a39      	ldr	r2, [pc, #228]	@ (8000d48 <HAL_SPI_MspInit+0x164>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c6c:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <HAL_SPI_MspInit+0x164>)
 8000c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000c7a:	2382      	movs	r3, #130	@ 0x82
 8000c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c92:	2305      	movs	r3, #5
 8000c94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	482b      	ldr	r0, [pc, #172]	@ (8000d4c <HAL_SPI_MspInit+0x168>)
 8000ca0:	f004 fa9e 	bl	80051e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8000d54 <HAL_SPI_MspInit+0x170>)
 8000ca8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel11.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 8000caa:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel11.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000cb0:	4b27      	ldr	r3, [pc, #156]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel11.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb6:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cbc:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel11.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000cbe:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel11.Init.DestInc = DMA_DINC_FIXED;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel11.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000cca:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel11.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel11.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cd8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cdc:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel11.Init.SrcBurstLength = 1;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel11.Init.DestBurstLength = 1;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel11.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000cea:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel11.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel11.Init.Mode = DMA_NORMAL;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 8000cfc:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000cfe:	f003 fa87 	bl	8004210 <HAL_DMA_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000d08:	f7ff fe10 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel11);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000d10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d14:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <HAL_SPI_MspInit+0x16c>)
 8000d1e:	f003 fd99 	bl	8004854 <HAL_DMA_ConfigChannelAttributes>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8000d28:	f7ff fe00 	bl	800092c <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	203b      	movs	r0, #59	@ 0x3b
 8000d32:	f003 f8fb 	bl	8003f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d36:	203b      	movs	r0, #59	@ 0x3b
 8000d38:	f003 f912 	bl	8003f60 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37e8      	adds	r7, #232	@ 0xe8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40013000 	.word	0x40013000
 8000d48:	46020c00 	.word	0x46020c00
 8000d4c:	42020000 	.word	0x42020000
 8000d50:	20000548 	.word	0x20000548
 8000d54:	400205d0 	.word	0x400205d0

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <HAL_TIM_Base_MspInit+0x3c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10e      	bne.n	8000d88 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_TIM_Base_MspInit+0x40>)
 8000d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d70:	4a09      	ldr	r2, [pc, #36]	@ (8000d98 <HAL_TIM_Base_MspInit+0x40>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <HAL_TIM_Base_MspInit+0x40>)
 8000d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40000400 	.word	0x40000400
 8000d98:	46020c00 	.word	0x46020c00

08000d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	@ 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 8000dac:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <HAL_InitTick+0xcc>)
 8000dae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000db2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e68 <HAL_InitTick+0xcc>)
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <HAL_InitTick+0xcc>)
 8000dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dca:	f107 0210 	add.w	r2, r7, #16
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 f859 	bl	8006e8c <HAL_RCC_GetClockConfig>
  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dda:	f006 f843 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 8000dde:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000de2:	4a22      	ldr	r2, [pc, #136]	@ (8000e6c <HAL_InitTick+0xd0>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	0c9b      	lsrs	r3, r3, #18
 8000dea:	3b01      	subs	r3, #1
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <HAL_InitTick+0xd4>)
 8000df0:	4a20      	ldr	r2, [pc, #128]	@ (8000e74 <HAL_InitTick+0xd8>)
 8000df2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <HAL_InitTick+0xd4>)
 8000df6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dfa:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <HAL_InitTick+0xd4>)
 8000dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e00:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_InitTick+0xd4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_InitTick+0xd4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim15);
 8000e0e:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <HAL_InitTick+0xd4>)
 8000e10:	f007 ffd6 	bl	8008dc0 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000e1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d118      	bne.n	8000e54 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 8000e22:	4813      	ldr	r0, [pc, #76]	@ (8000e70 <HAL_InitTick+0xd4>)
 8000e24:	f008 f824 	bl	8008e70 <HAL_TIM_Base_Start_IT>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000e2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10e      	bne.n	8000e54 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d808      	bhi.n	8000e4e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM15 global Interrupt */
        HAL_NVIC_SetPriority(TIM15_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	2045      	movs	r0, #69	@ 0x45
 8000e42:	f003 f873 	bl	8003f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e46:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <HAL_InitTick+0xdc>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e002      	b.n	8000e54 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM15 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8000e54:	2045      	movs	r0, #69	@ 0x45
 8000e56:	f003 f883 	bl	8003f60 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3738      	adds	r7, #56	@ 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	46020c00 	.word	0x46020c00
 8000e6c:	431bde83 	.word	0x431bde83
 8000e70:	20000610 	.word	0x20000610
 8000e74:	40014000 	.word	0x40014000
 8000e78:	2000000c 	.word	0x2000000c

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <TIM3_IRQHandler+0x10>)
 8000eba:	f008 f879 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200005c0 	.word	0x200005c0

08000ec8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	@ (8000ed8 <SPI1_IRQHandler+0x10>)
 8000ece:	f007 fbe3 	bl	8008698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200004b8 	.word	0x200004b8

08000edc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <TIM15_IRQHandler+0x10>)
 8000ee2:	f008 f865 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000610 	.word	0x20000610

08000ef0 <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <GPDMA1_Channel10_IRQHandler+0x10>)
 8000ef6:	f003 fb40 	bl	800457a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200003c8 	.word	0x200003c8

08000f04 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <GPDMA1_Channel11_IRQHandler+0x10>)
 8000f0a:	f003 fb36 	bl	800457a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000548 	.word	0x20000548

08000f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return 1;
 8000f1c:	2301      	movs	r3, #1
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_kill>:

int _kill(int pid, int sig)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f32:	f02b f8c3 	bl	802c0bc <__errno>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2216      	movs	r2, #22
 8000f3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_exit>:

void _exit (int status)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe7 	bl	8000f28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f5a:	bf00      	nop
 8000f5c:	e7fd      	b.n	8000f5a <_exit+0x12>

08000f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e00a      	b.n	8000f86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f70:	f3af 8000 	nop.w
 8000f74:	4601      	mov	r1, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	60ba      	str	r2, [r7, #8]
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbf0      	blt.n	8000f70 <_read+0x12>
  }

  return len;
 8000f8e:	687b      	ldr	r3, [r7, #4]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e009      	b.n	8000fbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbf1      	blt.n	8000faa <_write+0x12>
  }
  return len;
 8000fc6:	687b      	ldr	r3, [r7, #4]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_close>:

int _close(int file)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff8:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_isatty>:

int _isatty(int file)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101e:	b480      	push	{r7}
 8001020:	b085      	sub	sp, #20
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f02b f828 	bl	802c0bc <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20040000 	.word	0x20040000
 8001098:	00000400 	.word	0x00000400
 800109c:	2000065c 	.word	0x2000065c
 80010a0:	20012c70 	.word	0x20012c70

080010a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <SystemInit+0x68>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ae:	4a17      	ldr	r2, [pc, #92]	@ (800110c <SystemInit+0x68>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <SystemInit+0x6c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <SystemInit+0x6c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <SystemInit+0x6c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <SystemInit+0x6c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <SystemInit+0x6c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <SystemInit+0x6c>)
 80010d6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80010da:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80010de:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <SystemInit+0x6c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <SystemInit+0x6c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <SystemInit+0x6c>)
 80010ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <SystemInit+0x6c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <SystemInit+0x68>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010fe:	609a      	str	r2, [r3, #8]
  #endif
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	46020c00 	.word	0x46020c00

08001114 <ADC1_Calibration>:
#include "modules.h"

extern ADC_HandleTypeDef hadc1;

void ADC1_Calibration()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED))
 8001118:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800111c:	2100      	movs	r1, #0
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <ADC1_Calibration+0x20>)
 8001120:	f002 fcf6 	bl	8003b10 <HAL_ADCEx_Calibration_Start>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <ADC1_Calibration+0x1a>
	{
		Error_Handler();
 800112a:	f7ff fbff 	bl	800092c <Error_Handler>
	}
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000033c 	.word	0x2000033c

08001138 <ADC1_Start_DMA_Conv>:

void ADC1_Start_DMA_Conv()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
		if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, (void*)ADC1_BUFFER, ADC1_MAX_CHANNEL*ADC1_MAX_BUFFER))
 800113c:	2208      	movs	r2, #8
 800113e:	4905      	ldr	r1, [pc, #20]	@ (8001154 <ADC1_Start_DMA_Conv+0x1c>)
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <ADC1_Start_DMA_Conv+0x20>)
 8001142:	f001 fb95 	bl	8002870 <HAL_ADC_Start_DMA>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <ADC1_Start_DMA_Conv+0x18>
		{
			Error_Handler();
 800114c:	f7ff fbee 	bl	800092c <Error_Handler>
		}
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000660 	.word	0x20000660
 8001158:	2000033c 	.word	0x2000033c

0800115c <ADC1_Convert_Data_To_V>:
uint16_t ADC1_Convert_Data_To_V(uint16_t data)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	return (uint16_t)__LL_ADC_CALC_DATA_TO_VOLTAGE(ADC1, 3300UL, (uint32_t)data,  LL_ADC_RESOLUTION_14B);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800116c:	fb03 f202 	mul.w	r2, r3, r2
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <ADC1_Convert_Data_To_V+0x30>)
 8001172:	fba3 1302 	umull	r1, r3, r3, r2
 8001176:	1ad2      	subs	r2, r2, r3
 8001178:	0852      	lsrs	r2, r2, #1
 800117a:	4413      	add	r3, r2
 800117c:	0b5b      	lsrs	r3, r3, #13
 800117e:	b29b      	uxth	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	00040011 	.word	0x00040011

08001190 <HAL_ADC_ConvCpltCallback>:
extern ADC_HandleTypeDef hadc1;

uint16_t ADC1_BUFFER[ADC1_MAX_CHANNEL*ADC1_MAX_BUFFER];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	//We will read Data from ADC, and feed to the Queue.
	//With Mutex to protect data.
	//Keep it short here.
	if(hadc->Instance == ADC1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0x20>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d102      	bne.n	80011a8 <HAL_ADC_ConvCpltCallback+0x18>
	{
		//HAL_ADC_Stop_DMA(hadc);
		//Give the semaphore to the InputTask to run and feed data to Queue.
		GiveSemaphoreFromISRByName(ADC_COMPLETE_SEM);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 f8e0 	bl	8001368 <GiveSemaphoreFromISRByName>
	}

}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	42028000 	.word	0x42028000

080011b4 <initQueues>:
		I2C_VOUT_QUEUE_SIZE,
};
osMessageQueueId_t myQueueHandle[MAX_QUEUE];

void initQueues()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_QUEUE; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	e017      	b.n	80011f0 <initQueues+0x3c>
	{
		myQueueHandle[i] = osMessageQueueNew (myQueueSizes[i], sizeof(uint16_t), &myQueueAttr[i]);
 80011c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <initQueues+0x4c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c8:	4618      	mov	r0, r3
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <initQueues+0x50>)
 80011d6:	4413      	add	r3, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	2102      	movs	r1, #2
 80011dc:	f008 fe84 	bl	8009ee8 <osMessageQueueNew>
 80011e0:	4602      	mov	r2, r0
 80011e2:	4909      	ldr	r1, [pc, #36]	@ (8001208 <initQueues+0x54>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_QUEUE; i++)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	dde4      	ble.n	80011c0 <initQueues+0xc>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0802e13c 	.word	0x0802e13c
 8001204:	0802e0f4 	.word	0x0802e0f4
 8001208:	20000670 	.word	0x20000670

0800120c <GetQueueHandleByName>:

osMessageQueueId_t GetQueueHandleByName(QueueIndexName_t name)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	return myQueueHandle[name];
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <GetQueueHandleByName+0x20>)
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000670 	.word	0x20000670

08001230 <ADC1_IN15_ReadDataFromQueue>:

int ADC1_IN15_ReadDataFromQueue()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint16_t pData;
	if(osOK == osMessageQueueGet(GetQueueHandleByName(ADC1_IN15_QUEUE_NAME), (void*)&pData, 0, 0))
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff ffe8 	bl	800120c <GetQueueHandleByName>
 800123c:	1db9      	adds	r1, r7, #6
 800123e:	2300      	movs	r3, #0
 8001240:	2200      	movs	r2, #0
 8001242:	f008 ff1d 	bl	800a080 <osMessageQueueGet>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <ADC1_IN15_ReadDataFromQueue+0x20>
	{
		return (int)pData;
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	e001      	b.n	8001254 <ADC1_IN15_ReadDataFromQueue+0x24>
	}
	else {
		//Trigger ADC conversion when UI data is empty.
		//GiveSemaphoreByName(UI_QUEUE_EMPTY_SEM);
		return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <FeedDataToQueueFromADC_DMABuffer>:

void FeedDataToQueueFromADC_DMABuffer() {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
	//ADC1_IN15 DATA will be in the even index: 0, 2, 4, 6
	//ADC1_IN16 DATA will be in the odd index: 1, 3, 5, 7
	//The Semaphore will be given from ADC ISR.
	uint32_t data = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
	uint32_t vdata_in15 = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
	uint32_t vdata_in16 = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < (ADC1_MAX_CHANNEL * ADC1_MAX_BUFFER); i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	e015      	b.n	80012a0 <FeedDataToQueueFromADC_DMABuffer+0x44>
		//need to get first half of data
		data = ADC1_BUFFER[i];
 8001274:	4a1e      	ldr	r2, [pc, #120]	@ (80012f0 <FeedDataToQueueFromADC_DMABuffer+0x94>)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127c:	60bb      	str	r3, [r7, #8]
		if (i % 2 == 0) //even index
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d104      	bne.n	8001292 <FeedDataToQueueFromADC_DMABuffer+0x36>
				{
			//Data for IN15
			vdata_in15 += (data);
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4413      	add	r3, r2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	e003      	b.n	800129a <FeedDataToQueueFromADC_DMABuffer+0x3e>
		} else //odd index
		{
			//Data for IN16
			vdata_in16 += (data);
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4413      	add	r3, r2
 8001298:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < (ADC1_MAX_CHANNEL * ADC1_MAX_BUFFER); i++) {
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	dde6      	ble.n	8001274 <FeedDataToQueueFromADC_DMABuffer+0x18>
		}
	}
	vdata_in15 = ADC1_Convert_Data_To_V(vdata_in15 / 4);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff55 	bl	800115c <ADC1_Convert_Data_To_V>
 80012b2:	4603      	mov	r3, r0
 80012b4:	607b      	str	r3, [r7, #4]
	vdata_in16 = ADC1_Convert_Data_To_V(vdata_in16 / 4);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff4d 	bl	800115c <ADC1_Convert_Data_To_V>
 80012c2:	4603      	mov	r3, r0
 80012c4:	603b      	str	r3, [r7, #0]
	osMessageQueuePut(GetQueueHandleByName(ADC1_IN15_QUEUE_NAME), (void*) &vdata_in15, 0, 0);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ffa0 	bl	800120c <GetQueueHandleByName>
 80012cc:	1d39      	adds	r1, r7, #4
 80012ce:	2300      	movs	r3, #0
 80012d0:	2200      	movs	r2, #0
 80012d2:	f008 fe7b 	bl	8009fcc <osMessageQueuePut>
	osMessageQueuePut(GetQueueHandleByName(ADC1_IN15_QUEUE_NAME), (void*) &vdata_in16, 0, 0);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ff98 	bl	800120c <GetQueueHandleByName>
 80012dc:	4639      	mov	r1, r7
 80012de:	2300      	movs	r3, #0
 80012e0:	2200      	movs	r2, #0
 80012e2:	f008 fe73 	bl	8009fcc <osMessageQueuePut>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000660 	.word	0x20000660

080012f4 <InitSemaphore>:
} ;

SemaphoreHandle_t mySemaphoreHandleList[MAX_SEMAPHORE];

void InitSemaphore()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_SEMAPHORE; i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	e010      	b.n	8001322 <InitSemaphore+0x2e>
	{
		mySemaphoreHandleList[i] = osSemaphoreNew(1, 0, &mySemaphoreAttrList[i]);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <InitSemaphore+0x40>)
 8001306:	4413      	add	r3, r2
 8001308:	461a      	mov	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	2001      	movs	r0, #1
 800130e:	f008 fcd8 	bl	8009cc2 <osSemaphoreNew>
 8001312:	4602      	mov	r2, r0
 8001314:	4908      	ldr	r1, [pc, #32]	@ (8001338 <InitSemaphore+0x44>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_SEMAPHORE; i++)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3301      	adds	r3, #1
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b02      	cmp	r3, #2
 8001326:	ddeb      	ble.n	8001300 <InitSemaphore+0xc>
	}
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0802e144 	.word	0x0802e144
 8001338:	2000067c 	.word	0x2000067c

0800133c <TakeSemaphoreByName>:
//	UI_QUEUE_EMPTY = 2,
//
//} MySemaphoreName_t;
//
uint8_t TakeSemaphoreByName(MySemaphoreName_t semName)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	return (xSemaphoreTake(mySemaphoreHandleList[semName], 0));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4a06      	ldr	r2, [pc, #24]	@ (8001364 <TakeSemaphoreByName+0x28>)
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f009 fbb6 	bl	800aac2 <xQueueSemaphoreTake>
 8001356:	4603      	mov	r3, r0
 8001358:	b2db      	uxtb	r3, r3
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000067c 	.word	0x2000067c

08001368 <GiveSemaphoreFromISRByName>:
uint8_t GiveSemaphoreFromISRByName(MySemaphoreName_t semName)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	return(xSemaphoreGiveFromISR(mySemaphoreHandleList[semName], pdFALSE));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <GiveSemaphoreFromISRByName+0x28>)
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f009 fa6e 	bl	800a85e <xQueueGiveFromISR>
 8001382:	4603      	mov	r3, r0
 8001384:	b2db      	uxtb	r3, r3
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000067c 	.word	0x2000067c

08001394 <Init_Tasks>:
};

osThreadId_t TaskIdList[TASK_COUNT_MAX];

void Init_Tasks()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0


	InitSemaphore();
 800139a:	f7ff ffab 	bl	80012f4 <InitSemaphore>
	initQueues();
 800139e:	f7ff ff09 	bl	80011b4 <initQueues>
	//Set up all peripherals before handing over to RTOS tasks.
	Peripherals_Init();
 80013a2:	f000 f831 	bl	8001408 <Peripherals_Init>
	//Create all tasks.
	for(int i = 0; i < TASK_COUNT_MAX ; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e01e      	b.n	80013ea <Init_Tasks+0x56>
	{
		TaskIdList[i] = osThreadNew(TaskFuncList[i], NULL, (void *)&TaskListAttr[i]);
 80013ac:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <Init_Tasks+0x68>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4a10      	ldr	r2, [pc, #64]	@ (8001400 <Init_Tasks+0x6c>)
 80013c0:	4413      	add	r3, r2
 80013c2:	461a      	mov	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	f008 fbd1 	bl	8009b6c <osThreadNew>
 80013ca:	4602      	mov	r2, r0
 80013cc:	490d      	ldr	r1, [pc, #52]	@ (8001404 <Init_Tasks+0x70>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(TaskIdList[i] == NULL)
 80013d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <Init_Tasks+0x70>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <Init_Tasks+0x50>
		{
			Error_Handler();
 80013e0:	f7ff faa4 	bl	800092c <Error_Handler>
	for(int i = 0; i < TASK_COUNT_MAX ; i++)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	dddd      	ble.n	80013ac <Init_Tasks+0x18>
		}
	}
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0802e1e0 	.word	0x0802e1e0
 8001400:	0802e174 	.word	0x0802e174
 8001404:	20000688 	.word	0x20000688

08001408 <Peripherals_Init>:

void Peripherals_Init()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	//Low level HAL init will be done in main.c
	//The Application level init will be done here.
	Setup_LCD_TouchGFX();
 800140c:	f7fe ff3e 	bl	800028c <Setup_LCD_TouchGFX>
	ADC1_Calibration();
 8001410:	f7ff fe80 	bl	8001114 <ADC1_Calibration>

	//I2C_Device_Init();
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <InputTask>:
void InputTask(void *argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
	for(;;)
	{
		//Periodically run : 10MS.
		ADC1_Start_DMA_Conv();
 8001420:	f7ff fe8a 	bl	8001138 <ADC1_Start_DMA_Conv>

		//This got trigger from ADC_ISR.
		if (TakeSemaphoreByName(ADC_COMPLETE_SEM) == 1){
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff ff89 	bl	800133c <TakeSemaphoreByName>
 800142a:	4603      	mov	r3, r0
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <InputTask+0x1c>
			FeedDataToQueueFromADC_DMABuffer();
 8001430:	f7ff ff14 	bl	800125c <FeedDataToQueueFromADC_DMABuffer>
		//#define TASK_INPUT_INTERVAL_10MS 		(10) //ms
		//Sampling speed is 1/10ms = 100Hz = 100 sample/s.
		//ADC buffer is 4 half-word.
		//We will take average of it and display.
		//The FPS is 25 sample/s.
		osDelay(TASK_INPUT_INTERVAL_10MS);
 8001434:	200a      	movs	r0, #10
 8001436:	f008 fc2a 	bl	8009c8e <osDelay>
		ADC1_Start_DMA_Conv();
 800143a:	e7f1      	b.n	8001420 <InputTask+0x8>

0800143c <I2CTask>:
	}
}

void I2CTask(void *argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	for(;;)
	{
#if 0
		I2C_ReadVoutPutToQueue();
#endif
		osDelay(TASK_I2C_INTERVAL_50MS);
 8001444:	2032      	movs	r0, #50	@ 0x32
 8001446:	f008 fc22 	bl	8009c8e <osDelay>
 800144a:	e7fb      	b.n	8001444 <I2CTask+0x8>

0800144c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800144c:	480d      	ldr	r0, [pc, #52]	@ (8001484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001450:	f7ff fe28 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <LoopForever+0x6>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	@ (800148c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <LoopForever+0xe>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	@ (8001498 <LoopForever+0x16>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800147a:	f02a fe25 	bl	802c0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147e:	f7fe ff1b 	bl	80002b8 <main>

08001482 <LoopForever>:

LoopForever:
    b LoopForever
 8001482:	e7fe      	b.n	8001482 <LoopForever>
  ldr   r0, =_estack
 8001484:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001490:	0803a10c 	.word	0x0803a10c
  ldr r2, =_sbss
 8001494:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001498:	20012c6c 	.word	0x20012c6c

0800149c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_IRQHandler>
	...

080014a0 <Displ_Transmit>:
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t *data, uint16_t dataSize,
		uint8_t isTouchGFXBuffer) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6039      	str	r1, [r7, #0]
 80014a8:	4611      	mov	r1, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	460b      	mov	r3, r1
 80014b2:	80bb      	strh	r3, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {
 80014b8:	bf00      	nop
 80014ba:	4b2c      	ldr	r3, [pc, #176]	@ (800156c <Displ_Transmit+0xcc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0fa      	beq.n	80014ba <Displ_Transmit+0x1a>
	}; // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback

	//Displ_Select();
	CS_L();
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ca:	4829      	ldr	r0, [pc, #164]	@ (8001570 <Displ_Transmit+0xd0>)
 80014cc:	f004 f860 	bl	8005590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d8:	4826      	ldr	r0, [pc, #152]	@ (8001574 <Displ_Transmit+0xd4>)
 80014da:	f004 f859 	bl	8005590 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer) {
 80014de:	79bb      	ldrb	r3, [r7, #6]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d016      	beq.n	8001512 <Displ_Transmit+0x72>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit = (uint32_t*) (data + dataSize);
 80014e4:	88bb      	ldrh	r3, [r7, #4]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00b      	b.n	800150a <Displ_Transmit+0x6a>
			*data32 = __REV16(*data32);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	ba5b      	rev16	r3, r3
 80014fc:	60bb      	str	r3, [r7, #8]
  return result;
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3304      	adds	r3, #4
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3ef      	bcc.n	80014f2 <Displ_Transmit+0x52>
		if(HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize) != HAL_OK){
			while(Displ_SpiAvailable == 0);
		}
#else
#ifdef DISPLAY_SPI_DMA_MODE
	if (dataSize < DISPL_DMA_CUTOFF) {
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	2b13      	cmp	r3, #19
 8001516:	d817      	bhi.n	8001548 <Displ_Transmit+0xa8>
#endif //DISPLAY_SPI_DMA_MODE
		Displ_SpiAvailable = 0;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <Displ_Transmit+0xcc>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit(&DISPL_SPI_PORT, data, dataSize, HAL_MAX_DELAY)
 800151e:	88ba      	ldrh	r2, [r7, #4]
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	4814      	ldr	r0, [pc, #80]	@ (8001578 <Displ_Transmit+0xd8>)
 8001528:	f006 fcf2 	bl	8007f10 <HAL_SPI_Transmit>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <Displ_Transmit+0x96>
				!= HAL_OK) {
			while (1)
 8001532:	bf00      	nop
 8001534:	e7fd      	b.n	8001532 <Displ_Transmit+0x92>
				;	//trap error.
		}
		Displ_SpiAvailable = 1;
 8001536:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <Displ_Transmit+0xcc>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
		if (isTouchGFXBuffer) {
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d010      	beq.n	8001564 <Displ_Transmit+0xc4>
			DisplayDriver_TransferCompleteCallback();
 8001542:	f012 fd3b 	bl	8013fbc <DisplayDriver_TransferCompleteCallback>
		Displ_SpiAvailable = 0;
		if (HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize)!= HAL_OK) { while (1);}
	}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
}
 8001546:	e00d      	b.n	8001564 <Displ_Transmit+0xc4>
		Displ_SpiAvailable = 0;
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <Displ_Transmit+0xcc>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize)!= HAL_OK) { while (1);}
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	461a      	mov	r2, r3
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	4808      	ldr	r0, [pc, #32]	@ (8001578 <Displ_Transmit+0xd8>)
 8001556:	f006 feeb 	bl	8008330 <HAL_SPI_Transmit_DMA>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <Displ_Transmit+0xc4>
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <Displ_Transmit+0xc0>
}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000008 	.word	0x20000008
 8001570:	42020400 	.word	0x42020400
 8001574:	42020000 	.word	0x42020000
 8001578:	200004b8 	.word	0x200004b8

0800157c <Displ_WriteCommand>:

/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
	//Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
	CS_L();
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <Displ_WriteCommand+0x44>)
 800158e:	f003 ffff 	bl	8005590 <HAL_GPIO_WritePin>
	DC_L();
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001598:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <Displ_WriteCommand+0x48>)
 800159a:	f003 fff9 	bl	8005590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISPL_SPI_PORT, &cmd, 1, 1);
 800159e:	1df9      	adds	r1, r7, #7
 80015a0:	2301      	movs	r3, #1
 80015a2:	2201      	movs	r2, #1
 80015a4:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <Displ_WriteCommand+0x4c>)
 80015a6:	f006 fcb3 	bl	8007f10 <HAL_SPI_Transmit>
	CS_H();
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <Displ_WriteCommand+0x44>)
 80015b2:	f003 ffed 	bl	8005590 <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	42020400 	.word	0x42020400
 80015c4:	42020000 	.word	0x42020000
 80015c8:	200004b8 	.word	0x200004b8

080015cc <Dislp_WriteData_Single>:

void Dislp_WriteData_Single(uint8_t Data) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015dc:	480c      	ldr	r0, [pc, #48]	@ (8001610 <Dislp_WriteData_Single+0x44>)
 80015de:	f003 ffd7 	bl	8005590 <HAL_GPIO_WritePin>
	CS_L();
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e8:	480a      	ldr	r0, [pc, #40]	@ (8001614 <Dislp_WriteData_Single+0x48>)
 80015ea:	f003 ffd1 	bl	8005590 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISPL_SPI_PORT, &Data, 1, 1);
 80015ee:	1df9      	adds	r1, r7, #7
 80015f0:	2301      	movs	r3, #1
 80015f2:	2201      	movs	r2, #1
 80015f4:	4808      	ldr	r0, [pc, #32]	@ (8001618 <Dislp_WriteData_Single+0x4c>)
 80015f6:	f006 fc8b 	bl	8007f10 <HAL_SPI_Transmit>
	CS_H();
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <Dislp_WriteData_Single+0x48>)
 8001602:	f003 ffc5 	bl	8005590 <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	42020000 	.word	0x42020000
 8001614:	42020400 	.word	0x42020400
 8001618:	200004b8 	.word	0x200004b8

0800161c <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t *buff, size_t buff_size, uint8_t isTouchGFXBuffer) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	4613      	mov	r3, r2
 8001628:	71fb      	strb	r3, [r7, #7]
	if (buff_size == 0)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <Displ_WriteData+0x24>
		return;
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	b29a      	uxth	r2, r3
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	68f9      	ldr	r1, [r7, #12]
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff ff31 	bl	80014a0 <Displ_Transmit>
 800163e:	e000      	b.n	8001642 <Displ_WriteData+0x26>
		return;
 8001640:	bf00      	nop
}
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <ILI9XXX_Enable>:

void ILI9XXX_Enable() {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	RST_H();
 800164c:	2201      	movs	r2, #1
 800164e:	2108      	movs	r1, #8
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <ILI9XXX_Enable+0x14>)
 8001652:	f003 ff9d 	bl	8005590 <HAL_GPIO_WritePin>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	42020000 	.word	0x42020000

08001660 <ILI9XXX_SPI_Init>:
void ILI9XXX_SPI_Init() {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	CS_L();
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166a:	4802      	ldr	r0, [pc, #8]	@ (8001674 <ILI9XXX_SPI_Init+0x14>)
 800166c:	f003 ff90 	bl	8005590 <HAL_GPIO_WritePin>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	42020400 	.word	0x42020400

08001678 <ILI9XXX_Reset>:
void ILI9XXX_Reset() {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	RST_H();
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	480a      	ldr	r0, [pc, #40]	@ (80016ac <ILI9XXX_Reset+0x34>)
 8001682:	f003 ff85 	bl	8005590 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001686:	20c8      	movs	r0, #200	@ 0xc8
 8001688:	f000 faba 	bl	8001c00 <HAL_Delay>
	CS_L();
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <ILI9XXX_Reset+0x38>)
 8001694:	f003 ff7c 	bl	8005590 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001698:	20c8      	movs	r0, #200	@ 0xc8
 800169a:	f000 fab1 	bl	8001c00 <HAL_Delay>
	RST_H();
 800169e:	2201      	movs	r2, #1
 80016a0:	2108      	movs	r1, #8
 80016a2:	4802      	ldr	r0, [pc, #8]	@ (80016ac <ILI9XXX_Reset+0x34>)
 80016a4:	f003 ff74 	bl	8005590 <HAL_GPIO_WritePin>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	42020000 	.word	0x42020000
 80016b0:	42020400 	.word	0x42020400

080016b4 <ILI9XXX_Init>:
/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	ILI9XXX_Enable();
 80016b8:	f7ff ffc6 	bl	8001648 <ILI9XXX_Enable>
	ILI9XXX_SPI_Init();
 80016bc:	f7ff ffd0 	bl	8001660 <ILI9XXX_SPI_Init>
	ILI9XXX_Reset();
 80016c0:	f7ff ffda 	bl	8001678 <ILI9XXX_Reset>

	//SOFTWARE RESET
	Displ_WriteCommand(0x01);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7ff ff59 	bl	800157c <Displ_WriteCommand>
	HAL_Delay(1000);
 80016ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ce:	f000 fa97 	bl	8001c00 <HAL_Delay>

	//POWER CONTROL A
	Displ_WriteCommand(0xCB);
 80016d2:	20cb      	movs	r0, #203	@ 0xcb
 80016d4:	f7ff ff52 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x39);
 80016d8:	2039      	movs	r0, #57	@ 0x39
 80016da:	f7ff ff77 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x2C);
 80016de:	202c      	movs	r0, #44	@ 0x2c
 80016e0:	f7ff ff74 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff ff71 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x34);
 80016ea:	2034      	movs	r0, #52	@ 0x34
 80016ec:	f7ff ff6e 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x02);
 80016f0:	2002      	movs	r0, #2
 80016f2:	f7ff ff6b 	bl	80015cc <Dislp_WriteData_Single>

	//POWER CONTROL B
	Displ_WriteCommand(0xCF);
 80016f6:	20cf      	movs	r0, #207	@ 0xcf
 80016f8:	f7ff ff40 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff ff65 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xC1);
 8001702:	20c1      	movs	r0, #193	@ 0xc1
 8001704:	f7ff ff62 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x30);
 8001708:	2030      	movs	r0, #48	@ 0x30
 800170a:	f7ff ff5f 	bl	80015cc <Dislp_WriteData_Single>

	//DRIVER TIMING CONTROL A
	Displ_WriteCommand(0xE8);
 800170e:	20e8      	movs	r0, #232	@ 0xe8
 8001710:	f7ff ff34 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x85);
 8001714:	2085      	movs	r0, #133	@ 0x85
 8001716:	f7ff ff59 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff56 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x78);
 8001720:	2078      	movs	r0, #120	@ 0x78
 8001722:	f7ff ff53 	bl	80015cc <Dislp_WriteData_Single>

	//DRIVER TIMING CONTROL B
	Displ_WriteCommand(0xEA);
 8001726:	20ea      	movs	r0, #234	@ 0xea
 8001728:	f7ff ff28 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff ff4d 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff ff4a 	bl	80015cc <Dislp_WriteData_Single>

	//POWER ON SEQUENCE CONTROL
	Displ_WriteCommand(0xED);
 8001738:	20ed      	movs	r0, #237	@ 0xed
 800173a:	f7ff ff1f 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x64);
 800173e:	2064      	movs	r0, #100	@ 0x64
 8001740:	f7ff ff44 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 8001744:	2003      	movs	r0, #3
 8001746:	f7ff ff41 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x12);
 800174a:	2012      	movs	r0, #18
 800174c:	f7ff ff3e 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x81);
 8001750:	2081      	movs	r0, #129	@ 0x81
 8001752:	f7ff ff3b 	bl	80015cc <Dislp_WriteData_Single>

	//PUMP RATIO CONTROL
	Displ_WriteCommand(0xF7);
 8001756:	20f7      	movs	r0, #247	@ 0xf7
 8001758:	f7ff ff10 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x20);
 800175c:	2020      	movs	r0, #32
 800175e:	f7ff ff35 	bl	80015cc <Dislp_WriteData_Single>

	//POWER CONTROL,VRH[5:0]
	Displ_WriteCommand(0xC0);
 8001762:	20c0      	movs	r0, #192	@ 0xc0
 8001764:	f7ff ff0a 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x23);
 8001768:	2023      	movs	r0, #35	@ 0x23
 800176a:	f7ff ff2f 	bl	80015cc <Dislp_WriteData_Single>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	Displ_WriteCommand(0xC1);
 800176e:	20c1      	movs	r0, #193	@ 0xc1
 8001770:	f7ff ff04 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x10);
 8001774:	2010      	movs	r0, #16
 8001776:	f7ff ff29 	bl	80015cc <Dislp_WriteData_Single>

	//VCM CONTROL
	Displ_WriteCommand(0xC5);
 800177a:	20c5      	movs	r0, #197	@ 0xc5
 800177c:	f7ff fefe 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x3E);
 8001780:	203e      	movs	r0, #62	@ 0x3e
 8001782:	f7ff ff23 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x28);
 8001786:	2028      	movs	r0, #40	@ 0x28
 8001788:	f7ff ff20 	bl	80015cc <Dislp_WriteData_Single>

	//VCM CONTROL 2
	Displ_WriteCommand(0xC7);
 800178c:	20c7      	movs	r0, #199	@ 0xc7
 800178e:	f7ff fef5 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x86);
 8001792:	2086      	movs	r0, #134	@ 0x86
 8001794:	f7ff ff1a 	bl	80015cc <Dislp_WriteData_Single>

	//MEMORY ACCESS CONTROL
	Displ_WriteCommand(0x36);
 8001798:	2036      	movs	r0, #54	@ 0x36
 800179a:	f7ff feef 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x48);
 800179e:	2048      	movs	r0, #72	@ 0x48
 80017a0:	f7ff ff14 	bl	80015cc <Dislp_WriteData_Single>

	//PIXEL FORMAT
	Displ_WriteCommand(0x3A);
 80017a4:	203a      	movs	r0, #58	@ 0x3a
 80017a6:	f7ff fee9 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x55);
 80017aa:	2055      	movs	r0, #85	@ 0x55
 80017ac:	f7ff ff0e 	bl	80015cc <Dislp_WriteData_Single>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	Displ_WriteCommand(0xB1);
 80017b0:	20b1      	movs	r0, #177	@ 0xb1
 80017b2:	f7ff fee3 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff ff08 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x18);
 80017bc:	2018      	movs	r0, #24
 80017be:	f7ff ff05 	bl	80015cc <Dislp_WriteData_Single>

	//DISPLAY FUNCTION CONTROL
	Displ_WriteCommand(0xB6);
 80017c2:	20b6      	movs	r0, #182	@ 0xb6
 80017c4:	f7ff feda 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x08);
 80017c8:	2008      	movs	r0, #8
 80017ca:	f7ff feff 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x82);
 80017ce:	2082      	movs	r0, #130	@ 0x82
 80017d0:	f7ff fefc 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x27);
 80017d4:	2027      	movs	r0, #39	@ 0x27
 80017d6:	f7ff fef9 	bl	80015cc <Dislp_WriteData_Single>

	//3GAMMA FUNCTION DISABLE
	Displ_WriteCommand(0xF2);
 80017da:	20f2      	movs	r0, #242	@ 0xf2
 80017dc:	f7ff fece 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fef3 	bl	80015cc <Dislp_WriteData_Single>

	//GAMMA CURVE SELECTED
	Displ_WriteCommand(0x26);
 80017e6:	2026      	movs	r0, #38	@ 0x26
 80017e8:	f7ff fec8 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x01);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff feed 	bl	80015cc <Dislp_WriteData_Single>

	//POSITIVE GAMMA CORRECTION
	Displ_WriteCommand(0xE0);
 80017f2:	20e0      	movs	r0, #224	@ 0xe0
 80017f4:	f7ff fec2 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x0F);
 80017f8:	200f      	movs	r0, #15
 80017fa:	f7ff fee7 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 80017fe:	2031      	movs	r0, #49	@ 0x31
 8001800:	f7ff fee4 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x2B);
 8001804:	202b      	movs	r0, #43	@ 0x2b
 8001806:	f7ff fee1 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0C);
 800180a:	200c      	movs	r0, #12
 800180c:	f7ff fede 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 8001810:	200e      	movs	r0, #14
 8001812:	f7ff fedb 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x08);
 8001816:	2008      	movs	r0, #8
 8001818:	f7ff fed8 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x4E);
 800181c:	204e      	movs	r0, #78	@ 0x4e
 800181e:	f7ff fed5 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xF1);
 8001822:	20f1      	movs	r0, #241	@ 0xf1
 8001824:	f7ff fed2 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x37);
 8001828:	2037      	movs	r0, #55	@ 0x37
 800182a:	f7ff fecf 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x07);
 800182e:	2007      	movs	r0, #7
 8001830:	f7ff fecc 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x10);
 8001834:	2010      	movs	r0, #16
 8001836:	f7ff fec9 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 800183a:	2003      	movs	r0, #3
 800183c:	f7ff fec6 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 8001840:	200e      	movs	r0, #14
 8001842:	f7ff fec3 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x09);
 8001846:	2009      	movs	r0, #9
 8001848:	f7ff fec0 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff febd 	bl	80015cc <Dislp_WriteData_Single>

	//NEGATIVE GAMMA CORRECTION
	Displ_WriteCommand(0xE1);
 8001852:	20e1      	movs	r0, #225	@ 0xe1
 8001854:	f7ff fe92 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff feb7 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 800185e:	200e      	movs	r0, #14
 8001860:	f7ff feb4 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x14);
 8001864:	2014      	movs	r0, #20
 8001866:	f7ff feb1 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 800186a:	2003      	movs	r0, #3
 800186c:	f7ff feae 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x11);
 8001870:	2011      	movs	r0, #17
 8001872:	f7ff feab 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x07);
 8001876:	2007      	movs	r0, #7
 8001878:	f7ff fea8 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 800187c:	2031      	movs	r0, #49	@ 0x31
 800187e:	f7ff fea5 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xC1);
 8001882:	20c1      	movs	r0, #193	@ 0xc1
 8001884:	f7ff fea2 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x48);
 8001888:	2048      	movs	r0, #72	@ 0x48
 800188a:	f7ff fe9f 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x08);
 800188e:	2008      	movs	r0, #8
 8001890:	f7ff fe9c 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0F);
 8001894:	200f      	movs	r0, #15
 8001896:	f7ff fe99 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0C);
 800189a:	200c      	movs	r0, #12
 800189c:	f7ff fe96 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 80018a0:	2031      	movs	r0, #49	@ 0x31
 80018a2:	f7ff fe93 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x36);
 80018a6:	2036      	movs	r0, #54	@ 0x36
 80018a8:	f7ff fe90 	bl	80015cc <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0F);
 80018ac:	200f      	movs	r0, #15
 80018ae:	f7ff fe8d 	bl	80015cc <Dislp_WriteData_Single>

	//EXIT SLEEP
	Displ_WriteCommand(0x11);
 80018b2:	2011      	movs	r0, #17
 80018b4:	f7ff fe62 	bl	800157c <Displ_WriteCommand>
	HAL_Delay(120);
 80018b8:	2078      	movs	r0, #120	@ 0x78
 80018ba:	f000 f9a1 	bl	8001c00 <HAL_Delay>

	//TURN ON DISPLAY
	Displ_WriteCommand(0x29);
 80018be:	2029      	movs	r0, #41	@ 0x29
 80018c0:	f7ff fe5c 	bl	800157c <Displ_WriteCommand>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
	HAL_Delay(5);
#endif

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	4603      	mov	r3, r0
 80018dc:	80bb      	strh	r3, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	807b      	strh	r3, [r7, #2]
 80018e2:	4613      	mov	r3, r2
 80018e4:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8)
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	061a      	lsls	r2, r3, #24
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80018f2:	431a      	orrs	r2, r3
			| ((x1 & 0xFF) << 8) | ((x1 & 0xFF00) >> 8));
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	0a12      	lsrs	r2, r2, #8
 8001900:	b292      	uxth	r2, r2
 8001902:	431a      	orrs	r2, r3
	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8)
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <Displ_SetAddressWindow+0x90>)
 8001906:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8001908:	202a      	movs	r0, #42	@ 0x2a
 800190a:	f7ff fe37 	bl	800157c <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2104      	movs	r1, #4
 8001912:	4811      	ldr	r0, [pc, #68]	@ (8001958 <Displ_SetAddressWindow+0x90>)
 8001914:	f7ff fe82 	bl	800161c <Displ_WriteData>

	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8)
 8001918:	883b      	ldrh	r3, [r7, #0]
 800191a:	061a      	lsls	r2, r3, #24
 800191c:	883b      	ldrh	r3, [r7, #0]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001924:	431a      	orrs	r2, r3
			| ((y1 & 0xFF) << 8) | ((y1 & 0xFF00) >> 8));
 8001926:	88bb      	ldrh	r3, [r7, #4]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b29b      	uxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	88ba      	ldrh	r2, [r7, #4]
 8001930:	0a12      	lsrs	r2, r2, #8
 8001932:	b292      	uxth	r2, r2
 8001934:	431a      	orrs	r2, r3
	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8)
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <Displ_SetAddressWindow+0x90>)
 8001938:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800193a:	202b      	movs	r0, #43	@ 0x2b
 800193c:	f7ff fe1e 	bl	800157c <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2104      	movs	r1, #4
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <Displ_SetAddressWindow+0x90>)
 8001946:	f7ff fe69 	bl	800161c <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 800194a:	202c      	movs	r0, #44	@ 0x2c
 800194c:	f7ff fe16 	bl	800157c <Displ_WriteCommand>
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}
 8001958:	2000069c 	.word	0x2000069c

0800195c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
//		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
//		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
//	} else
	{						// otherwise leave both port permanently selected
		//HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); // select display
		CS_L();
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <Displ_Init+0x2c>)
 800196e:	f003 fe0f 	bl	8005590 <HAL_GPIO_WritePin>
		//SET_DISPL_SPI_BAUDRATE;
		//HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		//SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8001972:	f7ff fe9f 	bl	80016b4 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f807 	bl	800198c <Displ_Orientation>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	42020400 	.word	0x42020400

0800198c <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
	//static uint8_t data[1];
	uint8_t data = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
	switch (orientation) {
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d833      	bhi.n	8001a08 <Displ_Orientation+0x7c>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <Displ_Orientation+0x1c>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019cd 	.word	0x080019cd
 80019b0:	080019e1 	.word	0x080019e1
 80019b4:	080019f5 	.word	0x080019f5
	case Displ_Orientat_0:
		data = ILI9XXX_MADCTL_0DEG;
 80019b8:	2388      	movs	r3, #136	@ 0x88
 80019ba:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_HEIGHT;
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <Displ_Orientation+0x98>)
 80019be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019c2:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 80019c4:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <Displ_Orientation+0x9c>)
 80019c6:	22f0      	movs	r2, #240	@ 0xf0
 80019c8:	801a      	strh	r2, [r3, #0]
		break;
 80019ca:	e01d      	b.n	8001a08 <Displ_Orientation+0x7c>
	case Displ_Orientat_90:
		data = ILI9XXX_MADCTL_90DEG;
 80019cc:	23e8      	movs	r3, #232	@ 0xe8
 80019ce:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_WIDTH;
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <Displ_Orientation+0x98>)
 80019d2:	22f0      	movs	r2, #240	@ 0xf0
 80019d4:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 80019d6:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <Displ_Orientation+0x9c>)
 80019d8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019dc:	801a      	strh	r2, [r3, #0]
		break;
 80019de:	e013      	b.n	8001a08 <Displ_Orientation+0x7c>
	case Displ_Orientat_180:
		data = ILI9XXX_MADCTL_180DEG;
 80019e0:	2348      	movs	r3, #72	@ 0x48
 80019e2:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_HEIGHT;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <Displ_Orientation+0x98>)
 80019e6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019ea:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <Displ_Orientation+0x9c>)
 80019ee:	22f0      	movs	r2, #240	@ 0xf0
 80019f0:	801a      	strh	r2, [r3, #0]
		break;
 80019f2:	e009      	b.n	8001a08 <Displ_Orientation+0x7c>
	case Displ_Orientat_270:
		data = ILI9XXX_MADCTL_270DEG;
 80019f4:	2328      	movs	r3, #40	@ 0x28
 80019f6:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_WIDTH;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <Displ_Orientation+0x98>)
 80019fa:	22f0      	movs	r2, #240	@ 0xf0
 80019fc:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <Displ_Orientation+0x9c>)
 8001a00:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a04:	801a      	strh	r2, [r3, #0]
		break;
 8001a06:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8001a08:	2036      	movs	r0, #54	@ 0x36
 8001a0a:	f7ff fdb7 	bl	800157c <Displ_WriteCommand>
	Dislp_WriteData_Single(data);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fddb 	bl	80015cc <Dislp_WriteData_Single>
	current_orientation = orientation; //stores active orientation into a global variable for touch routines
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <Displ_Orientation+0xa0>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	7013      	strb	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000698 	.word	0x20000698
 8001a28:	20000696 	.word	0x20000696
 8001a2c:	20000694 	.word	0x20000694

08001a30 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <HAL_SPI_ErrorCallback+0x24>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d102      	bne.n	8001a48 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable = 1;
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_SPI_ErrorCallback+0x28>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
	}
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40013000 	.word	0x40013000
 8001a58:	20000008 	.word	0x20000008

08001a5c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <HAL_SPI_TxCpltCallback+0x24>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d104      	bne.n	8001a78 <HAL_SPI_TxCpltCallback+0x1c>
		Displ_SpiAvailable = 1;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_SPI_TxCpltCallback+0x28>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]

#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
 8001a74:	f012 faa2 	bl	8013fbc <DisplayDriver_TransferCompleteCallback>
#endif
		//spiDmaTransferComplete = 0;
	}
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40013000 	.word	0x40013000
 8001a84:	20000008 	.word	0x20000008

08001a88 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t Displ_BackLight(uint8_t cmd) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2b51      	cmp	r3, #81	@ 0x51
 8001a96:	d00a      	beq.n	8001aae <Displ_BackLight+0x26>
 8001a98:	2b51      	cmp	r3, #81	@ 0x51
 8001a9a:	dc16      	bgt.n	8001aca <Displ_BackLight+0x42>
 8001a9c:	2b46      	cmp	r3, #70	@ 0x46
 8001a9e:	d008      	beq.n	8001ab2 <Displ_BackLight+0x2a>
 8001aa0:	2b46      	cmp	r3, #70	@ 0x46
 8001aa2:	dc12      	bgt.n	8001aca <Displ_BackLight+0x42>
 8001aa4:	2b30      	cmp	r3, #48	@ 0x30
 8001aa6:	d00a      	beq.n	8001abe <Displ_BackLight+0x36>
 8001aa8:	2b31      	cmp	r3, #49	@ 0x31
 8001aaa:	d002      	beq.n	8001ab2 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8001aac:	e00d      	b.n	8001aca <Displ_BackLight+0x42>
		__NOP();
 8001aae:	bf00      	nop
		break;
 8001ab0:	e00c      	b.n	8001acc <Displ_BackLight+0x44>
		LED_H();
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <Displ_BackLight+0x58>)
 8001ab8:	f003 fd6a 	bl	8005590 <HAL_GPIO_WritePin>
		break;
 8001abc:	e006      	b.n	8001acc <Displ_BackLight+0x44>
		LED_L();
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4807      	ldr	r0, [pc, #28]	@ (8001ae0 <Displ_BackLight+0x58>)
 8001ac4:	f003 fd64 	bl	8005590 <HAL_GPIO_WritePin>
		break;
 8001ac8:	e000      	b.n	8001acc <Displ_BackLight+0x44>
		break;
 8001aca:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	LED_H();
 8001acc:	2201      	movs	r2, #1
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <Displ_BackLight+0x58>)
 8001ad2:	f003 fd5d 	bl	8005590 <HAL_GPIO_WritePin>
	return 0;
 8001ad6:	2300      	movs	r3, #0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	42020000 	.word	0x42020000

08001ae4 <touchgfxDisplayDriverTransmitActive>:
 * @brief	TouchGFX integration: returns status of
 * 			communication to the display
 * @return	1 = there is a transmission running
 * 			0 = no transmission
 *********************************************************/
int touchgfxDisplayDriverTransmitActive() {
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	// using the flag indicating SPI port availability
	// already used to drive communication via DMA
	return (!Displ_SpiAvailable);
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <touchgfxDisplayDriverTransmitActive+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008

08001b08 <touchgfxDisplayDriverTransmitBlock>:
/*********************************************************
 * @brief	TouchGFX integration: write to display the
 * 			block indicated by parameters
 *********************************************************/
void touchgfxDisplayDriverTransmitBlock(const uint8_t *pixels, uint16_t x,
		uint16_t y, uint16_t w, uint16_t h) {
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	817b      	strh	r3, [r7, #10]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	813b      	strh	r3, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
	//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001b22:	897a      	ldrh	r2, [r7, #10]
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29c      	uxth	r4, r3
 8001b2e:	893a      	ldrh	r2, [r7, #8]
 8001b30:	8c3b      	ldrh	r3, [r7, #32]
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8939      	ldrh	r1, [r7, #8]
 8001b3c:	8978      	ldrh	r0, [r7, #10]
 8001b3e:	4622      	mov	r2, r4
 8001b40:	f7ff fec2 	bl	80018c8 <Displ_SetAddressWindow>
	Displ_WriteData((uint8_t*) pixels, ((w * h) << 1), 1);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	8c3a      	ldrh	r2, [r7, #32]
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4619      	mov	r1, r3
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fd62 	bl	800161c <Displ_WriteData>
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}

08001b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_Init+0x50>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_Init+0x50>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f002 f9d0 	bl	8003f16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b76:	f005 f859 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <HAL_Init+0x54>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <HAL_Init+0x58>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_Init+0x5c>)
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b90:	2004      	movs	r0, #4
 8001b92:	f002 f9f3 	bl	8003f7c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b96:	2004      	movs	r0, #4
 8001b98:	f7ff f900 	bl	8000d9c <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e002      	b.n	8001bac <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba6:	f7fe fec7 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	46020c00 	.word	0x46020c00
 8001bb8:	0802e09c 	.word	0x0802e09c
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000010 	.word	0x20000010
 8001be4:	200006a0 	.word	0x200006a0

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	200006a0 	.word	0x200006a0

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000010 	.word	0x20000010

08001c48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <HAL_GetREVID+0x18>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	b29b      	uxth	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e0044000 	.word	0xe0044000

08001c64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	601a      	str	r2, [r3, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <LL_ADC_SetResolution+0x3c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d104      	bne.n	8001cec <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f023 020c 	bic.w	r2, r3, #12
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	46021000 	.word	0x46021000

08001d0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3360      	adds	r3, #96	@ 0x60
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3360      	adds	r3, #96	@ 0x60
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3360      	adds	r3, #96	@ 0x60
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	601a      	str	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3360      	adds	r3, #96	@ 0x60
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3360      	adds	r3, #96	@ 0x60
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e2e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d002      	beq.n	8001e4e <LL_ADC_SetGainCompensation+0x32>
 8001e48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_SetGainCompensation+0x34>
 8001e4e:	2200      	movs	r2, #0
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2107      	movs	r1, #7
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	401a      	ands	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f84 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d020      	beq.n	8001f1e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3330      	adds	r3, #48	@ 0x30
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	4413      	add	r3, r2
 8001eee:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	211f      	movs	r1, #31
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 011f 	and.w	r1, r3, #31
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	431a      	orrs	r2, r3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001f1c:	e02b      	b.n	8001f76 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	210f      	movs	r1, #15
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d104      	bne.n	8001f46 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	e010      	b.n	8001f68 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	613b      	str	r3, [r7, #16]
  return result;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	f001 011f 	and.w	r1, r1, #31
 8001f6e:	408b      	lsls	r3, r1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	46021000 	.word	0x46021000

08001f88 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	e015      	b.n	8001fd8 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	60fb      	str	r3, [r7, #12]
  return result;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e003      	b.n	8001fce <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	401a      	ands	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002020:	b480      	push	{r7}
 8002022:	b08b      	sub	sp, #44	@ 0x2c
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a2d      	ldr	r2, [pc, #180]	@ (80020e4 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d042      	beq.n	80020ba <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <LL_ADC_SetChannelSamplingTime+0x28>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	f003 021f 	and.w	r2, r3, #31
 8002046:	e011      	b.n	800206c <LL_ADC_SetChannelSamplingTime+0x4c>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	617b      	str	r3, [r7, #20]
  return result;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800205e:	2320      	movs	r3, #32
 8002060:	e003      	b.n	800206a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	0e5b      	lsrs	r3, r3, #25
 8002070:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	1ad2      	subs	r2, r2, r3
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3314      	adds	r3, #20
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	0e5b      	lsrs	r3, r3, #25
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2107      	movs	r1, #7
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	401a      	ands	r2, r3
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80020b8:	e00e      	b.n	80020d8 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	0219      	lsls	r1, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	400b      	ands	r3, r1
 80020ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020d2:	431a      	orrs	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	615a      	str	r2, [r3, #20]
}
 80020d8:	bf00      	nop
 80020da:	372c      	adds	r7, #44	@ 0x2c
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	46021000 	.word	0x46021000

080020e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0318 	and.w	r3, r3, #24
 800210a:	4908      	ldr	r1, [pc, #32]	@ (800212c <LL_ADC_SetChannelSingleDiff+0x44>)
 800210c:	40d9      	lsrs	r1, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	400b      	ands	r3, r1
 8002112:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002116:	431a      	orrs	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	000fffff 	.word	0x000fffff

08002130 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002140:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6093      	str	r3, [r2, #8]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002168:	d101      	bne.n	800216e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800218c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002190:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021b8:	d101      	bne.n	80021be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002204:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002208:	f043 0202 	orr.w	r2, r3, #2
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <LL_ADC_IsEnabled+0x18>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <LL_ADC_IsEnabled+0x1a>
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d101      	bne.n	800225a <LL_ADC_IsDisableOngoing+0x18>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_ADC_IsDisableOngoing+0x1a>
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800227c:	f043 0204 	orr.w	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d101      	bne.n	80022a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d101      	bne.n	80022ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e2b3      	b.n	8002864 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a8b      	ldr	r2, [pc, #556]	@ (8002538 <HAL_ADC_Init+0x25c>)
 800230a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe fb2f 	bl	8000978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff11 	bl	8002154 <LL_ADC_IsDeepPowerDownEnabled>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fef7 	bl	8002130 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff2c 	bl	80021a4 <LL_ADC_IsInternalRegulatorEnabled>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d115      	bne.n	800237e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff10 	bl	800217c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800235c:	4b77      	ldr	r3, [pc, #476]	@ (800253c <HAL_ADC_Init+0x260>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	4a77      	ldr	r2, [pc, #476]	@ (8002540 <HAL_ADC_Init+0x264>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	3301      	adds	r3, #1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002370:	e002      	b.n	8002378 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3b01      	subs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff0e 	bl	80021a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10e      	bne.n	80023ac <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff6d 	bl	8002290 <LL_ADC_REG_IsConversionOngoing>
 80023b6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 8244 	bne.w	800284e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 8240 	bne.w	800284e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023d2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff1a 	bl	800221c <LL_ADC_IsEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d140      	bne.n	8002470 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a51      	ldr	r2, [pc, #324]	@ (8002538 <HAL_ADC_Init+0x25c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d028      	beq.n	800244a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a51      	ldr	r2, [pc, #324]	@ (8002544 <HAL_ADC_Init+0x268>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d109      	bne.n	8002416 <HAL_ADC_Init+0x13a>
 8002402:	4850      	ldr	r0, [pc, #320]	@ (8002544 <HAL_ADC_Init+0x268>)
 8002404:	f7ff ff0a 	bl	800221c <LL_ADC_IsEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf0c      	ite	eq
 800240e:	2301      	moveq	r3, #1
 8002410:	2300      	movne	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	e008      	b.n	8002428 <HAL_ADC_Init+0x14c>
 8002416:	4848      	ldr	r0, [pc, #288]	@ (8002538 <HAL_ADC_Init+0x25c>)
 8002418:	f7ff ff00 	bl	800221c <LL_ADC_IsEnabled>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d021      	beq.n	8002470 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a44      	ldr	r2, [pc, #272]	@ (8002544 <HAL_ADC_Init+0x268>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_ADC_Init+0x15e>
 8002436:	4a44      	ldr	r2, [pc, #272]	@ (8002548 <HAL_ADC_Init+0x26c>)
 8002438:	e000      	b.n	800243c <HAL_ADC_Init+0x160>
 800243a:	4a44      	ldr	r2, [pc, #272]	@ (800254c <HAL_ADC_Init+0x270>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7ff fc0e 	bl	8001c64 <LL_ADC_SetCommonClock>
 8002448:	e012      	b.n	8002470 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f7ff fc39 	bl	8001ccc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800245a:	4b3c      	ldr	r3, [pc, #240]	@ (800254c <HAL_ADC_Init+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800246a:	4938      	ldr	r1, [pc, #224]	@ (800254c <HAL_ADC_Init+0x270>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a30      	ldr	r2, [pc, #192]	@ (8002538 <HAL_ADC_Init+0x25c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d010      	beq.n	800249c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002480:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002486:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800248c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002494:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002496:	4313      	orrs	r3, r2
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	e030      	b.n	80024fe <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7f1b      	ldrb	r3, [r3, #28]
 80024a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024a8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024aa:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d002      	beq.n	80024ba <HAL_ADC_Init+0x1de>
 80024b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024b8:	e000      	b.n	80024bc <HAL_ADC_Init+0x1e0>
 80024ba:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80024bc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80024c2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da04      	bge.n	80024d6 <HAL_ADC_Init+0x1fa>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024d4:	e001      	b.n	80024da <HAL_ADC_Init+0x1fe>
 80024d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80024da:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4918      	ldr	r1, [pc, #96]	@ (8002544 <HAL_ADC_Init+0x268>)
 80024e2:	428b      	cmp	r3, r1
 80024e4:	d103      	bne.n	80024ee <HAL_ADC_Init+0x212>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ec:	e003      	b.n	80024f6 <HAL_ADC_Init+0x21a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024f4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80024f6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d12f      	bne.n	8002568 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <HAL_ADC_Init+0x25c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	3b01      	subs	r3, #1
 8002518:	045b      	lsls	r3, r3, #17
 800251a:	6a3a      	ldr	r2, [r7, #32]
 800251c:	4313      	orrs	r3, r2
 800251e:	623b      	str	r3, [r7, #32]
 8002520:	e022      	b.n	8002568 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	e018      	b.n	8002568 <HAL_ADC_Init+0x28c>
 8002536:	bf00      	nop
 8002538:	46021000 	.word	0x46021000
 800253c:	20000004 	.word	0x20000004
 8002540:	053e2d63 	.word	0x053e2d63
 8002544:	42028000 	.word	0x42028000
 8002548:	42028308 	.word	0x42028308
 800254c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a92      	ldr	r2, [pc, #584]	@ (80027b8 <HAL_ADC_Init+0x4dc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d018      	beq.n	80025a4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002586:	4313      	orrs	r3, r2
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	4313      	orrs	r3, r2
 800258c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	4b89      	ldr	r3, [pc, #548]	@ (80027bc <HAL_ADC_Init+0x4e0>)
 8002596:	4013      	ands	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	430b      	orrs	r3, r1
 80025a0:	60d3      	str	r3, [r2, #12]
 80025a2:	e031      	b.n	8002608 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b8:	4313      	orrs	r3, r2
 80025ba:	6a3a      	ldr	r2, [r7, #32]
 80025bc:	4313      	orrs	r3, r2
 80025be:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	4b7e      	ldr	r3, [pc, #504]	@ (80027c0 <HAL_ADC_Init+0x4e4>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	6a39      	ldr	r1, [r7, #32]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a6a      	ldr	r2, [pc, #424]	@ (80027b8 <HAL_ADC_Init+0x4dc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	f000 8093 	beq.w	800273a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fe39 	bl	8002290 <LL_ADC_REG_IsConversionOngoing>
 800261e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fe46 	bl	80022b6 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d161      	bne.n	80026f6 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d15e      	bne.n	80026f6 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7f1b      	ldrb	r3, [r3, #28]
 800263c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4960      	ldr	r1, [pc, #384]	@ (80027c4 <HAL_ADC_Init+0x4e8>)
 8002644:	428b      	cmp	r3, r1
 8002646:	d102      	bne.n	800264e <HAL_ADC_Init+0x372>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	e002      	b.n	8002654 <HAL_ADC_Init+0x378>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002652:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002654:	4313      	orrs	r3, r2
 8002656:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	6a39      	ldr	r1, [r7, #32]
 800266c:	430b      	orrs	r3, r1
 800266e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f7ff fbca 	bl	8001e1c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800268e:	2b01      	cmp	r3, #1
 8002690:	d11e      	bne.n	80026d0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002696:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	4b4a      	ldr	r3, [pc, #296]	@ (80027c8 <HAL_ADC_Init+0x4ec>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80026a6:	0411      	lsls	r1, r2, #16
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80026be:	0892      	lsrs	r2, r2, #2
 80026c0:	430a      	orrs	r2, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	611a      	str	r2, [r3, #16]
 80026ce:	e007      	b.n	80026e0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d10c      	bne.n	8002718 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	f023 010f 	bic.w	r1, r3, #15
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
 8002716:	e007      	b.n	8002728 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 020f 	bic.w	r2, r2, #15
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800272c:	f023 0303 	bic.w	r3, r3, #3
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002738:	e092      	b.n	8002860 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002740:	2b01      	cmp	r3, #1
 8002742:	d111      	bne.n	8002768 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800274c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002752:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002758:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	4313      	orrs	r3, r2
 800275e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_ADC_Init+0x4f0>)
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	69f9      	ldr	r1, [r7, #28]
 8002778:	430b      	orrs	r3, r1
 800277a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002784:	461a      	mov	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f7ff fb6b 	bl	8001e62 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	461a      	mov	r2, r3
 8002796:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800279a:	f7ff fb62 	bl	8001e62 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d114      	bne.n	80027d0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f062 020f 	orn	r2, r2, #15
 80027b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80027b6:	e024      	b.n	8002802 <HAL_ADC_Init+0x526>
 80027b8:	46021000 	.word	0x46021000
 80027bc:	fff0c013 	.word	0xfff0c013
 80027c0:	ffde800d 	.word	0xffde800d
 80027c4:	42028000 	.word	0x42028000
 80027c8:	fc00f81e 	.word	0xfc00f81e
 80027cc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027d8:	d113      	bne.n	8002802 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	f003 031c 	and.w	r3, r3, #28
 80027ec:	f06f 020f 	mvn.w	r2, #15
 80027f0:	fa02 f103 	lsl.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_ADC_Init+0x590>)
 800280a:	4013      	ands	r3, r2
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	429a      	cmp	r2, r3
 8002810:	d10b      	bne.n	800282a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800281c:	f023 0303 	bic.w	r3, r3, #3
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002828:	e01a      	b.n	8002860 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800282e:	f023 0312 	bic.w	r3, r3, #18
 8002832:	f043 0210 	orr.w	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800284c:	e008      	b.n	8002860 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002864:	4618      	mov	r0, r3
 8002866:	3728      	adds	r7, #40	@ 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	833ffff3 	.word	0x833ffff3

08002870 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0a2      	sub	sp, #136	@ 0x88
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fd05 	bl	8002290 <LL_ADC_REG_IsConversionOngoing>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 80e9 	bne.w	8002a60 <HAL_ADC_Start_DMA+0x1f0>
  {
    __HAL_LOCK(hadc);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ADC_Start_DMA+0x2c>
 8002898:	2302      	movs	r3, #2
 800289a:	e0e6      	b.n	8002a6a <HAL_ADC_Start_DMA+0x1fa>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 ff91 	bl	80037cc <ADC_Enable>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028b0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 80ce 	bne.w	8002a56 <HAL_ADC_Start_DMA+0x1e6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a68      	ldr	r2, [pc, #416]	@ (8002a74 <HAL_ADC_Start_DMA+0x204>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d010      	beq.n	80028fa <HAL_ADC_Start_DMA+0x8a>
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_ADC_Start_DMA+0x82>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e8:	f023 0206 	bic.w	r2, r3, #6
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028f0:	e006      	b.n	8002900 <HAL_ADC_Start_DMA+0x90>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028f8:	e002      	b.n	8002900 <HAL_ADC_Start_DMA+0x90>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a5c      	ldr	r2, [pc, #368]	@ (8002a78 <HAL_ADC_Start_DMA+0x208>)
 8002906:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a5b      	ldr	r2, [pc, #364]	@ (8002a7c <HAL_ADC_Start_DMA+0x20c>)
 800290e:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a5a      	ldr	r2, [pc, #360]	@ (8002a80 <HAL_ADC_Start_DMA+0x210>)
 8002916:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	221c      	movs	r2, #28
 800291e:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0210 	orr.w	r2, r2, #16
 8002936:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a74 <HAL_ADC_Start_DMA+0x204>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d107      	bne.n	8002952 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d04f      	beq.n	8002a00 <HAL_ADC_Start_DMA+0x190>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002966:	2b00      	cmp	r3, #0
 8002968:	d046      	beq.n	80029f8 <HAL_ADC_Start_DMA+0x188>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d040      	beq.n	80029f8 <HAL_ADC_Start_DMA+0x188>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fadb 	bl	8004f40 <HAL_DMAEx_List_GetNodeConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_ADC_Start_DMA+0x124>
            {
              return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e06a      	b.n	8002a6a <HAL_ADC_Start_DMA+0x1fa>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002996:	2b02      	cmp	r3, #2
 8002998:	d104      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x134>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029a2:	e00a      	b.n	80029ba <HAL_ADC_Start_DMA+0x14a>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d104      	bne.n	80029b4 <HAL_ADC_Start_DMA+0x144>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029b2:	e002      	b.n	80029ba <HAL_ADC_Start_DMA+0x14a>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029c6:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fa14 	bl	8004e18 <HAL_DMAEx_List_Start_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80029f6:	e028      	b.n	8002a4a <HAL_ADC_Start_DMA+0x1da>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80029fe:	e024      	b.n	8002a4a <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d104      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x1a4>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a12:	e00c      	b.n	8002a2e <HAL_ADC_Start_DMA+0x1be>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d104      	bne.n	8002a28 <HAL_ADC_Start_DMA+0x1b8>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_Start_DMA+0x1be>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3340      	adds	r3, #64	@ 0x40
 8002a38:	4619      	mov	r1, r3
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a40:	f001 fd12 	bl	8004468 <HAL_DMA_Start_IT>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fc0a 	bl	8002268 <LL_ADC_REG_StartConversion>
 8002a54:	e007      	b.n	8002a66 <HAL_ADC_Start_DMA+0x1f6>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8002a5e:	e002      	b.n	8002a66 <HAL_ADC_Start_DMA+0x1f6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8002a66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3788      	adds	r7, #136	@ 0x88
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	46021000 	.word	0x46021000
 8002a78:	0800396b 	.word	0x0800396b
 8002a7c:	08003a43 	.word	0x08003a43
 8002a80:	08003a5f 	.word	0x08003a5f

08002a84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b0bc      	sub	sp, #240	@ 0xf0
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4aa8      	ldr	r2, [pc, #672]	@ (8002d68 <HAL_ADC_ConfigChannel+0x2bc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d103      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d102      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x36>
 8002adc:	2302      	movs	r3, #2
 8002ade:	f000 be6d 	b.w	80037bc <HAL_ADC_ConfigChannel+0xd10>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fbce 	bl	8002290 <LL_ADC_REG_IsConversionOngoing>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 864d 	bne.w	8003796 <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a99      	ldr	r2, [pc, #612]	@ (8002d68 <HAL_ADC_ConfigChannel+0x2bc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f000 83ea 	beq.w	80032dc <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x7a>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2201      	movs	r2, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	e01d      	b.n	8002b62 <HAL_ADC_ConfigChannel+0xb6>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 8002b3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 8002b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e004      	b.n	8002b58 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	69d1      	ldr	r1, [r2, #28]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f7ff f9a3 	bl	8001ec8 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fb82 	bl	8002290 <LL_ADC_REG_IsConversionOngoing>
 8002b8c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fb8e 	bl	80022b6 <LL_ADC_INJ_IsConversionOngoing>
 8002b9a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 81ed 	bne.w	8002f82 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 81e8 	bne.w	8002f82 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f7ff fa2e 	bl	8002020 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d046      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bf6:	f7ff f889 	bl	8001d0c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6919      	ldr	r1, [r3, #16]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7ff f8b7 	bl	8001d7a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	7e9b      	ldrb	r3, [r3, #26]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11e      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x17e>
 8002c24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x180>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f7ff f8da 	bl	8001de6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x19c>
 8002c42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c46:	e000      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x19e>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f7ff f8b0 	bl	8001db0 <LL_ADC_SetOffsetSignedSaturation>
 8002c50:	e197      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f7ff f8c2 	bl	8001de6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f7ff f89f 	bl	8001db0 <LL_ADC_SetOffsetSignedSaturation>
 8002c72:	e186      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff f867 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1f4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff f85c 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	e01e      	b.n	8002cde <HAL_ADC_ConfigChannel+0x232>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f851 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002cbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8002cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x24a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	e018      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x27c>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002d12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e004      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d107      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2300      	movs	r3, #0
 8002d36:	2100      	movs	r1, #0
 8002d38:	f7fe ffe8 	bl	8001d0c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f803 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x2c0>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2101      	movs	r1, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fff8 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	f003 021f 	and.w	r2, r3, #31
 8002d66:	e020      	b.n	8002daa <HAL_ADC_ConfigChannel+0x2fe>
 8002d68:	46021000 	.word	0x46021000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe ffeb 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e004      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x316>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	e018      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x348>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e004      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	2101      	movs	r1, #1
 8002e04:	f7fe ff82 	bl	8001d0c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe ff9d 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10a      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x388>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe ff92 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	e01e      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x3c6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe ff87 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002e62:	2320      	movs	r3, #32
 8002e64:	e004      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x3de>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	e018      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x410>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e004      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2102      	movs	r1, #2
 8002ecc:	f7fe ff1e 	bl	8001d0c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe ff39 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x450>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2103      	movs	r1, #3
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ff2e 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	f003 021f 	and.w	r2, r3, #31
 8002efa:	e01a      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x486>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2103      	movs	r1, #3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe ff23 	bl	8001d4e <LL_ADC_GetOffsetChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002f22:	2320      	movs	r3, #32
 8002f24:	e004      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002f26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x49e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	e011      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x4c2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f5a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e003      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d107      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	f7fe fec5 	bl	8001d0c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff f948 	bl	800221c <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 840e 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6819      	ldr	r1, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f7ff f8a1 	bl	80020e8 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fae:	f040 80d6 	bne.w	800315e <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x52a>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	bf94      	ite	ls
 8002fce:	2301      	movls	r3, #1
 8002fd0:	2300      	movhi	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e019      	b.n	800300a <HAL_ADC_ConfigChannel+0x55e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002fe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fe6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e003      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002ff2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b09      	cmp	r3, #9
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04d      	beq.n	80030aa <HAL_ADC_ConfigChannel+0x5fe>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_ADC_ConfigChannel+0x57e>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0e9b      	lsrs	r3, r3, #26
 8003020:	3301      	adds	r3, #1
 8003022:	069b      	lsls	r3, r3, #26
 8003024:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003028:	e015      	b.n	8003056 <HAL_ADC_ConfigChannel+0x5aa>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800303c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e003      	b.n	800304e <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8003046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	069b      	lsls	r3, r3, #26
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x5ca>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	3301      	adds	r3, #1
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	e017      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x5fa>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003086:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e003      	b.n	800309a <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8003092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	e04e      	b.n	8003148 <HAL_ADC_ConfigChannel+0x69c>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x61a>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0e9b      	lsrs	r3, r3, #26
 80030bc:	3301      	adds	r3, #1
 80030be:	069b      	lsls	r3, r3, #26
 80030c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030c4:	e015      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x646>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e003      	b.n	80030ea <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 80030e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	069b      	lsls	r3, r3, #26
 80030ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x666>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	0e9b      	lsrs	r3, r3, #26
 8003104:	3301      	adds	r3, #1
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2101      	movs	r1, #1
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	e017      	b.n	8003142 <HAL_ADC_ConfigChannel+0x696>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e003      	b.n	8003136 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 800312e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2101      	movs	r1, #1
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	4313      	orrs	r3, r2
 8003144:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003148:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	461a      	mov	r2, r3
 8003156:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800315a:	f7fe ff61 	bl	8002020 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f280 8324 	bge.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a99      	ldr	r2, [pc, #612]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x6ca>
 8003172:	4b99      	ldr	r3, [pc, #612]	@ (80033d8 <HAL_ADC_ConfigChannel+0x92c>)
 8003174:	e000      	b.n	8003178 <HAL_ADC_ConfigChannel+0x6cc>
 8003176:	4b99      	ldr	r3, [pc, #612]	@ (80033dc <HAL_ADC_ConfigChannel+0x930>)
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fd99 	bl	8001cb0 <LL_ADC_GetCommonPathInternalCh>
 800317e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a93      	ldr	r2, [pc, #588]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d109      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x6f4>
 800318c:	4891      	ldr	r0, [pc, #580]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 800318e:	f7ff f845 	bl	800221c <LL_ADC_IsEnabled>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e008      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x706>
 80031a0:	488f      	ldr	r0, [pc, #572]	@ (80033e0 <HAL_ADC_ConfigChannel+0x934>)
 80031a2:	f7ff f83b 	bl	800221c <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8088 	beq.w	80032c8 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a89      	ldr	r2, [pc, #548]	@ (80033e4 <HAL_ADC_ConfigChannel+0x938>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d132      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d12c      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a80      	ldr	r2, [pc, #512]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d005      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x738>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a80      	ldr	r2, [pc, #512]	@ (80033e0 <HAL_ADC_ConfigChannel+0x934>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	f040 82e3 	bne.w	80037aa <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7a      	ldr	r2, [pc, #488]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x746>
 80031ee:	4a7a      	ldr	r2, [pc, #488]	@ (80033d8 <HAL_ADC_ConfigChannel+0x92c>)
 80031f0:	e000      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x748>
 80031f2:	4a7a      	ldr	r2, [pc, #488]	@ (80033dc <HAL_ADC_ConfigChannel+0x930>)
 80031f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7fe fd43 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003204:	4b78      	ldr	r3, [pc, #480]	@ (80033e8 <HAL_ADC_ConfigChannel+0x93c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	4a78      	ldr	r2, [pc, #480]	@ (80033ec <HAL_ADC_ConfigChannel+0x940>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003216:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003218:	e002      	b.n	8003220 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	3b01      	subs	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f9      	bne.n	800321a <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003226:	e2c0      	b.n	80037aa <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a70      	ldr	r2, [pc, #448]	@ (80033f0 <HAL_ADC_ConfigChannel+0x944>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d121      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11b      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a64      	ldr	r2, [pc, #400]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d005      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x7a8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a64      	ldr	r2, [pc, #400]	@ (80033e0 <HAL_ADC_ConfigChannel+0x934>)
 800324e:	4293      	cmp	r3, r2
 8003250:	f040 82ad 	bne.w	80037ae <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5e      	ldr	r2, [pc, #376]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x7b6>
 800325e:	4a5e      	ldr	r2, [pc, #376]	@ (80033d8 <HAL_ADC_ConfigChannel+0x92c>)
 8003260:	e000      	b.n	8003264 <HAL_ADC_ConfigChannel+0x7b8>
 8003262:	4a5e      	ldr	r2, [pc, #376]	@ (80033dc <HAL_ADC_ConfigChannel+0x930>)
 8003264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003268:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7fe fd0b 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003274:	e29b      	b.n	80037ae <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5e      	ldr	r2, [pc, #376]	@ (80033f4 <HAL_ADC_ConfigChannel+0x948>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 8297 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 8290 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a4f      	ldr	r2, [pc, #316]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d005      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0x7fa>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a50      	ldr	r2, [pc, #320]	@ (80033e0 <HAL_ADC_ConfigChannel+0x934>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	f040 8285 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a4a      	ldr	r2, [pc, #296]	@ (80033d4 <HAL_ADC_ConfigChannel+0x928>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x808>
 80032b0:	4a49      	ldr	r2, [pc, #292]	@ (80033d8 <HAL_ADC_ConfigChannel+0x92c>)
 80032b2:	e000      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x80a>
 80032b4:	4a49      	ldr	r2, [pc, #292]	@ (80033dc <HAL_ADC_ConfigChannel+0x930>)
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fe fce2 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
 80032c6:	e273      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80032da:	e269      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	f000 8191 	beq.w	8003610 <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032f6:	d004      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80032fc:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <HAL_ADC_ConfigChannel+0x94c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d107      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fe3c 	bl	8001f88 <LL_ADC_REG_SetSequencerChAdd>
 8003310:	e0b0      	b.n	8003474 <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	210f      	movs	r1, #15
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	401a      	ands	r2, r3
 800332a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800332e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x896>
 8003336:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	e011      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8ba>
 8003342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 800335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	6839      	ldr	r1, [r7, #0]
 8003368:	6849      	ldr	r1, [r1, #4]
 800336a:	f001 011f 	and.w	r1, r1, #31
 800336e:	408b      	lsls	r3, r1
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	429a      	cmp	r2, r3
 8003386:	d875      	bhi.n	8003474 <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003388:	f7fe fc5e 	bl	8001c48 <HAL_GetREVID>
 800338c:	4603      	mov	r3, r0
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003392:	d866      	bhi.n	8003462 <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003394:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003398:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x90a>
 80033a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2b13      	cmp	r3, #19
 80033ac:	bf8c      	ite	hi
 80033ae:	2301      	movhi	r3, #1
 80033b0:	2300      	movls	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e02b      	b.n	800340e <HAL_ADC_ConfigChannel+0x962>
 80033b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033ba:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	61bb      	str	r3, [r7, #24]
  return result;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e018      	b.n	8003404 <HAL_ADC_ConfigChannel+0x958>
 80033d2:	bf00      	nop
 80033d4:	42028000 	.word	0x42028000
 80033d8:	42028308 	.word	0x42028308
 80033dc:	46021308 	.word	0x46021308
 80033e0:	46021000 	.word	0x46021000
 80033e4:	ce080000 	.word	0xce080000
 80033e8:	20000004 	.word	0x20000004
 80033ec:	053e2d63 	.word	0x053e2d63
 80033f0:	ca040000 	.word	0xca040000
 80033f4:	80000001 	.word	0x80000001
 80033f8:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b13      	cmp	r3, #19
 8003406:	bf8c      	ite	hi
 8003408:	2301      	movhi	r3, #1
 800340a:	2300      	movls	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d027      	beq.n	8003462 <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8003412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003416:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x986>
 800341e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003422:	0e9b      	lsrs	r3, r3, #26
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	3b09      	subs	r3, #9
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	e015      	b.n	800345e <HAL_ADC_ConfigChannel+0x9b2>
 8003432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003436:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	60fb      	str	r3, [r7, #12]
  return result;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 800344a:	2320      	movs	r3, #32
 800344c:	e003      	b.n	8003456 <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3b09      	subs	r3, #9
 8003458:	2201      	movs	r2, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800346e:	4619      	mov	r1, r3
 8003470:	f7fe fd2a 	bl	8001ec8 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	461a      	mov	r2, r3
 800347e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003482:	f7fe fdcd 	bl	8002020 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f280 8190 	bge.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a97      	ldr	r2, [pc, #604]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x9f2>
 800349a:	4b97      	ldr	r3, [pc, #604]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 800349c:	e000      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x9f4>
 800349e:	4b97      	ldr	r3, [pc, #604]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fc05 	bl	8001cb0 <LL_ADC_GetCommonPathInternalCh>
 80034a6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a94      	ldr	r2, [pc, #592]	@ (8003700 <HAL_ADC_ConfigChannel+0xc54>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d126      	bne.n	8003502 <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d120      	bne.n	8003502 <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a8b      	ldr	r2, [pc, #556]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0xa22>
 80034ca:	4a8b      	ldr	r2, [pc, #556]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 80034cc:	e000      	b.n	80034d0 <HAL_ADC_ConfigChannel+0xa24>
 80034ce:	4a8b      	ldr	r2, [pc, #556]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7fe fbd5 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80034e0:	4b88      	ldr	r3, [pc, #544]	@ (8003704 <HAL_ADC_ConfigChannel+0xc58>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	4a88      	ldr	r2, [pc, #544]	@ (8003708 <HAL_ADC_ConfigChannel+0xc5c>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80034f2:	e002      	b.n	80034fa <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f9      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003500:	e067      	b.n	80035d2 <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a81      	ldr	r2, [pc, #516]	@ (800370c <HAL_ADC_ConfigChannel+0xc60>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d116      	bne.n	800353a <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003514:	2b00      	cmp	r3, #0
 8003516:	d110      	bne.n	800353a <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a75      	ldr	r2, [pc, #468]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0xa7a>
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 8003524:	e000      	b.n	8003528 <HAL_ADC_ConfigChannel+0xa7c>
 8003526:	4a75      	ldr	r2, [pc, #468]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7fe fba9 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
 8003538:	e04b      	b.n	80035d2 <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a74      	ldr	r2, [pc, #464]	@ (8003710 <HAL_ADC_ConfigChannel+0xc64>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d116      	bne.n	8003572 <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d110      	bne.n	8003572 <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a67      	ldr	r2, [pc, #412]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0xab2>
 800355a:	4a67      	ldr	r2, [pc, #412]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 800355c:	e000      	b.n	8003560 <HAL_ADC_ConfigChannel+0xab4>
 800355e:	4a67      	ldr	r2, [pc, #412]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003564:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7fe fb8d 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
 8003570:	e02f      	b.n	80035d2 <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a67      	ldr	r2, [pc, #412]	@ (8003714 <HAL_ADC_ConfigChannel+0xc68>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d12a      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d124      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a62      	ldr	r2, [pc, #392]	@ (8003718 <HAL_ADC_ConfigChannel+0xc6c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d11f      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a57      	ldr	r2, [pc, #348]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0xaf4>
 800359c:	4a56      	ldr	r2, [pc, #344]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 800359e:	e000      	b.n	80035a2 <HAL_ADC_ConfigChannel+0xaf6>
 80035a0:	4a56      	ldr	r2, [pc, #344]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fe fb6c 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80035b2:	f7fe fb49 	bl	8001c48 <HAL_GetREVID>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035bc:	d809      	bhi.n	80035d2 <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80035d2:	f7fe fb39 	bl	8001c48 <HAL_GetREVID>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035dc:	f040 80e8 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4d      	ldr	r2, [pc, #308]	@ (800371c <HAL_ADC_ConfigChannel+0xc70>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f040 80e2 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 80db 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800360e:	e0cf      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003618:	d004      	beq.n	8003624 <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800361e:	4a40      	ldr	r2, [pc, #256]	@ (8003720 <HAL_ADC_ConfigChannel+0xc74>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d106      	bne.n	8003632 <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fcde 	bl	8001fee <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f280 80ba 	bge.w	80037b0 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2c      	ldr	r2, [pc, #176]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_ADC_ConfigChannel+0xb9e>
 8003646:	4b2c      	ldr	r3, [pc, #176]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 8003648:	e000      	b.n	800364c <HAL_ADC_ConfigChannel+0xba0>
 800364a:	4b2c      	ldr	r3, [pc, #176]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fb2f 	bl	8001cb0 <LL_ADC_GetCommonPathInternalCh>
 8003652:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a32      	ldr	r2, [pc, #200]	@ (8003724 <HAL_ADC_ConfigChannel+0xc78>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d110      	bne.n	8003682 <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0xbc2>
 800366a:	4a23      	ldr	r2, [pc, #140]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 800366c:	e000      	b.n	8003670 <HAL_ADC_ConfigChannel+0xbc4>
 800366e:	4a23      	ldr	r2, [pc, #140]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003674:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f7fe fb05 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
 8003680:	e06d      	b.n	800375e <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a28      	ldr	r2, [pc, #160]	@ (8003728 <HAL_ADC_ConfigChannel+0xc7c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d110      	bne.n	80036ae <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0xbee>
 8003696:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 8003698:	e000      	b.n	800369c <HAL_ADC_ConfigChannel+0xbf0>
 800369a:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 800369c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f7fe faef 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
 80036ac:	e057      	b.n	800375e <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <HAL_ADC_ConfigChannel+0xc64>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d110      	bne.n	80036da <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0d      	ldr	r2, [pc, #52]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0xc1a>
 80036c2:	4a0d      	ldr	r2, [pc, #52]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 80036c4:	e000      	b.n	80036c8 <HAL_ADC_ConfigChannel+0xc1c>
 80036c6:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <HAL_ADC_ConfigChannel+0xc50>)
 80036c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036cc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7fe fad9 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
 80036d8:	e041      	b.n	800375e <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a0d      	ldr	r2, [pc, #52]	@ (8003714 <HAL_ADC_ConfigChannel+0xc68>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d13c      	bne.n	800375e <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a02      	ldr	r2, [pc, #8]	@ (80036f4 <HAL_ADC_ConfigChannel+0xc48>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d11e      	bne.n	800372c <HAL_ADC_ConfigChannel+0xc80>
 80036ee:	4a02      	ldr	r2, [pc, #8]	@ (80036f8 <HAL_ADC_ConfigChannel+0xc4c>)
 80036f0:	e01d      	b.n	800372e <HAL_ADC_ConfigChannel+0xc82>
 80036f2:	bf00      	nop
 80036f4:	42028000 	.word	0x42028000
 80036f8:	42028308 	.word	0x42028308
 80036fc:	46021308 	.word	0x46021308
 8003700:	b6002000 	.word	0xb6002000
 8003704:	20000004 	.word	0x20000004
 8003708:	053e2d63 	.word	0x053e2d63
 800370c:	ba004000 	.word	0xba004000
 8003710:	80000001 	.word	0x80000001
 8003714:	b2001000 	.word	0xb2001000
 8003718:	46021000 	.word	0x46021000
 800371c:	d7200000 	.word	0xd7200000
 8003720:	80000010 	.word	0x80000010
 8003724:	ce080000 	.word	0xce080000
 8003728:	ca040000 	.word	0xca040000
 800372c:	4a25      	ldr	r2, [pc, #148]	@ (80037c4 <HAL_ADC_ConfigChannel+0xd18>)
 800372e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003732:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7fe faa6 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800373e:	f7fe fa83 	bl	8001c48 <HAL_GetREVID>
 8003742:	4603      	mov	r3, r0
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003748:	d809      	bhi.n	800375e <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800375e:	f7fe fa73 	bl	8001c48 <HAL_GetREVID>
 8003762:	4603      	mov	r3, r0
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003768:	d122      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a16      	ldr	r2, [pc, #88]	@ (80037c8 <HAL_ADC_ConfigChannel+0xd1c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d11d      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d117      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003794:	e00c      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80037a8:	e002      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ae:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80037b8:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 80037bc:	4618      	mov	r0, r3
 80037be:	37f0      	adds	r7, #240	@ 0xf0
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	46021308 	.word	0x46021308
 80037c8:	d7200000 	.word	0xd7200000

080037cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe fd1f 	bl	800221c <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d15a      	bne.n	800389a <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <ADC_Enable+0xd8>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f6:	f043 0210 	orr.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e046      	b.n	800389c <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fcd6 	bl	80021cc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <ADC_Enable+0x66>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1e      	ldr	r2, [pc, #120]	@ (80038a8 <ADC_Enable+0xdc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d033      	beq.n	800389a <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003832:	f7fe f9d9 	bl	8001be8 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003838:	e028      	b.n	800388c <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fcec 	bl	800221c <LL_ADC_IsEnabled>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fcbc 	bl	80021cc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003854:	f7fe f9c8 	bl	8001be8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d914      	bls.n	800388c <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d00d      	beq.n	800388c <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003874:	f043 0210 	orr.w	r2, r3, #16
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d1cf      	bne.n	800383a <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	8000003f 	.word	0x8000003f
 80038a8:	46021000 	.word	0x46021000

080038ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fcc2 	bl	8002242 <LL_ADC_IsDisableOngoing>
 80038be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fca9 	bl	800221c <LL_ADC_IsEnabled>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d047      	beq.n	8003960 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d144      	bne.n	8003960 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030d 	and.w	r3, r3, #13
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10c      	bne.n	80038fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fc83 	bl	80021f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2203      	movs	r2, #3
 80038f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038f6:	f7fe f977 	bl	8001be8 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038fc:	e029      	b.n	8003952 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003902:	f043 0210 	orr.w	r2, r3, #16
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e023      	b.n	8003962 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800391a:	f7fe f965 	bl	8001be8 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d914      	bls.n	8003952 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800393a:	f043 0210 	orr.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e007      	b.n	8003962 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1dc      	bne.n	800391a <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800397c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003980:	2b00      	cmp	r3, #0
 8003982:	d14b      	bne.n	8003a1c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003988:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d021      	beq.n	80039e2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fa7c 	bl	8001ea0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d032      	beq.n	8003a14 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12b      	bne.n	8003a14 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11f      	bne.n	8003a14 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	679a      	str	r2, [r3, #120]	@ 0x78
 80039e0:	e018      	b.n	8003a14 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7fd fbbb 	bl	8001190 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a1a:	e00e      	b.n	8003a3a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff f835 	bl	8002a98 <HAL_ADC_ErrorCallback>
}
 8003a2e:	e004      	b.n	8003a3a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff f817 	bl	8002a84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a7c:	f043 0204 	orr.w	r2, r3, #4
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff f807 	bl	8002a98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <LL_ADC_StartCalibration>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <LL_ADC_StartCalibration+0x4c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00c      	beq.n	8003ac0 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <LL_ADC_StartCalibration+0x50>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	e009      	b.n	8003ad4 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003acc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	46021000 	.word	0x46021000
 8003ae4:	7ffeffc0 	.word	0x7ffeffc0

08003ae8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003afc:	d101      	bne.n	8003b02 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_ADCEx_Calibration_Start+0x1e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e138      	b.n	8003da0 <HAL_ADCEx_Calibration_Start+0x290>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7ff feb8 	bl	80038ac <ADC_Disable>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 811e 	bne.w	8003d88 <HAL_ADCEx_Calibration_Start+0x278>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b54:	f023 0302 	bic.w	r3, r3, #2
 8003b58:	f043 0202 	orr.w	r2, r3, #2
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hadc->Instance == ADC4)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a90      	ldr	r2, [pc, #576]	@ (8003da8 <HAL_ADCEx_Calibration_Start+0x298>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d150      	bne.n	8003c0c <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0203 	bic.w	r2, r2, #3
 8003b90:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff73 	bl	8003a94 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bae:	e014      	b.n	8003bda <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4a7c      	ldr	r2, [pc, #496]	@ (8003dac <HAL_ADCEx_Calibration_Start+0x29c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d90d      	bls.n	8003bda <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc2:	f023 0312 	bic.w	r3, r3, #18
 8003bc6:	f043 0210 	orr.w	r2, r3, #16
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	679a      	str	r2, [r3, #120]	@ 0x78

          __HAL_UNLOCK(hadc);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0e2      	b.n	8003da0 <HAL_ADCEx_Calibration_Start+0x290>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff82 	bl	8003ae8 <LL_ADC_IsCalibrationOnGoing>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e2      	bne.n	8003bb0 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68d9      	ldr	r1, [r3, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c0a:	e0b4      	b.n	8003d76 <HAL_ADCEx_Calibration_Start+0x266>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003c0c:	4b68      	ldr	r3, [pc, #416]	@ (8003db0 <HAL_ADCEx_Calibration_Start+0x2a0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003c16:	4b66      	ldr	r3, [pc, #408]	@ (8003db0 <HAL_ADCEx_Calibration_Start+0x2a0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f240 4255 	movw	r2, #1109	@ 0x455
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d012      	beq.n	8003c50 <HAL_ADCEx_Calibration_Start+0x140>
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f240 4276 	movw	r2, #1142	@ 0x476
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00d      	beq.n	8003c50 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	f240 4281 	movw	r2, #1153	@ 0x481
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_ADCEx_Calibration_Start+0x138>
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f240 4282 	movw	r2, #1154	@ 0x482
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d172      	bne.n	8003d2e <HAL_ADCEx_Calibration_Start+0x21e>
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c4e:	d36e      	bcc.n	8003d2e <HAL_ADCEx_Calibration_Start+0x21e>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fdbb 	bl	80037cc <ADC_Enable>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (tmp_hal_status == HAL_OK)
 8003c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 8088 	bne.w	8003d76 <HAL_ADCEx_Calibration_Start+0x266>
        {
          /* Use a Data Memory Barrier instruction to avoid synchronization issues when accessing ADC registers */
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 6210 	orr.w	r2, r2, #150994944	@ 0x9000000
 8003c78:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c7a:	f3bf 8f5f 	dmb	sy
}
 8003c7e:	bf00      	nop
          __DMB();
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003c88:	b2d9      	uxtb	r1, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b49      	ldr	r3, [pc, #292]	@ (8003db4 <HAL_ADCEx_Calibration_Start+0x2a4>)
 8003c90:	430b      	orrs	r3, r1
 8003c92:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("dmb 0xF":::"memory");
 8003c96:	f3bf 8f5f 	dmb	sy
}
 8003c9a:	bf00      	nop
          __DMB();
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003cac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fdfb 	bl	80038ac <ADC_Disable>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8003cc2:	d109      	bne.n	8003cd8 <HAL_ADCEx_Calibration_Start+0x1c8>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	4b3b      	ldr	r3, [pc, #236]	@ (8003db8 <HAL_ADCEx_Calibration_Start+0x2a8>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd6:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ce2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cee:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cf0:	e014      	b.n	8003d1c <HAL_ADCEx_Calibration_Start+0x20c>
          {
            wait_loop_index++;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8003dac <HAL_ADCEx_Calibration_Start+0x29c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d90d      	bls.n	8003d1c <HAL_ADCEx_Calibration_Start+0x20c>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d04:	f023 0312 	bic.w	r3, r3, #18
 8003d08:	f043 0210 	orr.w	r2, r3, #16
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	679a      	str	r2, [r3, #120]	@ 0x78

              __HAL_UNLOCK(hadc);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

              return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e041      	b.n	8003da0 <HAL_ADCEx_Calibration_Start+0x290>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fee1 	bl	8003ae8 <LL_ADC_IsCalibrationOnGoing>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e2      	bne.n	8003cf2 <HAL_ADCEx_Calibration_Start+0x1e2>
        if (tmp_hal_status == HAL_OK)
 8003d2c:	e023      	b.n	8003d76 <HAL_ADCEx_Calibration_Start+0x266>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fead 	bl	8003a94 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d3a:	e014      	b.n	8003d66 <HAL_ADCEx_Calibration_Start+0x256>
        {
          wait_loop_index++;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4a19      	ldr	r2, [pc, #100]	@ (8003dac <HAL_ADCEx_Calibration_Start+0x29c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d90d      	bls.n	8003d66 <HAL_ADCEx_Calibration_Start+0x256>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d4e:	f023 0312 	bic.w	r3, r3, #18
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	679a      	str	r2, [r3, #120]	@ 0x78

            __HAL_UNLOCK(hadc);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

            return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e01c      	b.n	8003da0 <HAL_ADCEx_Calibration_Start+0x290>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff febc 	bl	8003ae8 <LL_ADC_IsCalibrationOnGoing>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e2      	bne.n	8003d3c <HAL_ADCEx_Calibration_Start+0x22c>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	679a      	str	r2, [r3, #120]	@ 0x78
 8003d86:	e005      	b.n	8003d94 <HAL_ADCEx_Calibration_Start+0x284>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d8c:	f043 0210 	orr.w	r2, r3, #16
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8003d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3728      	adds	r7, #40	@ 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	46021000 	.word	0x46021000
 8003dac:	022b6b7f 	.word	0x022b6b7f
 8003db0:	e0044000 	.word	0xe0044000
 8003db4:	03021100 	.word	0x03021100
 8003db8:	7ffeffc0 	.word	0x7ffeffc0

08003dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dee:	4a04      	ldr	r2, [pc, #16]	@ (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	60d3      	str	r3, [r2, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e08:	4b04      	ldr	r3, [pc, #16]	@ (8003e1c <__NVIC_GetPriorityGrouping+0x18>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	f003 0307 	and.w	r3, r3, #7
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	db0b      	blt.n	8003e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	f003 021f 	and.w	r2, r3, #31
 8003e38:	4907      	ldr	r1, [pc, #28]	@ (8003e58 <__NVIC_EnableIRQ+0x38>)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2001      	movs	r0, #1
 8003e42:	fa00 f202 	lsl.w	r2, r0, r2
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	e000e100 	.word	0xe000e100

08003e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	db0a      	blt.n	8003e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	490c      	ldr	r1, [pc, #48]	@ (8003ea8 <__NVIC_SetPriority+0x4c>)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	0112      	lsls	r2, r2, #4
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	440b      	add	r3, r1
 8003e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e84:	e00a      	b.n	8003e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4908      	ldr	r1, [pc, #32]	@ (8003eac <__NVIC_SetPriority+0x50>)
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	3b04      	subs	r3, #4
 8003e94:	0112      	lsls	r2, r2, #4
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	440b      	add	r3, r1
 8003e9a:	761a      	strb	r2, [r3, #24]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000e100 	.word	0xe000e100
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	@ 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f1c3 0307 	rsb	r3, r3, #7
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf28      	it	cs
 8003ece:	2304      	movcs	r3, #4
 8003ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d902      	bls.n	8003ee0 <NVIC_EncodePriority+0x30>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3b03      	subs	r3, #3
 8003ede:	e000      	b.n	8003ee2 <NVIC_EncodePriority+0x32>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43d9      	mvns	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f08:	4313      	orrs	r3, r2
         );
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3724      	adds	r7, #36	@ 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ff4c 	bl	8003dbc <__NVIC_SetPriorityGrouping>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f3a:	f7ff ff63 	bl	8003e04 <__NVIC_GetPriorityGrouping>
 8003f3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	6978      	ldr	r0, [r7, #20]
 8003f46:	f7ff ffb3 	bl	8003eb0 <NVIC_EncodePriority>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff82 	bl	8003e5c <__NVIC_SetPriority>
}
 8003f58:	bf00      	nop
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff56 	bl	8003e20 <__NVIC_EnableIRQ>
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d844      	bhi.n	8004014 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fb3 	.word	0x08003fb3
 8003f94:	08003fd1 	.word	0x08003fd1
 8003f98:	08003ff3 	.word	0x08003ff3
 8003f9c:	08004015 	.word	0x08004015
 8003fa0:	08003fa5 	.word	0x08003fa5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6013      	str	r3, [r2, #0]
      break;
 8003fb0:	e031      	b.n	8004016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fc4:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003fc6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003fce:	e022      	b.n	8004016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003fd0:	4b14      	ldr	r3, [pc, #80]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003fdc:	4b12      	ldr	r3, [pc, #72]	@ (8004028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fe2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003fe6:	4a10      	ldr	r2, [pc, #64]	@ (8004028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003fe8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003ff0:	e011      	b.n	8004016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8004024 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004004:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004008:	4a07      	ldr	r2, [pc, #28]	@ (8004028 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800400a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800400e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004012:	e000      	b.n	8004016 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004014:	bf00      	nop
  }
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010
 8004028:	46020c00 	.word	0x46020c00

0800402c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e054      	b.n	80040e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7f5b      	ldrb	r3, [r3, #29]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fd3e 	bl	8000ad0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	791b      	ldrb	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a22      	ldr	r2, [pc, #136]	@ (80040f0 <HAL_CRC_Init+0xc4>)
 8004068:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0218 	bic.w	r2, r2, #24
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	e00c      	b.n	8004096 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	461a      	mov	r2, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f834 	bl	80040f4 <HAL_CRCEx_Polynomial_Set>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e028      	b.n	80040e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	795b      	ldrb	r3, [r3, #5]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	611a      	str	r2, [r3, #16]
 80040a8:	e004      	b.n	80040b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6912      	ldr	r2, [r2, #16]
 80040b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	04c11db7 	.word	0x04c11db7

080040f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004104:	231f      	movs	r3, #31
 8004106:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
 8004116:	e063      	b.n	80041e0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004118:	bf00      	nop
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1e5a      	subs	r2, r3, #1
 800411e:	613a      	str	r2, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <HAL_CRCEx_Polynomial_Set+0x44>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b18      	cmp	r3, #24
 800413c:	d846      	bhi.n	80041cc <HAL_CRCEx_Polynomial_Set+0xd8>
 800413e:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	080041d3 	.word	0x080041d3
 8004148:	080041cd 	.word	0x080041cd
 800414c:	080041cd 	.word	0x080041cd
 8004150:	080041cd 	.word	0x080041cd
 8004154:	080041cd 	.word	0x080041cd
 8004158:	080041cd 	.word	0x080041cd
 800415c:	080041cd 	.word	0x080041cd
 8004160:	080041cd 	.word	0x080041cd
 8004164:	080041c1 	.word	0x080041c1
 8004168:	080041cd 	.word	0x080041cd
 800416c:	080041cd 	.word	0x080041cd
 8004170:	080041cd 	.word	0x080041cd
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041cd 	.word	0x080041cd
 800417c:	080041cd 	.word	0x080041cd
 8004180:	080041cd 	.word	0x080041cd
 8004184:	080041b5 	.word	0x080041b5
 8004188:	080041cd 	.word	0x080041cd
 800418c:	080041cd 	.word	0x080041cd
 8004190:	080041cd 	.word	0x080041cd
 8004194:	080041cd 	.word	0x080041cd
 8004198:	080041cd 	.word	0x080041cd
 800419c:	080041cd 	.word	0x080041cd
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	080041a9 	.word	0x080041a9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d913      	bls.n	80041d6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041b2:	e010      	b.n	80041d6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	d90f      	bls.n	80041da <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041be:	e00c      	b.n	80041da <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	d90b      	bls.n	80041de <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041ca:	e008      	b.n	80041de <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
        break;
 80041d0:	e006      	b.n	80041e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041d2:	bf00      	nop
 80041d4:	e004      	b.n	80041e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041de:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 0118 	bic.w	r1, r3, #24
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7fd fce6 	bl	8001be8 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0db      	b.n	80043e0 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6e      	ldr	r2, [pc, #440]	@ (80043e8 <HAL_DMA_Init+0x1d8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f000 809f 	beq.w	8004372 <HAL_DMA_Init+0x162>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6c      	ldr	r2, [pc, #432]	@ (80043ec <HAL_DMA_Init+0x1dc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	f000 8099 	beq.w	8004372 <HAL_DMA_Init+0x162>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6a      	ldr	r2, [pc, #424]	@ (80043f0 <HAL_DMA_Init+0x1e0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	f000 8093 	beq.w	8004372 <HAL_DMA_Init+0x162>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a68      	ldr	r2, [pc, #416]	@ (80043f4 <HAL_DMA_Init+0x1e4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	f000 808d 	beq.w	8004372 <HAL_DMA_Init+0x162>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a66      	ldr	r2, [pc, #408]	@ (80043f8 <HAL_DMA_Init+0x1e8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f000 8087 	beq.w	8004372 <HAL_DMA_Init+0x162>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a64      	ldr	r2, [pc, #400]	@ (80043fc <HAL_DMA_Init+0x1ec>)
 800426a:	4293      	cmp	r3, r2
 800426c:	f000 8081 	beq.w	8004372 <HAL_DMA_Init+0x162>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a62      	ldr	r2, [pc, #392]	@ (8004400 <HAL_DMA_Init+0x1f0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d07b      	beq.n	8004372 <HAL_DMA_Init+0x162>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a61      	ldr	r2, [pc, #388]	@ (8004404 <HAL_DMA_Init+0x1f4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d076      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a5f      	ldr	r2, [pc, #380]	@ (8004408 <HAL_DMA_Init+0x1f8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d071      	beq.n	8004372 <HAL_DMA_Init+0x162>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a5e      	ldr	r2, [pc, #376]	@ (800440c <HAL_DMA_Init+0x1fc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d06c      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a5c      	ldr	r2, [pc, #368]	@ (8004410 <HAL_DMA_Init+0x200>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d067      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004414 <HAL_DMA_Init+0x204>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d062      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a59      	ldr	r2, [pc, #356]	@ (8004418 <HAL_DMA_Init+0x208>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d05d      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a58      	ldr	r2, [pc, #352]	@ (800441c <HAL_DMA_Init+0x20c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d058      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a56      	ldr	r2, [pc, #344]	@ (8004420 <HAL_DMA_Init+0x210>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d053      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a55      	ldr	r2, [pc, #340]	@ (8004424 <HAL_DMA_Init+0x214>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d04e      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a53      	ldr	r2, [pc, #332]	@ (8004428 <HAL_DMA_Init+0x218>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d049      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a52      	ldr	r2, [pc, #328]	@ (800442c <HAL_DMA_Init+0x21c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d044      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a50      	ldr	r2, [pc, #320]	@ (8004430 <HAL_DMA_Init+0x220>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d03f      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004434 <HAL_DMA_Init+0x224>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d03a      	beq.n	8004372 <HAL_DMA_Init+0x162>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a4d      	ldr	r2, [pc, #308]	@ (8004438 <HAL_DMA_Init+0x228>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d035      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a4c      	ldr	r2, [pc, #304]	@ (800443c <HAL_DMA_Init+0x22c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d030      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a4a      	ldr	r2, [pc, #296]	@ (8004440 <HAL_DMA_Init+0x230>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02b      	beq.n	8004372 <HAL_DMA_Init+0x162>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a49      	ldr	r2, [pc, #292]	@ (8004444 <HAL_DMA_Init+0x234>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d026      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a47      	ldr	r2, [pc, #284]	@ (8004448 <HAL_DMA_Init+0x238>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d021      	beq.n	8004372 <HAL_DMA_Init+0x162>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a46      	ldr	r2, [pc, #280]	@ (800444c <HAL_DMA_Init+0x23c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d01c      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a44      	ldr	r2, [pc, #272]	@ (8004450 <HAL_DMA_Init+0x240>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d017      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a43      	ldr	r2, [pc, #268]	@ (8004454 <HAL_DMA_Init+0x244>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d012      	beq.n	8004372 <HAL_DMA_Init+0x162>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a41      	ldr	r2, [pc, #260]	@ (8004458 <HAL_DMA_Init+0x248>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00d      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a40      	ldr	r2, [pc, #256]	@ (800445c <HAL_DMA_Init+0x24c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d008      	beq.n	8004372 <HAL_DMA_Init+0x162>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a3e      	ldr	r2, [pc, #248]	@ (8004460 <HAL_DMA_Init+0x250>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <HAL_DMA_Init+0x162>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3d      	ldr	r2, [pc, #244]	@ (8004464 <HAL_DMA_Init+0x254>)
 8004370:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0206 	orr.w	r2, r2, #6
 8004390:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004392:	e00f      	b.n	80043b4 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004394:	f7fd fc28 	bl	8001be8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d908      	bls.n	80043b4 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2210      	movs	r2, #16
 80043a6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2203      	movs	r2, #3
 80043ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e015      	b.n	80043e0 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e8      	bne.n	8004394 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 faa8 	bl	8004918 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40020050 	.word	0x40020050
 80043ec:	50020050 	.word	0x50020050
 80043f0:	400200d0 	.word	0x400200d0
 80043f4:	500200d0 	.word	0x500200d0
 80043f8:	40020150 	.word	0x40020150
 80043fc:	50020150 	.word	0x50020150
 8004400:	400201d0 	.word	0x400201d0
 8004404:	500201d0 	.word	0x500201d0
 8004408:	40020250 	.word	0x40020250
 800440c:	50020250 	.word	0x50020250
 8004410:	400202d0 	.word	0x400202d0
 8004414:	500202d0 	.word	0x500202d0
 8004418:	40020350 	.word	0x40020350
 800441c:	50020350 	.word	0x50020350
 8004420:	400203d0 	.word	0x400203d0
 8004424:	500203d0 	.word	0x500203d0
 8004428:	40020450 	.word	0x40020450
 800442c:	50020450 	.word	0x50020450
 8004430:	400204d0 	.word	0x400204d0
 8004434:	500204d0 	.word	0x500204d0
 8004438:	40020550 	.word	0x40020550
 800443c:	50020550 	.word	0x50020550
 8004440:	400205d0 	.word	0x400205d0
 8004444:	500205d0 	.word	0x500205d0
 8004448:	40020650 	.word	0x40020650
 800444c:	50020650 	.word	0x50020650
 8004450:	400206d0 	.word	0x400206d0
 8004454:	500206d0 	.word	0x500206d0
 8004458:	40020750 	.word	0x40020750
 800445c:	50020750 	.word	0x50020750
 8004460:	400207d0 	.word	0x400207d0
 8004464:	500207d0 	.word	0x500207d0

08004468 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e04f      	b.n	8004520 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_DMA_Start_IT+0x26>
 800448a:	2302      	movs	r3, #2
 800448c:	e048      	b.n	8004520 <HAL_DMA_Start_IT+0xb8>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d136      	bne.n	8004510 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa08 	bl	80048cc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80044ca:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044fa:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e007      	b.n	8004520 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	@ 0x40
 8004514:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e019      	b.n	800456e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d004      	beq.n	8004550 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e00e      	b.n	800456e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2204      	movs	r2, #4
 8004554:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800458a:	f023 030f 	bic.w	r3, r3, #15
 800458e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004598:	3b50      	subs	r3, #80	@ 0x50
 800459a:	09db      	lsrs	r3, r3, #7
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2201      	movs	r2, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 813b 	beq.w	8004830 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d011      	beq.n	80045ec <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004610:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004616:	f043 0202 	orr.w	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004642:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d011      	beq.n	8004682 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004674:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	f043 0208 	orr.w	r2, r3, #8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d04c      	beq.n	8004760 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d045      	beq.n	8004760 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046dc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d12e      	bne.n	8004748 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046f8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0202 	orr.w	r2, r2, #2
 8004708:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004722:	2201      	movs	r2, #1
 8004724:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d07a      	beq.n	8004834 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	4798      	blx	r3
        }

        return;
 8004746:	e075      	b.n	8004834 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2205      	movs	r2, #5
 800474c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d039      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d032      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a8:	2201      	movs	r2, #1
 80047aa:	731a      	strb	r2, [r3, #12]
 80047ac:	e008      	b.n	80047c0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80047c8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d025      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0202 	orr.w	r2, r2, #2
 80047f8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004812:	2201      	movs	r2, #1
 8004814:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
 800482e:	e002      	b.n	8004836 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004834:	bf00      	nop
    }
  }
}
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e02b      	b.n	80048c0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004870:	f023 030f 	bic.w	r3, r3, #15
 8004874:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487e:	3b50      	subs	r3, #80	@ 0x50
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2201      	movs	r2, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f003 0311 	and.w	r3, r3, #17
 800489e:	2b11      	cmp	r3, #17
 80048a0:	d106      	bne.n	80048b0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	e006      	b.n	80048be <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	401a      	ands	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	b291      	uxth	r1, r2
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80048f8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	430a      	orrs	r2, r1
 8004938:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a53      	ldr	r2, [pc, #332]	@ (8004aa4 <DMA_Init+0x18c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	f000 80a0 	beq.w	8004a9e <DMA_Init+0x186>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a51      	ldr	r2, [pc, #324]	@ (8004aa8 <DMA_Init+0x190>)
 8004964:	4293      	cmp	r3, r2
 8004966:	f000 809a 	beq.w	8004a9e <DMA_Init+0x186>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a4f      	ldr	r2, [pc, #316]	@ (8004aac <DMA_Init+0x194>)
 8004970:	4293      	cmp	r3, r2
 8004972:	f000 8094 	beq.w	8004a9e <DMA_Init+0x186>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ab0 <DMA_Init+0x198>)
 800497c:	4293      	cmp	r3, r2
 800497e:	f000 808e 	beq.w	8004a9e <DMA_Init+0x186>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab4 <DMA_Init+0x19c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	f000 8088 	beq.w	8004a9e <DMA_Init+0x186>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a49      	ldr	r2, [pc, #292]	@ (8004ab8 <DMA_Init+0x1a0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	f000 8082 	beq.w	8004a9e <DMA_Init+0x186>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a47      	ldr	r2, [pc, #284]	@ (8004abc <DMA_Init+0x1a4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d07c      	beq.n	8004a9e <DMA_Init+0x186>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a45      	ldr	r2, [pc, #276]	@ (8004ac0 <DMA_Init+0x1a8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d077      	beq.n	8004a9e <DMA_Init+0x186>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a44      	ldr	r2, [pc, #272]	@ (8004ac4 <DMA_Init+0x1ac>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d072      	beq.n	8004a9e <DMA_Init+0x186>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a42      	ldr	r2, [pc, #264]	@ (8004ac8 <DMA_Init+0x1b0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d06d      	beq.n	8004a9e <DMA_Init+0x186>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a41      	ldr	r2, [pc, #260]	@ (8004acc <DMA_Init+0x1b4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d068      	beq.n	8004a9e <DMA_Init+0x186>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ad0 <DMA_Init+0x1b8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d063      	beq.n	8004a9e <DMA_Init+0x186>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3e      	ldr	r2, [pc, #248]	@ (8004ad4 <DMA_Init+0x1bc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d05e      	beq.n	8004a9e <DMA_Init+0x186>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad8 <DMA_Init+0x1c0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d059      	beq.n	8004a9e <DMA_Init+0x186>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a3b      	ldr	r2, [pc, #236]	@ (8004adc <DMA_Init+0x1c4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d054      	beq.n	8004a9e <DMA_Init+0x186>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a39      	ldr	r2, [pc, #228]	@ (8004ae0 <DMA_Init+0x1c8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d04f      	beq.n	8004a9e <DMA_Init+0x186>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a38      	ldr	r2, [pc, #224]	@ (8004ae4 <DMA_Init+0x1cc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d04a      	beq.n	8004a9e <DMA_Init+0x186>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a36      	ldr	r2, [pc, #216]	@ (8004ae8 <DMA_Init+0x1d0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d045      	beq.n	8004a9e <DMA_Init+0x186>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a35      	ldr	r2, [pc, #212]	@ (8004aec <DMA_Init+0x1d4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d040      	beq.n	8004a9e <DMA_Init+0x186>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a33      	ldr	r2, [pc, #204]	@ (8004af0 <DMA_Init+0x1d8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d03b      	beq.n	8004a9e <DMA_Init+0x186>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a32      	ldr	r2, [pc, #200]	@ (8004af4 <DMA_Init+0x1dc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d036      	beq.n	8004a9e <DMA_Init+0x186>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a30      	ldr	r2, [pc, #192]	@ (8004af8 <DMA_Init+0x1e0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d031      	beq.n	8004a9e <DMA_Init+0x186>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004afc <DMA_Init+0x1e4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d02c      	beq.n	8004a9e <DMA_Init+0x186>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2d      	ldr	r2, [pc, #180]	@ (8004b00 <DMA_Init+0x1e8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d027      	beq.n	8004a9e <DMA_Init+0x186>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <DMA_Init+0x1ec>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <DMA_Init+0x186>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b08 <DMA_Init+0x1f0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01d      	beq.n	8004a9e <DMA_Init+0x186>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a29      	ldr	r2, [pc, #164]	@ (8004b0c <DMA_Init+0x1f4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <DMA_Init+0x186>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a27      	ldr	r2, [pc, #156]	@ (8004b10 <DMA_Init+0x1f8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <DMA_Init+0x186>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a26      	ldr	r2, [pc, #152]	@ (8004b14 <DMA_Init+0x1fc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <DMA_Init+0x186>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a24      	ldr	r2, [pc, #144]	@ (8004b18 <DMA_Init+0x200>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <DMA_Init+0x186>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a23      	ldr	r2, [pc, #140]	@ (8004b1c <DMA_Init+0x204>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <DMA_Init+0x186>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a21      	ldr	r2, [pc, #132]	@ (8004b20 <DMA_Init+0x208>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d142      	bne.n	8004b24 <DMA_Init+0x20c>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e041      	b.n	8004b26 <DMA_Init+0x20e>
 8004aa2:	bf00      	nop
 8004aa4:	40020050 	.word	0x40020050
 8004aa8:	50020050 	.word	0x50020050
 8004aac:	400200d0 	.word	0x400200d0
 8004ab0:	500200d0 	.word	0x500200d0
 8004ab4:	40020150 	.word	0x40020150
 8004ab8:	50020150 	.word	0x50020150
 8004abc:	400201d0 	.word	0x400201d0
 8004ac0:	500201d0 	.word	0x500201d0
 8004ac4:	40020250 	.word	0x40020250
 8004ac8:	50020250 	.word	0x50020250
 8004acc:	400202d0 	.word	0x400202d0
 8004ad0:	500202d0 	.word	0x500202d0
 8004ad4:	40020350 	.word	0x40020350
 8004ad8:	50020350 	.word	0x50020350
 8004adc:	400203d0 	.word	0x400203d0
 8004ae0:	500203d0 	.word	0x500203d0
 8004ae4:	40020450 	.word	0x40020450
 8004ae8:	50020450 	.word	0x50020450
 8004aec:	400204d0 	.word	0x400204d0
 8004af0:	500204d0 	.word	0x500204d0
 8004af4:	40020550 	.word	0x40020550
 8004af8:	50020550 	.word	0x50020550
 8004afc:	400205d0 	.word	0x400205d0
 8004b00:	500205d0 	.word	0x500205d0
 8004b04:	40020650 	.word	0x40020650
 8004b08:	50020650 	.word	0x50020650
 8004b0c:	400206d0 	.word	0x400206d0
 8004b10:	500206d0 	.word	0x500206d0
 8004b14:	40020750 	.word	0x40020750
 8004b18:	50020750 	.word	0x50020750
 8004b1c:	400207d0 	.word	0x400207d0
 8004b20:	500207d0 	.word	0x500207d0
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d012      	beq.n	8004b50 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b32:	3b01      	subs	r3, #1
 8004b34:	051b      	lsls	r3, r3, #20
 8004b36:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004b3a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	3b01      	subs	r3, #1
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004b48:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b82:	f040 80b0 	bne.w	8004ce6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a82      	ldr	r2, [pc, #520]	@ (8004d94 <DMA_Init+0x47c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	f000 80a0 	beq.w	8004cd2 <DMA_Init+0x3ba>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a80      	ldr	r2, [pc, #512]	@ (8004d98 <DMA_Init+0x480>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	f000 809a 	beq.w	8004cd2 <DMA_Init+0x3ba>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8004d9c <DMA_Init+0x484>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	f000 8094 	beq.w	8004cd2 <DMA_Init+0x3ba>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a7c      	ldr	r2, [pc, #496]	@ (8004da0 <DMA_Init+0x488>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f000 808e 	beq.w	8004cd2 <DMA_Init+0x3ba>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a7a      	ldr	r2, [pc, #488]	@ (8004da4 <DMA_Init+0x48c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	f000 8088 	beq.w	8004cd2 <DMA_Init+0x3ba>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a78      	ldr	r2, [pc, #480]	@ (8004da8 <DMA_Init+0x490>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	f000 8082 	beq.w	8004cd2 <DMA_Init+0x3ba>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a76      	ldr	r2, [pc, #472]	@ (8004dac <DMA_Init+0x494>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d07c      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a74      	ldr	r2, [pc, #464]	@ (8004db0 <DMA_Init+0x498>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d077      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	@ (8004db4 <DMA_Init+0x49c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d072      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a71      	ldr	r2, [pc, #452]	@ (8004db8 <DMA_Init+0x4a0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d06d      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a70      	ldr	r2, [pc, #448]	@ (8004dbc <DMA_Init+0x4a4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d068      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc0 <DMA_Init+0x4a8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d063      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc4 <DMA_Init+0x4ac>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d05e      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc8 <DMA_Init+0x4b0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d059      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6a      	ldr	r2, [pc, #424]	@ (8004dcc <DMA_Init+0x4b4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d054      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <DMA_Init+0x4b8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d04f      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a67      	ldr	r2, [pc, #412]	@ (8004dd4 <DMA_Init+0x4bc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d04a      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a65      	ldr	r2, [pc, #404]	@ (8004dd8 <DMA_Init+0x4c0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d045      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a64      	ldr	r2, [pc, #400]	@ (8004ddc <DMA_Init+0x4c4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d040      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a62      	ldr	r2, [pc, #392]	@ (8004de0 <DMA_Init+0x4c8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d03b      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	@ (8004de4 <DMA_Init+0x4cc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d036      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5f      	ldr	r2, [pc, #380]	@ (8004de8 <DMA_Init+0x4d0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d031      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a5e      	ldr	r2, [pc, #376]	@ (8004dec <DMA_Init+0x4d4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d02c      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004df0 <DMA_Init+0x4d8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d027      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5b      	ldr	r2, [pc, #364]	@ (8004df4 <DMA_Init+0x4dc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a59      	ldr	r2, [pc, #356]	@ (8004df8 <DMA_Init+0x4e0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a58      	ldr	r2, [pc, #352]	@ (8004dfc <DMA_Init+0x4e4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a56      	ldr	r2, [pc, #344]	@ (8004e00 <DMA_Init+0x4e8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a55      	ldr	r2, [pc, #340]	@ (8004e04 <DMA_Init+0x4ec>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a53      	ldr	r2, [pc, #332]	@ (8004e08 <DMA_Init+0x4f0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a52      	ldr	r2, [pc, #328]	@ (8004e0c <DMA_Init+0x4f4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <DMA_Init+0x3ba>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a50      	ldr	r2, [pc, #320]	@ (8004e10 <DMA_Init+0x4f8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <DMA_Init+0x3be>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <DMA_Init+0x3c0>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e008      	b.n	8004cf8 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cee:	d103      	bne.n	8004cf8 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cf6:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cfe:	4b45      	ldr	r3, [pc, #276]	@ (8004e14 <DMA_Init+0x4fc>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	68f9      	ldr	r1, [r7, #12]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2200      	movs	r2, #0
 8004d12:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a36      	ldr	r2, [pc, #216]	@ (8004df4 <DMA_Init+0x4dc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <DMA_Init+0x44c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a35      	ldr	r2, [pc, #212]	@ (8004df8 <DMA_Init+0x4e0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <DMA_Init+0x44c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a33      	ldr	r2, [pc, #204]	@ (8004dfc <DMA_Init+0x4e4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <DMA_Init+0x44c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a32      	ldr	r2, [pc, #200]	@ (8004e00 <DMA_Init+0x4e8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <DMA_Init+0x44c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a30      	ldr	r2, [pc, #192]	@ (8004e04 <DMA_Init+0x4ec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <DMA_Init+0x44c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e08 <DMA_Init+0x4f0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <DMA_Init+0x44c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2d      	ldr	r2, [pc, #180]	@ (8004e0c <DMA_Init+0x4f4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <DMA_Init+0x44c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e10 <DMA_Init+0x4f8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <DMA_Init+0x450>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <DMA_Init+0x452>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40020050 	.word	0x40020050
 8004d98:	50020050 	.word	0x50020050
 8004d9c:	400200d0 	.word	0x400200d0
 8004da0:	500200d0 	.word	0x500200d0
 8004da4:	40020150 	.word	0x40020150
 8004da8:	50020150 	.word	0x50020150
 8004dac:	400201d0 	.word	0x400201d0
 8004db0:	500201d0 	.word	0x500201d0
 8004db4:	40020250 	.word	0x40020250
 8004db8:	50020250 	.word	0x50020250
 8004dbc:	400202d0 	.word	0x400202d0
 8004dc0:	500202d0 	.word	0x500202d0
 8004dc4:	40020350 	.word	0x40020350
 8004dc8:	50020350 	.word	0x50020350
 8004dcc:	400203d0 	.word	0x400203d0
 8004dd0:	500203d0 	.word	0x500203d0
 8004dd4:	40020450 	.word	0x40020450
 8004dd8:	50020450 	.word	0x50020450
 8004ddc:	400204d0 	.word	0x400204d0
 8004de0:	500204d0 	.word	0x500204d0
 8004de4:	40020550 	.word	0x40020550
 8004de8:	50020550 	.word	0x50020550
 8004dec:	400205d0 	.word	0x400205d0
 8004df0:	500205d0 	.word	0x500205d0
 8004df4:	40020650 	.word	0x40020650
 8004df8:	50020650 	.word	0x50020650
 8004dfc:	400206d0 	.word	0x400206d0
 8004e00:	500206d0 	.word	0x500206d0
 8004e04:	40020750 	.word	0x40020750
 8004e08:	50020750 	.word	0x50020750
 8004e0c:	400207d0 	.word	0x400207d0
 8004e10:	500207d0 	.word	0x500207d0
 8004e14:	3cc03180 	.word	0x3cc03180

08004e18 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_DMAEx_List_Start_IT+0x16>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e082      	b.n	8004f38 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e38:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e44:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d005      	beq.n	8004e58 <HAL_DMAEx_List_Start_IT+0x40>
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d16a      	bne.n	8004f28 <HAL_DMAEx_List_Start_IT+0x110>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d067      	beq.n	8004f28 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d157      	bne.n	8004f14 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_DMAEx_List_Start_IT+0x5a>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e062      	b.n	8004f38 <HAL_DMAEx_List_Start_IT+0x120>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e86:	2202      	movs	r2, #2
 8004e88:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004ea6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ebe:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ed6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f107 010c 	add.w	r1, r7, #12
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f94b 	bl	8005180 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	0c0b      	lsrs	r3, r1, #16
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f08:	4013      	ands	r3, r2
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e007      	b.n	8004f38 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2240      	movs	r2, #64	@ 0x40
 8004f2c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e004      	b.n	8004f64 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f805 	bl	8004f6c <DMA_List_GetNodeConfig>

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0208 	and.w	r2, r3, #8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0203 	and.w	r2, r3, #3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fba:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8004fc4:	0d1b      	lsrs	r3, r3, #20
 8004fc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fca:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b66      	ldr	r3, [pc, #408]	@ (800517c <DMA_List_GetNodeConfig+0x210>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005006:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e013      	b.n	800503a <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	e002      	b.n	800503a <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005098:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800509e:	e002      	b.n	80050a6 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d04a      	beq.n	8005158 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050cc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80050ce:	89fa      	ldrh	r2, [r7, #14]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050e0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80050e2:	89fa      	ldrh	r2, [r7, #14]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f8:	425a      	negs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	425a      	negs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800511a:	89fa      	ldrh	r2, [r7, #14]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8005128:	89fa      	ldrh	r2, [r7, #14]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513e:	425a      	negs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	da11      	bge.n	8005170 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005150:	425a      	negs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8005156:	e00b      	b.n	8005170 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	0c002000 	.word	0x0c002000

08005180 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4a0d      	ldr	r2, [pc, #52]	@ (80051d8 <DMA_List_GetCLLRNodeInfo+0x58>)
 80051a2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00f      	beq.n	80051ca <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80051b0:	e00b      	b.n	80051ca <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a08      	ldr	r2, [pc, #32]	@ (80051dc <DMA_List_GetCLLRNodeInfo+0x5c>)
 80051bc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2205      	movs	r2, #5
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	fe010000 	.word	0xfe010000
 80051dc:	f8010000 	.word	0xf8010000

080051e0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b089      	sub	sp, #36	@ 0x24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80051f2:	e1ba      	b.n	800556a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	2101      	movs	r1, #1
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 81aa 	beq.w	8005564 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a55      	ldr	r2, [pc, #340]	@ (8005368 <HAL_GPIO_Init+0x188>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d15d      	bne.n	80052d4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800521e:	2201      	movs	r2, #1
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	4013      	ands	r3, r2
 800522c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0201 	and.w	r2, r3, #1
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	4313      	orrs	r3, r2
 8005240:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005248:	4a48      	ldr	r2, [pc, #288]	@ (800536c <HAL_GPIO_Init+0x18c>)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005250:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005252:	4a46      	ldr	r2, [pc, #280]	@ (800536c <HAL_GPIO_Init+0x18c>)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3208      	adds	r2, #8
 8005266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	220f      	movs	r2, #15
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	4013      	ands	r3, r2
 8005280:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	220b      	movs	r2, #11
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	4313      	orrs	r3, r2
 8005294:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	08da      	lsrs	r2, r3, #3
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3208      	adds	r2, #8
 800529e:	69f9      	ldr	r1, [r7, #28]
 80052a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	2203      	movs	r2, #3
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	2202      	movs	r2, #2
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e067      	b.n	80053a4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x104>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b12      	cmp	r3, #18
 80052e2:	d145      	bne.n	8005370 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	08da      	lsrs	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3208      	adds	r2, #8
 80052ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	220f      	movs	r2, #15
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	4013      	ands	r3, r2
 8005306:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	4313      	orrs	r3, r2
 8005320:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	08da      	lsrs	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3208      	adds	r2, #8
 800532a:	69f9      	ldr	r1, [r7, #28]
 800532c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	2203      	movs	r2, #3
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	4013      	ands	r3, r2
 8005346:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 0203 	and.w	r2, r3, #3
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	4313      	orrs	r3, r2
 800535c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e01e      	b.n	80053a4 <HAL_GPIO_Init+0x1c4>
 8005366:	bf00      	nop
 8005368:	46020000 	.word	0x46020000
 800536c:	0802e1ec 	.word	0x0802e1ec
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	2203      	movs	r2, #3
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	43db      	mvns	r3, r3
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	4013      	ands	r3, r2
 8005386:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 0203 	and.w	r2, r3, #3
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	4313      	orrs	r3, r2
 800539c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d00b      	beq.n	80053c4 <HAL_GPIO_Init+0x1e4>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d007      	beq.n	80053c4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053b8:	2b11      	cmp	r3, #17
 80053ba:	d003      	beq.n	80053c4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b12      	cmp	r3, #18
 80053c2:	d130      	bne.n	8005426 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	2203      	movs	r2, #3
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	4013      	ands	r3, r2
 80053da:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80053fa:	2201      	movs	r2, #1
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	4013      	ands	r3, r2
 8005408:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	f003 0201 	and.w	r2, r3, #1
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	4313      	orrs	r3, r2
 800541e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d017      	beq.n	800545e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	2203      	movs	r2, #3
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	4013      	ands	r3, r2
 8005444:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	4313      	orrs	r3, r2
 8005456:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d07c      	beq.n	8005564 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800546a:	4a47      	ldr	r2, [pc, #284]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	3318      	adds	r3, #24
 8005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005476:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	220f      	movs	r2, #15
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	4013      	ands	r3, r2
 800548c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0a9a      	lsrs	r2, r3, #10
 8005492:	4b3e      	ldr	r3, [pc, #248]	@ (800558c <HAL_GPIO_Init+0x3ac>)
 8005494:	4013      	ands	r3, r2
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	f002 0203 	and.w	r2, r2, #3
 800549c:	00d2      	lsls	r2, r2, #3
 800549e:	4093      	lsls	r3, r2
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80054a6:	4938      	ldr	r1, [pc, #224]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	3318      	adds	r3, #24
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80054b4:	4b34      	ldr	r3, [pc, #208]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	43db      	mvns	r3, r3
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	4013      	ands	r3, r2
 80054c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80054d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80054de:	4b2a      	ldr	r3, [pc, #168]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005502:	4a21      	ldr	r2, [pc, #132]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005508:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	43db      	mvns	r3, r3
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	4013      	ands	r3, r2
 8005518:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800552e:	4a16      	ldr	r2, [pc, #88]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005536:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	43db      	mvns	r3, r3
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	4013      	ands	r3, r2
 8005546:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800555c:	4a0a      	ldr	r2, [pc, #40]	@ (8005588 <HAL_GPIO_Init+0x3a8>)
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	3301      	adds	r3, #1
 8005568:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f ae3d 	bne.w	80051f4 <HAL_GPIO_Init+0x14>
  }
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	3724      	adds	r7, #36	@ 0x24
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	46022000 	.word	0x46022000
 800558c:	002f7f7f 	.word	0x002f7f7f

08005590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	807b      	strh	r3, [r7, #2]
 800559c:	4613      	mov	r3, r2
 800559e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055a0:	787b      	ldrb	r3, [r7, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80055ac:	e002      	b.n	80055b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80055ae:	887a      	ldrh	r2, [r7, #2]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055d2:	887a      	ldrh	r2, [r7, #2]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4013      	ands	r3, r2
 80055d8:	041a      	lsls	r2, r3, #16
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	43d9      	mvns	r1, r3
 80055de:	887b      	ldrh	r3, [r7, #2]
 80055e0:	400b      	ands	r3, r1
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	619a      	str	r2, [r3, #24]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e08d      	b.n	8005722 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb fa7a 	bl	8000b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	@ 0x24
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005644:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005654:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	e006      	b.n	800567c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800567a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d108      	bne.n	8005696 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	e007      	b.n	80056a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80056b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69d9      	ldr	r1, [r3, #28]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b20      	cmp	r3, #32
 800573e:	d138      	bne.n	80057b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800574a:	2302      	movs	r3, #2
 800574c:	e032      	b.n	80057b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2224      	movs	r2, #36	@ 0x24
 800575a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800577c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d139      	bne.n	800584a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e033      	b.n	800584c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	@ 0x24
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005812:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800584a:	2302      	movs	r3, #2
  }
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005864:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e007      	b.n	8005886 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005876:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 0204 	bic.w	r2, r3, #4
 800587e:	4905      	ldr	r1, [pc, #20]	@ (8005894 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40030400 	.word	0x40030400

08005898 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800589c:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_ICACHE_Enable+0x1c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a04      	ldr	r2, [pc, #16]	@ (80058b4 <HAL_ICACHE_Enable+0x1c>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40030400 	.word	0x40030400

080058b8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80058c0:	4b39      	ldr	r3, [pc, #228]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058c8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d10b      	bne.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d8:	d905      	bls.n	80058e6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80058da:	4b33      	ldr	r3, [pc, #204]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4a32      	ldr	r2, [pc, #200]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80058e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058e4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e057      	b.n	800599a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f0:	d90a      	bls.n	8005908 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80058f2:	4b2d      	ldr	r3, [pc, #180]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	4a2a      	ldr	r2, [pc, #168]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005904:	60d3      	str	r3, [r2, #12]
 8005906:	e007      	b.n	8005918 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005908:	4b27      	ldr	r3, [pc, #156]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005910:	4925      	ldr	r1, [pc, #148]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4313      	orrs	r3, r2
 8005916:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005918:	4b24      	ldr	r3, [pc, #144]	@ (80059ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a24      	ldr	r2, [pc, #144]	@ (80059b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	2232      	movs	r2, #50	@ 0x32
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	4a21      	ldr	r2, [pc, #132]	@ (80059b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	099b      	lsrs	r3, r3, #6
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005936:	e002      	b.n	800593e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800593e:	4b1a      	ldr	r3, [pc, #104]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_PWREx_ControlVoltageScaling+0x98>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f3      	bne.n	8005938 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d01b      	beq.n	800598e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	099b      	lsrs	r3, r3, #6
 8005962:	2232      	movs	r2, #50	@ 0x32
 8005964:	fb02 f303 	mul.w	r3, r2, r3
 8005968:	4a11      	ldr	r2, [pc, #68]	@ (80059b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	099b      	lsrs	r3, r3, #6
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005974:	e002      	b.n	800597c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b01      	subs	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f3      	bne.n	8005976 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e000      	b.n	800599a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	46020800 	.word	0x46020800
 80059ac:	20000004 	.word	0x20000004
 80059b0:	10624dd3 	.word	0x10624dd3

080059b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80059b8:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <HAL_PWREx_GetVoltageRange+0x18>)
 80059ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	46020800 	.word	0x46020800

080059d0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80059d8:	4b22      	ldr	r3, [pc, #136]	@ (8005a64 <HAL_PWREx_ConfigSupply+0x94>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	@ (8005a68 <HAL_PWREx_ConfigSupply+0x98>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	2232      	movs	r2, #50	@ 0x32
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005a68 <HAL_PWREx_ConfigSupply+0x98>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	099b      	lsrs	r3, r3, #6
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d113      	bne.n	8005a24 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80059fc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <HAL_PWREx_ConfigSupply+0x9c>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	4a1a      	ldr	r2, [pc, #104]	@ (8005a6c <HAL_PWREx_ConfigSupply+0x9c>)
 8005a02:	f023 0302 	bic.w	r3, r3, #2
 8005a06:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005a08:	e002      	b.n	8005a10 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005a10:	4b16      	ldr	r3, [pc, #88]	@ (8005a6c <HAL_PWREx_ConfigSupply+0x9c>)
 8005a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d116      	bne.n	8005a4a <HAL_PWREx_ConfigSupply+0x7a>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f3      	bne.n	8005a0a <HAL_PWREx_ConfigSupply+0x3a>
 8005a22:	e012      	b.n	8005a4a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005a24:	4b11      	ldr	r3, [pc, #68]	@ (8005a6c <HAL_PWREx_ConfigSupply+0x9c>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4a10      	ldr	r2, [pc, #64]	@ (8005a6c <HAL_PWREx_ConfigSupply+0x9c>)
 8005a2a:	f043 0302 	orr.w	r3, r3, #2
 8005a2e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005a30:	e002      	b.n	8005a38 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005a38:	4b0c      	ldr	r3, [pc, #48]	@ (8005a6c <HAL_PWREx_ConfigSupply+0x9c>)
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <HAL_PWREx_ConfigSupply+0x7a>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f3      	bne.n	8005a32 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e000      	b.n	8005a56 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000004 	.word	0x20000004
 8005a68:	10624dd3 	.word	0x10624dd3
 8005a6c:	46020800 	.word	0x46020800

08005a70 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005a74:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <HAL_PWREx_EnableVddA+0x1c>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	4a04      	ldr	r2, [pc, #16]	@ (8005a8c <HAL_PWREx_EnableVddA+0x1c>)
 8005a7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a7e:	6113      	str	r3, [r2, #16]
}
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	46020800 	.word	0x46020800

08005a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	@ 0x38
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f000 bec8 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aaa:	4b99      	ldr	r3, [pc, #612]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 030c 	and.w	r3, r3, #12
 8005ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab4:	4b96      	ldr	r3, [pc, #600]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 816c 	beq.w	8005da4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x52>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	f040 80de 	bne.w	8005c96 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 80da 	bne.w	8005c96 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f000 bea5 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005af4:	4b86      	ldr	r3, [pc, #536]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_RCC_OscConfig+0x7a>
 8005b00:	4b83      	ldr	r3, [pc, #524]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005b08:	e005      	b.n	8005b16 <HAL_RCC_OscConfig+0x86>
 8005b0a:	4b81      	ldr	r3, [pc, #516]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d255      	bcs.n	8005bc6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 f9e9 	bl	8006efc <RCC_SetFlashLatencyFromMSIRange>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f000 be82 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005b36:	4b76      	ldr	r3, [pc, #472]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4a75      	ldr	r2, [pc, #468]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b40:	6093      	str	r3, [r2, #8]
 8005b42:	4b73      	ldr	r3, [pc, #460]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	4970      	ldr	r1, [pc, #448]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005b5c:	d309      	bcc.n	8005b72 <HAL_RCC_OscConfig+0xe2>
 8005b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 021f 	bic.w	r2, r3, #31
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	4969      	ldr	r1, [pc, #420]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60cb      	str	r3, [r1, #12]
 8005b70:	e07e      	b.n	8005c70 <HAL_RCC_OscConfig+0x1e0>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	da0a      	bge.n	8005b90 <HAL_RCC_OscConfig+0x100>
 8005b7a:	4b65      	ldr	r3, [pc, #404]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	015b      	lsls	r3, r3, #5
 8005b88:	4961      	ldr	r1, [pc, #388]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60cb      	str	r3, [r1, #12]
 8005b8e:	e06f      	b.n	8005c70 <HAL_RCC_OscConfig+0x1e0>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b98:	d30a      	bcc.n	8005bb0 <HAL_RCC_OscConfig+0x120>
 8005b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	4959      	ldr	r1, [pc, #356]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60cb      	str	r3, [r1, #12]
 8005bae:	e05f      	b.n	8005c70 <HAL_RCC_OscConfig+0x1e0>
 8005bb0:	4b57      	ldr	r3, [pc, #348]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	03db      	lsls	r3, r3, #15
 8005bbe:	4954      	ldr	r1, [pc, #336]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60cb      	str	r3, [r1, #12]
 8005bc4:	e054      	b.n	8005c70 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005bc6:	4b52      	ldr	r3, [pc, #328]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4a51      	ldr	r2, [pc, #324]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005bcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bd0:	6093      	str	r3, [r2, #8]
 8005bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	494c      	ldr	r1, [pc, #304]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005bec:	d309      	bcc.n	8005c02 <HAL_RCC_OscConfig+0x172>
 8005bee:	4b48      	ldr	r3, [pc, #288]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f023 021f 	bic.w	r2, r3, #31
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	4945      	ldr	r1, [pc, #276]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60cb      	str	r3, [r1, #12]
 8005c00:	e028      	b.n	8005c54 <HAL_RCC_OscConfig+0x1c4>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da0a      	bge.n	8005c20 <HAL_RCC_OscConfig+0x190>
 8005c0a:	4b41      	ldr	r3, [pc, #260]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	015b      	lsls	r3, r3, #5
 8005c18:	493d      	ldr	r1, [pc, #244]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60cb      	str	r3, [r1, #12]
 8005c1e:	e019      	b.n	8005c54 <HAL_RCC_OscConfig+0x1c4>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c28:	d30a      	bcc.n	8005c40 <HAL_RCC_OscConfig+0x1b0>
 8005c2a:	4b39      	ldr	r3, [pc, #228]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	4935      	ldr	r1, [pc, #212]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60cb      	str	r3, [r1, #12]
 8005c3e:	e009      	b.n	8005c54 <HAL_RCC_OscConfig+0x1c4>
 8005c40:	4b33      	ldr	r3, [pc, #204]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	03db      	lsls	r3, r3, #15
 8005c4e:	4930      	ldr	r1, [pc, #192]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 f94c 	bl	8006efc <RCC_SetFlashLatencyFromMSIRange>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f000 bde5 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005c70:	f001 f8de 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c74:	4b27      	ldr	r3, [pc, #156]	@ (8005d14 <HAL_RCC_OscConfig+0x284>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fb f88f 	bl	8000d9c <HAL_InitTick>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 808a 	beq.w	8005da2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c92:	f000 bdd2 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d066      	beq.n	8005d6c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005caa:	f7fb ff9d 	bl	8001be8 <HAL_GetTick>
 8005cae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005cb0:	e009      	b.n	8005cc6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cb2:	f7fb ff99 	bl	8001be8 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d902      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	f000 bdba 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005cc6:	4b12      	ldr	r3, [pc, #72]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0ef      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005cd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cdc:	6093      	str	r3, [r2, #8]
 8005cde:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	4909      	ldr	r1, [pc, #36]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005cf8:	d30e      	bcc.n	8005d18 <HAL_RCC_OscConfig+0x288>
 8005cfa:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f023 021f 	bic.w	r2, r3, #31
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4902      	ldr	r1, [pc, #8]	@ (8005d10 <HAL_RCC_OscConfig+0x280>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60cb      	str	r3, [r1, #12]
 8005d0c:	e04a      	b.n	8005da4 <HAL_RCC_OscConfig+0x314>
 8005d0e:	bf00      	nop
 8005d10:	46020c00 	.word	0x46020c00
 8005d14:	2000000c 	.word	0x2000000c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da0a      	bge.n	8005d36 <HAL_RCC_OscConfig+0x2a6>
 8005d20:	4b98      	ldr	r3, [pc, #608]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	015b      	lsls	r3, r3, #5
 8005d2e:	4995      	ldr	r1, [pc, #596]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60cb      	str	r3, [r1, #12]
 8005d34:	e036      	b.n	8005da4 <HAL_RCC_OscConfig+0x314>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3e:	d30a      	bcc.n	8005d56 <HAL_RCC_OscConfig+0x2c6>
 8005d40:	4b90      	ldr	r3, [pc, #576]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	498d      	ldr	r1, [pc, #564]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60cb      	str	r3, [r1, #12]
 8005d54:	e026      	b.n	8005da4 <HAL_RCC_OscConfig+0x314>
 8005d56:	4b8b      	ldr	r3, [pc, #556]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	03db      	lsls	r3, r3, #15
 8005d64:	4987      	ldr	r1, [pc, #540]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60cb      	str	r3, [r1, #12]
 8005d6a:	e01b      	b.n	8005da4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005d6c:	4b85      	ldr	r3, [pc, #532]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a84      	ldr	r2, [pc, #528]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d78:	f7fb ff36 	bl	8001be8 <HAL_GetTick>
 8005d7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005d7e:	e009      	b.n	8005d94 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d80:	f7fb ff32 	bl	8001be8 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d902      	bls.n	8005d94 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	f000 bd53 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005d94:	4b7b      	ldr	r3, [pc, #492]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1ef      	bne.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
 8005da0:	e000      	b.n	8005da4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005da2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 808b 	beq.w	8005ec8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x334>
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	d109      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d17d      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f000 bd34 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_OscConfig+0x35a>
 8005ddc:	4b69      	ldr	r3, [pc, #420]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a68      	ldr	r2, [pc, #416]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e041      	b.n	8005e6e <HAL_RCC_OscConfig+0x3de>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df2:	d112      	bne.n	8005e1a <HAL_RCC_OscConfig+0x38a>
 8005df4:	4b63      	ldr	r3, [pc, #396]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a62      	ldr	r2, [pc, #392]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	4b60      	ldr	r3, [pc, #384]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5f      	ldr	r2, [pc, #380]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e06:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b5d      	ldr	r3, [pc, #372]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a5c      	ldr	r2, [pc, #368]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e029      	b.n	8005e6e <HAL_RCC_OscConfig+0x3de>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005e22:	d112      	bne.n	8005e4a <HAL_RCC_OscConfig+0x3ba>
 8005e24:	4b57      	ldr	r3, [pc, #348]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a56      	ldr	r2, [pc, #344]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4b54      	ldr	r3, [pc, #336]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a53      	ldr	r2, [pc, #332]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b51      	ldr	r3, [pc, #324]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a50      	ldr	r2, [pc, #320]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e011      	b.n	8005e6e <HAL_RCC_OscConfig+0x3de>
 8005e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b4b      	ldr	r3, [pc, #300]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a4a      	ldr	r2, [pc, #296]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b48      	ldr	r3, [pc, #288]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a47      	ldr	r2, [pc, #284]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d014      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005e76:	f7fb feb7 	bl	8001be8 <HAL_GetTick>
 8005e7a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e7c:	e009      	b.n	8005e92 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e7e:	f7fb feb3 	bl	8001be8 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b64      	cmp	r3, #100	@ 0x64
 8005e8a:	d902      	bls.n	8005e92 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	f000 bcd4 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e92:	4b3c      	ldr	r3, [pc, #240]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ef      	beq.n	8005e7e <HAL_RCC_OscConfig+0x3ee>
 8005e9e:	e013      	b.n	8005ec8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005ea0:	f7fb fea2 	bl	8001be8 <HAL_GetTick>
 8005ea4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ea6:	e009      	b.n	8005ebc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fb fe9e 	bl	8001be8 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	@ 0x64
 8005eb4:	d902      	bls.n	8005ebc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f000 bcbf 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ebc:	4b31      	ldr	r3, [pc, #196]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1ef      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d05f      	beq.n	8005f94 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d005      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x456>
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	2b0c      	cmp	r3, #12
 8005ede:	d114      	bne.n	8005f0a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d111      	bne.n	8005f0a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f000 bca3 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005ef4:	4b23      	ldr	r3, [pc, #140]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	4920      	ldr	r1, [pc, #128]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005f08:	e044      	b.n	8005f94 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d024      	beq.n	8005f5c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005f12:	4b1c      	ldr	r3, [pc, #112]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1b      	ldr	r2, [pc, #108]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f1c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005f1e:	f7fb fe63 	bl	8001be8 <HAL_GetTick>
 8005f22:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f24:	e009      	b.n	8005f3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f26:	f7fb fe5f 	bl	8001be8 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d902      	bls.n	8005f3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	f000 bc80 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f3a:	4b12      	ldr	r3, [pc, #72]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0ef      	beq.n	8005f26 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005f46:	4b0f      	ldr	r3, [pc, #60]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	490b      	ldr	r1, [pc, #44]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	610b      	str	r3, [r1, #16]
 8005f5a:	e01b      	b.n	8005f94 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005f5c:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a08      	ldr	r2, [pc, #32]	@ (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f66:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005f68:	f7fb fe3e 	bl	8001be8 <HAL_GetTick>
 8005f6c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f70:	f7fb fe3a 	bl	8001be8 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d904      	bls.n	8005f88 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	f000 bc5b 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
 8005f84:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f88:	4baf      	ldr	r3, [pc, #700]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ed      	bne.n	8005f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80c8 	beq.w	8006132 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa8:	4ba7      	ldr	r3, [pc, #668]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8005faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d111      	bne.n	8005fda <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb6:	4ba4      	ldr	r3, [pc, #656]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8005fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fbc:	4aa2      	ldr	r2, [pc, #648]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005fc6:	4ba0      	ldr	r3, [pc, #640]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8005fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005fda:	4b9c      	ldr	r3, [pc, #624]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d119      	bne.n	800601a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005fe6:	4b99      	ldr	r3, [pc, #612]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	4a98      	ldr	r2, [pc, #608]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff2:	f7fb fdf9 	bl	8001be8 <HAL_GetTick>
 8005ff6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005ff8:	e009      	b.n	800600e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffa:	f7fb fdf5 	bl	8001be8 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d902      	bls.n	800600e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	f000 bc16 	b.w	800683a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800600e:	4b8f      	ldr	r3, [pc, #572]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0ef      	beq.n	8005ffa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d05f      	beq.n	80060e2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006022:	4b89      	ldr	r3, [pc, #548]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006028:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006034:	429a      	cmp	r2, r3
 8006036:	d037      	beq.n	80060a8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e3f4      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800605a:	4b7b      	ldr	r3, [pc, #492]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 800605c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006060:	4a79      	ldr	r2, [pc, #484]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006062:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006066:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800606a:	f7fb fdbd 	bl	8001be8 <HAL_GetTick>
 800606e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006072:	f7fb fdb9 	bl	8001be8 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b05      	cmp	r3, #5
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e3da      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006084:	4b70      	ldr	r3, [pc, #448]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800608a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1ef      	bne.n	8006072 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006092:	4b6d      	ldr	r3, [pc, #436]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006098:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	4969      	ldr	r1, [pc, #420]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80060a8:	4b67      	ldr	r3, [pc, #412]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80060aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060ae:	4a66      	ldr	r2, [pc, #408]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80060b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80060b8:	f7fb fd96 	bl	8001be8 <HAL_GetTick>
 80060bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c0:	f7fb fd92 	bl	8001be8 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e3b3      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80060d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80060d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ef      	beq.n	80060c0 <HAL_RCC_OscConfig+0x630>
 80060e0:	e01b      	b.n	800611a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80060e2:	4b59      	ldr	r3, [pc, #356]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80060e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e8:	4a57      	ldr	r2, [pc, #348]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80060ea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80060ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80060f2:	f7fb fd79 	bl	8001be8 <HAL_GetTick>
 80060f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060fa:	f7fb fd75 	bl	8001be8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b05      	cmp	r3, #5
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e396      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800610c:	4b4e      	ldr	r3, [pc, #312]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 800610e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006112:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1ef      	bne.n	80060fa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800611a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800611e:	2b01      	cmp	r3, #1
 8006120:	d107      	bne.n	8006132 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006122:	4b49      	ldr	r3, [pc, #292]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006128:	4a47      	ldr	r2, [pc, #284]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 800612a:	f023 0304 	bic.w	r3, r3, #4
 800612e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8111 	beq.w	8006362 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006140:	2300      	movs	r3, #0
 8006142:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006146:	4b40      	ldr	r3, [pc, #256]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d111      	bne.n	8006178 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006154:	4b3c      	ldr	r3, [pc, #240]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615a:	4a3b      	ldr	r2, [pc, #236]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006164:	4b38      	ldr	r3, [pc, #224]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006178:	4b34      	ldr	r3, [pc, #208]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d118      	bne.n	80061b6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006184:	4b31      	ldr	r3, [pc, #196]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	4a30      	ldr	r2, [pc, #192]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006190:	f7fb fd2a 	bl	8001be8 <HAL_GetTick>
 8006194:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006198:	f7fb fd26 	bl	8001be8 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e347      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80061aa:	4b28      	ldr	r3, [pc, #160]	@ (800624c <HAL_RCC_OscConfig+0x7bc>)
 80061ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01f      	beq.n	8006202 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d010      	beq.n	80061f0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80061d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80061d6:	f043 0304 	orr.w	r3, r3, #4
 80061da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061de:	4b1a      	ldr	r3, [pc, #104]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80061e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061e4:	4a18      	ldr	r2, [pc, #96]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061ee:	e018      	b.n	8006222 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061f0:	4b15      	ldr	r3, [pc, #84]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80061f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f6:	4a14      	ldr	r2, [pc, #80]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006200:	e00f      	b.n	8006222 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006202:	4b11      	ldr	r3, [pc, #68]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006208:	4a0f      	ldr	r2, [pc, #60]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 8006214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006218:	4a0b      	ldr	r2, [pc, #44]	@ (8006248 <HAL_RCC_OscConfig+0x7b8>)
 800621a:	f023 0304 	bic.w	r3, r3, #4
 800621e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d057      	beq.n	80062da <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800622a:	f7fb fcdd 	bl	8001be8 <HAL_GetTick>
 800622e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006230:	e00e      	b.n	8006250 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006232:	f7fb fcd9 	bl	8001be8 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006240:	4293      	cmp	r3, r2
 8006242:	d905      	bls.n	8006250 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e2f8      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
 8006248:	46020c00 	.word	0x46020c00
 800624c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006250:	4b9c      	ldr	r3, [pc, #624]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0e9      	beq.n	8006232 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01b      	beq.n	80062a2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800626a:	4b96      	ldr	r3, [pc, #600]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800626c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006270:	4a94      	ldr	r2, [pc, #592]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800627a:	e00a      	b.n	8006292 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627c:	f7fb fcb4 	bl	8001be8 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e2d3      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006292:	4b8c      	ldr	r3, [pc, #560]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0ed      	beq.n	800627c <HAL_RCC_OscConfig+0x7ec>
 80062a0:	e053      	b.n	800634a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062a2:	4b88      	ldr	r3, [pc, #544]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80062a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a8:	4a86      	ldr	r2, [pc, #536]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80062aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062b2:	e00a      	b.n	80062ca <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b4:	f7fb fc98 	bl	8001be8 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e2b7      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062ca:	4b7e      	ldr	r3, [pc, #504]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80062cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1ed      	bne.n	80062b4 <HAL_RCC_OscConfig+0x824>
 80062d8:	e037      	b.n	800634a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80062da:	f7fb fc85 	bl	8001be8 <HAL_GetTick>
 80062de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062e0:	e00a      	b.n	80062f8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e2:	f7fb fc81 	bl	8001be8 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e2a0      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062f8:	4b72      	ldr	r3, [pc, #456]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80062fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1ed      	bne.n	80062e2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006306:	4b6f      	ldr	r3, [pc, #444]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800630c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01a      	beq.n	800634a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006314:	4b6b      	ldr	r3, [pc, #428]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800631a:	4a6a      	ldr	r2, [pc, #424]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800631c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006320:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006324:	e00a      	b.n	800633c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006326:	f7fb fc5f 	bl	8001be8 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e27e      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800633c:	4b61      	ldr	r3, [pc, #388]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800633e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1ed      	bne.n	8006326 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800634a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800634e:	2b01      	cmp	r3, #1
 8006350:	d107      	bne.n	8006362 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006352:	4b5c      	ldr	r3, [pc, #368]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006358:	4a5a      	ldr	r2, [pc, #360]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d036      	beq.n	80063dc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d019      	beq.n	80063aa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006376:	4b53      	ldr	r3, [pc, #332]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a52      	ldr	r2, [pc, #328]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800637c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006380:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006382:	f7fb fc31 	bl	8001be8 <HAL_GetTick>
 8006386:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800638a:	f7fb fc2d 	bl	8001be8 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e24e      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800639c:	4b49      	ldr	r3, [pc, #292]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x8fa>
 80063a8:	e018      	b.n	80063dc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80063aa:	4b46      	ldr	r3, [pc, #280]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a45      	ldr	r2, [pc, #276]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80063b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80063b6:	f7fb fc17 	bl	8001be8 <HAL_GetTick>
 80063ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063be:	f7fb fc13 	bl	8001be8 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e234      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80063d0:	4b3c      	ldr	r3, [pc, #240]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d036      	beq.n	8006456 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80063f0:	4b34      	ldr	r3, [pc, #208]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a33      	ldr	r2, [pc, #204]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80063f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80063fc:	f7fb fbf4 	bl	8001be8 <HAL_GetTick>
 8006400:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006404:	f7fb fbf0 	bl	8001be8 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e211      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006416:	4b2b      	ldr	r3, [pc, #172]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0x974>
 8006422:	e018      	b.n	8006456 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006424:	4b27      	ldr	r3, [pc, #156]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a26      	ldr	r2, [pc, #152]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800642a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800642e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006430:	f7fb fbda 	bl	8001be8 <HAL_GetTick>
 8006434:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006438:	f7fb fbd6 	bl	8001be8 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e1f7      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800644a:	4b1e      	ldr	r3, [pc, #120]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d07f      	beq.n	8006562 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	2b00      	cmp	r3, #0
 8006468:	d062      	beq.n	8006530 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800646a:	4b16      	ldr	r3, [pc, #88]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	4a15      	ldr	r2, [pc, #84]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006470:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006474:	6093      	str	r3, [r2, #8]
 8006476:	4b13      	ldr	r3, [pc, #76]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	4910      	ldr	r1, [pc, #64]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006484:	4313      	orrs	r3, r2
 8006486:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006490:	d309      	bcc.n	80064a6 <HAL_RCC_OscConfig+0xa16>
 8006492:	4b0c      	ldr	r3, [pc, #48]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f023 021f 	bic.w	r2, r3, #31
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	4909      	ldr	r1, [pc, #36]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60cb      	str	r3, [r1, #12]
 80064a4:	e02a      	b.n	80064fc <HAL_RCC_OscConfig+0xa6c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da0c      	bge.n	80064c8 <HAL_RCC_OscConfig+0xa38>
 80064ae:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	015b      	lsls	r3, r3, #5
 80064bc:	4901      	ldr	r1, [pc, #4]	@ (80064c4 <HAL_RCC_OscConfig+0xa34>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	60cb      	str	r3, [r1, #12]
 80064c2:	e01b      	b.n	80064fc <HAL_RCC_OscConfig+0xa6c>
 80064c4:	46020c00 	.word	0x46020c00
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d0:	d30a      	bcc.n	80064e8 <HAL_RCC_OscConfig+0xa58>
 80064d2:	4ba1      	ldr	r3, [pc, #644]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	499d      	ldr	r1, [pc, #628]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60cb      	str	r3, [r1, #12]
 80064e6:	e009      	b.n	80064fc <HAL_RCC_OscConfig+0xa6c>
 80064e8:	4b9b      	ldr	r3, [pc, #620]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	03db      	lsls	r3, r3, #15
 80064f6:	4998      	ldr	r1, [pc, #608]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80064fc:	4b96      	ldr	r3, [pc, #600]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a95      	ldr	r2, [pc, #596]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006502:	f043 0310 	orr.w	r3, r3, #16
 8006506:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006508:	f7fb fb6e 	bl	8001be8 <HAL_GetTick>
 800650c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006510:	f7fb fb6a 	bl	8001be8 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e18b      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006522:	4b8d      	ldr	r3, [pc, #564]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0xa80>
 800652e:	e018      	b.n	8006562 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006530:	4b89      	ldr	r3, [pc, #548]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a88      	ldr	r2, [pc, #544]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006536:	f023 0310 	bic.w	r3, r3, #16
 800653a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800653c:	f7fb fb54 	bl	8001be8 <HAL_GetTick>
 8006540:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006544:	f7fb fb50 	bl	8001be8 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e171      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006556:	4b80      	ldr	r3, [pc, #512]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8166 	beq.w	8006838 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006572:	4b79      	ldr	r3, [pc, #484]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b0c      	cmp	r3, #12
 800657c:	f000 80f2 	beq.w	8006764 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	2b02      	cmp	r3, #2
 8006586:	f040 80c5 	bne.w	8006714 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800658a:	4b73      	ldr	r3, [pc, #460]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a72      	ldr	r2, [pc, #456]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006590:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006594:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006596:	f7fb fb27 	bl	8001be8 <HAL_GetTick>
 800659a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659e:	f7fb fb23 	bl	8001be8 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e144      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80065b0:	4b69      	ldr	r3, [pc, #420]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f0      	bne.n	800659e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065bc:	4b66      	ldr	r3, [pc, #408]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80065be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d111      	bne.n	80065ee <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80065ca:	4b63      	ldr	r3, [pc, #396]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80065cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065d0:	4a61      	ldr	r2, [pc, #388]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80065d2:	f043 0304 	orr.w	r3, r3, #4
 80065d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80065da:	4b5f      	ldr	r3, [pc, #380]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80065dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80065ee:	4b5b      	ldr	r3, [pc, #364]	@ (800675c <HAL_RCC_OscConfig+0xccc>)
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065fa:	d102      	bne.n	8006602 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006602:	4b56      	ldr	r3, [pc, #344]	@ (800675c <HAL_RCC_OscConfig+0xccc>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	4a55      	ldr	r2, [pc, #340]	@ (800675c <HAL_RCC_OscConfig+0xccc>)
 8006608:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800660c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800660e:	4b52      	ldr	r3, [pc, #328]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006622:	3a01      	subs	r2, #1
 8006624:	0212      	lsls	r2, r2, #8
 8006626:	4311      	orrs	r1, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800662c:	430a      	orrs	r2, r1
 800662e:	494a      	ldr	r1, [pc, #296]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006630:	4313      	orrs	r3, r2
 8006632:	628b      	str	r3, [r1, #40]	@ 0x28
 8006634:	4b48      	ldr	r3, [pc, #288]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006638:	4b49      	ldr	r3, [pc, #292]	@ (8006760 <HAL_RCC_OscConfig+0xcd0>)
 800663a:	4013      	ands	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006640:	3a01      	subs	r2, #1
 8006642:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800664a:	3a01      	subs	r2, #1
 800664c:	0252      	lsls	r2, r2, #9
 800664e:	b292      	uxth	r2, r2
 8006650:	4311      	orrs	r1, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006656:	3a01      	subs	r2, #1
 8006658:	0412      	lsls	r2, r2, #16
 800665a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800665e:	4311      	orrs	r1, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006664:	3a01      	subs	r2, #1
 8006666:	0612      	lsls	r2, r2, #24
 8006668:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800666c:	430a      	orrs	r2, r1
 800666e:	493a      	ldr	r1, [pc, #232]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006670:	4313      	orrs	r3, r2
 8006672:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006674:	4b38      	ldr	r3, [pc, #224]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	4a37      	ldr	r2, [pc, #220]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 800667a:	f023 0310 	bic.w	r3, r3, #16
 800667e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	4a34      	ldr	r2, [pc, #208]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800668a:	4b33      	ldr	r3, [pc, #204]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 800668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668e:	4a32      	ldr	r2, [pc, #200]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006690:	f043 0310 	orr.w	r3, r3, #16
 8006694:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006696:	4b30      	ldr	r3, [pc, #192]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	f023 020c 	bic.w	r2, r3, #12
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	492d      	ldr	r1, [pc, #180]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80066a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d105      	bne.n	80066bc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80066b0:	4b2a      	ldr	r3, [pc, #168]	@ (800675c <HAL_RCC_OscConfig+0xccc>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a29      	ldr	r2, [pc, #164]	@ (800675c <HAL_RCC_OscConfig+0xccc>)
 80066b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066ba:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80066bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d107      	bne.n	80066d4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80066c4:	4b24      	ldr	r3, [pc, #144]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80066c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ca:	4a23      	ldr	r2, [pc, #140]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80066cc:	f023 0304 	bic.w	r3, r3, #4
 80066d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80066d4:	4b20      	ldr	r3, [pc, #128]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80066da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80066e0:	f7fb fa82 	bl	8001be8 <HAL_GetTick>
 80066e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e8:	f7fb fa7e 	bl	8001be8 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e09f      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80066fa:	4b17      	ldr	r3, [pc, #92]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0f0      	beq.n	80066e8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006706:	4b14      	ldr	r3, [pc, #80]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	4a13      	ldr	r2, [pc, #76]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 800670c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006710:	6293      	str	r3, [r2, #40]	@ 0x28
 8006712:	e091      	b.n	8006838 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006714:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a0f      	ldr	r2, [pc, #60]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 800671a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800671e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006720:	f7fb fa62 	bl	8001be8 <HAL_GetTick>
 8006724:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006728:	f7fb fa5e 	bl	8001be8 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e07f      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800673a:	4b07      	ldr	r3, [pc, #28]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006746:	4b04      	ldr	r3, [pc, #16]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	4a03      	ldr	r2, [pc, #12]	@ (8006758 <HAL_RCC_OscConfig+0xcc8>)
 800674c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	6293      	str	r3, [r2, #40]	@ 0x28
 8006756:	e06f      	b.n	8006838 <HAL_RCC_OscConfig+0xda8>
 8006758:	46020c00 	.word	0x46020c00
 800675c:	46020800 	.word	0x46020800
 8006760:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006764:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800676a:	4b36      	ldr	r3, [pc, #216]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 800676c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800676e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006774:	2b01      	cmp	r3, #1
 8006776:	d039      	beq.n	80067ec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0203 	and.w	r2, r3, #3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d132      	bne.n	80067ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d129      	bne.n	80067ec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d122      	bne.n	80067ec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d11a      	bne.n	80067ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	0a5b      	lsrs	r3, r3, #9
 80067ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d111      	bne.n	80067ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d108      	bne.n	80067ec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e024      	b.n	800683a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80067f0:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 80067f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f4:	08db      	lsrs	r3, r3, #3
 80067f6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80067fe:	429a      	cmp	r2, r3
 8006800:	d01a      	beq.n	8006838 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006802:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	4a0f      	ldr	r2, [pc, #60]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 8006808:	f023 0310 	bic.w	r3, r3, #16
 800680c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680e:	f7fb f9eb 	bl	8001be8 <HAL_GetTick>
 8006812:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006814:	bf00      	nop
 8006816:	f7fb f9e7 	bl	8001be8 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	4293      	cmp	r3, r2
 8006820:	d0f9      	beq.n	8006816 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006826:	4a07      	ldr	r2, [pc, #28]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 800682e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006830:	4a04      	ldr	r2, [pc, #16]	@ (8006844 <HAL_RCC_OscConfig+0xdb4>)
 8006832:	f043 0310 	orr.w	r3, r3, #16
 8006836:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3738      	adds	r7, #56	@ 0x38
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	46020c00 	.word	0x46020c00

08006848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e1d9      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800685c:	4b9b      	ldr	r3, [pc, #620]	@ (8006acc <HAL_RCC_ClockConfig+0x284>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d910      	bls.n	800688c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686a:	4b98      	ldr	r3, [pc, #608]	@ (8006acc <HAL_RCC_ClockConfig+0x284>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 020f 	bic.w	r2, r3, #15
 8006872:	4996      	ldr	r1, [pc, #600]	@ (8006acc <HAL_RCC_ClockConfig+0x284>)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800687a:	4b94      	ldr	r3, [pc, #592]	@ (8006acc <HAL_RCC_ClockConfig+0x284>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e1c1      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b00      	cmp	r3, #0
 8006896:	d010      	beq.n	80068ba <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695a      	ldr	r2, [r3, #20]
 800689c:	4b8c      	ldr	r3, [pc, #560]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d908      	bls.n	80068ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80068a8:	4b89      	ldr	r3, [pc, #548]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	4986      	ldr	r1, [pc, #536]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d012      	beq.n	80068ec <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	4b81      	ldr	r3, [pc, #516]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d909      	bls.n	80068ec <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80068d8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	497a      	ldr	r1, [pc, #488]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d010      	beq.n	800691a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	4b74      	ldr	r3, [pc, #464]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006904:	429a      	cmp	r2, r3
 8006906:	d908      	bls.n	800691a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006908:	4b71      	ldr	r3, [pc, #452]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	496e      	ldr	r1, [pc, #440]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006916:	4313      	orrs	r3, r2
 8006918:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d010      	beq.n	8006948 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	4b69      	ldr	r3, [pc, #420]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	429a      	cmp	r2, r3
 8006934:	d908      	bls.n	8006948 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006936:	4b66      	ldr	r3, [pc, #408]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 020f 	bic.w	r2, r3, #15
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	4963      	ldr	r1, [pc, #396]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006944:	4313      	orrs	r3, r2
 8006946:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80d2 	beq.w	8006afa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d143      	bne.n	80069ea <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006962:	4b5b      	ldr	r3, [pc, #364]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d110      	bne.n	8006992 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006970:	4b57      	ldr	r3, [pc, #348]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006976:	4a56      	ldr	r2, [pc, #344]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006978:	f043 0304 	orr.w	r3, r3, #4
 800697c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006980:	4b53      	ldr	r3, [pc, #332]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	60bb      	str	r3, [r7, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800698e:	2301      	movs	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006992:	f7fb f929 	bl	8001be8 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006998:	4b4e      	ldr	r3, [pc, #312]	@ (8006ad4 <HAL_RCC_ClockConfig+0x28c>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00f      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80069a6:	f7fb f91f 	bl	8001be8 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e12b      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80069b8:	4b46      	ldr	r3, [pc, #280]	@ (8006ad4 <HAL_RCC_ClockConfig+0x28c>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f0      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d107      	bne.n	80069da <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80069ca:	4b41      	ldr	r3, [pc, #260]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80069cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d0:	4a3f      	ldr	r2, [pc, #252]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80069d2:	f023 0304 	bic.w	r3, r3, #4
 80069d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80069da:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d121      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e112      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d107      	bne.n	8006a02 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069f2:	4b37      	ldr	r3, [pc, #220]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d115      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e106      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d107      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006a0a:	4b31      	ldr	r3, [pc, #196]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e0fa      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e0f2      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006a2a:	4b29      	ldr	r3, [pc, #164]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f023 0203 	bic.w	r2, r3, #3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4926      	ldr	r1, [pc, #152]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006a3c:	f7fb f8d4 	bl	8001be8 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d112      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a4a:	e00a      	b.n	8006a62 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a4c:	f7fb f8cc 	bl	8001be8 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e0d6      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a62:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b0c      	cmp	r3, #12
 8006a6c:	d1ee      	bne.n	8006a4c <HAL_RCC_ClockConfig+0x204>
 8006a6e:	e044      	b.n	8006afa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d112      	bne.n	8006a9e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a78:	e00a      	b.n	8006a90 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a7a:	f7fb f8b5 	bl	8001be8 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e0bf      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f003 030c 	and.w	r3, r3, #12
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d1ee      	bne.n	8006a7a <HAL_RCC_ClockConfig+0x232>
 8006a9c:	e02d      	b.n	8006afa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d123      	bne.n	8006aee <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa8:	f7fb f89e 	bl	8001be8 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e0a8      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006abe:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <HAL_RCC_ClockConfig+0x288>)
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1ee      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x260>
 8006aca:	e016      	b.n	8006afa <HAL_RCC_ClockConfig+0x2b2>
 8006acc:	40022000 	.word	0x40022000
 8006ad0:	46020c00 	.word	0x46020c00
 8006ad4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad8:	f7fb f886 	bl	8001be8 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e090      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006aee:	4b4a      	ldr	r3, [pc, #296]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d1ee      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d010      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	4b43      	ldr	r3, [pc, #268]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d208      	bcs.n	8006b28 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006b16:	4b40      	ldr	r3, [pc, #256]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 020f 	bic.w	r2, r3, #15
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	493d      	ldr	r1, [pc, #244]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b28:	4b3c      	ldr	r3, [pc, #240]	@ (8006c1c <HAL_RCC_ClockConfig+0x3d4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d210      	bcs.n	8006b58 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b36:	4b39      	ldr	r3, [pc, #228]	@ (8006c1c <HAL_RCC_ClockConfig+0x3d4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f023 020f 	bic.w	r2, r3, #15
 8006b3e:	4937      	ldr	r1, [pc, #220]	@ (8006c1c <HAL_RCC_ClockConfig+0x3d4>)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b46:	4b35      	ldr	r3, [pc, #212]	@ (8006c1c <HAL_RCC_ClockConfig+0x3d4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d001      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e05b      	b.n	8006c10 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d010      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	4b2b      	ldr	r3, [pc, #172]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d208      	bcs.n	8006b86 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006b74:	4b28      	ldr	r3, [pc, #160]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	4925      	ldr	r1, [pc, #148]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d012      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	4b20      	ldr	r3, [pc, #128]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	091b      	lsrs	r3, r3, #4
 8006b9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d209      	bcs.n	8006bb8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	4919      	ldr	r1, [pc, #100]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d010      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695a      	ldr	r2, [r3, #20]
 8006bc8:	4b13      	ldr	r3, [pc, #76]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d208      	bcs.n	8006be6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006bd4:	4b10      	ldr	r3, [pc, #64]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	490d      	ldr	r1, [pc, #52]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006be6:	f000 f821 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8006bea:	4602      	mov	r2, r0
 8006bec:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <HAL_RCC_ClockConfig+0x3d0>)
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	490a      	ldr	r1, [pc, #40]	@ (8006c20 <HAL_RCC_ClockConfig+0x3d8>)
 8006bf6:	5ccb      	ldrb	r3, [r1, r3]
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfc:	4a09      	ldr	r2, [pc, #36]	@ (8006c24 <HAL_RCC_ClockConfig+0x3dc>)
 8006bfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c00:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <HAL_RCC_ClockConfig+0x3e0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fa f8c9 	bl	8000d9c <HAL_InitTick>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	46020c00 	.word	0x46020c00
 8006c1c:	40022000 	.word	0x40022000
 8006c20:	0802e09c 	.word	0x0802e09c
 8006c24:	20000004 	.word	0x20000004
 8006c28:	2000000c 	.word	0x2000000c

08006c2c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b08b      	sub	sp, #44	@ 0x2c
 8006c30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c3a:	4b78      	ldr	r3, [pc, #480]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
 8006c42:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c44:	4b75      	ldr	r3, [pc, #468]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_GetSysClockFreq+0x34>
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b0c      	cmp	r3, #12
 8006c58:	d121      	bne.n	8006c9e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d11e      	bne.n	8006c9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006c60:	4b6e      	ldr	r3, [pc, #440]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c72:	0b1b      	lsrs	r3, r3, #12
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7a:	e005      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006c7c:	4b67      	ldr	r3, [pc, #412]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	0f1b      	lsrs	r3, r3, #28
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c88:	4a65      	ldr	r2, [pc, #404]	@ (8006e20 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d110      	bne.n	8006cba <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c9c:	e00d      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f003 030c 	and.w	r3, r3, #12
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d102      	bne.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006caa:	4b5e      	ldr	r3, [pc, #376]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006cac:	623b      	str	r3, [r7, #32]
 8006cae:	e004      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d101      	bne.n	8006cba <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006cb8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	f040 80a5 	bne.w	8006e0c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006cc2:	4b56      	ldr	r3, [pc, #344]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006ccc:	4b53      	ldr	r3, [pc, #332]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	0a1b      	lsrs	r3, r3, #8
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006cda:	4b50      	ldr	r3, [pc, #320]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cea:	08db      	lsrs	r3, r3, #3
 8006cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d003      	beq.n	8006d10 <HAL_RCC_GetSysClockFreq+0xe4>
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d022      	beq.n	8006d54 <HAL_RCC_GetSysClockFreq+0x128>
 8006d0e:	e043      	b.n	8006d98 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006e28 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d22:	4b3e      	ldr	r3, [pc, #248]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006d32:	ed97 6a01 	vldr	s12, [r7, #4]
 8006d36:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006e2c <HAL_RCC_GetSysClockFreq+0x200>
 8006d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d52:	e046      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006e28 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d66:	4b2d      	ldr	r3, [pc, #180]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006d76:	ed97 6a01 	vldr	s12, [r7, #4]
 8006d7a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006e2c <HAL_RCC_GetSysClockFreq+0x200>
 8006d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d96:	e024      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006dc0:	ed97 6a01 	vldr	s12, [r7, #4]
 8006dc4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006e2c <HAL_RCC_GetSysClockFreq+0x200>
 8006dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006de2:	4b0e      	ldr	r3, [pc, #56]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de6:	0e1b      	lsrs	r3, r3, #24
 8006de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dec:	3301      	adds	r3, #1
 8006dee:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e06:	ee17 3a90 	vmov	r3, s15
 8006e0a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	372c      	adds	r7, #44	@ 0x2c
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	46020c00 	.word	0x46020c00
 8006e20:	0802e0b4 	.word	0x0802e0b4
 8006e24:	00f42400 	.word	0x00f42400
 8006e28:	4b742400 	.word	0x4b742400
 8006e2c:	46000000 	.word	0x46000000

08006e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006e34:	f7ff fefa 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b07      	ldr	r3, [pc, #28]	@ (8006e58 <HAL_RCC_GetHCLKFreq+0x28>)
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	4906      	ldr	r1, [pc, #24]	@ (8006e5c <HAL_RCC_GetHCLKFreq+0x2c>)
 8006e44:	5ccb      	ldrb	r3, [r1, r3]
 8006e46:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4a:	4a05      	ldr	r2, [pc, #20]	@ (8006e60 <HAL_RCC_GetHCLKFreq+0x30>)
 8006e4c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006e4e:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <HAL_RCC_GetHCLKFreq+0x30>)
 8006e50:	681b      	ldr	r3, [r3, #0]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	46020c00 	.word	0x46020c00
 8006e5c:	0802e09c 	.word	0x0802e09c
 8006e60:	20000004 	.word	0x20000004

08006e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006e68:	f7ff ffe2 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4903      	ldr	r1, [pc, #12]	@ (8006e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	46020c00 	.word	0x46020c00
 8006e88:	0802e0ac 	.word	0x0802e0ac

08006e8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	221f      	movs	r2, #31
 8006e9a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006e9c:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <HAL_RCC_GetClockConfig+0x68>)
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	f003 0203 	and.w	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006ea8:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <HAL_RCC_GetClockConfig+0x68>)
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f003 020f 	and.w	r2, r3, #15
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef4 <HAL_RCC_GetClockConfig+0x68>)
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <HAL_RCC_GetClockConfig+0x68>)
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006ece:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <HAL_RCC_GetClockConfig+0x68>)
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006eda:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <HAL_RCC_GetClockConfig+0x6c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	601a      	str	r2, [r3, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	46020c00 	.word	0x46020c00
 8006ef8:	40022000 	.word	0x40022000

08006efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f04:	4b3e      	ldr	r3, [pc, #248]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f12:	f7fe fd4f 	bl	80059b4 <HAL_PWREx_GetVoltageRange>
 8006f16:	6178      	str	r0, [r7, #20]
 8006f18:	e019      	b.n	8006f4e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f1a:	4b39      	ldr	r3, [pc, #228]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f20:	4a37      	ldr	r2, [pc, #220]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f22:	f043 0304 	orr.w	r3, r3, #4
 8006f26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006f2a:	4b35      	ldr	r3, [pc, #212]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f38:	f7fe fd3c 	bl	80059b4 <HAL_PWREx_GetVoltageRange>
 8006f3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f3e:	4b30      	ldr	r3, [pc, #192]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f44:	4a2e      	ldr	r2, [pc, #184]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006f46:	f023 0304 	bic.w	r3, r3, #4
 8006f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f54:	d003      	beq.n	8006f5e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5c:	d109      	bne.n	8006f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f64:	d202      	bcs.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006f66:	2301      	movs	r3, #1
 8006f68:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006f6a:	e033      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006f70:	e030      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f78:	d208      	bcs.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f80:	d102      	bne.n	8006f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006f82:	2303      	movs	r3, #3
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	e025      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e035      	b.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f92:	d90f      	bls.n	8006fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fa0:	d902      	bls.n	8006fa8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	e015      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006fa8:	2301      	movs	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e012      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	e00f      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fba:	d109      	bne.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc2:	d102      	bne.n	8006fca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	e004      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006fca:	2302      	movs	r3, #2
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	e001      	b.n	8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f023 020f 	bic.w	r2, r3, #15
 8006fdc:	4909      	ldr	r1, [pc, #36]	@ (8007004 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006fe4:	4b07      	ldr	r3, [pc, #28]	@ (8007004 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d001      	beq.n	8006ff6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	46020c00 	.word	0x46020c00
 8007004:	40022000 	.word	0x40022000

08007008 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800700c:	b0b6      	sub	sp, #216	@ 0xd8
 800700e:	af00      	add	r7, sp, #0
 8007010:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007014:	2300      	movs	r3, #0
 8007016:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800701a:	2300      	movs	r3, #0
 800701c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f002 0401 	and.w	r4, r2, #1
 800702c:	2500      	movs	r5, #0
 800702e:	ea54 0305 	orrs.w	r3, r4, r5
 8007032:	d00b      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007034:	4bc5      	ldr	r3, [pc, #788]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800703a:	f023 0103 	bic.w	r1, r3, #3
 800703e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007044:	4ac1      	ldr	r2, [pc, #772]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007046:	430b      	orrs	r3, r1
 8007048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800704c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f002 0804 	and.w	r8, r2, #4
 8007058:	f04f 0900 	mov.w	r9, #0
 800705c:	ea58 0309 	orrs.w	r3, r8, r9
 8007060:	d00b      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007062:	4bba      	ldr	r3, [pc, #744]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007068:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800706c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007072:	4ab6      	ldr	r2, [pc, #728]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007074:	430b      	orrs	r3, r1
 8007076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800707a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f002 0a08 	and.w	sl, r2, #8
 8007086:	f04f 0b00 	mov.w	fp, #0
 800708a:	ea5a 030b 	orrs.w	r3, sl, fp
 800708e:	d00b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007090:	4bae      	ldr	r3, [pc, #696]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007096:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800709a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800709e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a0:	4aaa      	ldr	r2, [pc, #680]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80070a2:	430b      	orrs	r3, r1
 80070a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f002 0310 	and.w	r3, r2, #16
 80070b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d00b      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80070c8:	4ba0      	ldr	r3, [pc, #640]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80070ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d8:	4a9c      	ldr	r2, [pc, #624]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80070da:	430b      	orrs	r3, r1
 80070dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f002 0320 	and.w	r3, r2, #32
 80070ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	d00b      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007100:	4b92      	ldr	r3, [pc, #584]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007106:	f023 0107 	bic.w	r1, r3, #7
 800710a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800710e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007110:	4a8e      	ldr	r2, [pc, #568]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007112:	430b      	orrs	r3, r1
 8007114:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007128:	2300      	movs	r3, #0
 800712a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800712e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007132:	460b      	mov	r3, r1
 8007134:	4313      	orrs	r3, r2
 8007136:	d00b      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007138:	4b84      	ldr	r3, [pc, #528]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800713a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800713e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007148:	4a80      	ldr	r2, [pc, #512]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800714a:	430b      	orrs	r3, r1
 800714c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800715c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007160:	2300      	movs	r3, #0
 8007162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007166:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d00b      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007170:	4b76      	ldr	r3, [pc, #472]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007176:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800717a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800717e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007180:	4a72      	ldr	r2, [pc, #456]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007182:	430b      	orrs	r3, r1
 8007184:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007198:	2300      	movs	r3, #0
 800719a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800719e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80071a2:	460b      	mov	r3, r1
 80071a4:	4313      	orrs	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80071a8:	4b68      	ldr	r3, [pc, #416]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80071aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80071b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b8:	4a64      	ldr	r2, [pc, #400]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80071ba:	430b      	orrs	r3, r1
 80071bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80071cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80071da:	460b      	mov	r3, r1
 80071dc:	4313      	orrs	r3, r2
 80071de:	d00b      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80071e0:	4b5a      	ldr	r3, [pc, #360]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80071e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071e6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80071ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f0:	4a56      	ldr	r2, [pc, #344]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80071f2:	430b      	orrs	r3, r1
 80071f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007208:	2300      	movs	r3, #0
 800720a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800720e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d00b      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007218:	4b4c      	ldr	r3, [pc, #304]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800721a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800721e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007228:	4a48      	ldr	r2, [pc, #288]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800722a:	430b      	orrs	r3, r1
 800722c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800723c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007240:	2300      	movs	r3, #0
 8007242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007246:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800724a:	460b      	mov	r3, r1
 800724c:	4313      	orrs	r3, r2
 800724e:	d00b      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007250:	4b3e      	ldr	r3, [pc, #248]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007256:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800725a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800725e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007260:	4a3a      	ldr	r2, [pc, #232]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007262:	430b      	orrs	r3, r1
 8007264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007276:	2300      	movs	r3, #0
 8007278:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800727a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800727e:	460b      	mov	r3, r1
 8007280:	4313      	orrs	r3, r2
 8007282:	d00b      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007284:	4b31      	ldr	r3, [pc, #196]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800728a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800728e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007292:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007294:	4a2d      	ldr	r2, [pc, #180]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007296:	430b      	orrs	r3, r1
 8007298:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800729c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80072aa:	2300      	movs	r3, #0
 80072ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80072ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80072b2:	460b      	mov	r3, r1
 80072b4:	4313      	orrs	r3, r2
 80072b6:	d04f      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80072b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c0:	2b80      	cmp	r3, #128	@ 0x80
 80072c2:	d02d      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80072c4:	2b80      	cmp	r3, #128	@ 0x80
 80072c6:	d827      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80072c8:	2b60      	cmp	r3, #96	@ 0x60
 80072ca:	d02b      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80072cc:	2b60      	cmp	r3, #96	@ 0x60
 80072ce:	d823      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80072d0:	2b40      	cmp	r3, #64	@ 0x40
 80072d2:	d006      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80072d4:	2b40      	cmp	r3, #64	@ 0x40
 80072d6:	d81f      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d011      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80072e0:	e01a      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072e2:	4b1a      	ldr	r3, [pc, #104]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	4a19      	ldr	r2, [pc, #100]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80072e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80072ee:	e01a      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80072f4:	3308      	adds	r3, #8
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fbc4 	bl	8007a84 <RCCEx_PLL2_Config>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007302:	e010      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007308:	332c      	adds	r3, #44	@ 0x2c
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fc52 	bl	8007bb4 <RCCEx_PLL3_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007316:	e006      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800731e:	e002      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8007324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007326:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d110      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800732e:	4b07      	ldr	r3, [pc, #28]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007330:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007334:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800733c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007340:	4a02      	ldr	r2, [pc, #8]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007342:	430b      	orrs	r3, r1
 8007344:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007348:	e006      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800734a:	bf00      	nop
 800734c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007350:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007354:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007364:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007366:	2300      	movs	r3, #0
 8007368:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800736a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800736e:	460b      	mov	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	d046      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800737c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007380:	d028      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007382:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007386:	d821      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8007388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800738c:	d022      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800738e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007392:	d81b      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8007394:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007398:	d01c      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800739a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800739e:	d815      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80073a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073a4:	d008      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073aa:	d80f      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d011      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80073b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b4:	d00e      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80073b6:	e009      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073bc:	3308      	adds	r3, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fb60 	bl	8007a84 <RCCEx_PLL2_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80073ca:	e004      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 80073d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10d      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80073de:	4bb6      	ldr	r3, [pc, #728]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80073e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80073e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073f0:	4ab1      	ldr	r2, [pc, #708]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80073f2:	430b      	orrs	r3, r1
 80073f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80073f8:	e003      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80073fe:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800740e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007410:	2300      	movs	r3, #0
 8007412:	667b      	str	r3, [r7, #100]	@ 0x64
 8007414:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d03e      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800741e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007426:	2b04      	cmp	r3, #4
 8007428:	d81d      	bhi.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800742a:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	0800746f 	.word	0x0800746f
 8007434:	08007445 	.word	0x08007445
 8007438:	08007453 	.word	0x08007453
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007444:	4b9c      	ldr	r3, [pc, #624]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007448:	4a9b      	ldr	r2, [pc, #620]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800744a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800744e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007450:	e00e      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007456:	332c      	adds	r3, #44	@ 0x2c
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fbab 	bl	8007bb4 <RCCEx_PLL3_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007464:	e004      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800746c:	e000      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 800746e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007470:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10d      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007478:	4b8f      	ldr	r3, [pc, #572]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800747a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800747e:	f023 0107 	bic.w	r1, r3, #7
 8007482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800748a:	4a8b      	ldr	r2, [pc, #556]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800748c:	430b      	orrs	r3, r1
 800748e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007492:	e003      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007494:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007498:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800749c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80074a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074aa:	2300      	movs	r3, #0
 80074ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	d04a      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80074b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074c4:	d028      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80074c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074ca:	d821      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80074cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074d0:	d024      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80074d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074d6:	d81b      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80074d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074dc:	d00e      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80074de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074e2:	d815      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01b      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ec:	d110      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074ee:	4b72      	ldr	r3, [pc, #456]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	4a71      	ldr	r2, [pc, #452]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80074f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074f8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80074fa:	e012      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007500:	332c      	adds	r3, #44	@ 0x2c
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fb56 	bl	8007bb4 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800750e:	e008      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007516:	e004      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007518:	bf00      	nop
 800751a:	e002      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800751c:	bf00      	nop
 800751e:	e000      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007520:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007522:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10d      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800752a:	4b63      	ldr	r3, [pc, #396]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800752c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007530:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800753c:	4a5e      	ldr	r2, [pc, #376]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800753e:	430b      	orrs	r3, r1
 8007540:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007544:	e003      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007546:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800754a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800754e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800755a:	653b      	str	r3, [r7, #80]	@ 0x50
 800755c:	2300      	movs	r3, #0
 800755e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007560:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	f000 80ba 	beq.w	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800756c:	2300      	movs	r3, #0
 800756e:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007572:	4b51      	ldr	r3, [pc, #324]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d113      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007580:	4b4d      	ldr	r3, [pc, #308]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007586:	4a4c      	ldr	r2, [pc, #304]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007588:	f043 0304 	orr.w	r3, r3, #4
 800758c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007590:	4b49      	ldr	r3, [pc, #292]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800759e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80075a8:	4b44      	ldr	r3, [pc, #272]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	4a43      	ldr	r2, [pc, #268]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075b4:	f7fa fb18 	bl	8001be8 <HAL_GetTick>
 80075b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80075bc:	e00b      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075be:	f7fa fb13 	bl	8001be8 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d903      	bls.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80075d4:	e005      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80075d6:	4b39      	ldr	r3, [pc, #228]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80075d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0ed      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 80075e2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d16a      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075ea:	4b33      	ldr	r3, [pc, #204]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80075ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80075f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d023      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007600:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007604:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800760c:	4293      	cmp	r3, r2
 800760e:	d01b      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007610:	4b29      	ldr	r3, [pc, #164]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800761a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800761e:	4b26      	ldr	r3, [pc, #152]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007624:	4a24      	ldr	r2, [pc, #144]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800762a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800762e:	4b22      	ldr	r3, [pc, #136]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007634:	4a20      	ldr	r2, [pc, #128]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800763e:	4a1e      	ldr	r2, [pc, #120]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007644:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d019      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fa fac8 	bl	8001be8 <HAL_GetTick>
 8007658:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800765c:	e00d      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765e:	f7fa fac3 	bl	8001be8 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800766e:	429a      	cmp	r2, r3
 8007670:	d903      	bls.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8007678:	e006      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800767a:	4b0f      	ldr	r3, [pc, #60]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800767c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0ea      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8007688:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10d      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007690:	4b09      	ldr	r3, [pc, #36]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007696:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800769a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800769e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076a2:	4a05      	ldr	r2, [pc, #20]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80076a4:	430b      	orrs	r3, r1
 80076a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80076aa:	e00d      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076ac:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80076b0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80076b4:	e008      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80076b6:	bf00      	nop
 80076b8:	46020c00 	.word	0x46020c00
 80076bc:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80076c4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076c8:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d107      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076d0:	4bb2      	ldr	r3, [pc, #712]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076d6:	4ab1      	ldr	r2, [pc, #708]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076d8:	f023 0304 	bic.w	r3, r3, #4
 80076dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80076e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80076ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ee:	2300      	movs	r3, #0
 80076f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80076f6:	460b      	mov	r3, r1
 80076f8:	4313      	orrs	r3, r2
 80076fa:	d042      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80076fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007700:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007704:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007708:	d022      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800770a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800770e:	d81b      	bhi.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007714:	d011      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x732>
 8007716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800771a:	d815      	bhi.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d019      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007720:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007724:	d110      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800772a:	3308      	adds	r3, #8
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f9a9 	bl	8007a84 <RCCEx_PLL2_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007738:	e00d      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773a:	4b98      	ldr	r3, [pc, #608]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800773c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773e:	4a97      	ldr	r2, [pc, #604]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007744:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007746:	e006      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800774e:	e002      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8007750:	bf00      	nop
 8007752:	e000      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8007754:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007756:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10d      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800775e:	4b8f      	ldr	r3, [pc, #572]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007764:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800776c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007770:	4a8a      	ldr	r2, [pc, #552]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007772:	430b      	orrs	r3, r1
 8007774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007778:	e003      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800777e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800778e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007790:	2300      	movs	r3, #0
 8007792:	647b      	str	r3, [r7, #68]	@ 0x44
 8007794:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007798:	460b      	mov	r3, r1
 800779a:	4313      	orrs	r3, r2
 800779c:	d02d      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800779e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077aa:	d00b      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80077ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077b0:	d804      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d008      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ba:	d007      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80077c2:	e004      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80077c4:	bf00      	nop
 80077c6:	e002      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80077cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80077ce:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80077d6:	4b71      	ldr	r3, [pc, #452]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80077d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e8:	4a6c      	ldr	r2, [pc, #432]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80077ea:	430b      	orrs	r3, r1
 80077ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077f0:	e003      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80077f6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80077fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007808:	2300      	movs	r3, #0
 800780a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800780c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007810:	460b      	mov	r3, r1
 8007812:	4313      	orrs	r3, r2
 8007814:	d00c      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007816:	4b61      	ldr	r3, [pc, #388]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007818:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800781c:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007828:	4a5c      	ldr	r2, [pc, #368]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800782a:	430b      	orrs	r3, r1
 800782c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800783c:	633b      	str	r3, [r7, #48]	@ 0x30
 800783e:	2300      	movs	r3, #0
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
 8007842:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007846:	460b      	mov	r3, r1
 8007848:	4313      	orrs	r3, r2
 800784a:	d019      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800784c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007858:	d105      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800785a:	4b50      	ldr	r3, [pc, #320]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800785c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785e:	4a4f      	ldr	r2, [pc, #316]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007864:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007866:	4b4d      	ldr	r3, [pc, #308]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800786c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007878:	4a48      	ldr	r2, [pc, #288]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800787a:	430b      	orrs	r3, r1
 800787c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800788c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800788e:	2300      	movs	r3, #0
 8007890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007892:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007896:	460b      	mov	r3, r1
 8007898:	4313      	orrs	r3, r2
 800789a:	d00c      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800789c:	4b3f      	ldr	r3, [pc, #252]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800789e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078ae:	493b      	ldr	r1, [pc, #236]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80078b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80078c2:	623b      	str	r3, [r7, #32]
 80078c4:	2300      	movs	r3, #0
 80078c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80078cc:	460b      	mov	r3, r1
 80078ce:	4313      	orrs	r3, r2
 80078d0:	d00c      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80078d2:	4b32      	ldr	r3, [pc, #200]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80078d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078e4:	492d      	ldr	r1, [pc, #180]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80078ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
 80078fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007902:	460b      	mov	r3, r1
 8007904:	4313      	orrs	r3, r2
 8007906:	d00c      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007908:	4b24      	ldr	r3, [pc, #144]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800790a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800790e:	f023 0218 	bic.w	r2, r3, #24
 8007912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800791a:	4920      	ldr	r1, [pc, #128]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800791c:	4313      	orrs	r3, r2
 800791e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007938:	460b      	mov	r3, r1
 800793a:	4313      	orrs	r3, r2
 800793c:	d034      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800793e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007942:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007946:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800794a:	d105      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800794c:	4b13      	ldr	r3, [pc, #76]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	4a12      	ldr	r2, [pc, #72]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007956:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800795c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007960:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007964:	d108      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800796a:	3308      	adds	r3, #8
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f889 	bl	8007a84 <RCCEx_PLL2_Config>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8007978:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10f      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007980:	4b06      	ldr	r3, [pc, #24]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007986:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800798a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800798e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007992:	4902      	ldr	r1, [pc, #8]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007994:	4313      	orrs	r3, r2
 8007996:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800799a:	e005      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800799c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80079a4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80079a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80079b4:	60bb      	str	r3, [r7, #8]
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079be:	460b      	mov	r3, r1
 80079c0:	4313      	orrs	r3, r2
 80079c2:	d03a      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80079c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079d0:	d00e      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80079d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079d6:	d815      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d017      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80079dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079e0:	d110      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e2:	4b27      	ldr	r3, [pc, #156]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	4a26      	ldr	r2, [pc, #152]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80079e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80079ee:	e00e      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079f4:	3308      	adds	r3, #8
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f844 	bl	8007a84 <RCCEx_PLL2_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007a02:	e004      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8007a0c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a0e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10d      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007a16:	4b1a      	ldr	r3, [pc, #104]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8007a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a1c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a28:	4915      	ldr	r1, [pc, #84]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007a30:	e003      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a32:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007a36:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a50:	460b      	mov	r3, r1
 8007a52:	4313      	orrs	r3, r2
 8007a54:	d00c      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007a56:	4b0a      	ldr	r3, [pc, #40]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8007a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a5c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a68:	4905      	ldr	r1, [pc, #20]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007a70:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	37d8      	adds	r7, #216	@ 0xd8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a7e:	bf00      	nop
 8007a80:	46020c00 	.word	0x46020c00

08007a84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007a8c:	4b47      	ldr	r3, [pc, #284]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a46      	ldr	r2, [pc, #280]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007a92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a98:	f7fa f8a6 	bl	8001be8 <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a9e:	e008      	b.n	8007ab2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007aa0:	f7fa f8a2 	bl	8001be8 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e077      	b.n	8007ba2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f0      	bne.n	8007aa0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007abe:	4b3b      	ldr	r3, [pc, #236]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6811      	ldr	r1, [r2, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6852      	ldr	r2, [r2, #4]
 8007ad2:	3a01      	subs	r2, #1
 8007ad4:	0212      	lsls	r2, r2, #8
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	4934      	ldr	r1, [pc, #208]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007ade:	4b33      	ldr	r3, [pc, #204]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ae2:	4b33      	ldr	r3, [pc, #204]	@ (8007bb0 <RCCEx_PLL2_Config+0x12c>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6892      	ldr	r2, [r2, #8]
 8007aea:	3a01      	subs	r2, #1
 8007aec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	68d2      	ldr	r2, [r2, #12]
 8007af4:	3a01      	subs	r2, #1
 8007af6:	0252      	lsls	r2, r2, #9
 8007af8:	b292      	uxth	r2, r2
 8007afa:	4311      	orrs	r1, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6912      	ldr	r2, [r2, #16]
 8007b00:	3a01      	subs	r2, #1
 8007b02:	0412      	lsls	r2, r2, #16
 8007b04:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b08:	4311      	orrs	r1, r2
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6952      	ldr	r2, [r2, #20]
 8007b0e:	3a01      	subs	r2, #1
 8007b10:	0612      	lsls	r2, r2, #24
 8007b12:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007b16:	430a      	orrs	r2, r1
 8007b18:	4924      	ldr	r1, [pc, #144]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b1e:	4b23      	ldr	r3, [pc, #140]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b22:	f023 020c 	bic.w	r2, r3, #12
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	4920      	ldr	r1, [pc, #128]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b30:	4b1e      	ldr	r3, [pc, #120]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	491c      	ldr	r1, [pc, #112]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b42:	4a1a      	ldr	r2, [pc, #104]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b44:	f023 0310 	bic.w	r3, r3, #16
 8007b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b4a:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b52:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	69d2      	ldr	r2, [r2, #28]
 8007b5a:	00d2      	lsls	r2, r2, #3
 8007b5c:	4913      	ldr	r1, [pc, #76]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007b62:	4b12      	ldr	r3, [pc, #72]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b66:	4a11      	ldr	r2, [pc, #68]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b68:	f043 0310 	orr.w	r3, r3, #16
 8007b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a0e      	ldr	r2, [pc, #56]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b7a:	f7fa f835 	bl	8001be8 <HAL_GetTick>
 8007b7e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b80:	e008      	b.n	8007b94 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b82:	f7fa f831 	bl	8001be8 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d901      	bls.n	8007b94 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e006      	b.n	8007ba2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b94:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <RCCEx_PLL2_Config+0x128>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0f0      	beq.n	8007b82 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0

}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	46020c00 	.word	0x46020c00
 8007bb0:	80800000 	.word	0x80800000

08007bb4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007bbc:	4b47      	ldr	r3, [pc, #284]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a46      	ldr	r2, [pc, #280]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bc8:	f7fa f80e 	bl	8001be8 <HAL_GetTick>
 8007bcc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bce:	e008      	b.n	8007be2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bd0:	f7fa f80a 	bl	8001be8 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e077      	b.n	8007cd2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007be2:	4b3e      	ldr	r3, [pc, #248]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1f0      	bne.n	8007bd0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007bee:	4b3b      	ldr	r3, [pc, #236]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6811      	ldr	r1, [r2, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6852      	ldr	r2, [r2, #4]
 8007c02:	3a01      	subs	r2, #1
 8007c04:	0212      	lsls	r2, r2, #8
 8007c06:	430a      	orrs	r2, r1
 8007c08:	4934      	ldr	r1, [pc, #208]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	630b      	str	r3, [r1, #48]	@ 0x30
 8007c0e:	4b33      	ldr	r3, [pc, #204]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c12:	4b33      	ldr	r3, [pc, #204]	@ (8007ce0 <RCCEx_PLL3_Config+0x12c>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6892      	ldr	r2, [r2, #8]
 8007c1a:	3a01      	subs	r2, #1
 8007c1c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	68d2      	ldr	r2, [r2, #12]
 8007c24:	3a01      	subs	r2, #1
 8007c26:	0252      	lsls	r2, r2, #9
 8007c28:	b292      	uxth	r2, r2
 8007c2a:	4311      	orrs	r1, r2
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6912      	ldr	r2, [r2, #16]
 8007c30:	3a01      	subs	r2, #1
 8007c32:	0412      	lsls	r2, r2, #16
 8007c34:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c38:	4311      	orrs	r1, r2
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6952      	ldr	r2, [r2, #20]
 8007c3e:	3a01      	subs	r2, #1
 8007c40:	0612      	lsls	r2, r2, #24
 8007c42:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c46:	430a      	orrs	r2, r1
 8007c48:	4924      	ldr	r1, [pc, #144]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007c4e:	4b23      	ldr	r3, [pc, #140]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c52:	f023 020c 	bic.w	r2, r3, #12
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	4920      	ldr	r1, [pc, #128]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c60:	4b1e      	ldr	r3, [pc, #120]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	491c      	ldr	r1, [pc, #112]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	4a1a      	ldr	r2, [pc, #104]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c74:	f023 0310 	bic.w	r3, r3, #16
 8007c78:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c7a:	4b18      	ldr	r3, [pc, #96]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	69d2      	ldr	r2, [r2, #28]
 8007c8a:	00d2      	lsls	r2, r2, #3
 8007c8c:	4913      	ldr	r1, [pc, #76]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007c92:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c96:	4a11      	ldr	r2, [pc, #68]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007c98:	f043 0310 	orr.w	r3, r3, #16
 8007c9c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007caa:	f7f9 ff9d 	bl	8001be8 <HAL_GetTick>
 8007cae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cb2:	f7f9 ff99 	bl	8001be8 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e006      	b.n	8007cd2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc4:	4b05      	ldr	r3, [pc, #20]	@ (8007cdc <RCCEx_PLL3_Config+0x128>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	46020c00 	.word	0x46020c00
 8007ce0:	80800000 	.word	0x80800000

08007ce4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e0fb      	b.n	8007eee <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7f      	ldr	r2, [pc, #508]	@ (8007ef8 <HAL_SPI_Init+0x214>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d004      	beq.n	8007d0a <HAL_SPI_Init+0x26>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a7d      	ldr	r2, [pc, #500]	@ (8007efc <HAL_SPI_Init+0x218>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	e000      	b.n	8007d0c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007d0a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a78      	ldr	r2, [pc, #480]	@ (8007ef8 <HAL_SPI_Init+0x214>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d004      	beq.n	8007d26 <HAL_SPI_Init+0x42>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a76      	ldr	r2, [pc, #472]	@ (8007efc <HAL_SPI_Init+0x218>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d105      	bne.n	8007d32 <HAL_SPI_Init+0x4e>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	d901      	bls.n	8007d32 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e0dd      	b.n	8007eee <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ffe8 	bl	8008d08 <SPI_GetPacketSize>
 8007d38:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8007ef8 <HAL_SPI_Init+0x214>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_SPI_Init+0x6a>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a6c      	ldr	r2, [pc, #432]	@ (8007efc <HAL_SPI_Init+0x218>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d102      	bne.n	8007d54 <HAL_SPI_Init+0x70>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d816      	bhi.n	8007d82 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d58:	4a69      	ldr	r2, [pc, #420]	@ (8007f00 <HAL_SPI_Init+0x21c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00e      	beq.n	8007d7c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a68      	ldr	r2, [pc, #416]	@ (8007f04 <HAL_SPI_Init+0x220>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d009      	beq.n	8007d7c <HAL_SPI_Init+0x98>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a66      	ldr	r2, [pc, #408]	@ (8007f08 <HAL_SPI_Init+0x224>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <HAL_SPI_Init+0x98>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a65      	ldr	r2, [pc, #404]	@ (8007f0c <HAL_SPI_Init+0x228>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d104      	bne.n	8007d86 <HAL_SPI_Init+0xa2>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b10      	cmp	r3, #16
 8007d80:	d901      	bls.n	8007d86 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e0b3      	b.n	8007eee <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7f8 ff22 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0201 	bic.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007dc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dcc:	d119      	bne.n	8007e02 <HAL_SPI_Init+0x11e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dd6:	d103      	bne.n	8007de0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d008      	beq.n	8007df2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007df0:	d107      	bne.n	8007e02 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00f      	beq.n	8007e2e <HAL_SPI_Init+0x14a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d90b      	bls.n	8007e2e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e007      	b.n	8007e3e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69da      	ldr	r2, [r3, #28]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e46:	431a      	orrs	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e50:	ea42 0103 	orr.w	r1, r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eaa:	ea42 0103 	orr.w	r1, r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	46002000 	.word	0x46002000
 8007efc:	56002000 	.word	0x56002000
 8007f00:	40013000 	.word	0x40013000
 8007f04:	50013000 	.word	0x50013000
 8007f08:	40003800 	.word	0x40003800
 8007f0c:	50003800 	.word	0x50003800

08007f10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3320      	adds	r3, #32
 8007f26:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f28:	f7f9 fe5e 	bl	8001be8 <HAL_GetTick>
 8007f2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d001      	beq.n	8007f3e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e1f3      	b.n	8008326 <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <HAL_SPI_Transmit+0x3a>
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e1eb      	b.n	8008326 <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_SPI_Transmit+0x4c>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e1e4      	b.n	8008326 <HAL_SPI_Transmit+0x416>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2203      	movs	r2, #3
 8007f68:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007fb4:	d108      	bne.n	8007fc8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e009      	b.n	8007fdc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007fda:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	0c1b      	lsrs	r3, r3, #16
 8007fe4:	041b      	lsls	r3, r3, #16
 8007fe6:	88f9      	ldrh	r1, [r7, #6]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10c      	bne.n	8008028 <HAL_SPI_Transmit+0x118>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008016:	d107      	bne.n	8008028 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	2b0f      	cmp	r3, #15
 800802e:	d95b      	bls.n	80080e8 <HAL_SPI_Transmit+0x1d8>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a8f      	ldr	r2, [pc, #572]	@ (8008274 <HAL_SPI_Transmit+0x364>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d04f      	beq.n	80080da <HAL_SPI_Transmit+0x1ca>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a8e      	ldr	r2, [pc, #568]	@ (8008278 <HAL_SPI_Transmit+0x368>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d04a      	beq.n	80080da <HAL_SPI_Transmit+0x1ca>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a8c      	ldr	r2, [pc, #560]	@ (800827c <HAL_SPI_Transmit+0x36c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d045      	beq.n	80080da <HAL_SPI_Transmit+0x1ca>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a8b      	ldr	r2, [pc, #556]	@ (8008280 <HAL_SPI_Transmit+0x370>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d147      	bne.n	80080e8 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008058:	e03f      	b.n	80080da <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b02      	cmp	r3, #2
 8008066:	d114      	bne.n	8008092 <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6812      	ldr	r2, [r2, #0]
 8008072:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008078:	1d1a      	adds	r2, r3, #4
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008090:	e023      	b.n	80080da <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008092:	f7f9 fda9 	bl	8001be8 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d803      	bhi.n	80080aa <HAL_SPI_Transmit+0x19a>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d102      	bne.n	80080b0 <HAL_SPI_Transmit+0x1a0>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d114      	bne.n	80080da <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fd5b 	bl	8008b6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e125      	b.n	8008326 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1b9      	bne.n	800805a <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80080e6:	e0f8      	b.n	80082da <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	2b07      	cmp	r3, #7
 80080ee:	f240 80ed 	bls.w	80082cc <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80080f2:	e05d      	b.n	80081b0 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d132      	bne.n	8008168 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d918      	bls.n	8008140 <HAL_SPI_Transmit+0x230>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d014      	beq.n	8008140 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6812      	ldr	r2, [r2, #0]
 8008120:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008126:	1d1a      	adds	r2, r3, #4
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b02      	subs	r3, #2
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800813e:	e037      	b.n	80081b0 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008144:	881a      	ldrh	r2, [r3, #0]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800814e:	1c9a      	adds	r2, r3, #2
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008166:	e023      	b.n	80081b0 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008168:	f7f9 fd3e 	bl	8001be8 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d803      	bhi.n	8008180 <HAL_SPI_Transmit+0x270>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817e:	d102      	bne.n	8008186 <HAL_SPI_Transmit+0x276>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d114      	bne.n	80081b0 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fcf0 	bl	8008b6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008192:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e0ba      	b.n	8008326 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d19b      	bne.n	80080f4 <HAL_SPI_Transmit+0x1e4>
 80081bc:	e08d      	b.n	80082da <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d15b      	bne.n	8008284 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d918      	bls.n	800820a <HAL_SPI_Transmit+0x2fa>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081dc:	2b40      	cmp	r3, #64	@ 0x40
 80081de:	d914      	bls.n	800820a <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6812      	ldr	r2, [r2, #0]
 80081ea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081f0:	1d1a      	adds	r2, r3, #4
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b04      	subs	r3, #4
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008208:	e060      	b.n	80082cc <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b01      	cmp	r3, #1
 8008214:	d917      	bls.n	8008246 <HAL_SPI_Transmit+0x336>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d013      	beq.n	8008246 <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008222:	881a      	ldrh	r2, [r3, #0]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b02      	subs	r3, #2
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008244:	e042      	b.n	80082cc <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3320      	adds	r3, #32
 8008250:	7812      	ldrb	r2, [r2, #0]
 8008252:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008270:	e02c      	b.n	80082cc <HAL_SPI_Transmit+0x3bc>
 8008272:	bf00      	nop
 8008274:	40013000 	.word	0x40013000
 8008278:	50013000 	.word	0x50013000
 800827c:	40003800 	.word	0x40003800
 8008280:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008284:	f7f9 fcb0 	bl	8001be8 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d803      	bhi.n	800829c <HAL_SPI_Transmit+0x38c>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829a:	d102      	bne.n	80082a2 <HAL_SPI_Transmit+0x392>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d114      	bne.n	80082cc <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fc62 	bl	8008b6c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e02c      	b.n	8008326 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f47f af72 	bne.w	80081be <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2200      	movs	r2, #0
 80082e2:	2108      	movs	r1, #8
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fce1 	bl	8008cac <SPI_WaitOnFlagUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 fc33 	bl	8008b6c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e000      	b.n	8008326 <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8008324:	2300      	movs	r3, #0
  }
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop

08008330 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b01      	cmp	r3, #1
 8008348:	d001      	beq.n	800834e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800834a:	2302      	movs	r3, #2
 800834c:	e192      	b.n	8008674 <HAL_SPI_Transmit_DMA+0x344>
  }

  if ((pData == NULL) || (Size == 0UL))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <HAL_SPI_Transmit_DMA+0x2a>
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e18a      	b.n	8008674 <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_SPI_Transmit_DMA+0x3c>
 8008368:	2302      	movs	r3, #2
 800836a:	e183      	b.n	8008674 <HAL_SPI_Transmit_DMA+0x344>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2203      	movs	r2, #3
 8008378:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	88fa      	ldrh	r2, [r7, #6]
 800838e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	88fa      	ldrh	r2, [r7, #6]
 8008396:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80083c4:	d108      	bne.n	80083d8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	e009      	b.n	80083ec <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80083ea:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	2b0f      	cmp	r3, #15
 80083f2:	d919      	bls.n	8008428 <HAL_SPI_Transmit_DMA+0xf8>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d013      	beq.n	8008428 <HAL_SPI_Transmit_DMA+0xf8>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8008404:	4a9d      	ldr	r2, [pc, #628]	@ (800867c <HAL_SPI_Transmit_DMA+0x34c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d018      	beq.n	800843c <HAL_SPI_Transmit_DMA+0x10c>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a9c      	ldr	r2, [pc, #624]	@ (8008680 <HAL_SPI_Transmit_DMA+0x350>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d013      	beq.n	800843c <HAL_SPI_Transmit_DMA+0x10c>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a9a      	ldr	r2, [pc, #616]	@ (8008684 <HAL_SPI_Transmit_DMA+0x354>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <HAL_SPI_Transmit_DMA+0x10c>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a99      	ldr	r2, [pc, #612]	@ (8008688 <HAL_SPI_Transmit_DMA+0x358>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d009      	beq.n	800843c <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800842c:	2b07      	cmp	r3, #7
 800842e:	d90b      	bls.n	8008448 <HAL_SPI_Transmit_DMA+0x118>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d105      	bne.n	8008448 <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e115      	b.n	8008674 <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	2b07      	cmp	r3, #7
 800844e:	d820      	bhi.n	8008492 <HAL_SPI_Transmit_DMA+0x162>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d109      	bne.n	8008470 <HAL_SPI_Transmit_DMA+0x140>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008462:	b29b      	uxth	r3, r3
 8008464:	3301      	adds	r3, #1
 8008466:	105b      	asrs	r3, r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d11e      	bne.n	80084ba <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008482:	b29b      	uxth	r3, r3
 8008484:	3303      	adds	r3, #3
 8008486:	109b      	asrs	r3, r3, #2
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008490:	e013      	b.n	80084ba <HAL_SPI_Transmit_DMA+0x18a>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	2b0f      	cmp	r3, #15
 8008498:	d80f      	bhi.n	80084ba <HAL_SPI_Transmit_DMA+0x18a>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d109      	bne.n	80084ba <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3301      	adds	r3, #1
 80084b0:	105b      	asrs	r3, r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c0:	4a72      	ldr	r2, [pc, #456]	@ (800868c <HAL_SPI_Transmit_DMA+0x35c>)
 80084c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ca:	4a71      	ldr	r2, [pc, #452]	@ (8008690 <HAL_SPI_Transmit_DMA+0x360>)
 80084cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d4:	4a6f      	ldr	r2, [pc, #444]	@ (8008694 <HAL_SPI_Transmit_DMA+0x364>)
 80084d6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084de:	2200      	movs	r2, #0
 80084e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084f0:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b07      	cmp	r3, #7
 80084f8:	d804      	bhi.n	8008504 <HAL_SPI_Transmit_DMA+0x1d4>
  {
    hspi->TxXferCount = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008502:	e010      	b.n	8008526 <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b0f      	cmp	r3, #15
 800850a:	d806      	bhi.n	800851a <HAL_SPI_Transmit_DMA+0x1ea>
  {
    hspi->TxXferCount = Size * 2U;
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008518:	e005      	b.n	8008526 <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008532:	2b00      	cmp	r3, #0
 8008534:	d02d      	beq.n	8008592 <HAL_SPI_Transmit_DMA+0x262>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800853e:	2b00      	cmp	r3, #0
 8008540:	d024      	beq.n	800858c <HAL_SPI_Transmit_DMA+0x25c>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f103 0220 	add.w	r2, r3, #32
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008580:	4618      	mov	r0, r3
 8008582:	f7fc fc49 	bl	8004e18 <HAL_DMAEx_List_Start_IT>
 8008586:	4603      	mov	r3, r0
 8008588:	75fb      	strb	r3, [r7, #23]
 800858a:	e014      	b.n	80085b6 <HAL_SPI_Transmit_DMA+0x286>
    }
    else
    {
      status = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
 8008590:	e011      	b.n	80085b6 <HAL_SPI_Transmit_DMA+0x286>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800859c:	4619      	mov	r1, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3320      	adds	r3, #32
 80085a4:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085ac:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80085ae:	f7fb ff5b 	bl	8004468 <HAL_DMA_Start_IT>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d011      	beq.n	80085e0 <HAL_SPI_Transmit_DMA+0x2b0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c2:	f043 0210 	orr.w	r2, r3, #16
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e049      	b.n	8008674 <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e8:	2b81      	cmp	r3, #129	@ 0x81
 80085ea:	d108      	bne.n	80085fe <HAL_SPI_Transmit_DMA+0x2ce>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	6812      	ldr	r2, [r2, #0]
 80085f6:	0c1b      	lsrs	r3, r3, #16
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	6053      	str	r3, [r2, #4]
 80085fc:	e009      	b.n	8008612 <HAL_SPI_Transmit_DMA+0x2e2>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	041b      	lsls	r3, r3, #16
 8008608:	88f9      	ldrh	r1, [r7, #6]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	430b      	orrs	r3, r1
 8008610:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008620:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8008630:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0201 	orr.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10c      	bne.n	800866a <HAL_SPI_Transmit_DMA+0x33a>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008658:	d107      	bne.n	800866a <HAL_SPI_Transmit_DMA+0x33a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008668:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	40013000 	.word	0x40013000
 8008680:	50013000 	.word	0x50013000
 8008684:	40003800 	.word	0x40003800
 8008688:	50003800 	.word	0x50003800
 800868c:	08008ad7 	.word	0x08008ad7
 8008690:	08008a91 	.word	0x08008a91
 8008694:	08008af3 	.word	0x08008af3

08008698 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08a      	sub	sp, #40	@ 0x28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80086b0:	6a3a      	ldr	r2, [r7, #32]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4013      	ands	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80086ca:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3330      	adds	r3, #48	@ 0x30
 80086d2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d010      	beq.n	8008700 <HAL_SPI_IRQHandler+0x68>
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	f003 0308 	and.w	r3, r3, #8
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699a      	ldr	r2, [r3, #24]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086f6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9bf 	bl	8008a7c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80086fe:	e19a      	b.n	8008a36 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d113      	bne.n	8008732 <HAL_SPI_IRQHandler+0x9a>
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10e      	bne.n	8008732 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800871a:	2b00      	cmp	r3, #0
 800871c:	d009      	beq.n	8008732 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
    handled = 1UL;
 800872e:	2301      	movs	r3, #1
 8008730:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10f      	bne.n	800875c <HAL_SPI_IRQHandler+0xc4>
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800874c:	2b00      	cmp	r3, #0
 800874e:	d105      	bne.n	800875c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	4798      	blx	r3
    handled = 1UL;
 8008758:	2301      	movs	r3, #1
 800875a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10f      	bne.n	8008786 <HAL_SPI_IRQHandler+0xee>
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
    handled = 1UL;
 8008782:	2301      	movs	r3, #1
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	f040 814f 	bne.w	8008a2c <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 808b 	beq.w	80088b0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	699a      	ldr	r2, [r3, #24]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0208 	orr.w	r2, r2, #8
 80087a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	699a      	ldr	r2, [r3, #24]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0210 	orr.w	r2, r2, #16
 80087b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699a      	ldr	r2, [r3, #24]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087c8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0208 	bic.w	r2, r2, #8
 80087d8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d13d      	bne.n	8008864 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80087e8:	e036      	b.n	8008858 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	d90b      	bls.n	800880a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087fc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008802:	1d1a      	adds	r2, r3, #4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008808:	e01d      	b.n	8008846 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	2b07      	cmp	r3, #7
 8008810:	d90b      	bls.n	800882a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	8812      	ldrh	r2, [r2, #0]
 800881a:	b292      	uxth	r2, r2
 800881c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008822:	1c9a      	adds	r2, r3, #2
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008828:	e00d      	b.n	8008846 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008836:	7812      	ldrb	r2, [r2, #0]
 8008838:	b2d2      	uxtb	r2, r2
 800883a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	b29a      	uxth	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1c2      	bne.n	80087ea <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f981 	bl	8008b6c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7f9 f8d7 	bl	8001a30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008882:	e0d8      	b.n	8008a36 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008884:	7cfb      	ldrb	r3, [r7, #19]
 8008886:	2b05      	cmp	r3, #5
 8008888:	d103      	bne.n	8008892 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f8e2 	bl	8008a54 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008890:	e0ce      	b.n	8008a30 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008892:	7cfb      	ldrb	r3, [r7, #19]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d103      	bne.n	80088a0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f8d1 	bl	8008a40 <HAL_SPI_RxCpltCallback>
    return;
 800889e:	e0c7      	b.n	8008a30 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80088a0:	7cfb      	ldrb	r3, [r7, #19]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	f040 80c4 	bne.w	8008a30 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7f9 f8d7 	bl	8001a5c <HAL_SPI_TxCpltCallback>
    return;
 80088ae:	e0bf      	b.n	8008a30 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 80bd 	beq.w	8008a36 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00f      	beq.n	80088e6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088cc:	f043 0204 	orr.w	r2, r3, #4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088e4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00f      	beq.n	8008910 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088f6:	f043 0201 	orr.w	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	699a      	ldr	r2, [r3, #24]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800890e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00f      	beq.n	800893a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008920:	f043 0208 	orr.w	r2, r3, #8
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008938:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00f      	beq.n	8008964 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800894a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0220 	orr.w	r2, r2, #32
 8008962:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800896a:	2b00      	cmp	r3, #0
 800896c:	d062      	beq.n	8008a34 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0201 	bic.w	r2, r2, #1
 800897c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800898c:	f023 0303 	bic.w	r3, r3, #3
 8008990:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008998:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800899c:	d13e      	bne.n	8008a1c <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80089ac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d015      	beq.n	80089e4 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089be:	4a1f      	ldr	r2, [pc, #124]	@ (8008a3c <HAL_SPI_IRQHandler+0x3a4>)
 80089c0:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fb fdad 	bl	8004528 <HAL_DMA_Abort_IT>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d022      	beq.n	8008a34 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f4:	4a11      	ldr	r2, [pc, #68]	@ (8008a3c <HAL_SPI_IRQHandler+0x3a4>)
 80089f6:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fb fd92 	bl	8004528 <HAL_DMA_Abort_IT>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d014      	beq.n	8008a34 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008a1a:	e00b      	b.n	8008a34 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7f9 f803 	bl	8001a30 <HAL_SPI_ErrorCallback>
    return;
 8008a2a:	e003      	b.n	8008a34 <HAL_SPI_IRQHandler+0x39c>
    return;
 8008a2c:	bf00      	nop
 8008a2e:	e002      	b.n	8008a36 <HAL_SPI_IRQHandler+0x39e>
    return;
 8008a30:	bf00      	nop
 8008a32:	e000      	b.n	8008a36 <HAL_SPI_IRQHandler+0x39e>
    return;
 8008a34:	bf00      	nop
  }
}
 8008a36:	3728      	adds	r7, #40	@ 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	08008b39 	.word	0x08008b39

08008a40 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a9c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b07      	cmp	r3, #7
 8008aa8:	d011      	beq.n	8008ace <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab2:	2b81      	cmp	r3, #129	@ 0x81
 8008ab4:	d103      	bne.n	8008abe <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7f8 ffd0 	bl	8001a5c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008abc:	e007      	b.n	8008ace <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f042 0208 	orr.w	r2, r2, #8
 8008acc:	611a      	str	r2, [r3, #16]
}
 8008ace:	bf00      	nop
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ae2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff ffbf 	bl	8008a68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008afe:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fb fe9b 	bl	800483c <HAL_DMA_GetError>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d011      	beq.n	8008b30 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 f82d 	bl	8008b6c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b18:	f043 0210 	orr.w	r2, r3, #16
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f7f8 ff80 	bl	8001a30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f7f8 ff66 	bl	8001a30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0208 	orr.w	r2, r2, #8
 8008b8a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f042 0210 	orr.w	r2, r2, #16
 8008b9a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 0201 	bic.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008bce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d014      	beq.n	8008c06 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00f      	beq.n	8008c06 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	699a      	ldr	r2, [r3, #24]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 0220 	orr.w	r2, r2, #32
 8008c04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d014      	beq.n	8008c3c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00f      	beq.n	8008c3c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c22:	f043 0204 	orr.w	r2, r3, #4
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699a      	ldr	r2, [r3, #24]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c4c:	f043 0201 	orr.w	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00f      	beq.n	8008c90 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c76:	f043 0208 	orr.w	r2, r3, #8
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	699a      	ldr	r2, [r3, #24]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008ca0:	bf00      	nop
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cbc:	e010      	b.n	8008ce0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cbe:	f7f8 ff93 	bl	8001be8 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d803      	bhi.n	8008cd6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d102      	bne.n	8008cdc <SPI_WaitOnFlagUntilTimeout+0x30>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e00f      	b.n	8008d00 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695a      	ldr	r2, [r3, #20]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	bf0c      	ite	eq
 8008cf0:	2301      	moveq	r3, #1
 8008cf2:	2300      	movne	r3, #0
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	79fb      	ldrb	r3, [r7, #7]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d0df      	beq.n	8008cbe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d14:	095b      	lsrs	r3, r3, #5
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	3307      	adds	r3, #7
 8008d26:	08db      	lsrs	r3, r3, #3
 8008d28:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d12e      	bne.n	8008db2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e028      	b.n	8008db4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0201 	bic.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008d8e:	ea42 0103 	orr.w	r1, r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e000      	b.n	8008db4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
  }
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e049      	b.n	8008e66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7f7 ffb6 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f000 fb50 	bl	80094a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d001      	beq.n	8008e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e072      	b.n	8008f6e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68da      	ldr	r2, [r3, #12]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a35      	ldr	r2, [pc, #212]	@ (8008f7c <HAL_TIM_Base_Start_IT+0x10c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d040      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a34      	ldr	r2, [pc, #208]	@ (8008f80 <HAL_TIM_Base_Start_IT+0x110>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d03b      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ebc:	d036      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ec6:	d031      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8008f84 <HAL_TIM_Base_Start_IT+0x114>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d02c      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8008f88 <HAL_TIM_Base_Start_IT+0x118>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d027      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8008f8c <HAL_TIM_Base_Start_IT+0x11c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d022      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a29      	ldr	r2, [pc, #164]	@ (8008f90 <HAL_TIM_Base_Start_IT+0x120>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d01d      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a27      	ldr	r2, [pc, #156]	@ (8008f94 <HAL_TIM_Base_Start_IT+0x124>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d018      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a26      	ldr	r2, [pc, #152]	@ (8008f98 <HAL_TIM_Base_Start_IT+0x128>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d013      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a24      	ldr	r2, [pc, #144]	@ (8008f9c <HAL_TIM_Base_Start_IT+0x12c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d00e      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a23      	ldr	r2, [pc, #140]	@ (8008fa0 <HAL_TIM_Base_Start_IT+0x130>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d009      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a21      	ldr	r2, [pc, #132]	@ (8008fa4 <HAL_TIM_Base_Start_IT+0x134>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d004      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xbc>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a20      	ldr	r2, [pc, #128]	@ (8008fa8 <HAL_TIM_Base_Start_IT+0x138>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d115      	bne.n	8008f58 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	4b1e      	ldr	r3, [pc, #120]	@ (8008fac <HAL_TIM_Base_Start_IT+0x13c>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b06      	cmp	r3, #6
 8008f3c:	d015      	beq.n	8008f6a <HAL_TIM_Base_Start_IT+0xfa>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f44:	d011      	beq.n	8008f6a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0201 	orr.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f56:	e008      	b.n	8008f6a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	e000      	b.n	8008f6c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	40012c00 	.word	0x40012c00
 8008f80:	50012c00 	.word	0x50012c00
 8008f84:	40000400 	.word	0x40000400
 8008f88:	50000400 	.word	0x50000400
 8008f8c:	40000800 	.word	0x40000800
 8008f90:	50000800 	.word	0x50000800
 8008f94:	40000c00 	.word	0x40000c00
 8008f98:	50000c00 	.word	0x50000c00
 8008f9c:	40013400 	.word	0x40013400
 8008fa0:	50013400 	.word	0x50013400
 8008fa4:	40014000 	.word	0x40014000
 8008fa8:	50014000 	.word	0x50014000
 8008fac:	00010007 	.word	0x00010007

08008fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d020      	beq.n	8009014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01b      	beq.n	8009014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0202 	mvn.w	r2, #2
 8008fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	f003 0303 	and.w	r3, r3, #3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa34 	bl	8009468 <HAL_TIM_IC_CaptureCallback>
 8009000:	e005      	b.n	800900e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa26 	bl	8009454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa37 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	d020      	beq.n	8009060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01b      	beq.n	8009060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f06f 0204 	mvn.w	r2, #4
 8009030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa0e 	bl	8009468 <HAL_TIM_IC_CaptureCallback>
 800904c:	e005      	b.n	800905a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa00 	bl	8009454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa11 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f003 0308 	and.w	r3, r3, #8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d020      	beq.n	80090ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01b      	beq.n	80090ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0208 	mvn.w	r2, #8
 800907c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2204      	movs	r2, #4
 8009082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f9e8 	bl	8009468 <HAL_TIM_IC_CaptureCallback>
 8009098:	e005      	b.n	80090a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f9da 	bl	8009454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9eb 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f003 0310 	and.w	r3, r3, #16
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d020      	beq.n	80090f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01b      	beq.n	80090f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f06f 0210 	mvn.w	r2, #16
 80090c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2208      	movs	r2, #8
 80090ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f9c2 	bl	8009468 <HAL_TIM_IC_CaptureCallback>
 80090e4:	e005      	b.n	80090f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f9b4 	bl	8009454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f9c5 	bl	800947c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00c      	beq.n	800911c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f06f 0201 	mvn.w	r2, #1
 8009114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7f7 fbdc 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00c      	beq.n	800914a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009136:	2b00      	cmp	r3, #0
 8009138:	d007      	beq.n	800914a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fc1b 	bl	8009980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00c      	beq.n	800916e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fc13 	bl	8009994 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d007      	beq.n	8009192 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800918a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f97f 	bl	8009490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f003 0320 	and.w	r3, r3, #32
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00c      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d007      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f06f 0220 	mvn.w	r2, #32
 80091ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fbdb 	bl	800996c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80091d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fbe7 	bl	80099a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80091f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fbdf 	bl	80099bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d007      	beq.n	8009222 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800921a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fbd7 	bl	80099d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00c      	beq.n	8009246 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800923e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fbcf 	bl	80099e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009264:	2b01      	cmp	r3, #1
 8009266:	d101      	bne.n	800926c <HAL_TIM_ConfigClockSource+0x1c>
 8009268:	2302      	movs	r3, #2
 800926a:	e0e6      	b.n	800943a <HAL_TIM_ConfigClockSource+0x1ea>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800928a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800928e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a67      	ldr	r2, [pc, #412]	@ (8009444 <HAL_TIM_ConfigClockSource+0x1f4>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	f000 80b1 	beq.w	800940e <HAL_TIM_ConfigClockSource+0x1be>
 80092ac:	4a65      	ldr	r2, [pc, #404]	@ (8009444 <HAL_TIM_ConfigClockSource+0x1f4>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	f200 80b6 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 80092b4:	4a64      	ldr	r2, [pc, #400]	@ (8009448 <HAL_TIM_ConfigClockSource+0x1f8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	f000 80a9 	beq.w	800940e <HAL_TIM_ConfigClockSource+0x1be>
 80092bc:	4a62      	ldr	r2, [pc, #392]	@ (8009448 <HAL_TIM_ConfigClockSource+0x1f8>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	f200 80ae 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 80092c4:	4a61      	ldr	r2, [pc, #388]	@ (800944c <HAL_TIM_ConfigClockSource+0x1fc>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	f000 80a1 	beq.w	800940e <HAL_TIM_ConfigClockSource+0x1be>
 80092cc:	4a5f      	ldr	r2, [pc, #380]	@ (800944c <HAL_TIM_ConfigClockSource+0x1fc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	f200 80a6 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 80092d4:	4a5e      	ldr	r2, [pc, #376]	@ (8009450 <HAL_TIM_ConfigClockSource+0x200>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	f000 8099 	beq.w	800940e <HAL_TIM_ConfigClockSource+0x1be>
 80092dc:	4a5c      	ldr	r2, [pc, #368]	@ (8009450 <HAL_TIM_ConfigClockSource+0x200>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	f200 809e 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 80092e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092e8:	f000 8091 	beq.w	800940e <HAL_TIM_ConfigClockSource+0x1be>
 80092ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092f0:	f200 8096 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 80092f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f8:	f000 8089 	beq.w	800940e <HAL_TIM_ConfigClockSource+0x1be>
 80092fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009300:	f200 808e 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009308:	d03e      	beq.n	8009388 <HAL_TIM_ConfigClockSource+0x138>
 800930a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800930e:	f200 8087 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009316:	f000 8086 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1d6>
 800931a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800931e:	d87f      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009320:	2b70      	cmp	r3, #112	@ 0x70
 8009322:	d01a      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x10a>
 8009324:	2b70      	cmp	r3, #112	@ 0x70
 8009326:	d87b      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009328:	2b60      	cmp	r3, #96	@ 0x60
 800932a:	d050      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x17e>
 800932c:	2b60      	cmp	r3, #96	@ 0x60
 800932e:	d877      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009330:	2b50      	cmp	r3, #80	@ 0x50
 8009332:	d03c      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x15e>
 8009334:	2b50      	cmp	r3, #80	@ 0x50
 8009336:	d873      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009338:	2b40      	cmp	r3, #64	@ 0x40
 800933a:	d058      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x19e>
 800933c:	2b40      	cmp	r3, #64	@ 0x40
 800933e:	d86f      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009340:	2b30      	cmp	r3, #48	@ 0x30
 8009342:	d064      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x1be>
 8009344:	2b30      	cmp	r3, #48	@ 0x30
 8009346:	d86b      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009348:	2b20      	cmp	r3, #32
 800934a:	d060      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x1be>
 800934c:	2b20      	cmp	r3, #32
 800934e:	d867      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
 8009350:	2b00      	cmp	r3, #0
 8009352:	d05c      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x1be>
 8009354:	2b10      	cmp	r3, #16
 8009356:	d05a      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x1be>
 8009358:	e062      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800936a:	f000 fa1d 	bl	80097a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800937c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	609a      	str	r2, [r3, #8]
      break;
 8009386:	e04f      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009398:	f000 fa06 	bl	80097a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093aa:	609a      	str	r2, [r3, #8]
      break;
 80093ac:	e03c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	461a      	mov	r2, r3
 80093bc:	f000 f978 	bl	80096b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2150      	movs	r1, #80	@ 0x50
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f9d1 	bl	800976e <TIM_ITRx_SetConfig>
      break;
 80093cc:	e02c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093da:	461a      	mov	r2, r3
 80093dc:	f000 f997 	bl	800970e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2160      	movs	r1, #96	@ 0x60
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f9c1 	bl	800976e <TIM_ITRx_SetConfig>
      break;
 80093ec:	e01c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093fa:	461a      	mov	r2, r3
 80093fc:	f000 f958 	bl	80096b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2140      	movs	r1, #64	@ 0x40
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f9b1 	bl	800976e <TIM_ITRx_SetConfig>
      break;
 800940c:	e00c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f000 f9a8 	bl	800976e <TIM_ITRx_SetConfig>
      break;
 800941e:	e003      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	73fb      	strb	r3, [r7, #15]
      break;
 8009424:	e000      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009438:	7bfb      	ldrb	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	00100070 	.word	0x00100070
 8009448:	00100040 	.word	0x00100040
 800944c:	00100030 	.word	0x00100030
 8009450:	00100020 	.word	0x00100020

08009454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a6e      	ldr	r2, [pc, #440]	@ (8009670 <TIM_Base_SetConfig+0x1cc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d02b      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a6d      	ldr	r2, [pc, #436]	@ (8009674 <TIM_Base_SetConfig+0x1d0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d027      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ca:	d023      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094d2:	d01f      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a68      	ldr	r2, [pc, #416]	@ (8009678 <TIM_Base_SetConfig+0x1d4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d01b      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a67      	ldr	r2, [pc, #412]	@ (800967c <TIM_Base_SetConfig+0x1d8>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d017      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a66      	ldr	r2, [pc, #408]	@ (8009680 <TIM_Base_SetConfig+0x1dc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d013      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a65      	ldr	r2, [pc, #404]	@ (8009684 <TIM_Base_SetConfig+0x1e0>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00f      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a64      	ldr	r2, [pc, #400]	@ (8009688 <TIM_Base_SetConfig+0x1e4>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00b      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a63      	ldr	r2, [pc, #396]	@ (800968c <TIM_Base_SetConfig+0x1e8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d007      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a62      	ldr	r2, [pc, #392]	@ (8009690 <TIM_Base_SetConfig+0x1ec>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d003      	beq.n	8009514 <TIM_Base_SetConfig+0x70>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a61      	ldr	r2, [pc, #388]	@ (8009694 <TIM_Base_SetConfig+0x1f0>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d108      	bne.n	8009526 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800951a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a51      	ldr	r2, [pc, #324]	@ (8009670 <TIM_Base_SetConfig+0x1cc>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d043      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a50      	ldr	r2, [pc, #320]	@ (8009674 <TIM_Base_SetConfig+0x1d0>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d03f      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800953c:	d03b      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009544:	d037      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a4b      	ldr	r2, [pc, #300]	@ (8009678 <TIM_Base_SetConfig+0x1d4>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d033      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a4a      	ldr	r2, [pc, #296]	@ (800967c <TIM_Base_SetConfig+0x1d8>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d02f      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a49      	ldr	r2, [pc, #292]	@ (8009680 <TIM_Base_SetConfig+0x1dc>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d02b      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a48      	ldr	r2, [pc, #288]	@ (8009684 <TIM_Base_SetConfig+0x1e0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d027      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a47      	ldr	r2, [pc, #284]	@ (8009688 <TIM_Base_SetConfig+0x1e4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d023      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a46      	ldr	r2, [pc, #280]	@ (800968c <TIM_Base_SetConfig+0x1e8>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d01f      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a45      	ldr	r2, [pc, #276]	@ (8009690 <TIM_Base_SetConfig+0x1ec>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d01b      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a44      	ldr	r2, [pc, #272]	@ (8009694 <TIM_Base_SetConfig+0x1f0>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d017      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a43      	ldr	r2, [pc, #268]	@ (8009698 <TIM_Base_SetConfig+0x1f4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d013      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a42      	ldr	r2, [pc, #264]	@ (800969c <TIM_Base_SetConfig+0x1f8>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00f      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a41      	ldr	r2, [pc, #260]	@ (80096a0 <TIM_Base_SetConfig+0x1fc>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d00b      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a40      	ldr	r2, [pc, #256]	@ (80096a4 <TIM_Base_SetConfig+0x200>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d007      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a3f      	ldr	r2, [pc, #252]	@ (80096a8 <TIM_Base_SetConfig+0x204>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d003      	beq.n	80095b6 <TIM_Base_SetConfig+0x112>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a3e      	ldr	r2, [pc, #248]	@ (80096ac <TIM_Base_SetConfig+0x208>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d108      	bne.n	80095c8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a20      	ldr	r2, [pc, #128]	@ (8009670 <TIM_Base_SetConfig+0x1cc>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d023      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009674 <TIM_Base_SetConfig+0x1d0>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d01f      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a24      	ldr	r2, [pc, #144]	@ (8009690 <TIM_Base_SetConfig+0x1ec>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d01b      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a23      	ldr	r2, [pc, #140]	@ (8009694 <TIM_Base_SetConfig+0x1f0>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d017      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a22      	ldr	r2, [pc, #136]	@ (8009698 <TIM_Base_SetConfig+0x1f4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d013      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a21      	ldr	r2, [pc, #132]	@ (800969c <TIM_Base_SetConfig+0x1f8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d00f      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a20      	ldr	r2, [pc, #128]	@ (80096a0 <TIM_Base_SetConfig+0x1fc>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00b      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a1f      	ldr	r2, [pc, #124]	@ (80096a4 <TIM_Base_SetConfig+0x200>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a1e      	ldr	r2, [pc, #120]	@ (80096a8 <TIM_Base_SetConfig+0x204>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_Base_SetConfig+0x198>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a1d      	ldr	r2, [pc, #116]	@ (80096ac <TIM_Base_SetConfig+0x208>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d103      	bne.n	8009644 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	691a      	ldr	r2, [r3, #16]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b01      	cmp	r3, #1
 8009654:	d105      	bne.n	8009662 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	f023 0201 	bic.w	r2, r3, #1
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	611a      	str	r2, [r3, #16]
  }
}
 8009662:	bf00      	nop
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	40012c00 	.word	0x40012c00
 8009674:	50012c00 	.word	0x50012c00
 8009678:	40000400 	.word	0x40000400
 800967c:	50000400 	.word	0x50000400
 8009680:	40000800 	.word	0x40000800
 8009684:	50000800 	.word	0x50000800
 8009688:	40000c00 	.word	0x40000c00
 800968c:	50000c00 	.word	0x50000c00
 8009690:	40013400 	.word	0x40013400
 8009694:	50013400 	.word	0x50013400
 8009698:	40014000 	.word	0x40014000
 800969c:	50014000 	.word	0x50014000
 80096a0:	40014400 	.word	0x40014400
 80096a4:	50014400 	.word	0x50014400
 80096a8:	40014800 	.word	0x40014800
 80096ac:	50014800 	.word	0x50014800

080096b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	f023 0201 	bic.w	r2, r3, #1
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	011b      	lsls	r3, r3, #4
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f023 030a 	bic.w	r3, r3, #10
 80096ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	621a      	str	r2, [r3, #32]
}
 8009702:	bf00      	nop
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800970e:	b480      	push	{r7}
 8009710:	b087      	sub	sp, #28
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	f023 0210 	bic.w	r2, r3, #16
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	031b      	lsls	r3, r3, #12
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4313      	orrs	r3, r2
 8009742:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800974a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	011b      	lsls	r3, r3, #4
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	4313      	orrs	r3, r2
 8009754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	621a      	str	r2, [r3, #32]
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800976e:	b480      	push	{r7}
 8009770:	b085      	sub	sp, #20
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4313      	orrs	r3, r2
 8009790:	f043 0307 	orr.w	r3, r3, #7
 8009794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	609a      	str	r2, [r3, #8]
}
 800979c:	bf00      	nop
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	021a      	lsls	r2, r3, #8
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	431a      	orrs	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	609a      	str	r2, [r3, #8]
}
 80097dc:	bf00      	nop
 80097de:	371c      	adds	r7, #28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e097      	b.n	8009930 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a45      	ldr	r2, [pc, #276]	@ (800993c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d00e      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a44      	ldr	r2, [pc, #272]	@ (8009940 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d009      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a42      	ldr	r2, [pc, #264]	@ (8009944 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d004      	beq.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a41      	ldr	r2, [pc, #260]	@ (8009948 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d108      	bne.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800984e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	4313      	orrs	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a2f      	ldr	r2, [pc, #188]	@ (800993c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d040      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a2e      	ldr	r2, [pc, #184]	@ (8009940 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d03b      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009894:	d036      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800989e:	d031      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a29      	ldr	r2, [pc, #164]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d02c      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a28      	ldr	r2, [pc, #160]	@ (8009950 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d027      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a26      	ldr	r2, [pc, #152]	@ (8009954 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d022      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a25      	ldr	r2, [pc, #148]	@ (8009958 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d01d      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a23      	ldr	r2, [pc, #140]	@ (800995c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d018      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a22      	ldr	r2, [pc, #136]	@ (8009960 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d013      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a18      	ldr	r2, [pc, #96]	@ (8009944 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00e      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a17      	ldr	r2, [pc, #92]	@ (8009948 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d009      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009964 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009968 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d10c      	bne.n	800991e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800990a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	4313      	orrs	r3, r2
 8009914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	40012c00 	.word	0x40012c00
 8009940:	50012c00 	.word	0x50012c00
 8009944:	40013400 	.word	0x40013400
 8009948:	50013400 	.word	0x50013400
 800994c:	40000400 	.word	0x40000400
 8009950:	50000400 	.word	0x50000400
 8009954:	40000800 	.word	0x40000800
 8009958:	50000800 	.word	0x50000800
 800995c:	40000c00 	.word	0x40000c00
 8009960:	50000c00 	.word	0x50000c00
 8009964:	40014000 	.word	0x40014000
 8009968:	50014000 	.word	0x50014000

0800996c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <__NVIC_SetPriority>:
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	db0a      	blt.n	8009a22 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	490c      	ldr	r1, [pc, #48]	@ (8009a44 <__NVIC_SetPriority+0x4c>)
 8009a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a16:	0112      	lsls	r2, r2, #4
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009a20:	e00a      	b.n	8009a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	4908      	ldr	r1, [pc, #32]	@ (8009a48 <__NVIC_SetPriority+0x50>)
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	f003 030f 	and.w	r3, r3, #15
 8009a2e:	3b04      	subs	r3, #4
 8009a30:	0112      	lsls	r2, r2, #4
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	440b      	add	r3, r1
 8009a36:	761a      	strb	r2, [r3, #24]
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	e000e100 	.word	0xe000e100
 8009a48:	e000ed00 	.word	0xe000ed00

08009a4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a50:	4b05      	ldr	r3, [pc, #20]	@ (8009a68 <SysTick_Handler+0x1c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a54:	f002 faaa 	bl	800bfac <xTaskGetSchedulerState>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d001      	beq.n	8009a62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a5e:	f003 f81d 	bl	800ca9c <xPortSysTickHandler>
  }
}
 8009a62:	bf00      	nop
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	e000e010 	.word	0xe000e010

08009a6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8009a70:	2100      	movs	r1, #0
 8009a72:	f06f 0004 	mvn.w	r0, #4
 8009a76:	f7ff ffbf 	bl	80099f8 <__NVIC_SetPriority>
#endif
}
 8009a7a:	bf00      	nop
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b086      	sub	sp, #24
 8009a82:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a88:	f3ef 8305 	mrs	r3, IPSR
 8009a8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a8e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e013      	b.n	8009ac2 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8009a9a:	f002 fa87 	bl	800bfac <xTaskGetSchedulerState>
 8009a9e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d00d      	beq.n	8009ac2 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8009aaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8009aac:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ab6:	607b      	str	r3, [r7, #4]
  return(result);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8009ac2:	697b      	ldr	r3, [r7, #20]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8009ad2:	f7ff ffd4 	bl	8009a7e <IRQ_Context>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8009adc:	f06f 0305 	mvn.w	r3, #5
 8009ae0:	607b      	str	r3, [r7, #4]
 8009ae2:	e012      	b.n	8009b0a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8009ae4:	f002 fa62 	bl	800bfac <xTaskGetSchedulerState>
 8009ae8:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d109      	bne.n	8009b04 <osKernelInitialize+0x38>
 8009af0:	4b08      	ldr	r3, [pc, #32]	@ (8009b14 <osKernelInitialize+0x48>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d105      	bne.n	8009b04 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009af8:	4b06      	ldr	r3, [pc, #24]	@ (8009b14 <osKernelInitialize+0x48>)
 8009afa:	2201      	movs	r2, #1
 8009afc:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	607b      	str	r3, [r7, #4]
 8009b02:	e002      	b.n	8009b0a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8009b04:	f04f 33ff 	mov.w	r3, #4294967295
 8009b08:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8009b0a:	687b      	ldr	r3, [r7, #4]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	200006a4 	.word	0x200006a4

08009b18 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8009b1e:	f7ff ffae 	bl	8009a7e <IRQ_Context>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <osKernelStart+0x18>
    stat = osErrorISR;
 8009b28:	f06f 0305 	mvn.w	r3, #5
 8009b2c:	607b      	str	r3, [r7, #4]
 8009b2e:	e016      	b.n	8009b5e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8009b30:	f002 fa3c 	bl	800bfac <xTaskGetSchedulerState>
 8009b34:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d10d      	bne.n	8009b58 <osKernelStart+0x40>
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b68 <osKernelStart+0x50>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d109      	bne.n	8009b58 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b44:	f7ff ff92 	bl	8009a6c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8009b48:	4b07      	ldr	r3, [pc, #28]	@ (8009b68 <osKernelStart+0x50>)
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b4e:	f001 fcd7 	bl	800b500 <vTaskStartScheduler>
      stat = osOK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	607b      	str	r3, [r7, #4]
 8009b56:	e002      	b.n	8009b5e <osKernelStart+0x46>
    } else {
      stat = osError;
 8009b58:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8009b5e:	687b      	ldr	r3, [r7, #4]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	200006a4 	.word	0x200006a4

08009b6c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08e      	sub	sp, #56	@ 0x38
 8009b70:	af04      	add	r7, sp, #16
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8009b7c:	f7ff ff7f 	bl	8009a7e <IRQ_Context>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d17e      	bne.n	8009c84 <osThreadNew+0x118>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d07b      	beq.n	8009c84 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8009b8c:	2380      	movs	r3, #128	@ 0x80
 8009b8e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b90:	2318      	movs	r3, #24
 8009b92:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b94:	2300      	movs	r3, #0
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d045      	beq.n	8009c30 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <osThreadNew+0x46>
        name = attr->name;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <osThreadNew+0x6c>
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	2b38      	cmp	r3, #56	@ 0x38
 8009bca:	d805      	bhi.n	8009bd8 <osThreadNew+0x6c>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e054      	b.n	8009c86 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	089b      	lsrs	r3, r3, #2
 8009bea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00e      	beq.n	8009c12 <osThreadNew+0xa6>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2ba7      	cmp	r3, #167	@ 0xa7
 8009bfa:	d90a      	bls.n	8009c12 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d006      	beq.n	8009c12 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	e010      	b.n	8009c34 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10c      	bne.n	8009c34 <osThreadNew+0xc8>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d108      	bne.n	8009c34 <osThreadNew+0xc8>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d104      	bne.n	8009c34 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	e001      	b.n	8009c34 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d110      	bne.n	8009c5c <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c42:	9202      	str	r2, [sp, #8]
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6a3a      	ldr	r2, [r7, #32]
 8009c4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f001 fa6f 	bl	800b134 <xTaskCreateStatic>
 8009c56:	4603      	mov	r3, r0
 8009c58:	617b      	str	r3, [r7, #20]
 8009c5a:	e013      	b.n	8009c84 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d110      	bne.n	8009c84 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	f107 0314 	add.w	r3, r7, #20
 8009c6a:	9301      	str	r3, [sp, #4]
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f001 faaa 	bl	800b1ce <xTaskCreate>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d001      	beq.n	8009c84 <osThreadNew+0x118>
            hTask = NULL;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8009c84:	697b      	ldr	r3, [r7, #20]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3728      	adds	r7, #40	@ 0x28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8009c96:	f7ff fef2 	bl	8009a7e <IRQ_Context>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <osDelay+0x1a>
    stat = osErrorISR;
 8009ca0:	f06f 0305 	mvn.w	r3, #5
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	e007      	b.n	8009cb8 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <osDelay+0x2a>
      vTaskDelay(ticks);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fbfe 	bl	800b4b4 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b088      	sub	sp, #32
 8009cc6:	af02      	add	r7, sp, #8
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 8009cd2:	f7ff fed4 	bl	8009a7e <IRQ_Context>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d175      	bne.n	8009dc8 <osSemaphoreNew+0x106>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d072      	beq.n	8009dc8 <osSemaphoreNew+0x106>
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d86e      	bhi.n	8009dc8 <osSemaphoreNew+0x106>
    mem = -1;
 8009cea:	f04f 33ff 	mov.w	r3, #4294967295
 8009cee:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d015      	beq.n	8009d22 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d006      	beq.n	8009d0c <osSemaphoreNew+0x4a>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	2b4f      	cmp	r3, #79	@ 0x4f
 8009d04:	d902      	bls.n	8009d0c <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 8009d06:	2301      	movs	r3, #1
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	e00c      	b.n	8009d26 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <osSemaphoreNew+0x64>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	e001      	b.n	8009d26 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2c:	d04c      	beq.n	8009dc8 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d128      	bne.n	8009d86 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d10a      	bne.n	8009d50 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2203      	movs	r2, #3
 8009d40:	9200      	str	r2, [sp, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	2100      	movs	r1, #0
 8009d46:	2001      	movs	r0, #1
 8009d48:	f000 fb2f 	bl	800a3aa <xQueueGenericCreateStatic>
 8009d4c:	6178      	str	r0, [r7, #20]
 8009d4e:	e005      	b.n	8009d5c <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009d50:	2203      	movs	r2, #3
 8009d52:	2100      	movs	r1, #0
 8009d54:	2001      	movs	r0, #1
 8009d56:	f000 fb71 	bl	800a43c <xQueueGenericCreate>
 8009d5a:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d022      	beq.n	8009da8 <osSemaphoreNew+0xe6>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01f      	beq.n	8009da8 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6978      	ldr	r0, [r7, #20]
 8009d70:	f000 fc24 	bl	800a5bc <xQueueGenericSend>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d016      	beq.n	8009da8 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 8009d7a:	6978      	ldr	r0, [r7, #20]
 8009d7c:	f000 ffeb 	bl	800ad56 <vQueueDelete>
            hSemaphore = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e010      	b.n	8009da8 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d108      	bne.n	8009d9e <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	461a      	mov	r2, r3
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 fbbf 	bl	800a518 <xQueueCreateCountingSemaphoreStatic>
 8009d9a:	6178      	str	r0, [r7, #20]
 8009d9c:	e004      	b.n	8009da8 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fbe4 	bl	800a56e <xQueueCreateCountingSemaphore>
 8009da6:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d009      	beq.n	8009dc8 <osSemaphoreNew+0x106>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6978      	ldr	r0, [r7, #20]
 8009dc4:	f001 f90c 	bl	800afe0 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 8009dc8:	697b      	ldr	r3, [r7, #20]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d103      	bne.n	8009df4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009dec:	f06f 0303 	mvn.w	r3, #3
 8009df0:	617b      	str	r3, [r7, #20]
 8009df2:	e034      	b.n	8009e5e <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 8009df4:	f7ff fe43 	bl	8009a7e <IRQ_Context>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d01e      	beq.n	8009e3c <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 8009e04:	f06f 0303 	mvn.w	r3, #3
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e028      	b.n	8009e5e <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009e10:	f107 030c 	add.w	r3, r7, #12
 8009e14:	461a      	mov	r2, r3
 8009e16:	2100      	movs	r1, #0
 8009e18:	6938      	ldr	r0, [r7, #16]
 8009e1a:	f000 ff2c 	bl	800ac76 <xQueueReceiveFromISR>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d003      	beq.n	8009e2c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 8009e24:	f06f 0302 	mvn.w	r3, #2
 8009e28:	617b      	str	r3, [r7, #20]
 8009e2a:	e018      	b.n	8009e5e <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d015      	beq.n	8009e5e <osSemaphoreAcquire+0x8a>
 8009e32:	4b0d      	ldr	r3, [pc, #52]	@ (8009e68 <osSemaphoreAcquire+0x94>)
 8009e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e010      	b.n	8009e5e <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6938      	ldr	r0, [r7, #16]
 8009e40:	f000 fe3f 	bl	800aac2 <xQueueSemaphoreTake>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d009      	beq.n	8009e5e <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 8009e50:	f06f 0301 	mvn.w	r3, #1
 8009e54:	617b      	str	r3, [r7, #20]
 8009e56:	e002      	b.n	8009e5e <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 8009e58:	f06f 0302 	mvn.w	r3, #2
 8009e5c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8009e5e:	697b      	ldr	r3, [r7, #20]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	e000ed04 	.word	0xe000ed04

08009e6c <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d103      	bne.n	8009e8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009e82:	f06f 0303 	mvn.w	r3, #3
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	e027      	b.n	8009eda <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 8009e8a:	f7ff fdf8 	bl	8009a7e <IRQ_Context>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d016      	beq.n	8009ec2 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009e98:	f107 030c 	add.w	r3, r7, #12
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6938      	ldr	r0, [r7, #16]
 8009ea0:	f000 fcdd 	bl	800a85e <xQueueGiveFromISR>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d003      	beq.n	8009eb2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8009eaa:	f06f 0302 	mvn.w	r3, #2
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e013      	b.n	8009eda <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d010      	beq.n	8009eda <osSemaphoreRelease+0x6e>
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <osSemaphoreRelease+0x78>)
 8009eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	e00b      	b.n	8009eda <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6938      	ldr	r0, [r7, #16]
 8009eca:	f000 fb77 	bl	800a5bc <xQueueGenericSend>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d002      	beq.n	8009eda <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 8009ed4:	f06f 0302 	mvn.w	r3, #2
 8009ed8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 8009eda:	697b      	ldr	r3, [r7, #20]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	e000ed04 	.word	0xe000ed04

08009ee8 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 8009ef8:	f7ff fdc1 	bl	8009a7e <IRQ_Context>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d15f      	bne.n	8009fc2 <osMessageQueueNew+0xda>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d05c      	beq.n	8009fc2 <osMessageQueueNew+0xda>
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d059      	beq.n	8009fc2 <osMessageQueueNew+0xda>
    mem = -1;
 8009f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f12:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d029      	beq.n	8009f6e <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d012      	beq.n	8009f48 <osMessageQueueNew+0x60>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b4f      	cmp	r3, #79	@ 0x4f
 8009f28:	d90e      	bls.n	8009f48 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	695a      	ldr	r2, [r3, #20]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	fb01 f303 	mul.w	r3, r1, r3
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d302      	bcc.n	8009f48 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8009f42:	2301      	movs	r3, #1
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	e014      	b.n	8009f72 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d110      	bne.n	8009f72 <osMessageQueueNew+0x8a>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10c      	bne.n	8009f72 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d108      	bne.n	8009f72 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	613b      	str	r3, [r7, #16]
 8009f6c:	e001      	b.n	8009f72 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d10b      	bne.n	8009f90 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	2100      	movs	r1, #0
 8009f82:	9100      	str	r1, [sp, #0]
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fa0f 	bl	800a3aa <xQueueGenericCreateStatic>
 8009f8c:	6178      	str	r0, [r7, #20]
 8009f8e:	e008      	b.n	8009fa2 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009f96:	2200      	movs	r2, #0
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fa4e 	bl	800a43c <xQueueGenericCreate>
 8009fa0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00c      	beq.n	8009fc2 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <osMessageQueueNew+0xda>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d005      	beq.n	8009fc2 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6978      	ldr	r0, [r7, #20]
 8009fbe:	f001 f80f 	bl	800afe0 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 8009fc2:	697b      	ldr	r3, [r7, #20]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 8009fe4:	f7ff fd4b 	bl	8009a7e <IRQ_Context>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d024      	beq.n	800a038 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <osMessageQueuePut+0x34>
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <osMessageQueuePut+0x34>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800a000:	f06f 0303 	mvn.w	r3, #3
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	e034      	b.n	800a072 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800a008:	2300      	movs	r3, #0
 800a00a:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a00c:	f107 0214 	add.w	r2, r7, #20
 800a010:	2300      	movs	r3, #0
 800a012:	68b9      	ldr	r1, [r7, #8]
 800a014:	69b8      	ldr	r0, [r7, #24]
 800a016:	f000 fb9e 	bl	800a756 <xQueueGenericSendFromISR>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d003      	beq.n	800a028 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800a020:	f06f 0302 	mvn.w	r3, #2
 800a024:	61fb      	str	r3, [r7, #28]
 800a026:	e024      	b.n	800a072 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d021      	beq.n	800a072 <osMessageQueuePut+0xa6>
 800a02e:	4b13      	ldr	r3, [pc, #76]	@ (800a07c <osMessageQueuePut+0xb0>)
 800a030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	e01c      	b.n	800a072 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <osMessageQueuePut+0x78>
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d103      	bne.n	800a04c <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800a044:	f06f 0303 	mvn.w	r3, #3
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	e012      	b.n	800a072 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a04c:	2300      	movs	r3, #0
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	68b9      	ldr	r1, [r7, #8]
 800a052:	69b8      	ldr	r0, [r7, #24]
 800a054:	f000 fab2 	bl	800a5bc <xQueueGenericSend>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d009      	beq.n	800a072 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800a064:	f06f 0301 	mvn.w	r3, #1
 800a068:	61fb      	str	r3, [r7, #28]
 800a06a:	e002      	b.n	800a072 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800a06c:	f06f 0302 	mvn.w	r3, #2
 800a070:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800a072:	69fb      	ldr	r3, [r7, #28]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3720      	adds	r7, #32
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	e000ed04 	.word	0xe000ed04

0800a080 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a092:	2300      	movs	r3, #0
 800a094:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800a096:	f7ff fcf2 	bl	8009a7e <IRQ_Context>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d024      	beq.n	800a0ea <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <osMessageQueueGet+0x32>
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <osMessageQueueGet+0x32>
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800a0b2:	f06f 0303 	mvn.w	r3, #3
 800a0b6:	61fb      	str	r3, [r7, #28]
 800a0b8:	e033      	b.n	800a122 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a0be:	f107 0314 	add.w	r3, r7, #20
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	69b8      	ldr	r0, [r7, #24]
 800a0c8:	f000 fdd5 	bl	800ac76 <xQueueReceiveFromISR>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d003      	beq.n	800a0da <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800a0d2:	f06f 0302 	mvn.w	r3, #2
 800a0d6:	61fb      	str	r3, [r7, #28]
 800a0d8:	e023      	b.n	800a122 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d020      	beq.n	800a122 <osMessageQueueGet+0xa2>
 800a0e0:	4b12      	ldr	r3, [pc, #72]	@ (800a12c <osMessageQueueGet+0xac>)
 800a0e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	e01b      	b.n	800a122 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <osMessageQueueGet+0x76>
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d103      	bne.n	800a0fe <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800a0f6:	f06f 0303 	mvn.w	r3, #3
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e011      	b.n	800a122 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	68b9      	ldr	r1, [r7, #8]
 800a102:	69b8      	ldr	r0, [r7, #24]
 800a104:	f000 fc21 	bl	800a94a <xQueueReceive>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d009      	beq.n	800a122 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800a114:	f06f 0301 	mvn.w	r3, #1
 800a118:	61fb      	str	r3, [r7, #28]
 800a11a:	e002      	b.n	800a122 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800a11c:	f06f 0302 	mvn.w	r3, #2
 800a120:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800a122:	69fb      	ldr	r3, [r7, #28]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	e000ed04 	.word	0xe000ed04

0800a130 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4a07      	ldr	r2, [pc, #28]	@ (800a15c <vApplicationGetIdleTaskMemory+0x2c>)
 800a140:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	4a06      	ldr	r2, [pc, #24]	@ (800a160 <vApplicationGetIdleTaskMemory+0x30>)
 800a146:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2280      	movs	r2, #128	@ 0x80
 800a14c:	601a      	str	r2, [r3, #0]
}
 800a14e:	bf00      	nop
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	200006a8 	.word	0x200006a8
 800a160:	20000750 	.word	0x20000750

0800a164 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4a07      	ldr	r2, [pc, #28]	@ (800a190 <vApplicationGetTimerTaskMemory+0x2c>)
 800a174:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4a06      	ldr	r2, [pc, #24]	@ (800a194 <vApplicationGetTimerTaskMemory+0x30>)
 800a17a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2280      	movs	r2, #128	@ 0x80
 800a180:	601a      	str	r2, [r3, #0]
}
 800a182:	bf00      	nop
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	20000950 	.word	0x20000950
 800a194:	200009f8 	.word	0x200009f8

0800a198 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f103 0208 	add.w	r2, r3, #8
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f103 0208 	add.w	r2, r3, #8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f103 0208 	add.w	r2, r3, #8
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b085      	sub	sp, #20
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a208:	d103      	bne.n	800a212 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	60fb      	str	r3, [r7, #12]
 800a210:	e00c      	b.n	800a22c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3308      	adds	r3, #8
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	e002      	b.n	800a220 <vListInsert+0x2e>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d2f6      	bcs.n	800a21a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	601a      	str	r2, [r3, #0]
}
 800a258:	bf00      	nop
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	6892      	ldr	r2, [r2, #8]
 800a27a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6852      	ldr	r2, [r2, #4]
 800a284:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d103      	bne.n	800a298 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	1e5a      	subs	r2, r3, #1
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d103      	bne.n	800a2d8 <xQueueGenericReset+0x20>
 800a2d0:	f002 fcfa 	bl	800ccc8 <ulSetInterruptMask>
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d057      	beq.n	800a38e <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d053      	beq.n	800a38e <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	fba3 2302 	umull	r2, r3, r3, r2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d000      	beq.n	800a2fa <xQueueGenericReset+0x42>
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d146      	bne.n	800a38e <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800a300:	f002 fba0 	bl	800ca44 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30c:	68b9      	ldr	r1, [r7, #8]
 800a30e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a310:	fb01 f303 	mul.w	r3, r1, r3
 800a314:	441a      	add	r2, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2200      	movs	r2, #0
 800a31e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a330:	3b01      	subs	r3, #1
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a336:	fb01 f303 	mul.w	r3, r1, r3
 800a33a:	441a      	add	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	22ff      	movs	r2, #255	@ 0xff
 800a344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	22ff      	movs	r2, #255	@ 0xff
 800a34c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10e      	bne.n	800a374 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d014      	beq.n	800a388 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	3310      	adds	r3, #16
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fc10 	bl	800bb88 <xTaskRemoveFromEventList>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00c      	beq.n	800a388 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a36e:	f002 fb57 	bl	800ca20 <vPortYield>
 800a372:	e009      	b.n	800a388 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	3310      	adds	r3, #16
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff ff0d 	bl	800a198 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3324      	adds	r3, #36	@ 0x24
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff ff08 	bl	800a198 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800a388:	f002 fb6e 	bl	800ca68 <vPortExitCritical>
 800a38c:	e001      	b.n	800a392 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d103      	bne.n	800a3a0 <xQueueGenericReset+0xe8>
 800a398:	f002 fc96 	bl	800ccc8 <ulSetInterruptMask>
 800a39c:	bf00      	nop
 800a39e:	e7fd      	b.n	800a39c <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b088      	sub	sp, #32
 800a3ae:	af02      	add	r7, sp, #8
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	607a      	str	r2, [r7, #4]
 800a3b6:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d103      	bne.n	800a3ca <xQueueGenericCreateStatic+0x20>
 800a3c2:	f002 fc81 	bl	800ccc8 <ulSetInterruptMask>
 800a3c6:	bf00      	nop
 800a3c8:	e7fd      	b.n	800a3c6 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d029      	beq.n	800a424 <xQueueGenericCreateStatic+0x7a>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d026      	beq.n	800a424 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d020      	beq.n	800a424 <xQueueGenericCreateStatic+0x7a>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d11a      	bne.n	800a424 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800a3ee:	2350      	movs	r3, #80	@ 0x50
 800a3f0:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b50      	cmp	r3, #80	@ 0x50
 800a3f6:	d003      	beq.n	800a400 <xQueueGenericCreateStatic+0x56>
 800a3f8:	f002 fc66 	bl	800ccc8 <ulSetInterruptMask>
 800a3fc:	bf00      	nop
 800a3fe:	e7fd      	b.n	800a3fc <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800a400:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a40e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	4613      	mov	r3, r2
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	68b9      	ldr	r1, [r7, #8]
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 f858 	bl	800a4d2 <prvInitialiseNewQueue>
 800a422:	e006      	b.n	800a432 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <xQueueGenericCreateStatic+0x88>
 800a42a:	f002 fc4d 	bl	800ccc8 <ulSetInterruptMask>
 800a42e:	bf00      	nop
 800a430:	e7fd      	b.n	800a42e <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800a432:	697b      	ldr	r3, [r7, #20]
    }
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08a      	sub	sp, #40	@ 0x28
 800a440:	af02      	add	r7, sp, #8
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4613      	mov	r3, r2
 800a448:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d032      	beq.n	800a4ba <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800a454:	2100      	movs	r1, #0
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	fba3 2302 	umull	r2, r3, r3, r2
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d000      	beq.n	800a464 <xQueueGenericCreate+0x28>
 800a462:	2101      	movs	r1, #1
 800a464:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a466:	2b00      	cmp	r3, #0
 800a468:	d127      	bne.n	800a4ba <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800a472:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800a476:	d820      	bhi.n	800a4ba <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	fb02 f303 	mul.w	r3, r2, r3
 800a480:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	3350      	adds	r3, #80	@ 0x50
 800a486:	4618      	mov	r0, r3
 800a488:	f002 fc7e 	bl	800cd88 <pvPortMalloc>
 800a48c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d019      	beq.n	800a4c8 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	3350      	adds	r3, #80	@ 0x50
 800a49c:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4a6:	79fa      	ldrb	r2, [r7, #7]
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	68b9      	ldr	r1, [r7, #8]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 f80d 	bl	800a4d2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800a4b8:	e006      	b.n	800a4c8 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d103      	bne.n	800a4c8 <xQueueGenericCreate+0x8c>
 800a4c0:	f002 fc02 	bl	800ccc8 <ulSetInterruptMask>
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
    }
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3720      	adds	r7, #32
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	60f8      	str	r0, [r7, #12]
 800a4da:	60b9      	str	r1, [r7, #8]
 800a4dc:	607a      	str	r2, [r7, #4]
 800a4de:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d103      	bne.n	800a4ee <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	e002      	b.n	800a4f4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a500:	2101      	movs	r1, #1
 800a502:	69b8      	ldr	r0, [r7, #24]
 800a504:	f7ff fed8 	bl	800a2b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d013      	beq.n	800a556 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	429a      	cmp	r2, r3
 800a534:	d80f      	bhi.n	800a556 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a536:	2302      	movs	r3, #2
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	2100      	movs	r1, #0
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f7ff ff32 	bl	800a3aa <xQueueGenericCreateStatic>
 800a546:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800a554:	e006      	b.n	800a564 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d103      	bne.n	800a564 <xQueueCreateCountingSemaphoreStatic+0x4c>
 800a55c:	f002 fbb4 	bl	800ccc8 <ulSetInterruptMask>
 800a560:	bf00      	nop
 800a562:	e7fd      	b.n	800a560 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800a564:	697b      	ldr	r3, [r7, #20]
    }
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d010      	beq.n	800a5a4 <xQueueCreateCountingSemaphore+0x36>
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	429a      	cmp	r2, r3
 800a588:	d80c      	bhi.n	800a5a4 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a58a:	2202      	movs	r2, #2
 800a58c:	2100      	movs	r1, #0
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7ff ff54 	bl	800a43c <xQueueGenericCreate>
 800a594:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00a      	beq.n	800a5b2 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800a5a2:	e006      	b.n	800a5b2 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d103      	bne.n	800a5b2 <xQueueCreateCountingSemaphore+0x44>
 800a5aa:	f002 fb8d 	bl	800ccc8 <ulSetInterruptMask>
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
    }
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	@ 0x28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d103      	bne.n	800a5e0 <xQueueGenericSend+0x24>
 800a5d8:	f002 fb76 	bl	800ccc8 <ulSetInterruptMask>
 800a5dc:	bf00      	nop
 800a5de:	e7fd      	b.n	800a5dc <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d103      	bne.n	800a5ee <xQueueGenericSend+0x32>
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <xQueueGenericSend+0x36>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e000      	b.n	800a5f4 <xQueueGenericSend+0x38>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d103      	bne.n	800a600 <xQueueGenericSend+0x44>
 800a5f8:	f002 fb66 	bl	800ccc8 <ulSetInterruptMask>
 800a5fc:	bf00      	nop
 800a5fe:	e7fd      	b.n	800a5fc <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d103      	bne.n	800a60e <xQueueGenericSend+0x52>
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d101      	bne.n	800a612 <xQueueGenericSend+0x56>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <xQueueGenericSend+0x58>
 800a612:	2300      	movs	r3, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueGenericSend+0x64>
 800a618:	f002 fb56 	bl	800ccc8 <ulSetInterruptMask>
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a620:	f001 fcc4 	bl	800bfac <xTaskGetSchedulerState>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d102      	bne.n	800a630 <xQueueGenericSend+0x74>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <xQueueGenericSend+0x78>
 800a630:	2301      	movs	r3, #1
 800a632:	e000      	b.n	800a636 <xQueueGenericSend+0x7a>
 800a634:	2300      	movs	r3, #0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <xQueueGenericSend+0x86>
 800a63a:	f002 fb45 	bl	800ccc8 <ulSetInterruptMask>
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a642:	f002 f9ff 	bl	800ca44 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64e:	429a      	cmp	r2, r3
 800a650:	d302      	bcc.n	800a658 <xQueueGenericSend+0x9c>
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b02      	cmp	r3, #2
 800a656:	d11d      	bne.n	800a694 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	6a38      	ldr	r0, [r7, #32]
 800a65e:	f000 fbae 	bl	800adbe <prvCopyDataToQueue>
 800a662:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	3324      	adds	r3, #36	@ 0x24
 800a670:	4618      	mov	r0, r3
 800a672:	f001 fa89 	bl	800bb88 <xTaskRemoveFromEventList>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d007      	beq.n	800a68c <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800a67c:	f002 f9d0 	bl	800ca20 <vPortYield>
 800a680:	e004      	b.n	800a68c <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800a688:	f002 f9ca 	bl	800ca20 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800a68c:	f002 f9ec 	bl	800ca68 <vPortExitCritical>
                return pdPASS;
 800a690:	2301      	movs	r3, #1
 800a692:	e05c      	b.n	800a74e <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d103      	bne.n	800a6a2 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a69a:	f002 f9e5 	bl	800ca68 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e055      	b.n	800a74e <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a6a8:	f107 0314 	add.w	r3, r7, #20
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 fb39 	bl	800bd24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a6b6:	f002 f9d7 	bl	800ca68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a6ba:	f000 ff85 	bl	800b5c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a6be:	f002 f9c1 	bl	800ca44 <vPortEnterCritical>
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6c8:	b25b      	sxtb	r3, r3
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d103      	bne.n	800a6d8 <xQueueGenericSend+0x11c>
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6de:	b25b      	sxtb	r3, r3
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d103      	bne.n	800a6ee <xQueueGenericSend+0x132>
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6ee:	f002 f9bb 	bl	800ca68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6f2:	1d3a      	adds	r2, r7, #4
 800a6f4:	f107 0314 	add.w	r3, r7, #20
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 fb28 	bl	800bd50 <xTaskCheckForTimeOut>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d11d      	bne.n	800a742 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a706:	6a38      	ldr	r0, [r7, #32]
 800a708:	f000 fc51 	bl	800afae <prvIsQueueFull>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d011      	beq.n	800a736 <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a712:	6a3b      	ldr	r3, [r7, #32]
 800a714:	3310      	adds	r3, #16
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f001 f9d8 	bl	800bad0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800a720:	6a38      	ldr	r0, [r7, #32]
 800a722:	f000 fbdc 	bl	800aede <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800a726:	f000 ff5d 	bl	800b5e4 <xTaskResumeAll>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d188      	bne.n	800a642 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800a730:	f002 f976 	bl	800ca20 <vPortYield>
 800a734:	e785      	b.n	800a642 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800a736:	6a38      	ldr	r0, [r7, #32]
 800a738:	f000 fbd1 	bl	800aede <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a73c:	f000 ff52 	bl	800b5e4 <xTaskResumeAll>
 800a740:	e77f      	b.n	800a642 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800a742:	6a38      	ldr	r0, [r7, #32]
 800a744:	f000 fbcb 	bl	800aede <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a748:	f000 ff4c 	bl	800b5e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800a74c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	@ 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b08a      	sub	sp, #40	@ 0x28
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	607a      	str	r2, [r7, #4]
 800a762:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d103      	bne.n	800a776 <xQueueGenericSendFromISR+0x20>
 800a76e:	f002 faab 	bl	800ccc8 <ulSetInterruptMask>
 800a772:	bf00      	nop
 800a774:	e7fd      	b.n	800a772 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <xQueueGenericSendFromISR+0x2e>
 800a77c:	6a3b      	ldr	r3, [r7, #32]
 800a77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <xQueueGenericSendFromISR+0x32>
 800a784:	2301      	movs	r3, #1
 800a786:	e000      	b.n	800a78a <xQueueGenericSendFromISR+0x34>
 800a788:	2300      	movs	r3, #0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <xQueueGenericSendFromISR+0x40>
 800a78e:	f002 fa9b 	bl	800ccc8 <ulSetInterruptMask>
 800a792:	bf00      	nop
 800a794:	e7fd      	b.n	800a792 <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d103      	bne.n	800a7a4 <xQueueGenericSendFromISR+0x4e>
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d101      	bne.n	800a7a8 <xQueueGenericSendFromISR+0x52>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e000      	b.n	800a7aa <xQueueGenericSendFromISR+0x54>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d103      	bne.n	800a7b6 <xQueueGenericSendFromISR+0x60>
 800a7ae:	f002 fa8b 	bl	800ccc8 <ulSetInterruptMask>
 800a7b2:	bf00      	nop
 800a7b4:	e7fd      	b.n	800a7b2 <xQueueGenericSendFromISR+0x5c>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7b6:	f002 fa87 	bl	800ccc8 <ulSetInterruptMask>
 800a7ba:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d302      	bcc.n	800a7ce <xQueueGenericSendFromISR+0x78>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d13d      	bne.n	800a84a <xQueueGenericSendFromISR+0xf4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7d4:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7da:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	6a38      	ldr	r0, [r7, #32]
 800a7e2:	f000 faec 	bl	800adbe <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800a7e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ee:	d112      	bne.n	800a816 <xQueueGenericSendFromISR+0xc0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f0:	6a3b      	ldr	r3, [r7, #32]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d025      	beq.n	800a844 <xQueueGenericSendFromISR+0xee>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	3324      	adds	r3, #36	@ 0x24
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f001 f9c3 	bl	800bb88 <xTaskRemoveFromEventList>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01d      	beq.n	800a844 <xQueueGenericSendFromISR+0xee>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d01a      	beq.n	800a844 <xQueueGenericSendFromISR+0xee>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e016      	b.n	800a844 <xQueueGenericSendFromISR+0xee>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800a816:	f000 ffe3 	bl	800b7e0 <uxTaskGetNumberOfTasks>
 800a81a:	6138      	str	r0, [r7, #16]
 800a81c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	429a      	cmp	r2, r3
 800a824:	d90e      	bls.n	800a844 <xQueueGenericSendFromISR+0xee>
 800a826:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a82a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a82c:	d103      	bne.n	800a836 <xQueueGenericSendFromISR+0xe0>
 800a82e:	f002 fa4b 	bl	800ccc8 <ulSetInterruptMask>
 800a832:	bf00      	nop
 800a834:	e7fd      	b.n	800a832 <xQueueGenericSendFromISR+0xdc>
 800a836:	7efb      	ldrb	r3, [r7, #27]
 800a838:	3301      	adds	r3, #1
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	b25a      	sxtb	r2, r3
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800a844:	2301      	movs	r3, #1
 800a846:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800a848:	e001      	b.n	800a84e <xQueueGenericSendFromISR+0xf8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a84e:	69f8      	ldr	r0, [r7, #28]
 800a850:	f002 fa47 	bl	800cce2 <vClearInterruptMask>

    return xReturn;
 800a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a856:	4618      	mov	r0, r3
 800a858:	3728      	adds	r7, #40	@ 0x28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b088      	sub	sp, #32
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d103      	bne.n	800a87a <xQueueGiveFromISR+0x1c>
 800a872:	f002 fa29 	bl	800ccc8 <ulSetInterruptMask>
 800a876:	bf00      	nop
 800a878:	e7fd      	b.n	800a876 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <xQueueGiveFromISR+0x2c>
 800a882:	f002 fa21 	bl	800ccc8 <ulSetInterruptMask>
 800a886:	bf00      	nop
 800a888:	e7fd      	b.n	800a886 <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <xQueueGiveFromISR+0x3c>
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <xQueueGiveFromISR+0x40>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <xQueueGiveFromISR+0x42>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d103      	bne.n	800a8ac <xQueueGiveFromISR+0x4e>
 800a8a4:	f002 fa10 	bl	800ccc8 <ulSetInterruptMask>
 800a8a8:	bf00      	nop
 800a8aa:	e7fd      	b.n	800a8a8 <xQueueGiveFromISR+0x4a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8ac:	f002 fa0c 	bl	800ccc8 <ulSetInterruptMask>
 800a8b0:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b6:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d239      	bcs.n	800a936 <xQueueGiveFromISR+0xd8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8c8:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800a8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d112      	bne.n	800a902 <xQueueGiveFromISR+0xa4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d025      	beq.n	800a930 <xQueueGiveFromISR+0xd2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	3324      	adds	r3, #36	@ 0x24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 f94d 	bl	800bb88 <xTaskRemoveFromEventList>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01d      	beq.n	800a930 <xQueueGiveFromISR+0xd2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d01a      	beq.n	800a930 <xQueueGiveFromISR+0xd2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	e016      	b.n	800a930 <xQueueGiveFromISR+0xd2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800a902:	f000 ff6d 	bl	800b7e0 <uxTaskGetNumberOfTasks>
 800a906:	60b8      	str	r0, [r7, #8]
 800a908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d90e      	bls.n	800a930 <xQueueGiveFromISR+0xd2>
 800a912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a916:	2b7f      	cmp	r3, #127	@ 0x7f
 800a918:	d103      	bne.n	800a922 <xQueueGiveFromISR+0xc4>
 800a91a:	f002 f9d5 	bl	800ccc8 <ulSetInterruptMask>
 800a91e:	bf00      	nop
 800a920:	e7fd      	b.n	800a91e <xQueueGiveFromISR+0xc0>
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	3301      	adds	r3, #1
 800a926:	b2db      	uxtb	r3, r3
 800a928:	b25a      	sxtb	r2, r3
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800a930:	2301      	movs	r3, #1
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	e001      	b.n	800a93a <xQueueGiveFromISR+0xdc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800a936:	2300      	movs	r3, #0
 800a938:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a93a:	6978      	ldr	r0, [r7, #20]
 800a93c:	f002 f9d1 	bl	800cce2 <vClearInterruptMask>

    return xReturn;
 800a940:	69fb      	ldr	r3, [r7, #28]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3720      	adds	r7, #32
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b08a      	sub	sp, #40	@ 0x28
 800a94e:	af00      	add	r7, sp, #0
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a956:	2300      	movs	r3, #0
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <xQueueReceive+0x22>
 800a964:	f002 f9b0 	bl	800ccc8 <ulSetInterruptMask>
 800a968:	bf00      	nop
 800a96a:	e7fd      	b.n	800a968 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d103      	bne.n	800a97a <xQueueReceive+0x30>
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <xQueueReceive+0x34>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <xQueueReceive+0x36>
 800a97e:	2300      	movs	r3, #0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d103      	bne.n	800a98c <xQueueReceive+0x42>
 800a984:	f002 f9a0 	bl	800ccc8 <ulSetInterruptMask>
 800a988:	bf00      	nop
 800a98a:	e7fd      	b.n	800a988 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a98c:	f001 fb0e 	bl	800bfac <xTaskGetSchedulerState>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d102      	bne.n	800a99c <xQueueReceive+0x52>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <xQueueReceive+0x56>
 800a99c:	2301      	movs	r3, #1
 800a99e:	e000      	b.n	800a9a2 <xQueueReceive+0x58>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d103      	bne.n	800a9ae <xQueueReceive+0x64>
 800a9a6:	f002 f98f 	bl	800ccc8 <ulSetInterruptMask>
 800a9aa:	bf00      	nop
 800a9ac:	e7fd      	b.n	800a9aa <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a9ae:	f002 f849 	bl	800ca44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d019      	beq.n	800a9f2 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9be:	68b9      	ldr	r1, [r7, #8]
 800a9c0:	6a38      	ldr	r0, [r7, #32]
 800a9c2:	f000 fa66 	bl	800ae92 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	1e5a      	subs	r2, r3, #1
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	3310      	adds	r3, #16
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 f8d4 	bl	800bb88 <xTaskRemoveFromEventList>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a9e6:	f002 f81b 	bl	800ca20 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a9ea:	f002 f83d 	bl	800ca68 <vPortExitCritical>
                return pdPASS;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e063      	b.n	800aaba <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d103      	bne.n	800aa00 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a9f8:	f002 f836 	bl	800ca68 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e05c      	b.n	800aaba <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800aa06:	f107 0314 	add.w	r3, r7, #20
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 f98a 	bl	800bd24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800aa10:	2301      	movs	r3, #1
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800aa14:	f002 f828 	bl	800ca68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800aa18:	f000 fdd6 	bl	800b5c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800aa1c:	f002 f812 	bl	800ca44 <vPortEnterCritical>
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa26:	b25b      	sxtb	r3, r3
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d103      	bne.n	800aa36 <xQueueReceive+0xec>
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa3c:	b25b      	sxtb	r3, r3
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa42:	d103      	bne.n	800aa4c <xQueueReceive+0x102>
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa4c:	f002 f80c 	bl	800ca68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa50:	1d3a      	adds	r2, r7, #4
 800aa52:	f107 0314 	add.w	r3, r7, #20
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f001 f979 	bl	800bd50 <xTaskCheckForTimeOut>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d11d      	bne.n	800aaa0 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa64:	6a38      	ldr	r0, [r7, #32]
 800aa66:	f000 fa8c 	bl	800af82 <prvIsQueueEmpty>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d011      	beq.n	800aa94 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	3324      	adds	r3, #36	@ 0x24
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 f829 	bl	800bad0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800aa7e:	6a38      	ldr	r0, [r7, #32]
 800aa80:	f000 fa2d 	bl	800aede <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800aa84:	f000 fdae 	bl	800b5e4 <xTaskResumeAll>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d18f      	bne.n	800a9ae <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800aa8e:	f001 ffc7 	bl	800ca20 <vPortYield>
 800aa92:	e78c      	b.n	800a9ae <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800aa94:	6a38      	ldr	r0, [r7, #32]
 800aa96:	f000 fa22 	bl	800aede <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800aa9a:	f000 fda3 	bl	800b5e4 <xTaskResumeAll>
 800aa9e:	e786      	b.n	800a9ae <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800aaa0:	6a38      	ldr	r0, [r7, #32]
 800aaa2:	f000 fa1c 	bl	800aede <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800aaa6:	f000 fd9d 	bl	800b5e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaaa:	6a38      	ldr	r0, [r7, #32]
 800aaac:	f000 fa69 	bl	800af82 <prvIsQueueEmpty>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f43f af7b 	beq.w	800a9ae <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800aab8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3728      	adds	r7, #40	@ 0x28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b08a      	sub	sp, #40	@ 0x28
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800aacc:	2300      	movs	r3, #0
 800aace:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800aad4:	2300      	movs	r3, #0
 800aad6:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d103      	bne.n	800aae6 <xQueueSemaphoreTake+0x24>
 800aade:	f002 f8f3 	bl	800ccc8 <ulSetInterruptMask>
 800aae2:	bf00      	nop
 800aae4:	e7fd      	b.n	800aae2 <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <xQueueSemaphoreTake+0x34>
 800aaee:	f002 f8eb 	bl	800ccc8 <ulSetInterruptMask>
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaf6:	f001 fa59 	bl	800bfac <xTaskGetSchedulerState>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d102      	bne.n	800ab06 <xQueueSemaphoreTake+0x44>
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <xQueueSemaphoreTake+0x48>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <xQueueSemaphoreTake+0x4a>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d103      	bne.n	800ab18 <xQueueSemaphoreTake+0x56>
 800ab10:	f002 f8da 	bl	800ccc8 <ulSetInterruptMask>
 800ab14:	bf00      	nop
 800ab16:	e7fd      	b.n	800ab14 <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ab18:	f001 ff94 	bl	800ca44 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab20:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d01e      	beq.n	800ab66 <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	1e5a      	subs	r2, r3, #1
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d104      	bne.n	800ab42 <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab38:	f001 fc0a 	bl	800c350 <pvTaskIncrementMutexHeldCount>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d009      	beq.n	800ab5e <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	3310      	adds	r3, #16
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 f81a 	bl	800bb88 <xTaskRemoveFromEventList>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ab5a:	f001 ff61 	bl	800ca20 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800ab5e:	f001 ff83 	bl	800ca68 <vPortExitCritical>
                return pdPASS;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e083      	b.n	800ac6e <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800ab6c:	f001 ff7c 	bl	800ca68 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800ab70:	2300      	movs	r3, #0
 800ab72:	e07c      	b.n	800ac6e <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ab7a:	f107 030c 	add.w	r3, r7, #12
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 f8d0 	bl	800bd24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ab84:	2301      	movs	r3, #1
 800ab86:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ab88:	f001 ff6e 	bl	800ca68 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ab8c:	f000 fd1c 	bl	800b5c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ab90:	f001 ff58 	bl	800ca44 <vPortEnterCritical>
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab9a:	b25b      	sxtb	r3, r3
 800ab9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba0:	d103      	bne.n	800abaa <xQueueSemaphoreTake+0xe8>
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abb0:	b25b      	sxtb	r3, r3
 800abb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb6:	d103      	bne.n	800abc0 <xQueueSemaphoreTake+0xfe>
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abc0:	f001 ff52 	bl	800ca68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abc4:	463a      	mov	r2, r7
 800abc6:	f107 030c 	add.w	r3, r7, #12
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f001 f8bf 	bl	800bd50 <xTaskCheckForTimeOut>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d12c      	bne.n	800ac32 <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abd8:	69f8      	ldr	r0, [r7, #28]
 800abda:	f000 f9d2 	bl	800af82 <prvIsQueueEmpty>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d020      	beq.n	800ac26 <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d109      	bne.n	800ac00 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800abec:	f001 ff2a 	bl	800ca44 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 f9f7 	bl	800bfe8 <xTaskPriorityInherit>
 800abfa:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800abfc:	f001 ff34 	bl	800ca68 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	3324      	adds	r3, #36	@ 0x24
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 ff61 	bl	800bad0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800ac0e:	69f8      	ldr	r0, [r7, #28]
 800ac10:	f000 f965 	bl	800aede <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800ac14:	f000 fce6 	bl	800b5e4 <xTaskResumeAll>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f47f af7c 	bne.w	800ab18 <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800ac20:	f001 fefe 	bl	800ca20 <vPortYield>
 800ac24:	e778      	b.n	800ab18 <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800ac26:	69f8      	ldr	r0, [r7, #28]
 800ac28:	f000 f959 	bl	800aede <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800ac2c:	f000 fcda 	bl	800b5e4 <xTaskResumeAll>
 800ac30:	e772      	b.n	800ab18 <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800ac32:	69f8      	ldr	r0, [r7, #28]
 800ac34:	f000 f953 	bl	800aede <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800ac38:	f000 fcd4 	bl	800b5e4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac3c:	69f8      	ldr	r0, [r7, #28]
 800ac3e:	f000 f9a0 	bl	800af82 <prvIsQueueEmpty>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f43f af67 	beq.w	800ab18 <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00d      	beq.n	800ac6c <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800ac50:	f001 fef8 	bl	800ca44 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac54:	69f8      	ldr	r0, [r7, #28]
 800ac56:	f000 f89a 	bl	800ad8e <prvGetDisinheritPriorityAfterTimeout>
 800ac5a:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	6979      	ldr	r1, [r7, #20]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 fad8 	bl	800c218 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800ac68:	f001 fefe 	bl	800ca68 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800ac6c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3728      	adds	r7, #40	@ 0x28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b08a      	sub	sp, #40	@ 0x28
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <xQueueReceiveFromISR+0x1e>
 800ac8c:	f002 f81c 	bl	800ccc8 <ulSetInterruptMask>
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d103      	bne.n	800aca2 <xQueueReceiveFromISR+0x2c>
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <xQueueReceiveFromISR+0x30>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e000      	b.n	800aca8 <xQueueReceiveFromISR+0x32>
 800aca6:	2300      	movs	r3, #0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d103      	bne.n	800acb4 <xQueueReceiveFromISR+0x3e>
 800acac:	f002 f80c 	bl	800ccc8 <ulSetInterruptMask>
 800acb0:	bf00      	nop
 800acb2:	e7fd      	b.n	800acb0 <xQueueReceiveFromISR+0x3a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acb4:	f002 f808 	bl	800ccc8 <ulSetInterruptMask>
 800acb8:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acbe:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d03d      	beq.n	800ad42 <xQueueReceiveFromISR+0xcc>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800accc:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acce:	68b9      	ldr	r1, [r7, #8]
 800acd0:	6a38      	ldr	r0, [r7, #32]
 800acd2:	f000 f8de 	bl	800ae92 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	1e5a      	subs	r2, r3, #1
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800acde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace6:	d112      	bne.n	800ad0e <xQueueReceiveFromISR+0x98>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d025      	beq.n	800ad3c <xQueueReceiveFromISR+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	3310      	adds	r3, #16
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 ff47 	bl	800bb88 <xTaskRemoveFromEventList>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d01d      	beq.n	800ad3c <xQueueReceiveFromISR+0xc6>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d01a      	beq.n	800ad3c <xQueueReceiveFromISR+0xc6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	e016      	b.n	800ad3c <xQueueReceiveFromISR+0xc6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800ad0e:	f000 fd67 	bl	800b7e0 <uxTaskGetNumberOfTasks>
 800ad12:	6138      	str	r0, [r7, #16]
 800ad14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d90e      	bls.n	800ad3c <xQueueReceiveFromISR+0xc6>
 800ad1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad24:	d103      	bne.n	800ad2e <xQueueReceiveFromISR+0xb8>
 800ad26:	f001 ffcf 	bl	800ccc8 <ulSetInterruptMask>
 800ad2a:	bf00      	nop
 800ad2c:	e7fd      	b.n	800ad2a <xQueueReceiveFromISR+0xb4>
 800ad2e:	7dfb      	ldrb	r3, [r7, #23]
 800ad30:	3301      	adds	r3, #1
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	b25a      	sxtb	r2, r3
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad40:	e001      	b.n	800ad46 <xQueueReceiveFromISR+0xd0>
        }
        else
        {
            xReturn = pdFAIL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ad46:	69f8      	ldr	r0, [r7, #28]
 800ad48:	f001 ffcb 	bl	800cce2 <vClearInterruptMask>

    return xReturn;
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	@ 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d103      	bne.n	800ad70 <vQueueDelete+0x1a>
 800ad68:	f001 ffae 	bl	800ccc8 <ulSetInterruptMask>
 800ad6c:	bf00      	nop
 800ad6e:	e7fd      	b.n	800ad6c <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f000 f97b 	bl	800b06c <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d102      	bne.n	800ad86 <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f002 f8ad 	bl	800cee0 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d006      	beq.n	800adac <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	e001      	b.n	800adb0 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800adb0:	68fb      	ldr	r3, [r7, #12]
    }
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10d      	bne.n	800adf8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d14d      	bne.n	800ae80 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	4618      	mov	r0, r3
 800adea:	f001 f98d 	bl	800c108 <xTaskPriorityDisinherit>
 800adee:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	609a      	str	r2, [r3, #8]
 800adf6:	e043      	b.n	800ae80 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d119      	bne.n	800ae32 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6858      	ldr	r0, [r3, #4]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae06:	461a      	mov	r2, r3
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	f021 f984 	bl	802c116 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae16:	441a      	add	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d32b      	bcc.n	800ae80 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	605a      	str	r2, [r3, #4]
 800ae30:	e026      	b.n	800ae80 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	68d8      	ldr	r0, [r3, #12]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	f021 f96a 	bl	802c116 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	68da      	ldr	r2, [r3, #12]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4a:	425b      	negs	r3, r3
 800ae4c:	441a      	add	r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d207      	bcs.n	800ae6e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae66:	425b      	negs	r3, r3
 800ae68:	441a      	add	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d105      	bne.n	800ae80 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800ae88:	697b      	ldr	r3, [r7, #20]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d018      	beq.n	800aed6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeac:	441a      	add	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d303      	bcc.n	800aec6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68d9      	ldr	r1, [r3, #12]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aece:	461a      	mov	r2, r3
 800aed0:	6838      	ldr	r0, [r7, #0]
 800aed2:	f021 f920 	bl	802c116 <memcpy>
    }
}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800aee6:	f001 fdad 	bl	800ca44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aef0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800aef2:	e011      	b.n	800af18 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d012      	beq.n	800af22 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	3324      	adds	r3, #36	@ 0x24
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fe41 	bl	800bb88 <xTaskRemoveFromEventList>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800af0c:	f000 ff78 	bl	800be00 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	3b01      	subs	r3, #1
 800af14:	b2db      	uxtb	r3, r3
 800af16:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800af18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dce9      	bgt.n	800aef4 <prvUnlockQueue+0x16>
 800af20:	e000      	b.n	800af24 <prvUnlockQueue+0x46>
                    break;
 800af22:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	22ff      	movs	r2, #255	@ 0xff
 800af28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800af2c:	f001 fd9c 	bl	800ca68 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800af30:	f001 fd88 	bl	800ca44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af3a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800af3c:	e011      	b.n	800af62 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d012      	beq.n	800af6c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3310      	adds	r3, #16
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 fe1c 	bl	800bb88 <xTaskRemoveFromEventList>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800af56:	f000 ff53 	bl	800be00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800af62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af66:	2b00      	cmp	r3, #0
 800af68:	dce9      	bgt.n	800af3e <prvUnlockQueue+0x60>
 800af6a:	e000      	b.n	800af6e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800af6c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	22ff      	movs	r2, #255	@ 0xff
 800af72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800af76:	f001 fd77 	bl	800ca68 <vPortExitCritical>
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800af8a:	f001 fd5b 	bl	800ca44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af92:	2b00      	cmp	r3, #0
 800af94:	d102      	bne.n	800af9c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800af96:	2301      	movs	r3, #1
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	e001      	b.n	800afa0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800afa0:	f001 fd62 	bl	800ca68 <vPortExitCritical>

    return xReturn;
 800afa4:	68fb      	ldr	r3, [r7, #12]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800afb6:	f001 fd45 	bl	800ca44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d102      	bne.n	800afcc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800afc6:	2301      	movs	r3, #1
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	e001      	b.n	800afd0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800afcc:	2300      	movs	r3, #0
 800afce:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800afd0:	f001 fd4a 	bl	800ca68 <vPortExitCritical>

    return xReturn;
 800afd4:	68fb      	ldr	r3, [r7, #12]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d103      	bne.n	800affc <vQueueAddToRegistry+0x1c>
 800aff4:	f001 fe68 	bl	800ccc8 <ulSetInterruptMask>
 800aff8:	bf00      	nop
 800affa:	e7fd      	b.n	800aff8 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d024      	beq.n	800b04c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b002:	2300      	movs	r3, #0
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	e01e      	b.n	800b046 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800b008:	4a17      	ldr	r2, [pc, #92]	@ (800b068 <vQueueAddToRegistry+0x88>)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	4413      	add	r3, r2
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	429a      	cmp	r2, r3
 800b016:	d105      	bne.n	800b024 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	4a12      	ldr	r2, [pc, #72]	@ (800b068 <vQueueAddToRegistry+0x88>)
 800b01e:	4413      	add	r3, r2
 800b020:	60bb      	str	r3, [r7, #8]
                    break;
 800b022:	e013      	b.n	800b04c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <vQueueAddToRegistry+0x60>
 800b02a:	4a0f      	ldr	r2, [pc, #60]	@ (800b068 <vQueueAddToRegistry+0x88>)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d104      	bne.n	800b040 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	4a0b      	ldr	r2, [pc, #44]	@ (800b068 <vQueueAddToRegistry+0x88>)
 800b03c:	4413      	add	r3, r2
 800b03e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3301      	adds	r3, #1
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b07      	cmp	r3, #7
 800b04a:	d9dd      	bls.n	800b008 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d005      	beq.n	800b05e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800b05e:	bf00      	nop
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20000bf8 	.word	0x20000bf8

0800b06c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d103      	bne.n	800b082 <vQueueUnregisterQueue+0x16>
 800b07a:	f001 fe25 	bl	800ccc8 <ulSetInterruptMask>
 800b07e:	bf00      	nop
 800b080:	e7fd      	b.n	800b07e <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	e016      	b.n	800b0b6 <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b088:	4a0f      	ldr	r2, [pc, #60]	@ (800b0c8 <vQueueUnregisterQueue+0x5c>)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	4413      	add	r3, r2
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	429a      	cmp	r2, r3
 800b096:	d10b      	bne.n	800b0b0 <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800b098:	4a0b      	ldr	r2, [pc, #44]	@ (800b0c8 <vQueueUnregisterQueue+0x5c>)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2100      	movs	r1, #0
 800b09e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b0a2:	4a09      	ldr	r2, [pc, #36]	@ (800b0c8 <vQueueUnregisterQueue+0x5c>)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	4413      	add	r3, r2
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	605a      	str	r2, [r3, #4]
                break;
 800b0ae:	e006      	b.n	800b0be <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b07      	cmp	r3, #7
 800b0ba:	d9e5      	bls.n	800b088 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b0bc:	bf00      	nop
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000bf8 	.word	0x20000bf8

0800b0cc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800b0dc:	f001 fcb2 	bl	800ca44 <vPortEnterCritical>
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0e6:	b25b      	sxtb	r3, r3
 800b0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ec:	d103      	bne.n	800b0f6 <vQueueWaitForMessageRestricted+0x2a>
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0fc:	b25b      	sxtb	r3, r3
 800b0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b102:	d103      	bne.n	800b10c <vQueueWaitForMessageRestricted+0x40>
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b10c:	f001 fcac 	bl	800ca68 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	3324      	adds	r3, #36	@ 0x24
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fcf3 	bl	800bb0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800b126:	6978      	ldr	r0, [r7, #20]
 800b128:	f7ff fed9 	bl	800aede <prvUnlockQueue>
    }
 800b12c:	bf00      	nop
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800b134:	b580      	push	{r7, lr}
 800b136:	b08c      	sub	sp, #48	@ 0x30
 800b138:	af04      	add	r7, sp, #16
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800b142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d103      	bne.n	800b150 <xTaskCreateStatic+0x1c>
 800b148:	f001 fdbe 	bl	800ccc8 <ulSetInterruptMask>
 800b14c:	bf00      	nop
 800b14e:	e7fd      	b.n	800b14c <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800b150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b152:	2b00      	cmp	r3, #0
 800b154:	d103      	bne.n	800b15e <xTaskCreateStatic+0x2a>
 800b156:	f001 fdb7 	bl	800ccc8 <ulSetInterruptMask>
 800b15a:	bf00      	nop
 800b15c:	e7fd      	b.n	800b15a <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800b15e:	23a8      	movs	r3, #168	@ 0xa8
 800b160:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2ba8      	cmp	r3, #168	@ 0xa8
 800b166:	d003      	beq.n	800b170 <xTaskCreateStatic+0x3c>
 800b168:	f001 fdae 	bl	800ccc8 <ulSetInterruptMask>
 800b16c:	bf00      	nop
 800b16e:	e7fd      	b.n	800b16c <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b170:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b174:	2b00      	cmp	r3, #0
 800b176:	d023      	beq.n	800b1c0 <xTaskCreateStatic+0x8c>
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d020      	beq.n	800b1c0 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b182:	22a8      	movs	r2, #168	@ 0xa8
 800b184:	2100      	movs	r1, #0
 800b186:	69f8      	ldr	r0, [r7, #28]
 800b188:	f020 fe9f 	bl	802beca <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b190:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	2202      	movs	r2, #2
 800b196:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b19a:	2300      	movs	r3, #0
 800b19c:	9303      	str	r3, [sp, #12]
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	9302      	str	r3, [sp, #8]
 800b1a2:	f107 0318 	add.w	r3, r7, #24
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	68b9      	ldr	r1, [r7, #8]
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 f856 	bl	800b264 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b1b8:	69f8      	ldr	r0, [r7, #28]
 800b1ba:	f000 f8eb 	bl	800b394 <prvAddNewTaskToReadyList>
 800b1be:	e001      	b.n	800b1c4 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b1c4:	69bb      	ldr	r3, [r7, #24]
    }
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b08c      	sub	sp, #48	@ 0x30
 800b1d2:	af04      	add	r7, sp, #16
 800b1d4:	60f8      	str	r0, [r7, #12]
 800b1d6:	60b9      	str	r1, [r7, #8]
 800b1d8:	603b      	str	r3, [r7, #0]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1de:	88fb      	ldrh	r3, [r7, #6]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f001 fdd0 	bl	800cd88 <pvPortMalloc>
 800b1e8:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d013      	beq.n	800b218 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1f0:	20a8      	movs	r0, #168	@ 0xa8
 800b1f2:	f001 fdc9 	bl	800cd88 <pvPortMalloc>
 800b1f6:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d008      	beq.n	800b210 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b1fe:	22a8      	movs	r2, #168	@ 0xa8
 800b200:	2100      	movs	r1, #0
 800b202:	69f8      	ldr	r0, [r7, #28]
 800b204:	f020 fe61 	bl	802beca <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b20e:	e005      	b.n	800b21c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f001 fe65 	bl	800cee0 <vPortFree>
 800b216:	e001      	b.n	800b21c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d017      	beq.n	800b252 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b22a:	88fa      	ldrh	r2, [r7, #6]
 800b22c:	2300      	movs	r3, #0
 800b22e:	9303      	str	r3, [sp, #12]
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	9302      	str	r3, [sp, #8]
 800b234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 f80f 	bl	800b264 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b246:	69f8      	ldr	r0, [r7, #28]
 800b248:	f000 f8a4 	bl	800b394 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b24c:	2301      	movs	r3, #1
 800b24e:	61bb      	str	r3, [r7, #24]
 800b250:	e002      	b.n	800b258 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b252:	f04f 33ff 	mov.w	r3, #4294967295
 800b256:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b258:	69bb      	ldr	r3, [r7, #24]
    }
 800b25a:	4618      	mov	r0, r3
 800b25c:	3720      	adds	r7, #32
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	461a      	mov	r2, r3
 800b27c:	21a5      	movs	r1, #165	@ 0xa5
 800b27e:	f020 fe24 	bl	802beca <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b28c:	3b01      	subs	r3, #1
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f023 0307 	bic.w	r3, r3, #7
 800b29a:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <prvInitialiseNewTask+0x4a>
 800b2a6:	f001 fd0f 	bl	800ccc8 <ulSetInterruptMask>
 800b2aa:	bf00      	nop
 800b2ac:	e7fd      	b.n	800b2aa <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d01e      	beq.n	800b2f2 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e012      	b.n	800b2e0 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	4413      	add	r3, r2
 800b2c0:	7819      	ldrb	r1, [r3, #0]
 800b2c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	3334      	adds	r3, #52	@ 0x34
 800b2ca:	460a      	mov	r2, r1
 800b2cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d006      	beq.n	800b2e8 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2b0f      	cmp	r3, #15
 800b2e4:	d9e9      	bls.n	800b2ba <prvInitialiseNewTask+0x56>
 800b2e6:	e000      	b.n	800b2ea <prvInitialiseNewTask+0x86>
            {
                break;
 800b2e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	2b37      	cmp	r3, #55	@ 0x37
 800b2f6:	d903      	bls.n	800b300 <prvInitialiseNewTask+0x9c>
 800b2f8:	f001 fce6 	bl	800ccc8 <ulSetInterruptMask>
 800b2fc:	bf00      	nop
 800b2fe:	e7fd      	b.n	800b2fc <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	2b37      	cmp	r3, #55	@ 0x37
 800b304:	d901      	bls.n	800b30a <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b306:	2337      	movs	r3, #55	@ 0x37
 800b308:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30c:	6a3a      	ldr	r2, [r7, #32]
 800b30e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800b310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b312:	6a3a      	ldr	r2, [r7, #32]
 800b314:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b318:	3304      	adds	r3, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe ff5c 	bl	800a1d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b322:	3318      	adds	r3, #24
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe ff57 	bl	800a1d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b32e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b338:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b33e:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	3354      	adds	r3, #84	@ 0x54
 800b344:	224c      	movs	r2, #76	@ 0x4c
 800b346:	2100      	movs	r1, #0
 800b348:	4618      	mov	r0, r3
 800b34a:	f020 fdbe 	bl	802beca <memset>
 800b34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b350:	4a0d      	ldr	r2, [pc, #52]	@ (800b388 <prvInitialiseNewTask+0x124>)
 800b352:	659a      	str	r2, [r3, #88]	@ 0x58
 800b354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b356:	4a0d      	ldr	r2, [pc, #52]	@ (800b38c <prvInitialiseNewTask+0x128>)
 800b358:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35c:	4a0c      	ldr	r2, [pc, #48]	@ (800b390 <prvInitialiseNewTask+0x12c>)
 800b35e:	661a      	str	r2, [r3, #96]	@ 0x60
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800b360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b362:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	6938      	ldr	r0, [r7, #16]
 800b36a:	f001 fbc9 	bl	800cb00 <pxPortInitialiseStack>
 800b36e:	4602      	mov	r2, r0
 800b370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b372:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800b374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <prvInitialiseNewTask+0x11c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b37e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b380:	bf00      	nop
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20012990 	.word	0x20012990
 800b38c:	200129f8 	.word	0x200129f8
 800b390:	20012a60 	.word	0x20012a60

0800b394 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800b39c:	f001 fb52 	bl	800ca44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800b3a0:	4b3e      	ldr	r3, [pc, #248]	@ (800b49c <prvAddNewTaskToReadyList+0x108>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	4a3d      	ldr	r2, [pc, #244]	@ (800b49c <prvAddNewTaskToReadyList+0x108>)
 800b3a8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800b3aa:	4b3d      	ldr	r3, [pc, #244]	@ (800b4a0 <prvAddNewTaskToReadyList+0x10c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800b3b2:	4a3b      	ldr	r2, [pc, #236]	@ (800b4a0 <prvAddNewTaskToReadyList+0x10c>)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3b8:	4b38      	ldr	r3, [pc, #224]	@ (800b49c <prvAddNewTaskToReadyList+0x108>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d110      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800b3c0:	f000 fd3a 	bl	800be38 <prvInitialiseTaskLists>
 800b3c4:	e00d      	b.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800b3c6:	4b37      	ldr	r3, [pc, #220]	@ (800b4a4 <prvAddNewTaskToReadyList+0x110>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ce:	4b34      	ldr	r3, [pc, #208]	@ (800b4a0 <prvAddNewTaskToReadyList+0x10c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d802      	bhi.n	800b3e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800b3dc:	4a30      	ldr	r2, [pc, #192]	@ (800b4a0 <prvAddNewTaskToReadyList+0x10c>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800b3e2:	4b31      	ldr	r3, [pc, #196]	@ (800b4a8 <prvAddNewTaskToReadyList+0x114>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	4a2f      	ldr	r2, [pc, #188]	@ (800b4a8 <prvAddNewTaskToReadyList+0x114>)
 800b3ea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3ec:	4b2e      	ldr	r3, [pc, #184]	@ (800b4a8 <prvAddNewTaskToReadyList+0x114>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f8:	4b2c      	ldr	r3, [pc, #176]	@ (800b4ac <prvAddNewTaskToReadyList+0x118>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d903      	bls.n	800b408 <prvAddNewTaskToReadyList+0x74>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b404:	4a29      	ldr	r2, [pc, #164]	@ (800b4ac <prvAddNewTaskToReadyList+0x118>)
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b40c:	4928      	ldr	r1, [pc, #160]	@ (800b4b0 <prvAddNewTaskToReadyList+0x11c>)
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	440b      	add	r3, r1
 800b418:	3304      	adds	r3, #4
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	60fb      	str	r3, [r7, #12]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	609a      	str	r2, [r3, #8]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	689a      	ldr	r2, [r3, #8]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	60da      	str	r2, [r3, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	3204      	adds	r2, #4
 800b434:	605a      	str	r2, [r3, #4]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	1d1a      	adds	r2, r3, #4
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	609a      	str	r2, [r3, #8]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4a19      	ldr	r2, [pc, #100]	@ (800b4b0 <prvAddNewTaskToReadyList+0x11c>)
 800b44c:	441a      	add	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	615a      	str	r2, [r3, #20]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b456:	4916      	ldr	r1, [pc, #88]	@ (800b4b0 <prvAddNewTaskToReadyList+0x11c>)
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	440b      	add	r3, r1
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	1c59      	adds	r1, r3, #1
 800b466:	4812      	ldr	r0, [pc, #72]	@ (800b4b0 <prvAddNewTaskToReadyList+0x11c>)
 800b468:	4613      	mov	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4413      	add	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4403      	add	r3, r0
 800b472:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800b474:	f001 faf8 	bl	800ca68 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800b478:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a4 <prvAddNewTaskToReadyList+0x110>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d008      	beq.n	800b492 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b480:	4b07      	ldr	r3, [pc, #28]	@ (800b4a0 <prvAddNewTaskToReadyList+0x10c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d201      	bcs.n	800b492 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800b48e:	f001 fac7 	bl	800ca20 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b492:	bf00      	nop
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	2000110c 	.word	0x2000110c
 800b4a0:	20000c38 	.word	0x20000c38
 800b4a4:	20001118 	.word	0x20001118
 800b4a8:	20001128 	.word	0x20001128
 800b4ac:	20001114 	.word	0x20001114
 800b4b0:	20000c3c 	.word	0x20000c3c

0800b4b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d010      	beq.n	800b4e8 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800b4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4fc <vTaskDelay+0x48>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <vTaskDelay+0x22>
 800b4ce:	f001 fbfb 	bl	800ccc8 <ulSetInterruptMask>
 800b4d2:	bf00      	nop
 800b4d4:	e7fd      	b.n	800b4d2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800b4d6:	f000 f877 	bl	800b5c8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4da:	2100      	movs	r1, #0
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 ff4b 	bl	800c378 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800b4e2:	f000 f87f 	bl	800b5e4 <xTaskResumeAll>
 800b4e6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800b4ee:	f001 fa97 	bl	800ca20 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20001134 	.word	0x20001134

0800b500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800b506:	2300      	movs	r3, #0
 800b508:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b50e:	463a      	mov	r2, r7
 800b510:	1d39      	adds	r1, r7, #4
 800b512:	f107 0308 	add.w	r3, r7, #8
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe fe0a 	bl	800a130 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	9202      	str	r2, [sp, #8]
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	2300      	movs	r3, #0
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	2300      	movs	r3, #0
 800b52c:	460a      	mov	r2, r1
 800b52e:	491d      	ldr	r1, [pc, #116]	@ (800b5a4 <vTaskStartScheduler+0xa4>)
 800b530:	481d      	ldr	r0, [pc, #116]	@ (800b5a8 <vTaskStartScheduler+0xa8>)
 800b532:	f7ff fdff 	bl	800b134 <xTaskCreateStatic>
 800b536:	4603      	mov	r3, r0
 800b538:	4a1c      	ldr	r2, [pc, #112]	@ (800b5ac <vTaskStartScheduler+0xac>)
 800b53a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800b53c:	4b1b      	ldr	r3, [pc, #108]	@ (800b5ac <vTaskStartScheduler+0xac>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800b544:	2301      	movs	r3, #1
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e001      	b.n	800b54e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d102      	bne.n	800b55a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800b554:	f000 ff7e 	bl	800c454 <xTimerCreateTimerTask>
 800b558:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d113      	bne.n	800b588 <vTaskStartScheduler+0x88>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800b560:	f001 fbb2 	bl	800ccc8 <ulSetInterruptMask>

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800b564:	4b12      	ldr	r3, [pc, #72]	@ (800b5b0 <vTaskStartScheduler+0xb0>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3354      	adds	r3, #84	@ 0x54
 800b56a:	4a12      	ldr	r2, [pc, #72]	@ (800b5b4 <vTaskStartScheduler+0xb4>)
 800b56c:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800b56e:	4b12      	ldr	r3, [pc, #72]	@ (800b5b8 <vTaskStartScheduler+0xb8>)
 800b570:	f04f 32ff 	mov.w	r2, #4294967295
 800b574:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800b576:	4b11      	ldr	r3, [pc, #68]	@ (800b5bc <vTaskStartScheduler+0xbc>)
 800b578:	2201      	movs	r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b57c:	4b10      	ldr	r3, [pc, #64]	@ (800b5c0 <vTaskStartScheduler+0xc0>)
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800b582:	f001 fb47 	bl	800cc14 <xPortStartScheduler>
 800b586:	e007      	b.n	800b598 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58e:	d103      	bne.n	800b598 <vTaskStartScheduler+0x98>
 800b590:	f001 fb9a 	bl	800ccc8 <ulSetInterruptMask>
 800b594:	bf00      	nop
 800b596:	e7fd      	b.n	800b594 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800b598:	4b0a      	ldr	r3, [pc, #40]	@ (800b5c4 <vTaskStartScheduler+0xc4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	0802cc4c 	.word	0x0802cc4c
 800b5a8:	0800be19 	.word	0x0800be19
 800b5ac:	20001130 	.word	0x20001130
 800b5b0:	20000c38 	.word	0x20000c38
 800b5b4:	200000b0 	.word	0x200000b0
 800b5b8:	2000112c 	.word	0x2000112c
 800b5bc:	20001118 	.word	0x20001118
 800b5c0:	20001110 	.word	0x20001110
 800b5c4:	20000014 	.word	0x20000014

0800b5c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800b5cc:	4b04      	ldr	r3, [pc, #16]	@ (800b5e0 <vTaskSuspendAll+0x18>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	4a03      	ldr	r2, [pc, #12]	@ (800b5e0 <vTaskSuspendAll+0x18>)
 800b5d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800b5d6:	bf00      	nop
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	20001134 	.word	0x20001134

0800b5e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800b5f2:	4b6b      	ldr	r3, [pc, #428]	@ (800b7a0 <xTaskResumeAll+0x1bc>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d103      	bne.n	800b602 <xTaskResumeAll+0x1e>
 800b5fa:	f001 fb65 	bl	800ccc8 <ulSetInterruptMask>
 800b5fe:	bf00      	nop
 800b600:	e7fd      	b.n	800b5fe <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800b602:	f001 fa1f 	bl	800ca44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800b606:	4b66      	ldr	r3, [pc, #408]	@ (800b7a0 <xTaskResumeAll+0x1bc>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	4a64      	ldr	r2, [pc, #400]	@ (800b7a0 <xTaskResumeAll+0x1bc>)
 800b60e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b610:	4b63      	ldr	r3, [pc, #396]	@ (800b7a0 <xTaskResumeAll+0x1bc>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f040 80bb 	bne.w	800b790 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b61a:	4b62      	ldr	r3, [pc, #392]	@ (800b7a4 <xTaskResumeAll+0x1c0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 80b6 	beq.w	800b790 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b624:	e08b      	b.n	800b73e <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b626:	4b60      	ldr	r3, [pc, #384]	@ (800b7a8 <xTaskResumeAll+0x1c4>)
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b632:	60bb      	str	r3, [r7, #8]
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	6a12      	ldr	r2, [r2, #32]
 800b63c:	609a      	str	r2, [r3, #8]
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	69d2      	ldr	r2, [r2, #28]
 800b646:	605a      	str	r2, [r3, #4]
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	3318      	adds	r3, #24
 800b650:	429a      	cmp	r2, r3
 800b652:	d103      	bne.n	800b65c <xTaskResumeAll+0x78>
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	6a1a      	ldr	r2, [r3, #32]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	605a      	str	r2, [r3, #4]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	2200      	movs	r2, #0
 800b660:	629a      	str	r2, [r3, #40]	@ 0x28
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	1e5a      	subs	r2, r3, #1
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	607b      	str	r3, [r7, #4]
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	68d2      	ldr	r2, [r2, #12]
 800b67a:	609a      	str	r2, [r3, #8]
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	6892      	ldr	r2, [r2, #8]
 800b684:	605a      	str	r2, [r3, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	3304      	adds	r3, #4
 800b68e:	429a      	cmp	r2, r3
 800b690:	d103      	bne.n	800b69a <xTaskResumeAll+0xb6>
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	68da      	ldr	r2, [r3, #12]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	605a      	str	r2, [r3, #4]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2200      	movs	r2, #0
 800b69e:	615a      	str	r2, [r3, #20]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	1e5a      	subs	r2, r3, #1
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ae:	4b3f      	ldr	r3, [pc, #252]	@ (800b7ac <xTaskResumeAll+0x1c8>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d903      	bls.n	800b6be <xTaskResumeAll+0xda>
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ba:	4a3c      	ldr	r2, [pc, #240]	@ (800b7ac <xTaskResumeAll+0x1c8>)
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6c2:	493b      	ldr	r1, [pc, #236]	@ (800b7b0 <xTaskResumeAll+0x1cc>)
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	440b      	add	r3, r1
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	609a      	str	r2, [r3, #8]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	60da      	str	r2, [r3, #12]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	3204      	adds	r2, #4
 800b6ea:	605a      	str	r2, [r3, #4]
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	609a      	str	r2, [r3, #8]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a2b      	ldr	r2, [pc, #172]	@ (800b7b0 <xTaskResumeAll+0x1cc>)
 800b702:	441a      	add	r2, r3
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	615a      	str	r2, [r3, #20]
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b70c:	4928      	ldr	r1, [pc, #160]	@ (800b7b0 <xTaskResumeAll+0x1cc>)
 800b70e:	4613      	mov	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	440b      	add	r3, r1
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	1c59      	adds	r1, r3, #1
 800b71c:	4824      	ldr	r0, [pc, #144]	@ (800b7b0 <xTaskResumeAll+0x1cc>)
 800b71e:	4613      	mov	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4403      	add	r3, r0
 800b728:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b72e:	4b21      	ldr	r3, [pc, #132]	@ (800b7b4 <xTaskResumeAll+0x1d0>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	429a      	cmp	r2, r3
 800b736:	d302      	bcc.n	800b73e <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800b738:	4b1f      	ldr	r3, [pc, #124]	@ (800b7b8 <xTaskResumeAll+0x1d4>)
 800b73a:	2201      	movs	r2, #1
 800b73c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b73e:	4b1a      	ldr	r3, [pc, #104]	@ (800b7a8 <xTaskResumeAll+0x1c4>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f47f af6f 	bne.w	800b626 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800b74e:	f000 fc11 	bl	800bf74 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b752:	4b1a      	ldr	r3, [pc, #104]	@ (800b7bc <xTaskResumeAll+0x1d8>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d010      	beq.n	800b780 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800b75e:	f000 f84b 	bl	800b7f8 <xTaskIncrementTick>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800b768:	4b13      	ldr	r3, [pc, #76]	@ (800b7b8 <xTaskResumeAll+0x1d4>)
 800b76a:	2201      	movs	r2, #1
 800b76c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3b01      	subs	r3, #1
 800b772:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1f1      	bne.n	800b75e <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800b77a:	4b10      	ldr	r3, [pc, #64]	@ (800b7bc <xTaskResumeAll+0x1d8>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800b780:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b8 <xTaskResumeAll+0x1d4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d003      	beq.n	800b790 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800b788:	2301      	movs	r3, #1
 800b78a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800b78c:	f001 f948 	bl	800ca20 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800b790:	f001 f96a 	bl	800ca68 <vPortExitCritical>

    return xAlreadyYielded;
 800b794:	693b      	ldr	r3, [r7, #16]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20001134 	.word	0x20001134
 800b7a4:	2000110c 	.word	0x2000110c
 800b7a8:	200010cc 	.word	0x200010cc
 800b7ac:	20001114 	.word	0x20001114
 800b7b0:	20000c3c 	.word	0x20000c3c
 800b7b4:	20000c38 	.word	0x20000c38
 800b7b8:	20001120 	.word	0x20001120
 800b7bc:	2000111c 	.word	0x2000111c

0800b7c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800b7c6:	4b05      	ldr	r3, [pc, #20]	@ (800b7dc <xTaskGetTickCount+0x1c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800b7cc:	687b      	ldr	r3, [r7, #4]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	20001110 	.word	0x20001110

0800b7e0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800b7e4:	4b03      	ldr	r3, [pc, #12]	@ (800b7f4 <uxTaskGetNumberOfTasks+0x14>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	2000110c 	.word	0x2000110c

0800b7f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b802:	4b7a      	ldr	r3, [pc, #488]	@ (800b9ec <xTaskIncrementTick+0x1f4>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	f040 80e6 	bne.w	800b9d8 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b80c:	4b78      	ldr	r3, [pc, #480]	@ (800b9f0 <xTaskIncrementTick+0x1f8>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3301      	adds	r3, #1
 800b812:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800b814:	4a76      	ldr	r2, [pc, #472]	@ (800b9f0 <xTaskIncrementTick+0x1f8>)
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d119      	bne.n	800b854 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800b820:	4b74      	ldr	r3, [pc, #464]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <xTaskIncrementTick+0x3a>
 800b82a:	f001 fa4d 	bl	800ccc8 <ulSetInterruptMask>
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <xTaskIncrementTick+0x36>
 800b832:	4b70      	ldr	r3, [pc, #448]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	4b6f      	ldr	r3, [pc, #444]	@ (800b9f8 <xTaskIncrementTick+0x200>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a6d      	ldr	r2, [pc, #436]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	4a6d      	ldr	r2, [pc, #436]	@ (800b9f8 <xTaskIncrementTick+0x200>)
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	6013      	str	r3, [r2, #0]
 800b846:	4b6d      	ldr	r3, [pc, #436]	@ (800b9fc <xTaskIncrementTick+0x204>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3301      	adds	r3, #1
 800b84c:	4a6b      	ldr	r2, [pc, #428]	@ (800b9fc <xTaskIncrementTick+0x204>)
 800b84e:	6013      	str	r3, [r2, #0]
 800b850:	f000 fb90 	bl	800bf74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b854:	4b6a      	ldr	r3, [pc, #424]	@ (800ba00 <xTaskIncrementTick+0x208>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	f0c0 80a7 	bcc.w	800b9ae <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b860:	4b64      	ldr	r3, [pc, #400]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d104      	bne.n	800b874 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b86a:	4b65      	ldr	r3, [pc, #404]	@ (800ba00 <xTaskIncrementTick+0x208>)
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	601a      	str	r2, [r3, #0]
                    break;
 800b872:	e09c      	b.n	800b9ae <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b874:	4b5f      	ldr	r3, [pc, #380]	@ (800b9f4 <xTaskIncrementTick+0x1fc>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d203      	bcs.n	800b894 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800b88c:	4a5c      	ldr	r2, [pc, #368]	@ (800ba00 <xTaskIncrementTick+0x208>)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800b892:	e08c      	b.n	800b9ae <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	695b      	ldr	r3, [r3, #20]
 800b898:	60bb      	str	r3, [r7, #8]
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	68d2      	ldr	r2, [r2, #12]
 800b8a2:	609a      	str	r2, [r3, #8]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	6892      	ldr	r2, [r2, #8]
 800b8ac:	605a      	str	r2, [r3, #4]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d103      	bne.n	800b8c2 <xTaskIncrementTick+0xca>
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	605a      	str	r2, [r3, #4]
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	615a      	str	r2, [r3, #20]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	1e5a      	subs	r2, r3, #1
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d01e      	beq.n	800b918 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8de:	607b      	str	r3, [r7, #4]
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	69db      	ldr	r3, [r3, #28]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	6a12      	ldr	r2, [r2, #32]
 800b8e8:	609a      	str	r2, [r3, #8]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6a1b      	ldr	r3, [r3, #32]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	69d2      	ldr	r2, [r2, #28]
 800b8f2:	605a      	str	r2, [r3, #4]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3318      	adds	r3, #24
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d103      	bne.n	800b908 <xTaskIncrementTick+0x110>
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6a1a      	ldr	r2, [r3, #32]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	605a      	str	r2, [r3, #4]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2200      	movs	r2, #0
 800b90c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	1e5a      	subs	r2, r3, #1
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b91c:	4b39      	ldr	r3, [pc, #228]	@ (800ba04 <xTaskIncrementTick+0x20c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	429a      	cmp	r2, r3
 800b922:	d903      	bls.n	800b92c <xTaskIncrementTick+0x134>
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b928:	4a36      	ldr	r2, [pc, #216]	@ (800ba04 <xTaskIncrementTick+0x20c>)
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b930:	4935      	ldr	r1, [pc, #212]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	3304      	adds	r3, #4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	603b      	str	r3, [r7, #0]
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	609a      	str	r2, [r3, #8]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	689a      	ldr	r2, [r3, #8]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	60da      	str	r2, [r3, #12]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	3204      	adds	r2, #4
 800b958:	605a      	str	r2, [r3, #4]
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	1d1a      	adds	r2, r3, #4
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	609a      	str	r2, [r3, #8]
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b966:	4613      	mov	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4a26      	ldr	r2, [pc, #152]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b970:	441a      	add	r2, r3
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	615a      	str	r2, [r3, #20]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97a:	4923      	ldr	r1, [pc, #140]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	440b      	add	r3, r1
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	1c59      	adds	r1, r3, #1
 800b98a:	481f      	ldr	r0, [pc, #124]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b98c:	4613      	mov	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4403      	add	r3, r0
 800b996:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99c:	4b1b      	ldr	r3, [pc, #108]	@ (800ba0c <xTaskIncrementTick+0x214>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	f67f af5c 	bls.w	800b860 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ac:	e758      	b.n	800b860 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9ae:	4b17      	ldr	r3, [pc, #92]	@ (800ba0c <xTaskIncrementTick+0x214>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b4:	4914      	ldr	r1, [pc, #80]	@ (800ba08 <xTaskIncrementTick+0x210>)
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	440b      	add	r3, r1
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d901      	bls.n	800b9ca <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800b9ca:	4b11      	ldr	r3, [pc, #68]	@ (800ba10 <xTaskIncrementTick+0x218>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d007      	beq.n	800b9e2 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	e004      	b.n	800b9e2 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba14 <xTaskIncrementTick+0x21c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	4a0d      	ldr	r2, [pc, #52]	@ (800ba14 <xTaskIncrementTick+0x21c>)
 800b9e0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3720      	adds	r7, #32
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20001134 	.word	0x20001134
 800b9f0:	20001110 	.word	0x20001110
 800b9f4:	200010c4 	.word	0x200010c4
 800b9f8:	200010c8 	.word	0x200010c8
 800b9fc:	20001124 	.word	0x20001124
 800ba00:	2000112c 	.word	0x2000112c
 800ba04:	20001114 	.word	0x20001114
 800ba08:	20000c3c 	.word	0x20000c3c
 800ba0c:	20000c38 	.word	0x20000c38
 800ba10:	20001120 	.word	0x20001120
 800ba14:	2000111c 	.word	0x2000111c

0800ba18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba1e:	4b26      	ldr	r3, [pc, #152]	@ (800bab8 <vTaskSwitchContext+0xa0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800ba26:	4b25      	ldr	r3, [pc, #148]	@ (800babc <vTaskSwitchContext+0xa4>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800ba2c:	e03f      	b.n	800baae <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800ba2e:	4b23      	ldr	r3, [pc, #140]	@ (800babc <vTaskSwitchContext+0xa4>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba34:	4b22      	ldr	r3, [pc, #136]	@ (800bac0 <vTaskSwitchContext+0xa8>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	607b      	str	r3, [r7, #4]
 800ba3a:	e009      	b.n	800ba50 <vTaskSwitchContext+0x38>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d103      	bne.n	800ba4a <vTaskSwitchContext+0x32>
 800ba42:	f001 f941 	bl	800ccc8 <ulSetInterruptMask>
 800ba46:	bf00      	nop
 800ba48:	e7fd      	b.n	800ba46 <vTaskSwitchContext+0x2e>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	607b      	str	r3, [r7, #4]
 800ba50:	491c      	ldr	r1, [pc, #112]	@ (800bac4 <vTaskSwitchContext+0xac>)
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	4613      	mov	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	440b      	add	r3, r1
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d0eb      	beq.n	800ba3c <vTaskSwitchContext+0x24>
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	4613      	mov	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4a15      	ldr	r2, [pc, #84]	@ (800bac4 <vTaskSwitchContext+0xac>)
 800ba70:	4413      	add	r3, r2
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	605a      	str	r2, [r3, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	3308      	adds	r3, #8
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d104      	bne.n	800ba94 <vTaskSwitchContext+0x7c>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	605a      	str	r2, [r3, #4]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	4a0b      	ldr	r2, [pc, #44]	@ (800bac8 <vTaskSwitchContext+0xb0>)
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	4a08      	ldr	r2, [pc, #32]	@ (800bac0 <vTaskSwitchContext+0xa8>)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800baa4:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <vTaskSwitchContext+0xb0>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3354      	adds	r3, #84	@ 0x54
 800baaa:	4a08      	ldr	r2, [pc, #32]	@ (800bacc <vTaskSwitchContext+0xb4>)
 800baac:	6013      	str	r3, [r2, #0]
}
 800baae:	bf00      	nop
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20001134 	.word	0x20001134
 800babc:	20001120 	.word	0x20001120
 800bac0:	20001114 	.word	0x20001114
 800bac4:	20000c3c 	.word	0x20000c3c
 800bac8:	20000c38 	.word	0x20000c38
 800bacc:	200000b0 	.word	0x200000b0

0800bad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <vTaskPlaceOnEventList+0x18>
 800bae0:	f001 f8f2 	bl	800ccc8 <ulSetInterruptMask>
 800bae4:	bf00      	nop
 800bae6:	e7fd      	b.n	800bae4 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bae8:	4b07      	ldr	r3, [pc, #28]	@ (800bb08 <vTaskPlaceOnEventList+0x38>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	3318      	adds	r3, #24
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7fe fb7e 	bl	800a1f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baf6:	2101      	movs	r1, #1
 800baf8:	6838      	ldr	r0, [r7, #0]
 800bafa:	f000 fc3d 	bl	800c378 <prvAddCurrentTaskToDelayedList>
}
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000c38 	.word	0x20000c38

0800bb0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d103      	bne.n	800bb26 <vTaskPlaceOnEventListRestricted+0x1a>
 800bb1e:	f001 f8d3 	bl	800ccc8 <ulSetInterruptMask>
 800bb22:	bf00      	nop
 800bb24:	e7fd      	b.n	800bb22 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	617b      	str	r3, [r7, #20]
 800bb2c:	4b15      	ldr	r3, [pc, #84]	@ (800bb84 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	61da      	str	r2, [r3, #28]
 800bb34:	4b13      	ldr	r3, [pc, #76]	@ (800bb84 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	6892      	ldr	r2, [r2, #8]
 800bb3c:	621a      	str	r2, [r3, #32]
 800bb3e:	4b11      	ldr	r3, [pc, #68]	@ (800bb84 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	3218      	adds	r2, #24
 800bb48:	605a      	str	r2, [r3, #4]
 800bb4a:	4b0e      	ldr	r3, [pc, #56]	@ (800bb84 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f103 0218 	add.w	r2, r3, #24
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	609a      	str	r2, [r3, #8]
 800bb56:	4b0b      	ldr	r3, [pc, #44]	@ (800bb84 <vTaskPlaceOnEventListRestricted+0x78>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800bb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb72:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb74:	6879      	ldr	r1, [r7, #4]
 800bb76:	68b8      	ldr	r0, [r7, #8]
 800bb78:	f000 fbfe 	bl	800c378 <prvAddCurrentTaskToDelayedList>
    }
 800bb7c:	bf00      	nop
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20000c38 	.word	0x20000c38

0800bb88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d103      	bne.n	800bba6 <xTaskRemoveFromEventList+0x1e>
 800bb9e:	f001 f893 	bl	800ccc8 <ulSetInterruptMask>
 800bba2:	bf00      	nop
 800bba4:	e7fd      	b.n	800bba2 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	6a12      	ldr	r2, [r2, #32]
 800bbb4:	609a      	str	r2, [r3, #8]
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	69ba      	ldr	r2, [r7, #24]
 800bbbc:	69d2      	ldr	r2, [r2, #28]
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d103      	bne.n	800bbd4 <xTaskRemoveFromEventList+0x4c>
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	6a1a      	ldr	r2, [r3, #32]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	605a      	str	r2, [r3, #4]
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	1e5a      	subs	r2, r3, #1
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbe4:	4b49      	ldr	r3, [pc, #292]	@ (800bd0c <xTaskRemoveFromEventList+0x184>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d15f      	bne.n	800bcac <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	695b      	ldr	r3, [r3, #20]
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	69ba      	ldr	r2, [r7, #24]
 800bbf8:	68d2      	ldr	r2, [r2, #12]
 800bbfa:	609a      	str	r2, [r3, #8]
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	6892      	ldr	r2, [r2, #8]
 800bc04:	605a      	str	r2, [r3, #4]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d103      	bne.n	800bc1a <xTaskRemoveFromEventList+0x92>
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	605a      	str	r2, [r3, #4]
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	615a      	str	r2, [r3, #20]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	1e5a      	subs	r2, r3, #1
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc2e:	4b38      	ldr	r3, [pc, #224]	@ (800bd10 <xTaskRemoveFromEventList+0x188>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d903      	bls.n	800bc3e <xTaskRemoveFromEventList+0xb6>
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	4a35      	ldr	r2, [pc, #212]	@ (800bd10 <xTaskRemoveFromEventList+0x188>)
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc42:	4934      	ldr	r1, [pc, #208]	@ (800bd14 <xTaskRemoveFromEventList+0x18c>)
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3304      	adds	r3, #4
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60bb      	str	r3, [r7, #8]
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	609a      	str	r2, [r3, #8]
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	689a      	ldr	r2, [r3, #8]
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	60da      	str	r2, [r3, #12]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	69ba      	ldr	r2, [r7, #24]
 800bc68:	3204      	adds	r2, #4
 800bc6a:	605a      	str	r2, [r3, #4]
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	1d1a      	adds	r2, r3, #4
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	609a      	str	r2, [r3, #8]
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc78:	4613      	mov	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4a24      	ldr	r2, [pc, #144]	@ (800bd14 <xTaskRemoveFromEventList+0x18c>)
 800bc82:	441a      	add	r2, r3
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	615a      	str	r2, [r3, #20]
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc8c:	4921      	ldr	r1, [pc, #132]	@ (800bd14 <xTaskRemoveFromEventList+0x18c>)
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	440b      	add	r3, r1
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	1c59      	adds	r1, r3, #1
 800bc9c:	481d      	ldr	r0, [pc, #116]	@ (800bd14 <xTaskRemoveFromEventList+0x18c>)
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4403      	add	r3, r0
 800bca8:	6019      	str	r1, [r3, #0]
 800bcaa:	e01b      	b.n	800bce4 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcac:	4b1a      	ldr	r3, [pc, #104]	@ (800bd18 <xTaskRemoveFromEventList+0x190>)
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	613b      	str	r3, [r7, #16]
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	61da      	str	r2, [r3, #28]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	621a      	str	r2, [r3, #32]
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	69ba      	ldr	r2, [r7, #24]
 800bcc6:	3218      	adds	r2, #24
 800bcc8:	605a      	str	r2, [r3, #4]
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	f103 0218 	add.w	r2, r3, #24
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	609a      	str	r2, [r3, #8]
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	4a10      	ldr	r2, [pc, #64]	@ (800bd18 <xTaskRemoveFromEventList+0x190>)
 800bcd8:	629a      	str	r2, [r3, #40]	@ 0x28
 800bcda:	4b0f      	ldr	r3, [pc, #60]	@ (800bd18 <xTaskRemoveFromEventList+0x190>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3301      	adds	r3, #1
 800bce0:	4a0d      	ldr	r2, [pc, #52]	@ (800bd18 <xTaskRemoveFromEventList+0x190>)
 800bce2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce8:	4b0c      	ldr	r3, [pc, #48]	@ (800bd1c <xTaskRemoveFromEventList+0x194>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d905      	bls.n	800bcfe <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800bcf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bd20 <xTaskRemoveFromEventList+0x198>)
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	e001      	b.n	800bd02 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800bd02:	69fb      	ldr	r3, [r7, #28]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3720      	adds	r7, #32
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	20001134 	.word	0x20001134
 800bd10:	20001114 	.word	0x20001114
 800bd14:	20000c3c 	.word	0x20000c3c
 800bd18:	200010cc 	.word	0x200010cc
 800bd1c:	20000c38 	.word	0x20000c38
 800bd20:	20001120 	.word	0x20001120

0800bd24 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd2c:	4b06      	ldr	r3, [pc, #24]	@ (800bd48 <vTaskInternalSetTimeOutState+0x24>)
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800bd34:	4b05      	ldr	r3, [pc, #20]	@ (800bd4c <vTaskInternalSetTimeOutState+0x28>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	605a      	str	r2, [r3, #4]
}
 800bd3c:	bf00      	nop
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	20001124 	.word	0x20001124
 800bd4c:	20001110 	.word	0x20001110

0800bd50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <xTaskCheckForTimeOut+0x18>
 800bd60:	f000 ffb2 	bl	800ccc8 <ulSetInterruptMask>
 800bd64:	bf00      	nop
 800bd66:	e7fd      	b.n	800bd64 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d103      	bne.n	800bd76 <xTaskCheckForTimeOut+0x26>
 800bd6e:	f000 ffab 	bl	800ccc8 <ulSetInterruptMask>
 800bd72:	bf00      	nop
 800bd74:	e7fd      	b.n	800bd72 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800bd76:	f000 fe65 	bl	800ca44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800bd7a:	4b1f      	ldr	r3, [pc, #124]	@ (800bdf8 <xTaskCheckForTimeOut+0xa8>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd92:	d102      	bne.n	800bd9a <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	e026      	b.n	800bde8 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	4b17      	ldr	r3, [pc, #92]	@ (800bdfc <xTaskCheckForTimeOut+0xac>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d00a      	beq.n	800bdbc <xTaskCheckForTimeOut+0x6c>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d305      	bcc.n	800bdbc <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	e015      	b.n	800bde8 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d20b      	bcs.n	800bdde <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	1ad2      	subs	r2, r2, r3
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff ffa6 	bl	800bd24 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	617b      	str	r3, [r7, #20]
 800bddc:	e004      	b.n	800bde8 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800bde4:	2301      	movs	r3, #1
 800bde6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800bde8:	f000 fe3e 	bl	800ca68 <vPortExitCritical>

    return xReturn;
 800bdec:	697b      	ldr	r3, [r7, #20]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20001110 	.word	0x20001110
 800bdfc:	20001124 	.word	0x20001124

0800be00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800be04:	4b03      	ldr	r3, [pc, #12]	@ (800be14 <vTaskMissedYield+0x14>)
 800be06:	2201      	movs	r2, #1
 800be08:	601a      	str	r2, [r3, #0]
}
 800be0a:	bf00      	nop
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	20001120 	.word	0x20001120

0800be18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800be20:	f000 f84a 	bl	800beb8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be24:	4b03      	ldr	r3, [pc, #12]	@ (800be34 <prvIdleTask+0x1c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d9f9      	bls.n	800be20 <prvIdleTask+0x8>
            {
                taskYIELD();
 800be2c:	f000 fdf8 	bl	800ca20 <vPortYield>
        prvCheckTasksWaitingTermination();
 800be30:	e7f6      	b.n	800be20 <prvIdleTask+0x8>
 800be32:	bf00      	nop
 800be34:	20000c3c 	.word	0x20000c3c

0800be38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be3e:	2300      	movs	r3, #0
 800be40:	607b      	str	r3, [r7, #4]
 800be42:	e00c      	b.n	800be5e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4a12      	ldr	r2, [pc, #72]	@ (800be98 <prvInitialiseTaskLists+0x60>)
 800be50:	4413      	add	r3, r2
 800be52:	4618      	mov	r0, r3
 800be54:	f7fe f9a0 	bl	800a198 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3301      	adds	r3, #1
 800be5c:	607b      	str	r3, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b37      	cmp	r3, #55	@ 0x37
 800be62:	d9ef      	bls.n	800be44 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800be64:	480d      	ldr	r0, [pc, #52]	@ (800be9c <prvInitialiseTaskLists+0x64>)
 800be66:	f7fe f997 	bl	800a198 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800be6a:	480d      	ldr	r0, [pc, #52]	@ (800bea0 <prvInitialiseTaskLists+0x68>)
 800be6c:	f7fe f994 	bl	800a198 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800be70:	480c      	ldr	r0, [pc, #48]	@ (800bea4 <prvInitialiseTaskLists+0x6c>)
 800be72:	f7fe f991 	bl	800a198 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800be76:	480c      	ldr	r0, [pc, #48]	@ (800bea8 <prvInitialiseTaskLists+0x70>)
 800be78:	f7fe f98e 	bl	800a198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800be7c:	480b      	ldr	r0, [pc, #44]	@ (800beac <prvInitialiseTaskLists+0x74>)
 800be7e:	f7fe f98b 	bl	800a198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800be82:	4b0b      	ldr	r3, [pc, #44]	@ (800beb0 <prvInitialiseTaskLists+0x78>)
 800be84:	4a05      	ldr	r2, [pc, #20]	@ (800be9c <prvInitialiseTaskLists+0x64>)
 800be86:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be88:	4b0a      	ldr	r3, [pc, #40]	@ (800beb4 <prvInitialiseTaskLists+0x7c>)
 800be8a:	4a05      	ldr	r2, [pc, #20]	@ (800bea0 <prvInitialiseTaskLists+0x68>)
 800be8c:	601a      	str	r2, [r3, #0]
}
 800be8e:	bf00      	nop
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000c3c 	.word	0x20000c3c
 800be9c:	2000109c 	.word	0x2000109c
 800bea0:	200010b0 	.word	0x200010b0
 800bea4:	200010cc 	.word	0x200010cc
 800bea8:	200010e0 	.word	0x200010e0
 800beac:	200010f8 	.word	0x200010f8
 800beb0:	200010c4 	.word	0x200010c4
 800beb4:	200010c8 	.word	0x200010c8

0800beb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bebe:	e019      	b.n	800bef4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800bec0:	f000 fdc0 	bl	800ca44 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec4:	4b10      	ldr	r3, [pc, #64]	@ (800bf08 <prvCheckTasksWaitingTermination+0x50>)
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3304      	adds	r3, #4
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fe f9c7 	bl	800a264 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800bed6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf0c <prvCheckTasksWaitingTermination+0x54>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3b01      	subs	r3, #1
 800bedc:	4a0b      	ldr	r2, [pc, #44]	@ (800bf0c <prvCheckTasksWaitingTermination+0x54>)
 800bede:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800bee0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf10 <prvCheckTasksWaitingTermination+0x58>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	4a0a      	ldr	r2, [pc, #40]	@ (800bf10 <prvCheckTasksWaitingTermination+0x58>)
 800bee8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800beea:	f000 fdbd 	bl	800ca68 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f810 	bl	800bf14 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bef4:	4b06      	ldr	r3, [pc, #24]	@ (800bf10 <prvCheckTasksWaitingTermination+0x58>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1e1      	bne.n	800bec0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800befc:	bf00      	nop
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200010e0 	.word	0x200010e0
 800bf0c:	2000110c 	.word	0x2000110c
 800bf10:	200010f4 	.word	0x200010f4

0800bf14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800bf1c:	4b14      	ldr	r3, [pc, #80]	@ (800bf70 <prvDeleteTCB+0x5c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3354      	adds	r3, #84	@ 0x54
 800bf22:	4618      	mov	r0, r3
 800bf24:	f020 f81a 	bl	802bf5c <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d108      	bne.n	800bf44 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 ffd2 	bl	800cee0 <vPortFree>
                vPortFree( pxTCB );
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 ffcf 	bl	800cee0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800bf42:	e011      	b.n	800bf68 <prvDeleteTCB+0x54>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d103      	bne.n	800bf56 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 ffc6 	bl	800cee0 <vPortFree>
    }
 800bf54:	e008      	b.n	800bf68 <prvDeleteTCB+0x54>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d003      	beq.n	800bf68 <prvDeleteTCB+0x54>
 800bf60:	f000 feb2 	bl	800ccc8 <ulSetInterruptMask>
 800bf64:	bf00      	nop
 800bf66:	e7fd      	b.n	800bf64 <prvDeleteTCB+0x50>
    }
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	20000c38 	.word	0x20000c38

0800bf74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf78:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa4 <prvResetNextTaskUnblockTime+0x30>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d104      	bne.n	800bf8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800bf82:	4b09      	ldr	r3, [pc, #36]	@ (800bfa8 <prvResetNextTaskUnblockTime+0x34>)
 800bf84:	f04f 32ff 	mov.w	r2, #4294967295
 800bf88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800bf8a:	e005      	b.n	800bf98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bf8c:	4b05      	ldr	r3, [pc, #20]	@ (800bfa4 <prvResetNextTaskUnblockTime+0x30>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a04      	ldr	r2, [pc, #16]	@ (800bfa8 <prvResetNextTaskUnblockTime+0x34>)
 800bf96:	6013      	str	r3, [r2, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	200010c4 	.word	0x200010c4
 800bfa8:	2000112c 	.word	0x2000112c

0800bfac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800bfb2:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe0 <xTaskGetSchedulerState+0x34>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d102      	bne.n	800bfc0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	607b      	str	r3, [r7, #4]
 800bfbe:	e008      	b.n	800bfd2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfc0:	4b08      	ldr	r3, [pc, #32]	@ (800bfe4 <xTaskGetSchedulerState+0x38>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d102      	bne.n	800bfce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800bfc8:	2302      	movs	r3, #2
 800bfca:	607b      	str	r3, [r7, #4]
 800bfcc:	e001      	b.n	800bfd2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800bfd2:	687b      	ldr	r3, [r7, #4]
    }
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	20001118 	.word	0x20001118
 800bfe4:	20001134 	.word	0x20001134

0800bfe8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800bff4:	2300      	movs	r3, #0
 800bff6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d079      	beq.n	800c0f2 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c002:	4b3e      	ldr	r3, [pc, #248]	@ (800c0fc <xTaskPriorityInherit+0x114>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c008:	429a      	cmp	r2, r3
 800c00a:	d269      	bcs.n	800c0e0 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	db06      	blt.n	800c022 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c014:	4b39      	ldr	r3, [pc, #228]	@ (800c0fc <xTaskPriorityInherit+0x114>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	6959      	ldr	r1, [r3, #20]
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c02a:	4613      	mov	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4a33      	ldr	r2, [pc, #204]	@ (800c100 <xTaskPriorityInherit+0x118>)
 800c034:	4413      	add	r3, r2
 800c036:	4299      	cmp	r1, r3
 800c038:	d14a      	bne.n	800c0d0 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	3304      	adds	r3, #4
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fe f910 	bl	800a264 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c044:	4b2d      	ldr	r3, [pc, #180]	@ (800c0fc <xTaskPriorityInherit+0x114>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c052:	4b2c      	ldr	r3, [pc, #176]	@ (800c104 <xTaskPriorityInherit+0x11c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d903      	bls.n	800c062 <xTaskPriorityInherit+0x7a>
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c05e:	4a29      	ldr	r2, [pc, #164]	@ (800c104 <xTaskPriorityInherit+0x11c>)
 800c060:	6013      	str	r3, [r2, #0]
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c066:	4926      	ldr	r1, [pc, #152]	@ (800c100 <xTaskPriorityInherit+0x118>)
 800c068:	4613      	mov	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4413      	add	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	440b      	add	r3, r1
 800c072:	3304      	adds	r3, #4
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	609a      	str	r2, [r3, #8]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	689a      	ldr	r2, [r3, #8]
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	60da      	str	r2, [r3, #12]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	693a      	ldr	r2, [r7, #16]
 800c08c:	3204      	adds	r2, #4
 800c08e:	605a      	str	r2, [r3, #4]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	1d1a      	adds	r2, r3, #4
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	609a      	str	r2, [r3, #8]
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4a16      	ldr	r2, [pc, #88]	@ (800c100 <xTaskPriorityInherit+0x118>)
 800c0a6:	441a      	add	r2, r3
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	615a      	str	r2, [r3, #20]
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0b0:	4913      	ldr	r1, [pc, #76]	@ (800c100 <xTaskPriorityInherit+0x118>)
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	1c59      	adds	r1, r3, #1
 800c0c0:	480f      	ldr	r0, [pc, #60]	@ (800c100 <xTaskPriorityInherit+0x118>)
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4413      	add	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4403      	add	r3, r0
 800c0cc:	6019      	str	r1, [r3, #0]
 800c0ce:	e004      	b.n	800c0da <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c0fc <xTaskPriorityInherit+0x114>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e008      	b.n	800c0f2 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0e4:	4b05      	ldr	r3, [pc, #20]	@ (800c0fc <xTaskPriorityInherit+0x114>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d201      	bcs.n	800c0f2 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800c0f2:	697b      	ldr	r3, [r7, #20]
    }
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3718      	adds	r7, #24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	20000c38 	.word	0x20000c38
 800c100:	20000c3c 	.word	0x20000c3c
 800c104:	20001114 	.word	0x20001114

0800c108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d070      	beq.n	800c200 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800c11e:	4b3b      	ldr	r3, [pc, #236]	@ (800c20c <xTaskPriorityDisinherit+0x104>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	429a      	cmp	r2, r3
 800c126:	d003      	beq.n	800c130 <xTaskPriorityDisinherit+0x28>
 800c128:	f000 fdce 	bl	800ccc8 <ulSetInterruptMask>
 800c12c:	bf00      	nop
 800c12e:	e7fd      	b.n	800c12c <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c134:	2b00      	cmp	r3, #0
 800c136:	d103      	bne.n	800c140 <xTaskPriorityDisinherit+0x38>
 800c138:	f000 fdc6 	bl	800ccc8 <ulSetInterruptMask>
 800c13c:	bf00      	nop
 800c13e:	e7fd      	b.n	800c13c <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c144:	1e5a      	subs	r2, r3, #1
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c152:	429a      	cmp	r2, r3
 800c154:	d054      	beq.n	800c200 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d150      	bne.n	800c200 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	3304      	adds	r3, #4
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe f87e 	bl	800a264 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c174:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c180:	4b23      	ldr	r3, [pc, #140]	@ (800c210 <xTaskPriorityDisinherit+0x108>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	429a      	cmp	r2, r3
 800c186:	d903      	bls.n	800c190 <xTaskPriorityDisinherit+0x88>
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c18c:	4a20      	ldr	r2, [pc, #128]	@ (800c210 <xTaskPriorityDisinherit+0x108>)
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c194:	491f      	ldr	r1, [pc, #124]	@ (800c214 <xTaskPriorityDisinherit+0x10c>)
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	440b      	add	r3, r1
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	609a      	str	r2, [r3, #8]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	60da      	str	r2, [r3, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	3204      	adds	r2, #4
 800c1bc:	605a      	str	r2, [r3, #4]
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	1d1a      	adds	r2, r3, #4
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	609a      	str	r2, [r3, #8]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4a10      	ldr	r2, [pc, #64]	@ (800c214 <xTaskPriorityDisinherit+0x10c>)
 800c1d4:	441a      	add	r2, r3
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	615a      	str	r2, [r3, #20]
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1de:	490d      	ldr	r1, [pc, #52]	@ (800c214 <xTaskPriorityDisinherit+0x10c>)
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	440b      	add	r3, r1
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	1c59      	adds	r1, r3, #1
 800c1ee:	4809      	ldr	r0, [pc, #36]	@ (800c214 <xTaskPriorityDisinherit+0x10c>)
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4403      	add	r3, r0
 800c1fa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800c200:	697b      	ldr	r3, [r7, #20]
    }
 800c202:	4618      	mov	r0, r3
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	20000c38 	.word	0x20000c38
 800c210:	20001114 	.word	0x20001114
 800c214:	20000c3c 	.word	0x20000c3c

0800c218 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c226:	2301      	movs	r3, #1
 800c228:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 8085 	beq.w	800c33c <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c236:	2b00      	cmp	r3, #0
 800c238:	d103      	bne.n	800c242 <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800c23a:	f000 fd45 	bl	800ccc8 <ulSetInterruptMask>
 800c23e:	bf00      	nop
 800c240:	e7fd      	b.n	800c23e <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d902      	bls.n	800c252 <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	61fb      	str	r3, [r7, #28]
 800c250:	e002      	b.n	800c258 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c256:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25c:	69fa      	ldr	r2, [r7, #28]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d06c      	beq.n	800c33c <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d167      	bne.n	800c33c <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800c26c:	4b35      	ldr	r3, [pc, #212]	@ (800c344 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	429a      	cmp	r2, r3
 800c274:	d103      	bne.n	800c27e <vTaskPriorityDisinheritAfterTimeout+0x66>
 800c276:	f000 fd27 	bl	800ccc8 <ulSetInterruptMask>
 800c27a:	bf00      	nop
 800c27c:	e7fd      	b.n	800c27a <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c282:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	db04      	blt.n	800c29c <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	6959      	ldr	r1, [r3, #20]
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4a27      	ldr	r2, [pc, #156]	@ (800c348 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c2ac:	4413      	add	r3, r2
 800c2ae:	4299      	cmp	r1, r3
 800c2b0:	d144      	bne.n	800c33c <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fd ffd4 	bl	800a264 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2c0:	4b22      	ldr	r3, [pc, #136]	@ (800c34c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d903      	bls.n	800c2d0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2cc:	4a1f      	ldr	r2, [pc, #124]	@ (800c34c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2d4:	491c      	ldr	r1, [pc, #112]	@ (800c348 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	440b      	add	r3, r1
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	60fb      	str	r3, [r7, #12]
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	609a      	str	r2, [r3, #8]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	60da      	str	r2, [r3, #12]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	3204      	adds	r2, #4
 800c2fc:	605a      	str	r2, [r3, #4]
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	1d1a      	adds	r2, r3, #4
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	609a      	str	r2, [r3, #8]
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c30a:	4613      	mov	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4a0d      	ldr	r2, [pc, #52]	@ (800c348 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c314:	441a      	add	r2, r3
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	615a      	str	r2, [r3, #20]
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c31e:	490a      	ldr	r1, [pc, #40]	@ (800c348 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	440b      	add	r3, r1
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	1c59      	adds	r1, r3, #1
 800c32e:	4806      	ldr	r0, [pc, #24]	@ (800c348 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c330:	4613      	mov	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4403      	add	r3, r0
 800c33a:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800c33c:	bf00      	nop
 800c33e:	3720      	adds	r7, #32
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20000c38 	.word	0x20000c38
 800c348:	20000c3c 	.word	0x20000c3c
 800c34c:	20001114 	.word	0x20001114

0800c350 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800c350:	b480      	push	{r7}
 800c352:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800c354:	4b07      	ldr	r3, [pc, #28]	@ (800c374 <pvTaskIncrementMutexHeldCount+0x24>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d004      	beq.n	800c366 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800c35c:	4b05      	ldr	r3, [pc, #20]	@ (800c374 <pvTaskIncrementMutexHeldCount+0x24>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c362:	3201      	adds	r2, #1
 800c364:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800c366:	4b03      	ldr	r3, [pc, #12]	@ (800c374 <pvTaskIncrementMutexHeldCount+0x24>)
 800c368:	681b      	ldr	r3, [r3, #0]
    }
 800c36a:	4618      	mov	r0, r3
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	20000c38 	.word	0x20000c38

0800c378 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800c382:	4b2e      	ldr	r3, [pc, #184]	@ (800c43c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c388:	4b2d      	ldr	r3, [pc, #180]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3304      	adds	r3, #4
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fd ff68 	bl	800a264 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39a:	d124      	bne.n	800c3e6 <prvAddCurrentTaskToDelayedList+0x6e>
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d021      	beq.n	800c3e6 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3a2:	4b28      	ldr	r3, [pc, #160]	@ (800c444 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	613b      	str	r3, [r7, #16]
 800c3a8:	4b25      	ldr	r3, [pc, #148]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	609a      	str	r2, [r3, #8]
 800c3b0:	4b23      	ldr	r3, [pc, #140]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	693a      	ldr	r2, [r7, #16]
 800c3b6:	6892      	ldr	r2, [r2, #8]
 800c3b8:	60da      	str	r2, [r3, #12]
 800c3ba:	4b21      	ldr	r3, [pc, #132]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	3204      	adds	r2, #4
 800c3c4:	605a      	str	r2, [r3, #4]
 800c3c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	1d1a      	adds	r2, r3, #4
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	609a      	str	r2, [r3, #8]
 800c3d0:	4b1b      	ldr	r3, [pc, #108]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c444 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c3d6:	615a      	str	r2, [r3, #20]
 800c3d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c444 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	4a19      	ldr	r2, [pc, #100]	@ (800c444 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c3e0:	6013      	str	r3, [r2, #0]
 800c3e2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800c3e4:	e026      	b.n	800c434 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3ee:	4b14      	ldr	r3, [pc, #80]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d209      	bcs.n	800c412 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3fe:	4b12      	ldr	r3, [pc, #72]	@ (800c448 <prvAddCurrentTaskToDelayedList+0xd0>)
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	4b0f      	ldr	r3, [pc, #60]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3304      	adds	r3, #4
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7fd fef1 	bl	800a1f2 <vListInsert>
}
 800c410:	e010      	b.n	800c434 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c412:	4b0e      	ldr	r3, [pc, #56]	@ (800c44c <prvAddCurrentTaskToDelayedList+0xd4>)
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	4b0a      	ldr	r3, [pc, #40]	@ (800c440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f7fd fee7 	bl	800a1f2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800c424:	4b0a      	ldr	r3, [pc, #40]	@ (800c450 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d202      	bcs.n	800c434 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800c42e:	4a08      	ldr	r2, [pc, #32]	@ (800c450 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6013      	str	r3, [r2, #0]
}
 800c434:	bf00      	nop
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20001110 	.word	0x20001110
 800c440:	20000c38 	.word	0x20000c38
 800c444:	200010f8 	.word	0x200010f8
 800c448:	200010c8 	.word	0x200010c8
 800c44c:	200010c4 	.word	0x200010c4
 800c450:	2000112c 	.word	0x2000112c

0800c454 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800c45e:	f000 fa5f 	bl	800c920 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800c462:	4b18      	ldr	r3, [pc, #96]	@ (800c4c4 <xTimerCreateTimerTask+0x70>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d020      	beq.n	800c4ac <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c472:	463a      	mov	r2, r7
 800c474:	1d39      	adds	r1, r7, #4
 800c476:	f107 0308 	add.w	r3, r7, #8
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fd fe72 	bl	800a164 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	9202      	str	r2, [sp, #8]
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	2302      	movs	r3, #2
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	2300      	movs	r3, #0
 800c490:	460a      	mov	r2, r1
 800c492:	490d      	ldr	r1, [pc, #52]	@ (800c4c8 <xTimerCreateTimerTask+0x74>)
 800c494:	480d      	ldr	r0, [pc, #52]	@ (800c4cc <xTimerCreateTimerTask+0x78>)
 800c496:	f7fe fe4d 	bl	800b134 <xTaskCreateStatic>
 800c49a:	4603      	mov	r3, r0
 800c49c:	4a0c      	ldr	r2, [pc, #48]	@ (800c4d0 <xTimerCreateTimerTask+0x7c>)
 800c49e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800c4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d0 <xTimerCreateTimerTask+0x7c>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d103      	bne.n	800c4ba <xTimerCreateTimerTask+0x66>
 800c4b2:	f000 fc09 	bl	800ccc8 <ulSetInterruptMask>
 800c4b6:	bf00      	nop
 800c4b8:	e7fd      	b.n	800c4b6 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
    }
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	20001168 	.word	0x20001168
 800c4c8:	0802cc54 	.word	0x0802cc54
 800c4cc:	0800c579 	.word	0x0800c579
 800c4d0:	2000116c 	.word	0x2000116c

0800c4d4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c4e0:	e008      	b.n	800c4f4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	699a      	ldr	r2, [r3, #24]
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	18d1      	adds	r1, r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f000 f8d7 	bl	800c6b4 <prvInsertTimerInActiveList>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1ea      	bne.n	800c4e2 <prvReloadTimer+0xe>
        }
    }
 800c50c:	bf00      	nop
 800c50e:	bf00      	nop
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c522:	4b14      	ldr	r3, [pc, #80]	@ (800c574 <prvProcessExpiredTimer+0x5c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	3304      	adds	r3, #4
 800c530:	4618      	mov	r0, r3
 800c532:	f7fd fe97 	bl	800a264 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c53c:	f003 0304 	and.w	r3, r3, #4
 800c540:	2b00      	cmp	r3, #0
 800c542:	d005      	beq.n	800c550 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	f7ff ffc3 	bl	800c4d4 <prvReloadTimer>
 800c54e:	e008      	b.n	800c562 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c556:	f023 0301 	bic.w	r3, r3, #1
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	4798      	blx	r3
    }
 800c56a:	bf00      	nop
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20001160 	.word	0x20001160

0800c578 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c580:	f107 0308 	add.w	r3, r7, #8
 800c584:	4618      	mov	r0, r3
 800c586:	f000 f851 	bl	800c62c <prvGetNextExpireTime>
 800c58a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	4619      	mov	r1, r3
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f000 f805 	bl	800c5a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c596:	f000 f8cf 	bl	800c738 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c59a:	bf00      	nop
 800c59c:	e7f0      	b.n	800c580 <prvTimerTask+0x8>
	...

0800c5a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c5aa:	f7ff f80d 	bl	800b5c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 f85e 	bl	800c674 <prvSampleTimeNow>
 800c5b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d12a      	bne.n	800c616 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10a      	bne.n	800c5dc <prvProcessTimerOrBlockTask+0x3c>
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d806      	bhi.n	800c5dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c5ce:	f7ff f809 	bl	800b5e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5d2:	68f9      	ldr	r1, [r7, #12]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ff9f 	bl	800c518 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c5da:	e01e      	b.n	800c61a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d008      	beq.n	800c5f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5e2:	4b10      	ldr	r3, [pc, #64]	@ (800c624 <prvProcessTimerOrBlockTask+0x84>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <prvProcessTimerOrBlockTask+0x50>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e000      	b.n	800c5f2 <prvProcessTimerOrBlockTask+0x52>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c628 <prvProcessTimerOrBlockTask+0x88>)
 800c5f6:	6818      	ldr	r0, [r3, #0]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	4619      	mov	r1, r3
 800c602:	f7fe fd63 	bl	800b0cc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c606:	f7fe ffed 	bl	800b5e4 <xTaskResumeAll>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d104      	bne.n	800c61a <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800c610:	f000 fa06 	bl	800ca20 <vPortYield>
    }
 800c614:	e001      	b.n	800c61a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800c616:	f7fe ffe5 	bl	800b5e4 <xTaskResumeAll>
    }
 800c61a:	bf00      	nop
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	20001164 	.word	0x20001164
 800c628:	20001168 	.word	0x20001168

0800c62c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c634:	4b0e      	ldr	r3, [pc, #56]	@ (800c670 <prvGetNextExpireTime+0x44>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <prvGetNextExpireTime+0x16>
 800c63e:	2201      	movs	r2, #1
 800c640:	e000      	b.n	800c644 <prvGetNextExpireTime+0x18>
 800c642:	2200      	movs	r2, #0
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d105      	bne.n	800c65c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c650:	4b07      	ldr	r3, [pc, #28]	@ (800c670 <prvGetNextExpireTime+0x44>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	e001      	b.n	800c660 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c660:	68fb      	ldr	r3, [r7, #12]
    }
 800c662:	4618      	mov	r0, r3
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	20001160 	.word	0x20001160

0800c674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c67c:	f7ff f8a0 	bl	800b7c0 <xTaskGetTickCount>
 800c680:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c682:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b0 <prvSampleTimeNow+0x3c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d205      	bcs.n	800c698 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c68c:	f000 f922 	bl	800c8d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	e002      	b.n	800c69e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c69e:	4a04      	ldr	r2, [pc, #16]	@ (800c6b0 <prvSampleTimeNow+0x3c>)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
    }
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20001170 	.word	0x20001170

0800c6b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d812      	bhi.n	800c700 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d302      	bcc.n	800c6ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	617b      	str	r3, [r7, #20]
 800c6ec:	e01b      	b.n	800c726 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6ee:	4b10      	ldr	r3, [pc, #64]	@ (800c730 <prvInsertTimerInActiveList+0x7c>)
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	f7fd fd7a 	bl	800a1f2 <vListInsert>
 800c6fe:	e012      	b.n	800c726 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	429a      	cmp	r2, r3
 800c706:	d206      	bcs.n	800c716 <prvInsertTimerInActiveList+0x62>
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d302      	bcc.n	800c716 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c710:	2301      	movs	r3, #1
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	e007      	b.n	800c726 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c716:	4b07      	ldr	r3, [pc, #28]	@ (800c734 <prvInsertTimerInActiveList+0x80>)
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3304      	adds	r3, #4
 800c71e:	4619      	mov	r1, r3
 800c720:	4610      	mov	r0, r2
 800c722:	f7fd fd66 	bl	800a1f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c726:	697b      	ldr	r3, [r7, #20]
    }
 800c728:	4618      	mov	r0, r3
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	20001164 	.word	0x20001164
 800c734:	20001160 	.word	0x20001160

0800c738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c73e:	e0b7      	b.n	800c8b0 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	da11      	bge.n	800c76a <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c746:	1d3b      	adds	r3, r7, #4
 800c748:	3304      	adds	r3, #4
 800c74a:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d103      	bne.n	800c75a <prvProcessReceivedCommands+0x22>
 800c752:	f000 fab9 	bl	800ccc8 <ulSetInterruptMask>
 800c756:	bf00      	nop
 800c758:	e7fd      	b.n	800c756 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	6850      	ldr	r0, [r2, #4]
 800c762:	69fa      	ldr	r2, [r7, #28]
 800c764:	6892      	ldr	r2, [r2, #8]
 800c766:	4611      	mov	r1, r2
 800c768:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f2c0 809f 	blt.w	800c8b0 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d004      	beq.n	800c788 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	3304      	adds	r3, #4
 800c782:	4618      	mov	r0, r3
 800c784:	f7fd fd6e 	bl	800a264 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c788:	463b      	mov	r3, r7
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff ff72 	bl	800c674 <prvSampleTimeNow>
 800c790:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3b01      	subs	r3, #1
 800c796:	2b08      	cmp	r3, #8
 800c798:	f200 8087 	bhi.w	800c8aa <prvProcessReceivedCommands+0x172>
 800c79c:	a201      	add	r2, pc, #4	@ (adr r2, 800c7a4 <prvProcessReceivedCommands+0x6c>)
 800c79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a2:	bf00      	nop
 800c7a4:	0800c7c9 	.word	0x0800c7c9
 800c7a8:	0800c7c9 	.word	0x0800c7c9
 800c7ac:	0800c831 	.word	0x0800c831
 800c7b0:	0800c845 	.word	0x0800c845
 800c7b4:	0800c881 	.word	0x0800c881
 800c7b8:	0800c7c9 	.word	0x0800c7c9
 800c7bc:	0800c7c9 	.word	0x0800c7c9
 800c7c0:	0800c831 	.word	0x0800c831
 800c7c4:	0800c845 	.word	0x0800c845
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7ce:	f043 0301 	orr.w	r3, r3, #1
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	18d1      	adds	r1, r2, r3
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	697a      	ldr	r2, [r7, #20]
 800c7e6:	69b8      	ldr	r0, [r7, #24]
 800c7e8:	f7ff ff64 	bl	800c6b4 <prvInsertTimerInActiveList>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d05d      	beq.n	800c8ae <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d009      	beq.n	800c814 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	4413      	add	r3, r2
 800c808:	697a      	ldr	r2, [r7, #20]
 800c80a:	4619      	mov	r1, r3
 800c80c:	69b8      	ldr	r0, [r7, #24]
 800c80e:	f7ff fe61 	bl	800c4d4 <prvReloadTimer>
 800c812:	e008      	b.n	800c826 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c81a:	f023 0301 	bic.w	r3, r3, #1
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	69b8      	ldr	r0, [r7, #24]
 800c82c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c82e:	e03e      	b.n	800c8ae <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c836:	f023 0301 	bic.w	r3, r3, #1
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c842:	e035      	b.n	800c8b0 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c84a:	f043 0301 	orr.w	r3, r3, #1
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	699b      	ldr	r3, [r3, #24]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d103      	bne.n	800c86c <prvProcessReceivedCommands+0x134>
 800c864:	f000 fa30 	bl	800ccc8 <ulSetInterruptMask>
 800c868:	bf00      	nop
 800c86a:	e7fd      	b.n	800c868 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	699a      	ldr	r2, [r3, #24]
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	18d1      	adds	r1, r2, r3
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	69b8      	ldr	r0, [r7, #24]
 800c87a:	f7ff ff1b 	bl	800c6b4 <prvInsertTimerInActiveList>
                        break;
 800c87e:	e017      	b.n	800c8b0 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c886:	f003 0302 	and.w	r3, r3, #2
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d103      	bne.n	800c896 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800c88e:	69b8      	ldr	r0, [r7, #24]
 800c890:	f000 fb26 	bl	800cee0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c894:	e00c      	b.n	800c8b0 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c89c:	f023 0301 	bic.w	r3, r3, #1
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800c8a8:	e002      	b.n	800c8b0 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800c8aa:	bf00      	nop
 800c8ac:	e000      	b.n	800c8b0 <prvProcessReceivedCommands+0x178>
                        break;
 800c8ae:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8b0:	4b07      	ldr	r3, [pc, #28]	@ (800c8d0 <prvProcessReceivedCommands+0x198>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	1d39      	adds	r1, r7, #4
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fe f846 	bl	800a94a <xQueueReceive>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f47f af3d 	bne.w	800c740 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800c8c6:	bf00      	nop
 800c8c8:	bf00      	nop
 800c8ca:	3720      	adds	r7, #32
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20001168 	.word	0x20001168

0800c8d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8da:	e009      	b.n	800c8f0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800c918 <prvSwitchTimerLists+0x44>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c8e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c8ea:	6838      	ldr	r0, [r7, #0]
 800c8ec:	f7ff fe14 	bl	800c518 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8f0:	4b09      	ldr	r3, [pc, #36]	@ (800c918 <prvSwitchTimerLists+0x44>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1f0      	bne.n	800c8dc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800c8fa:	4b07      	ldr	r3, [pc, #28]	@ (800c918 <prvSwitchTimerLists+0x44>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800c900:	4b06      	ldr	r3, [pc, #24]	@ (800c91c <prvSwitchTimerLists+0x48>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a04      	ldr	r2, [pc, #16]	@ (800c918 <prvSwitchTimerLists+0x44>)
 800c906:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c908:	4a04      	ldr	r2, [pc, #16]	@ (800c91c <prvSwitchTimerLists+0x48>)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6013      	str	r3, [r2, #0]
    }
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20001160 	.word	0x20001160
 800c91c:	20001164 	.word	0x20001164

0800c920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c926:	f000 f88d 	bl	800ca44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c92a:	4b15      	ldr	r3, [pc, #84]	@ (800c980 <prvCheckForValidListAndQueue+0x60>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d120      	bne.n	800c974 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800c932:	4814      	ldr	r0, [pc, #80]	@ (800c984 <prvCheckForValidListAndQueue+0x64>)
 800c934:	f7fd fc30 	bl	800a198 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c938:	4813      	ldr	r0, [pc, #76]	@ (800c988 <prvCheckForValidListAndQueue+0x68>)
 800c93a:	f7fd fc2d 	bl	800a198 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c93e:	4b13      	ldr	r3, [pc, #76]	@ (800c98c <prvCheckForValidListAndQueue+0x6c>)
 800c940:	4a10      	ldr	r2, [pc, #64]	@ (800c984 <prvCheckForValidListAndQueue+0x64>)
 800c942:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c944:	4b12      	ldr	r3, [pc, #72]	@ (800c990 <prvCheckForValidListAndQueue+0x70>)
 800c946:	4a10      	ldr	r2, [pc, #64]	@ (800c988 <prvCheckForValidListAndQueue+0x68>)
 800c948:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c94a:	2300      	movs	r3, #0
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	4b11      	ldr	r3, [pc, #68]	@ (800c994 <prvCheckForValidListAndQueue+0x74>)
 800c950:	4a11      	ldr	r2, [pc, #68]	@ (800c998 <prvCheckForValidListAndQueue+0x78>)
 800c952:	2110      	movs	r1, #16
 800c954:	200a      	movs	r0, #10
 800c956:	f7fd fd28 	bl	800a3aa <xQueueGenericCreateStatic>
 800c95a:	4603      	mov	r3, r0
 800c95c:	4a08      	ldr	r2, [pc, #32]	@ (800c980 <prvCheckForValidListAndQueue+0x60>)
 800c95e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800c960:	4b07      	ldr	r3, [pc, #28]	@ (800c980 <prvCheckForValidListAndQueue+0x60>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d005      	beq.n	800c974 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c968:	4b05      	ldr	r3, [pc, #20]	@ (800c980 <prvCheckForValidListAndQueue+0x60>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	490b      	ldr	r1, [pc, #44]	@ (800c99c <prvCheckForValidListAndQueue+0x7c>)
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fb36 	bl	800afe0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c974:	f000 f878 	bl	800ca68 <vPortExitCritical>
    }
 800c978:	bf00      	nop
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20001168 	.word	0x20001168
 800c984:	20001138 	.word	0x20001138
 800c988:	2000114c 	.word	0x2000114c
 800c98c:	20001160 	.word	0x20001160
 800c990:	20001164 	.word	0x20001164
 800c994:	20001214 	.word	0x20001214
 800c998:	20001174 	.word	0x20001174
 800c99c:	0802cc5c 	.word	0x0802cc5c

0800c9a0 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d4 <vPortSetupTimerInterrupt+0x34>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d8 <vPortSetupTimerInterrupt+0x38>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <vPortSetupTimerInterrupt+0x3c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a0a      	ldr	r2, [pc, #40]	@ (800c9e0 <vPortSetupTimerInterrupt+0x40>)
 800c9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ba:	099b      	lsrs	r3, r3, #6
 800c9bc:	4a09      	ldr	r2, [pc, #36]	@ (800c9e4 <vPortSetupTimerInterrupt+0x44>)
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c9c2:	4b04      	ldr	r3, [pc, #16]	@ (800c9d4 <vPortSetupTimerInterrupt+0x34>)
 800c9c4:	2207      	movs	r2, #7
 800c9c6:	601a      	str	r2, [r3, #0]
}
 800c9c8:	bf00      	nop
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	e000e010 	.word	0xe000e010
 800c9d8:	e000e018 	.word	0xe000e018
 800c9dc:	20000004 	.word	0x20000004
 800c9e0:	10624dd3 	.word	0x10624dd3
 800c9e4:	e000e014 	.word	0xe000e014

0800c9e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800c9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800ca1c <prvTaskExitError+0x34>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fa:	d003      	beq.n	800ca04 <prvTaskExitError+0x1c>
 800c9fc:	f000 f964 	bl	800ccc8 <ulSetInterruptMask>
 800ca00:	bf00      	nop
 800ca02:	e7fd      	b.n	800ca00 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800ca04:	f000 f960 	bl	800ccc8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800ca08:	bf00      	nop
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0fc      	beq.n	800ca0a <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800ca10:	bf00      	nop
 800ca12:	bf00      	nop
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20000018 	.word	0x20000018

0800ca20 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800ca20:	b480      	push	{r7}
 800ca22:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca24:	4b06      	ldr	r3, [pc, #24]	@ (800ca40 <vPortYield+0x20>)
 800ca26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca2a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ca2c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ca30:	f3bf 8f6f 	isb	sy
}
 800ca34:	bf00      	nop
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	e000ed04 	.word	0xe000ed04

0800ca44 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ca48:	f000 f93e 	bl	800ccc8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ca4c:	4b05      	ldr	r3, [pc, #20]	@ (800ca64 <vPortEnterCritical+0x20>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3301      	adds	r3, #1
 800ca52:	4a04      	ldr	r2, [pc, #16]	@ (800ca64 <vPortEnterCritical+0x20>)
 800ca54:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ca56:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ca5a:	f3bf 8f6f 	isb	sy
}
 800ca5e:	bf00      	nop
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20000018 	.word	0x20000018

0800ca68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca98 <vPortExitCritical+0x30>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d103      	bne.n	800ca7c <vPortExitCritical+0x14>
 800ca74:	f000 f928 	bl	800ccc8 <ulSetInterruptMask>
 800ca78:	bf00      	nop
 800ca7a:	e7fd      	b.n	800ca78 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800ca7c:	4b06      	ldr	r3, [pc, #24]	@ (800ca98 <vPortExitCritical+0x30>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	4a05      	ldr	r2, [pc, #20]	@ (800ca98 <vPortExitCritical+0x30>)
 800ca84:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800ca86:	4b04      	ldr	r3, [pc, #16]	@ (800ca98 <vPortExitCritical+0x30>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800ca8e:	2000      	movs	r0, #0
 800ca90:	f000 f927 	bl	800cce2 <vClearInterruptMask>
    }
}
 800ca94:	bf00      	nop
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	20000018 	.word	0x20000018

0800ca9c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800caa2:	f000 f911 	bl	800ccc8 <ulSetInterruptMask>
 800caa6:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800caa8:	f7fe fea6 	bl	800b7f8 <xTaskIncrementTick>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cab2:	4b05      	ldr	r3, [pc, #20]	@ (800cac8 <xPortSysTickHandler+0x2c>)
 800cab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cab8:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f911 	bl	800cce2 <vClearInterruptMask>
}
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	e000ed04 	.word	0xe000ed04

0800cacc <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3b02      	subs	r3, #2
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800cae2:	7afb      	ldrb	r3, [r7, #11]
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d102      	bne.n	800caee <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800cae8:	f000 f8ba 	bl	800cc60 <vRestoreContextOfFirstTask>
            break;
 800caec:	e003      	b.n	800caf6 <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800caee:	f000 f8eb 	bl	800ccc8 <ulSetInterruptMask>
 800caf2:	bf00      	nop
 800caf4:	e7fd      	b.n	800caf2 <vPortSVCHandler_C+0x26>
    }
}
 800caf6:	bf00      	nop
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3b04      	subs	r3, #4
 800cb12:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb1a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3b04      	subs	r3, #4
 800cb20:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3b04      	subs	r3, #4
 800cb2c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800cb2e:	4a38      	ldr	r2, [pc, #224]	@ (800cc10 <pxPortInitialiseStack+0x110>)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	3b04      	subs	r3, #4
 800cb38:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800cb40:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	3b04      	subs	r3, #4
 800cb46:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800cb4e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3b04      	subs	r3, #4
 800cb54:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800cb5c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3b04      	subs	r3, #4
 800cb62:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800cb6a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3b04      	subs	r3, #4
 800cb70:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	3b04      	subs	r3, #4
 800cb7c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800cb84:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	3b04      	subs	r3, #4
 800cb8a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800cb92:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3b04      	subs	r3, #4
 800cb98:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800cba0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3b04      	subs	r3, #4
 800cba6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800cbae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3b04      	subs	r3, #4
 800cbb4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800cbbc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800cbca:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	3b04      	subs	r3, #4
 800cbd0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800cbd8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3b04      	subs	r3, #4
 800cbde:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800cbe6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	3b04      	subs	r3, #4
 800cbec:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800cbf4:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3b04      	subs	r3, #4
 800cbfa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800cc02:	68fb      	ldr	r3, [r7, #12]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	0800c9e9 	.word	0x0800c9e9

0800cc14 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800cc18:	4b0c      	ldr	r3, [pc, #48]	@ (800cc4c <xPortStartScheduler+0x38>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a0b      	ldr	r2, [pc, #44]	@ (800cc4c <xPortStartScheduler+0x38>)
 800cc1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc22:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800cc24:	4b09      	ldr	r3, [pc, #36]	@ (800cc4c <xPortStartScheduler+0x38>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a08      	ldr	r2, [pc, #32]	@ (800cc4c <xPortStartScheduler+0x38>)
 800cc2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc2e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800cc30:	f7ff feb6 	bl	800c9a0 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800cc34:	4b06      	ldr	r3, [pc, #24]	@ (800cc50 <xPortStartScheduler+0x3c>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800cc3a:	f000 f831 	bl	800cca0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800cc3e:	f7fe feeb 	bl	800ba18 <vTaskSwitchContext>
    prvTaskExitError();
 800cc42:	f7ff fed1 	bl	800c9e8 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	e000ed20 	.word	0xe000ed20
 800cc50:	20000018 	.word	0x20000018
	...

0800cc60 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cc60:	4a0b      	ldr	r2, [pc, #44]	@ (800cc90 <pxCurrentTCBConst2>)
 800cc62:	6811      	ldr	r1, [r2, #0]
 800cc64:	6808      	ldr	r0, [r1, #0]
 800cc66:	c806      	ldmia	r0!, {r1, r2}
 800cc68:	f381 880b 	msr	PSPLIM, r1
 800cc6c:	2102      	movs	r1, #2
 800cc6e:	f381 8814 	msr	CONTROL, r1
 800cc72:	3020      	adds	r0, #32
 800cc74:	f380 8809 	msr	PSP, r0
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f04f 0000 	mov.w	r0, #0
 800cc80:	f380 8811 	msr	BASEPRI, r0
 800cc84:	4710      	bx	r2
 800cc86:	bf00      	nop
 800cc88:	f3af 8000 	nop.w
 800cc8c:	f3af 8000 	nop.w

0800cc90 <pxCurrentTCBConst2>:
 800cc90:	20000c38 	.word	0x20000c38
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
	...

0800cca0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cca0:	4807      	ldr	r0, [pc, #28]	@ (800ccc0 <xVTORConst>)
 800cca2:	6800      	ldr	r0, [r0, #0]
 800cca4:	6800      	ldr	r0, [r0, #0]
 800cca6:	f380 8808 	msr	MSP, r0
 800ccaa:	b662      	cpsie	i
 800ccac:	b661      	cpsie	f
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	df02      	svc	2
 800ccb8:	bf00      	nop
 800ccba:	bf00      	nop
 800ccbc:	f3af 8000 	nop.w

0800ccc0 <xVTORConst>:
 800ccc0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ccc4:	bf00      	nop
 800ccc6:	bf00      	nop

0800ccc8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ccc8:	f3ef 8011 	mrs	r0, BASEPRI
 800cccc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800ccd0:	f381 8811 	msr	BASEPRI, r1
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ccde:	bf00      	nop
 800cce0:	4618      	mov	r0, r3

0800cce2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cce2:	f380 8811 	msr	BASEPRI, r0
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800ccf0:	bf00      	nop
	...

0800cd00 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cd00:	f3ef 8009 	mrs	r0, PSP
 800cd04:	f3ef 820b 	mrs	r2, PSPLIM
 800cd08:	4673      	mov	r3, lr
 800cd0a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800cd0e:	4a10      	ldr	r2, [pc, #64]	@ (800cd50 <pxCurrentTCBConst>)
 800cd10:	6811      	ldr	r1, [r2, #0]
 800cd12:	6008      	str	r0, [r1, #0]
 800cd14:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cd18:	f380 8811 	msr	BASEPRI, r0
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f7fe fe78 	bl	800ba18 <vTaskSwitchContext>
 800cd28:	f04f 0000 	mov.w	r0, #0
 800cd2c:	f380 8811 	msr	BASEPRI, r0
 800cd30:	4a07      	ldr	r2, [pc, #28]	@ (800cd50 <pxCurrentTCBConst>)
 800cd32:	6811      	ldr	r1, [r2, #0]
 800cd34:	6808      	ldr	r0, [r1, #0]
 800cd36:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800cd3a:	f382 880b 	msr	PSPLIM, r2
 800cd3e:	f380 8809 	msr	PSP, r0
 800cd42:	4718      	bx	r3
 800cd44:	f3af 8000 	nop.w
 800cd48:	f3af 8000 	nop.w
 800cd4c:	f3af 8000 	nop.w

0800cd50 <pxCurrentTCBConst>:
 800cd50:	20000c38 	.word	0x20000c38
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop
	...

0800cd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cd60:	f01e 0f04 	tst.w	lr, #4
 800cd64:	bf0c      	ite	eq
 800cd66:	f3ef 8008 	mrseq	r0, MSP
 800cd6a:	f3ef 8009 	mrsne	r0, PSP
 800cd6e:	4904      	ldr	r1, [pc, #16]	@ (800cd80 <svchandler_address_const>)
 800cd70:	4708      	bx	r1
 800cd72:	bf00      	nop
 800cd74:	f3af 8000 	nop.w
 800cd78:	f3af 8000 	nop.w
 800cd7c:	f3af 8000 	nop.w

0800cd80 <svchandler_address_const>:
 800cd80:	0800cacd 	.word	0x0800cacd
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop

0800cd88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800cd90:	2300      	movs	r3, #0
 800cd92:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800cd94:	f7fe fc18 	bl	800b5c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800cd98:	4b4c      	ldr	r3, [pc, #304]	@ (800cecc <pvPortMalloc+0x144>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d101      	bne.n	800cda4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800cda0:	f000 f8ec 	bl	800cf7c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d012      	beq.n	800cdd0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800cdaa:	2208      	movs	r2, #8
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f003 0307 	and.w	r3, r3, #7
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	43db      	mvns	r3, r3
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d804      	bhi.n	800cdcc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	607b      	str	r3, [r7, #4]
 800cdca:	e001      	b.n	800cdd0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	db69      	blt.n	800ceaa <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d066      	beq.n	800ceaa <pvPortMalloc+0x122>
 800cddc:	4b3c      	ldr	r3, [pc, #240]	@ (800ced0 <pvPortMalloc+0x148>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d861      	bhi.n	800ceaa <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800cde6:	4b3b      	ldr	r3, [pc, #236]	@ (800ced4 <pvPortMalloc+0x14c>)
 800cde8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800cdea:	4b3a      	ldr	r3, [pc, #232]	@ (800ced4 <pvPortMalloc+0x14c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdf0:	e004      	b.n	800cdfc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d903      	bls.n	800ce0e <pvPortMalloc+0x86>
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f1      	bne.n	800cdf2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ce0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cecc <pvPortMalloc+0x144>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69fa      	ldr	r2, [r7, #28]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d048      	beq.n	800ceaa <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2208      	movs	r2, #8
 800ce1e:	4413      	add	r3, r2
 800ce20:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	685a      	ldr	r2, [r3, #4]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	1ad2      	subs	r2, r2, r3
 800ce32:	2308      	movs	r3, #8
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d918      	bls.n	800ce6c <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce3a:	69fa      	ldr	r2, [r7, #28]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4413      	add	r3, r2
 800ce40:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f003 0307 	and.w	r3, r3, #7
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d003      	beq.n	800ce54 <pvPortMalloc+0xcc>
 800ce4c:	f7ff ff3c 	bl	800ccc8 <ulSetInterruptMask>
 800ce50:	bf00      	nop
 800ce52:	e7fd      	b.n	800ce50 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	1ad2      	subs	r2, r2, r3
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f000 f8e4 	bl	800d034 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce6c:	4b18      	ldr	r3, [pc, #96]	@ (800ced0 <pvPortMalloc+0x148>)
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	1ad3      	subs	r3, r2, r3
 800ce76:	4a16      	ldr	r2, [pc, #88]	@ (800ced0 <pvPortMalloc+0x148>)
 800ce78:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce7a:	4b15      	ldr	r3, [pc, #84]	@ (800ced0 <pvPortMalloc+0x148>)
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	4b16      	ldr	r3, [pc, #88]	@ (800ced8 <pvPortMalloc+0x150>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d203      	bcs.n	800ce8e <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce86:	4b12      	ldr	r3, [pc, #72]	@ (800ced0 <pvPortMalloc+0x148>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a13      	ldr	r2, [pc, #76]	@ (800ced8 <pvPortMalloc+0x150>)
 800ce8c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800cea0:	4b0e      	ldr	r3, [pc, #56]	@ (800cedc <pvPortMalloc+0x154>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	3301      	adds	r3, #1
 800cea6:	4a0d      	ldr	r2, [pc, #52]	@ (800cedc <pvPortMalloc+0x154>)
 800cea8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ceaa:	f7fe fb9b 	bl	800b5e4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f003 0307 	and.w	r3, r3, #7
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d003      	beq.n	800cec0 <pvPortMalloc+0x138>
 800ceb8:	f7ff ff06 	bl	800ccc8 <ulSetInterruptMask>
 800cebc:	bf00      	nop
 800cebe:	e7fd      	b.n	800cebc <pvPortMalloc+0x134>
    return pvReturn;
 800cec0:	697b      	ldr	r3, [r7, #20]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3720      	adds	r7, #32
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	2000d5bc 	.word	0x2000d5bc
 800ced0:	2000d5c0 	.word	0x2000d5c0
 800ced4:	2000d5b4 	.word	0x2000d5b4
 800ced8:	2000d5c4 	.word	0x2000d5c4
 800cedc:	2000d5c8 	.word	0x2000d5c8

0800cee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d03b      	beq.n	800cf6a <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800cef2:	2308      	movs	r3, #8
 800cef4:	425b      	negs	r3, r3
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	4413      	add	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	db03      	blt.n	800cf10 <vPortFree+0x30>
 800cf08:	f7ff fede 	bl	800ccc8 <ulSetInterruptMask>
 800cf0c:	bf00      	nop
 800cf0e:	e7fd      	b.n	800cf0c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d003      	beq.n	800cf20 <vPortFree+0x40>
 800cf18:	f7ff fed6 	bl	800ccc8 <ulSetInterruptMask>
 800cf1c:	bf00      	nop
 800cf1e:	e7fd      	b.n	800cf1c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	0fdb      	lsrs	r3, r3, #31
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01c      	beq.n	800cf6a <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d118      	bne.n	800cf6a <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800cf44:	f7fe fb40 	bl	800b5c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	4b09      	ldr	r3, [pc, #36]	@ (800cf74 <vPortFree+0x94>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4413      	add	r3, r2
 800cf52:	4a08      	ldr	r2, [pc, #32]	@ (800cf74 <vPortFree+0x94>)
 800cf54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf56:	68b8      	ldr	r0, [r7, #8]
 800cf58:	f000 f86c 	bl	800d034 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800cf5c:	4b06      	ldr	r3, [pc, #24]	@ (800cf78 <vPortFree+0x98>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3301      	adds	r3, #1
 800cf62:	4a05      	ldr	r2, [pc, #20]	@ (800cf78 <vPortFree+0x98>)
 800cf64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800cf66:	f7fe fb3d 	bl	800b5e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800cf6a:	bf00      	nop
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	2000d5c0 	.word	0x2000d5c0
 800cf78:	2000d5cc 	.word	0x2000d5cc

0800cf7c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf82:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800cf86:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800cf88:	4b25      	ldr	r3, [pc, #148]	@ (800d020 <prvHeapInit+0xa4>)
 800cf8a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f003 0307 	and.w	r3, r3, #7
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00c      	beq.n	800cfb0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3307      	adds	r3, #7
 800cf9a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f023 0307 	bic.w	r3, r3, #7
 800cfa2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	4a1d      	ldr	r2, [pc, #116]	@ (800d020 <prvHeapInit+0xa4>)
 800cfac:	4413      	add	r3, r2
 800cfae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfb4:	4a1b      	ldr	r2, [pc, #108]	@ (800d024 <prvHeapInit+0xa8>)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800cfba:	4b1a      	ldr	r3, [pc, #104]	@ (800d024 <prvHeapInit+0xa8>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	68ba      	ldr	r2, [r7, #8]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800cfc8:	2208      	movs	r2, #8
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	1a9b      	subs	r3, r3, r2
 800cfce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f023 0307 	bic.w	r3, r3, #7
 800cfd6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4a13      	ldr	r2, [pc, #76]	@ (800d028 <prvHeapInit+0xac>)
 800cfdc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800cfde:	4b12      	ldr	r3, [pc, #72]	@ (800d028 <prvHeapInit+0xac>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800cfe6:	4b10      	ldr	r3, [pc, #64]	@ (800d028 <prvHeapInit+0xac>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2200      	movs	r2, #0
 800cfec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cffc:	4b0a      	ldr	r3, [pc, #40]	@ (800d028 <prvHeapInit+0xac>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	4a08      	ldr	r2, [pc, #32]	@ (800d02c <prvHeapInit+0xb0>)
 800d00a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	4a07      	ldr	r2, [pc, #28]	@ (800d030 <prvHeapInit+0xb4>)
 800d012:	6013      	str	r3, [r2, #0]
}
 800d014:	bf00      	nop
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	20001264 	.word	0x20001264
 800d024:	2000d5b4 	.word	0x2000d5b4
 800d028:	2000d5bc 	.word	0x2000d5bc
 800d02c:	2000d5c4 	.word	0x2000d5c4
 800d030:	2000d5c0 	.word	0x2000d5c0

0800d034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d03c:	4b28      	ldr	r3, [pc, #160]	@ (800d0e0 <prvInsertBlockIntoFreeList+0xac>)
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	e002      	b.n	800d048 <prvInsertBlockIntoFreeList+0x14>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d8f7      	bhi.n	800d042 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	4413      	add	r3, r2
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	429a      	cmp	r2, r3
 800d062:	d108      	bne.n	800d076 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	441a      	add	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	441a      	add	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d118      	bne.n	800d0bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	4b15      	ldr	r3, [pc, #84]	@ (800d0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	429a      	cmp	r2, r3
 800d094:	d00d      	beq.n	800d0b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685a      	ldr	r2, [r3, #4]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	441a      	add	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	601a      	str	r2, [r3, #0]
 800d0b0:	e008      	b.n	800d0c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e4 <prvInsertBlockIntoFreeList+0xb0>)
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	601a      	str	r2, [r3, #0]
 800d0ba:	e003      	b.n	800d0c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d002      	beq.n	800d0d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d0d2:	bf00      	nop
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	2000d5b4 	.word	0x2000d5b4
 800d0e4:	2000d5bc 	.word	0x2000d5bc

0800d0e8 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	af00      	add	r7, sp, #0
}
 800d0ec:	bf00      	nop
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800d0fa:	f006 f94d 	bl	8013398 <touchgfx_components_init>
    touchgfx_init();
 800d0fe:	f006 f921 	bl	8013344 <touchgfx_init>
}
 800d102:	bf00      	nop
 800d104:	bd80      	pop	{r7, pc}

0800d106 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800d10e:	f006 f94b 	bl	80133a8 <touchgfx_taskEntry>
}
 800d112:	bf00      	nop
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
    {
 800d124:	4a04      	ldr	r2, [pc, #16]	@ (800d138 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	601a      	str	r2, [r3, #0]
    }
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	0802e288 	.word	0x0802e288

0800d13c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
    }
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff ffe9 	bl	800d11c <_ZN8touchgfx12FontProviderD1Ev>
 800d14a:	2104      	movs	r1, #4
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f01e fc88 	bl	802ba62 <_ZdlPvj>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	460b      	mov	r3, r1
 800d166:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d168:	887b      	ldrh	r3, [r7, #2]
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d010      	beq.n	800d190 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d16e:	2b02      	cmp	r3, #2
 800d170:	dc13      	bgt.n	800d19a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d176:	2b01      	cmp	r3, #1
 800d178:	d005      	beq.n	800d186 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d17a:	e00e      	b.n	800d19a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d17c:	f004 fe7a 	bl	8011e74 <_ZN17TypedTextDatabase8getFontsEv>
 800d180:	4603      	mov	r3, r0
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	e00a      	b.n	800d19c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d186:	f004 fe75 	bl	8011e74 <_ZN17TypedTextDatabase8getFontsEv>
 800d18a:	4603      	mov	r3, r0
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	e005      	b.n	800d19c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d190:	f004 fe70 	bl	8011e74 <_ZN17TypedTextDatabase8getFontsEv>
 800d194:	4603      	mov	r3, r0
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	e000      	b.n	800d19c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d19a:	2300      	movs	r3, #0
    }
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	4a05      	ldr	r2, [pc, #20]	@ (800d1c4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	601a      	str	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7ff ffb1 	bl	800d11c <_ZN8touchgfx12FontProviderD1Ev>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	0802e274 	.word	0x0802e274

0800d1c8 <_ZN23ApplicationFontProviderD0Ev>:
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff ffe7 	bl	800d1a4 <_ZN23ApplicationFontProviderD1Ev>
 800d1d6:	2104      	movs	r1, #4
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f01e fc42 	bl	802ba62 <_ZdlPvj>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
    {
 800d1f0:	4a04      	ldr	r2, [pc, #16]	@ (800d204 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	601a      	str	r2, [r3, #0]
    }
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	0802e978 	.word	0x0802e978

0800d208 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
    }
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff ffe9 	bl	800d1e8 <_ZN8touchgfx4FontD1Ev>
 800d216:	2114      	movs	r1, #20
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f01e fc22 	bl	802ba62 <_ZdlPvj>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d228:	b590      	push	{r4, r7, lr}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d234:	887b      	ldrh	r3, [r7, #2]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e010      	b.n	800d260 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3308      	adds	r3, #8
 800d24c:	681c      	ldr	r4, [r3, #0]
 800d24e:	f107 030f 	add.w	r3, r7, #15
 800d252:	f107 0210 	add.w	r2, r7, #16
 800d256:	8879      	ldrh	r1, [r7, #2]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	47a0      	blx	r4
 800d25c:	6178      	str	r0, [r7, #20]
        return glyph;
 800d25e:	697b      	ldr	r3, [r7, #20]
    }
 800d260:	4618      	mov	r0, r3
 800d262:	371c      	adds	r7, #28
 800d264:	46bd      	mov	sp, r7
 800d266:	bd90      	pop	{r4, r7, pc}

0800d268 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	89db      	ldrh	r3, [r3, #14]
    }
 800d274:	4618      	mov	r0, r3
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr

0800d298 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	88db      	ldrh	r3, [r3, #6]
    }
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	889b      	ldrh	r3, [r3, #4]
    }
 800d2bc:	4618      	mov	r0, r3
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	7a9b      	ldrb	r3, [r3, #10]
 800d2d4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d2d8:	b2db      	uxtb	r3, r3
    }
 800d2da:	4618      	mov	r0, r3
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d2e6:	b480      	push	{r7}
 800d2e8:	b083      	sub	sp, #12
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	7a9b      	ldrb	r3, [r3, #10]
 800d2f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d2f6:	b2db      	uxtb	r3, r3
    }
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
    {
        return false;
 800d30c:	2300      	movs	r3, #0
    }
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d322:	f04f 0300 	mov.w	r3, #0
 800d326:	ee07 3a90 	vmov	s15, r3
    }
 800d32a:	eeb0 0a67 	vmov.f32	s0, s15
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	4a05      	ldr	r2, [pc, #20]	@ (800d358 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff ff4d 	bl	800d1e8 <_ZN8touchgfx4FontD1Ev>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	0802f9e8 	.word	0x0802f9e8

0800d35c <_ZN8touchgfx9ConstFontD0Ev>:
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7ff ffe7 	bl	800d338 <_ZN8touchgfx9ConstFontD1Ev>
 800d36a:	211c      	movs	r1, #28
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f01e fb78 	bl	802ba62 <_ZdlPvj>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	4a05      	ldr	r2, [pc, #20]	@ (800d39c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7ff ffd3 	bl	800d338 <_ZN8touchgfx9ConstFontD1Ev>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4618      	mov	r0, r3
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	0802e2ac 	.word	0x0802e2ac

0800d3a0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff ffe7 	bl	800d37c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d3ae:	212c      	movs	r1, #44	@ 0x2c
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f01e fb56 	bl	802ba62 <_ZdlPvj>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
    {
 800d3c8:	4a04      	ldr	r2, [pc, #16]	@ (800d3dc <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	601a      	str	r2, [r3, #0]
    }
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr
 800d3dc:	0802e29c 	.word	0x0802e29c

0800d3e0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
    }
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7ff ffe9 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
 800d3ee:	2108      	movs	r1, #8
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f01e fb36 	bl	802ba62 <_ZdlPvj>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800d40c:	4618      	mov	r0, r3
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d430:	b580      	push	{r7, lr}
 800d432:	b08e      	sub	sp, #56	@ 0x38
 800d434:	af0a      	add	r7, sp, #40	@ 0x28
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	4611      	mov	r1, r2
 800d43c:	461a      	mov	r2, r3
 800d43e:	460b      	mov	r3, r1
 800d440:	80fb      	strh	r3, [r7, #6]
 800d442:	4613      	mov	r3, r2
 800d444:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	88b9      	ldrh	r1, [r7, #4]
 800d44a:	88fa      	ldrh	r2, [r7, #6]
 800d44c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d450:	9308      	str	r3, [sp, #32]
 800d452:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d454:	9307      	str	r3, [sp, #28]
 800d456:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d45a:	9306      	str	r3, [sp, #24]
 800d45c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d460:	9305      	str	r3, [sp, #20]
 800d462:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d466:	9304      	str	r3, [sp, #16]
 800d468:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d46c:	9303      	str	r3, [sp, #12]
 800d46e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d472:	9302      	str	r3, [sp, #8]
 800d474:	7f3b      	ldrb	r3, [r7, #28]
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	8b3b      	ldrh	r3, [r7, #24]
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	460b      	mov	r3, r1
 800d47e:	68b9      	ldr	r1, [r7, #8]
 800d480:	f00d fd22 	bl	801aec8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800d484:	4a09      	ldr	r2, [pc, #36]	@ (800d4ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d48e:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d494:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d49a:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4a0:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	0802e2ac 	.word	0x0802e2ac

0800d4b0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	69db      	ldr	r3, [r3, #28]
 800d4be:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	889b      	ldrh	r3, [r3, #4]
 800d4c4:	0adb      	lsrs	r3, r3, #11
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4413      	add	r3, r2
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b089      	sub	sp, #36	@ 0x24
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	60f8      	str	r0, [r7, #12]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	607a      	str	r2, [r7, #4]
 800d4ee:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d003      	beq.n	800d4fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	7b1b      	ldrb	r3, [r3, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d101      	bne.n	800d502 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	e031      	b.n	800d566 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6a1a      	ldr	r2, [r3, #32]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	7b5b      	ldrb	r3, [r3, #13]
 800d50e:	021b      	lsls	r3, r3, #8
 800d510:	b21b      	sxth	r3, r3
 800d512:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d516:	b219      	sxth	r1, r3
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	7adb      	ldrb	r3, [r3, #11]
 800d51c:	b21b      	sxth	r3, r3
 800d51e:	430b      	orrs	r3, r1
 800d520:	b21b      	sxth	r3, r3
 800d522:	b29b      	uxth	r3, r3
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	4413      	add	r3, r2
 800d528:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7b1b      	ldrb	r3, [r3, #12]
 800d52e:	837b      	strh	r3, [r7, #26]
 800d530:	e013      	b.n	800d55a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	881b      	ldrh	r3, [r3, #0]
 800d536:	897a      	ldrh	r2, [r7, #10]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d103      	bne.n	800d544 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d542:	e010      	b.n	800d566 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	897a      	ldrh	r2, [r7, #10]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d309      	bcc.n	800d562 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d54e:	8b7b      	ldrh	r3, [r7, #26]
 800d550:	3b01      	subs	r3, #1
 800d552:	837b      	strh	r3, [r7, #26]
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	3304      	adds	r3, #4
 800d558:	61fb      	str	r3, [r7, #28]
 800d55a:	8b7b      	ldrh	r3, [r7, #26]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1e8      	bne.n	800d532 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800d560:	e000      	b.n	800d564 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800d562:	bf00      	nop
        }
    }
    return 0;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3724      	adds	r7, #36	@ 0x24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
	...

0800d574 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 95, 12, 10, 0, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
 800d578:	4801      	ldr	r0, [pc, #4]	@ (800d580 <__tcf_0+0xc>)
 800d57a:	f7ff feff 	bl	800d37c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	2000d5d0 	.word	0x2000d5d0

0800d584 <_Z23getFont_verdana_10_4bppv>:
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b08e      	sub	sp, #56	@ 0x38
 800d588:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 95, 12, 10, 0, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d58a:	4b20      	ldr	r3, [pc, #128]	@ (800d60c <_Z23getFont_verdana_10_4bppv+0x88>)
 800d58c:	e8d3 3faf 	lda	r3, [r3]
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	bf0c      	ite	eq
 800d598:	2301      	moveq	r3, #1
 800d59a:	2300      	movne	r3, #0
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d030      	beq.n	800d604 <_Z23getFont_verdana_10_4bppv+0x80>
 800d5a2:	481a      	ldr	r0, [pc, #104]	@ (800d60c <_Z23getFont_verdana_10_4bppv+0x88>)
 800d5a4:	f01e fa5f 	bl	802ba66 <__cxa_guard_acquire>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bf14      	ite	ne
 800d5ae:	2301      	movne	r3, #1
 800d5b0:	2300      	moveq	r3, #0
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d025      	beq.n	800d604 <_Z23getFont_verdana_10_4bppv+0x80>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5bc:	2300      	movs	r3, #0
 800d5be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5c4:	233f      	movs	r3, #63	@ 0x3f
 800d5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c8:	4b11      	ldr	r3, [pc, #68]	@ (800d610 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d5ca:	9308      	str	r3, [sp, #32]
 800d5cc:	4b11      	ldr	r3, [pc, #68]	@ (800d614 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d5ce:	9307      	str	r3, [sp, #28]
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	9306      	str	r3, [sp, #24]
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	9305      	str	r3, [sp, #20]
 800d5d8:	2301      	movs	r3, #1
 800d5da:	9304      	str	r3, [sp, #16]
 800d5dc:	2304      	movs	r3, #4
 800d5de:	9303      	str	r3, [sp, #12]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9302      	str	r3, [sp, #8]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	9301      	str	r3, [sp, #4]
 800d5e8:	230a      	movs	r3, #10
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	225f      	movs	r2, #95	@ 0x5f
 800d5f0:	4909      	ldr	r1, [pc, #36]	@ (800d618 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d5f2:	480a      	ldr	r0, [pc, #40]	@ (800d61c <_Z23getFont_verdana_10_4bppv+0x98>)
 800d5f4:	f7ff ff1c 	bl	800d430 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d5f8:	4809      	ldr	r0, [pc, #36]	@ (800d620 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800d5fa:	f01e fa7d 	bl	802baf8 <atexit>
 800d5fe:	4803      	ldr	r0, [pc, #12]	@ (800d60c <_Z23getFont_verdana_10_4bppv+0x88>)
 800d600:	f01e fa3d 	bl	802ba7e <__cxa_guard_release>
    return verdana_10_4bpp;
 800d604:	4b05      	ldr	r3, [pc, #20]	@ (800d61c <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800d606:	4618      	mov	r0, r3
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	2000d5fc 	.word	0x2000d5fc
 800d610:	08039bc0 	.word	0x08039bc0
 800d614:	0803a07c 	.word	0x0803a07c
 800d618:	08038c24 	.word	0x08038c24
 800d61c:	2000d5d0 	.word	0x2000d5d0
 800d620:	0800d575 	.word	0x0800d575

0800d624 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d624:	b580      	push	{r7, lr}
 800d626:	af00      	add	r7, sp, #0
 800d628:	4801      	ldr	r0, [pc, #4]	@ (800d630 <__tcf_0+0xc>)
 800d62a:	f7ff fea7 	bl	800d37c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	2000d600 	.word	0x2000d600

0800d634 <_Z23getFont_verdana_20_4bppv>:
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08e      	sub	sp, #56	@ 0x38
 800d638:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d63a:	4b20      	ldr	r3, [pc, #128]	@ (800d6bc <_Z23getFont_verdana_20_4bppv+0x88>)
 800d63c:	e8d3 3faf 	lda	r3, [r3]
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b00      	cmp	r3, #0
 800d646:	bf0c      	ite	eq
 800d648:	2301      	moveq	r3, #1
 800d64a:	2300      	movne	r3, #0
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d030      	beq.n	800d6b4 <_Z23getFont_verdana_20_4bppv+0x80>
 800d652:	481a      	ldr	r0, [pc, #104]	@ (800d6bc <_Z23getFont_verdana_20_4bppv+0x88>)
 800d654:	f01e fa07 	bl	802ba66 <__cxa_guard_acquire>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	bf14      	ite	ne
 800d65e:	2301      	movne	r3, #1
 800d660:	2300      	moveq	r3, #0
 800d662:	b2db      	uxtb	r3, r3
 800d664:	2b00      	cmp	r3, #0
 800d666:	d025      	beq.n	800d6b4 <_Z23getFont_verdana_20_4bppv+0x80>
 800d668:	2300      	movs	r3, #0
 800d66a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d66c:	2300      	movs	r3, #0
 800d66e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d670:	2300      	movs	r3, #0
 800d672:	930a      	str	r3, [sp, #40]	@ 0x28
 800d674:	233f      	movs	r3, #63	@ 0x3f
 800d676:	9309      	str	r3, [sp, #36]	@ 0x24
 800d678:	4b11      	ldr	r3, [pc, #68]	@ (800d6c0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800d67a:	9308      	str	r3, [sp, #32]
 800d67c:	4b11      	ldr	r3, [pc, #68]	@ (800d6c4 <_Z23getFont_verdana_20_4bppv+0x90>)
 800d67e:	9307      	str	r3, [sp, #28]
 800d680:	2301      	movs	r3, #1
 800d682:	9306      	str	r3, [sp, #24]
 800d684:	2301      	movs	r3, #1
 800d686:	9305      	str	r3, [sp, #20]
 800d688:	2301      	movs	r3, #1
 800d68a:	9304      	str	r3, [sp, #16]
 800d68c:	2304      	movs	r3, #4
 800d68e:	9303      	str	r3, [sp, #12]
 800d690:	2300      	movs	r3, #0
 800d692:	9302      	str	r3, [sp, #8]
 800d694:	2300      	movs	r3, #0
 800d696:	9301      	str	r3, [sp, #4]
 800d698:	2314      	movs	r3, #20
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	2318      	movs	r3, #24
 800d69e:	225f      	movs	r2, #95	@ 0x5f
 800d6a0:	4909      	ldr	r1, [pc, #36]	@ (800d6c8 <_Z23getFont_verdana_20_4bppv+0x94>)
 800d6a2:	480a      	ldr	r0, [pc, #40]	@ (800d6cc <_Z23getFont_verdana_20_4bppv+0x98>)
 800d6a4:	f7ff fec4 	bl	800d430 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d6a8:	4809      	ldr	r0, [pc, #36]	@ (800d6d0 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800d6aa:	f01e fa25 	bl	802baf8 <atexit>
 800d6ae:	4803      	ldr	r0, [pc, #12]	@ (800d6bc <_Z23getFont_verdana_20_4bppv+0x88>)
 800d6b0:	f01e f9e5 	bl	802ba7e <__cxa_guard_release>
    return verdana_20_4bpp;
 800d6b4:	4b05      	ldr	r3, [pc, #20]	@ (800d6cc <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	2000d62c 	.word	0x2000d62c
 800d6c0:	08039bf4 	.word	0x08039bf4
 800d6c4:	0803a080 	.word	0x0803a080
 800d6c8:	08039158 	.word	0x08039158
 800d6cc:	2000d600 	.word	0x2000d600
 800d6d0:	0800d625 	.word	0x0800d625

0800d6d4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	4801      	ldr	r0, [pc, #4]	@ (800d6e0 <__tcf_0+0xc>)
 800d6da:	f7ff fe4f 	bl	800d37c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	2000d630 	.word	0x2000d630

0800d6e4 <_Z23getFont_verdana_40_4bppv>:
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08e      	sub	sp, #56	@ 0x38
 800d6e8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d6ea:	4b20      	ldr	r3, [pc, #128]	@ (800d76c <_Z23getFont_verdana_40_4bppv+0x88>)
 800d6ec:	e8d3 3faf 	lda	r3, [r3]
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	bf0c      	ite	eq
 800d6f8:	2301      	moveq	r3, #1
 800d6fa:	2300      	movne	r3, #0
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d030      	beq.n	800d764 <_Z23getFont_verdana_40_4bppv+0x80>
 800d702:	481a      	ldr	r0, [pc, #104]	@ (800d76c <_Z23getFont_verdana_40_4bppv+0x88>)
 800d704:	f01e f9af 	bl	802ba66 <__cxa_guard_acquire>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	bf14      	ite	ne
 800d70e:	2301      	movne	r3, #1
 800d710:	2300      	moveq	r3, #0
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b00      	cmp	r3, #0
 800d716:	d025      	beq.n	800d764 <_Z23getFont_verdana_40_4bppv+0x80>
 800d718:	2300      	movs	r3, #0
 800d71a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d71c:	2300      	movs	r3, #0
 800d71e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d720:	2300      	movs	r3, #0
 800d722:	930a      	str	r3, [sp, #40]	@ 0x28
 800d724:	233f      	movs	r3, #63	@ 0x3f
 800d726:	9309      	str	r3, [sp, #36]	@ 0x24
 800d728:	4b11      	ldr	r3, [pc, #68]	@ (800d770 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d72a:	9308      	str	r3, [sp, #32]
 800d72c:	4b11      	ldr	r3, [pc, #68]	@ (800d774 <_Z23getFont_verdana_40_4bppv+0x90>)
 800d72e:	9307      	str	r3, [sp, #28]
 800d730:	2302      	movs	r3, #2
 800d732:	9306      	str	r3, [sp, #24]
 800d734:	2302      	movs	r3, #2
 800d736:	9305      	str	r3, [sp, #20]
 800d738:	2301      	movs	r3, #1
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	2304      	movs	r3, #4
 800d73e:	9303      	str	r3, [sp, #12]
 800d740:	2300      	movs	r3, #0
 800d742:	9302      	str	r3, [sp, #8]
 800d744:	2300      	movs	r3, #0
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	2328      	movs	r3, #40	@ 0x28
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	2330      	movs	r3, #48	@ 0x30
 800d74e:	225f      	movs	r2, #95	@ 0x5f
 800d750:	4909      	ldr	r1, [pc, #36]	@ (800d778 <_Z23getFont_verdana_40_4bppv+0x94>)
 800d752:	480a      	ldr	r0, [pc, #40]	@ (800d77c <_Z23getFont_verdana_40_4bppv+0x98>)
 800d754:	f7ff fe6c 	bl	800d430 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d758:	4809      	ldr	r0, [pc, #36]	@ (800d780 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800d75a:	f01e f9cd 	bl	802baf8 <atexit>
 800d75e:	4803      	ldr	r0, [pc, #12]	@ (800d76c <_Z23getFont_verdana_40_4bppv+0x88>)
 800d760:	f01e f98d 	bl	802ba7e <__cxa_guard_release>
    return verdana_40_4bpp;
 800d764:	4b05      	ldr	r3, [pc, #20]	@ (800d77c <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800d766:	4618      	mov	r0, r3
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	2000d65c 	.word	0x2000d65c
 800d770:	08039d98 	.word	0x08039d98
 800d774:	0803a084 	.word	0x0803a084
 800d778:	0803968c 	.word	0x0803968c
 800d77c:	2000d630 	.word	0x2000d630
 800d780:	0800d6d5 	.word	0x0800d6d5

0800d784 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d7a6:	bf00      	nop
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d7b2:	b480      	push	{r7}
 800d7b4:	b083      	sub	sp, #12
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d7d2:	bf00      	nop
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr

0800d7de <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d7de:	b480      	push	{r7}
 800d7e0:	b083      	sub	sp, #12
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d7ea:	bf00      	nop
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d7f6:	b480      	push	{r7}
 800d7f8:	b083      	sub	sp, #12
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
    {
    }
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
    {
    }
 800d812:	bf00      	nop
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
	...

0800d820 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
    {
 800d828:	4a04      	ldr	r2, [pc, #16]	@ (800d83c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	601a      	str	r2, [r3, #0]
    }
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4618      	mov	r0, r3
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	0802e434 	.word	0x0802e434

0800d840 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
    }
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ffe9 	bl	800d820 <_ZN8touchgfx15UIEventListenerD1Ev>
 800d84e:	2104      	movs	r1, #4
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f01e f906 	bl	802ba62 <_ZdlPvj>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
    {
    }
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	460b      	mov	r3, r1
 800d87e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800d89e:	6810      	ldr	r0, [r2, #0]
 800d8a0:	6851      	ldr	r1, [r2, #4]
 800d8a2:	c303      	stmia	r3!, {r0, r1}
    }
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f00c fa04 	bl	8019cca <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800d8c2:	bf00      	nop
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
	...

0800d8cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
    {
 800d8d4:	4a04      	ldr	r2, [pc, #16]	@ (800d8e8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	601a      	str	r2, [r3, #0]
    }
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	0802e41c 	.word	0x0802e41c

0800d8ec <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
    }
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff ffe9 	bl	800d8cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d8fa:	2104      	movs	r1, #4
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f01e f8b0 	bl	802ba62 <_ZdlPvj>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4618      	mov	r0, r3
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d90c:	b480      	push	{r7}
 800d90e:	af00      	add	r7, sp, #0
    {
        return instance;
 800d910:	4b03      	ldr	r3, [pc, #12]	@ (800d920 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d912:	681b      	ldr	r3, [r3, #0]
    }
 800d914:	4618      	mov	r0, r3
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	20011f2c 	.word	0x20011f2c

0800d924 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d928:	4b0b      	ldr	r3, [pc, #44]	@ (800d958 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d930:	2b00      	cmp	r3, #0
 800d932:	d008      	beq.n	800d946 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d934:	4b08      	ldr	r3, [pc, #32]	@ (800d958 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d003      	beq.n	800d946 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d93e:	4b06      	ldr	r3, [pc, #24]	@ (800d958 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d944:	e002      	b.n	800d94c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d946:	4b04      	ldr	r3, [pc, #16]	@ (800d958 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	689b      	ldr	r3, [r3, #8]
    }
 800d94c:	4618      	mov	r0, r3
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	20011f2c 	.word	0x20011f2c

0800d95c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d964:	4a07      	ldr	r2, [pc, #28]	@ (800d984 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	605a      	str	r2, [r3, #4]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	721a      	strb	r2, [r3, #8]
    {
    }
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	0802e3f8 	.word	0x0802e3f8

0800d988 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
    {
 800d990:	4a04      	ldr	r2, [pc, #16]	@ (800d9a4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	601a      	str	r2, [r3, #0]
    }
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4618      	mov	r0, r3
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr
 800d9a4:	0802e3f8 	.word	0x0802e3f8

0800d9a8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
    }
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff ffe9 	bl	800d988 <_ZN8touchgfx10TransitionD1Ev>
 800d9b6:	210c      	movs	r1, #12
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f01e f852 	bl	802ba62 <_ZdlPvj>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
    {
    }
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
    {
    }
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
    {
    }
 800d9f8:	bf00      	nop
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800da0c:	f00c f938 	bl	8019c80 <_ZN8touchgfx11Application11getInstanceEv>
 800da10:	4603      	mov	r3, r0
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	323c      	adds	r2, #60	@ 0x3c
 800da16:	6812      	ldr	r2, [r2, #0]
 800da18:	4618      	mov	r0, r3
 800da1a:	4790      	blx	r2
    }
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	605a      	str	r2, [r3, #4]
    }
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	4a05      	ldr	r2, [pc, #20]	@ (800da60 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4618      	mov	r0, r3
 800da52:	f7ff fee5 	bl	800d820 <_ZN8touchgfx15UIEventListenerD1Ev>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4618      	mov	r0, r3
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	0802f92c 	.word	0x0802f92c

0800da64 <_ZN8touchgfx11ApplicationD0Ev>:
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff ffe7 	bl	800da40 <_ZN8touchgfx11ApplicationD1Ev>
 800da72:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f01d fff3 	bl	802ba62 <_ZdlPvj>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4618      	mov	r0, r3
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
	...

0800da88 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	4618      	mov	r0, r3
 800da94:	f00c f9b6 	bl	8019e04 <_ZN8touchgfx11ApplicationC1Ev>
 800da98:	4a09      	ldr	r2, [pc, #36]	@ (800dac0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a04      	ldr	r2, [pc, #16]	@ (800dac4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800dab2:	6013      	str	r3, [r2, #0]
    }
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4618      	mov	r0, r3
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	0802e3a4 	.word	0x0802e3a4
 800dac4:	20011f80 	.word	0x20011f80

0800dac8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 f804 	bl	800dade <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800dad6:	bf00      	nop
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00f      	beq.n	800db10 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	330c      	adds	r3, #12
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4610      	mov	r0, r2
 800db04:	4798      	blx	r3
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800db0c:	2301      	movs	r3, #1
 800db0e:	e000      	b.n	800db12 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800db10:	2300      	movs	r3, #0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00e      	beq.n	800db34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3308      	adds	r3, #8
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4610      	mov	r0, r2
 800db2a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800db34:	bf00      	nop
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	683a      	ldr	r2, [r7, #0]
 800db4a:	601a      	str	r2, [r3, #0]
    }
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	4a05      	ldr	r2, [pc, #20]	@ (800db78 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	601a      	str	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4618      	mov	r0, r3
 800db6a:	f7ff ff69 	bl	800da40 <_ZN8touchgfx11ApplicationD1Ev>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4618      	mov	r0, r3
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	0802e3a4 	.word	0x0802e3a4

0800db7c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff ffe7 	bl	800db58 <_ZN8touchgfx14MVPApplicationD1Ev>
 800db8a:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f01d ff67 	bl	802ba62 <_ZdlPvj>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
	...

0800dba0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	4a08      	ldr	r2, [pc, #32]	@ (800dbcc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	601a      	str	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 fad3 	bl	800e160 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff ffcb 	bl	800db58 <_ZN8touchgfx14MVPApplicationD1Ev>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	0802e338 	.word	0x0802e338

0800dbd0 <_ZN23FrontendApplicationBaseD0Ev>:
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff ffe1 	bl	800dba0 <_ZN23FrontendApplicationBaseD1Ev>
 800dbde:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f01d ff3d 	bl	802ba62 <_ZdlPvj>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4618      	mov	r0, r3
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f888 	bl	800dd10 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800dc00:	bf00      	nop
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	721a      	strb	r2, [r3, #8]
    }
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <_ZN13ModelListener4bindEP5Model>:
    
    virtual ~ModelListener() {}
    virtual void updateTemp(unsigned int val){}
    virtual void updateVolt(unsigned int val){}

    void bind(Model* m)
 800dc22:	b480      	push	{r7}
 800dc24:	b083      	sub	sp, #12
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
 800dc2a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	605a      	str	r2, [r3, #4]
    }
 800dc32:	bf00      	nop
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
	...

0800dc40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff ff1a 	bl	800da88 <_ZN8touchgfx14MVPApplicationC1Ev>
 800dc54:	4a19      	ldr	r2, [pc, #100]	@ (800dcbc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 f8ab 	bl	800ddbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800dc76:	f7ff fe49 	bl	800d90c <_ZN8touchgfx3HAL11getInstanceEv>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	3208      	adds	r2, #8
 800dc80:	6812      	ldr	r2, [r2, #0]
 800dc82:	2101      	movs	r1, #1
 800dc84:	4618      	mov	r0, r3
 800dc86:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800dc88:	2000      	movs	r0, #0
 800dc8a:	f004 f87b 	bl	8011d84 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800dc8e:	f7ff fe49 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 800dc92:	4603      	mov	r3, r0
 800dc94:	4618      	mov	r0, r3
 800dc96:	f016 f85e 	bl	8023d56 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800dc9a:	f7ff fe43 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	4618      	mov	r0, r3
 800dca2:	f016 f8cf 	bl	8023e44 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800dca6:	f7ff fe3d 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	4618      	mov	r0, r3
 800dcae:	f016 f8d5 	bl	8023e5c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	0802e338 	.word	0x0802e338

0800dcc0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4618      	mov	r0, r3
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	4611      	mov	r1, r2
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff ffe9 	bl	800dcc0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	685a      	ldr	r2, [r3, #4]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	605a      	str	r2, [r3, #4]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	3208      	adds	r2, #8
 800dcfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd02:	e883 0003 	stmia.w	r3, {r0, r1}
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800dd10:	b590      	push	{r4, r7, lr}
 800dd12:	b089      	sub	sp, #36	@ 0x24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800dd1e:	4b10      	ldr	r3, [pc, #64]	@ (800dd60 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800dd20:	61bb      	str	r3, [r7, #24]
 800dd22:	2300      	movs	r3, #0
 800dd24:	61fb      	str	r3, [r7, #28]
 800dd26:	f107 0008 	add.w	r0, r7, #8
 800dd2a:	f107 0318 	add.w	r3, r7, #24
 800dd2e:	cb0c      	ldmia	r3, {r2, r3}
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	f000 f85f 	bl	800ddf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800dd36:	f107 0308 	add.w	r3, r7, #8
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f7ff ffcb 	bl	800dcd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800dd42:	f107 0308 	add.w	r3, r7, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fa0a 	bl	800e160 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800dd58:	bf00      	nop
 800dd5a:	3724      	adds	r7, #36	@ 0x24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd90      	pop	{r4, r7, pc}
 800dd60:	0800dd65 	.word	0x0800dd65

0800dd64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af02      	add	r7, sp, #8
 800dd6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800dd78:	461a      	mov	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	4b04      	ldr	r3, [pc, #16]	@ (800dd94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800dd84:	4804      	ldr	r0, [pc, #16]	@ (800dd98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800dd86:	f000 f867 	bl	800de58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	20011f74 	.word	0x20011f74
 800dd98:	20011f70 	.word	0x20011f70

0800dd9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	4a04      	ldr	r2, [pc, #16]	@ (800ddb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4618      	mov	r0, r3
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr
 800ddb8:	0802e41c 	.word	0x0802e41c

0800ddbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7ff ffe8 	bl	800dd9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ddcc:	4a08      	ldr	r2, [pc, #32]	@ (800ddf0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	601a      	str	r2, [r3, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	605a      	str	r2, [r3, #4]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	609a      	str	r2, [r3, #8]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	60da      	str	r2, [r3, #12]
    {
    }
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4618      	mov	r0, r3
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	0802e38c 	.word	0x0802e38c

0800ddf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	4639      	mov	r1, r7
 800de00:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff ffc8 	bl	800dd9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800de0c:	4a08      	ldr	r2, [pc, #32]	@ (800de30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	601a      	str	r2, [r3, #0]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	605a      	str	r2, [r3, #4]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3308      	adds	r3, #8
 800de1c:	463a      	mov	r2, r7
 800de1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de22:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	0802e38c 	.word	0x0802e38c

0800de34 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7ff fd8c 	bl	800d95c <_ZN8touchgfx10TransitionC1Ev>
 800de44:	4a03      	ldr	r2, [pc, #12]	@ (800de54 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4618      	mov	r0, r3
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	0802e314 	.word	0x0802e314

0800de58 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800de58:	b590      	push	{r4, r7, lr}
 800de5a:	b08f      	sub	sp, #60	@ 0x3c
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
 800de64:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689a      	ldr	r2, [r3, #8]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3320      	adds	r3, #32
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4610      	mov	r0, r2
 800de76:	4798      	blx	r3
 800de78:	4603      	mov	r3, r0
 800de7a:	f241 5273 	movw	r2, #5491	@ 0x1573
 800de7e:	4293      	cmp	r3, r2
 800de80:	d805      	bhi.n	800de8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800de82:	4b7d      	ldr	r3, [pc, #500]	@ (800e078 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800de84:	4a7d      	ldr	r2, [pc, #500]	@ (800e07c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800de86:	21a3      	movs	r1, #163	@ 0xa3
 800de88:	487d      	ldr	r0, [pc, #500]	@ (800e080 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800de8a:	f01d fe17 	bl	802babc <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	3320      	adds	r3, #32
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4610      	mov	r0, r2
 800de9e:	4798      	blx	r3
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b0f      	cmp	r3, #15
 800dea4:	d805      	bhi.n	800deb2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800dea6:	4b77      	ldr	r3, [pc, #476]	@ (800e084 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800dea8:	4a74      	ldr	r2, [pc, #464]	@ (800e07c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800deaa:	21a4      	movs	r1, #164	@ 0xa4
 800deac:	4874      	ldr	r0, [pc, #464]	@ (800e080 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800deae:	f01d fe05 	bl	802babc <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68da      	ldr	r2, [r3, #12]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	3320      	adds	r3, #32
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4610      	mov	r0, r2
 800dec2:	4798      	blx	r3
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b0b      	cmp	r3, #11
 800dec8:	d805      	bhi.n	800ded6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800deca:	4b6f      	ldr	r3, [pc, #444]	@ (800e088 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800decc:	4a6b      	ldr	r2, [pc, #428]	@ (800e07c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800dece:	21a5      	movs	r1, #165	@ 0xa5
 800ded0:	486b      	ldr	r0, [pc, #428]	@ (800e080 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ded2:	f01d fdf3 	bl	802babc <__assert_func>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	627b      	str	r3, [r7, #36]	@ 0x24
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dee2:	f00b fecd 	bl	8019c80 <_ZN8touchgfx11Application11getInstanceEv>
 800dee6:	4603      	mov	r3, r0
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff fce1 	bl	800d8b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800deee:	6a3b      	ldr	r3, [r7, #32]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d008      	beq.n	800df08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800def6:	6a3b      	ldr	r3, [r7, #32]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	6a3b      	ldr	r3, [r7, #32]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	330c      	adds	r3, #12
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4610      	mov	r0, r2
 800df06:	4798      	blx	r3
    if (*currentTrans)
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d007      	beq.n	800df20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4610      	mov	r0, r2
 800df1e:	4798      	blx	r3
    if (*currentScreen)
 800df20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d008      	beq.n	800df3a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 800df28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	3314      	adds	r3, #20
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4610      	mov	r0, r2
 800df38:	4798      	blx	r3
    if (*currentPresenter)
 800df3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d008      	beq.n	800df54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 800df42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3304      	adds	r3, #4
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4610      	mov	r0, r2
 800df52:	4798      	blx	r3
    if (*currentScreen)
 800df54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d007      	beq.n	800df6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 800df5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4610      	mov	r0, r2
 800df6a:	4798      	blx	r3
    if (*currentPresenter)
 800df6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d008      	beq.n	800df86 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 800df74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	3308      	adds	r3, #8
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4610      	mov	r0, r2
 800df84:	4798      	blx	r3
}
 800df86:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	2100      	movs	r1, #0
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 f87c 	bl	800e08c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800df94:	4603      	mov	r3, r0
 800df96:	4619      	mov	r1, r3
 800df98:	200c      	movs	r0, #12
 800df9a:	f7ff fbf3 	bl	800d784 <_ZnwjPv>
 800df9e:	4604      	mov	r4, r0
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f7ff ff47 	bl	800de34 <_ZN8touchgfx12NoTransitionC1Ev>
 800dfa6:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	2100      	movs	r1, #0
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 f87f 	bl	800e0b2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	f241 5074 	movw	r0, #5492	@ 0x1574
 800dfbc:	f7ff fbe2 	bl	800d784 <_ZnwjPv>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f004 f950 	bl	8012268 <_ZN11Screen1ViewC1Ev>
 800dfc8:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	2100      	movs	r1, #0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 f881 	bl	800e0d8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4619      	mov	r1, r3
 800dfda:	2010      	movs	r0, #16
 800dfdc:	f7ff fbd2 	bl	800d784 <_ZnwjPv>
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f004 f8b9 	bl	801215c <_ZN16Screen1PresenterC1ER11Screen1View>
 800dfea:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dff0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dff6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dffc:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e006:	3304      	adds	r3, #4
 800e008:	e000      	b.n	800e00c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e00a:	2300      	movs	r3, #0
 800e00c:	4619      	mov	r1, r3
 800e00e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e010:	f7ff fd94 	bl	800db3c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e016:	3304      	adds	r3, #4
 800e018:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff fe01 	bl	800dc22 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e024:	4618      	mov	r0, r3
 800e026:	f000 f86a 	bl	800e0fe <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02c:	61fb      	str	r3, [r7, #28]
 800e02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e030:	61bb      	str	r3, [r7, #24]
 800e032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e034:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	330c      	adds	r3, #12
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	69f8      	ldr	r0, [r7, #28]
 800e040:	4798      	blx	r3
    newPresenter->activate();
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	69b8      	ldr	r0, [r7, #24]
 800e04a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e04c:	6979      	ldr	r1, [r7, #20]
 800e04e:	69f8      	ldr	r0, [r7, #28]
 800e050:	f00d fba6 	bl	801b7a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3310      	adds	r3, #16
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	6978      	ldr	r0, [r7, #20]
 800e05e:	4798      	blx	r3
    newTransition->invalidate();
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3314      	adds	r3, #20
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	6978      	ldr	r0, [r7, #20]
 800e06a:	4798      	blx	r3
}
 800e06c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e070:	4618      	mov	r0, r3
 800e072:	373c      	adds	r7, #60	@ 0x3c
 800e074:	46bd      	mov	sp, r7
 800e076:	bd90      	pop	{r4, r7, pc}
 800e078:	0802cc64 	.word	0x0802cc64
 800e07c:	0802ccf4 	.word	0x0802ccf4
 800e080:	0802cdc8 	.word	0x0802cdc8
 800e084:	0802ce0c 	.word	0x0802ce0c
 800e088:	0802ceb0 	.word	0x0802ceb0

0800e08c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3324      	adds	r3, #36	@ 0x24
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	887a      	ldrh	r2, [r7, #2]
 800e0a2:	4611      	mov	r1, r2
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	4798      	blx	r3
 800e0a8:	4603      	mov	r3, r0
    }
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3324      	adds	r3, #36	@ 0x24
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	887a      	ldrh	r2, [r7, #2]
 800e0c8:	4611      	mov	r1, r2
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	4798      	blx	r3
 800e0ce:	4603      	mov	r3, r0
    }
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	3324      	adds	r3, #36	@ 0x24
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	887a      	ldrh	r2, [r7, #2]
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	4798      	blx	r3
 800e0f4:	4603      	mov	r3, r0
    }
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e0fe:	b480      	push	{r7}
 800e100:	b083      	sub	sp, #12
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800e10e:	bf00      	nop
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
	...

0800e11c <_ZN8touchgfx12NoTransitionD1Ev>:
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	4a05      	ldr	r2, [pc, #20]	@ (800e13c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7ff fc2b 	bl	800d988 <_ZN8touchgfx10TransitionD1Ev>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4618      	mov	r0, r3
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	0802e314 	.word	0x0802e314

0800e140 <_ZN8touchgfx12NoTransitionD0Ev>:
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff ffe7 	bl	800e11c <_ZN8touchgfx12NoTransitionD1Ev>
 800e14e:	210c      	movs	r1, #12
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f01d fc86 	bl	802ba62 <_ZdlPvj>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4618      	mov	r0, r3
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	4a05      	ldr	r2, [pc, #20]	@ (800e180 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	601a      	str	r2, [r3, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4618      	mov	r0, r3
 800e172:	f7ff fbab 	bl	800d8cc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	0802e38c 	.word	0x0802e38c

0800e184 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff ffe7 	bl	800e160 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e192:	2110      	movs	r1, #16
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f01d fc64 	bl	802ba62 <_ZdlPvj>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4618      	mov	r0, r3
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	68d2      	ldr	r2, [r2, #12]
 800e1b4:	1052      	asrs	r2, r2, #1
 800e1b6:	1899      	adds	r1, r3, r2
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d102      	bne.n	800e1ca <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	e00a      	b.n	800e1e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	68d2      	ldr	r2, [r2, #12]
 800e1d2:	1052      	asrs	r2, r2, #1
 800e1d4:	4413      	add	r3, r2
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	6892      	ldr	r2, [r2, #8]
 800e1dc:	4413      	add	r3, r2
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4608      	mov	r0, r1
 800e1e2:	4798      	blx	r3
    }
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d010      	beq.n	800e21e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d107      	bne.n	800e214 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d101      	bne.n	800e214 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e210:	2301      	movs	r3, #1
 800e212:	e000      	b.n	800e216 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e214:	2300      	movs	r3, #0
 800e216:	2b01      	cmp	r3, #1
 800e218:	d001      	beq.n	800e21e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e21a:	2301      	movs	r3, #1
 800e21c:	e000      	b.n	800e220 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e21e:	2300      	movs	r3, #0
    }
 800e220:	4618      	mov	r0, r3
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
        : color(0)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	601a      	str	r2, [r3, #0]
    {
    }
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4618      	mov	r0, r3
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
        : color(col)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	601a      	str	r2, [r3, #0]
    {
    }
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4618      	mov	r0, r3
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
    {
        return color;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
    }
 800e272:	4618      	mov	r0, r3
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e27e:	b480      	push	{r7}
 800e280:	b083      	sub	sp, #12
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	801a      	strh	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	805a      	strh	r2, [r3, #2]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	809a      	strh	r2, [r3, #4]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	80da      	strh	r2, [r3, #6]
    {
    }
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	4608      	mov	r0, r1
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	817b      	strh	r3, [r7, #10]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	813b      	strh	r3, [r7, #8]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	897a      	ldrh	r2, [r7, #10]
 800e2ca:	801a      	strh	r2, [r3, #0]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	893a      	ldrh	r2, [r7, #8]
 800e2d0:	805a      	strh	r2, [r3, #2]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	88fa      	ldrh	r2, [r7, #6]
 800e2d6:	809a      	strh	r2, [r3, #4]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	8b3a      	ldrh	r2, [r7, #24]
 800e2dc:	80da      	strh	r2, [r3, #6]
    {
    }
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e2f4:	4a14      	ldr	r2, [pc, #80]	@ (800e348 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	601a      	str	r2, [r3, #0]
        : rect(),
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff ffbd 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	330c      	adds	r3, #12
 800e308:	4618      	mov	r0, r3
 800e30a:	f7ff ffb8 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2200      	movs	r2, #0
 800e32a:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	0802f980 	.word	0x0802f980

0800e34c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
    {
 800e354:	4a04      	ldr	r2, [pc, #16]	@ (800e368 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	601a      	str	r2, [r3, #0]
    }
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4618      	mov	r0, r3
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	0802f980 	.word	0x0802f980

0800e36c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
    }
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7ff ffe9 	bl	800e34c <_ZN8touchgfx8DrawableD1Ev>
 800e37a:	2128      	movs	r1, #40	@ 0x28
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f01d fb70 	bl	802ba62 <_ZdlPvj>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d005      	beq.n	800e3aa <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3314      	adds	r3, #20
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	4798      	blx	r3
        }
    }
 800e3aa:	bf00      	nop
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e3b2:	b480      	push	{r7}
 800e3b4:	b083      	sub	sp, #12
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e3ba:	2300      	movs	r3, #0
    }
 800e3bc:	4618      	mov	r0, r3
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	817b      	strh	r3, [r7, #10]
 800e3da:	460b      	mov	r3, r1
 800e3dc:	813b      	strh	r3, [r7, #8]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e3e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e3e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	f000 f844 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e3f2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e3f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f000 f898 	bl	800e532 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800e40a:	b480      	push	{r7}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800e418:	4618      	mov	r0, r3
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800e432:	4618      	mov	r0, r3
 800e434:	370c      	adds	r7, #12
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr

0800e43e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e43e:	b480      	push	{r7}
 800e440:	b083      	sub	sp, #12
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
 800e446:	460b      	mov	r3, r1
 800e448:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	887a      	ldrh	r2, [r7, #2]
 800e44e:	809a      	strh	r2, [r3, #4]
    }
 800e450:	bf00      	nop
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	460b      	mov	r3, r1
 800e466:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	887a      	ldrh	r2, [r7, #2]
 800e46c:	80da      	strh	r2, [r3, #6]
    }
 800e46e:	bf00      	nop
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr

0800e47a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b082      	sub	sp, #8
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	460b      	mov	r3, r1
 800e484:	807b      	strh	r3, [r7, #2]
 800e486:	4613      	mov	r3, r2
 800e488:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3330      	adds	r3, #48	@ 0x30
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e496:	4611      	mov	r1, r2
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	4798      	blx	r3
        setY(y);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	3334      	adds	r3, #52	@ 0x34
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	4798      	blx	r3
    }
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e4b6:	b480      	push	{r7}
 800e4b8:	b083      	sub	sp, #12
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	887a      	ldrh	r2, [r7, #2]
 800e4c6:	811a      	strh	r2, [r3, #8]
    }
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	460b      	mov	r3, r1
 800e4de:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	887a      	ldrh	r2, [r7, #2]
 800e4e4:	815a      	strh	r2, [r3, #10]
    }
 800e4e6:	bf00      	nop
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e4f2:	b480      	push	{r7}
 800e4f4:	b083      	sub	sp, #12
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
    {
    }
 800e4fa:	bf00      	nop
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e506:	b480      	push	{r7}
 800e508:	b083      	sub	sp, #12
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e510:	bf00      	nop
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e526:	bf00      	nop
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	807b      	strh	r3, [r7, #2]
 800e53e:	4613      	mov	r3, r2
 800e540:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3338      	adds	r3, #56	@ 0x38
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e54e:	4611      	mov	r1, r2
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	4798      	blx	r3
        setHeight(height);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	333c      	adds	r3, #60	@ 0x3c
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e560:	4611      	mov	r1, r2
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	4798      	blx	r3
    }
 800e566:	bf00      	nop
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e56e:	b480      	push	{r7}
 800e570:	b083      	sub	sp, #12
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e578:	bf00      	nop
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
    {
    }
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	370c      	adds	r7, #12
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e5b2:	b480      	push	{r7}
 800e5b4:	b083      	sub	sp, #12
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	807b      	strh	r3, [r7, #2]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3354      	adds	r3, #84	@ 0x54
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	8879      	ldrh	r1, [r7, #2]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e5ec:	b292      	uxth	r2, r2
 800e5ee:	1a8a      	subs	r2, r1, r2
 800e5f0:	b292      	uxth	r2, r2
 800e5f2:	b210      	sxth	r0, r2
 800e5f4:	8839      	ldrh	r1, [r7, #0]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e5fc:	b292      	uxth	r2, r2
 800e5fe:	1a8a      	subs	r2, r1, r2
 800e600:	b292      	uxth	r2, r2
 800e602:	b212      	sxth	r2, r2
 800e604:	4601      	mov	r1, r0
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	4798      	blx	r3
    }
 800e60a:	bf00      	nop
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e620:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e628:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e630:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	60f8      	str	r0, [r7, #12]
 800e646:	60b9      	str	r1, [r7, #8]
 800e648:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	f7ff ffe1 	bl	800e612 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	601a      	str	r2, [r3, #0]
    }
 800e65e:	bf00      	nop
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800e666:	b580      	push	{r7, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	60f8      	str	r0, [r7, #12]
 800e66e:	607b      	str	r3, [r7, #4]
 800e670:	460b      	mov	r3, r1
 800e672:	817b      	strh	r3, [r7, #10]
 800e674:	4613      	mov	r3, r2
 800e676:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7ff ff8c 	bl	800e598 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d008      	beq.n	800e698 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff ff92 	bl	800e5b2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e694:	2301      	movs	r3, #1
 800e696:	e000      	b.n	800e69a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e698:	2300      	movs	r3, #0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d002      	beq.n	800e6a4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	601a      	str	r2, [r3, #0]
        }
    }
 800e6a4:	bf00      	nop
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
    {
 800e6e4:	4a06      	ldr	r2, [pc, #24]	@ (800e700 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	601a      	str	r2, [r3, #0]
    }
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f001 f8da 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	0802fa8c 	.word	0x0802fa8c

0800e704 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
    }
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7ff ffe5 	bl	800e6dc <_ZN8touchgfx6ScreenD1Ev>
 800e712:	213c      	movs	r1, #60	@ 0x3c
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f01d f9a4 	bl	802ba62 <_ZdlPvj>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
    {
    }
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
    {
    }
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
    {
    }
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
    {
    }
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	460b      	mov	r3, r1
 800e77e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800e780:	bf00      	nop
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	3304      	adds	r3, #4
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f005 feb7 	bl	8014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800e7a2:	bf00      	nop
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff fd98 	bl	800e2ec <_ZN8touchgfx8DrawableC1Ev>
 800e7bc:	4a03      	ldr	r2, [pc, #12]	@ (800e7cc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	601a      	str	r2, [r3, #0]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	0802e8fc 	.word	0x0802e8fc

0800e7d0 <_ZN8touchgfx6WidgetD1Ev>:
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	4a05      	ldr	r2, [pc, #20]	@ (800e7f0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	601a      	str	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff fdb3 	bl	800e34c <_ZN8touchgfx8DrawableD1Ev>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	0802e8fc 	.word	0x0802e8fc

0800e7f4 <_ZN8touchgfx6WidgetD0Ev>:
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7ff ffe7 	bl	800e7d0 <_ZN8touchgfx6WidgetD1Ev>
 800e802:	2128      	movs	r1, #40	@ 0x28
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f01d f92c 	bl	802ba62 <_ZdlPvj>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4618      	mov	r0, r3
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4618      	mov	r0, r3
 800e820:	2326      	movs	r3, #38	@ 0x26
 800e822:	461a      	mov	r2, r3
 800e824:	2100      	movs	r1, #0
 800e826:	f01d fb50 	bl	802beca <memset>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7ff ffbd 	bl	800e7ac <_ZN8touchgfx6WidgetC1Ev>
 800e832:	4a09      	ldr	r2, [pc, #36]	@ (800e858 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	601a      	str	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	22ff      	movs	r2, #255	@ 0xff
 800e83c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	3328      	adds	r3, #40	@ 0x28
 800e844:	2100      	movs	r1, #0
 800e846:	4618      	mov	r0, r3
 800e848:	f7ff fcfe 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4618      	mov	r0, r3
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	0802f7cc 	.word	0x0802f7cc

0800e85c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	683a      	ldr	r2, [r7, #0]
 800e86a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800e86c:	bf00      	nop
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	460b      	mov	r3, r1
 800e882:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800e884:	4a06      	ldr	r2, [pc, #24]	@ (800e8a0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	601a      	str	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	887a      	ldrh	r2, [r7, #2]
 800e88e:	809a      	strh	r2, [r3, #4]
    }
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	4618      	mov	r0, r3
 800e894:	370c      	adds	r7, #12
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	0802e29c 	.word	0x0802e29c

0800e8a4 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	2326      	movs	r3, #38	@ 0x26
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	f01d fb08 	bl	802beca <memset>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff ff75 	bl	800e7ac <_ZN8touchgfx6WidgetC1Ev>
 800e8c2:	4a16      	ldr	r2, [pc, #88]	@ (800e91c <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3328      	adds	r3, #40	@ 0x28
 800e8cc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff ffd1 	bl	800e878 <_ZN8touchgfx9TypedTextC1Et>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3330      	adds	r3, #48	@ 0x30
 800e8da:	2100      	movs	r1, #0
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff fcb3 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	869a      	strh	r2, [r3, #52]	@ 0x34
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	22ff      	movs	r2, #255	@ 0xff
 800e8ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	333c      	adds	r3, #60	@ 0x3c
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 f8f0 	bl	800eaf2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4618      	mov	r0, r3
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	0802f73c 	.word	0x0802f73c

0800e920 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800e920:	b590      	push	{r4, r7, lr}
 800e922:	b087      	sub	sp, #28
 800e924:	af00      	add	r7, sp, #0
 800e926:	6178      	str	r0, [r7, #20]
 800e928:	460b      	mov	r3, r1
 800e92a:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e932:	4611      	mov	r1, r2
 800e934:	4618      	mov	r0, r3
 800e936:	f7ff fdbe 	bl	800e4b6 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3384      	adds	r3, #132	@ 0x84
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	697c      	ldr	r4, [r7, #20]
 800e944:	463a      	mov	r2, r7
 800e946:	6979      	ldr	r1, [r7, #20]
 800e948:	4610      	mov	r0, r2
 800e94a:	4798      	blx	r3
 800e94c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e950:	463a      	mov	r2, r7
 800e952:	ca07      	ldmia	r2, {r0, r1, r2}
 800e954:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e958:	bf00      	nop
 800e95a:	371c      	adds	r7, #28
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd90      	pop	{r4, r7, pc}

0800e960 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b087      	sub	sp, #28
 800e964:	af00      	add	r7, sp, #0
 800e966:	6178      	str	r0, [r7, #20]
 800e968:	460b      	mov	r3, r1
 800e96a:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e972:	4611      	mov	r1, r2
 800e974:	4618      	mov	r0, r3
 800e976:	f7ff fdad 	bl	800e4d4 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	3384      	adds	r3, #132	@ 0x84
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	697c      	ldr	r4, [r7, #20]
 800e984:	463a      	mov	r2, r7
 800e986:	6979      	ldr	r1, [r7, #20]
 800e988:	4610      	mov	r0, r2
 800e98a:	4798      	blx	r3
 800e98c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e990:	463a      	mov	r2, r7
 800e992:	ca07      	ldmia	r2, {r0, r1, r2}
 800e994:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e998:	bf00      	nop
 800e99a:	371c      	adds	r7, #28
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd90      	pop	{r4, r7, pc}

0800e9a0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff fc67 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
    }
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	78fa      	ldrb	r2, [r7, #3]
 800e9c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800e9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800e9e4:	687e      	ldr	r6, [r7, #4]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3334      	adds	r3, #52	@ 0x34
 800e9ec:	681c      	ldr	r4, [r3, #0]
 800e9ee:	887d      	ldrh	r5, [r7, #2]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 f867 	bl	800eac4 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e9fa:	4b1c      	ldr	r3, [pc, #112]	@ (800ea6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d105      	bne.n	800ea0e <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800ea02:	4b1b      	ldr	r3, [pc, #108]	@ (800ea70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800ea04:	4a1b      	ldr	r2, [pc, #108]	@ (800ea74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800ea06:	216c      	movs	r1, #108	@ 0x6c
 800ea08:	481b      	ldr	r0, [pc, #108]	@ (800ea78 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800ea0a:	f01d f857 	bl	802babc <__assert_func>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	889a      	ldrh	r2, [r3, #4]
 800ea16:	4b19      	ldr	r3, [pc, #100]	@ (800ea7c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800ea18:	881b      	ldrh	r3, [r3, #0]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	bf34      	ite	cc
 800ea1e:	2301      	movcc	r3, #1
 800ea20:	2300      	movcs	r3, #0
 800ea22:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d105      	bne.n	800ea34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800ea28:	4b15      	ldr	r3, [pc, #84]	@ (800ea80 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800ea2a:	4a12      	ldr	r2, [pc, #72]	@ (800ea74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800ea2c:	216d      	movs	r1, #109	@ 0x6d
 800ea2e:	4812      	ldr	r0, [pc, #72]	@ (800ea78 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800ea30:	f01d f844 	bl	802babc <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800ea34:	4b13      	ldr	r3, [pc, #76]	@ (800ea84 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	4b0c      	ldr	r3, [pc, #48]	@ (800ea6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800ea3a:	6819      	ldr	r1, [r3, #0]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	889b      	ldrh	r3, [r3, #4]
 800ea40:	005b      	lsls	r3, r3, #1
 800ea42:	440b      	add	r3, r1
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4413      	add	r3, r2
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	3230      	adds	r2, #48	@ 0x30
 800ea50:	6812      	ldr	r2, [r2, #0]
 800ea52:	4618      	mov	r0, r3
 800ea54:	4790      	blx	r2
 800ea56:	4603      	mov	r3, r0
 800ea58:	1aeb      	subs	r3, r5, r3
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	b21b      	sxth	r3, r3
 800ea5e:	4619      	mov	r1, r3
 800ea60:	4630      	mov	r0, r6
 800ea62:	47a0      	blx	r4
    }
 800ea64:	bf00      	nop
 800ea66:	3714      	adds	r7, #20
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea6c:	20011f84 	.word	0x20011f84
 800ea70:	0802cf54 	.word	0x0802cf54
 800ea74:	0802cf98 	.word	0x0802cf98
 800ea78:	0802cfd4 	.word	0x0802cfd4
 800ea7c:	20011f88 	.word	0x20011f88
 800ea80:	0802d018 	.word	0x0802d018
 800ea84:	20011f8c 	.word	0x20011f8c

0800ea88 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	460b      	mov	r3, r1
 800ea92:	807b      	strh	r3, [r7, #2]
 800ea94:	4613      	mov	r3, r2
 800ea96:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	3330      	adds	r3, #48	@ 0x30
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800eaa6:	4610      	mov	r0, r2
 800eaa8:	4798      	blx	r3
        setBaselineY(baselineY);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	3364      	adds	r3, #100	@ 0x64
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eab6:	4611      	mov	r1, r2
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	4798      	blx	r3
    }
 800eabc:	bf00      	nop
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	3328      	adds	r3, #40	@ 0x28
    }
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800eae4:	2300      	movs	r3, #0
    }
 800eae6:	4618      	mov	r0, r3
 800eae8:	370c      	adds	r7, #12
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b084      	sub	sp, #16
 800eaf6:	af02      	add	r7, sp, #8
 800eaf8:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f04f 33ff 	mov.w	r3, #4294967295
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	f04f 33ff 	mov.w	r3, #4294967295
 800eb06:	2200      	movs	r2, #0
 800eb08:	2100      	movs	r1, #0
 800eb0a:	f7ff fbcf 	bl	800e2ac <_ZN8touchgfx4RectC1Essss>
              text(0)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	609a      	str	r2, [r3, #8]
        {
        }
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4618      	mov	r0, r3
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	4a08      	ldr	r2, [pc, #32]	@ (800eb4c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3328      	adds	r3, #40	@ 0x28
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fe fc44 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff fe48 	bl	800e7d0 <_ZN8touchgfx6WidgetD1Ev>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	0802f73c 	.word	0x0802f73c

0800eb50 <_ZN8touchgfx8TextAreaD0Ev>:
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7ff ffe1 	bl	800eb20 <_ZN8touchgfx8TextAreaD1Ev>
 800eb5e:	2148      	movs	r1, #72	@ 0x48
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f01c ff7e 	bl	802ba62 <_ZdlPvj>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
        : TextArea()
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff fe92 	bl	800e8a4 <_ZN8touchgfx8TextAreaC1Ev>
 800eb80:	4a03      	ldr	r2, [pc, #12]	@ (800eb90 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	601a      	str	r2, [r3, #0]
    {
    }
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	0802f834 	.word	0x0802f834

0800eb94 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7ff fbf4 	bl	800e38c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800eba4:	bf00      	nop
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7ff ff9b 	bl	800eaf2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	4a05      	ldr	r2, [pc, #20]	@ (800ebe4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7ff ffa3 	bl	800eb20 <_ZN8touchgfx8TextAreaD1Ev>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	0802f834 	.word	0x0802f834

0800ebe8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7ff ffe7 	bl	800ebc4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800ebf6:	2148      	movs	r1, #72	@ 0x48
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f01c ff32 	bl	802ba62 <_ZdlPvj>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4618      	mov	r0, r3
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff ffac 	bl	800eb70 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800ec18:	4a05      	ldr	r2, [pc, #20]	@ (800ec30 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	601a      	str	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2200      	movs	r2, #0
 800ec22:	649a      	str	r2, [r3, #72]	@ 0x48
    {
    }
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4618      	mov	r0, r3
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	0802e86c 	.word	0x0802e86c

0800ec34 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff ffdd 	bl	800ec34 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800ec7a:	bf00      	nop
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800ec8c:	4a06      	ldr	r2, [pc, #24]	@ (800eca8 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	601a      	str	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	809a      	strh	r2, [r3, #4]
    {
    }
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	370c      	adds	r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	0802e84c 	.word	0x0802e84c

0800ecac <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
    {
 800ecb4:	4a04      	ldr	r2, [pc, #16]	@ (800ecc8 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	601a      	str	r2, [r3, #0]
    }
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr
 800ecc8:	0802e84c 	.word	0x0802e84c

0800eccc <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
    }
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7ff ffe9 	bl	800ecac <_ZN8touchgfx15AbstractPainterD1Ev>
 800ecda:	2108      	movs	r1, #8
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f01c fec0 	bl	802ba62 <_ZdlPvj>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	4618      	mov	r0, r3
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800ecf4:	2300      	movs	r3, #0
    }
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	370c      	adds	r7, #12
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800ed02:	b480      	push	{r7}
 800ed04:	b083      	sub	sp, #12
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	809a      	strh	r2, [r3, #4]
        return true;
 800ed16:	2301      	movs	r3, #1
    }
 800ed18:	4618      	mov	r0, r3
 800ed1a:	370c      	adds	r7, #12
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
    {
        return;
 800ed2c:	bf00      	nop
    }
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
            : v(i)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	601a      	str	r2, [r3, #0]
        {
        }
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800ed56:	b480      	push	{r7}
 800ed58:	b083      	sub	sp, #12
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
        {
            return v;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
        }
 800ed62:	4618      	mov	r0, r3
 800ed64:	370c      	adds	r7, #12
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr

0800ed6e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>:
         *
         * @param  q5 The Q5 to add to this.
         *
         * @return The result of the operation.
         */
        Q5 operator+(const Q5& q5) const
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b084      	sub	sp, #16
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
 800ed76:	6039      	str	r1, [r7, #0]
        {
            return Q5(v + q5.v);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	441a      	add	r2, r3
 800ed82:	f107 030c 	add.w	r3, r7, #12
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff ffd5 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
        }
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>:
         *
         * @param  q5 The Q5 to subtract from this.
         *
         * @return The result of the operation.
         */
        Q5 operator-(const Q5& q5) const
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
        {
            return Q5(v - q5.v);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	1ad2      	subs	r2, r2, r3
 800edac:	f107 030c 	add.w	r3, r7, #12
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff ffc0 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800edb8:	68fb      	ldr	r3, [r7, #12]
        }
 800edba:	4618      	mov	r0, r3
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor.
     */
    static Q5 muldivQ5(Q5 factor1, Q5 factor2, Q5 divisor)
 800edc2:	b5b0      	push	{r4, r5, r7, lr}
 800edc4:	b086      	sub	sp, #24
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	60f8      	str	r0, [r7, #12]
 800edca:	60b9      	str	r1, [r7, #8]
 800edcc:	607a      	str	r2, [r7, #4]
    {
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800edce:	f107 030c 	add.w	r3, r7, #12
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff ffbf 	bl	800ed56 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800edd8:	4604      	mov	r4, r0
 800edda:	f107 0308 	add.w	r3, r7, #8
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff ffb9 	bl	800ed56 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800ede4:	4605      	mov	r5, r0
 800ede6:	1d3b      	adds	r3, r7, #4
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff ffb4 	bl	800ed56 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800edee:	4603      	mov	r3, r0
 800edf0:	461a      	mov	r2, r3
 800edf2:	4629      	mov	r1, r5
 800edf4:	4620      	mov	r0, r4
 800edf6:	f00c f984 	bl	801b102 <_ZN8touchgfx6muldivElll>
 800edfa:	4602      	mov	r2, r0
 800edfc:	f107 0314 	add.w	r3, r7, #20
 800ee00:	4611      	mov	r1, r2
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7ff ff98 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ee08:	697b      	ldr	r3, [r7, #20]
    }
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bdb0      	pop	{r4, r5, r7, pc}

0800ee12 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b094      	sub	sp, #80	@ 0x50
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	60f8      	str	r0, [r7, #12]
 800ee1a:	60b9      	str	r1, [r7, #8]
 800ee1c:	607a      	str	r2, [r7, #4]
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800ee1e:	f107 0310 	add.w	r3, r7, #16
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	68b9      	ldr	r1, [r7, #8]
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f00c f94c 	bl	801b0c4 <_ZN8touchgfx6muldivElllRl>
 800ee2c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (result >= 0)
 800ee2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	db2f      	blt.n	800ee94 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x82>
 800ee34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee36:	64bb      	str	r3, [r7, #72]	@ 0x48
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800ee38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee3a:	015a      	lsls	r2, r3, #5
 800ee3c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ee40:	4611      	mov	r1, r2
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7ff ff78 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ee48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800ee4a:	617b      	str	r3, [r7, #20]
 800ee4c:	f107 031c 	add.w	r3, r7, #28
 800ee50:	2120      	movs	r1, #32
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff ff70 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	f107 0320 	add.w	r3, r7, #32
 800ee5e:	4611      	mov	r1, r2
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff ff69 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ee66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee6a:	6879      	ldr	r1, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7ff ff63 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ee72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee74:	6a39      	ldr	r1, [r7, #32]
 800ee76:	69f8      	ldr	r0, [r7, #28]
 800ee78:	f7ff ffa3 	bl	800edc2 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	61bb      	str	r3, [r7, #24]
 800ee80:	f107 0218 	add.w	r2, r7, #24
 800ee84:	f107 0314 	add.w	r3, r7, #20
 800ee88:	4611      	mov	r1, r2
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff ff6f 	bl	800ed6e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800ee90:	4603      	mov	r3, r0
 800ee92:	e02e      	b.n	800eef2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0xe0>
 800ee94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee96:	647b      	str	r3, [r7, #68]	@ 0x44
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800ee98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee9a:	015a      	lsls	r2, r3, #5
 800ee9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800eea0:	4611      	mov	r1, r2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7ff ff48 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800eeaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eeac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eeb0:	2120      	movs	r1, #32
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff ff40 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800eebe:	4611      	mov	r1, r2
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7ff ff39 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eec6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff ff33 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eed2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eed4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eed8:	f7ff ff73 	bl	800edc2 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800eedc:	4603      	mov	r3, r0
 800eede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eee0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eee4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7ff ff54 	bl	800ed98 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800eef0:	4603      	mov	r3, r0
    }
 800eef2:	4618      	mov	r0, r3
 800eef4:	3750      	adds	r7, #80	@ 0x50
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
 800eefa:	b480      	push	{r7}
 800eefc:	b083      	sub	sp, #12
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
    {
        return xScale;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
 800ef06:	4618      	mov	r0, r3
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr

0800ef12 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
    {
        return yScale;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800ef1e:	4618      	mov	r0, r3
 800ef20:	370c      	adds	r7, #12
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha()
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
 800ef2a:	b480      	push	{r7}
 800ef2c:	b083      	sub	sp, #12
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
 800ef32:	460b      	mov	r3, r1
 800ef34:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	78fa      	ldrb	r2, [r7, #3]
 800ef3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 800ef3e:	bf00      	nop
 800ef40:	370c      	adds	r7, #12
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr

0800ef4a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b08c      	sub	sp, #48	@ 0x30
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	60f8      	str	r0, [r7, #12]
 800ef52:	60b9      	str	r1, [r7, #8]
 800ef54:	607a      	str	r2, [r7, #4]
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	33a4      	adds	r3, #164	@ 0xa4
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	61fa      	str	r2, [r7, #28]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	61ba      	str	r2, [r7, #24]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 800ef66:	69fa      	ldr	r2, [r7, #28]
 800ef68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ef6a:	69b9      	ldr	r1, [r7, #24]
 800ef6c:	6179      	str	r1, [r7, #20]
 800ef6e:	613a      	str	r2, [r7, #16]
        return i * scale;
 800ef70:	697a      	ldr	r2, [r7, #20]
 800ef72:	6939      	ldr	r1, [r7, #16]
 800ef74:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, xScale);
 800ef78:	bf00      	nop
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ef82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ef86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef88:	6279      	str	r1, [r7, #36]	@ 0x24
 800ef8a:	623a      	str	r2, [r7, #32]
        return i * scale;
 800ef8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef8e:	6a39      	ldr	r1, [r7, #32]
 800ef90:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800ef94:	bf00      	nop
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800ef96:	4601      	mov	r1, r0
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	4798      	blx	r3
    }
 800ef9c:	bf00      	nop
 800ef9e:	3730      	adds	r7, #48	@ 0x30
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
    virtual void setGraphRangeX(float min, float max)
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b08e      	sub	sp, #56	@ 0x38
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	ed87 0a02 	vstr	s0, [r7, #8]
 800efb0:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	33a4      	adds	r3, #164	@ 0xa4
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68fa      	ldr	r2, [r7, #12]
 800efbe:	623a      	str	r2, [r7, #32]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledX(float f) const
    {
        return float2scaled(f, xScale);
 800efc4:	6a3a      	ldr	r2, [r7, #32]
 800efc6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800efc8:	69f9      	ldr	r1, [r7, #28]
 800efca:	61b9      	str	r1, [r7, #24]
 800efcc:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800efce:	697a      	ldr	r2, [r7, #20]
 800efd0:	ee07 2a90 	vmov	s15, r2
 800efd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efd8:	ed97 7a06 	vldr	s14, [r7, #24]
 800efdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efe0:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800efe4:	edd7 7a04 	vldr	s15, [r7, #16]
 800efe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	db0a      	blt.n	800f008 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x64>
            return (int)(fs + 0.5f);
 800eff2:	edd7 7a04 	vldr	s15, [r7, #16]
 800eff6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800effa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800effe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f002:	ee17 0a90 	vmov	r0, s15
 800f006:	e019      	b.n	800f03c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f008:	edd7 7a04 	vldr	s15, [r7, #16]
 800f00c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f010:	ee17 2a90 	vmov	r2, s15
 800f014:	3a01      	subs	r2, #1
 800f016:	edd7 7a04 	vldr	s15, [r7, #16]
 800f01a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f01e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f022:	ed97 7a04 	vldr	s14, [r7, #16]
 800f026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f02a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f02e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f036:	ee17 1a90 	vmov	r1, s15
 800f03a:	1850      	adds	r0, r2, r1
        return float2scaled(f, xScale);
 800f03c:	bf00      	nop
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	637a      	str	r2, [r7, #52]	@ 0x34
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	633a      	str	r2, [r7, #48]	@ 0x30
 800f046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f048:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f04a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f04c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800f04e:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800f050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f052:	ee07 2a90 	vmov	s15, r2
 800f056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f05a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f062:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800f066:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f06a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	db0a      	blt.n	800f08a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0xe6>
            return (int)(fs + 0.5f);
 800f074:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f078:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f07c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f084:	ee17 2a90 	vmov	r2, s15
 800f088:	e019      	b.n	800f0be <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f08a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f08e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f092:	ee17 2a90 	vmov	r2, s15
 800f096:	3a01      	subs	r2, #1
 800f098:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f09c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0a4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f0a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0ac:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f0b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0b8:	ee17 1a90 	vmov	r1, s15
 800f0bc:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800f0be:	bf00      	nop
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800f0c0:	4601      	mov	r1, r0
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	4798      	blx	r3
    }
 800f0c6:	bf00      	nop
 800f0c8:	3738      	adds	r7, #56	@ 0x38
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b088      	sub	sp, #32
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	60f8      	str	r0, [r7, #12]
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	607a      	str	r2, [r7, #4]
 800f0da:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	33b0      	adds	r3, #176	@ 0xb0
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	68fa      	ldr	r2, [r7, #12]
 800f0e6:	61fa      	str	r2, [r7, #28]
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, xScale);
 800f0ec:	69fa      	ldr	r2, [r7, #28]
 800f0ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f0f0:	69b9      	ldr	r1, [r7, #24]
 800f0f2:	6179      	str	r1, [r7, #20]
 800f0f4:	613a      	str	r2, [r7, #16]
        return i * scale;
 800f0f6:	697a      	ldr	r2, [r7, #20]
 800f0f8:	6939      	ldr	r1, [r7, #16]
 800f0fa:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800f0fe:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800f100:	7af9      	ldrb	r1, [r7, #11]
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	4798      	blx	r3
    }
 800f106:	bf00      	nop
 800f108:	3720      	adds	r7, #32
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 800f10e:	b580      	push	{r7, lr}
 800f110:	b08a      	sub	sp, #40	@ 0x28
 800f112:	af00      	add	r7, sp, #0
 800f114:	60f8      	str	r0, [r7, #12]
 800f116:	460b      	mov	r3, r1
 800f118:	ed87 0a01 	vstr	s0, [r7, #4]
 800f11c:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	33b0      	adds	r3, #176	@ 0xb0
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	627a      	str	r2, [r7, #36]	@ 0x24
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	623a      	str	r2, [r7, #32]
        return float2scaled(f, xScale);
 800f12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f130:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f132:	6a39      	ldr	r1, [r7, #32]
 800f134:	61f9      	str	r1, [r7, #28]
 800f136:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800f138:	69ba      	ldr	r2, [r7, #24]
 800f13a:	ee07 2a90 	vmov	s15, r2
 800f13e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f142:	ed97 7a07 	vldr	s14, [r7, #28]
 800f146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f14a:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800f14e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15a:	db0a      	blt.n	800f172 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800f15c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f160:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f164:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f16c:	ee17 2a90 	vmov	r2, s15
 800f170:	e019      	b.n	800f1a6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f172:	edd7 7a05 	vldr	s15, [r7, #20]
 800f176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f17a:	ee17 2a90 	vmov	r2, s15
 800f17e:	3a01      	subs	r2, #1
 800f180:	edd7 7a05 	vldr	s15, [r7, #20]
 800f184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f18c:	ed97 7a05 	vldr	s14, [r7, #20]
 800f190:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f194:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f19c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1a0:	ee17 1a90 	vmov	r1, s15
 800f1a4:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800f1a6:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800f1a8:	7af9      	ldrb	r1, [r7, #11]
 800f1aa:	68f8      	ldr	r0, [r7, #12]
 800f1ac:	4798      	blx	r3
    }
 800f1ae:	bf00      	nop
 800f1b0:	3728      	adds	r7, #40	@ 0x28
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b08c      	sub	sp, #48	@ 0x30
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	60f8      	str	r0, [r7, #12]
 800f1be:	60b9      	str	r1, [r7, #8]
 800f1c0:	607a      	str	r2, [r7, #4]
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	33bc      	adds	r3, #188	@ 0xbc
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	61fa      	str	r2, [r7, #28]
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800f1d2:	69fa      	ldr	r2, [r7, #28]
 800f1d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f1d6:	69b9      	ldr	r1, [r7, #24]
 800f1d8:	6179      	str	r1, [r7, #20]
 800f1da:	613a      	str	r2, [r7, #16]
        return i * scale;
 800f1dc:	697a      	ldr	r2, [r7, #20]
 800f1de:	6939      	ldr	r1, [r7, #16]
 800f1e0:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, yScale);
 800f1e4:	bf00      	nop
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f1ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f1f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1f4:	6279      	str	r1, [r7, #36]	@ 0x24
 800f1f6:	623a      	str	r2, [r7, #32]
        return i * scale;
 800f1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1fa:	6a39      	ldr	r1, [r7, #32]
 800f1fc:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800f200:	bf00      	nop
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800f202:	4601      	mov	r1, r0
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	4798      	blx	r3
    }
 800f208:	bf00      	nop
 800f20a:	3730      	adds	r7, #48	@ 0x30
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
    virtual void setGraphRangeY(float min, float max)
 800f210:	b580      	push	{r7, lr}
 800f212:	b08e      	sub	sp, #56	@ 0x38
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	ed87 0a02 	vstr	s0, [r7, #8]
 800f21c:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	33bc      	adds	r3, #188	@ 0xbc
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	623a      	str	r2, [r7, #32]
 800f22c:	68ba      	ldr	r2, [r7, #8]
 800f22e:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledY(float f) const
    {
        return float2scaled(f, yScale);
 800f230:	6a3a      	ldr	r2, [r7, #32]
 800f232:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f234:	69f9      	ldr	r1, [r7, #28]
 800f236:	61b9      	str	r1, [r7, #24]
 800f238:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800f23a:	697a      	ldr	r2, [r7, #20]
 800f23c:	ee07 2a90 	vmov	s15, r2
 800f240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f244:	ed97 7a06 	vldr	s14, [r7, #24]
 800f248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f24c:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800f250:	edd7 7a04 	vldr	s15, [r7, #16]
 800f254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f25c:	db0a      	blt.n	800f274 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x64>
            return (int)(fs + 0.5f);
 800f25e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f262:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f26a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f26e:	ee17 0a90 	vmov	r0, s15
 800f272:	e019      	b.n	800f2a8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f274:	edd7 7a04 	vldr	s15, [r7, #16]
 800f278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f27c:	ee17 2a90 	vmov	r2, s15
 800f280:	3a01      	subs	r2, #1
 800f282:	edd7 7a04 	vldr	s15, [r7, #16]
 800f286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f28a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f28e:	ed97 7a04 	vldr	s14, [r7, #16]
 800f292:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f296:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f29a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f29e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2a2:	ee17 1a90 	vmov	r1, s15
 800f2a6:	1850      	adds	r0, r2, r1
        return float2scaled(f, yScale);
 800f2a8:	bf00      	nop
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	637a      	str	r2, [r7, #52]	@ 0x34
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800f2b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f2b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f2b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800f2ba:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800f2bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2be:	ee07 2a90 	vmov	s15, r2
 800f2c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800f2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800f2d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f2d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2de:	db0a      	blt.n	800f2f6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0xe6>
            return (int)(fs + 0.5f);
 800f2e0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f2e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f2e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f2ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2f0:	ee17 2a90 	vmov	r2, s15
 800f2f4:	e019      	b.n	800f32a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f2f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f2fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2fe:	ee17 2a90 	vmov	r2, s15
 800f302:	3a01      	subs	r2, #1
 800f304:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f30c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f310:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f318:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f31c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f324:	ee17 1a90 	vmov	r1, s15
 800f328:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800f32a:	bf00      	nop
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800f32c:	4601      	mov	r1, r0
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	4798      	blx	r3
    }
 800f332:	bf00      	nop
 800f334:	3738      	adds	r7, #56	@ 0x38
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b088      	sub	sp, #32
 800f33e:	af00      	add	r7, sp, #0
 800f340:	60f8      	str	r0, [r7, #12]
 800f342:	460b      	mov	r3, r1
 800f344:	607a      	str	r2, [r7, #4]
 800f346:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	33c0      	adds	r3, #192	@ 0xc0
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	61fa      	str	r2, [r7, #28]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800f358:	69fa      	ldr	r2, [r7, #28]
 800f35a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f35c:	69b9      	ldr	r1, [r7, #24]
 800f35e:	6179      	str	r1, [r7, #20]
 800f360:	613a      	str	r2, [r7, #16]
        return i * scale;
 800f362:	697a      	ldr	r2, [r7, #20]
 800f364:	6939      	ldr	r1, [r7, #16]
 800f366:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800f36a:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800f36c:	7af9      	ldrb	r1, [r7, #11]
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	4798      	blx	r3
    }
 800f372:	bf00      	nop
 800f374:	3720      	adds	r7, #32
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b08a      	sub	sp, #40	@ 0x28
 800f37e:	af00      	add	r7, sp, #0
 800f380:	60f8      	str	r0, [r7, #12]
 800f382:	460b      	mov	r3, r1
 800f384:	ed87 0a01 	vstr	s0, [r7, #4]
 800f388:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	33c0      	adds	r3, #192	@ 0xc0
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	627a      	str	r2, [r7, #36]	@ 0x24
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	623a      	str	r2, [r7, #32]
        return float2scaled(f, yScale);
 800f39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f39c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f39e:	6a39      	ldr	r1, [r7, #32]
 800f3a0:	61f9      	str	r1, [r7, #28]
 800f3a2:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800f3a4:	69ba      	ldr	r2, [r7, #24]
 800f3a6:	ee07 2a90 	vmov	s15, r2
 800f3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3ae:	ed97 7a07 	vldr	s14, [r7, #28]
 800f3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3b6:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800f3ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c6:	db0a      	blt.n	800f3de <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800f3c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f3d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3d8:	ee17 2a90 	vmov	r2, s15
 800f3dc:	e019      	b.n	800f412 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800f3de:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3e6:	ee17 2a90 	vmov	r2, s15
 800f3ea:	3a01      	subs	r2, #1
 800f3ec:	edd7 7a05 	vldr	s15, [r7, #20]
 800f3f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3f8:	ed97 7a05 	vldr	s14, [r7, #20]
 800f3fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f400:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800f404:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f40c:	ee17 1a90 	vmov	r1, s15
 800f410:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800f412:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800f414:	7af9      	ldrb	r1, [r7, #11]
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	4798      	blx	r3
    }
 800f41a:	bf00      	nop
 800f41c:	3728      	adds	r7, #40	@ 0x28
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
    virtual int getGraphRangeXMinAsInt() const
 800f422:	b480      	push	{r7}
 800f424:	b087      	sub	sp, #28
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMinX);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	617a      	str	r2, [r7, #20]
 800f434:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f43a:	693a      	ldr	r2, [r7, #16]
 800f43c:	60fa      	str	r2, [r7, #12]
 800f43e:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b00      	cmp	r3, #0
 800f444:	db0a      	blt.n	800f45c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	005a      	lsls	r2, r3, #1
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	441a      	add	r2, r3
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	fb92 f3f3 	sdiv	r3, r2, r3
 800f454:	0fda      	lsrs	r2, r3, #31
 800f456:	4413      	add	r3, r2
 800f458:	105b      	asrs	r3, r3, #1
 800f45a:	e00f      	b.n	800f47c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	4613      	mov	r3, r2
 800f460:	07db      	lsls	r3, r3, #31
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	461a      	mov	r2, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	4413      	add	r3, r2
 800f46c:	1e5a      	subs	r2, r3, #1
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	fb92 f3f3 	sdiv	r3, r2, r3
 800f474:	0fda      	lsrs	r2, r3, #31
 800f476:	4413      	add	r3, r2
 800f478:	105b      	asrs	r3, r3, #1
 800f47a:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800f47c:	bf00      	nop
    }
 800f47e:	4618      	mov	r0, r3
 800f480:	371c      	adds	r7, #28
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr

0800f48a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
    virtual float getGraphRangeXMinAsFloat() const
 800f48a:	b480      	push	{r7}
 800f48c:	b087      	sub	sp, #28
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMinX);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	617a      	str	r2, [r7, #20]
 800f49c:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatX(int i) const
    {
        return scaled2float(i, xScale);
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4a2:	693a      	ldr	r2, [r7, #16]
 800f4a4:	60fa      	str	r2, [r7, #12]
 800f4a6:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	ee07 3a90 	vmov	s15, r3
 800f4ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	ee07 3a90 	vmov	s15, r3
 800f4b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800f4c0:	bf00      	nop
        return scaled2floatX(graphRangeMinX);
 800f4c2:	eef0 7a66 	vmov.f32	s15, s13
    }
 800f4c6:	eeb0 0a67 	vmov.f32	s0, s15
 800f4ca:	371c      	adds	r7, #28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    virtual int getGraphRangeXMinScaled() const
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
        return graphRangeMinX;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
    }
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	370c      	adds	r7, #12
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
    virtual int getGraphRangeXMaxAsInt() const
 800f4ee:	b480      	push	{r7}
 800f4f0:	b087      	sub	sp, #28
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMaxX);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	617a      	str	r2, [r7, #20]
 800f500:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	60fa      	str	r2, [r7, #12]
 800f50a:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	db0a      	blt.n	800f528 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	005a      	lsls	r2, r3, #1
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	441a      	add	r2, r3
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	fb92 f3f3 	sdiv	r3, r2, r3
 800f520:	0fda      	lsrs	r2, r3, #31
 800f522:	4413      	add	r3, r2
 800f524:	105b      	asrs	r3, r3, #1
 800f526:	e00f      	b.n	800f548 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	4613      	mov	r3, r2
 800f52c:	07db      	lsls	r3, r3, #31
 800f52e:	1a9b      	subs	r3, r3, r2
 800f530:	005b      	lsls	r3, r3, #1
 800f532:	461a      	mov	r2, r3
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	4413      	add	r3, r2
 800f538:	1e5a      	subs	r2, r3, #1
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	fb92 f3f3 	sdiv	r3, r2, r3
 800f540:	0fda      	lsrs	r2, r3, #31
 800f542:	4413      	add	r3, r2
 800f544:	105b      	asrs	r3, r3, #1
 800f546:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800f548:	bf00      	nop
    }
 800f54a:	4618      	mov	r0, r3
 800f54c:	371c      	adds	r7, #28
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr

0800f556 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
    virtual float getGraphRangeXMaxAsFloat() const
 800f556:	b480      	push	{r7}
 800f558:	b087      	sub	sp, #28
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMaxX);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	617a      	str	r2, [r7, #20]
 800f568:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	60fa      	str	r2, [r7, #12]
 800f572:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	ee07 3a90 	vmov	s15, r3
 800f57a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	ee07 3a90 	vmov	s15, r3
 800f584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f588:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800f58c:	bf00      	nop
        return scaled2floatX(graphRangeMaxX);
 800f58e:	eef0 7a66 	vmov.f32	s15, s13
    }
 800f592:	eeb0 0a67 	vmov.f32	s0, s15
 800f596:	371c      	adds	r7, #28
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    virtual int getGraphRangeXMaxScaled() const
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
        return graphRangeMaxX;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
    }
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
    virtual int getGraphRangeYMinAsInt() const
 800f5ba:	b480      	push	{r7}
 800f5bc:	b087      	sub	sp, #28
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMinY);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800f5c8:	687a      	ldr	r2, [r7, #4]
 800f5ca:	617a      	str	r2, [r7, #20]
 800f5cc:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5d2:	693a      	ldr	r2, [r7, #16]
 800f5d4:	60fa      	str	r2, [r7, #12]
 800f5d6:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	db0a      	blt.n	800f5f4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	005a      	lsls	r2, r3, #1
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	441a      	add	r2, r3
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	fb92 f3f3 	sdiv	r3, r2, r3
 800f5ec:	0fda      	lsrs	r2, r3, #31
 800f5ee:	4413      	add	r3, r2
 800f5f0:	105b      	asrs	r3, r3, #1
 800f5f2:	e00f      	b.n	800f614 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	07db      	lsls	r3, r3, #31
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	461a      	mov	r2, r3
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	4413      	add	r3, r2
 800f604:	1e5a      	subs	r2, r3, #1
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	fb92 f3f3 	sdiv	r3, r2, r3
 800f60c:	0fda      	lsrs	r2, r3, #31
 800f60e:	4413      	add	r3, r2
 800f610:	105b      	asrs	r3, r3, #1
 800f612:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800f614:	bf00      	nop
    }
 800f616:	4618      	mov	r0, r3
 800f618:	371c      	adds	r7, #28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
    virtual float getGraphRangeYMinAsFloat() const
 800f622:	b480      	push	{r7}
 800f624:	b087      	sub	sp, #28
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMinY);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	617a      	str	r2, [r7, #20]
 800f634:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatY(int i) const
    {
        return scaled2float(i, yScale);
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	60fa      	str	r2, [r7, #12]
 800f63e:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	ee07 3a90 	vmov	s15, r3
 800f646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	ee07 3a90 	vmov	s15, r3
 800f650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f654:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800f658:	bf00      	nop
        return scaled2floatY(graphRangeMinY);
 800f65a:	eef0 7a66 	vmov.f32	s15, s13
    }
 800f65e:	eeb0 0a67 	vmov.f32	s0, s15
 800f662:	371c      	adds	r7, #28
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    virtual int getGraphRangeYMinScaled() const
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
        return graphRangeMinY;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
    }
 800f67a:	4618      	mov	r0, r3
 800f67c:	370c      	adds	r7, #12
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr

0800f686 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
    virtual int getGraphRangeYMaxAsInt() const
 800f686:	b480      	push	{r7}
 800f688:	b087      	sub	sp, #28
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMaxY);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	617a      	str	r2, [r7, #20]
 800f698:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	60fa      	str	r2, [r7, #12]
 800f6a2:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	db0a      	blt.n	800f6c0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	005a      	lsls	r2, r3, #1
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	441a      	add	r2, r3
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	fb92 f3f3 	sdiv	r3, r2, r3
 800f6b8:	0fda      	lsrs	r2, r3, #31
 800f6ba:	4413      	add	r3, r2
 800f6bc:	105b      	asrs	r3, r3, #1
 800f6be:	e00f      	b.n	800f6e0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	07db      	lsls	r3, r3, #31
 800f6c6:	1a9b      	subs	r3, r3, r2
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	1e5a      	subs	r2, r3, #1
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	fb92 f3f3 	sdiv	r3, r2, r3
 800f6d8:	0fda      	lsrs	r2, r3, #31
 800f6da:	4413      	add	r3, r2
 800f6dc:	105b      	asrs	r3, r3, #1
 800f6de:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 800f6e0:	bf00      	nop
    }
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	371c      	adds	r7, #28
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
    virtual float getGraphRangeYMaxAsFloat() const
 800f6ee:	b480      	push	{r7}
 800f6f0:	b087      	sub	sp, #28
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMaxY);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	617a      	str	r2, [r7, #20]
 800f700:	613b      	str	r3, [r7, #16]
        return scaled2float(i, yScale);
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f706:	693a      	ldr	r2, [r7, #16]
 800f708:	60fa      	str	r2, [r7, #12]
 800f70a:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	ee07 3a90 	vmov	s15, r3
 800f712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	ee07 3a90 	vmov	s15, r3
 800f71c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f720:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 800f724:	bf00      	nop
        return scaled2floatY(graphRangeMaxY);
 800f726:	eef0 7a66 	vmov.f32	s15, s13
    }
 800f72a:	eeb0 0a67 	vmov.f32	s0, s15
 800f72e:	371c      	adds	r7, #28
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    virtual int getGraphRangeYMaxScaled() const
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
        return graphRangeMaxY;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
    }
 800f746:	4618      	mov	r0, r3
 800f748:	370c      	adds	r7, #12
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
     * @return The given data converted to a new scale.
     */
    static int convertToNewScale(int value, int oldScale, int newScale);

    /** Invalidate content. */
    virtual void invalidateContent() const
 800f752:	b580      	push	{r7, lr}
 800f754:	b082      	sub	sp, #8
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f760:	2b00      	cmp	r3, #0
 800f762:	d003      	beq.n	800f76c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x1a>
        {
            Container::invalidateContent();
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4618      	mov	r0, r3
 800f768:	f7fe fe10 	bl	800e38c <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 800f76c:	bf00      	nop
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
     *
     * @param  x The x value.
     *
     * @return The screen x coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800f774:	b590      	push	{r4, r7, lr}
 800f776:	b089      	sub	sp, #36	@ 0x24
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
    {
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800f784:	683a      	ldr	r2, [r7, #0]
 800f786:	1ad4      	subs	r4, r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	3338      	adds	r3, #56	@ 0x38
 800f790:	4618      	mov	r0, r3
 800f792:	f7fe fe3a 	bl	800e40a <_ZNK8touchgfx8Drawable8getWidthEv>
 800f796:	4603      	mov	r3, r0
 800f798:	b29a      	uxth	r2, r3
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800f7a0:	b299      	uxth	r1, r3
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	440b      	add	r3, r1
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	1ad3      	subs	r3, r2, r3
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	b21b      	sxth	r3, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800f7b4:	1e59      	subs	r1, r3, #1
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f7ff fb23 	bl	800ee12 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	60fb      	str	r3, [r7, #12]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 800f7d6:	83fb      	strh	r3, [r7, #30]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800f7d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	f107 0314 	add.w	r3, r7, #20
 800f7e2:	4611      	mov	r1, r2
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7ff faa7 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	613b      	str	r3, [r7, #16]
 800f7ee:	f107 0210 	add.w	r2, r7, #16
 800f7f2:	f107 030c 	add.w	r3, r7, #12
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7ff fab8 	bl	800ed6e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800f7fe:	4603      	mov	r3, r0
    }
 800f800:	4618      	mov	r0, r3
 800f802:	3724      	adds	r7, #36	@ 0x24
 800f804:	46bd      	mov	sp, r7
 800f806:	bd90      	pop	{r4, r7, pc}

0800f808 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
     *
     * @param  y The y value.
     *
     * @return The screen y coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800f808:	b580      	push	{r7, lr}
 800f80a:	b088      	sub	sp, #32
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	617b      	str	r3, [r7, #20]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	3338      	adds	r3, #56	@ 0x38
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fe fe02 	bl	800e424 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f820:	4603      	mov	r3, r0
 800f822:	b29a      	uxth	r2, r3
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 800f82a:	b299      	uxth	r1, r3
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 800f832:	b29b      	uxth	r3, r3
 800f834:	440b      	add	r3, r1
 800f836:	b29b      	uxth	r3, r3
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	b21b      	sxth	r3, r3
    {
        const int16_t graphAreaHeight = getGraphAreaHeight();
 800f83e:	83fb      	strh	r3, [r7, #30]
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800f840:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	f9b2 2114 	ldrsh.w	r2, [r2, #276]	@ 0x114
 800f84a:	4413      	add	r3, r2
 800f84c:	3b01      	subs	r3, #1
 800f84e:	61bb      	str	r3, [r7, #24]
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	015a      	lsls	r2, r3, #5
 800f854:	f107 0310 	add.w	r3, r7, #16
 800f858:	4611      	mov	r1, r2
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff fa6c 	bl	800ed38 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	60bb      	str	r3, [r7, #8]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800f86a:	683a      	ldr	r2, [r7, #0]
 800f86c:	1ad0      	subs	r0, r2, r3
 800f86e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f872:	1e59      	subs	r1, r3, #1
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	461a      	mov	r2, r3
 800f884:	f7ff fac5 	bl	800ee12 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 800f888:	4603      	mov	r3, r0
 800f88a:	60fb      	str	r3, [r7, #12]
 800f88c:	f107 020c 	add.w	r2, r7, #12
 800f890:	f107 0308 	add.w	r3, r7, #8
 800f894:	4611      	mov	r1, r2
 800f896:	4618      	mov	r0, r3
 800f898:	f7ff fa7e 	bl	800ed98 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800f89c:	4603      	mov	r3, r0
    }
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3720      	adds	r7, #32
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
	...

0800f8a8 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	4a05      	ldr	r2, [pc, #20]	@ (800f8c8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	601a      	str	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fe fd47 	bl	800e34c <_ZN8touchgfx8DrawableD1Ev>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	0802ee88 	.word	0x0802ee88

0800f8cc <_ZN8touchgfx9ContainerD0Ev>:
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff ffe7 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800f8da:	212c      	movs	r1, #44	@ 0x2c
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f01c f8c0 	bl	802ba62 <_ZdlPvj>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <_ZN8touchgfx17AbstractDataGraphD1Ev>:
class AbstractDataGraph : public Container
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	4a12      	ldr	r2, [pc, #72]	@ (800f940 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	601a      	str	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	33e8      	adds	r3, #232	@ 0xe8
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7ff ffd2 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	33bc      	adds	r3, #188	@ 0xbc
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff ffcd 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	3390      	adds	r3, #144	@ 0x90
 800f912:	4618      	mov	r0, r3
 800f914:	f7ff ffc8 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	3364      	adds	r3, #100	@ 0x64
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7ff ffc3 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	3338      	adds	r3, #56	@ 0x38
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff ffbe 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4618      	mov	r0, r3
 800f930:	f7ff ffba 	bl	800f8a8 <_ZN8touchgfx9ContainerD1Ev>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4618      	mov	r0, r3
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	0802f2b8 	.word	0x0802f2b8

0800f944 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7ff ffcd 	bl	800f8ec <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800f952:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f01c f883 	bl	802ba62 <_ZdlPvj>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4618      	mov	r0, r3
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
	...

0800f968 <_ZN8touchgfx16DynamicDataGraphC1EsPi>:
     * Initializes a new instance of the AbstractDataGraphWithY class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Address where to store the y values of the graph.
     */
    DynamicDataGraph(int16_t capacity, int* values)
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	460b      	mov	r3, r1
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	817b      	strh	r3, [r7, #10]
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f97c:	4611      	mov	r1, r2
 800f97e:	4618      	mov	r0, r3
 800f980:	f006 fb8e 	bl	80160a0 <_ZN8touchgfx17AbstractDataGraphC1Es>
 800f984:	4a0f      	ldr	r2, [pc, #60]	@ (800f9c4 <_ZN8touchgfx16DynamicDataGraphC1EsPi+0x5c>)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	601a      	str	r2, [r3, #0]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2201      	movs	r2, #1
 800f98e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    {
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	f7ff fac8 	bl	800ef4a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    }
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0802f120 	.word	0x0802f120

0800f9c8 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @see getScale
     *
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	71fb      	strb	r3, [r7, #7]
    {
        setScaleX(scale, updateData);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3388      	adds	r3, #136	@ 0x88
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	79fa      	ldrb	r2, [r7, #7]
 800f9e0:	68b9      	ldr	r1, [r7, #8]
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	4798      	blx	r3
        setScaleY(scale, updateData);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3390      	adds	r3, #144	@ 0x90
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	79fa      	ldrb	r2, [r7, #7]
 800f9f0:	68b9      	ldr	r1, [r7, #8]
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	4798      	blx	r3
    }
 800f9f6:	bf00      	nop
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @return The scaling factor.
     *
     * @see setScale
     */
    virtual int getScale() const
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b082      	sub	sp, #8
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
    {
        return getScaleY();
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3394      	adds	r3, #148	@ 0x94
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	4798      	blx	r3
 800fa12:	4603      	mov	r3, r0
    }
 800fa14:	4618      	mov	r0, r3
 800fa16:	3708      	adds	r7, #8
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
    /**
     * Gets the minimum x coordinate for the graph.
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMinScaled();
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	33d4      	adds	r3, #212	@ 0xd4
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4610      	mov	r0, r2
 800fa30:	4798      	blx	r3
 800fa32:	4603      	mov	r3, r0
    }
 800fa34:	4618      	mov	r0, r3
 800fa36:	3708      	adds	r7, #8
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
    /**
     * Gets the maximum x coordinate for the graph.
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMaxScaled();
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	33e0      	adds	r3, #224	@ 0xe0
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	4610      	mov	r0, r2
 800fa50:	4798      	blx	r3
 800fa52:	4603      	mov	r3, r0
    }
 800fa54:	4618      	mov	r0, r3
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800fa5c:	b5b0      	push	{r4, r5, r7, lr}
 800fa5e:	b08c      	sub	sp, #48	@ 0x30
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	460b      	mov	r3, r1
 800fa66:	607a      	str	r2, [r7, #4]
 800fa68:	72fb      	strb	r3, [r7, #11]
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	33a4      	adds	r3, #164	@ 0xa4
 800fa72:	681c      	ldr	r4, [r3, #0]
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	61fb      	str	r3, [r7, #28]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa80:	69ba      	ldr	r2, [r7, #24]
 800fa82:	617a      	str	r2, [r7, #20]
 800fa84:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	db0a      	blt.n	800faa2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x46>
            return ((i * 2 + scale) / scale) / 2;
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	005a      	lsls	r2, r3, #1
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	441a      	add	r2, r3
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	fb92 f3f3 	sdiv	r3, r2, r3
 800fa9a:	0fda      	lsrs	r2, r3, #31
 800fa9c:	4413      	add	r3, r2
 800fa9e:	105b      	asrs	r3, r3, #1
 800faa0:	e00f      	b.n	800fac2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x66>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800faa2:	697a      	ldr	r2, [r7, #20]
 800faa4:	4613      	mov	r3, r2
 800faa6:	07db      	lsls	r3, r3, #31
 800faa8:	1a9b      	subs	r3, r3, r2
 800faaa:	005b      	lsls	r3, r3, #1
 800faac:	461a      	mov	r2, r3
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	4413      	add	r3, r2
 800fab2:	1e5a      	subs	r2, r3, #1
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	fb92 f3f3 	sdiv	r3, r2, r3
 800faba:	0fda      	lsrs	r2, r3, #31
 800fabc:	4413      	add	r3, r2
 800fabe:	105b      	asrs	r3, r3, #1
 800fac0:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800fac2:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800fac4:	425d      	negs	r5, r3
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800facc:	1e59      	subs	r1, r3, #1
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	62bb      	str	r3, [r7, #40]	@ 0x28
        return scaled2int(i, xScale);
 800fad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fadc:	627a      	str	r2, [r7, #36]	@ 0x24
 800fade:	623b      	str	r3, [r7, #32]
        if (i >= 0)
 800fae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	db0a      	blt.n	800fafc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa0>
            return ((i * 2 + scale) / scale) / 2;
 800fae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae8:	005a      	lsls	r2, r3, #1
 800faea:	6a3b      	ldr	r3, [r7, #32]
 800faec:	441a      	add	r2, r3
 800faee:	6a3b      	ldr	r3, [r7, #32]
 800faf0:	fb92 f3f3 	sdiv	r3, r2, r3
 800faf4:	0fda      	lsrs	r2, r3, #31
 800faf6:	4413      	add	r3, r2
 800faf8:	105b      	asrs	r3, r3, #1
 800fafa:	e00f      	b.n	800fb1c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc0>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800fafc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fafe:	4613      	mov	r3, r2
 800fb00:	07db      	lsls	r3, r3, #31
 800fb02:	1a9b      	subs	r3, r3, r2
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	461a      	mov	r2, r3
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	1e5a      	subs	r2, r3, #1
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	fb92 f3f3 	sdiv	r3, r2, r3
 800fb14:	0fda      	lsrs	r2, r3, #31
 800fb16:	4413      	add	r3, r2
 800fb18:	105b      	asrs	r3, r3, #1
 800fb1a:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800fb1c:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800fb1e:	440b      	add	r3, r1
 800fb20:	461a      	mov	r2, r3
 800fb22:	4629      	mov	r1, r5
 800fb24:	47a0      	blx	r4
    }
 800fb26:	bf00      	nop
 800fb28:	3730      	adds	r7, #48	@ 0x30
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bdb0      	pop	{r4, r5, r7, pc}

0800fb2e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactor(scale);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	6839      	ldr	r1, [r7, #0]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	4798      	blx	r3
    }
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
     * Set x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(int2scaledX(factor));
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	617a      	str	r2, [r7, #20]
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800fb6c:	697a      	ldr	r2, [r7, #20]
 800fb6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fb70:	6939      	ldr	r1, [r7, #16]
 800fb72:	60f9      	str	r1, [r7, #12]
 800fb74:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	68b9      	ldr	r1, [r7, #8]
 800fb7a:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800fb7e:	bf00      	nop
        setXAxisFactorScaled(int2scaledX(factor));
 800fb80:	4611      	mov	r1, r2
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	4798      	blx	r3
    }
 800fb86:	bf00      	nop
 800fb88:	3718      	adds	r7, #24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b082      	sub	sp, #8
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
 800fb96:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactor(scale);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	ed97 0a00 	vldr	s0, [r7]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	4798      	blx	r3
    }
 800fbac:	bf00      	nop
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:

    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b088      	sub	sp, #32
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactorScaled(float2scaledX(factor));
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	61fa      	str	r2, [r7, #28]
 800fbce:	683a      	ldr	r2, [r7, #0]
 800fbd0:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800fbd2:	69fa      	ldr	r2, [r7, #28]
 800fbd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fbd6:	69b9      	ldr	r1, [r7, #24]
 800fbd8:	6179      	str	r1, [r7, #20]
 800fbda:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	ee07 2a90 	vmov	s15, r2
 800fbe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbe6:	ed97 7a05 	vldr	s14, [r7, #20]
 800fbea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbee:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800fbf2:	edd7 7a03 	vldr	s15, [r7, #12]
 800fbf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfe:	db0a      	blt.n	800fc16 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
            return (int)(fs + 0.5f);
 800fc00:	edd7 7a03 	vldr	s15, [r7, #12]
 800fc04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fc08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc10:	ee17 2a90 	vmov	r2, s15
 800fc14:	e019      	b.n	800fc4a <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800fc16:	edd7 7a03 	vldr	s15, [r7, #12]
 800fc1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc1e:	ee17 2a90 	vmov	r2, s15
 800fc22:	3a01      	subs	r2, #1
 800fc24:	edd7 7a03 	vldr	s15, [r7, #12]
 800fc28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc30:	ed97 7a03 	vldr	s14, [r7, #12]
 800fc34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc38:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800fc3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc44:	ee17 1a90 	vmov	r1, s15
 800fc48:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800fc4a:	bf00      	nop
        setXAxisFactorScaled(float2scaledX(factor));
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	4798      	blx	r3
    }
 800fc52:	bf00      	nop
 800fc54:	3720      	adds	r7, #32
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @param  factor The x axis factor.
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
 800fc5a:	b480      	push	{r7}
 800fc5c:	b083      	sub	sp, #12
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	6039      	str	r1, [r7, #0]
    {
        xAxisFactor = factor;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	683a      	ldr	r2, [r7, #0]
 800fc68:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    }
 800fc6c:	bf00      	nop
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsInt();
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	4798      	blx	r3
 800fc8e:	4603      	mov	r3, r0
    }
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     * Get x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
 800fc98:	b590      	push	{r4, r7, lr}
 800fc9a:	b087      	sub	sp, #28
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisFactorScaled());
 800fca0:	687c      	ldr	r4, [r7, #4]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	4798      	blx	r3
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	617c      	str	r4, [r7, #20]
 800fcb4:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcba:	693a      	ldr	r2, [r7, #16]
 800fcbc:	60fa      	str	r2, [r7, #12]
 800fcbe:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	db0a      	blt.n	800fcdc <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	005a      	lsls	r2, r3, #1
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	441a      	add	r2, r3
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	fb92 f3f3 	sdiv	r3, r2, r3
 800fcd4:	0fda      	lsrs	r2, r3, #31
 800fcd6:	4413      	add	r3, r2
 800fcd8:	105b      	asrs	r3, r3, #1
 800fcda:	e00f      	b.n	800fcfc <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	4613      	mov	r3, r2
 800fce0:	07db      	lsls	r3, r3, #31
 800fce2:	1a9b      	subs	r3, r3, r2
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	461a      	mov	r2, r3
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	4413      	add	r3, r2
 800fcec:	1e5a      	subs	r2, r3, #1
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	fb92 f3f3 	sdiv	r3, r2, r3
 800fcf4:	0fda      	lsrs	r2, r3, #31
 800fcf6:	4413      	add	r3, r2
 800fcf8:	105b      	asrs	r3, r3, #1
 800fcfa:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800fcfc:	bf00      	nop
    }
 800fcfe:	4618      	mov	r0, r3
 800fd00:	371c      	adds	r7, #28
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd90      	pop	{r4, r7, pc}

0800fd06 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b082      	sub	sp, #8
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsFloat();
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	4798      	blx	r3
 800fd1c:	eef0 7a40 	vmov.f32	s15, s0
    }
 800fd20:	eeb0 0a67 	vmov.f32	s0, s15
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:

    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
 800fd2a:	b590      	push	{r4, r7, lr}
 800fd2c:	b087      	sub	sp, #28
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisFactorScaled());
 800fd32:	687c      	ldr	r4, [r7, #4]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	4798      	blx	r3
 800fd42:	4603      	mov	r3, r0
 800fd44:	617c      	str	r4, [r7, #20]
 800fd46:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd4c:	693a      	ldr	r2, [r7, #16]
 800fd4e:	60fa      	str	r2, [r7, #12]
 800fd50:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	ee07 3a90 	vmov	s15, r3
 800fd58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	ee07 3a90 	vmov	s15, r3
 800fd62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd66:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800fd6a:	bf00      	nop
        return scaled2floatX(getXAxisFactorScaled());
 800fd6c:	eef0 7a66 	vmov.f32	s15, s13
    }
 800fd70:	eeb0 0a67 	vmov.f32	s0, s15
 800fd74:	371c      	adds	r7, #28
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd90      	pop	{r4, r7, pc}

0800fd7a <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     *
     * @return The x axis factor (scaled).
     *
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
 800fd7a:	b480      	push	{r7}
 800fd7c:	b083      	sub	sp, #12
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
    {
        return xAxisFactor;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
    }
 800fd88:	4618      	mov	r0, r3
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
     * Set x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b086      	sub	sp, #24
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	617a      	str	r2, [r7, #20]
 800fdac:	683a      	ldr	r2, [r7, #0]
 800fdae:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 800fdb0:	697a      	ldr	r2, [r7, #20]
 800fdb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdb4:	6939      	ldr	r1, [r7, #16]
 800fdb6:	60f9      	str	r1, [r7, #12]
 800fdb8:	60ba      	str	r2, [r7, #8]
        return i * scale;
 800fdba:	68fa      	ldr	r2, [r7, #12]
 800fdbc:	68b9      	ldr	r1, [r7, #8]
 800fdbe:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800fdc2:	bf00      	nop
        setXAxisOffsetScaled(int2scaledX(offset));
 800fdc4:	4611      	mov	r1, r2
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	4798      	blx	r3
    }
 800fdca:	bf00      	nop
 800fdcc:	3718      	adds	r7, #24
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b088      	sub	sp, #32
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	61fa      	str	r2, [r7, #28]
 800fdec:	683a      	ldr	r2, [r7, #0]
 800fdee:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 800fdf0:	69fa      	ldr	r2, [r7, #28]
 800fdf2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdf4:	69b9      	ldr	r1, [r7, #24]
 800fdf6:	6179      	str	r1, [r7, #20]
 800fdf8:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 800fdfa:	693a      	ldr	r2, [r7, #16]
 800fdfc:	ee07 2a90 	vmov	s15, r2
 800fe00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe04:	ed97 7a05 	vldr	s14, [r7, #20]
 800fe08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe0c:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 800fe10:	edd7 7a03 	vldr	s15, [r7, #12]
 800fe14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1c:	db0a      	blt.n	800fe34 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
            return (int)(fs + 0.5f);
 800fe1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800fe22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fe26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe2e:	ee17 2a90 	vmov	r2, s15
 800fe32:	e019      	b.n	800fe68 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800fe34:	edd7 7a03 	vldr	s15, [r7, #12]
 800fe38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe3c:	ee17 2a90 	vmov	r2, s15
 800fe40:	3a01      	subs	r2, #1
 800fe42:	edd7 7a03 	vldr	s15, [r7, #12]
 800fe46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe4e:	ed97 7a03 	vldr	s14, [r7, #12]
 800fe52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe56:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800fe5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe62:	ee17 1a90 	vmov	r1, s15
 800fe66:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800fe68:	bf00      	nop
        setXAxisOffsetScaled(float2scaledX(offset));
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	4798      	blx	r3
    }
 800fe70:	bf00      	nop
 800fe72:	3720      	adds	r7, #32
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
    {
        xAxisOffset = offset;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	683a      	ldr	r2, [r7, #0]
 800fe86:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    }
 800fe8a:	bf00      	nop
 800fe8c:	370c      	adds	r7, #12
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr

0800fe96 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     * Get x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
 800fe96:	b590      	push	{r4, r7, lr}
 800fe98:	b087      	sub	sp, #28
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisOffsetScaled());
 800fe9e:	687c      	ldr	r4, [r7, #4]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	4798      	blx	r3
 800feae:	4603      	mov	r3, r0
 800feb0:	617c      	str	r4, [r7, #20]
 800feb2:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	60fa      	str	r2, [r7, #12]
 800febc:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	db0a      	blt.n	800feda <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	005a      	lsls	r2, r3, #1
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	441a      	add	r2, r3
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	fb92 f3f3 	sdiv	r3, r2, r3
 800fed2:	0fda      	lsrs	r2, r3, #31
 800fed4:	4413      	add	r3, r2
 800fed6:	105b      	asrs	r3, r3, #1
 800fed8:	e00f      	b.n	800fefa <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800feda:	68fa      	ldr	r2, [r7, #12]
 800fedc:	4613      	mov	r3, r2
 800fede:	07db      	lsls	r3, r3, #31
 800fee0:	1a9b      	subs	r3, r3, r2
 800fee2:	005b      	lsls	r3, r3, #1
 800fee4:	461a      	mov	r2, r3
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	4413      	add	r3, r2
 800feea:	1e5a      	subs	r2, r3, #1
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	fb92 f3f3 	sdiv	r3, r2, r3
 800fef2:	0fda      	lsrs	r2, r3, #31
 800fef4:	4413      	add	r3, r2
 800fef6:	105b      	asrs	r3, r3, #1
 800fef8:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 800fefa:	bf00      	nop
    }
 800fefc:	4618      	mov	r0, r3
 800fefe:	371c      	adds	r7, #28
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd90      	pop	{r4, r7, pc}

0800ff04 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
 800ff04:	b590      	push	{r4, r7, lr}
 800ff06:	b087      	sub	sp, #28
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800ff0c:	687c      	ldr	r4, [r7, #4]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	4798      	blx	r3
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	617c      	str	r4, [r7, #20]
 800ff20:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff26:	693a      	ldr	r2, [r7, #16]
 800ff28:	60fa      	str	r2, [r7, #12]
 800ff2a:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	ee07 3a90 	vmov	s15, r3
 800ff32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	ee07 3a90 	vmov	s15, r3
 800ff3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff40:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 800ff44:	bf00      	nop
        return scaled2floatX(getXAxisOffsetScaled());
 800ff46:	eef0 7a66 	vmov.f32	s15, s13
    }
 800ff4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ff4e:	371c      	adds	r7, #28
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd90      	pop	{r4, r7, pc}

0800ff54 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     *
     * @return The x axis offset (scaled).
     *
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
    {
        return xAxisOffset;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    }
 800ff62:	4618      	mov	r0, r3
 800ff64:	370c      	adds	r7, #12
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr
	...

0800ff70 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:

    virtual int indexToDataPointXScaled(int16_t index) const
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	460b      	mov	r3, r1
 800ff7a:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800ff7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	db06      	blt.n	800ff92 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800ff8a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	db06      	blt.n	800ffa0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>
 800ff92:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x60>)
 800ff94:	4a0f      	ldr	r2, [pc, #60]	@ (800ffd4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x64>)
 800ff96:	f240 6133 	movw	r1, #1587	@ 0x633
 800ff9a:	480f      	ldr	r0, [pc, #60]	@ (800ffd8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x68>)
 800ff9c:	f01b fd8e 	bl	802babc <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ffae:	4611      	mov	r1, r2
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	4798      	blx	r3
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800ffbc:	fb03 f202 	mul.w	r2, r3, r2
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ffc6:	4413      	add	r3, r2
    }
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	0802d058 	.word	0x0802d058
 800ffd4:	0802d07c 	.word	0x0802d07c
 800ffd8:	0802d0cc 	.word	0x0802d0cc

0800ffdc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:

    virtual int indexToDataPointYScaled(int16_t index) const
 800ffdc:	b590      	push	{r4, r7, lr}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 800ffe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	db06      	blt.n	800fffe <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x22>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 800fff6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	db06      	blt.n	801000c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>
 800fffe:	4b0e      	ldr	r3, [pc, #56]	@ (8010038 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x5c>)
 8010000:	4a0e      	ldr	r2, [pc, #56]	@ (801003c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x60>)
 8010002:	f240 6139 	movw	r1, #1593	@ 0x639
 8010006:	480e      	ldr	r0, [pc, #56]	@ (8010040 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x64>)
 8010008:	f01b fd58 	bl	802babc <__assert_func>
        return yValues[dataIndex(index)];
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 4144 	ldr.w	r4, [r3, #324]	@ 0x144
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010020:	4611      	mov	r1, r2
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	4798      	blx	r3
 8010026:	4603      	mov	r3, r0
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	4423      	add	r3, r4
 801002c:	681b      	ldr	r3, [r3, #0]
    }
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	bd90      	pop	{r4, r7, pc}
 8010036:	bf00      	nop
 8010038:	0802d058 	.word	0x0802d058
 801003c:	0802d128 	.word	0x0802d128
 8010040:	0802d0cc 	.word	0x0802d0cc

08010044 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     *
     * @param  screenIndex Zero-based screen index.
     *
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	460b      	mov	r3, r1
 801004e:	807b      	strh	r3, [r7, #2]
    {
        return screenIndex;
 8010050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 8010054:	4618      	mov	r0, r3
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (int32_t)index;
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8010060:	b590      	push	{r4, r7, lr}
 8010062:	b089      	sub	sp, #36	@ 0x24
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8010074:	681c      	ldr	r4, [r3, #0]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	61fb      	str	r3, [r7, #28]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010082:	69ba      	ldr	r2, [r7, #24]
 8010084:	617a      	str	r2, [r7, #20]
 8010086:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	2b00      	cmp	r3, #0
 801008c:	db0a      	blt.n	80100a4 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x44>
            return ((i * 2 + scale) / scale) / 2;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	005a      	lsls	r2, r3, #1
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	441a      	add	r2, r3
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	fb92 f3f3 	sdiv	r3, r2, r3
 801009c:	0fda      	lsrs	r2, r3, #31
 801009e:	4413      	add	r3, r2
 80100a0:	105b      	asrs	r3, r3, #1
 80100a2:	e00f      	b.n	80100c4 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80100a4:	697a      	ldr	r2, [r7, #20]
 80100a6:	4613      	mov	r3, r2
 80100a8:	07db      	lsls	r3, r3, #31
 80100aa:	1a9b      	subs	r3, r3, r2
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	461a      	mov	r2, r3
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	4413      	add	r3, r2
 80100b4:	1e5a      	subs	r2, r3, #1
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80100bc:	0fda      	lsrs	r2, r3, #31
 80100be:	4413      	add	r3, r2
 80100c0:	105b      	asrs	r3, r3, #1
 80100c2:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 80100c4:	bf00      	nop
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80100c6:	b21b      	sxth	r3, r3
 80100c8:	4619      	mov	r1, r3
 80100ca:	68f8      	ldr	r0, [r7, #12]
 80100cc:	47a0      	blx	r4
 80100ce:	4602      	mov	r2, r0
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80100d6:	fb03 f202 	mul.w	r2, r3, r2
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80100e0:	4413      	add	r3, r2
    }
 80100e2:	4618      	mov	r0, r3
 80100e4:	3724      	adds	r7, #36	@ 0x24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd90      	pop	{r4, r7, pc}

080100ea <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b082      	sub	sp, #8
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleX();
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe ff00 	bl	800eefa <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>
 80100fa:	4603      	mov	r3, r0
    }
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:

    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleY();
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	f7fe feff 	bl	800ef12 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>
 8010114:	4603      	mov	r3, r0
    }
 8010116:	4618      	mov	r0, r3
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}

0801011e <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
 801011e:	b580      	push	{r7, lr}
 8010120:	b082      	sub	sp, #8
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
 8010126:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(scale);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	6839      	ldr	r1, [r7, #0]
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	4798      	blx	r3
    }
 8010138:	bf00      	nop
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:

    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorScaled();
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	4798      	blx	r3
 8010156:	4603      	mov	r3, r0
    }
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	460b      	mov	r3, r1
 801016a:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenXQ5(int2scaledX(index));
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	6879      	ldr	r1, [r7, #4]
 801017a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801017e:	6179      	str	r1, [r7, #20]
 8010180:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 8010182:	697a      	ldr	r2, [r7, #20]
 8010184:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010186:	6939      	ldr	r1, [r7, #16]
 8010188:	60f9      	str	r1, [r7, #12]
 801018a:	60ba      	str	r2, [r7, #8]
        return i * scale;
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	68b9      	ldr	r1, [r7, #8]
 8010190:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 8010194:	bf00      	nop
        return valueToScreenXQ5(int2scaledX(index));
 8010196:	4611      	mov	r1, r2
 8010198:	4798      	blx	r3
 801019a:	4603      	mov	r3, r0
    }
 801019c:	4618      	mov	r0, r3
 801019e:	3718      	adds	r7, #24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80101a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	460b      	mov	r3, r1
 80101ae:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80101b0:	687e      	ldr	r6, [r7, #4]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80101ba:	681c      	ldr	r4, [r3, #0]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80101d0:	4611      	mov	r1, r2
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	4798      	blx	r3
 80101d6:	4603      	mov	r3, r0
 80101d8:	009b      	lsls	r3, r3, #2
 80101da:	442b      	add	r3, r5
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4619      	mov	r1, r3
 80101e0:	4630      	mov	r0, r6
 80101e2:	47a0      	blx	r4
 80101e4:	4603      	mov	r3, r0
    }
 80101e6:	4618      	mov	r0, r3
 80101e8:	370c      	adds	r7, #12
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080101f0 <_ZN8touchgfx16DynamicDataGraphD1Ev>:
class DynamicDataGraph : public AbstractDataGraph
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	4a05      	ldr	r2, [pc, #20]	@ (8010210 <_ZN8touchgfx16DynamicDataGraphD1Ev+0x20>)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4618      	mov	r0, r3
 8010202:	f7ff fb73 	bl	800f8ec <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	3708      	adds	r7, #8
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	0802f120 	.word	0x0802f120

08010214 <_ZN8touchgfx16DynamicDataGraphD0Ev>:
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7ff ffe7 	bl	80101f0 <_ZN8touchgfx16DynamicDataGraphD1Ev>
 8010222:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f01b fc1b 	bl	802ba62 <_ZdlPvj>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4618      	mov	r0, r3
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi>:
     * Initializes a new instance of the GraphWrapAndOverwriteData class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Pointer to memory with room for capacity elements of type T.
     */
    GraphWrapAndOverwriteData(int16_t capacity, int* values)
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	460b      	mov	r3, r1
 8010242:	607a      	str	r2, [r7, #4]
 8010244:	817b      	strh	r3, [r7, #10]
        : DynamicDataGraph(capacity, values), current(0)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff fb8a 	bl	800f968 <_ZN8touchgfx16DynamicDataGraphC1EsPi>
 8010254:	4a05      	ldr	r2, [pc, #20]	@ (801026c <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi+0x34>)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2200      	movs	r2, #0
 801025e:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
    {
    }
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	0802f5a4 	.word	0x0802f5a4

08010270 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	683a      	ldr	r2, [r7, #0]
 801027e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	460b      	mov	r3, r1
 8010296:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	78fa      	ldrb	r2, [r7, #3]
 801029c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 80102a0:	bf00      	nop
 80102a2:	370c      	adds	r7, #12
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 80102ba:	4618      	mov	r0, r3
 80102bc:	370c      	adds	r7, #12
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr

080102c6 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80102c6:	b590      	push	{r4, r7, lr}
 80102c8:	b085      	sub	sp, #20
 80102ca:	af02      	add	r7, sp, #8
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe f899 	bl	800e40a <_ZNK8touchgfx8Drawable8getWidthEv>
 80102d8:	4603      	mov	r3, r0
 80102da:	461c      	mov	r4, r3
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fe f8a0 	bl	800e424 <_ZNK8touchgfx8Drawable9getHeightEv>
 80102e4:	4603      	mov	r3, r0
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	4623      	mov	r3, r4
 80102ea:	2200      	movs	r2, #0
 80102ec:	2100      	movs	r1, #0
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7fd ffdc 	bl	800e2ac <_ZN8touchgfx4RectC1Essss>
    }
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	370c      	adds	r7, #12
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd90      	pop	{r4, r7, pc}

080102fc <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7fd ffb9 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
    }
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	4a05      	ldr	r2, [pc, #20]	@ (8010334 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	f7fe fa53 	bl	800e7d0 <_ZN8touchgfx6WidgetD1Ev>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	0802f0a8 	.word	0x0802f0a8

08010338 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f7ff ffe7 	bl	8010314 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8010346:	212c      	movs	r1, #44	@ 0x2c
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f01b fb8a 	bl	802ba62 <_ZdlPvj>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4618      	mov	r0, r3
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 */
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
        : CanvasWidget()
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4618      	mov	r0, r3
 8010364:	f005 fb18 	bl	8015998 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8010368:	4a03      	ldr	r2, [pc, #12]	@ (8010378 <_ZN8touchgfx20AbstractGraphElementC1Ev+0x20>)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	601a      	str	r2, [r3, #0]
    {
    }
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	0802e7d0 	.word	0x0802e7d0

0801037c <_ZN8touchgfx20AbstractGraphElementD1Ev>:
class AbstractGraphElement : public CanvasWidget
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	4a05      	ldr	r2, [pc, #20]	@ (801039c <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff ffc1 	bl	8010314 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	4618      	mov	r0, r3
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	0802e7d0 	.word	0x0802e7d0

080103a0 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7ff ffe7 	bl	801037c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 80103ae:	212c      	movs	r1, #44	@ 0x2c
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f01b fb56 	bl	802ba62 <_ZdlPvj>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 * not use CWR (Canvas Widget Renderer).
 */
class AbstractGraphElementNoCWR : public AbstractGraphElement
{
public:
    AbstractGraphElementNoCWR()
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
        : color(0)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7ff ffc4 	bl	8010358 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 80103d0:	4a06      	ldr	r2, [pc, #24]	@ (80103ec <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x2c>)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	601a      	str	r2, [r3, #0]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	332c      	adds	r3, #44	@ 0x2c
 80103da:	2100      	movs	r1, #0
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fd ff33 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	0802e748 	.word	0x0802e748

080103f0 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @param  newColor The new color.
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8010400:	bf00      	nop
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     *
     * @return The color.
     *
     * @see setColor
     */
    virtual colortype getColor() const
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
    {
        return color;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
 8010418:	4618      	mov	r0, r3
 801041a:	370c      	adds	r7, #12
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
    {
        return true;
 801042e:	2301      	movs	r3, #1
    }
 8010430:	4618      	mov	r0, r3
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
     * @param [in,out] r The rectangle.
     */
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
    {
    }
 8010446:	bf00      	nop
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
	...

08010454 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>:
class AbstractGraphElementNoCWR : public AbstractGraphElement
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	4a05      	ldr	r2, [pc, #20]	@ (8010474 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev+0x20>)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff ff89 	bl	801037c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4618      	mov	r0, r3
 801046e:	3708      	adds	r7, #8
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	0802e748 	.word	0x0802e748

08010478 <_ZN8touchgfx25AbstractGraphElementNoCWRD0Ev>:
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7ff ffe7 	bl	8010454 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 8010486:	2130      	movs	r1, #48	@ 0x30
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f01b faea 	bl	802ba62 <_ZdlPvj>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
 */
class GraphElementGridBase : public AbstractGraphElementNoCWR
{
public:
    /** Default constructor. */
    GraphElementGridBase()
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7ff ff8c 	bl	80103c0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 80104a8:	4a0a      	ldr	r2, [pc, #40]	@ (80104d4 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x3c>)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	601a      	str	r2, [r3, #0]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2201      	movs	r2, #1
 80104b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	220a      	movs	r2, #10
 80104b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2201      	movs	r2, #1
 80104be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2200      	movs	r2, #0
 80104c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    {
    }
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	0802f464 	.word	0x0802f464

080104d8 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
    FORCE_INLINE_FUNCTION uint8_t getLineWidth() const
    {
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
 80104d8:	b480      	push	{r7}
 80104da:	b083      	sub	sp, #12
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	460b      	mov	r3, r1
 80104e2:	807b      	strh	r3, [r7, #2]
    {
    }
 80104e4:	bf00      	nop
 80104e6:	370c      	adds	r7, #12
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr

080104f0 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @param  graph The graph.
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00b      	beq.n	801051a <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2a>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3380      	adds	r3, #128	@ 0x80
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6839      	ldr	r1, [r7, #0]
 8010512:	4610      	mov	r0, r2
 8010514:	4798      	blx	r3
 8010516:	4603      	mov	r3, r0
 8010518:	e000      	b.n	801051c <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2c>
 801051a:	2300      	movs	r3, #0
    }
 801051c:	4618      	mov	r0, r3
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridY : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 801052e:	6879      	ldr	r1, [r7, #4]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010538:	6179      	str	r1, [r7, #20]
 801053a:	6839      	ldr	r1, [r7, #0]
 801053c:	6139      	str	r1, [r7, #16]
 801053e:	60fa      	str	r2, [r7, #12]
 8010540:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	3394      	adds	r3, #148	@ 0x94
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	6938      	ldr	r0, [r7, #16]
 801054c:	4798      	blx	r3
 801054e:	4603      	mov	r3, r0
 8010550:	461a      	mov	r2, r3
 8010552:	68b9      	ldr	r1, [r7, #8]
 8010554:	68f8      	ldr	r0, [r7, #12]
 8010556:	f005 fe07 	bl	8016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801055a:	4603      	mov	r3, r0
 801055c:	bf00      	nop
    }
 801055e:	4618      	mov	r0, r3
 8010560:	3718      	adds	r7, #24
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8010566:	b5b0      	push	{r4, r5, r7, lr}
 8010568:	b08a      	sub	sp, #40	@ 0x28
 801056a:	af02      	add	r7, sp, #8
 801056c:	60f8      	str	r0, [r7, #12]
 801056e:	60b9      	str	r1, [r7, #8]
 8010570:	607a      	str	r2, [r7, #4]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	617b      	str	r3, [r7, #20]
        return leftPadding;
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	f9b3 4116 	ldrsh.w	r4, [r3, #278]	@ 0x116
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	3338      	adds	r3, #56	@ 0x38
 8010584:	4618      	mov	r0, r3
 8010586:	f7fd ff40 	bl	800e40a <_ZNK8touchgfx8Drawable8getWidthEv>
 801058a:	4603      	mov	r3, r0
 801058c:	b29a      	uxth	r2, r3
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 8010594:	b299      	uxth	r1, r3
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 801059c:	b29b      	uxth	r3, r3
 801059e:	440b      	add	r3, r1
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	b21d      	sxth	r5, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight();
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	3338      	adds	r3, #56	@ 0x38
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fd ff37 	bl	800e424 <_ZNK8touchgfx8Drawable9getHeightEv>
 80105b6:	4603      	mov	r3, r0
 80105b8:	bf00      	nop
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	462b      	mov	r3, r5
 80105be:	2200      	movs	r2, #0
 80105c0:	4621      	mov	r1, r4
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7fd fe72 	bl	800e2ac <_ZN8touchgfx4RectC1Essss>
    }
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	3720      	adds	r7, #32
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bdb0      	pop	{r4, r5, r7, pc}

080105d0 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b086      	sub	sp, #24
 80105d4:	af02      	add	r7, sp, #8
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	4611      	mov	r1, r2
 80105dc:	461a      	mov	r2, r3
 80105de:	460b      	mov	r3, r1
 80105e0:	80fb      	strh	r3, [r7, #6]
 80105e2:	4613      	mov	r3, r2
 80105e4:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(start, pos, length, width);
 80105e6:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80105ea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80105ee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80105f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	4603      	mov	r3, r0
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f7fd fe56 	bl	800e2ac <_ZN8touchgfx4RectC1Essss>
    }
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	3710      	adds	r7, #16
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMinScaled();
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	33ec      	adds	r3, #236	@ 0xec
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	6838      	ldr	r0, [r7, #0]
 801061c:	4798      	blx	r3
 801061e:	4603      	mov	r3, r0
    }
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMaxScaled();
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	33f8      	adds	r3, #248	@ 0xf8
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	6838      	ldr	r0, [r7, #0]
 801063c:	4798      	blx	r3
 801063e:	4603      	mov	r3, r0
    }
 8010640:	4618      	mov	r0, r3
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 8010648:	b480      	push	{r7}
 801064a:	b085      	sub	sp, #20
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 801065c:	4618      	mov	r0, r3
 801065e:	3714      	adds	r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	3338      	adds	r3, #56	@ 0x38
 801067a:	4618      	mov	r0, r3
 801067c:	f7fd fec5 	bl	800e40a <_ZNK8touchgfx8Drawable8getWidthEv>
 8010680:	4603      	mov	r3, r0
 8010682:	b29a      	uxth	r2, r3
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 801068a:	b299      	uxth	r1, r3
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 8010692:	b29b      	uxth	r3, r3
 8010694:	440b      	add	r3, r1
 8010696:	b29b      	uxth	r3, r3
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	b29b      	uxth	r3, r3
 801069c:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 801069e:	4618      	mov	r0, r3
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 80106a6:	b480      	push	{r7}
 80106a8:	b085      	sub	sp, #20
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	6039      	str	r1, [r7, #0]
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	60fb      	str	r3, [r7, #12]
        return topPadding;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 80106ba:	4618      	mov	r0, r3
 80106bc:	3714      	adds	r7, #20
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	6039      	str	r1, [r7, #0]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	3338      	adds	r3, #56	@ 0x38
 80106d8:	4618      	mov	r0, r3
 80106da:	f7fd fea3 	bl	800e424 <_ZNK8touchgfx8Drawable9getHeightEv>
 80106de:	4603      	mov	r3, r0
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 80106e8:	b299      	uxth	r1, r3
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	440b      	add	r3, r1
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 80106fc:	4618      	mov	r0, r3
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8010704:	b580      	push	{r7, lr}
 8010706:	b088      	sub	sp, #32
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenYQ5(graph, value);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	61fb      	str	r3, [r7, #28]
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	61bb      	str	r3, [r7, #24]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenYQ5(y);
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	6979      	ldr	r1, [r7, #20]
 8010728:	69b8      	ldr	r0, [r7, #24]
 801072a:	4798      	blx	r3
 801072c:	4603      	mov	r3, r0
 801072e:	bf00      	nop
    }
 8010730:	4618      	mov	r0, r3
 8010732:	3720      	adds	r7, #32
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <_ZN8touchgfx16GraphElementLineC1Ev>:
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
        : lineWidth(2)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	4618      	mov	r0, r3
 8010744:	f7ff fe08 	bl	8010358 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 8010748:	4a05      	ldr	r2, [pc, #20]	@ (8010760 <_ZN8touchgfx16GraphElementLineC1Ev+0x28>)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2202      	movs	r2, #2
 8010752:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
    }
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4618      	mov	r0, r3
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	0802f3e8 	.word	0x0802f3e8

08010764 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
    {
 801076e:	4a08      	ldr	r2, [pc, #32]	@ (8010790 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	3304      	adds	r3, #4
 8010778:	4618      	mov	r0, r3
 801077a:	f7fd fd57 	bl	800e22c <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 801077e:	6839      	ldr	r1, [r7, #0]
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f000 f827 	bl	80107d4 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4618      	mov	r0, r3
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	0802e67c 	.word	0x0802e67c

08010794 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
    {
 801079c:	4a04      	ldr	r2, [pc, #16]	@ (80107b0 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	601a      	str	r2, [r3, #0]
    }
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4618      	mov	r0, r3
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr
 80107b0:	0802e67c 	.word	0x0802e67c

080107b4 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
    }
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7ff ffe9 	bl	8010794 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80107c2:	2108      	movs	r1, #8
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f01b f94c 	bl	802ba62 <_ZdlPvj>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	683a      	ldr	r2, [r7, #0]
 80107e2:	605a      	str	r2, [r3, #4]
    }
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fe fa42 	bl	800ec84 <_ZN8touchgfx15AbstractPainterC1Ev>
 8010800:	4a26      	ldr	r2, [pc, #152]	@ (801089c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	601a      	str	r2, [r3, #0]
 8010806:	2300      	movs	r3, #0
 8010808:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801080a:	f7fd f88b 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 801080e:	4603      	mov	r3, r0
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	322c      	adds	r2, #44	@ 0x2c
 8010814:	6812      	ldr	r2, [r2, #0]
 8010816:	4618      	mov	r0, r3
 8010818:	4790      	blx	r2
 801081a:	4603      	mov	r3, r0
 801081c:	461a      	mov	r2, r3
 801081e:	7bfb      	ldrb	r3, [r7, #15]
 8010820:	4293      	cmp	r3, r2
 8010822:	bf0c      	ite	eq
 8010824:	2301      	moveq	r3, #1
 8010826:	2300      	movne	r3, #0
 8010828:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 801082a:	f7fd f86f 	bl	800d90c <_ZN8touchgfx3HAL11getInstanceEv>
 801082e:	4603      	mov	r3, r0
 8010830:	4618      	mov	r0, r3
 8010832:	f7fd ff47 	bl	800e6c4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	bf14      	ite	ne
 801083c:	2301      	movne	r3, #1
 801083e:	2300      	moveq	r3, #0
 8010840:	b2db      	uxtb	r3, r3
 8010842:	2b00      	cmp	r3, #0
 8010844:	d01b      	beq.n	801087e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8010846:	f7fd f861 	bl	800d90c <_ZN8touchgfx3HAL11getInstanceEv>
 801084a:	4603      	mov	r3, r0
 801084c:	4618      	mov	r0, r3
 801084e:	f7fd ff39 	bl	800e6c4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8010852:	4603      	mov	r3, r0
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	322c      	adds	r2, #44	@ 0x2c
 8010858:	6812      	ldr	r2, [r2, #0]
 801085a:	4618      	mov	r0, r3
 801085c:	4790      	blx	r2
 801085e:	4603      	mov	r3, r0
 8010860:	461a      	mov	r2, r3
 8010862:	7bfb      	ldrb	r3, [r7, #15]
 8010864:	4293      	cmp	r3, r2
 8010866:	bf0c      	ite	eq
 8010868:	2301      	moveq	r3, #1
 801086a:	2300      	movne	r3, #0
 801086c:	b2da      	uxtb	r2, r3
 801086e:	7bbb      	ldrb	r3, [r7, #14]
 8010870:	4313      	orrs	r3, r2
 8010872:	b2db      	uxtb	r3, r3
 8010874:	2b00      	cmp	r3, #0
 8010876:	bf14      	ite	ne
 8010878:	2301      	movne	r3, #1
 801087a:	2300      	moveq	r3, #0
 801087c:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 801087e:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8010880:	2b00      	cmp	r3, #0
 8010882:	d105      	bne.n	8010890 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 8010884:	4b06      	ldr	r3, [pc, #24]	@ (80108a0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 8010886:	4a07      	ldr	r2, [pc, #28]	@ (80108a4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 8010888:	212c      	movs	r1, #44	@ 0x2c
 801088a:	4807      	ldr	r0, [pc, #28]	@ (80108a8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 801088c:	f01b f916 	bl	802babc <__assert_func>
    }
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4618      	mov	r0, r3
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	0802e65c 	.word	0x0802e65c
 80108a0:	0802d178 	.word	0x0802d178
 80108a4:	0802d1d8 	.word	0x0802d1d8
 80108a8:	0802d214 	.word	0x0802d214

080108ac <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	4a05      	ldr	r2, [pc, #20]	@ (80108cc <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	601a      	str	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fe f9f5 	bl	800ecac <_ZN8touchgfx15AbstractPainterD1Ev>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	0802e65c 	.word	0x0802e65c

080108d0 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f7ff ffe7 	bl	80108ac <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80108de:	2108      	movs	r1, #8
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f01b f8be 	bl	802ba62 <_ZdlPvj>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4618      	mov	r0, r3
 80108ea:	3708      	adds	r7, #8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7ff ff77 	bl	80107f0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	3308      	adds	r3, #8
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	4618      	mov	r0, r3
 801090a:	f7ff ff2b 	bl	8010764 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 801090e:	4a05      	ldr	r2, [pc, #20]	@ (8010924 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	4a04      	ldr	r2, [pc, #16]	@ (8010928 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	609a      	str	r2, [r3, #8]
    {
    }
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	0802f070 	.word	0x0802f070
 8010928:	0802f094 	.word	0x0802f094

0801092c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 801092c:	b590      	push	{r4, r7, lr}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	3308      	adds	r3, #8
 801093a:	6839      	ldr	r1, [r7, #0]
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff ff49 	bl	80107d4 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 8010948:	f107 030c 	add.w	r3, r7, #12
 801094c:	4618      	mov	r0, r3
 801094e:	f7fd fc8a 	bl	800e266 <_ZNK8touchgfx9colortypecvmEv>
 8010952:	4603      	mov	r3, r0
 8010954:	0a1b      	lsrs	r3, r3, #8
 8010956:	b29b      	uxth	r3, r3
 8010958:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 801095c:	f023 0307 	bic.w	r3, r3, #7
 8010960:	b29c      	uxth	r4, r3
 8010962:	f107 030c 	add.w	r3, r7, #12
 8010966:	4618      	mov	r0, r3
 8010968:	f7fd fc7d 	bl	800e266 <_ZNK8touchgfx9colortypecvmEv>
 801096c:	4603      	mov	r3, r0
 801096e:	095b      	lsrs	r3, r3, #5
 8010970:	b29b      	uxth	r3, r3
 8010972:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010976:	b29b      	uxth	r3, r3
 8010978:	4323      	orrs	r3, r4
 801097a:	b29c      	uxth	r4, r3
 801097c:	f107 030c 	add.w	r3, r7, #12
 8010980:	4618      	mov	r0, r3
 8010982:	f7fd fc70 	bl	800e266 <_ZNK8touchgfx9colortypecvmEv>
 8010986:	4603      	mov	r3, r0
 8010988:	08db      	lsrs	r3, r3, #3
 801098a:	b29b      	uxth	r3, r3
 801098c:	f003 031f 	and.w	r3, r3, #31
 8010990:	b29b      	uxth	r3, r3
 8010992:	4323      	orrs	r3, r4
 8010994:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	821a      	strh	r2, [r3, #16]
    }
 801099a:	bf00      	nop
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd90      	pop	{r4, r7, pc}

080109a2 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 80109a2:	f1a0 0008 	sub.w	r0, r0, #8
 80109a6:	e7c1      	b.n	801092c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

080109a8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	4a05      	ldr	r2, [pc, #20]	@ (80109c8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	601a      	str	r2, [r3, #0]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fd fe8f 	bl	800e6dc <_ZN8touchgfx6ScreenD1Ev>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4618      	mov	r0, r3
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	0802e628 	.word	0x0802e628

080109cc <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff ffe7 	bl	80109a8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80109da:	2140      	movs	r1, #64	@ 0x40
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f01b f840 	bl	802ba62 <_ZdlPvj>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZN8touchgfx20GraphElementGridBaseD1Ev>:
class GraphElementGridBase : public AbstractGraphElementNoCWR
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	4a05      	ldr	r2, [pc, #20]	@ (8010a0c <_ZN8touchgfx20GraphElementGridBaseD1Ev+0x20>)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7ff fd29 	bl	8010454 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4618      	mov	r0, r3
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	0802f464 	.word	0x0802f464

08010a10 <_ZN8touchgfx20GraphElementGridBaseD0Ev>:
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f7ff ffe7 	bl	80109ec <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 8010a1e:	2140      	movs	r1, #64	@ 0x40
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f01b f81e 	bl	802ba62 <_ZdlPvj>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <_ZN8touchgfx17GraphElementGridYC1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7ff fd2c 	bl	8010498 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8010a40:	4a03      	ldr	r2, [pc, #12]	@ (8010a50 <_ZN8touchgfx17GraphElementGridYC1Ev+0x20>)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	601a      	str	r2, [r3, #0]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	0802e690 	.word	0x0802e690

08010a54 <_ZN8touchgfx27GraphElementVerticalGapLineC1Ev>:
 * The GraphElementVerticalGapLine is used to draw a vertical line where the gap in the graph
 * is. This only makes sense to add to a GraphWrapAndOverwrite (or GraphWrapAndOverwriteData).
 *
 * @note The vertical line is drawn using LCD::fillRect for higher performance.
 */
class GraphElementVerticalGapLine : public AbstractGraphElementNoCWR
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff fcae 	bl	80103c0 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 8010a64:	4a03      	ldr	r2, [pc, #12]	@ (8010a74 <_ZN8touchgfx27GraphElementVerticalGapLineC1Ev+0x20>)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3708      	adds	r7, #8
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	0802f51c 	.word	0x0802f51c

08010a78 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8010a78:	b590      	push	{r4, r7, lr}
 8010a7a:	b0cb      	sub	sp, #300	@ 0x12c
 8010a7c:	af02      	add	r7, sp, #8
 8010a7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010a82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010a86:	6018      	str	r0, [r3, #0]
 8010a88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010a8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4618      	mov	r0, r3
 8010a94:	f000 fed6 	bl	8011844 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8010a98:	4ae7      	ldr	r2, [pc, #924]	@ (8010e38 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
 8010a9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010a9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	601a      	str	r2, [r3, #0]
 8010aa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010aaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3340      	adds	r3, #64	@ 0x40
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fd feae 	bl	800e814 <_ZN8touchgfx3BoxC1Ev>
 8010ab8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010abc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	336c      	adds	r3, #108	@ 0x6c
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fd fea5 	bl	800e814 <_ZN8touchgfx3BoxC1Ev>
 8010aca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ace:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3398      	adds	r3, #152	@ 0x98
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fd fe9c 	bl	800e814 <_ZN8touchgfx3BoxC1Ev>
 8010adc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ae0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	33c4      	adds	r3, #196	@ 0xc4
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7fe f88d 	bl	800ec08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010aee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010af2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8010afc:	4618      	mov	r0, r3
 8010afe:	f000 fedb 	bl	80118b8 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EEC1Ev>
 8010b02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010b06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff ff8d 	bl	8010a30 <_ZN8touchgfx17GraphElementGridYC1Ev>
 8010b16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010b1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7ff fe07 	bl	8010738 <_ZN8touchgfx16GraphElementLineC1Ev>
 8010b2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010b2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f503 64be 	add.w	r4, r3, #1520	@ 0x5f0
 8010b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fd fb82 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8010b44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b46:	4620      	mov	r0, r4
 8010b48:	f7ff fed2 	bl	80108f0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8010b4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010b50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7ff ff7a 	bl	8010a54 <_ZN8touchgfx27GraphElementVerticalGapLineC1Ev>
 8010b60:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010b64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fd fe98 	bl	800e8a4 <_ZN8touchgfx8TextAreaC1Ev>
 8010b74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010b78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fd fe8e 	bl	800e8a4 <_ZN8touchgfx8TextAreaC1Ev>
 8010b88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010b8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fd fe84 	bl	800e8a4 <_ZN8touchgfx8TextAreaC1Ev>
 8010b9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ba0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fd fe7a 	bl	800e8a4 <_ZN8touchgfx8TextAreaC1Ev>
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010bb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010bb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f203 7362 	addw	r3, r3, #1890	@ 0x762
 8010bbe:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f007 fbaa 	bl	801831c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    
    __background.setPosition(0, 0, 240, 320);
 8010bc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010bcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010bd6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	23f0      	movs	r3, #240	@ 0xf0
 8010bde:	2200      	movs	r2, #0
 8010be0:	2100      	movs	r1, #0
 8010be2:	f7fd fbf1 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010be6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010bea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8010c00:	2300      	movs	r3, #0
 8010c02:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010c06:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010c0a:	041a      	lsls	r2, r3, #16
 8010c0c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8010c10:	021b      	lsls	r3, r3, #8
 8010c12:	431a      	orrs	r2, r3
 8010c14:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010c1e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8010c22:	4611      	mov	r1, r2
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fd fb0f 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8010c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010c2e:	4619      	mov	r1, r3
 8010c30:	4620      	mov	r0, r4
 8010c32:	f7fd fe13 	bl	800e85c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8010c36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010c3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010c44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	3340      	adds	r3, #64	@ 0x40
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	4610      	mov	r0, r2
 8010c50:	f7fd fd9c 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 320);
 8010c54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010c58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8010c62:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010c66:	9300      	str	r3, [sp, #0]
 8010c68:	23f0      	movs	r3, #240	@ 0xf0
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	f7fd fbab 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010c72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010c76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8010c80:	23ff      	movs	r3, #255	@ 0xff
 8010c82:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8010c86:	23ff      	movs	r3, #255	@ 0xff
 8010c88:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 8010c8c:	23ff      	movs	r3, #255	@ 0xff
 8010c8e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8010c92:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8010c96:	041a      	lsls	r2, r3, #16
 8010c98:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8010c9c:	021b      	lsls	r3, r3, #8
 8010c9e:	431a      	orrs	r2, r3
 8010ca0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010caa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8010cae:	4611      	mov	r1, r2
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fd fac9 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8010cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010cba:	4619      	mov	r1, r3
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f7fd fdcd 	bl	800e85c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8010cc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010cc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010cd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	336c      	adds	r3, #108	@ 0x6c
 8010cd8:	4619      	mov	r1, r3
 8010cda:	4610      	mov	r0, r2
 8010cdc:	f7fd fd56 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box2.setPosition(0, 0, 240, 97);
 8010ce0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ce4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8010cee:	2361      	movs	r3, #97	@ 0x61
 8010cf0:	9300      	str	r3, [sp, #0]
 8010cf2:	23f0      	movs	r3, #240	@ 0xf0
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	f7fd fb66 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(219, 219, 219));
 8010cfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010d00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8010d0a:	23db      	movs	r3, #219	@ 0xdb
 8010d0c:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8010d10:	23db      	movs	r3, #219	@ 0xdb
 8010d12:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8010d16:	23db      	movs	r3, #219	@ 0xdb
 8010d18:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 8010d1c:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8010d20:	041a      	lsls	r2, r3, #16
 8010d22:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8010d26:	021b      	lsls	r3, r3, #8
 8010d28:	431a      	orrs	r2, r3
 8010d2a:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010d34:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010d38:	4611      	mov	r1, r2
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fd fa84 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8010d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010d44:	4619      	mov	r1, r3
 8010d46:	4620      	mov	r0, r4
 8010d48:	f7fd fd88 	bl	800e85c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box2);
 8010d4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010d50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010d5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	3398      	adds	r3, #152	@ 0x98
 8010d62:	4619      	mov	r1, r3
 8010d64:	4610      	mov	r0, r2
 8010d66:	f7fd fd11 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textAreaVolt.setXY(6, 74);
 8010d6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010d6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	33c4      	adds	r3, #196	@ 0xc4
 8010d76:	224a      	movs	r2, #74	@ 0x4a
 8010d78:	2106      	movs	r1, #6
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fd fb7d 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaVolt.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010d80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010d84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010d94:	2300      	movs	r3, #0
 8010d96:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8010da0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010da4:	041a      	lsls	r2, r3, #16
 8010da6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8010daa:	021b      	lsls	r3, r3, #8
 8010dac:	431a      	orrs	r2, r3
 8010dae:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8010db2:	4313      	orrs	r3, r2
 8010db4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010db8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8010dbc:	4611      	mov	r1, r2
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fd fa42 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8010dc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010dc6:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8010dca:	62bb      	str	r3, [r7, #40]	@ 0x28
        color = newColor;
 8010dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010dd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dd2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8010dd4:	bf00      	nop
    textAreaVolt.setLinespacing(0);
 8010dd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010dda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	33c4      	adds	r3, #196	@ 0xc4
 8010de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010de6:	2300      	movs	r3, #0
 8010de8:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
        linespace = space;
 8010dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010df0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8010df4:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8010df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	3384      	adds	r3, #132	@ 0x84
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8010e04:	463a      	mov	r2, r7
 8010e06:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	4798      	blx	r3
 8010e0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010e12:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8010e16:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8010e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010e20:	bf00      	nop
    Unicode::snprintf(textAreaVoltBuffer, TEXTAREAVOLT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_D9QQ).getText());
 8010e22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010e26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f503 64eb 	add.w	r4, r3, #1880	@ 0x758
 8010e30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010e34:	e002      	b.n	8010e3c <_ZN15Screen1ViewBaseC1Ev+0x3c4>
 8010e36:	bf00      	nop
 8010e38:	0802e45c 	.word	0x0802e45c
 8010e3c:	2104      	movs	r1, #4
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fd fd1a 	bl	800e878 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010e44:	4ba1      	ldr	r3, [pc, #644]	@ (80110cc <_ZN15Screen1ViewBaseC1Ev+0x654>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d105      	bne.n	8010e58 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
 8010e4c:	4ba0      	ldr	r3, [pc, #640]	@ (80110d0 <_ZN15Screen1ViewBaseC1Ev+0x658>)
 8010e4e:	4aa1      	ldr	r2, [pc, #644]	@ (80110d4 <_ZN15Screen1ViewBaseC1Ev+0x65c>)
 8010e50:	2160      	movs	r1, #96	@ 0x60
 8010e52:	48a1      	ldr	r0, [pc, #644]	@ (80110d8 <_ZN15Screen1ViewBaseC1Ev+0x660>)
 8010e54:	f01a fe32 	bl	802babc <__assert_func>
 8010e58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        return typedTextId < numberOfTypedTexts;
 8010e60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010e64:	889a      	ldrh	r2, [r3, #4]
 8010e66:	4b9d      	ldr	r3, [pc, #628]	@ (80110dc <_ZN15Screen1ViewBaseC1Ev+0x664>)
 8010e68:	881b      	ldrh	r3, [r3, #0]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	bf34      	ite	cc
 8010e6e:	2301      	movcc	r3, #1
 8010e70:	2300      	movcs	r3, #0
 8010e72:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d105      	bne.n	8010e84 <_ZN15Screen1ViewBaseC1Ev+0x40c>
 8010e78:	4b99      	ldr	r3, [pc, #612]	@ (80110e0 <_ZN15Screen1ViewBaseC1Ev+0x668>)
 8010e7a:	4a96      	ldr	r2, [pc, #600]	@ (80110d4 <_ZN15Screen1ViewBaseC1Ev+0x65c>)
 8010e7c:	2161      	movs	r1, #97	@ 0x61
 8010e7e:	4896      	ldr	r0, [pc, #600]	@ (80110d8 <_ZN15Screen1ViewBaseC1Ev+0x660>)
 8010e80:	f01a fe1c 	bl	802babc <__assert_func>
        return texts->getText(typedTextId);
 8010e84:	4b97      	ldr	r3, [pc, #604]	@ (80110e4 <_ZN15Screen1ViewBaseC1Ev+0x66c>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010e8a:	4611      	mov	r1, r2
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f000 ffcf 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 8010e92:	4603      	mov	r3, r0
 8010e94:	bf00      	nop
 8010e96:	4a94      	ldr	r2, [pc, #592]	@ (80110e8 <_ZN15Screen1ViewBaseC1Ev+0x670>)
 8010e98:	2105      	movs	r1, #5
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f00b ff81 	bl	801cda2 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010ea0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fc fa8b 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
    textAreaVolt.setWildcard(textAreaVoltBuffer);
 8010eaa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010eae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8010eb8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ebc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f503 63eb 	add.w	r3, r3, #1880	@ 0x758
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	4610      	mov	r0, r2
 8010eca:	f7fd fecd 	bl	800ec68 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaVolt.resizeToCurrentText();
 8010ece:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ed2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	33c4      	adds	r3, #196	@ 0xc4
 8010eda:	4618      	mov	r0, r3
 8010edc:	f006 fab4 	bl	8017448 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaVolt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J8LP));
 8010ee0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ee4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8010eee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010ef2:	2105      	movs	r1, #5
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fd fcbf 	bl	800e878 <_ZN8touchgfx9TypedTextC1Et>
 8010efa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010efe:	4619      	mov	r1, r3
 8010f00:	4620      	mov	r0, r4
 8010f02:	f006 fac1 	bl	8017488 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010f06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fc fa58 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textAreaVolt);
 8010f10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	33c4      	adds	r3, #196	@ 0xc4
 8010f26:	4619      	mov	r1, r3
 8010f28:	4610      	mov	r0, r2
 8010f2a:	f7fd fc2f 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    dynamicGraph1.setPosition(31, 119, 203, 76);
 8010f2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8010f3c:	234c      	movs	r3, #76	@ 0x4c
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	23cb      	movs	r3, #203	@ 0xcb
 8010f42:	2277      	movs	r2, #119	@ 0x77
 8010f44:	211f      	movs	r1, #31
 8010f46:	f7fd fa3f 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(10);
 8010f4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8010f58:	2200      	movs	r2, #0
 8010f5a:	210a      	movs	r1, #10
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fe fd33 	bl	800f9c8 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setXAxisFactor(1);
 8010f62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8010f70:	2101      	movs	r1, #1
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7fe fdec 	bl	800fb50 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>
    dynamicGraph1.setXAxisOffset(0);
 8010f78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8010f86:	2100      	movs	r1, #0
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fe ff03 	bl	800fd94 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8010f8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010f92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	f005 f82d 	bl	8016004 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8010faa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010fae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8010fb8:	2300      	movs	r3, #0
 8010fba:	9300      	str	r3, [sp, #0]
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	f004 ff5d 	bl	8015e80 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 4);
 8010fc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010fca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8010fd4:	2204      	movs	r2, #4
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fe f8ec 	bl	800f1b6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    dynamicGraph1MajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010fde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010fe2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f503 64b0 	add.w	r4, r3, #1408	@ 0x580
 8010fec:	2300      	movs	r3, #0
 8010fee:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8010ffe:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8011002:	041a      	lsls	r2, r3, #16
 8011004:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8011008:	021b      	lsls	r3, r3, #8
 801100a:	431a      	orrs	r2, r3
 801100c:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8011010:	4313      	orrs	r3, r2
 8011012:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011016:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801101a:	4611      	mov	r1, r2
 801101c:	4618      	mov	r0, r3
 801101e:	f7fd f913 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8011022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011024:	4619      	mov	r1, r3
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff f9e2 	bl	80103f0 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisGrid.setInterval(2);
 801102c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011030:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 801103a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801103e:	2302      	movs	r3, #2
 8011040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        setIntervalScaled(abs(interval) * dataScale);
 8011044:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8011048:	f000 fbed 	bl	8011826 <_ZN8touchgfx3absIiEET_S1_>
 801104c:	4602      	mov	r2, r0
 801104e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011054:	fb02 f303 	mul.w	r3, r2, r3
 8011058:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801105c:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8011060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        gridInterval = abs(interval);
 8011064:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8011068:	f000 fbdd 	bl	8011826 <_ZN8touchgfx3absIiEET_S1_>
 801106c:	4602      	mov	r2, r0
 801106e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011072:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 8011074:	bf00      	nop
    }
 8011076:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setLineWidth(1);
 8011078:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801107c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8011086:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801108a:	2301      	movs	r3, #1
 801108c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        lineWidth = width;
 8011090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011094:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8011098:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 801109c:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setScale(10);
 801109e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80110a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80110ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80110b0:	230a      	movs	r3, #10
 80110b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
        assert(scale != 0);
 80110b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d11c      	bne.n	80110f8 <_ZN15Screen1ViewBaseC1Ev+0x680>
 80110be:	4b0b      	ldr	r3, [pc, #44]	@ (80110ec <_ZN15Screen1ViewBaseC1Ev+0x674>)
 80110c0:	4a0b      	ldr	r2, [pc, #44]	@ (80110f0 <_ZN15Screen1ViewBaseC1Ev+0x678>)
 80110c2:	f240 112f 	movw	r1, #303	@ 0x12f
 80110c6:	480b      	ldr	r0, [pc, #44]	@ (80110f4 <_ZN15Screen1ViewBaseC1Ev+0x67c>)
 80110c8:	f01a fcf8 	bl	802babc <__assert_func>
 80110cc:	20011f84 	.word	0x20011f84
 80110d0:	0802cf54 	.word	0x0802cf54
 80110d4:	0802d274 	.word	0x0802d274
 80110d8:	0802cfd4 	.word	0x0802cfd4
 80110dc:	20011f88 	.word	0x20011f88
 80110e0:	0802d018 	.word	0x0802d018
 80110e4:	20011f90 	.word	0x20011f90
 80110e8:	0802d2c0 	.word	0x0802d2c0
 80110ec:	0802d2c4 	.word	0x0802d2c4
 80110f0:	0802d2d0 	.word	0x0802d2d0
 80110f4:	0802d304 	.word	0x0802d304
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80110f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110fc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80110fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011104:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011108:	4619      	mov	r1, r3
 801110a:	f005 f82d 	bl	8016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801110e:	4602      	mov	r2, r0
 8011110:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011114:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 8011116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801111a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801111e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8011120:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8011122:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011126:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8011130:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011134:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 801113e:	4619      	mov	r1, r3
 8011140:	4610      	mov	r0, r2
 8011142:	f004 fea8 	bl	8015e96 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(22, 196, 33));
 8011146:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801114a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f503 64be 	add.w	r4, r3, #1520	@ 0x5f0
 8011154:	2316      	movs	r3, #22
 8011156:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 801115a:	23c4      	movs	r3, #196	@ 0xc4
 801115c:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
 8011160:	2321      	movs	r3, #33	@ 0x21
 8011162:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8011166:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 801116a:	041a      	lsls	r2, r3, #16
 801116c:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8011170:	021b      	lsls	r3, r3, #8
 8011172:	431a      	orrs	r2, r3
 8011174:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8011178:	4313      	orrs	r3, r2
 801117a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801117e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8011182:	4611      	mov	r1, r2
 8011184:	4618      	mov	r0, r3
 8011186:	f7fd f85f 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 801118a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801118c:	4619      	mov	r1, r3
 801118e:	4620      	mov	r0, r4
 8011190:	f7ff fbcc 	bl	801092c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 8011194:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011198:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f503 62b8 	add.w	r2, r3, #1472	@ 0x5c0
 80111a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 80111b0:	4619      	mov	r1, r3
 80111b2:	4610      	mov	r0, r2
 80111b4:	f7ff f85c 	bl	8010270 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 80111b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80111c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80111ca:	2302      	movs	r3, #2
 80111cc:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
        lineWidth = width;
 80111d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80111d4:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
 80111d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 80111dc:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 80111de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 80111ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80111fa:	4619      	mov	r1, r3
 80111fc:	4610      	mov	r0, r2
 80111fe:	f004 fe4a 	bl	8015e96 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1VerticalFrontline.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8011202:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011206:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	f203 6404 	addw	r4, r3, #1540	@ 0x604
 8011210:	23ff      	movs	r3, #255	@ 0xff
 8011212:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 8011216:	2300      	movs	r3, #0
 8011218:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 801121c:	2300      	movs	r3, #0
 801121e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8011222:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8011226:	041a      	lsls	r2, r3, #16
 8011228:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 801122c:	021b      	lsls	r3, r3, #8
 801122e:	431a      	orrs	r2, r3
 8011230:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8011234:	4313      	orrs	r3, r2
 8011236:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801123a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801123e:	4611      	mov	r1, r2
 8011240:	4618      	mov	r0, r3
 8011242:	f7fd f801 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8011246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011248:	4619      	mov	r1, r3
 801124a:	4620      	mov	r0, r4
 801124c:	f7ff f8d0 	bl	80103f0 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1VerticalFrontline.setGapLineWidth(1);
 8011250:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011254:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 801125e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011262:	2301      	movs	r3, #1
 8011264:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
     *
     * @see getGapLineWidth
     */
    FORCE_INLINE_FUNCTION void setGapLineWidth(uint16_t width)
    {
        lineWidth = width;
 8011268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801126c:	f8b7 20da 	ldrh.w	r2, [r7, #218]	@ 0xda
 8011270:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 8011272:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1VerticalFrontline);
 8011274:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011278:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8011282:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011286:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f004 fdff 	bl	8015e96 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>


    add(dynamicGraph1);
 8011298:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801129c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80112b0:	4619      	mov	r1, r3
 80112b2:	4610      	mov	r0, r2
 80112b4:	f7fd fa6a 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4.setXY(6, 97);
 80112b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80112c6:	2261      	movs	r2, #97	@ 0x61
 80112c8:	2106      	movs	r1, #6
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fd f8d5 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80112d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f503 64c7 	add.w	r4, r3, #1592	@ 0x638
 80112de:	2300      	movs	r3, #0
 80112e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 80112e4:	2300      	movs	r3, #0
 80112e6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80112ea:	2300      	movs	r3, #0
 80112ec:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
 80112f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80112f4:	041a      	lsls	r2, r3, #16
 80112f6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 80112fa:	021b      	lsls	r3, r3, #8
 80112fc:	431a      	orrs	r2, r3
 80112fe:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8011302:	4313      	orrs	r3, r2
 8011304:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011308:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 801130c:	4611      	mov	r1, r2
 801130e:	4618      	mov	r0, r3
 8011310:	f7fc ff9a 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8011314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011316:	f8c7 40e4 	str.w	r4, [r7, #228]	@ 0xe4
 801131a:	627b      	str	r3, [r7, #36]	@ 0x24
        color = newColor;
 801131c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011322:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8011324:	bf00      	nop
    textArea4.setLinespacing(0);
 8011326:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801132a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8011334:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8011338:	2300      	movs	r3, #0
 801133a:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
        linespace = space;
 801133e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011342:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 8011346:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8011348:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	3384      	adds	r3, #132	@ 0x84
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f8d7 40ec 	ldr.w	r4, [r7, #236]	@ 0xec
 8011356:	463a      	mov	r2, r7
 8011358:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 801135c:	4610      	mov	r0, r2
 801135e:	4798      	blx	r3
 8011360:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011364:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8011368:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801136c:	ca07      	ldmia	r2, {r0, r1, r2}
 801136e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011372:	bf00      	nop
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FGFY));
 8011374:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011378:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f503 64c7 	add.w	r4, r3, #1592	@ 0x638
 8011382:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011386:	2103      	movs	r1, #3
 8011388:	4618      	mov	r0, r3
 801138a:	f7fd fa75 	bl	800e878 <_ZN8touchgfx9TypedTextC1Et>
 801138e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011392:	4619      	mov	r1, r3
 8011394:	4620      	mov	r0, r4
 8011396:	f006 f877 	bl	8017488 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801139a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fc f80e 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4);
 80113a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80113a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80113b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80113bc:	4619      	mov	r1, r3
 80113be:	4610      	mov	r0, r2
 80113c0:	f7fd f9e4 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1.setXY(6, 152);
 80113c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80113c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80113d2:	2298      	movs	r2, #152	@ 0x98
 80113d4:	2106      	movs	r1, #6
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fd f84f 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80113dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80113e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f503 64d0 	add.w	r4, r3, #1664	@ 0x680
 80113ea:	2300      	movs	r3, #0
 80113ec:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
 80113f0:	2300      	movs	r3, #0
 80113f2:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
 80113f6:	2300      	movs	r3, #0
 80113f8:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
 80113fc:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8011400:	041a      	lsls	r2, r3, #16
 8011402:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 8011406:	021b      	lsls	r3, r3, #8
 8011408:	431a      	orrs	r2, r3
 801140a:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
 801140e:	4313      	orrs	r3, r2
 8011410:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011414:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011418:	4611      	mov	r1, r2
 801141a:	4618      	mov	r0, r3
 801141c:	f7fc ff14 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8011420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011422:	461a      	mov	r2, r3
 8011424:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8011428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801142c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8011430:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011436:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801143a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 801143e:	6812      	ldr	r2, [r2, #0]
 8011440:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8011442:	bf00      	nop
    textArea4_1.setLinespacing(0);
 8011444:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011448:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8011452:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011456:	2300      	movs	r3, #0
 8011458:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
        linespace = space;
 801145c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011460:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	@ 0xfa
 8011464:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8011466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	3384      	adds	r3, #132	@ 0x84
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 8011474:	463a      	mov	r2, r7
 8011476:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 801147a:	4610      	mov	r0, r2
 801147c:	4798      	blx	r3
 801147e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011482:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8011486:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801148a:	ca07      	ldmia	r2, {r0, r1, r2}
 801148c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011490:	bf00      	nop
    textArea4_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F7VS));
 8011492:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011496:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f503 64d0 	add.w	r4, r3, #1664	@ 0x680
 80114a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80114a4:	2102      	movs	r1, #2
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fd f9e6 	bl	800e878 <_ZN8touchgfx9TypedTextC1Et>
 80114ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80114b0:	4619      	mov	r1, r3
 80114b2:	4620      	mov	r0, r4
 80114b4:	f005 ffe8 	bl	8017488 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80114b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fb ff7f 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1);
 80114c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80114c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80114d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80114da:	4619      	mov	r1, r3
 80114dc:	4610      	mov	r0, r2
 80114de:	f7fd f955 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_2.setXY(6, 114);
 80114e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80114e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 80114f0:	2272      	movs	r2, #114	@ 0x72
 80114f2:	2106      	movs	r1, #6
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fc ffc0 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80114fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80114fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	f503 64d9 	add.w	r4, r3, #1736	@ 0x6c8
 8011508:	2300      	movs	r3, #0
 801150a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
 801150e:	2300      	movs	r3, #0
 8011510:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8011514:	2300      	movs	r3, #0
 8011516:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
 801151a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 801151e:	041a      	lsls	r2, r3, #16
 8011520:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8011524:	021b      	lsls	r3, r3, #8
 8011526:	431a      	orrs	r2, r3
 8011528:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 801152c:	4313      	orrs	r3, r2
 801152e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011532:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011536:	4611      	mov	r1, r2
 8011538:	4618      	mov	r0, r3
 801153a:	f7fc fe85 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 801153e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011540:	461a      	mov	r2, r3
 8011542:	f8c7 4104 	str.w	r4, [r7, #260]	@ 0x104
 8011546:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801154a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801154e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011554:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8011558:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 801155c:	6812      	ldr	r2, [r2, #0]
 801155e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8011560:	bf00      	nop
    textArea4_1_1_1_2.setLinespacing(0);
 8011562:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011566:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 8011570:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8011574:	2300      	movs	r3, #0
 8011576:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        linespace = space;
 801157a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801157e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8011582:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8011584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3384      	adds	r3, #132	@ 0x84
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f8d7 410c 	ldr.w	r4, [r7, #268]	@ 0x10c
 8011592:	463a      	mov	r2, r7
 8011594:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8011598:	4610      	mov	r0, r2
 801159a:	4798      	blx	r3
 801159c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80115a0:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80115a4:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80115a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80115aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80115ae:	bf00      	nop
    textArea4_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BPQY));
 80115b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80115b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f503 64d9 	add.w	r4, r3, #1736	@ 0x6c8
 80115be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80115c2:	2100      	movs	r1, #0
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fd f957 	bl	800e878 <_ZN8touchgfx9TypedTextC1Et>
 80115ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80115ce:	4619      	mov	r1, r3
 80115d0:	4620      	mov	r0, r4
 80115d2:	f005 ff59 	bl	8017488 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80115d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fb fef0 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_2);
 80115e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80115e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80115ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 80115f8:	4619      	mov	r1, r3
 80115fa:	4610      	mov	r0, r2
 80115fc:	f7fd f8c6 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_1.setXY(6, 189);
 8011600:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011604:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 801160e:	22bd      	movs	r2, #189	@ 0xbd
 8011610:	2106      	movs	r1, #6
 8011612:	4618      	mov	r0, r3
 8011614:	f7fc ff31 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011618:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801161c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f503 64e2 	add.w	r4, r3, #1808	@ 0x710
 8011626:	2300      	movs	r3, #0
 8011628:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 801162c:	2300      	movs	r3, #0
 801162e:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 8011632:	2300      	movs	r3, #0
 8011634:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
 8011638:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 801163c:	041a      	lsls	r2, r3, #16
 801163e:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8011642:	021b      	lsls	r3, r3, #8
 8011644:	431a      	orrs	r2, r3
 8011646:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 801164a:	4313      	orrs	r3, r2
 801164c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011650:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8011654:	4611      	mov	r1, r2
 8011656:	4618      	mov	r0, r3
 8011658:	f7fc fdf6 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 801165c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801165e:	461a      	mov	r2, r3
 8011660:	f8c7 4114 	str.w	r4, [r7, #276]	@ 0x114
 8011664:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801166c:	601a      	str	r2, [r3, #0]
        color = newColor;
 801166e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8011672:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8011676:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 801167a:	6812      	ldr	r2, [r2, #0]
 801167c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 801167e:	bf00      	nop
    textArea4_1_1_1_1.setLinespacing(0);
 8011680:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011684:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 801168e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8011692:	2300      	movs	r3, #0
 8011694:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        linespace = space;
 8011698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801169c:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 80116a0:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 80116a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	3384      	adds	r3, #132	@ 0x84
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
 80116b0:	463a      	mov	r2, r7
 80116b2:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80116b6:	4610      	mov	r0, r2
 80116b8:	4798      	blx	r3
 80116ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80116be:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80116c2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80116c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80116c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80116cc:	bf00      	nop
    textArea4_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_88JH));
 80116ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80116d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f503 64e2 	add.w	r4, r3, #1808	@ 0x710
 80116dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80116e0:	2101      	movs	r1, #1
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fd f8c8 	bl	800e878 <_ZN8touchgfx9TypedTextC1Et>
 80116e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80116ec:	4619      	mov	r1, r3
 80116ee:	4620      	mov	r0, r4
 80116f0:	f005 feca 	bl	8017488 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80116f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7fb fe61 	bl	800d3c0 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_1);
 80116fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011702:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801170c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 8011716:	4619      	mov	r1, r3
 8011718:	4610      	mov	r0, r2
 801171a:	f7fd f837 	bl	800e78c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801171e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011722:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4618      	mov	r0, r3
 801172a:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801172e:	46bd      	mov	sp, r7
 8011730:	bd90      	pop	{r4, r7, pc}
 8011732:	bf00      	nop

08011734 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	4a2b      	ldr	r2, [pc, #172]	@ (80117ec <_ZN15Screen1ViewBaseD1Ev+0xb8>)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	601a      	str	r2, [r3, #0]
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8011742:	f006 fdf5 	bl	8018330 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f503 63e2 	add.w	r3, r3, #1808	@ 0x710
 801174c:	4618      	mov	r0, r3
 801174e:	f7fd f9e7 	bl	800eb20 <_ZN8touchgfx8TextAreaD1Ev>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f503 63d9 	add.w	r3, r3, #1736	@ 0x6c8
 8011758:	4618      	mov	r0, r3
 801175a:	f7fd f9e1 	bl	800eb20 <_ZN8touchgfx8TextAreaD1Ev>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8011764:	4618      	mov	r0, r3
 8011766:	f7fd f9db 	bl	800eb20 <_ZN8touchgfx8TextAreaD1Ev>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8011770:	4618      	mov	r0, r3
 8011772:	f7fd f9d5 	bl	800eb20 <_ZN8touchgfx8TextAreaD1Ev>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 801177c:	4618      	mov	r0, r3
 801177e:	f000 f991 	bl	8011aa4 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 8011788:	4618      	mov	r0, r3
 801178a:	f000 f957 	bl	8011a3c <_ZN8touchgfx13PainterRGB565D1Ev>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8011794:	4618      	mov	r0, r3
 8011796:	f000 f92f 	bl	80119f8 <_ZN8touchgfx16GraphElementLineD1Ev>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80117a0:	4618      	mov	r0, r3
 80117a2:	f000 f8c3 	bl	801192c <_ZN8touchgfx17GraphElementGridYD1Ev>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80117ac:	4618      	mov	r0, r3
 80117ae:	f000 f899 	bl	80118e4 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	33c4      	adds	r3, #196	@ 0xc4
 80117b6:	4618      	mov	r0, r3
 80117b8:	f000 f8da 	bl	8011970 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	3398      	adds	r3, #152	@ 0x98
 80117c0:	4618      	mov	r0, r3
 80117c2:	f000 f8f7 	bl	80119b4 <_ZN8touchgfx3BoxD1Ev>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	336c      	adds	r3, #108	@ 0x6c
 80117ca:	4618      	mov	r0, r3
 80117cc:	f000 f8f2 	bl	80119b4 <_ZN8touchgfx3BoxD1Ev>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	3340      	adds	r3, #64	@ 0x40
 80117d4:	4618      	mov	r0, r3
 80117d6:	f000 f8ed 	bl	80119b4 <_ZN8touchgfx3BoxD1Ev>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff f8e3 	bl	80109a8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4618      	mov	r0, r3
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	0802e45c 	.word	0x0802e45c

080117f0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
}
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7ff ff9b 	bl	8011734 <_ZN15Screen1ViewBaseD1Ev>
 80117fe:	f241 5174 	movw	r1, #5492	@ 0x1574
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f01a f92d 	bl	802ba62 <_ZdlPvj>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8011812:	b480      	push	{r7}
 8011814:	b083      	sub	sp, #12
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]

}
 801181a:	bf00      	nop
 801181c:	370c      	adds	r7, #12
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr

08011826 <_ZN8touchgfx3absIiEET_S1_>:
 * @param  d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 8011826:	b480      	push	{r7}
 8011828:	b083      	sub	sp, #12
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
{
    return (d < 0) ? -d : d;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2b00      	cmp	r3, #0
 8011832:	bfb8      	it	lt
 8011834:	425b      	neglt	r3, r3
}
 8011836:	4618      	mov	r0, r3
 8011838:	370c      	adds	r7, #12
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr
	...

08011844 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	4618      	mov	r0, r3
 8011850:	f009 fdfa 	bl	801b448 <_ZN8touchgfx6ScreenC1Ev>
 8011854:	4a05      	ldr	r2, [pc, #20]	@ (801186c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4618      	mov	r0, r3
 8011864:	3708      	adds	r7, #8
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
 801186a:	bf00      	nop
 801186c:	0802e628 	.word	0x0802e628

08011870 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>:
class GraphWrapAndOverwriteData : public DynamicDataGraph
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	4a05      	ldr	r2, [pc, #20]	@ (8011890 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev+0x20>)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	601a      	str	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	4618      	mov	r0, r3
 8011882:	f7fe fcb5 	bl	80101f0 <_ZN8touchgfx16DynamicDataGraphD1Ev>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	4618      	mov	r0, r3
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	0802f5a4 	.word	0x0802f5a4

08011894 <_ZN8touchgfx25GraphWrapAndOverwriteDataD0Ev>:
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7ff ffe7 	bl	8011870 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>
 80118a2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f01a f8db 	bl	802ba62 <_ZdlPvj>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	4618      	mov	r0, r3
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
	...

080118b8 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
{
public:
    GraphWrapAndOverwrite()
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
        : GraphWrapAndOverwriteData(CAPACITY, y)
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80118c8:	461a      	mov	r2, r3
 80118ca:	21c8      	movs	r1, #200	@ 0xc8
 80118cc:	f7fe fcb4 	bl	8010238 <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi>
 80118d0:	4a03      	ldr	r2, [pc, #12]	@ (80118e0 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EEC1Ev+0x28>)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	601a      	str	r2, [r3, #0]
    {
    }
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4618      	mov	r0, r3
 80118da:	3708      	adds	r7, #8
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	0802e490 	.word	0x0802e490

080118e4 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev>:
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	4a05      	ldr	r2, [pc, #20]	@ (8011904 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev+0x20>)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	601a      	str	r2, [r3, #0]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7ff ffbb 	bl	8011870 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	4618      	mov	r0, r3
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	0802e490 	.word	0x0802e490

08011908 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED0Ev>:
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f7ff ffe7 	bl	80118e4 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev>
 8011916:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f01a f8a1 	bl	802ba62 <_ZdlPvj>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	4618      	mov	r0, r3
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
	...

0801192c <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	4a05      	ldr	r2, [pc, #20]	@ (801194c <_ZN8touchgfx17GraphElementGridYD1Ev+0x20>)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	601a      	str	r2, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	4618      	mov	r0, r3
 801193e:	f7ff f855 	bl	80109ec <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	0802e690 	.word	0x0802e690

08011950 <_ZN8touchgfx17GraphElementGridYD0Ev>:
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f7ff ffe7 	bl	801192c <_ZN8touchgfx17GraphElementGridYD1Ev>
 801195e:	2140      	movs	r1, #64	@ 0x40
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f01a f87e 	bl	802ba62 <_ZdlPvj>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	4618      	mov	r0, r3
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	4a05      	ldr	r2, [pc, #20]	@ (8011990 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	601a      	str	r2, [r3, #0]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4618      	mov	r0, r3
 8011982:	f7fd f91f 	bl	800ebc4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	4618      	mov	r0, r3
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	0802e86c 	.word	0x0802e86c

08011994 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff ffe7 	bl	8011970 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80119a2:	214c      	movs	r1, #76	@ 0x4c
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f01a f85c 	bl	802ba62 <_ZdlPvj>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	4a05      	ldr	r2, [pc, #20]	@ (80119d4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	601a      	str	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7fc ff03 	bl	800e7d0 <_ZN8touchgfx6WidgetD1Ev>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	0802f7cc 	.word	0x0802f7cc

080119d8 <_ZN8touchgfx3BoxD0Ev>:
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7ff ffe7 	bl	80119b4 <_ZN8touchgfx3BoxD1Ev>
 80119e6:	212c      	movs	r1, #44	@ 0x2c
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f01a f83a 	bl	802ba62 <_ZdlPvj>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <_ZN8touchgfx16GraphElementLineD1Ev>:
class GraphElementLine : public AbstractGraphElement
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	4a05      	ldr	r2, [pc, #20]	@ (8011a18 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	601a      	str	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7fe fcb7 	bl	801037c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	4618      	mov	r0, r3
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	0802f3e8 	.word	0x0802f3e8

08011a1c <_ZN8touchgfx16GraphElementLineD0Ev>:
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f7ff ffe7 	bl	80119f8 <_ZN8touchgfx16GraphElementLineD1Ev>
 8011a2a:	2130      	movs	r1, #48	@ 0x30
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f01a f818 	bl	802ba62 <_ZdlPvj>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4618      	mov	r0, r3
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	4a09      	ldr	r2, [pc, #36]	@ (8011a6c <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	601a      	str	r2, [r3, #0]
 8011a4a:	4a09      	ldr	r2, [pc, #36]	@ (8011a70 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	609a      	str	r2, [r3, #8]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	3308      	adds	r3, #8
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe fe9d 	bl	8010794 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fe ff25 	bl	80108ac <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4618      	mov	r0, r3
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	0802f070 	.word	0x0802f070
 8011a70:	0802f094 	.word	0x0802f094

08011a74 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8011a74:	f1a0 0008 	sub.w	r0, r0, #8
 8011a78:	e7e0      	b.n	8011a3c <_ZN8touchgfx13PainterRGB565D1Ev>
 8011a7a:	bf00      	nop

08011a7c <_ZN8touchgfx13PainterRGB565D0Ev>:
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7ff ffd9 	bl	8011a3c <_ZN8touchgfx13PainterRGB565D1Ev>
 8011a8a:	2114      	movs	r1, #20
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f019 ffe8 	bl	802ba62 <_ZdlPvj>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4618      	mov	r0, r3
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8011a9c:	f1a0 0008 	sub.w	r0, r0, #8
 8011aa0:	e7ec      	b.n	8011a7c <_ZN8touchgfx13PainterRGB565D0Ev>
	...

08011aa4 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev>:
class GraphElementVerticalGapLine : public AbstractGraphElementNoCWR
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	4a05      	ldr	r2, [pc, #20]	@ (8011ac4 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev+0x20>)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	601a      	str	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fe fccd 	bl	8010454 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	4618      	mov	r0, r3
 8011abe:	3708      	adds	r7, #8
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	0802f51c 	.word	0x0802f51c

08011ac8 <_ZN8touchgfx27GraphElementVerticalGapLineD0Ev>:
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7ff ffe7 	bl	8011aa4 <_ZN8touchgfx27GraphElementVerticalGapLineD1Ev>
 8011ad6:	2134      	movs	r1, #52	@ 0x34
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f019 ffc2 	bl	802ba62 <_ZdlPvj>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3708      	adds	r7, #8
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011ae8:	b480      	push	{r7}
 8011aea:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011aec:	4b02      	ldr	r3, [pc, #8]	@ (8011af8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr
 8011af8:	0802e95c 	.word	0x0802e95c

08011afc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011afc:	b480      	push	{r7}
 8011afe:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011b00:	2301      	movs	r3, #1
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011b0c:	b480      	push	{r7}
 8011b0e:	b085      	sub	sp, #20
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	460b      	mov	r3, r1
 8011b16:	607a      	str	r2, [r7, #4]
 8011b18:	817b      	strh	r3, [r7, #10]
        return 0;
 8011b1a:	2300      	movs	r3, #0
    }
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3714      	adds	r7, #20
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
        return 0;
 8011b30:	2300      	movs	r3, #0
    }
 8011b32:	4618      	mov	r0, r3
 8011b34:	370c      	adds	r7, #12
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr

08011b3e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8011b3e:	b480      	push	{r7}
 8011b40:	b083      	sub	sp, #12
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
        return 0;
 8011b46:	2300      	movs	r3, #0
    }
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011b54:	b480      	push	{r7}
 8011b56:	b085      	sub	sp, #20
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8011b62:	4a07      	ldr	r2, [pc, #28]	@ (8011b80 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011b68:	4a06      	ldr	r2, [pc, #24]	@ (8011b84 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011b6e:	4a06      	ldr	r2, [pc, #24]	@ (8011b88 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011b70:	88fb      	ldrh	r3, [r7, #6]
 8011b72:	8013      	strh	r3, [r2, #0]
    }
 8011b74:	bf00      	nop
 8011b76:	3714      	adds	r7, #20
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr
 8011b80:	20011f84 	.word	0x20011f84
 8011b84:	20011f8c 	.word	0x20011f8c
 8011b88:	20011f88 	.word	0x20011f88

08011b8c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011b8c:	b40e      	push	{r1, r2, r3}
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b085      	sub	sp, #20
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011b96:	f107 0320 	add.w	r3, r7, #32
 8011b9a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	69fa      	ldr	r2, [r7, #28]
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f008 ffb8 	bl	801ab18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011bac:	89fb      	ldrh	r3, [r7, #14]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3714      	adds	r7, #20
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011bb8:	b003      	add	sp, #12
 8011bba:	4770      	bx	lr

08011bbc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011bbc:	b40c      	push	{r2, r3}
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011bca:	f107 031c 	add.w	r3, r7, #28
 8011bce:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011bd0:	78f9      	ldrb	r1, [r7, #3]
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f008 ff9e 	bl	801ab18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011be0:	89fb      	ldrh	r3, [r7, #14]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011bec:	b002      	add	sp, #8
 8011bee:	4770      	bx	lr

08011bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b08a      	sub	sp, #40	@ 0x28
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d016      	beq.n	8011c32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	3322      	adds	r3, #34	@ 0x22
 8011c08:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0c:	8adb      	ldrh	r3, [r3, #22]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d105      	bne.n	8011c1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8011c12:	4b43      	ldr	r3, [pc, #268]	@ (8011d20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011c14:	4a43      	ldr	r2, [pc, #268]	@ (8011d24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011c16:	21c5      	movs	r1, #197	@ 0xc5
 8011c18:	4843      	ldr	r0, [pc, #268]	@ (8011d28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011c1a:	f019 ff4f 	bl	802babc <__assert_func>
            return buffer[pos];
 8011c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c20:	8a9b      	ldrh	r3, [r3, #20]
 8011c22:	461a      	mov	r2, r3
 8011c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d001      	beq.n	8011c32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	e000      	b.n	8011c34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011c32:	2300      	movs	r3, #0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d06a      	beq.n	8011d0e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f00a fb0a 	bl	801c252 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	3322      	adds	r3, #34	@ 0x22
 8011c42:	623b      	str	r3, [r7, #32]
 8011c44:	2301      	movs	r3, #1
 8011c46:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	8adb      	ldrh	r3, [r3, #22]
 8011c4c:	8bfa      	ldrh	r2, [r7, #30]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d305      	bcc.n	8011c5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011c52:	4b36      	ldr	r3, [pc, #216]	@ (8011d2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011c54:	4a36      	ldr	r2, [pc, #216]	@ (8011d30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011c56:	21cb      	movs	r1, #203	@ 0xcb
 8011c58:	4833      	ldr	r0, [pc, #204]	@ (8011d28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011c5a:	f019 ff2f 	bl	802babc <__assert_func>
            const uint16_t index = pos + offset;
 8011c5e:	6a3b      	ldr	r3, [r7, #32]
 8011c60:	8a9a      	ldrh	r2, [r3, #20]
 8011c62:	8bfb      	ldrh	r3, [r7, #30]
 8011c64:	4413      	add	r3, r2
 8011c66:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011c68:	8bbb      	ldrh	r3, [r7, #28]
 8011c6a:	2b09      	cmp	r3, #9
 8011c6c:	d801      	bhi.n	8011c72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8011c6e:	8bbb      	ldrh	r3, [r7, #28]
 8011c70:	e001      	b.n	8011c76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011c72:	8bbb      	ldrh	r3, [r7, #28]
 8011c74:	3b0a      	subs	r3, #10
 8011c76:	6a3a      	ldr	r2, [r7, #32]
 8011c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c7c:	f640 123f 	movw	r2, #2367	@ 0x93f
 8011c80:	4293      	cmp	r3, r2
 8011c82:	bf0c      	ite	eq
 8011c84:	2301      	moveq	r3, #1
 8011c86:	2300      	movne	r3, #0
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d03f      	beq.n	8011d0e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	3322      	adds	r3, #34	@ 0x22
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	3222      	adds	r2, #34	@ 0x22
 8011c96:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011c98:	68ba      	ldr	r2, [r7, #8]
 8011c9a:	8ad2      	ldrh	r2, [r2, #22]
 8011c9c:	2a00      	cmp	r2, #0
 8011c9e:	d105      	bne.n	8011cac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8011d20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011ca2:	4a20      	ldr	r2, [pc, #128]	@ (8011d24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011ca4:	21c5      	movs	r1, #197	@ 0xc5
 8011ca6:	4820      	ldr	r0, [pc, #128]	@ (8011d28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011ca8:	f019 ff08 	bl	802babc <__assert_func>
            return buffer[pos];
 8011cac:	68ba      	ldr	r2, [r7, #8]
 8011cae:	8a92      	ldrh	r2, [r2, #20]
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011cb8:	613b      	str	r3, [r7, #16]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	8adb      	ldrh	r3, [r3, #22]
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d806      	bhi.n	8011cd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8011d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8011d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011cca:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8011cce:	4816      	ldr	r0, [pc, #88]	@ (8011d28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011cd0:	f019 fef4 	bl	802babc <__assert_func>
            const uint16_t index = pos + 1;
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	8a9b      	ldrh	r3, [r3, #20]
 8011cd8:	3301      	adds	r3, #1
 8011cda:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011cdc:	89bb      	ldrh	r3, [r7, #12]
 8011cde:	2b09      	cmp	r3, #9
 8011ce0:	d801      	bhi.n	8011ce6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011ce2:	89bb      	ldrh	r3, [r7, #12]
 8011ce4:	e000      	b.n	8011ce8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	693a      	ldr	r2, [r7, #16]
 8011cea:	89f9      	ldrh	r1, [r7, #14]
 8011cec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011cf0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	3322      	adds	r3, #34	@ 0x22
 8011cf6:	61bb      	str	r3, [r7, #24]
 8011cf8:	f640 133f 	movw	r3, #2367	@ 0x93f
 8011cfc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011cfe:	69bb      	ldr	r3, [r7, #24]
 8011d00:	8a9b      	ldrh	r3, [r3, #20]
 8011d02:	4619      	mov	r1, r3
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	8afa      	ldrh	r2, [r7, #22]
 8011d08:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011d0c:	bf00      	nop
        }
    }
    return getNextChar();
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f00a f9a2 	bl	801c058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011d14:	4603      	mov	r3, r0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3728      	adds	r7, #40	@ 0x28
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	0802d35c 	.word	0x0802d35c
 8011d24:	0802d368 	.word	0x0802d368
 8011d28:	0802d414 	.word	0x0802d414
 8011d2c:	0802d45c 	.word	0x0802d45c
 8011d30:	0802d46c 	.word	0x0802d46c
 8011d34:	0802d540 	.word	0x0802d540
 8011d38:	0802d54c 	.word	0x0802d54c

08011d3c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f00a f94e 	bl	801bfe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011d4a:	bf00      	nop
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8011d52:	b580      	push	{r7, lr}
 8011d54:	b088      	sub	sp, #32
 8011d56:	af02      	add	r7, sp, #8
 8011d58:	60f8      	str	r0, [r7, #12]
 8011d5a:	1d38      	adds	r0, r7, #4
 8011d5c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011d60:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8011d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011d66:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011d68:	1d39      	adds	r1, r7, #4
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	9301      	str	r3, [sp, #4]
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	6a3b      	ldr	r3, [r7, #32]
 8011d74:	683a      	ldr	r2, [r7, #0]
 8011d76:	68f8      	ldr	r0, [r7, #12]
 8011d78:	f007 fb70 	bl	801945c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8011d7c:	bf00      	nop
 8011d7e:	3718      	adds	r7, #24
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011d84:	b590      	push	{r4, r7, lr}
 8011d86:	b085      	sub	sp, #20
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011d92:	88fb      	ldrh	r3, [r7, #6]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d127      	bne.n	8011de8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011d98:	88fb      	ldrh	r3, [r7, #6]
 8011d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8011e14 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d016      	beq.n	8011dd2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011da4:	88fb      	ldrh	r3, [r7, #6]
 8011da6:	4a1b      	ldr	r2, [pc, #108]	@ (8011e14 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011dac:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	68ba      	ldr	r2, [r7, #8]
 8011db4:	4413      	add	r3, r2
 8011db6:	4a18      	ldr	r2, [pc, #96]	@ (8011e18 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011db8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	4a16      	ldr	r2, [pc, #88]	@ (8011e1c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011dc4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	4413      	add	r3, r2
 8011dce:	60fb      	str	r3, [r7, #12]
 8011dd0:	e00a      	b.n	8011de8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011dd2:	4b11      	ldr	r3, [pc, #68]	@ (8011e18 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011dd4:	4a12      	ldr	r2, [pc, #72]	@ (8011e20 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011dd6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011dd8:	4a12      	ldr	r2, [pc, #72]	@ (8011e24 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011dda:	4b10      	ldr	r3, [pc, #64]	@ (8011e1c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011ddc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011dde:	88fb      	ldrh	r3, [r7, #6]
 8011de0:	4a11      	ldr	r2, [pc, #68]	@ (8011e28 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011de6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d00d      	beq.n	8011e0a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011dee:	4a0f      	ldr	r2, [pc, #60]	@ (8011e2c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011df0:	88fb      	ldrh	r3, [r7, #6]
 8011df2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011df4:	f000 f83e 	bl	8011e74 <_ZN17TypedTextDatabase8getFontsEv>
 8011df8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011dfa:	f000 f833 	bl	8011e64 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	461a      	mov	r2, r3
 8011e02:	4621      	mov	r1, r4
 8011e04:	68f8      	ldr	r0, [r7, #12]
 8011e06:	f7ff fea5 	bl	8011b54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011e0a:	bf00      	nop
 8011e0c:	3714      	adds	r7, #20
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd90      	pop	{r4, r7, pc}
 8011e12:	bf00      	nop
 8011e14:	2000d660 	.word	0x2000d660
 8011e18:	2000d668 	.word	0x2000d668
 8011e1c:	2000d66c 	.word	0x2000d66c
 8011e20:	0803a0a0 	.word	0x0803a0a0
 8011e24:	0803a088 	.word	0x0803a088
 8011e28:	0803a0e4 	.word	0x0803a0e4
 8011e2c:	2000d664 	.word	0x2000d664

08011e30 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011e30:	b480      	push	{r7}
 8011e32:	b083      	sub	sp, #12
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	460b      	mov	r3, r1
 8011e3a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011e3c:	4b07      	ldr	r3, [pc, #28]	@ (8011e5c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	4b07      	ldr	r3, [pc, #28]	@ (8011e60 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011e42:	6819      	ldr	r1, [r3, #0]
 8011e44:	887b      	ldrh	r3, [r7, #2]
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	440b      	add	r3, r1
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	005b      	lsls	r3, r3, #1
 8011e4e:	4413      	add	r3, r2
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	370c      	adds	r7, #12
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr
 8011e5c:	2000d668 	.word	0x2000d668
 8011e60:	2000d66c 	.word	0x2000d66c

08011e64 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011e64:	b480      	push	{r7}
 8011e66:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011e68:	2306      	movs	r3, #6
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011e74:	b480      	push	{r7}
 8011e76:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011e78:	4b02      	ldr	r3, [pc, #8]	@ (8011e84 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr
 8011e84:	2000d670 	.word	0x2000d670

08011e88 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d113      	bne.n	8011ec0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d10e      	bne.n	8011ec0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8011ea2:	f7fb fbc7 	bl	800d634 <_Z23getFont_verdana_20_4bppv>
 8011ea6:	4603      	mov	r3, r0
};
 8011ea8:	4a07      	ldr	r2, [pc, #28]	@ (8011ec8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011eaa:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011eac:	f7fb fc1a 	bl	800d6e4 <_Z23getFont_verdana_40_4bppv>
 8011eb0:	4603      	mov	r3, r0
};
 8011eb2:	4a05      	ldr	r2, [pc, #20]	@ (8011ec8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011eb4:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011eb6:	f7fb fb65 	bl	800d584 <_Z23getFont_verdana_10_4bppv>
 8011eba:	4603      	mov	r3, r0
};
 8011ebc:	4a02      	ldr	r2, [pc, #8]	@ (8011ec8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011ebe:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8011ec0:	bf00      	nop
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	2000d670 	.word	0x2000d670

08011ecc <_GLOBAL__sub_I_touchgfx_fonts>:
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011ed4:	2001      	movs	r0, #1
 8011ed6:	f7ff ffd7 	bl	8011e88 <_Z41__static_initialization_and_destruction_0ii>
 8011eda:	bd80      	pop	{r7, pc}

08011edc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	4a05      	ldr	r2, [pc, #20]	@ (8011efc <_ZN19FrontendApplicationD1Ev+0x20>)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	601a      	str	r2, [r3, #0]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7fb fe57 	bl	800dba0 <_ZN23FrontendApplicationBaseD1Ev>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3708      	adds	r7, #8
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	0802e9dc 	.word	0x0802e9dc

08011f00 <_ZN19FrontendApplicationD0Ev>:
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff ffe7 	bl	8011edc <_ZN19FrontendApplicationD1Ev>
 8011f0e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f019 fda5 	bl	802ba62 <_ZdlPvj>
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3708      	adds	r7, #8
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011f22:	b580      	push	{r7, lr}
 8011f24:	b082      	sub	sp, #8
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8011f30:	4618      	mov	r0, r3
 8011f32:	f000 f82d 	bl	8011f90 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f007 ff23 	bl	8019d84 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011f3e:	bf00      	nop
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
	...

08011f48 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	60f8      	str	r0, [r7, #12]
 8011f50:	60b9      	str	r1, [r7, #8]
 8011f52:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	68b9      	ldr	r1, [r7, #8]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fb fe70 	bl	800dc40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011f60:	4a03      	ldr	r2, [pc, #12]	@ (8011f70 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	601a      	str	r2, [r3, #0]
{

}
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3710      	adds	r7, #16
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	0802e9dc 	.word	0x0802e9dc

08011f74 <_ZN5ModelC1Ev>:
	#include "main.h"
	//#include "app_freertos.h"
	#include "modules.h"
}
#endif
Model::Model() : modelListener(0)
 8011f74:	b480      	push	{r7}
 8011f76:	b083      	sub	sp, #12
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	601a      	str	r2, [r3, #0]
{

}
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4618      	mov	r0, r3
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr

08011f90 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	modelListener->updateTemp(0);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681a      	ldr	r2, [r3, #0]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2100      	movs	r1, #0
 8011fa8:	4610      	mov	r0, r2
 8011faa:	4798      	blx	r3
	int ret = ADC1_IN15_ReadDataFromQueue();
 8011fac:	f7ef f940 	bl	8001230 <ADC1_IN15_ReadDataFromQueue>
 8011fb0:	60f8      	str	r0, [r7, #12]
	if(ret != -1)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb8:	d009      	beq.n	8011fce <_ZN5Model4tickEv+0x3e>
	{

		modelListener->updateVolt(ret);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	330c      	adds	r3, #12
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	68f9      	ldr	r1, [r7, #12]
 8011fca:	4610      	mov	r0, r2
 8011fcc:	4798      	blx	r3
	}

	//modelListener->updateTemp(0);
#endif

}
 8011fce:	bf00      	nop
 8011fd0:	3710      	adds	r7, #16
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}

08011fd6 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011fd6:	b480      	push	{r7}
 8011fd8:	b083      	sub	sp, #12
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
    {
    }
 8011fde:	bf00      	nop
 8011fe0:	370c      	adds	r7, #12
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr

08011fea <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011fea:	b480      	push	{r7}
 8011fec:	b083      	sub	sp, #12
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
    {
    }
 8011ff2:	bf00      	nop
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
	...

08012000 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
    {
 8012008:	4a04      	ldr	r2, [pc, #16]	@ (801201c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	601a      	str	r2, [r3, #0]
    }
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	4618      	mov	r0, r3
 8012012:	370c      	adds	r7, #12
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr
 801201c:	0802ea80 	.word	0x0802ea80

08012020 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
    }
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7ff ffe9 	bl	8012000 <_ZN8touchgfx9PresenterD1Ev>
 801202e:	2104      	movs	r1, #4
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f019 fd16 	bl	802ba62 <_ZdlPvj>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4618      	mov	r0, r3
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
    {
 8012048:	4a04      	ldr	r2, [pc, #16]	@ (801205c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	601a      	str	r2, [r3, #0]
    }
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4618      	mov	r0, r3
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	0802ea80 	.word	0x0802ea80

08012060 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012060:	b480      	push	{r7}
 8012062:	b083      	sub	sp, #12
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	4a06      	ldr	r2, [pc, #24]	@ (8012084 <_ZN13ModelListenerC1Ev+0x24>)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	601a      	str	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2200      	movs	r2, #0
 8012072:	605a      	str	r2, [r3, #4]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	4618      	mov	r0, r3
 8012078:	370c      	adds	r7, #12
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop
 8012084:	0802ea68 	.word	0x0802ea68

08012088 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	4a04      	ldr	r2, [pc, #16]	@ (80120a4 <_ZN13ModelListenerD1Ev+0x1c>)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	601a      	str	r2, [r3, #0]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	4618      	mov	r0, r3
 801209a:	370c      	adds	r7, #12
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	0802ea68 	.word	0x0802ea68

080120a8 <_ZN13ModelListenerD0Ev>:
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f7ff ffe9 	bl	8012088 <_ZN13ModelListenerD1Ev>
 80120b6:	2108      	movs	r1, #8
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f019 fcd2 	bl	802ba62 <_ZdlPvj>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <_ZN13ModelListener10updateTempEj>:
    virtual void updateTemp(unsigned int val){}
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
 80120d2:	bf00      	nop
 80120d4:	370c      	adds	r7, #12
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <_ZN13ModelListener10updateVoltEj>:
    virtual void updateVolt(unsigned int val){}
 80120de:	b480      	push	{r7}
 80120e0:	b083      	sub	sp, #12
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
 80120e6:	6039      	str	r1, [r7, #0]
 80120e8:	bf00      	nop
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr

080120f4 <_ZN16Screen1PresenterD1Ev>:
    virtual void deactivate();
    virtual void updateTemp(unsigned int val);
    virtual void updateVolt(unsigned int val);


    virtual ~Screen1Presenter() {}
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	4a09      	ldr	r2, [pc, #36]	@ (8012124 <_ZN16Screen1PresenterD1Ev+0x30>)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	601a      	str	r2, [r3, #0]
 8012102:	4a09      	ldr	r2, [pc, #36]	@ (8012128 <_ZN16Screen1PresenterD1Ev+0x34>)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	605a      	str	r2, [r3, #4]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	3304      	adds	r3, #4
 801210c:	4618      	mov	r0, r3
 801210e:	f7ff ffbb 	bl	8012088 <_ZN13ModelListenerD1Ev>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4618      	mov	r0, r3
 8012116:	f7ff ff73 	bl	8012000 <_ZN8touchgfx9PresenterD1Ev>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	4618      	mov	r0, r3
 801211e:	3708      	adds	r7, #8
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	0802ea30 	.word	0x0802ea30
 8012128:	0802ea50 	.word	0x0802ea50

0801212c <_ZThn4_N16Screen1PresenterD1Ev>:
 801212c:	f1a0 0004 	sub.w	r0, r0, #4
 8012130:	e7e0      	b.n	80120f4 <_ZN16Screen1PresenterD1Ev>
 8012132:	bf00      	nop

08012134 <_ZN16Screen1PresenterD0Ev>:
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f7ff ffd9 	bl	80120f4 <_ZN16Screen1PresenterD1Ev>
 8012142:	2110      	movs	r1, #16
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f019 fc8c 	bl	802ba62 <_ZdlPvj>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4618      	mov	r0, r3
 801214e:	3708      	adds	r7, #8
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <_ZThn4_N16Screen1PresenterD0Ev>:
 8012154:	f1a0 0004 	sub.w	r0, r0, #4
 8012158:	e7ec      	b.n	8012134 <_ZN16Screen1PresenterD0Ev>
	...

0801215c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
    : view(v)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	f7ff ff69 	bl	8012040 <_ZN8touchgfx9PresenterC1Ev>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	3304      	adds	r3, #4
 8012172:	4618      	mov	r0, r3
 8012174:	f7ff ff74 	bl	8012060 <_ZN13ModelListenerC1Ev>
 8012178:	4a06      	ldr	r2, [pc, #24]	@ (8012194 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	601a      	str	r2, [r3, #0]
 801217e:	4a06      	ldr	r2, [pc, #24]	@ (8012198 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	605a      	str	r2, [r3, #4]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	683a      	ldr	r2, [r7, #0]
 8012188:	60da      	str	r2, [r3, #12]
{

}
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	4618      	mov	r0, r3
 801218e:	3708      	adds	r7, #8
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	0802ea30 	.word	0x0802ea30
 8012198:	0802ea50 	.word	0x0802ea50

0801219c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]

}
 80121a4:	bf00      	nop
 80121a6:	370c      	adds	r7, #12
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr

080121b0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]

}
 80121b8:	bf00      	nop
 80121ba:	370c      	adds	r7, #12
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr

080121c4 <_ZN16Screen1Presenter10updateTempEj>:

void Screen1Presenter::updateTemp(unsigned int val)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
	view.updateTemp(val);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	68da      	ldr	r2, [r3, #12]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	332c      	adds	r3, #44	@ 0x2c
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	6839      	ldr	r1, [r7, #0]
 80121de:	4610      	mov	r0, r2
 80121e0:	4798      	blx	r3
}
 80121e2:	bf00      	nop
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <_ZThn4_N16Screen1Presenter10updateTempEj>:
    virtual void updateTemp(unsigned int val);
 80121ea:	f1a0 0004 	sub.w	r0, r0, #4
 80121ee:	f7ff bfe9 	b.w	80121c4 <_ZN16Screen1Presenter10updateTempEj>

080121f2 <_ZN16Screen1Presenter10updateVoltEj>:
void Screen1Presenter::updateVolt(unsigned int val)
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b082      	sub	sp, #8
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
 80121fa:	6039      	str	r1, [r7, #0]
	view.updateVolt(val);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	68da      	ldr	r2, [r3, #12]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	3330      	adds	r3, #48	@ 0x30
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	4610      	mov	r0, r2
 801220e:	4798      	blx	r3
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <_ZThn4_N16Screen1Presenter10updateVoltEj>:
    virtual void updateVolt(unsigned int val);
 8012218:	f1a0 0004 	sub.w	r0, r0, #4
 801221c:	f7ff bfe9 	b.w	80121f2 <_ZN16Screen1Presenter10updateVoltEj>

08012220 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	4a05      	ldr	r2, [pc, #20]	@ (8012240 <_ZN11Screen1ViewD1Ev+0x20>)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	601a      	str	r2, [r3, #0]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	f7ff fa7f 	bl	8011734 <_ZN15Screen1ViewBaseD1Ev>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	0802ea98 	.word	0x0802ea98

08012244 <_ZN11Screen1ViewD0Ev>:
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff ffe7 	bl	8012220 <_ZN11Screen1ViewD1Ev>
 8012252:	f241 5174 	movw	r1, #5492	@ 0x1574
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f019 fc03 	bl	802ba62 <_ZdlPvj>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
	...

08012268 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4618      	mov	r0, r3
 8012274:	f7fe fc00 	bl	8010a78 <_ZN15Screen1ViewBaseC1Ev>
 8012278:	4a03      	ldr	r2, [pc, #12]	@ (8012288 <_ZN11Screen1ViewC1Ev+0x20>)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	601a      	str	r2, [r3, #0]
{

}
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	4618      	mov	r0, r3
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	0802ea98 	.word	0x0802ea98

0801228c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	4618      	mov	r0, r3
 8012298:	f7ff fabb 	bl	8011812 <_ZN15Screen1ViewBase11setupScreenEv>
}
 801229c:	bf00      	nop
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fc fa4c 	bl	800e74c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80122b4:	bf00      	nop
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <_ZN11Screen1View10updateTempEj>:

void Screen1View::updateTemp(unsigned int val)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]

	//Unicode::snprintf(textAreaTempBuffer,TEXTAREATEMP_SIZE, "%d", val);

	//textAreaTemp.invalidate();
	//remove(dynamicGraph1);
}
 80122c6:	bf00      	nop
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr
	...

080122d4 <_ZN11Screen1View10updateVoltEj>:
//static int point_count = 0;
void Screen1View::updateVolt(unsigned int val)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b08c      	sub	sp, #48	@ 0x30
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]

	//update ui.
	memset((void*)textAreaVoltBuffer, 0, TEXTAREAVOLT_SIZE*2);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f503 63eb 	add.w	r3, r3, #1880	@ 0x758
 80122e4:	220a      	movs	r2, #10
 80122e6:	2100      	movs	r1, #0
 80122e8:	4618      	mov	r0, r3
 80122ea:	f019 fdee 	bl	802beca <memset>
	Unicode::snprintf(textAreaVoltBuffer,TEXTAREAVOLT_SIZE, "%d", val);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f503 60eb 	add.w	r0, r3, #1880	@ 0x758
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	4a49      	ldr	r2, [pc, #292]	@ (801241c <_ZN11Screen1View10updateVoltEj+0x148>)
 80122f8:	2105      	movs	r1, #5
 80122fa:	f00a fd52 	bl	801cda2 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaVolt.invalidate();
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	33c4      	adds	r3, #196	@ 0xc4
 8012302:	4618      	mov	r0, r3
 8012304:	f008 fd32 	bl	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
	//3300 - 100
	//val - x
	if(count_point++ == dynamicGraph1.getMaxCapacity())
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801230e:	f9b3 3572 	ldrsh.w	r3, [r3, #1394]	@ 0x572
 8012312:	b29a      	uxth	r2, r3
 8012314:	3201      	adds	r2, #1
 8012316:	b292      	uxth	r2, r2
 8012318:	b211      	sxth	r1, r2
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012320:	f8a2 1572 	strh.w	r1, [r2, #1394]	@ 0x572
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	f502 7288 	add.w	r2, r2, #272	@ 0x110
 801232a:	62ba      	str	r2, [r7, #40]	@ 0x28
        return maxCapacity;
 801232c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801232e:	f9b2 211c 	ldrsh.w	r2, [r2, #284]	@ 0x11c
 8012332:	4293      	cmp	r3, r2
 8012334:	bf0c      	ite	eq
 8012336:	2301      	moveq	r3, #1
 8012338:	2300      	movne	r3, #0
 801233a:	b2db      	uxtb	r3, r3
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00b      	beq.n	8012358 <_ZN11Screen1View10updateVoltEj+0x84>
	{
		count_point = 0;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012346:	2200      	movs	r2, #0
 8012348:	f8a3 2572 	strh.w	r2, [r3, #1394]	@ 0x572
		dynamicGraph1.clear();
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8012352:	4618      	mov	r0, r3
 8012354:	f004 fc8b 	bl	8016c6e <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>
	}
	float gval = ((float)val)/1000; //in V
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	ee07 3a90 	vmov	s15, r3
 801235e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012362:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8012420 <_ZN11Screen1View10updateVoltEj+0x14c>
 8012366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801236a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	dynamicGraph1.addDataPoint(gval);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8012374:	627b      	str	r3, [r7, #36]	@ 0x24
 8012376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012378:	623b      	str	r3, [r7, #32]
        return addDataPointScaled(float2scaledY(y));
 801237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237c:	61fb      	str	r3, [r7, #28]
 801237e:	6a3b      	ldr	r3, [r7, #32]
 8012380:	61bb      	str	r3, [r7, #24]
        return float2scaled(f, yScale);
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012386:	69ba      	ldr	r2, [r7, #24]
 8012388:	617a      	str	r2, [r7, #20]
 801238a:	613b      	str	r3, [r7, #16]
        const float fs = f * (float)scale;
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	ee07 3a90 	vmov	s15, r3
 8012392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012396:	ed97 7a05 	vldr	s14, [r7, #20]
 801239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801239e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 80123a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80123a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80123aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ae:	db0a      	blt.n	80123c6 <_ZN11Screen1View10updateVoltEj+0xf2>
            return (int)(fs + 0.5f);
 80123b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80123b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80123b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123c0:	ee17 3a90 	vmov	r3, s15
 80123c4:	e019      	b.n	80123fa <_ZN11Screen1View10updateVoltEj+0x126>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80123c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80123ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123ce:	ee17 3a90 	vmov	r3, s15
 80123d2:	3b01      	subs	r3, #1
 80123d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80123d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80123e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123e8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80123ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123f4:	ee17 2a90 	vmov	r2, s15
 80123f8:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 80123fa:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 80123fc:	4619      	mov	r1, r3
 80123fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012400:	f003 ff0c 	bl	801621c <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8012404:	bf00      	nop
	dynamicGraph1.invalidate();
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801240c:	4618      	mov	r0, r3
 801240e:	f008 fcad 	bl	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
	//add(dynamicGraph1);
}
 8012412:	bf00      	nop
 8012414:	3730      	adds	r7, #48	@ 0x30
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	0802d600 	.word	0x0802d600
 8012420:	447a0000 	.word	0x447a0000

08012424 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8012424:	b480      	push	{r7}
 8012426:	b083      	sub	sp, #12
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
    {
 801242c:	4a04      	ldr	r2, [pc, #16]	@ (8012440 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	601a      	str	r2, [r3, #0]
    }
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	4618      	mov	r0, r3
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	0802eaec 	.word	0x0802eaec

08012444 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
    }
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f7ff ffe9 	bl	8012424 <_ZN8touchgfx15TouchControllerD1Ev>
 8012452:	2104      	movs	r1, #4
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f019 fb04 	bl	802ba62 <_ZdlPvj>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	4618      	mov	r0, r3
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012464:	b480      	push	{r7}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 801246c:	bf00      	nop
 801246e:	370c      	adds	r7, #12
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr

08012478 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012478:	b480      	push	{r7}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8012484:	2300      	movs	r3, #0
}
 8012486:	4618      	mov	r0, r3
 8012488:	3714      	adds	r7, #20
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr
	...

08012494 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	4a05      	ldr	r2, [pc, #20]	@ (80124b4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	601a      	str	r2, [r3, #0]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7ff ffbd 	bl	8012424 <_ZN8touchgfx15TouchControllerD1Ev>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4618      	mov	r0, r3
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	0802ead4 	.word	0x0802ead4

080124b8 <_ZN20STM32TouchControllerD0Ev>:
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ff ffe7 	bl	8012494 <_ZN20STM32TouchControllerD1Ev>
 80124c6:	2104      	movs	r1, #4
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f019 faca 	bl	802ba62 <_ZdlPvj>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	4618      	mov	r0, r3
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 80124d8:	b480      	push	{r7}
 80124da:	af00      	add	r7, sp, #0

}
 80124dc:	bf00      	nop
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr
	...

080124e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	4603      	mov	r3, r0
 80124f0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80124f2:	79fb      	ldrb	r3, [r7, #7]
 80124f4:	2b03      	cmp	r3, #3
 80124f6:	d80c      	bhi.n	8012512 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80124f8:	a201      	add	r2, pc, #4	@ (adr r2, 8012500 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80124fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124fe:	bf00      	nop
 8012500:	08012511 	.word	0x08012511
 8012504:	08012511 	.word	0x08012511
 8012508:	08012511 	.word	0x08012511
 801250c:	08012511 	.word	0x08012511
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8012510:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8012512:	bf00      	nop
 8012514:	370c      	adds	r7, #12
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop

08012520 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012520:	b480      	push	{r7}
 8012522:	b083      	sub	sp, #12
 8012524:	af00      	add	r7, sp, #0
 8012526:	4603      	mov	r3, r0
 8012528:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801252a:	79fb      	ldrb	r3, [r7, #7]
 801252c:	2b03      	cmp	r3, #3
 801252e:	d80c      	bhi.n	801254a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8012530:	a201      	add	r2, pc, #4	@ (adr r2, 8012538 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8012532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012536:	bf00      	nop
 8012538:	08012549 	.word	0x08012549
 801253c:	08012549 	.word	0x08012549
 8012540:	08012549 	.word	0x08012549
 8012544:	08012549 	.word	0x08012549
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8012548:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801254a:	bf00      	nop
 801254c:	370c      	adds	r7, #12
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr
 8012556:	bf00      	nop

08012558 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8012558:	b480      	push	{r7}
 801255a:	b083      	sub	sp, #12
 801255c:	af00      	add	r7, sp, #0
 801255e:	4603      	mov	r3, r0
 8012560:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8012562:	79fb      	ldrb	r3, [r7, #7]
 8012564:	2b03      	cmp	r3, #3
 8012566:	d80c      	bhi.n	8012582 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8012568:	a201      	add	r2, pc, #4	@ (adr r2, 8012570 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801256e:	bf00      	nop
 8012570:	08012581 	.word	0x08012581
 8012574:	08012581 	.word	0x08012581
 8012578:	08012581 	.word	0x08012581
 801257c:	08012581 	.word	0x08012581
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8012580:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8012582:	bf00      	nop
 8012584:	370c      	adds	r7, #12
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop

08012590 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
    {
 8012598:	4a04      	ldr	r2, [pc, #16]	@ (80125ac <_ZN8touchgfx3HALD1Ev+0x1c>)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	601a      	str	r2, [r3, #0]
    }
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4618      	mov	r0, r3
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	0802ef24 	.word	0x0802ef24

080125b0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
    }
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7ff ffe9 	bl	8012590 <_ZN8touchgfx3HALD1Ev>
 80125be:	217c      	movs	r1, #124	@ 0x7c
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f019 fa4e 	bl	802ba62 <_ZdlPvj>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4618      	mov	r0, r3
 80125ca:	3708      	adds	r7, #8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	460b      	mov	r3, r1
 80125da:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	78fa      	ldrb	r2, [r7, #3]
 80125e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2201      	movs	r2, #1
 80125e8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 80125ec:	bf00      	nop
 80125ee:	370c      	adds	r7, #12
 80125f0:	46bd      	mov	sp, r7
 80125f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f6:	4770      	bx	lr

080125f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	460b      	mov	r3, r1
 8012602:	807b      	strh	r3, [r7, #2]
 8012604:	4613      	mov	r3, r2
 8012606:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8012608:	4b0c      	ldr	r3, [pc, #48]	@ (801263c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	887a      	ldrh	r2, [r7, #2]
 801260e:	429a      	cmp	r2, r3
 8012610:	d304      	bcc.n	801261c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8012612:	4b0b      	ldr	r3, [pc, #44]	@ (8012640 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8012614:	881b      	ldrh	r3, [r3, #0]
 8012616:	883a      	ldrh	r2, [r7, #0]
 8012618:	429a      	cmp	r2, r3
 801261a:	d205      	bcs.n	8012628 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 801261c:	4b09      	ldr	r3, [pc, #36]	@ (8012644 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801261e:	4a0a      	ldr	r2, [pc, #40]	@ (8012648 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8012620:	219e      	movs	r1, #158	@ 0x9e
 8012622:	480a      	ldr	r0, [pc, #40]	@ (801264c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8012624:	f019 fa4a 	bl	802babc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8012628:	4a09      	ldr	r2, [pc, #36]	@ (8012650 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 801262a:	887b      	ldrh	r3, [r7, #2]
 801262c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 801262e:	4a09      	ldr	r2, [pc, #36]	@ (8012654 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8012630:	883b      	ldrh	r3, [r7, #0]
 8012632:	8013      	strh	r3, [r2, #0]
    }
 8012634:	bf00      	nop
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	20011f20 	.word	0x20011f20
 8012640:	20011f22 	.word	0x20011f22
 8012644:	0802d604 	.word	0x0802d604
 8012648:	0802d668 	.word	0x0802d668
 801264c:	0802d6ac 	.word	0x0802d6ac
 8012650:	20011f26 	.word	0x20011f26
 8012654:	20011f28 	.word	0x20011f28

08012658 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8012666:	2b00      	cmp	r3, #0
 8012668:	d009      	beq.n	801267e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	685a      	ldr	r2, [r3, #4]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4610      	mov	r0, r2
 8012678:	4798      	blx	r3
 801267a:	4603      	mov	r3, r0
 801267c:	e000      	b.n	8012680 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 801267e:	2300      	movs	r3, #0
    }
 8012680:	4618      	mov	r0, r3
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f002 ff69 	bl	8015568 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	33ac      	adds	r3, #172	@ 0xac
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	4798      	blx	r3
    }
 80126a2:	bf00      	nop
 80126a4:	3708      	adds	r7, #8
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}

080126aa <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80126aa:	b480      	push	{r7}
 80126ac:	b083      	sub	sp, #12
 80126ae:	af00      	add	r7, sp, #0
 80126b0:	6078      	str	r0, [r7, #4]
 80126b2:	6039      	str	r1, [r7, #0]
        return false;
 80126b4:	2300      	movs	r3, #0
    }
 80126b6:	4618      	mov	r0, r3
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr
	...

080126c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
 80126d0:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d106      	bne.n	80126e6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80126d8:	4b0f      	ldr	r3, [pc, #60]	@ (8012718 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80126da:	4a10      	ldr	r2, [pc, #64]	@ (801271c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80126dc:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80126e0:	480f      	ldr	r0, [pc, #60]	@ (8012720 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80126e2:	f019 f9eb 	bl	802babc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	68ba      	ldr	r2, [r7, #8]
 80126ea:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	bf14      	ite	ne
 80126f8:	2301      	movne	r3, #1
 80126fa:	2300      	moveq	r3, #0
 80126fc:	b2da      	uxtb	r2, r3
 80126fe:	4b09      	ldr	r3, [pc, #36]	@ (8012724 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012700:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	338c      	adds	r3, #140	@ 0x8c
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6839      	ldr	r1, [r7, #0]
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	4798      	blx	r3
    }
 8012710:	bf00      	nop
 8012712:	3710      	adds	r7, #16
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	0802d6f0 	.word	0x0802d6f0
 801271c:	0802d728 	.word	0x0802d728
 8012720:	0802d6ac 	.word	0x0802d6ac
 8012724:	20011f2a 	.word	0x20011f2a

08012728 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8012728:	b480      	push	{r7}
 801272a:	b083      	sub	sp, #12
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	683a      	ldr	r2, [r7, #0]
 8012736:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	2b00      	cmp	r3, #0
 801273c:	bf14      	ite	ne
 801273e:	2301      	movne	r3, #1
 8012740:	2300      	moveq	r3, #0
 8012742:	b2da      	uxtb	r2, r3
 8012744:	4b03      	ldr	r3, [pc, #12]	@ (8012754 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8012746:	701a      	strb	r2, [r3, #0]
    }
 8012748:	bf00      	nop
 801274a:	370c      	adds	r7, #12
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr
 8012754:	20011f2b 	.word	0x20011f2b

08012758 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 8012758:	b480      	push	{r7}
 801275a:	b083      	sub	sp, #12
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
        return 0;
 8012760:	2300      	movs	r3, #0
    }
 8012762:	4618      	mov	r0, r3
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr

0801276e <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 801276e:	b580      	push	{r7, lr}
 8012770:	b082      	sub	sp, #8
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
 8012776:	460b      	mov	r3, r1
 8012778:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801277e:	2b00      	cmp	r3, #0
 8012780:	d004      	beq.n	801278c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012786:	887a      	ldrh	r2, [r7, #2]
 8012788:	4610      	mov	r0, r2
 801278a:	4798      	blx	r3
    }
 801278c:	bf00      	nop
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 801279c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 80127a0:	4618      	mov	r0, r3
 80127a2:	370c      	adds	r7, #12
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr

080127ac <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	685a      	ldr	r2, [r3, #4]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	3318      	adds	r3, #24
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	4610      	mov	r0, r2
 80127c4:	4798      	blx	r3
 80127c6:	4603      	mov	r3, r0
    }
 80127c8:	4618      	mov	r0, r3
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80127d0:	b480      	push	{r7}
 80127d2:	b085      	sub	sp, #20
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d011      	beq.n	801280c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80127e8:	4b14      	ldr	r3, [pc, #80]	@ (801283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d11e      	bne.n	801282e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80127f0:	4b13      	ldr	r3, [pc, #76]	@ (8012840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80127f2:	881b      	ldrh	r3, [r3, #0]
 80127f4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80127f6:	4b13      	ldr	r3, [pc, #76]	@ (8012844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80127f8:	881a      	ldrh	r2, [r3, #0]
 80127fa:	4b11      	ldr	r3, [pc, #68]	@ (8012840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80127fc:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80127fe:	4a11      	ldr	r2, [pc, #68]	@ (8012844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012800:	89bb      	ldrh	r3, [r7, #12]
 8012802:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8012804:	4b0d      	ldr	r3, [pc, #52]	@ (801283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012806:	2201      	movs	r2, #1
 8012808:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801280a:	e010      	b.n	801282e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801280c:	4b0b      	ldr	r3, [pc, #44]	@ (801283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d00c      	beq.n	801282e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8012814:	4b0a      	ldr	r3, [pc, #40]	@ (8012840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012816:	881b      	ldrh	r3, [r3, #0]
 8012818:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801281a:	4b0a      	ldr	r3, [pc, #40]	@ (8012844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801281c:	881a      	ldrh	r2, [r3, #0]
 801281e:	4b08      	ldr	r3, [pc, #32]	@ (8012840 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012820:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8012822:	4a08      	ldr	r2, [pc, #32]	@ (8012844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012824:	89fb      	ldrh	r3, [r7, #14]
 8012826:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8012828:	4b04      	ldr	r3, [pc, #16]	@ (801283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801282a:	2200      	movs	r2, #0
 801282c:	701a      	strb	r2, [r3, #0]
    }
 801282e:	bf00      	nop
 8012830:	3714      	adds	r7, #20
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop
 801283c:	20011f24 	.word	0x20011f24
 8012840:	20011f22 	.word	0x20011f22
 8012844:	20011f20 	.word	0x20011f20

08012848 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
    {
    }
 8012850:	bf00      	nop
 8012852:	370c      	adds	r7, #12
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr

0801285c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 801285c:	b480      	push	{r7}
 801285e:	b083      	sub	sp, #12
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
    {
    }
 8012864:	bf00      	nop
 8012866:	370c      	adds	r7, #12
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr

08012870 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	4618      	mov	r0, r3
 801287c:	f002 f8d2 	bl	8014a24 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012880:	bf00      	nop
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	4a05      	ldr	r2, [pc, #20]	@ (80128a8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	601a      	str	r2, [r3, #0]
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	4618      	mov	r0, r3
 801289a:	f7ff fe79 	bl	8012590 <_ZN8touchgfx3HALD1Ev>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	4618      	mov	r0, r3
 80128a2:	3708      	adds	r7, #8
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	0802ed50 	.word	0x0802ed50

080128ac <_ZN20TouchGFXGeneratedHALD0Ev>:
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b082      	sub	sp, #8
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7ff ffe7 	bl	8012888 <_ZN20TouchGFXGeneratedHALD1Ev>
 80128ba:	217c      	movs	r1, #124	@ 0x7c
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f019 f8d0 	bl	802ba62 <_ZdlPvj>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	4618      	mov	r0, r3
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7ff ffca 	bl	8012870 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80128dc:	bf00      	nop
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <_ZN11TouchGFXHAL10initializeEv>:
 */
//#warning "A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has succesfully sent a block."
//#warning "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4618      	mov	r0, r3
 80128f0:	f001 fa40 	bl	8013d74 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80128f4:	bf00      	nop
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	4618      	mov	r0, r3
 8012908:	f001 faa4 	bl	8013e54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801290c:	4603      	mov	r3, r0
}
 801290e:	4618      	mov	r0, r3
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}

08012916 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8012916:	b580      	push	{r7, lr}
 8012918:	b082      	sub	sp, #8
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
 801291e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6839      	ldr	r1, [r7, #0]
 8012924:	4618      	mov	r0, r3
 8012926:	f001 faa0 	bl	8013e6a <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801292a:	bf00      	nop
 801292c:	3708      	adds	r7, #8
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012932:	b580      	push	{r7, lr}
 8012934:	b082      	sub	sp, #8
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
 801293a:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6839      	ldr	r1, [r7, #0]
 8012940:	4618      	mov	r0, r3
 8012942:	f001 fa9d 	bl	8013e80 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8012946:	bf00      	nop
 8012948:	3708      	adds	r7, #8
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}

0801294e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801294e:	b580      	push	{r7, lr}
 8012950:	b084      	sub	sp, #16
 8012952:	af00      	add	r7, sp, #0
 8012954:	60f8      	str	r0, [r7, #12]
 8012956:	60b9      	str	r1, [r7, #8]
 8012958:	607a      	str	r2, [r7, #4]
 801295a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 801295c:	68f8      	ldr	r0, [r7, #12]
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	68b9      	ldr	r1, [r7, #8]
 8012964:	f001 facf 	bl	8013f06 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012968:	4603      	mov	r3, r0
}
 801296a:	4618      	mov	r0, r3
 801296c:	3710      	adds	r7, #16
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b082      	sub	sp, #8
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4618      	mov	r0, r3
 801297e:	f001 fa1d 	bl	8013dbc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012982:	bf00      	nop
 8012984:	3708      	adds	r7, #8
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801298a:	b580      	push	{r7, lr}
 801298c:	b082      	sub	sp, #8
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	4618      	mov	r0, r3
 8012996:	f001 fa1b 	bl	8013dd0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801299a:	bf00      	nop
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80129a2:	b580      	push	{r7, lr}
 80129a4:	b082      	sub	sp, #8
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f001 fa19 	bl	8013de4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80129b2:	bf00      	nop
 80129b4:	3708      	adds	r7, #8
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}

080129ba <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80129ba:	b580      	push	{r7, lr}
 80129bc:	b082      	sub	sp, #8
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f001 fa17 	bl	8013df8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80129ca:	bf00      	nop
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b082      	sub	sp, #8
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	4618      	mov	r0, r3
 80129de:	f001 fa15 	bl	8013e0c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80129e2:	4603      	mov	r3, r0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3708      	adds	r7, #8
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}

080129ec <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f001 fa15 	bl	8013e26 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80129fc:	bf00      	nop
 80129fe:	3708      	adds	r7, #8
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	4a05      	ldr	r2, [pc, #20]	@ (8012a24 <_ZN11TouchGFXHALD1Ev+0x20>)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7ff ff37 	bl	8012888 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	0802eb04 	.word	0x0802eb04

08012a28 <_ZN11TouchGFXHALD0Ev>:
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7ff ffe7 	bl	8012a04 <_ZN11TouchGFXHALD1Ev>
 8012a36:	217c      	movs	r1, #124	@ 0x7c
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f019 f812 	bl	802ba62 <_ZdlPvj>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	4618      	mov	r0, r3
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	2101      	movs	r1, #1
 8012a50:	2001      	movs	r0, #1
 8012a52:	f7f7 f936 	bl	8009cc2 <osSemaphoreNew>
 8012a56:	4603      	mov	r3, r0
 8012a58:	4a0f      	ldr	r2, [pc, #60]	@ (8012a98 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012a5a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8012a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8012a98 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d105      	bne.n	8012a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8012a64:	4b0d      	ldr	r3, [pc, #52]	@ (8012a9c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8012a66:	4a0e      	ldr	r2, [pc, #56]	@ (8012aa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012a68:	2128      	movs	r1, #40	@ 0x28
 8012a6a:	480e      	ldr	r0, [pc, #56]	@ (8012aa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012a6c:	f019 f826 	bl	802babc <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8012a70:	2200      	movs	r2, #0
 8012a72:	2104      	movs	r1, #4
 8012a74:	2001      	movs	r0, #1
 8012a76:	f7f7 fa37 	bl	8009ee8 <osMessageQueueNew>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8012aa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012a7e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8012a80:	4b09      	ldr	r3, [pc, #36]	@ (8012aa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d105      	bne.n	8012a94 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8012a88:	4b08      	ldr	r3, [pc, #32]	@ (8012aac <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8012a8a:	4a05      	ldr	r2, [pc, #20]	@ (8012aa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012a8c:	212c      	movs	r1, #44	@ 0x2c
 8012a8e:	4805      	ldr	r0, [pc, #20]	@ (8012aa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012a90:	f019 f814 	bl	802babc <__assert_func>
}
 8012a94:	bf00      	nop
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	2000d67c 	.word	0x2000d67c
 8012a9c:	0802d778 	.word	0x0802d778
 8012aa0:	0802d7c4 	.word	0x0802d7c4
 8012aa4:	0802d7f4 	.word	0x0802d7f4
 8012aa8:	2000d680 	.word	0x2000d680
 8012aac:	0802d820 	.word	0x0802d820

08012ab0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8012ab4:	4b04      	ldr	r3, [pc, #16]	@ (8012ac8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7f7 f989 	bl	8009dd4 <osSemaphoreAcquire>
}
 8012ac2:	bf00      	nop
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	2000d67c 	.word	0x2000d67c

08012acc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012ad0:	4b03      	ldr	r3, [pc, #12]	@ (8012ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7f7 f9c9 	bl	8009e6c <osSemaphoreRelease>
}
 8012ada:	bf00      	nop
 8012adc:	bd80      	pop	{r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	2000d67c 	.word	0x2000d67c

08012ae4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8012ae8:	4b03      	ldr	r3, [pc, #12]	@ (8012af8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2100      	movs	r1, #0
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7f7 f970 	bl	8009dd4 <osSemaphoreAcquire>
}
 8012af4:	bf00      	nop
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	2000d67c 	.word	0x2000d67c

08012afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012b00:	4b03      	ldr	r3, [pc, #12]	@ (8012b10 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7f7 f9b1 	bl	8009e6c <osSemaphoreRelease>
}
 8012b0a:	bf00      	nop
 8012b0c:	bd80      	pop	{r7, pc}
 8012b0e:	bf00      	nop
 8012b10:	2000d67c 	.word	0x2000d67c

08012b14 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8012b18:	4b04      	ldr	r3, [pc, #16]	@ (8012b2c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8012b1a:	6818      	ldr	r0, [r3, #0]
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	2200      	movs	r2, #0
 8012b20:	4903      	ldr	r1, [pc, #12]	@ (8012b30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8012b22:	f7f7 fa53 	bl	8009fcc <osMessageQueuePut>
}
 8012b26:	bf00      	nop
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	2000d680 	.word	0x2000d680
 8012b30:	2000001c 	.word	0x2000001c

08012b34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8012b3a:	4b09      	ldr	r3, [pc, #36]	@ (8012b60 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012b3c:	6818      	ldr	r0, [r3, #0]
 8012b3e:	1d39      	adds	r1, r7, #4
 8012b40:	2300      	movs	r3, #0
 8012b42:	2200      	movs	r2, #0
 8012b44:	f7f7 fa9c 	bl	800a080 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8012b48:	4b05      	ldr	r3, [pc, #20]	@ (8012b60 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012b4a:	6818      	ldr	r0, [r3, #0]
 8012b4c:	1d39      	adds	r1, r7, #4
 8012b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b52:	2200      	movs	r2, #0
 8012b54:	f7f7 fa94 	bl	800a080 <osMessageQueueGet>
}
 8012b58:	bf00      	nop
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	2000d680 	.word	0x2000d680

08012b64 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8012b64:	b480      	push	{r7}
 8012b66:	b083      	sub	sp, #12
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
    {
 8012b6c:	4a04      	ldr	r2, [pc, #16]	@ (8012b80 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	601a      	str	r2, [r3, #0]
    }
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	4618      	mov	r0, r3
 8012b76:	370c      	adds	r7, #12
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr
 8012b80:	0802ec2c 	.word	0x0802ec2c

08012b84 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
    }
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff ffe9 	bl	8012b64 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012b92:	2104      	movs	r1, #4
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f018 ff64 	bl	802ba62 <_ZdlPvj>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
    {
    }
 8012bac:	bf00      	nop
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 8012bb8:	b480      	push	{r7}
 8012bba:	b083      	sub	sp, #12
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8012bc0:	2300      	movs	r3, #0
    }
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	370c      	adds	r7, #12
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bcc:	4770      	bx	lr
	...

08012bd0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012bd0:	b480      	push	{r7}
 8012bd2:	b083      	sub	sp, #12
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
    {
 8012bd8:	4a04      	ldr	r2, [pc, #16]	@ (8012bec <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	601a      	str	r2, [r3, #0]
    }
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	370c      	adds	r7, #12
 8012be4:	46bd      	mov	sp, r7
 8012be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bea:	4770      	bx	lr
 8012bec:	0802effc 	.word	0x0802effc

08012bf0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
    }
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7ff ffe9 	bl	8012bd0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012bfe:	210c      	movs	r1, #12
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f018 ff2e 	bl	802ba62 <_ZdlPvj>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3708      	adds	r7, #8
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012c1a:	4a09      	ldr	r2, [pc, #36]	@ (8012c40 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	601a      	str	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	683a      	ldr	r2, [r7, #0]
 8012c24:	605a      	str	r2, [r3, #4]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	721a      	strb	r2, [r3, #8]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	725a      	strb	r2, [r3, #9]
    {
    }
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	4618      	mov	r0, r3
 8012c36:	370c      	adds	r7, #12
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr
 8012c40:	0802effc 	.word	0x0802effc

08012c44 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
    {
    }
 8012c4c:	bf00      	nop
 8012c4e:	370c      	adds	r7, #12
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr

08012c58 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
    {
    }
 8012c60:	bf00      	nop
 8012c62:	370c      	adds	r7, #12
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr

08012c6c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	330c      	adds	r3, #12
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fb fad7 	bl	800e22c <_ZN8touchgfx9colortypeC1Ev>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	4618      	mov	r0, r3
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	330c      	adds	r3, #12
 8012c96:	4619      	mov	r1, r3
 8012c98:	4610      	mov	r0, r2
 8012c9a:	f7ff ffb9 	bl	8012c10 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8012ccc <_ZN8STM32DMAC1Ev+0x44>)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	601a      	str	r2, [r3, #0]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f103 000c 	add.w	r0, r3, #12
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	3320      	adds	r3, #32
 8012cae:	2201      	movs	r2, #1
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	f002 fdad 	bl	8015810 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	3320      	adds	r3, #32
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ff ffd6 	bl	8012c6c <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	0802ebdc 	.word	0x0802ebdc

08012cd0 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 8012cd8:	2300      	movs	r3, #0
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	370c      	adds	r7, #12
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr
	...

08012ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8012cf2:	4b03      	ldr	r3, [pc, #12]	@ (8012d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8012cf4:	4a03      	ldr	r2, [pc, #12]	@ (8012d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 8012cf6:	2122      	movs	r1, #34	@ 0x22
 8012cf8:	4803      	ldr	r0, [pc, #12]	@ (8012d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 8012cfa:	f018 fedf 	bl	802babc <__assert_func>
 8012cfe:	bf00      	nop
 8012d00:	0802d864 	.word	0x0802d864
 8012d04:	0802d888 	.word	0x0802d888
 8012d08:	0802d8c8 	.word	0x0802d8c8

08012d0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8012d16:	4b03      	ldr	r3, [pc, #12]	@ (8012d24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8012d18:	4a03      	ldr	r2, [pc, #12]	@ (8012d28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 8012d1a:	2127      	movs	r1, #39	@ 0x27
 8012d1c:	4803      	ldr	r0, [pc, #12]	@ (8012d2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 8012d1e:	f018 fecd 	bl	802babc <__assert_func>
 8012d22:	bf00      	nop
 8012d24:	0802d864 	.word	0x0802d864
 8012d28:	0802d8f4 	.word	0x0802d8f4
 8012d2c:	0802d8c8 	.word	0x0802d8c8

08012d30 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	4a08      	ldr	r2, [pc, #32]	@ (8012d5c <_ZN8STM32DMAD1Ev+0x2c>)
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	601a      	str	r2, [r3, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	330c      	adds	r3, #12
 8012d42:	4618      	mov	r0, r3
 8012d44:	f000 f81c 	bl	8012d80 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ff ff40 	bl	8012bd0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	4618      	mov	r0, r3
 8012d54:	3708      	adds	r7, #8
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	0802ebdc 	.word	0x0802ebdc

08012d60 <_ZN8STM32DMAD0Ev>:
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff ffe1 	bl	8012d30 <_ZN8STM32DMAD1Ev>
 8012d6e:	2144      	movs	r1, #68	@ 0x44
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f018 fe76 	bl	802ba62 <_ZdlPvj>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	4a05      	ldr	r2, [pc, #20]	@ (8012da0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff fee7 	bl	8012b64 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	0802f04c 	.word	0x0802f04c

08012da4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f7ff ffe7 	bl	8012d80 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012db2:	2114      	movs	r1, #20
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f018 fe54 	bl	802ba62 <_ZdlPvj>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8012dc4:	b480      	push	{r7}
 8012dc6:	b083      	sub	sp, #12
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012dcc:	4a04      	ldr	r2, [pc, #16]	@ (8012de0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6013      	str	r3, [r2, #0]
    }
 8012dd2:	bf00      	nop
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	20011f90 	.word	0x20011f90

08012de4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	60b9      	str	r1, [r7, #8]
 8012dee:	607a      	str	r2, [r7, #4]
 8012df0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012df2:	4a0b      	ldr	r2, [pc, #44]	@ (8012e20 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	68ba      	ldr	r2, [r7, #8]
 8012dfc:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	687a      	ldr	r2, [r7, #4]
 8012e02:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	683a      	ldr	r2, [r7, #0]
 8012e08:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	69ba      	ldr	r2, [r7, #24]
 8012e0e:	611a      	str	r2, [r3, #16]
    {
    }
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	4618      	mov	r0, r3
 8012e14:	3714      	adds	r7, #20
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	0802ed14 	.word	0x0802ed14

08012e24 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
    {
 8012e2c:	4a04      	ldr	r2, [pc, #16]	@ (8012e40 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	601a      	str	r2, [r3, #0]
    }
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	4618      	mov	r0, r3
 8012e36:	370c      	adds	r7, #12
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr
 8012e40:	0802ed14 	.word	0x0802ed14

08012e44 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
    }
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ff ffe9 	bl	8012e24 <_ZN8touchgfx7MVPHeapD1Ev>
 8012e52:	2114      	movs	r1, #20
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f018 fe04 	bl	802ba62 <_ZdlPvj>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
    {
 8012e6c:	4a04      	ldr	r2, [pc, #16]	@ (8012e80 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	601a      	str	r2, [r3, #0]
    }
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	370c      	adds	r7, #12
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr
 8012e80:	0802f8d4 	.word	0x0802f8d4

08012e84 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
    }
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7ff ffe9 	bl	8012e64 <_ZN8touchgfx3LCDD1Ev>
 8012e92:	210c      	movs	r1, #12
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f018 fde4 	bl	802ba62 <_ZdlPvj>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
            : startX(0),
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	801a      	strh	r2, [r3, #0]
              startY(0),
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	805a      	strh	r2, [r3, #2]
              downX(0),
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	809a      	strh	r2, [r3, #4]
              downY(0),
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	739a      	strb	r2, [r3, #14]
        {
        }
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	4618      	mov	r0, r3
 8012ee0:	370c      	adds	r7, #12
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr

08012eea <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8012eea:	b580      	push	{r7, lr}
 8012eec:	b082      	sub	sp, #8
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7ff ffd5 	bl	8012ea4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2200      	movs	r2, #0
 8012efe:	611a      	str	r2, [r3, #16]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2200      	movs	r2, #0
 8012f04:	829a      	strh	r2, [r3, #20]
    {
    }
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	607a      	str	r2, [r7, #4]
 8012f1c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8012f1e:	4a55      	ldr	r2, [pc, #340]	@ (8013074 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	68ba      	ldr	r2, [r7, #8]
 8012f28:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	683a      	ldr	r2, [r7, #0]
 8012f34:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2200      	movs	r2, #0
 8012f46:	619a      	str	r2, [r3, #24]
          gestures(),
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	331c      	adds	r3, #28
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7ff ffcc 	bl	8012eea <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2200      	movs	r2, #0
 8012f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2200      	movs	r2, #0
 8012f64:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2200      	movs	r2, #0
 8012f76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2200      	movs	r2, #0
 8012f86:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2200      	movs	r2, #0
 8012f96:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	3350      	adds	r3, #80	@ 0x50
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fb f96e 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2200      	movs	r2, #0
 8012fae:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2200      	movs	r2, #0
 8013008:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2200      	movs	r2, #0
 801300e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2200      	movs	r2, #0
 8013016:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2201      	movs	r2, #1
 801301e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2201      	movs	r2, #1
 8013026:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 801302a:	4a13      	ldr	r2, [pc, #76]	@ (8013078 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8013030:	4a12      	ldr	r2, [pc, #72]	@ (801307c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013032:	8b3b      	ldrh	r3, [r7, #24]
 8013034:	8013      	strh	r3, [r2, #0]
 8013036:	4b11      	ldr	r3, [pc, #68]	@ (801307c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013038:	881a      	ldrh	r2, [r3, #0]
 801303a:	4b11      	ldr	r3, [pc, #68]	@ (8013080 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 801303c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801303e:	4a11      	ldr	r2, [pc, #68]	@ (8013084 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013040:	8bbb      	ldrh	r3, [r7, #28]
 8013042:	8013      	strh	r3, [r2, #0]
 8013044:	4b0f      	ldr	r3, [pc, #60]	@ (8013084 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013046:	881a      	ldrh	r2, [r3, #0]
 8013048:	4b0f      	ldr	r3, [pc, #60]	@ (8013088 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 801304a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 801304c:	4b0f      	ldr	r3, [pc, #60]	@ (801308c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 801304e:	2200      	movs	r2, #0
 8013050:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013052:	8b3a      	ldrh	r2, [r7, #24]
 8013054:	8bbb      	ldrh	r3, [r7, #28]
 8013056:	429a      	cmp	r2, r3
 8013058:	bf34      	ite	cc
 801305a:	2301      	movcc	r3, #1
 801305c:	2300      	movcs	r3, #0
 801305e:	b2db      	uxtb	r3, r3
 8013060:	461a      	mov	r2, r3
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	4618      	mov	r0, r3
 801306c:	3710      	adds	r7, #16
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	0802ef24 	.word	0x0802ef24
 8013078:	20011f2c 	.word	0x20011f2c
 801307c:	20011f20 	.word	0x20011f20
 8013080:	20011f26 	.word	0x20011f26
 8013084:	20011f22 	.word	0x20011f22
 8013088:	20011f28 	.word	0x20011f28
 801308c:	20011f24 	.word	0x20011f24

08013090 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	4618      	mov	r0, r3
 801309e:	f7fa fe37 	bl	800dd10 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80130a2:	bf00      	nop
 80130a4:	3708      	adds	r7, #8
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
	...

080130ac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b086      	sub	sp, #24
 80130b0:	af02      	add	r7, sp, #8
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	607a      	str	r2, [r7, #4]
 80130b8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80130ba:	68f8      	ldr	r0, [r7, #12]
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	68b9      	ldr	r1, [r7, #8]
 80130c6:	f7ff fe8d 	bl	8012de4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80130ca:	4a04      	ldr	r2, [pc, #16]	@ (80130dc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	601a      	str	r2, [r3, #0]
    {

    }
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	0802ed00 	.word	0x0802ed00

080130e0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80130e0:	b580      	push	{r7, lr}
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	4801      	ldr	r0, [pc, #4]	@ (80130ec <__tcf_0+0xc>)
 80130e6:	f000 f969 	bl	80133bc <_ZN12FrontendHeapD1Ev>
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	2000d684 	.word	0x2000d684

080130f0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80130f0:	b580      	push	{r7, lr}
 80130f2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80130f4:	4b11      	ldr	r3, [pc, #68]	@ (801313c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80130f6:	e8d3 3faf 	lda	r3, [r3]
 80130fa:	f003 0301 	and.w	r3, r3, #1
 80130fe:	2b00      	cmp	r3, #0
 8013100:	bf0c      	ite	eq
 8013102:	2301      	moveq	r3, #1
 8013104:	2300      	movne	r3, #0
 8013106:	b2db      	uxtb	r3, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	d013      	beq.n	8013134 <_ZN12FrontendHeap11getInstanceEv+0x44>
 801310c:	480b      	ldr	r0, [pc, #44]	@ (801313c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801310e:	f018 fcaa 	bl	802ba66 <__cxa_guard_acquire>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	bf14      	ite	ne
 8013118:	2301      	movne	r3, #1
 801311a:	2300      	moveq	r3, #0
 801311c:	b2db      	uxtb	r3, r3
 801311e:	2b00      	cmp	r3, #0
 8013120:	d008      	beq.n	8013134 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8013122:	4807      	ldr	r0, [pc, #28]	@ (8013140 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013124:	f000 f868 	bl	80131f8 <_ZN12FrontendHeapC1Ev>
 8013128:	4806      	ldr	r0, [pc, #24]	@ (8013144 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 801312a:	f018 fce5 	bl	802baf8 <atexit>
 801312e:	4803      	ldr	r0, [pc, #12]	@ (801313c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013130:	f018 fca5 	bl	802ba7e <__cxa_guard_release>
        return instance;
 8013134:	4b02      	ldr	r3, [pc, #8]	@ (8013140 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8013136:	4618      	mov	r0, r3
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop
 801313c:	2000eda0 	.word	0x2000eda0
 8013140:	2000d684 	.word	0x2000d684
 8013144:	080130e1 	.word	0x080130e1

08013148 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	4a05      	ldr	r2, [pc, #20]	@ (8013168 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	601a      	str	r2, [r3, #0]
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	4618      	mov	r0, r3
 801315a:	f7ff fe63 	bl	8012e24 <_ZN8touchgfx7MVPHeapD1Ev>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	0802ed00 	.word	0x0802ed00

0801316c <_ZN16FrontendHeapBaseD0Ev>:
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7ff ffe7 	bl	8013148 <_ZN16FrontendHeapBaseD1Ev>
 801317a:	2114      	movs	r1, #20
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f018 fc70 	bl	802ba62 <_ZdlPvj>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	4618      	mov	r0, r3
 8013198:	f001 f9a8 	bl	80144ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 801319c:	4a03      	ldr	r2, [pc, #12]	@ (80131ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	601a      	str	r2, [r3, #0]
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4618      	mov	r0, r3
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	0802eccc 	.word	0x0802eccc

080131b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f001 f996 	bl	80144ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 80131c0:	4a03      	ldr	r2, [pc, #12]	@ (80131d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	601a      	str	r2, [r3, #0]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	3708      	adds	r7, #8
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	0802ec98 	.word	0x0802ec98

080131d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	4618      	mov	r0, r3
 80131e0:	f001 f984 	bl	80144ec <_ZN8touchgfx17AbstractPartitionC1Ev>
 80131e4:	4a03      	ldr	r2, [pc, #12]	@ (80131f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	601a      	str	r2, [r3, #0]
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	4618      	mov	r0, r3
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}
 80131f4:	0802ec64 	.word	0x0802ec64

080131f8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80131f8:	b590      	push	{r4, r7, lr}
 80131fa:	b085      	sub	sp, #20
 80131fc:	af02      	add	r7, sp, #8
 80131fe:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f103 0114 	add.w	r1, r3, #20
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 8013214:	3308      	adds	r3, #8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	f502 52ae 	add.w	r2, r2, #5568	@ 0x15c0
                     app(model, *this)
 801321c:	9200      	str	r2, [sp, #0]
 801321e:	4622      	mov	r2, r4
 8013220:	f7ff ff44 	bl	80130ac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013224:	4a19      	ldr	r2, [pc, #100]	@ (801328c <_ZN12FrontendHeapC1Ev+0x94>)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	601a      	str	r2, [r3, #0]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	3314      	adds	r3, #20
 801322e:	4618      	mov	r0, r3
 8013230:	f7ff ffac 	bl	801318c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	332c      	adds	r3, #44	@ 0x2c
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff ffb9 	bl	80131b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 8013244:	3308      	adds	r3, #8
 8013246:	4618      	mov	r0, r3
 8013248:	f7ff ffc4 	bl	80131d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 8013252:	331c      	adds	r3, #28
 8013254:	4618      	mov	r0, r3
 8013256:	f7fe fe8d 	bl	8011f74 <_ZN5ModelC1Ev>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f503 50ae 	add.w	r0, r3, #5568	@ 0x15c0
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 8013266:	331c      	adds	r3, #28
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	4619      	mov	r1, r3
 801326c:	f7fe fe6c 	bl	8011f48 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 8013278:	4619      	mov	r1, r3
 801327a:	4610      	mov	r0, r2
 801327c:	f7ff ff08 	bl	8013090 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	4618      	mov	r0, r3
 8013284:	370c      	adds	r7, #12
 8013286:	46bd      	mov	sp, r7
 8013288:	bd90      	pop	{r4, r7, pc}
 801328a:	bf00      	nop
 801328c:	0802ec50 	.word	0x0802ec50

08013290 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af02      	add	r7, sp, #8
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
 801329c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	8bbb      	ldrh	r3, [r7, #28]
 80132a2:	9301      	str	r3, [sp, #4]
 80132a4:	8b3b      	ldrh	r3, [r7, #24]
 80132a6:	9300      	str	r3, [sp, #0]
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	68b9      	ldr	r1, [r7, #8]
 80132ae:	f7ff fe2f 	bl	8012f10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80132b2:	4a04      	ldr	r2, [pc, #16]	@ (80132c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	601a      	str	r2, [r3, #0]
    }
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	4618      	mov	r0, r3
 80132bc:	3710      	adds	r7, #16
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	0802ed50 	.word	0x0802ed50

080132c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b086      	sub	sp, #24
 80132cc:	af02      	add	r7, sp, #8
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
 80132d4:	603b      	str	r3, [r7, #0]
 80132d6:	68f8      	ldr	r0, [r7, #12]
 80132d8:	8bbb      	ldrh	r3, [r7, #28]
 80132da:	9301      	str	r3, [sp, #4]
 80132dc:	8b3b      	ldrh	r3, [r7, #24]
 80132de:	9300      	str	r3, [sp, #0]
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	68b9      	ldr	r1, [r7, #8]
 80132e6:	f7ff ffd3 	bl	8013290 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80132ea:	4a04      	ldr	r2, [pc, #16]	@ (80132fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	601a      	str	r2, [r3, #0]
    }
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4618      	mov	r0, r3
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	0802eb04 	.word	0x0802eb04

08013300 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	4a04      	ldr	r2, [pc, #16]	@ (801331c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	601a      	str	r2, [r3, #0]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4618      	mov	r0, r3
 8013312:	370c      	adds	r7, #12
 8013314:	46bd      	mov	sp, r7
 8013316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331a:	4770      	bx	lr
 801331c:	0802eaec 	.word	0x0802eaec

08013320 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff ffe8 	bl	8013300 <_ZN8touchgfx15TouchControllerC1Ev>
 8013330:	4a03      	ldr	r2, [pc, #12]	@ (8013340 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	601a      	str	r2, [r3, #0]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	4618      	mov	r0, r3
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	0802ead4 	.word	0x0802ead4

08013344 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8013344:	b590      	push	{r4, r7, lr}
 8013346:	b085      	sub	sp, #20
 8013348:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801334a:	f7fe fbcd 	bl	8011ae8 <_ZN14BitmapDatabase11getInstanceEv>
 801334e:	4604      	mov	r4, r0
 8013350:	f7fe fbd4 	bl	8011afc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013354:	4603      	mov	r3, r0
 8013356:	4619      	mov	r1, r3
 8013358:	2300      	movs	r3, #0
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	2300      	movs	r3, #0
 801335e:	2200      	movs	r2, #0
 8013360:	4620      	mov	r0, r4
 8013362:	f009 fdc3 	bl	801ceec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8013366:	4809      	ldr	r0, [pc, #36]	@ (801338c <touchgfx_init+0x48>)
 8013368:	f7ff fd2c 	bl	8012dc4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801336c:	2000      	movs	r0, #0
 801336e:	f7fe fd09 	bl	8011d84 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8013372:	4807      	ldr	r0, [pc, #28]	@ (8013390 <touchgfx_init+0x4c>)
 8013374:	f009 fd22 	bl	801cdbc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013378:	f7ff feba 	bl	80130f0 <_ZN12FrontendHeap11getInstanceEv>
 801337c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801337e:	4805      	ldr	r0, [pc, #20]	@ (8013394 <touchgfx_init+0x50>)
 8013380:	f7ff fab0 	bl	80128e4 <_ZN11TouchGFXHAL10initializeEv>
}
 8013384:	bf00      	nop
 8013386:	370c      	adds	r7, #12
 8013388:	46bd      	mov	sp, r7
 801338a:	bd90      	pop	{r4, r7, pc}
 801338c:	2000ee78 	.word	0x2000ee78
 8013390:	20000020 	.word	0x20000020
 8013394:	2000ee7c 	.word	0x2000ee7c

08013398 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8013398:	b480      	push	{r7}
 801339a:	af00      	add	r7, sp, #0
}
 801339c:	bf00      	nop
 801339e:	46bd      	mov	sp, r7
 80133a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a4:	4770      	bx	lr
	...

080133a8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80133ac:	4802      	ldr	r0, [pc, #8]	@ (80133b8 <touchgfx_taskEntry+0x10>)
 80133ae:	f001 fba2 	bl	8014af6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80133b2:	bf00      	nop
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	2000ee7c 	.word	0x2000ee7c

080133bc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	4a11      	ldr	r2, [pc, #68]	@ (801340c <_ZN12FrontendHeapD1Ev+0x50>)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	601a      	str	r2, [r3, #0]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fe fd83 	bl	8011edc <_ZN19FrontendApplicationD1Ev>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 80133dc:	3308      	adds	r3, #8
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 f828 	bl	8013434 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	332c      	adds	r3, #44	@ 0x2c
 80133e8:	4618      	mov	r0, r3
 80133ea:	f000 f845 	bl	8013478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3314      	adds	r3, #20
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 f864 	bl	80134c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ff fea4 	bl	8013148 <_ZN16FrontendHeapBaseD1Ev>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	4618      	mov	r0, r3
 8013404:	3708      	adds	r7, #8
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	0802ec50 	.word	0x0802ec50

08013410 <_ZN12FrontendHeapD0Ev>:
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f7ff ffcf 	bl	80133bc <_ZN12FrontendHeapD1Ev>
 801341e:	f241 711c 	movw	r1, #5916	@ 0x171c
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f018 fb1d 	bl	802ba62 <_ZdlPvj>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4618      	mov	r0, r3
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
	...

08013434 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013434:	b580      	push	{r7, lr}
 8013436:	b082      	sub	sp, #8
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	4a05      	ldr	r2, [pc, #20]	@ (8013454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	601a      	str	r2, [r3, #0]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4618      	mov	r0, r3
 8013446:	f001 f850 	bl	80144ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4618      	mov	r0, r3
 801344e:	3708      	adds	r7, #8
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	0802ec64 	.word	0x0802ec64

08013458 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7ff ffe7 	bl	8013434 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013466:	2114      	movs	r1, #20
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f018 fafa 	bl	802ba62 <_ZdlPvj>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	4a05      	ldr	r2, [pc, #20]	@ (8013498 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	601a      	str	r2, [r3, #0]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	4618      	mov	r0, r3
 801348a:	f001 f82e 	bl	80144ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	4618      	mov	r0, r3
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	0802ec98 	.word	0x0802ec98

0801349c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7ff ffe7 	bl	8013478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80134aa:	f241 517c 	movw	r1, #5500	@ 0x157c
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f018 fad7 	bl	802ba62 <_ZdlPvj>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4618      	mov	r0, r3
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
	...

080134c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	4a05      	ldr	r2, [pc, #20]	@ (80134e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	4618      	mov	r0, r3
 80134d2:	f001 f80a 	bl	80144ea <_ZN8touchgfx17AbstractPartitionD1Ev>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	4618      	mov	r0, r3
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	0802eccc 	.word	0x0802eccc

080134e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f7ff ffe7 	bl	80134c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80134f2:	2118      	movs	r1, #24
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f018 fab4 	bl	802ba62 <_ZdlPvj>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4618      	mov	r0, r3
 80134fe:	3708      	adds	r7, #8
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	4a05      	ldr	r2, [pc, #20]	@ (8013524 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	601a      	str	r2, [r3, #0]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4618      	mov	r0, r3
 8013516:	f7ff fca5 	bl	8012e64 <_ZN8touchgfx3LCDD1Ev>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4618      	mov	r0, r3
 801351e:	3708      	adds	r7, #8
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0802fd5c 	.word	0x0802fd5c

08013528 <_ZN8touchgfx8LCD16bppD0Ev>:
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f7ff ffe7 	bl	8013504 <_ZN8touchgfx8LCD16bppD1Ev>
 8013536:	218c      	movs	r1, #140	@ 0x8c
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f018 fa92 	bl	802ba62 <_ZdlPvj>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4618      	mov	r0, r3
 8013542:	3708      	adds	r7, #8
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <_Z41__static_initialization_and_destruction_0ii>:
 8013548:	b580      	push	{r7, lr}
 801354a:	b084      	sub	sp, #16
 801354c:	af02      	add	r7, sp, #8
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d118      	bne.n	801358a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801355e:	4293      	cmp	r3, r2
 8013560:	d113      	bne.n	801358a <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 8013562:	4817      	ldr	r0, [pc, #92]	@ (80135c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8013564:	f7ff fedc 	bl	8013320 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8013568:	4816      	ldr	r0, [pc, #88]	@ (80135c4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801356a:	f7ff fb8d 	bl	8012c88 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801356e:	4816      	ldr	r0, [pc, #88]	@ (80135c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013570:	f00e fdbc 	bl	80220ec <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8013574:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	23f0      	movs	r3, #240	@ 0xf0
 801357c:	9300      	str	r3, [sp, #0]
 801357e:	4b10      	ldr	r3, [pc, #64]	@ (80135c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8013580:	4a11      	ldr	r2, [pc, #68]	@ (80135c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013582:	4910      	ldr	r1, [pc, #64]	@ (80135c4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013584:	4811      	ldr	r0, [pc, #68]	@ (80135cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013586:	f7ff fe9f 	bl	80132c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d113      	bne.n	80135b8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013596:	4293      	cmp	r3, r2
 8013598:	d10e      	bne.n	80135b8 <_Z41__static_initialization_and_destruction_0ii+0x70>
 801359a:	480c      	ldr	r0, [pc, #48]	@ (80135cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801359c:	f7ff fa32 	bl	8012a04 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80135a0:	480b      	ldr	r0, [pc, #44]	@ (80135d0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80135a2:	f7f9 fdff 	bl	800d1a4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80135a6:	4808      	ldr	r0, [pc, #32]	@ (80135c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80135a8:	f7ff ffac 	bl	8013504 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80135ac:	4805      	ldr	r0, [pc, #20]	@ (80135c4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80135ae:	f7ff fbbf 	bl	8012d30 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80135b2:	4803      	ldr	r0, [pc, #12]	@ (80135c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80135b4:	f7fe ff6e 	bl	8012494 <_ZN20STM32TouchControllerD1Ev>
}
 80135b8:	bf00      	nop
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	2000eda4 	.word	0x2000eda4
 80135c4:	2000eda8 	.word	0x2000eda8
 80135c8:	2000edec 	.word	0x2000edec
 80135cc:	2000ee7c 	.word	0x2000ee7c
 80135d0:	20000020 	.word	0x20000020

080135d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80135d4:	b480      	push	{r7}
 80135d6:	b083      	sub	sp, #12
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80135dc:	2301      	movs	r3, #1
    }
 80135de:	4618      	mov	r0, r3
 80135e0:	370c      	adds	r7, #12
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr

080135ea <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80135ea:	b480      	push	{r7}
 80135ec:	b083      	sub	sp, #12
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80135f2:	230c      	movs	r3, #12
    }
 80135f4:	4618      	mov	r0, r3
 80135f6:	370c      	adds	r7, #12
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8013600:	b480      	push	{r7}
 8013602:	b083      	sub	sp, #12
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	460b      	mov	r3, r1
 801360a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801360c:	887a      	ldrh	r2, [r7, #2]
 801360e:	4613      	mov	r3, r2
 8013610:	005b      	lsls	r3, r3, #1
 8013612:	4413      	add	r3, r2
 8013614:	009b      	lsls	r3, r3, #2
 8013616:	3308      	adds	r3, #8
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	4413      	add	r3, r2
    }
 801361c:	4618      	mov	r0, r3
 801361e:	370c      	adds	r7, #12
 8013620:	46bd      	mov	sp, r7
 8013622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013626:	4770      	bx	lr

08013628 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8013628:	b480      	push	{r7}
 801362a:	b083      	sub	sp, #12
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	460b      	mov	r3, r1
 8013632:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013634:	887a      	ldrh	r2, [r7, #2]
 8013636:	4613      	mov	r3, r2
 8013638:	005b      	lsls	r3, r3, #1
 801363a:	4413      	add	r3, r2
 801363c:	009b      	lsls	r3, r3, #2
 801363e:	3308      	adds	r3, #8
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	4413      	add	r3, r2
    }
 8013644:	4618      	mov	r0, r3
 8013646:	370c      	adds	r7, #12
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr

08013650 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013650:	b480      	push	{r7}
 8013652:	b083      	sub	sp, #12
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013658:	2301      	movs	r3, #1
    }
 801365a:	4618      	mov	r0, r3
 801365c:	370c      	adds	r7, #12
 801365e:	46bd      	mov	sp, r7
 8013660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013664:	4770      	bx	lr

08013666 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013666:	b480      	push	{r7}
 8013668:	b083      	sub	sp, #12
 801366a:	af00      	add	r7, sp, #0
 801366c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801366e:	f241 5374 	movw	r3, #5492	@ 0x1574
    }
 8013672:	4618      	mov	r0, r3
 8013674:	370c      	adds	r7, #12
 8013676:	46bd      	mov	sp, r7
 8013678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367c:	4770      	bx	lr

0801367e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801367e:	b480      	push	{r7}
 8013680:	b083      	sub	sp, #12
 8013682:	af00      	add	r7, sp, #0
 8013684:	6078      	str	r0, [r7, #4]
 8013686:	460b      	mov	r3, r1
 8013688:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801368a:	887b      	ldrh	r3, [r7, #2]
 801368c:	f241 5274 	movw	r2, #5492	@ 0x1574
 8013690:	fb02 f303 	mul.w	r3, r2, r3
 8013694:	3308      	adds	r3, #8
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	4413      	add	r3, r2
    }
 801369a:	4618      	mov	r0, r3
 801369c:	370c      	adds	r7, #12
 801369e:	46bd      	mov	sp, r7
 80136a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a4:	4770      	bx	lr

080136a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80136a6:	b480      	push	{r7}
 80136a8:	b083      	sub	sp, #12
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
 80136ae:	460b      	mov	r3, r1
 80136b0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80136b2:	887b      	ldrh	r3, [r7, #2]
 80136b4:	f241 5274 	movw	r2, #5492	@ 0x1574
 80136b8:	fb02 f303 	mul.w	r3, r2, r3
 80136bc:	3308      	adds	r3, #8
 80136be:	687a      	ldr	r2, [r7, #4]
 80136c0:	4413      	add	r3, r2
    }
 80136c2:	4618      	mov	r0, r3
 80136c4:	370c      	adds	r7, #12
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr

080136ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80136ce:	b480      	push	{r7}
 80136d0:	b083      	sub	sp, #12
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80136d6:	2301      	movs	r3, #1
    }
 80136d8:	4618      	mov	r0, r3
 80136da:	370c      	adds	r7, #12
 80136dc:	46bd      	mov	sp, r7
 80136de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e2:	4770      	bx	lr

080136e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80136e4:	b480      	push	{r7}
 80136e6:	b083      	sub	sp, #12
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80136ec:	2310      	movs	r3, #16
    }
 80136ee:	4618      	mov	r0, r3
 80136f0:	370c      	adds	r7, #12
 80136f2:	46bd      	mov	sp, r7
 80136f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f8:	4770      	bx	lr

080136fa <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80136fa:	b480      	push	{r7}
 80136fc:	b083      	sub	sp, #12
 80136fe:	af00      	add	r7, sp, #0
 8013700:	6078      	str	r0, [r7, #4]
 8013702:	460b      	mov	r3, r1
 8013704:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013706:	887b      	ldrh	r3, [r7, #2]
 8013708:	011b      	lsls	r3, r3, #4
 801370a:	3308      	adds	r3, #8
 801370c:	687a      	ldr	r2, [r7, #4]
 801370e:	4413      	add	r3, r2
    }
 8013710:	4618      	mov	r0, r3
 8013712:	370c      	adds	r7, #12
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr

0801371c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801371c:	b480      	push	{r7}
 801371e:	b083      	sub	sp, #12
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	460b      	mov	r3, r1
 8013726:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013728:	887b      	ldrh	r3, [r7, #2]
 801372a:	011b      	lsls	r3, r3, #4
 801372c:	3308      	adds	r3, #8
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	4413      	add	r3, r2
    }
 8013732:	4618      	mov	r0, r3
 8013734:	370c      	adds	r7, #12
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr

0801373e <_GLOBAL__sub_I_touchgfx_init>:
 801373e:	b580      	push	{r7, lr}
 8013740:	af00      	add	r7, sp, #0
 8013742:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013746:	2001      	movs	r0, #1
 8013748:	f7ff fefe 	bl	8013548 <_Z41__static_initialization_and_destruction_0ii>
 801374c:	bd80      	pop	{r7, pc}

0801374e <_GLOBAL__sub_D_touchgfx_init>:
 801374e:	b580      	push	{r7, lr}
 8013750:	af00      	add	r7, sp, #0
 8013752:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013756:	2000      	movs	r0, #0
 8013758:	f7ff fef6 	bl	8013548 <_Z41__static_initialization_and_destruction_0ii>
 801375c:	bd80      	pop	{r7, pc}
	...

08013760 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
    {
 8013768:	4a04      	ldr	r2, [pc, #16]	@ (801377c <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	601a      	str	r2, [r3, #0]
    }
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	4618      	mov	r0, r3
 8013772:	370c      	adds	r7, #12
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr
 801377c:	0802ee28 	.word	0x0802ee28

08013780 <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
    }
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7ff ffe9 	bl	8013760 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 801378e:	2104      	movs	r1, #4
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f018 f966 	bl	802ba62 <_ZdlPvj>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	4618      	mov	r0, r3
 801379a:	3708      	adds	r7, #8
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80137a0:	b480      	push	{r7}
 80137a2:	b083      	sub	sp, #12
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80137ae:	3301      	adds	r3, #1
 80137b0:	b2da      	uxtb	r2, r3
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 80137b8:	bf00      	nop
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr

080137c4 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	619a      	str	r2, [r3, #24]
    }
 80137d4:	bf00      	nop
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 80137e0:	b480      	push	{r7}
 80137e2:	b083      	sub	sp, #12
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	699b      	ldr	r3, [r3, #24]
    }
 80137ec:	4618      	mov	r0, r3
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr

080137f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	460b      	mov	r3, r1
 8013802:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013804:	78fb      	ldrb	r3, [r7, #3]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d002      	beq.n	8013810 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801380a:	78fb      	ldrb	r3, [r7, #3]
 801380c:	2b02      	cmp	r3, #2
 801380e:	d105      	bne.n	801381c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	78fa      	ldrb	r2, [r7, #3]
 8013814:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8013818:	2301      	movs	r3, #1
 801381a:	e027      	b.n	801386c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 801381c:	78fb      	ldrb	r3, [r7, #3]
 801381e:	2b01      	cmp	r3, #1
 8013820:	d123      	bne.n	801386a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013826:	2b00      	cmp	r3, #0
 8013828:	d014      	beq.n	8013854 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	339c      	adds	r3, #156	@ 0x9c
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	4798      	blx	r3
 8013836:	4603      	mov	r3, r0
 8013838:	461a      	mov	r2, r3
 801383a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801383e:	429a      	cmp	r2, r3
 8013840:	d008      	beq.n	8013854 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013842:	4b0c      	ldr	r3, [pc, #48]	@ (8013874 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	f083 0301 	eor.w	r3, r3, #1
 801384a:	b2db      	uxtb	r3, r3
 801384c:	2b00      	cmp	r3, #0
 801384e:	d001      	beq.n	8013854 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013850:	2301      	movs	r3, #1
 8013852:	e000      	b.n	8013856 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013854:	2300      	movs	r3, #0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d005      	beq.n	8013866 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	78fa      	ldrb	r2, [r7, #3]
 801385e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8013862:	2301      	movs	r3, #1
 8013864:	e002      	b.n	801386c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013866:	2300      	movs	r3, #0
 8013868:	e000      	b.n	801386c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801386a:	2300      	movs	r3, #0
    }
 801386c:	4618      	mov	r0, r3
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	20011f2a 	.word	0x20011f2a

08013878 <_ZN8touchgfx5paint8tearDownEv>:
{
    blendL8CLUT = data;
}

void tearDown()
{
 8013878:	b480      	push	{r7}
 801387a:	af00      	add	r7, sp, #0
}
 801387c:	bf00      	nop
 801387e:	46bd      	mov	sp, r7
 8013880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013884:	4770      	bx	lr

08013886 <_ZN8touchgfx5paint9flushLineEPmi>:

void flushLine(uint32_t* addr, int sizebytes)
{
 8013886:	b480      	push	{r7}
 8013888:	b083      	sub	sp, #12
 801388a:	af00      	add	r7, sp, #0
 801388c:	6078      	str	r0, [r7, #4]
 801388e:	6039      	str	r1, [r7, #0]
}
 8013890:	bf00      	nop
 8013892:	370c      	adds	r7, #12
 8013894:	46bd      	mov	sp, r7
 8013896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389a:	4770      	bx	lr

0801389c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
{
    return ((red << 8) & 0xF800) | ((green << 3) & 0x07E0) | ((blue >> 3) & 0x001F);
}

void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 801389c:	b480      	push	{r7}
 801389e:	b08b      	sub	sp, #44	@ 0x2c
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
 80138a8:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint16_t* const lineEnd = framebuffer + count;
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	005b      	lsls	r3, r3, #1
 80138b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138b4:	4413      	add	r3, r2
 80138b6:	623b      	str	r3, [r7, #32]
    if (alpha == 0xFF)
 80138b8:	78fb      	ldrb	r3, [r7, #3]
 80138ba:	2bff      	cmp	r3, #255	@ 0xff
 80138bc:	d110      	bne.n	80138e0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
    {
        do
        {
            *framebuffer = color565;
 80138be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c4:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 80138c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c8:	3302      	adds	r3, #2
 80138ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80138cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138ce:	6a3b      	ldr	r3, [r7, #32]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	bf34      	ite	cc
 80138d4:	2301      	movcc	r3, #1
 80138d6:	2300      	movcs	r3, #0
 80138d8:	b2db      	uxtb	r3, r3
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d1ef      	bne.n	80138be <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x22>
        do
        {
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
        } while (++framebuffer < lineEnd);
    }
}
 80138de:	e077      	b.n	80139d0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x134>
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 80138e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e2:	b29a      	uxth	r2, r3
 80138e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e6:	881b      	ldrh	r3, [r3, #0]
 80138e8:	83fa      	strh	r2, [r7, #30]
 80138ea:	83bb      	strh	r3, [r7, #28]
 80138ec:	78fb      	ldrb	r3, [r7, #3]
 80138ee:	76fb      	strb	r3, [r7, #27]
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80138f0:	8bfb      	ldrh	r3, [r7, #30]
 80138f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80138f6:	f023 0307 	bic.w	r3, r3, #7
 80138fa:	b299      	uxth	r1, r3
 80138fc:	8bfb      	ldrh	r3, [r7, #30]
 80138fe:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8013902:	b29a      	uxth	r2, r3
 8013904:	8bfb      	ldrh	r3, [r7, #30]
 8013906:	f003 031f 	and.w	r3, r3, #31
 801390a:	b29b      	uxth	r3, r3
 801390c:	8339      	strh	r1, [r7, #24]
 801390e:	82fa      	strh	r2, [r7, #22]
 8013910:	82bb      	strh	r3, [r7, #20]
 8013912:	8bbb      	ldrh	r3, [r7, #28]
 8013914:	827b      	strh	r3, [r7, #18]
 8013916:	7efb      	ldrb	r3, [r7, #27]
 8013918:	747b      	strb	r3, [r7, #17]
    const uint8_t ialpha = 0xFF - alpha;
 801391a:	7c7b      	ldrb	r3, [r7, #17]
 801391c:	43db      	mvns	r3, r3
 801391e:	743b      	strb	r3, [r7, #16]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8013920:	8b3b      	ldrh	r3, [r7, #24]
 8013922:	7c7a      	ldrb	r2, [r7, #17]
 8013924:	fb03 f202 	mul.w	r2, r3, r2
 8013928:	8a7b      	ldrh	r3, [r7, #18]
 801392a:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801392e:	7c39      	ldrb	r1, [r7, #16]
 8013930:	fb01 f303 	mul.w	r3, r1, r3
 8013934:	4413      	add	r3, r2
 8013936:	4a29      	ldr	r2, [pc, #164]	@ (80139dc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8013938:	fb82 1203 	smull	r1, r2, r2, r3
 801393c:	441a      	add	r2, r3
 801393e:	11d2      	asrs	r2, r2, #7
 8013940:	17db      	asrs	r3, r3, #31
 8013942:	1ad3      	subs	r3, r2, r3
 8013944:	b21b      	sxth	r3, r3
 8013946:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 801394a:	f023 0307 	bic.w	r3, r3, #7
 801394e:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8013950:	8afb      	ldrh	r3, [r7, #22]
 8013952:	7c79      	ldrb	r1, [r7, #17]
 8013954:	fb03 f101 	mul.w	r1, r3, r1
 8013958:	8a7b      	ldrh	r3, [r7, #18]
 801395a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801395e:	7c38      	ldrb	r0, [r7, #16]
 8013960:	fb00 f303 	mul.w	r3, r0, r3
 8013964:	440b      	add	r3, r1
 8013966:	491d      	ldr	r1, [pc, #116]	@ (80139dc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8013968:	fb81 0103 	smull	r0, r1, r1, r3
 801396c:	4419      	add	r1, r3
 801396e:	11c9      	asrs	r1, r1, #7
 8013970:	17db      	asrs	r3, r3, #31
 8013972:	1acb      	subs	r3, r1, r3
 8013974:	b21b      	sxth	r3, r3
 8013976:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801397a:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 801397c:	4313      	orrs	r3, r2
 801397e:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 8013980:	8abb      	ldrh	r3, [r7, #20]
 8013982:	7c79      	ldrb	r1, [r7, #17]
 8013984:	fb03 f101 	mul.w	r1, r3, r1
 8013988:	8a7b      	ldrh	r3, [r7, #18]
 801398a:	f003 031f 	and.w	r3, r3, #31
 801398e:	7c38      	ldrb	r0, [r7, #16]
 8013990:	fb00 f303 	mul.w	r3, r0, r3
 8013994:	440b      	add	r3, r1
 8013996:	4911      	ldr	r1, [pc, #68]	@ (80139dc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8013998:	fb81 0103 	smull	r0, r1, r1, r3
 801399c:	4419      	add	r1, r3
 801399e:	11c9      	asrs	r1, r1, #7
 80139a0:	17db      	asrs	r3, r3, #31
 80139a2:	1acb      	subs	r3, r1, r3
 80139a4:	b21b      	sxth	r3, r3
 80139a6:	f003 031f 	and.w	r3, r3, #31
 80139aa:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 80139ac:	4313      	orrs	r3, r2
 80139ae:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 80139b0:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80139b2:	bf00      	nop
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 80139b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139b6:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 80139b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ba:	3302      	adds	r3, #2
 80139bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80139be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80139c0:	6a3b      	ldr	r3, [r7, #32]
 80139c2:	429a      	cmp	r2, r3
 80139c4:	bf34      	ite	cc
 80139c6:	2301      	movcc	r3, #1
 80139c8:	2300      	movcs	r3, #0
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d187      	bne.n	80138e0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
}
 80139d0:	bf00      	nop
 80139d2:	372c      	adds	r7, #44	@ 0x2c
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr
 80139dc:	80808081 	.word	0x80808081

080139e0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b08d      	sub	sp, #52	@ 0x34
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	60f8      	str	r0, [r7, #12]
 80139e8:	60b9      	str	r1, [r7, #8]
 80139ea:	607a      	str	r2, [r7, #4]
 80139ec:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint16_t* bitmapPointer = data;
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint16_t* const chunkend = framebuffer + count;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	005b      	lsls	r3, r3, #1
 80139fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80139fc:	4413      	add	r3, r2
 80139fe:	627b      	str	r3, [r7, #36]	@ 0x24

    if (alpha == 0xFF)
 8013a00:	78fb      	ldrb	r3, [r7, #3]
 8013a02:	2bff      	cmp	r3, #255	@ 0xff
 8013a04:	d112      	bne.n	8013a2c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
    {
        do
        {
            *framebuffer = *bitmapPointer++;
 8013a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a08:	1c9a      	adds	r2, r3, #2
 8013a0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013a0c:	881a      	ldrh	r2, [r3, #0]
 8013a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a10:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 8013a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a14:	3302      	adds	r3, #2
 8013a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	bf34      	ite	cc
 8013a20:	2301      	movcc	r3, #1
 8013a22:	2300      	movcs	r3, #0
 8013a24:	b2db      	uxtb	r3, r3
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d1ed      	bne.n	8013a06 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x26>
        do
        {
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
        } while (++framebuffer < chunkend);
    }
}
 8013a2a:	e079      	b.n	8013b20 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x140>
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 8013a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2e:	1c9a      	adds	r2, r3, #2
 8013a30:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013a32:	881a      	ldrh	r2, [r3, #0]
 8013a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a36:	881b      	ldrh	r3, [r3, #0]
 8013a38:	847a      	strh	r2, [r7, #34]	@ 0x22
 8013a3a:	843b      	strh	r3, [r7, #32]
 8013a3c:	78fb      	ldrb	r3, [r7, #3]
 8013a3e:	77fb      	strb	r3, [r7, #31]
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 8013a40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a42:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8013a46:	f023 0307 	bic.w	r3, r3, #7
 8013a4a:	b299      	uxth	r1, r3
 8013a4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a4e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a56:	f003 031f 	and.w	r3, r3, #31
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	83b9      	strh	r1, [r7, #28]
 8013a5e:	837a      	strh	r2, [r7, #26]
 8013a60:	833b      	strh	r3, [r7, #24]
 8013a62:	8c3b      	ldrh	r3, [r7, #32]
 8013a64:	82fb      	strh	r3, [r7, #22]
 8013a66:	7ffb      	ldrb	r3, [r7, #31]
 8013a68:	757b      	strb	r3, [r7, #21]
    const uint8_t ialpha = 0xFF - alpha;
 8013a6a:	7d7b      	ldrb	r3, [r7, #21]
 8013a6c:	43db      	mvns	r3, r3
 8013a6e:	753b      	strb	r3, [r7, #20]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8013a70:	8bbb      	ldrh	r3, [r7, #28]
 8013a72:	7d7a      	ldrb	r2, [r7, #21]
 8013a74:	fb03 f202 	mul.w	r2, r3, r2
 8013a78:	8afb      	ldrh	r3, [r7, #22]
 8013a7a:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8013a7e:	7d39      	ldrb	r1, [r7, #20]
 8013a80:	fb01 f303 	mul.w	r3, r1, r3
 8013a84:	4413      	add	r3, r2
 8013a86:	4a29      	ldr	r2, [pc, #164]	@ (8013b2c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8013a88:	fb82 1203 	smull	r1, r2, r2, r3
 8013a8c:	441a      	add	r2, r3
 8013a8e:	11d2      	asrs	r2, r2, #7
 8013a90:	17db      	asrs	r3, r3, #31
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	b21b      	sxth	r3, r3
 8013a96:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8013a9a:	f023 0307 	bic.w	r3, r3, #7
 8013a9e:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8013aa0:	8b7b      	ldrh	r3, [r7, #26]
 8013aa2:	7d79      	ldrb	r1, [r7, #21]
 8013aa4:	fb03 f101 	mul.w	r1, r3, r1
 8013aa8:	8afb      	ldrh	r3, [r7, #22]
 8013aaa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8013aae:	7d38      	ldrb	r0, [r7, #20]
 8013ab0:	fb00 f303 	mul.w	r3, r0, r3
 8013ab4:	440b      	add	r3, r1
 8013ab6:	491d      	ldr	r1, [pc, #116]	@ (8013b2c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8013ab8:	fb81 0103 	smull	r0, r1, r1, r3
 8013abc:	4419      	add	r1, r3
 8013abe:	11c9      	asrs	r1, r1, #7
 8013ac0:	17db      	asrs	r3, r3, #31
 8013ac2:	1acb      	subs	r3, r1, r3
 8013ac4:	b21b      	sxth	r3, r3
 8013ac6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8013aca:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8013acc:	4313      	orrs	r3, r2
 8013ace:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 8013ad0:	8b3b      	ldrh	r3, [r7, #24]
 8013ad2:	7d79      	ldrb	r1, [r7, #21]
 8013ad4:	fb03 f101 	mul.w	r1, r3, r1
 8013ad8:	8afb      	ldrh	r3, [r7, #22]
 8013ada:	f003 031f 	and.w	r3, r3, #31
 8013ade:	7d38      	ldrb	r0, [r7, #20]
 8013ae0:	fb00 f303 	mul.w	r3, r0, r3
 8013ae4:	440b      	add	r3, r1
 8013ae6:	4911      	ldr	r1, [pc, #68]	@ (8013b2c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8013ae8:	fb81 0103 	smull	r0, r1, r1, r3
 8013aec:	4419      	add	r1, r3
 8013aee:	11c9      	asrs	r1, r1, #7
 8013af0:	17db      	asrs	r3, r3, #31
 8013af2:	1acb      	subs	r3, r1, r3
 8013af4:	b21b      	sxth	r3, r3
 8013af6:	f003 031f 	and.w	r3, r3, #31
 8013afa:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8013afc:	4313      	orrs	r3, r2
 8013afe:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 8013b00:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 8013b02:	bf00      	nop
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 8013b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b06:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 8013b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b0a:	3302      	adds	r3, #2
 8013b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b12:	429a      	cmp	r2, r3
 8013b14:	bf34      	ite	cc
 8013b16:	2301      	movcc	r3, #1
 8013b18:	2300      	movcs	r3, #0
 8013b1a:	b2db      	uxtb	r3, r3
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d185      	bne.n	8013a2c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
}
 8013b20:	bf00      	nop
 8013b22:	3734      	adds	r7, #52	@ 0x34
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr
 8013b2c:	80808081 	.word	0x80808081

08013b30 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8013b30:	b590      	push	{r4, r7, lr}
 8013b32:	b093      	sub	sp, #76	@ 0x4c
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
 8013b3c:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t* bitmapPointer = data;
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	643b      	str	r3, [r7, #64]	@ 0x40
    const uint16_t* const chunkend = framebuffer + count;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	005b      	lsls	r3, r3, #1
 8013b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013b4c:	4413      	add	r3, r2
 8013b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    do
    {
        const uint8_t srcAlpha = (*bitmapPointer) >> 24;
 8013b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	0e1b      	lsrs	r3, r3, #24
 8013b56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        const uint8_t a = LCD::div255(alpha * srcAlpha);
 8013b5a:	78fb      	ldrb	r3, [r7, #3]
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	fb12 f303 	smulbb	r3, r2, r3
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	867b      	strh	r3, [r7, #50]	@ 0x32
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 8013b6c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8013b6e:	3301      	adds	r3, #1
 8013b70:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8013b72:	0a12      	lsrs	r2, r2, #8
 8013b74:	b292      	uxth	r2, r2
 8013b76:	4413      	add	r3, r2
 8013b78:	121b      	asrs	r3, r3, #8
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        if (a == 0xFF)
 8013b80:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8013b84:	2bff      	cmp	r3, #255	@ 0xff
 8013b86:	d133      	bne.n	8013bf0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0xc0>
        {
            *framebuffer = getNativeColor(*bitmapPointer);
 8013b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	f107 0318 	add.w	r3, r7, #24
 8013b90:	4611      	mov	r1, r2
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7fa fb58 	bl	800e248 <_ZN8touchgfx9colortypeC1Em>
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	617b      	str	r3, [r7, #20]
    return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 8013b9c:	f107 0314 	add.w	r3, r7, #20
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7fa fb60 	bl	800e266 <_ZNK8touchgfx9colortypecvmEv>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	0a1b      	lsrs	r3, r3, #8
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8013bb0:	f023 0307 	bic.w	r3, r3, #7
 8013bb4:	b29c      	uxth	r4, r3
 8013bb6:	f107 0314 	add.w	r3, r7, #20
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7fa fb53 	bl	800e266 <_ZNK8touchgfx9colortypecvmEv>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	095b      	lsrs	r3, r3, #5
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	4323      	orrs	r3, r4
 8013bce:	b29c      	uxth	r4, r3
 8013bd0:	f107 0314 	add.w	r3, r7, #20
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fa fb46 	bl	800e266 <_ZNK8touchgfx9colortypecvmEv>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	08db      	lsrs	r3, r3, #3
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	f003 031f 	and.w	r3, r3, #31
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	4323      	orrs	r3, r4
 8013be8:	b29a      	uxth	r2, r3
            *framebuffer = getNativeColor(*bitmapPointer);
 8013bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bec:	801a      	strh	r2, [r3, #0]
 8013bee:	e0a9      	b.n	8013d44 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x214>
        }
        else if (a)
 8013bf0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	f000 80a5 	beq.w	8013d44 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x214>
        {
            const uint32_t newpix = *bitmapPointer;
 8013bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	637b      	str	r3, [r7, #52]	@ 0x34
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 8013c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c02:	0c1b      	lsrs	r3, r3, #16
 8013c04:	b2d8      	uxtb	r0, r3
 8013c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c08:	0a1b      	lsrs	r3, r3, #8
 8013c0a:	b2d9      	uxtb	r1, r3
 8013c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c0e:	b2da      	uxtb	r2, r3
 8013c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c12:	881b      	ldrh	r3, [r3, #0]
 8013c14:	f887 0031 	strb.w	r0, [r7, #49]	@ 0x31
 8013c18:	f887 1030 	strb.w	r1, [r7, #48]	@ 0x30
 8013c1c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8013c20:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8013c22:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8013c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const uint8_t ialpha = 0xFF - alpha;
 8013c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013c2e:	43db      	mvns	r3, r3
 8013c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8013c34:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013c36:	853b      	strh	r3, [r7, #40]	@ 0x28
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedFromRGB565(uint16_t color)
    {
        const uint8_t red = (color >> 8) & 0xF8;
 8013c38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013c3a:	0a1b      	lsrs	r3, r3, #8
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	b2db      	uxtb	r3, r3
 8013c40:	f023 0307 	bic.w	r3, r3, #7
 8013c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        return red | (red >> 5);
 8013c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c4c:	095b      	lsrs	r3, r3, #5
 8013c4e:	b2da      	uxtb	r2, r3
 8013c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c54:	4313      	orrs	r3, r2
 8013c56:	b2db      	uxtb	r3, r3
    const uint8_t fbred = Color::getRedFromRGB565(bufpix);
 8013c58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013c5c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013c5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenFromRGB565(uint16_t color)
    {
        const uint8_t green = (color >> 3) & 0xFC;
 8013c60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c62:	08db      	lsrs	r3, r3, #3
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	b2db      	uxtb	r3, r3
 8013c68:	f023 0303 	bic.w	r3, r3, #3
 8013c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        return green | (green >> 6);
 8013c70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013c74:	099b      	lsrs	r3, r3, #6
 8013c76:	b2da      	uxtb	r2, r3
 8013c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013c7c:	4313      	orrs	r3, r2
 8013c7e:	b2db      	uxtb	r3, r3
    const uint8_t fbgreen = Color::getGreenFromRGB565(bufpix);
 8013c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8013c84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013c86:	843b      	strh	r3, [r7, #32]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueFromRGB565(uint16_t color)
    {
        const uint8_t blue = color << 3;
 8013c88:	8c3b      	ldrh	r3, [r7, #32]
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	00db      	lsls	r3, r3, #3
 8013c8e:	77fb      	strb	r3, [r7, #31]
        return blue | (blue >> 5);
 8013c90:	7ffb      	ldrb	r3, [r7, #31]
 8013c92:	095b      	lsrs	r3, r3, #5
 8013c94:	b2da      	uxtb	r2, r3
 8013c96:	7ffb      	ldrb	r3, [r7, #31]
 8013c98:	4313      	orrs	r3, r2
 8013c9a:	b2db      	uxtb	r3, r3
    const uint8_t fbblue = Color::getBlueFromRGB565(bufpix);
 8013c9c:	77bb      	strb	r3, [r7, #30]
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 8013c9e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013ca2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8013ca6:	fb03 f202 	mul.w	r2, r3, r2
 8013caa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013cae:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8013cb2:	fb01 f303 	mul.w	r3, r1, r3
 8013cb6:	4413      	add	r3, r2
 8013cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8013d70 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8013cba:	fb82 1203 	smull	r1, r2, r2, r3
 8013cbe:	441a      	add	r2, r3
 8013cc0:	11d2      	asrs	r2, r2, #7
 8013cc2:	17db      	asrs	r3, r3, #31
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	021b      	lsls	r3, r3, #8
 8013cc8:	b21b      	sxth	r3, r3
 8013cca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8013cce:	f023 0307 	bic.w	r3, r3, #7
 8013cd2:	b21a      	sxth	r2, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 8013cd4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013cd8:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8013cdc:	fb03 f101 	mul.w	r1, r3, r1
 8013ce0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013ce4:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8013ce8:	fb00 f303 	mul.w	r3, r0, r3
 8013cec:	440b      	add	r3, r1
 8013cee:	4920      	ldr	r1, [pc, #128]	@ (8013d70 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8013cf0:	fb81 0103 	smull	r0, r1, r1, r3
 8013cf4:	4419      	add	r1, r3
 8013cf6:	11c9      	asrs	r1, r1, #7
 8013cf8:	17db      	asrs	r3, r3, #31
 8013cfa:	1acb      	subs	r3, r1, r3
 8013cfc:	00db      	lsls	r3, r3, #3
 8013cfe:	b21b      	sxth	r3, r3
 8013d00:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8013d04:	b21b      	sxth	r3, r3
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 8013d06:	4313      	orrs	r3, r2
 8013d08:	b21a      	sxth	r2, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 8013d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013d0e:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8013d12:	fb03 f101 	mul.w	r1, r3, r1
 8013d16:	7fbb      	ldrb	r3, [r7, #30]
 8013d18:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8013d1c:	fb00 f303 	mul.w	r3, r0, r3
 8013d20:	440b      	add	r3, r1
 8013d22:	4913      	ldr	r1, [pc, #76]	@ (8013d70 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8013d24:	fb81 0103 	smull	r0, r1, r1, r3
 8013d28:	4419      	add	r1, r3
 8013d2a:	11c9      	asrs	r1, r1, #7
 8013d2c:	17db      	asrs	r3, r3, #31
 8013d2e:	1acb      	subs	r3, r1, r3
 8013d30:	10db      	asrs	r3, r3, #3
 8013d32:	b21b      	sxth	r3, r3
 8013d34:	f003 031f 	and.w	r3, r3, #31
 8013d38:	b21b      	sxth	r3, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 8013d3a:	4313      	orrs	r3, r2
 8013d3c:	b21b      	sxth	r3, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 8013d3e:	b29a      	uxth	r2, r3
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 8013d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d42:	801a      	strh	r2, [r3, #0]
        }
        bitmapPointer++;
 8013d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d46:	3304      	adds	r3, #4
 8013d48:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (++framebuffer < chunkend);
 8013d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d4c:	3302      	adds	r3, #2
 8013d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d54:	429a      	cmp	r2, r3
 8013d56:	bf34      	ite	cc
 8013d58:	2301      	movcc	r3, #1
 8013d5a:	2300      	movcs	r3, #0
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	f47f aef6 	bne.w	8013b50 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x20>
}
 8013d64:	bf00      	nop
 8013d66:	bf00      	nop
 8013d68:	374c      	adds	r7, #76	@ 0x4c
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd90      	pop	{r4, r7, pc}
 8013d6e:	bf00      	nop
 8013d70:	80808081 	.word	0x80808081

08013d74 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
       3, /* number of blocks */
       2 /* bytes per pixel */
       > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 8013d74:	b5b0      	push	{r4, r5, r7, lr}
 8013d76:	b082      	sub	sp, #8
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f000 fea5 	bl	8014ace <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013d84:	687d      	ldr	r5, [r7, #4]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	3364      	adds	r3, #100	@ 0x64
 8013d8c:	681c      	ldr	r4, [r3, #0]
 8013d8e:	f005 ff77 	bl	8019c80 <_ZN8touchgfx11Application11getInstanceEv>
 8013d92:	4603      	mov	r3, r0
 8013d94:	4619      	mov	r1, r3
 8013d96:	4628      	mov	r0, r5
 8013d98:	47a0      	blx	r4
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4906      	ldr	r1, [pc, #24]	@ (8013db8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f7ff fd10 	bl	80137c4 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2102      	movs	r1, #2
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7ff fd25 	bl	80137f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 8013dae:	bf00      	nop
 8013db0:	3708      	adds	r7, #8
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bdb0      	pop	{r4, r5, r7, pc}
 8013db6:	bf00      	nop
 8013db8:	2000eef8 	.word	0x2000eef8

08013dbc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
}
 8013dc4:	bf00      	nop
 8013dc6:	370c      	adds	r7, #12
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
}
 8013dd8:	bf00      	nop
 8013dda:	370c      	adds	r7, #12
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr

08013de4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
}
 8013dec:	bf00      	nop
 8013dee:	370c      	adds	r7, #12
 8013df0:	46bd      	mov	sp, r7
 8013df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df6:	4770      	bx	lr

08013df8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
}
 8013e00:	bf00      	nop
 8013e02:	370c      	adds	r7, #12
 8013e04:	46bd      	mov	sp, r7
 8013e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0a:	4770      	bx	lr

08013e0c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f000 fe40 	bl	8014a9c <_ZN8touchgfx3HAL10beginFrameEv>
 8013e1c:	4603      	mov	r3, r0
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3708      	adds	r7, #8
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}

08013e26 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013e26:	b580      	push	{r7, lr}
 8013e28:	b082      	sub	sp, #8
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while (touchgfxDisplayDriverTransmitActive()){}
 8013e2e:	bf00      	nop
 8013e30:	f7ed fe58 	bl	8001ae4 <touchgfxDisplayDriverTransmitActive>
 8013e34:	4603      	mov	r3, r0
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	bf14      	ite	ne
 8013e3a:	2301      	movne	r3, #1
 8013e3c:	2300      	moveq	r3, #0
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d1f5      	bne.n	8013e30 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xa>

    HAL::endFrame();
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	4618      	mov	r0, r3
 8013e48:	f000 fe34 	bl	8014ab4 <_ZN8touchgfx3HAL8endFrameEv>
}
 8013e4c:	bf00      	nop
 8013e4e:	3708      	adds	r7, #8
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013e54:	b480      	push	{r7}
 8013e56:	b083      	sub	sp, #12
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 8013e5c:	2300      	movs	r3, #0
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	370c      	adds	r7, #12
 8013e62:	46bd      	mov	sp, r7
 8013e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e68:	4770      	bx	lr

08013e6a <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013e6a:	b480      	push	{r7}
 8013e6c:	b083      	sub	sp, #12
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013e74:	bf00      	nop
 8013e76:	370c      	adds	r7, #12
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b088      	sub	sp, #32
 8013e84:	af02      	add	r7, sp, #8
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6839      	ldr	r1, [r7, #0]
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f000 fdce 	bl	8014a30 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	699a      	ldr	r2, [r3, #24]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	699b      	ldr	r3, [r3, #24]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	3304      	adds	r3, #4
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	4610      	mov	r0, r2
 8013ea4:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 8013ea6:	f7ed fe1d 	bl	8001ae4 <touchgfxDisplayDriverTransmitActive>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	bf0c      	ite	eq
 8013eb0:	2301      	moveq	r3, #1
 8013eb2:	2300      	movne	r3, #0
 8013eb4:	b2db      	uxtb	r3, r3
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d021      	beq.n	8013efe <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 8013eba:	f107 030c 	add.w	r3, r7, #12
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fa f9dd 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	699a      	ldr	r2, [r3, #24]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	699b      	ldr	r3, [r3, #24]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	330c      	adds	r3, #12
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	f107 010c 	add.w	r1, r7, #12
 8013ed6:	4610      	mov	r0, r2
 8013ed8:	4798      	blx	r3
 8013eda:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8013edc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ee0:	b299      	uxth	r1, r3
 8013ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013ee6:	b29a      	uxth	r2, r3
 8013ee8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013eec:	b298      	uxth	r0, r3
 8013eee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	9300      	str	r3, [sp, #0]
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	6978      	ldr	r0, [r7, #20]
 8013efa:	f7ed fe05 	bl	8001b08 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8013efe:	bf00      	nop
 8013f00:	3718      	adds	r7, #24
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}

08013f06 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013f06:	b580      	push	{r7, lr}
 8013f08:	b084      	sub	sp, #16
 8013f0a:	af00      	add	r7, sp, #0
 8013f0c:	60f8      	str	r0, [r7, #12]
 8013f0e:	60b9      	str	r1, [r7, #8]
 8013f10:	607a      	str	r2, [r7, #4]
 8013f12:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	68b9      	ldr	r1, [r7, #8]
 8013f1c:	f000 fef9 	bl	8014d12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013f20:	4603      	mov	r3, r0
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}

08013f2a <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
void FrameBufferAllocatorWaitOnTransfer()
{
 8013f2a:	b480      	push	{r7}
 8013f2c:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
     */
}
 8013f2e:	bf00      	nop
 8013f30:	46bd      	mov	sp, r7
 8013f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f36:	4770      	bx	lr

08013f38 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
void FrameBufferAllocatorSignalBlockDrawn()
{
 8013f38:	b480      	push	{r7}
 8013f3a:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
     */
}
 8013f3c:	bf00      	nop
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr

08013f46 <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 8013f46:	b580      	push	{r7, lr}
 8013f48:	b086      	sub	sp, #24
 8013f4a:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 8013f4c:	f7f9 fcde 	bl	800d90c <_ZN8touchgfx3HAL11getInstanceEv>
 8013f50:	4603      	mov	r3, r0
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7ff fc44 	bl	80137e0 <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 8013f58:	60f8      	str	r0, [r7, #12]

    // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	3318      	adds	r3, #24
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	3308      	adds	r3, #8
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	68f8      	ldr	r0, [r7, #12]
 8013f70:	4798      	blx	r3
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d01d      	beq.n	8013fb4 <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 8013f78:	463b      	mov	r3, r7
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fa f97f 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	330c      	adds	r3, #12
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	463a      	mov	r2, r7
 8013f8a:	4611      	mov	r1, r2
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	4798      	blx	r3
 8013f90:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8013f92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013f96:	b299      	uxth	r1, r3
 8013f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013fa2:	b298      	uxth	r0, r3
 8013fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	4603      	mov	r3, r0
 8013fae:	68b8      	ldr	r0, [r7, #8]
 8013fb0:	f7ed fdaa 	bl	8001b08 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8013fb4:	bf00      	nop
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	af00      	add	r7, sp, #0
    // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8013fc0:	f7ff ffc1 	bl	8013f46 <_ZN8touchgfx16startNewTransferEv>
}
 8013fc4:	bf00      	nop
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8013fcc:	f7f9 fc9e 	bl	800d90c <_ZN8touchgfx3HAL11getInstanceEv>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7ff fbe4 	bl	80137a0 <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 8013fd8:	f7fe fd9c 	bl	8012b14 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8013fdc:	bf00      	nop
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	4a04      	ldr	r2, [pc, #16]	@ (8013ffc <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	370c      	adds	r7, #12
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr
 8013ffc:	0802ee28 	.word	0x0802ee28

08014000 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 8014000:	b5b0      	push	{r4, r5, r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
    {
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	f7ff ffe8 	bl	8013fe0 <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 8014010:	4a19      	ldr	r2, [pc, #100]	@ (8014078 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x78>)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	601a      	str	r2, [r3, #0]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801401c:	3308      	adds	r3, #8
 801401e:	2402      	movs	r4, #2
 8014020:	461d      	mov	r5, r3
 8014022:	e004      	b.n	801402e <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x2e>
 8014024:	4628      	mov	r0, r5
 8014026:	f7fa f92a 	bl	800e27e <_ZN8touchgfx4RectC1Ev>
 801402a:	3c01      	subs	r4, #1
 801402c:	3508      	adds	r5, #8
 801402e:	2c00      	cmp	r4, #0
 8014030:	daf8      	bge.n	8014024 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x24>
        sendingBlock = -1;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014038:	461a      	mov	r2, r3
 801403a:	f04f 33ff 	mov.w	r3, #4294967295
 801403e:	6213      	str	r3, [r2, #32]
        drawingBlock = -1;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014046:	461a      	mov	r2, r3
 8014048:	f04f 33ff 	mov.w	r3, #4294967295
 801404c:	6253      	str	r3, [r2, #36]	@ 0x24
        for (uint32_t i = 0; i < blocks; i++)
 801404e:	2300      	movs	r3, #0
 8014050:	60fb      	str	r3, [r7, #12]
 8014052:	e008      	b.n	8014066 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x66>
        {
            state[i] = EMPTY;
 8014054:	687a      	ldr	r2, [r7, #4]
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	4413      	add	r3, r2
 801405a:	3304      	adds	r3, #4
 801405c:	2200      	movs	r2, #0
 801405e:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	3301      	adds	r3, #1
 8014064:	60fb      	str	r3, [r7, #12]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2b02      	cmp	r3, #2
 801406a:	d9f3      	bls.n	8014054 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x54>
        }
    }
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	4618      	mov	r0, r3
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bdb0      	pop	{r4, r5, r7, pc}
 8014076:	bf00      	nop
 8014078:	0802ed24 	.word	0x0802ed24

0801407c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	4a05      	ldr	r2, [pc, #20]	@ (801409c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev+0x20>)
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	601a      	str	r2, [r3, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	4618      	mov	r0, r3
 801408e:	f7ff fb67 	bl	8013760 <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	0802ed24 	.word	0x0802ed24

080140a0 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED0Ev>:
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f7ff ffe7 	bl	801407c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>
 80140ae:	f243 0128 	movw	r1, #12328	@ 0x3028
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f017 fcd5 	bl	802ba62 <_ZdlPvj>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	4618      	mov	r0, r3
 80140bc:	3708      	adds	r7, #8
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
	...

080140c4 <_Z41__static_initialization_and_destruction_0ii>:
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	d107      	bne.n	80140e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80140da:	4293      	cmp	r3, r2
 80140dc:	d102      	bne.n	80140e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
       > blockAllocator;
 80140de:	4809      	ldr	r0, [pc, #36]	@ (8014104 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80140e0:	f7ff ff8e 	bl	8014000 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev>
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d107      	bne.n	80140fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80140f0:	4293      	cmp	r3, r2
 80140f2:	d102      	bne.n	80140fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80140f4:	4803      	ldr	r0, [pc, #12]	@ (8014104 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80140f6:	f7ff ffc1 	bl	801407c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>
}
 80140fa:	bf00      	nop
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
 8014102:	bf00      	nop
 8014104:	2000eef8 	.word	0x2000eef8

08014108 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 8014108:	b580      	push	{r7, lr}
 801410a:	b086      	sub	sp, #24
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	4608      	mov	r0, r1
 8014112:	4611      	mov	r1, r2
 8014114:	461a      	mov	r2, r3
 8014116:	4603      	mov	r3, r0
 8014118:	817b      	strh	r3, [r7, #10]
 801411a:	460b      	mov	r3, r1
 801411c:	813b      	strh	r3, [r7, #8]
 801411e:	4613      	mov	r3, r2
 8014120:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801412a:	3301      	adds	r3, #1
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8014132:	6253      	str	r3, [r2, #36]	@ 0x24
        if (drawingBlock == blocks)
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801413c:	2b03      	cmp	r3, #3
 801413e:	d108      	bne.n	8014152 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            drawingBlock = 0;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014146:	461a      	mov	r2, r3
 8014148:	2300      	movs	r3, #0
 801414a:	6253      	str	r3, [r2, #36]	@ 0x24
        }
        while (state[drawingBlock] != EMPTY)
 801414c:	e001      	b.n	8014152 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            FrameBufferAllocatorWaitOnTransfer();
 801414e:	f7ff feec 	bl	8013f2a <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	4413      	add	r3, r2
 801415e:	791b      	ldrb	r3, [r3, #4]
 8014160:	b2db      	uxtb	r3, r3
 8014162:	2b00      	cmp	r3, #0
 8014164:	bf14      	ite	ne
 8014166:	2301      	movne	r3, #1
 8014168:	2300      	moveq	r3, #0
 801416a:	b2db      	uxtb	r3, r3
 801416c:	2b00      	cmp	r3, #0
 801416e:	d1ee      	bne.n	801414e <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x46>
        }
        assert(state[drawingBlock] == EMPTY);
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	4413      	add	r3, r2
 801417c:	791b      	ldrb	r3, [r3, #4]
 801417e:	b2db      	uxtb	r3, r3
 8014180:	2b00      	cmp	r3, #0
 8014182:	d005      	beq.n	8014190 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x88>
 8014184:	4b33      	ldr	r3, [pc, #204]	@ (8014254 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x14c>)
 8014186:	4a34      	ldr	r2, [pc, #208]	@ (8014258 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x150>)
 8014188:	21aa      	movs	r1, #170	@ 0xaa
 801418a:	4834      	ldr	r0, [pc, #208]	@ (801425c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x154>)
 801418c:	f017 fc96 	bl	802babc <__assert_func>
        state[drawingBlock] = ALLOCATED;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014198:	68fa      	ldr	r2, [r7, #12]
 801419a:	4413      	add	r3, r2
 801419c:	2201      	movs	r2, #1
 801419e:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 80141a0:	88fb      	ldrh	r3, [r7, #6]
 80141a2:	005b      	lsls	r3, r3, #1
 80141a4:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80141ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80141b0:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80141b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ba:	031b      	lsls	r3, r3, #12
 80141bc:	3308      	adds	r3, #8
 80141be:	68fa      	ldr	r2, [r7, #12]
 80141c0:	441a      	add	r2, r3
 80141c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141c4:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80141cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141ce:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	f202 6201 	addw	r2, r2, #1537	@ 0x601
 80141d8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80141e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141e4:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80141e8:	68fa      	ldr	r2, [r7, #12]
 80141ea:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 80141ee:	00db      	lsls	r3, r3, #3
 80141f0:	4413      	add	r3, r2
 80141f2:	460a      	mov	r2, r1
 80141f4:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80141fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141fe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8014208:	00db      	lsls	r3, r3, #3
 801420a:	4413      	add	r3, r2
 801420c:	460a      	mov	r2, r1
 801420e:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 8014210:	8c3a      	ldrh	r2, [r7, #32]
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	429a      	cmp	r2, r3
 8014216:	bfa8      	it	ge
 8014218:	461a      	movge	r2, r3
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014222:	b211      	sxth	r1, r2
 8014224:	68fa      	ldr	r2, [r7, #12]
 8014226:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 801422a:	00db      	lsls	r3, r3, #3
 801422c:	4413      	add	r3, r2
 801422e:	460a      	mov	r2, r1
 8014230:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801423a:	68fa      	ldr	r2, [r7, #12]
 801423c:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8014240:	00db      	lsls	r3, r3, #3
 8014242:	4413      	add	r3, r2
 8014244:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014248:	b29b      	uxth	r3, r3
    }
 801424a:	4618      	mov	r0, r3
 801424c:	3718      	adds	r7, #24
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	0802daa8 	.word	0x0802daa8
 8014258:	0802dac8 	.word	0x0802dac8
 801425c:	0802dbfc 	.word	0x0802dbfc

08014260 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014270:	687a      	ldr	r2, [r7, #4]
 8014272:	4413      	add	r3, r2
 8014274:	791b      	ldrb	r3, [r3, #4]
 8014276:	b2db      	uxtb	r3, r3
 8014278:	2b01      	cmp	r3, #1
 801427a:	d005      	beq.n	8014288 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x28>
 801427c:	4b09      	ldr	r3, [pc, #36]	@ (80142a4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x44>)
 801427e:	4a0a      	ldr	r2, [pc, #40]	@ (80142a8 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 8014280:	21b9      	movs	r1, #185	@ 0xb9
 8014282:	480a      	ldr	r0, [pc, #40]	@ (80142ac <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 8014284:	f017 fc1a 	bl	802babc <__assert_func>
        state[drawingBlock] = DRAWN;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	4413      	add	r3, r2
 8014294:	2202      	movs	r2, #2
 8014296:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8014298:	f7ff fe4e 	bl	8013f38 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	0802dc50 	.word	0x0802dc50
 80142a8:	0802dc74 	.word	0x0802dc74
 80142ac:	0802dbfc 	.word	0x0802dbfc

080142b0 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 80142b0:	b480      	push	{r7}
 80142b2:	b085      	sub	sp, #20
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 80142b8:	2300      	movs	r3, #0
 80142ba:	60fb      	str	r3, [r7, #12]
 80142bc:	e011      	b.n	80142e2 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x32>
        {
            if (state[i] == DRAWN)
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	4413      	add	r3, r2
 80142c4:	3304      	adds	r3, #4
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	2b02      	cmp	r3, #2
 80142cc:	bf0c      	ite	eq
 80142ce:	2301      	moveq	r3, #1
 80142d0:	2300      	movne	r3, #0
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d001      	beq.n	80142dc <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x2c>
            {
                return true;
 80142d8:	2301      	movs	r3, #1
 80142da:	e006      	b.n	80142ea <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	3301      	adds	r3, #1
 80142e0:	60fb      	str	r3, [r7, #12]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	2b02      	cmp	r3, #2
 80142e6:	d9ea      	bls.n	80142be <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0xe>
            }
        }
        return false;
 80142e8:	2300      	movs	r3, #0
    }
 80142ea:	4618      	mov	r0, r3
 80142ec:	3714      	adds	r7, #20
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr
	...

080142f8 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014308:	6a1b      	ldr	r3, [r3, #32]
 801430a:	3301      	adds	r3, #1
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8014312:	6213      	str	r3, [r2, #32]
        if (sendingBlock == blocks)
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801431a:	6a1b      	ldr	r3, [r3, #32]
 801431c:	2b03      	cmp	r3, #3
 801431e:	d105      	bne.n	801432c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x34>
        {
            sendingBlock = 0;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014326:	461a      	mov	r2, r3
 8014328:	2300      	movs	r3, #0
 801432a:	6213      	str	r3, [r2, #32]
        }
        assert(state[sendingBlock] == DRAWN);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014332:	6a1b      	ldr	r3, [r3, #32]
 8014334:	687a      	ldr	r2, [r7, #4]
 8014336:	4413      	add	r3, r2
 8014338:	791b      	ldrb	r3, [r3, #4]
 801433a:	b2db      	uxtb	r3, r3
 801433c:	2b02      	cmp	r3, #2
 801433e:	d005      	beq.n	801434c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x54>
 8014340:	4b13      	ldr	r3, [pc, #76]	@ (8014390 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x98>)
 8014342:	4a14      	ldr	r2, [pc, #80]	@ (8014394 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x9c>)
 8014344:	21dd      	movs	r1, #221	@ 0xdd
 8014346:	4814      	ldr	r0, [pc, #80]	@ (8014398 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa0>)
 8014348:	f017 fbb8 	bl	802babc <__assert_func>
        rect = blockRect[sendingBlock];
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014352:	6a1b      	ldr	r3, [r3, #32]
 8014354:	683a      	ldr	r2, [r7, #0]
 8014356:	6879      	ldr	r1, [r7, #4]
 8014358:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 801435c:	00db      	lsls	r3, r3, #3
 801435e:	440b      	add	r3, r1
 8014360:	cb03      	ldmia	r3!, {r0, r1}
 8014362:	6010      	str	r0, [r2, #0]
 8014364:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801436c:	6a1b      	ldr	r3, [r3, #32]
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	4413      	add	r3, r2
 8014372:	2203      	movs	r2, #3
 8014374:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801437c:	6a1b      	ldr	r3, [r3, #32]
 801437e:	031b      	lsls	r3, r3, #12
 8014380:	3308      	adds	r3, #8
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	4413      	add	r3, r2
    }
 8014386:	4618      	mov	r0, r3
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	0802dd48 	.word	0x0802dd48
 8014394:	0802dd68 	.word	0x0802dd68
 8014398:	0802dbfc 	.word	0x0802dbfc

0801439c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80143aa:	6a1b      	ldr	r3, [r3, #32]
 80143ac:	3301      	adds	r3, #1
 80143ae:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	2b03      	cmp	r3, #3
 80143b4:	d101      	bne.n	80143ba <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x1e>
        {
            nextSendingBlock = 0;
 80143b6:	2300      	movs	r3, #0
 80143b8:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 80143ba:	687a      	ldr	r2, [r7, #4]
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	4413      	add	r3, r2
 80143c0:	3304      	adds	r3, #4
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	2b02      	cmp	r3, #2
 80143c8:	d005      	beq.n	80143d6 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x3a>
 80143ca:	4b08      	ldr	r3, [pc, #32]	@ (80143ec <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 80143cc:	4a08      	ldr	r2, [pc, #32]	@ (80143f0 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 80143ce:	21ea      	movs	r1, #234	@ 0xea
 80143d0:	4808      	ldr	r0, [pc, #32]	@ (80143f4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 80143d2:	f017 fb73 	bl	802babc <__assert_func>
        return blockRect[nextSendingBlock];
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 80143dc:	00db      	lsls	r3, r3, #3
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	4413      	add	r3, r2
    }
 80143e2:	4618      	mov	r0, r3
 80143e4:	3710      	adds	r7, #16
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	0802de68 	.word	0x0802de68
 80143f0:	0802de8c 	.word	0x0802de8c
 80143f4:	0802dbfc 	.word	0x0802dbfc

080143f8 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 80143f8:	b480      	push	{r7}
 80143fa:	b085      	sub	sp, #20
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014408:	3301      	adds	r3, #1
 801440a:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2b03      	cmp	r3, #3
 8014410:	d101      	bne.n	8014416 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13hasEmptyBlockEv+0x1e>
        {
            nextDrawingBlock = 0;
 8014412:	2300      	movs	r3, #0
 8014414:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	4413      	add	r3, r2
 801441c:	3304      	adds	r3, #4
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	b2db      	uxtb	r3, r3
 8014422:	2b00      	cmp	r3, #0
 8014424:	bf0c      	ite	eq
 8014426:	2301      	moveq	r3, #1
 8014428:	2300      	movne	r3, #0
 801442a:	b2db      	uxtb	r3, r3
    }
 801442c:	4618      	mov	r0, r3
 801442e:	3714      	adds	r7, #20
 8014430:	46bd      	mov	sp, r7
 8014432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014436:	4770      	bx	lr

08014438 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014446:	6a1b      	ldr	r3, [r3, #32]
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	4413      	add	r3, r2
 801444c:	791b      	ldrb	r3, [r3, #4]
 801444e:	b2db      	uxtb	r3, r3
 8014450:	2b03      	cmp	r3, #3
 8014452:	d005      	beq.n	8014460 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x28>
 8014454:	4b08      	ldr	r3, [pc, #32]	@ (8014478 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x40>)
 8014456:	4a09      	ldr	r2, [pc, #36]	@ (801447c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8014458:	21ff      	movs	r1, #255	@ 0xff
 801445a:	4809      	ldr	r0, [pc, #36]	@ (8014480 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 801445c:	f017 fb2e 	bl	802babc <__assert_func>
        state[sendingBlock] = EMPTY;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014466:	6a1b      	ldr	r3, [r3, #32]
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	4413      	add	r3, r2
 801446c:	2200      	movs	r2, #0
 801446e:	711a      	strb	r2, [r3, #4]
    }
 8014470:	bf00      	nop
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}
 8014478:	0802df6c 	.word	0x0802df6c
 801447c:	0802df8c 	.word	0x0802df8c
 8014480:	0802dbfc 	.word	0x0802dbfc

08014484 <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8014484:	b580      	push	{r7, lr}
 8014486:	af00      	add	r7, sp, #0
 8014488:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801448c:	2001      	movs	r0, #1
 801448e:	f7ff fe19 	bl	80140c4 <_Z41__static_initialization_and_destruction_0ii>
 8014492:	bd80      	pop	{r7, pc}

08014494 <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8014494:	b580      	push	{r7, lr}
 8014496:	af00      	add	r7, sp, #0
 8014498:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801449c:	2000      	movs	r0, #0
 801449e:	f7ff fe11 	bl	80140c4 <_Z41__static_initialization_and_destruction_0ii>
 80144a2:	bd80      	pop	{r7, pc}

080144a4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80144a4:	8880      	ldrh	r0, [r0, #4]
 80144a6:	4770      	bx	lr

080144a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80144a8:	b570      	push	{r4, r5, r6, lr}
 80144aa:	6803      	ldr	r3, [r0, #0]
 80144ac:	4605      	mov	r5, r0
 80144ae:	460c      	mov	r4, r1
 80144b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144b2:	2100      	movs	r1, #0
 80144b4:	4798      	blx	r3
 80144b6:	682b      	ldr	r3, [r5, #0]
 80144b8:	4606      	mov	r6, r0
 80144ba:	6a1b      	ldr	r3, [r3, #32]
 80144bc:	4628      	mov	r0, r5
 80144be:	4798      	blx	r3
 80144c0:	1ba4      	subs	r4, r4, r6
 80144c2:	b2a4      	uxth	r4, r4
 80144c4:	fbb4 f0f0 	udiv	r0, r4, r0
 80144c8:	bd70      	pop	{r4, r5, r6, pc}

080144ca <_ZN8touchgfx17AbstractPartition5clearEv>:
 80144ca:	2300      	movs	r3, #0
 80144cc:	8083      	strh	r3, [r0, #4]
 80144ce:	4770      	bx	lr

080144d0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80144d0:	b510      	push	{r4, lr}
 80144d2:	4604      	mov	r4, r0
 80144d4:	6803      	ldr	r3, [r0, #0]
 80144d6:	8881      	ldrh	r1, [r0, #4]
 80144d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144da:	4798      	blx	r3
 80144dc:	88a3      	ldrh	r3, [r4, #4]
 80144de:	3301      	adds	r3, #1
 80144e0:	80a3      	strh	r3, [r4, #4]
 80144e2:	bd10      	pop	{r4, pc}

080144e4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80144e4:	6803      	ldr	r3, [r0, #0]
 80144e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144e8:	4718      	bx	r3

080144ea <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80144ea:	4770      	bx	lr

080144ec <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80144ec:	4a02      	ldr	r2, [pc, #8]	@ (80144f8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80144ee:	6002      	str	r2, [r0, #0]
 80144f0:	2200      	movs	r2, #0
 80144f2:	8082      	strh	r2, [r0, #4]
 80144f4:	4770      	bx	lr
 80144f6:	bf00      	nop
 80144f8:	0802ee54 	.word	0x0802ee54

080144fc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80144fc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80144fe:	2000      	movs	r0, #0
 8014500:	b12b      	cbz	r3, 801450e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014502:	b920      	cbnz	r0, 801450e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014504:	1a5a      	subs	r2, r3, r1
 8014506:	4250      	negs	r0, r2
 8014508:	4150      	adcs	r0, r2
 801450a:	699b      	ldr	r3, [r3, #24]
 801450c:	e7f8      	b.n	8014500 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801450e:	4770      	bx	lr

08014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014510:	2300      	movs	r3, #0
 8014512:	6148      	str	r0, [r1, #20]
 8014514:	618b      	str	r3, [r1, #24]
 8014516:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014518:	b913      	cbnz	r3, 8014520 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801451a:	6281      	str	r1, [r0, #40]	@ 0x28
 801451c:	4770      	bx	lr
 801451e:	4613      	mov	r3, r2
 8014520:	699a      	ldr	r2, [r3, #24]
 8014522:	2a00      	cmp	r2, #0
 8014524:	d1fb      	bne.n	801451e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8014526:	6199      	str	r1, [r3, #24]
 8014528:	4770      	bx	lr

0801452a <_ZN8touchgfx9Container9removeAllEv>:
 801452a:	2200      	movs	r2, #0
 801452c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801452e:	b123      	cbz	r3, 801453a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014530:	6999      	ldr	r1, [r3, #24]
 8014532:	6281      	str	r1, [r0, #40]	@ 0x28
 8014534:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014538:	e7f8      	b.n	801452c <_ZN8touchgfx9Container9removeAllEv+0x2>
 801453a:	4770      	bx	lr

0801453c <_ZN8touchgfx9Container6unlinkEv>:
 801453c:	2300      	movs	r3, #0
 801453e:	6283      	str	r3, [r0, #40]	@ 0x28
 8014540:	4770      	bx	lr

08014542 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014542:	2200      	movs	r2, #0
 8014544:	8002      	strh	r2, [r0, #0]
 8014546:	8042      	strh	r2, [r0, #2]
 8014548:	8082      	strh	r2, [r0, #4]
 801454a:	80c2      	strh	r2, [r0, #6]
 801454c:	4770      	bx	lr

0801454e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801454e:	b570      	push	{r4, r5, r6, lr}
 8014550:	460d      	mov	r5, r1
 8014552:	4616      	mov	r6, r2
 8014554:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014556:	b13c      	cbz	r4, 8014568 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014558:	6823      	ldr	r3, [r4, #0]
 801455a:	4620      	mov	r0, r4
 801455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801455e:	4632      	mov	r2, r6
 8014560:	4629      	mov	r1, r5
 8014562:	4798      	blx	r3
 8014564:	69a4      	ldr	r4, [r4, #24]
 8014566:	e7f6      	b.n	8014556 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014568:	bd70      	pop	{r4, r5, r6, pc}

0801456a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801456a:	b538      	push	{r3, r4, r5, lr}
 801456c:	460d      	mov	r5, r1
 801456e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014570:	b134      	cbz	r4, 8014580 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014572:	682b      	ldr	r3, [r5, #0]
 8014574:	4621      	mov	r1, r4
 8014576:	689b      	ldr	r3, [r3, #8]
 8014578:	4628      	mov	r0, r5
 801457a:	4798      	blx	r3
 801457c:	69a4      	ldr	r4, [r4, #24]
 801457e:	e7f7      	b.n	8014570 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014580:	bd38      	pop	{r3, r4, r5, pc}

08014582 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014582:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014584:	b19b      	cbz	r3, 80145ae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014586:	428b      	cmp	r3, r1
 8014588:	d109      	bne.n	801459e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801458a:	2100      	movs	r1, #0
 801458c:	699a      	ldr	r2, [r3, #24]
 801458e:	6159      	str	r1, [r3, #20]
 8014590:	6282      	str	r2, [r0, #40]	@ 0x28
 8014592:	b902      	cbnz	r2, 8014596 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014594:	4770      	bx	lr
 8014596:	6199      	str	r1, [r3, #24]
 8014598:	4770      	bx	lr
 801459a:	4613      	mov	r3, r2
 801459c:	b13a      	cbz	r2, 80145ae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801459e:	699a      	ldr	r2, [r3, #24]
 80145a0:	428a      	cmp	r2, r1
 80145a2:	d1fa      	bne.n	801459a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80145a4:	698a      	ldr	r2, [r1, #24]
 80145a6:	619a      	str	r2, [r3, #24]
 80145a8:	2300      	movs	r3, #0
 80145aa:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80145ae:	4770      	bx	lr

080145b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80145b0:	b410      	push	{r4}
 80145b2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80145b4:	4604      	mov	r4, r0
 80145b6:	b92b      	cbnz	r3, 80145c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80145b8:	6803      	ldr	r3, [r0, #0]
 80145ba:	4611      	mov	r1, r2
 80145bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80145be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145c2:	4718      	bx	r3
 80145c4:	b941      	cbnz	r1, 80145d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80145c6:	6193      	str	r3, [r2, #24]
 80145c8:	6282      	str	r2, [r0, #40]	@ 0x28
 80145ca:	6154      	str	r4, [r2, #20]
 80145cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145d0:	4770      	bx	lr
 80145d2:	4603      	mov	r3, r0
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d0f9      	beq.n	80145cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80145d8:	4299      	cmp	r1, r3
 80145da:	6998      	ldr	r0, [r3, #24]
 80145dc:	d1f9      	bne.n	80145d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80145de:	6190      	str	r0, [r2, #24]
 80145e0:	618a      	str	r2, [r1, #24]
 80145e2:	e7f2      	b.n	80145ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080145e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80145e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145e8:	461f      	mov	r7, r3
 80145ea:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80145ee:	460d      	mov	r5, r1
 80145f0:	4616      	mov	r6, r2
 80145f2:	b103      	cbz	r3, 80145f6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80145f4:	6038      	str	r0, [r7, #0]
 80145f6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80145f8:	b314      	cbz	r4, 8014640 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80145fa:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80145fe:	b1eb      	cbz	r3, 801463c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014600:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014604:	428d      	cmp	r5, r1
 8014606:	db19      	blt.n	801463c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014608:	8923      	ldrh	r3, [r4, #8]
 801460a:	b289      	uxth	r1, r1
 801460c:	440b      	add	r3, r1
 801460e:	b21b      	sxth	r3, r3
 8014610:	429d      	cmp	r5, r3
 8014612:	da13      	bge.n	801463c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014614:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014618:	4296      	cmp	r6, r2
 801461a:	db0f      	blt.n	801463c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801461c:	8963      	ldrh	r3, [r4, #10]
 801461e:	b292      	uxth	r2, r2
 8014620:	4413      	add	r3, r2
 8014622:	b21b      	sxth	r3, r3
 8014624:	429e      	cmp	r6, r3
 8014626:	da09      	bge.n	801463c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014628:	6823      	ldr	r3, [r4, #0]
 801462a:	1ab2      	subs	r2, r6, r2
 801462c:	1a69      	subs	r1, r5, r1
 801462e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8014632:	b212      	sxth	r2, r2
 8014634:	463b      	mov	r3, r7
 8014636:	b209      	sxth	r1, r1
 8014638:	4620      	mov	r0, r4
 801463a:	47c0      	blx	r8
 801463c:	69a4      	ldr	r4, [r4, #24]
 801463e:	e7db      	b.n	80145f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014644 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014648:	4c6c      	ldr	r4, [pc, #432]	@ (80147fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 801464a:	b0a1      	sub	sp, #132	@ 0x84
 801464c:	6824      	ldr	r4, [r4, #0]
 801464e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8014650:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8014654:	2400      	movs	r4, #0
 8014656:	802c      	strh	r4, [r5, #0]
 8014658:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 801465a:	4606      	mov	r6, r0
 801465c:	802c      	strh	r4, [r5, #0]
 801465e:	601c      	str	r4, [r3, #0]
 8014660:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014664:	9303      	str	r3, [sp, #12]
 8014666:	f7ff ffbd 	bl	80145e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801466a:	f1b9 0f03 	cmp.w	r9, #3
 801466e:	f340 80bf 	ble.w	80147f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8014672:	4631      	mov	r1, r6
 8014674:	a80c      	add	r0, sp, #48	@ 0x30
 8014676:	f006 fc15 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801467a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801467e:	9306      	str	r3, [sp, #24]
 8014680:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014684:	9307      	str	r3, [sp, #28]
 8014686:	9b03      	ldr	r3, [sp, #12]
 8014688:	f8d3 a000 	ldr.w	sl, [r3]
 801468c:	f1ba 0f00 	cmp.w	sl, #0
 8014690:	f000 80b1 	beq.w	80147f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8014694:	4651      	mov	r1, sl
 8014696:	a810      	add	r0, sp, #64	@ 0x40
 8014698:	f006 fc04 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801469c:	2002      	movs	r0, #2
 801469e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80146a2:	9b01      	ldr	r3, [sp, #4]
 80146a4:	fb91 f1f0 	sdiv	r1, r1, r0
 80146a8:	9a06      	ldr	r2, [sp, #24]
 80146aa:	189d      	adds	r5, r3, r2
 80146ac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80146b0:	9a07      	ldr	r2, [sp, #28]
 80146b2:	4419      	add	r1, r3
 80146b4:	9b02      	ldr	r3, [sp, #8]
 80146b6:	1a6d      	subs	r5, r5, r1
 80146b8:	4413      	add	r3, r2
 80146ba:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80146be:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80146c2:	fb92 f2f0 	sdiv	r2, r2, r0
 80146c6:	440a      	add	r2, r1
 80146c8:	1a9b      	subs	r3, r3, r2
 80146ca:	435b      	muls	r3, r3
 80146cc:	fb05 3505 	mla	r5, r5, r5, r3
 80146d0:	4f4b      	ldr	r7, [pc, #300]	@ (8014800 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80146d2:	ac10      	add	r4, sp, #64	@ 0x40
 80146d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146e0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80146e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80146e8:	2303      	movs	r3, #3
 80146ea:	f1b9 0f0c 	cmp.w	r9, #12
 80146ee:	bfda      	itte	le
 80146f0:	f109 32ff 	addle.w	r2, r9, #4294967295
 80146f4:	fb92 f8f3 	sdivle	r8, r2, r3
 80146f8:	4698      	movgt	r8, r3
 80146fa:	2400      	movs	r4, #0
 80146fc:	f8cd 9000 	str.w	r9, [sp]
 8014700:	1c63      	adds	r3, r4, #1
 8014702:	9308      	str	r3, [sp, #32]
 8014704:	9b00      	ldr	r3, [sp, #0]
 8014706:	f04f 0b00 	mov.w	fp, #0
 801470a:	fb93 f3f8 	sdiv	r3, r3, r8
 801470e:	f004 0401 	and.w	r4, r4, #1
 8014712:	aa10      	add	r2, sp, #64	@ 0x40
 8014714:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014718:	b29b      	uxth	r3, r3
 801471a:	3404      	adds	r4, #4
 801471c:	9304      	str	r3, [sp, #16]
 801471e:	9a04      	ldr	r2, [sp, #16]
 8014720:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014724:	fb13 f302 	smulbb	r3, r3, r2
 8014728:	9a01      	ldr	r2, [sp, #4]
 801472a:	b29b      	uxth	r3, r3
 801472c:	1899      	adds	r1, r3, r2
 801472e:	9305      	str	r3, [sp, #20]
 8014730:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014734:	b209      	sxth	r1, r1
 8014736:	4299      	cmp	r1, r3
 8014738:	db4d      	blt.n	80147d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801473a:	8932      	ldrh	r2, [r6, #8]
 801473c:	4413      	add	r3, r2
 801473e:	b21b      	sxth	r3, r3
 8014740:	4299      	cmp	r1, r3
 8014742:	da48      	bge.n	80147d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014744:	9b04      	ldr	r3, [sp, #16]
 8014746:	6827      	ldr	r7, [r4, #0]
 8014748:	fb17 f703 	smulbb	r7, r7, r3
 801474c:	9b02      	ldr	r3, [sp, #8]
 801474e:	b2bf      	uxth	r7, r7
 8014750:	18fa      	adds	r2, r7, r3
 8014752:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014756:	b212      	sxth	r2, r2
 8014758:	429a      	cmp	r2, r3
 801475a:	db3c      	blt.n	80147d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801475c:	8970      	ldrh	r0, [r6, #10]
 801475e:	4403      	add	r3, r0
 8014760:	b21b      	sxth	r3, r3
 8014762:	429a      	cmp	r2, r3
 8014764:	da37      	bge.n	80147d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014766:	2300      	movs	r3, #0
 8014768:	4630      	mov	r0, r6
 801476a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801476c:	ab0b      	add	r3, sp, #44	@ 0x2c
 801476e:	f7ff ff39 	bl	80145e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014772:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014774:	b37a      	cbz	r2, 80147d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014776:	4552      	cmp	r2, sl
 8014778:	d02d      	beq.n	80147d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801477a:	4611      	mov	r1, r2
 801477c:	a80e      	add	r0, sp, #56	@ 0x38
 801477e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014780:	f006 fb90 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014784:	f04f 0e02 	mov.w	lr, #2
 8014788:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 801478c:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8014790:	fb91 f1fe 	sdiv	r1, r1, lr
 8014794:	fb9c fcfe 	sdiv	ip, ip, lr
 8014798:	9a06      	ldr	r2, [sp, #24]
 801479a:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801479e:	9b01      	ldr	r3, [sp, #4]
 80147a0:	4401      	add	r1, r0
 80147a2:	4413      	add	r3, r2
 80147a4:	1a58      	subs	r0, r3, r1
 80147a6:	9a07      	ldr	r2, [sp, #28]
 80147a8:	9b02      	ldr	r3, [sp, #8]
 80147aa:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80147ae:	4413      	add	r3, r2
 80147b0:	448c      	add	ip, r1
 80147b2:	eba3 030c 	sub.w	r3, r3, ip
 80147b6:	435b      	muls	r3, r3
 80147b8:	fb00 3300 	mla	r3, r0, r0, r3
 80147bc:	42ab      	cmp	r3, r5
 80147be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80147c0:	d208      	bcs.n	80147d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 80147c2:	461d      	mov	r5, r3
 80147c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80147c6:	9803      	ldr	r0, [sp, #12]
 80147c8:	6001      	str	r1, [r0, #0]
 80147ca:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80147cc:	9805      	ldr	r0, [sp, #20]
 80147ce:	8008      	strh	r0, [r1, #0]
 80147d0:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80147d2:	800f      	strh	r7, [r1, #0]
 80147d4:	4692      	mov	sl, r2
 80147d6:	f10b 0b01 	add.w	fp, fp, #1
 80147da:	f1bb 0f04 	cmp.w	fp, #4
 80147de:	f104 0408 	add.w	r4, r4, #8
 80147e2:	d19c      	bne.n	801471e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 80147e4:	9b00      	ldr	r3, [sp, #0]
 80147e6:	9c08      	ldr	r4, [sp, #32]
 80147e8:	444b      	add	r3, r9
 80147ea:	4544      	cmp	r4, r8
 80147ec:	9300      	str	r3, [sp, #0]
 80147ee:	d187      	bne.n	8014700 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 80147f0:	b021      	add	sp, #132	@ 0x84
 80147f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f6:	f04f 35ff 	mov.w	r5, #4294967295
 80147fa:	e769      	b.n	80146d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80147fc:	20011f2c 	.word	0x20011f2c
 8014800:	0802e05c 	.word	0x0802e05c

08014804 <_ZN8touchgfx4RectaNERKS0_>:
 8014804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014808:	f9b1 7000 	ldrsh.w	r7, [r1]
 801480c:	888c      	ldrh	r4, [r1, #4]
 801480e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014812:	443c      	add	r4, r7
 8014814:	b2a4      	uxth	r4, r4
 8014816:	fa0f f884 	sxth.w	r8, r4
 801481a:	45c1      	cmp	r9, r8
 801481c:	da2f      	bge.n	801487e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801481e:	8882      	ldrh	r2, [r0, #4]
 8014820:	444a      	add	r2, r9
 8014822:	b292      	uxth	r2, r2
 8014824:	fa0f fe82 	sxth.w	lr, r2
 8014828:	4577      	cmp	r7, lr
 801482a:	da28      	bge.n	801487e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801482c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014830:	88cb      	ldrh	r3, [r1, #6]
 8014832:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014836:	442b      	add	r3, r5
 8014838:	b21b      	sxth	r3, r3
 801483a:	429e      	cmp	r6, r3
 801483c:	da1f      	bge.n	801487e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801483e:	88c3      	ldrh	r3, [r0, #6]
 8014840:	4433      	add	r3, r6
 8014842:	b29b      	uxth	r3, r3
 8014844:	fa0f fc83 	sxth.w	ip, r3
 8014848:	4565      	cmp	r5, ip
 801484a:	da18      	bge.n	801487e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801484c:	454f      	cmp	r7, r9
 801484e:	bfb8      	it	lt
 8014850:	464f      	movlt	r7, r9
 8014852:	42b5      	cmp	r5, r6
 8014854:	bfb8      	it	lt
 8014856:	4635      	movlt	r5, r6
 8014858:	45f0      	cmp	r8, lr
 801485a:	bfd8      	it	le
 801485c:	4622      	movle	r2, r4
 801485e:	1bd2      	subs	r2, r2, r7
 8014860:	8082      	strh	r2, [r0, #4]
 8014862:	884a      	ldrh	r2, [r1, #2]
 8014864:	88c9      	ldrh	r1, [r1, #6]
 8014866:	8007      	strh	r7, [r0, #0]
 8014868:	440a      	add	r2, r1
 801486a:	b292      	uxth	r2, r2
 801486c:	b211      	sxth	r1, r2
 801486e:	458c      	cmp	ip, r1
 8014870:	bfa8      	it	ge
 8014872:	4613      	movge	r3, r2
 8014874:	1b5b      	subs	r3, r3, r5
 8014876:	80c3      	strh	r3, [r0, #6]
 8014878:	8045      	strh	r5, [r0, #2]
 801487a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801487e:	2300      	movs	r3, #0
 8014880:	8003      	strh	r3, [r0, #0]
 8014882:	8043      	strh	r3, [r0, #2]
 8014884:	8083      	strh	r3, [r0, #4]
 8014886:	80c3      	strh	r3, [r0, #6]
 8014888:	e7f7      	b.n	801487a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801488a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801488a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801488e:	2b00      	cmp	r3, #0
 8014890:	dd06      	ble.n	80148a0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014892:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014896:	2800      	cmp	r0, #0
 8014898:	bfcc      	ite	gt
 801489a:	2000      	movgt	r0, #0
 801489c:	2001      	movle	r0, #1
 801489e:	4770      	bx	lr
 80148a0:	2001      	movs	r0, #1
 80148a2:	4770      	bx	lr

080148a4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80148a4:	2300      	movs	r3, #0
 80148a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148aa:	4604      	mov	r4, r0
 80148ac:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80148ae:	8003      	strh	r3, [r0, #0]
 80148b0:	8043      	strh	r3, [r0, #2]
 80148b2:	8083      	strh	r3, [r0, #4]
 80148b4:	80c3      	strh	r3, [r0, #6]
 80148b6:	2d00      	cmp	r5, #0
 80148b8:	d040      	beq.n	801493c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80148ba:	1d28      	adds	r0, r5, #4
 80148bc:	f7ff ffe5 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 80148c0:	b988      	cbnz	r0, 80148e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80148c2:	4620      	mov	r0, r4
 80148c4:	f7ff ffe1 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 80148c8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80148cc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80148d0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80148d4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80148d8:	b138      	cbz	r0, 80148ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80148da:	8022      	strh	r2, [r4, #0]
 80148dc:	8063      	strh	r3, [r4, #2]
 80148de:	f8a4 e004 	strh.w	lr, [r4, #4]
 80148e2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80148e6:	69ad      	ldr	r5, [r5, #24]
 80148e8:	e7e5      	b.n	80148b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80148ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 80148ee:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80148f2:	4290      	cmp	r0, r2
 80148f4:	4607      	mov	r7, r0
 80148f6:	bfa8      	it	ge
 80148f8:	4617      	movge	r7, r2
 80148fa:	4299      	cmp	r1, r3
 80148fc:	460e      	mov	r6, r1
 80148fe:	bfa8      	it	ge
 8014900:	461e      	movge	r6, r3
 8014902:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014906:	4472      	add	r2, lr
 8014908:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801490c:	4440      	add	r0, r8
 801490e:	4471      	add	r1, lr
 8014910:	4463      	add	r3, ip
 8014912:	b200      	sxth	r0, r0
 8014914:	b212      	sxth	r2, r2
 8014916:	b209      	sxth	r1, r1
 8014918:	b21b      	sxth	r3, r3
 801491a:	4290      	cmp	r0, r2
 801491c:	bfac      	ite	ge
 801491e:	ebc7 0200 	rsbge	r2, r7, r0
 8014922:	ebc7 0202 	rsblt	r2, r7, r2
 8014926:	4299      	cmp	r1, r3
 8014928:	bfac      	ite	ge
 801492a:	ebc6 0301 	rsbge	r3, r6, r1
 801492e:	ebc6 0303 	rsblt	r3, r6, r3
 8014932:	8027      	strh	r7, [r4, #0]
 8014934:	8066      	strh	r6, [r4, #2]
 8014936:	80a2      	strh	r2, [r4, #4]
 8014938:	80e3      	strh	r3, [r4, #6]
 801493a:	e7d4      	b.n	80148e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801493c:	4620      	mov	r0, r4
 801493e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014942 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014942:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014946:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801494a:	b383      	cbz	r3, 80149ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801494c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801494e:	b374      	cbz	r4, 80149ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014950:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014954:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014958:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801495c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014960:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014964:	b303      	cbz	r3, 80149a8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014966:	4668      	mov	r0, sp
 8014968:	1d21      	adds	r1, r4, #4
 801496a:	f8ad 5000 	strh.w	r5, [sp]
 801496e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014972:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014976:	f8ad 8006 	strh.w	r8, [sp, #6]
 801497a:	f7ff ff43 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801497e:	4668      	mov	r0, sp
 8014980:	f7ff ff83 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014984:	b980      	cbnz	r0, 80149a8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014986:	f8bd 3000 	ldrh.w	r3, [sp]
 801498a:	88a2      	ldrh	r2, [r4, #4]
 801498c:	4669      	mov	r1, sp
 801498e:	1a9b      	subs	r3, r3, r2
 8014990:	f8ad 3000 	strh.w	r3, [sp]
 8014994:	88e2      	ldrh	r2, [r4, #6]
 8014996:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801499a:	4620      	mov	r0, r4
 801499c:	1a9b      	subs	r3, r3, r2
 801499e:	f8ad 3002 	strh.w	r3, [sp, #2]
 80149a2:	6823      	ldr	r3, [r4, #0]
 80149a4:	689b      	ldr	r3, [r3, #8]
 80149a6:	4798      	blx	r3
 80149a8:	69a4      	ldr	r4, [r4, #24]
 80149aa:	2c00      	cmp	r4, #0
 80149ac:	d1d8      	bne.n	8014960 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80149ae:	b002      	add	sp, #8
 80149b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080149b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80149b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80149b6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80149ba:	460d      	mov	r5, r1
 80149bc:	4616      	mov	r6, r2
 80149be:	b323      	cbz	r3, 8014a0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80149c0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80149c2:	b314      	cbz	r4, 8014a0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80149c4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80149c8:	b1eb      	cbz	r3, 8014a06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80149ca:	466b      	mov	r3, sp
 80149cc:	6828      	ldr	r0, [r5, #0]
 80149ce:	6869      	ldr	r1, [r5, #4]
 80149d0:	c303      	stmia	r3!, {r0, r1}
 80149d2:	4668      	mov	r0, sp
 80149d4:	1d21      	adds	r1, r4, #4
 80149d6:	f7ff ff15 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 80149da:	4668      	mov	r0, sp
 80149dc:	f7ff ff55 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 80149e0:	b988      	cbnz	r0, 8014a06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80149e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80149e6:	88a2      	ldrh	r2, [r4, #4]
 80149e8:	4669      	mov	r1, sp
 80149ea:	1a9b      	subs	r3, r3, r2
 80149ec:	f8ad 3000 	strh.w	r3, [sp]
 80149f0:	88e2      	ldrh	r2, [r4, #6]
 80149f2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80149f6:	4620      	mov	r0, r4
 80149f8:	1a9b      	subs	r3, r3, r2
 80149fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80149fe:	6823      	ldr	r3, [r4, #0]
 8014a00:	4632      	mov	r2, r6
 8014a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a04:	4798      	blx	r3
 8014a06:	69a4      	ldr	r4, [r4, #24]
 8014a08:	e7db      	b.n	80149c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014a0a:	b002      	add	sp, #8
 8014a0c:	bd70      	pop	{r4, r5, r6, pc}

08014a0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014a0e:	b513      	push	{r0, r1, r4, lr}
 8014a10:	6803      	ldr	r3, [r0, #0]
 8014a12:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8014a16:	2300      	movs	r3, #0
 8014a18:	e9cd 3300 	strd	r3, r3, [sp]
 8014a1c:	466b      	mov	r3, sp
 8014a1e:	47a0      	blx	r4
 8014a20:	b002      	add	sp, #8
 8014a22:	bd10      	pop	{r4, pc}

08014a24 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014a24:	2301      	movs	r3, #1
 8014a26:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014a2a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014a2e:	4770      	bx	lr

08014a30 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014a30:	2301      	movs	r3, #1
 8014a32:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014a36:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014a3a:	4770      	bx	lr

08014a3c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014a3c:	2201      	movs	r2, #1
 8014a3e:	6843      	ldr	r3, [r0, #4]
 8014a40:	725a      	strb	r2, [r3, #9]
 8014a42:	6840      	ldr	r0, [r0, #4]
 8014a44:	6803      	ldr	r3, [r0, #0]
 8014a46:	691b      	ldr	r3, [r3, #16]
 8014a48:	4718      	bx	r3

08014a4a <_ZN8touchgfx3HAL8flushDMAEv>:
 8014a4a:	6840      	ldr	r0, [r0, #4]
 8014a4c:	6803      	ldr	r3, [r0, #0]
 8014a4e:	689b      	ldr	r3, [r3, #8]
 8014a50:	4718      	bx	r3

08014a52 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014a52:	b530      	push	{r4, r5, lr}
 8014a54:	b08b      	sub	sp, #44	@ 0x2c
 8014a56:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8014a5a:	6804      	ldr	r4, [r0, #0]
 8014a5c:	9509      	str	r5, [sp, #36]	@ 0x24
 8014a5e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8014a62:	9508      	str	r5, [sp, #32]
 8014a64:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8014a68:	9507      	str	r5, [sp, #28]
 8014a6a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014a6e:	9506      	str	r5, [sp, #24]
 8014a70:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8014a74:	9505      	str	r5, [sp, #20]
 8014a76:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014a7a:	9504      	str	r5, [sp, #16]
 8014a7c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014a80:	9503      	str	r5, [sp, #12]
 8014a82:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8014a86:	9502      	str	r5, [sp, #8]
 8014a88:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014a8c:	e9cd 3500 	strd	r3, r5, [sp]
 8014a90:	4613      	mov	r3, r2
 8014a92:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8014a94:	2200      	movs	r2, #0
 8014a96:	47a0      	blx	r4
 8014a98:	b00b      	add	sp, #44	@ 0x2c
 8014a9a:	bd30      	pop	{r4, r5, pc}

08014a9c <_ZN8touchgfx3HAL10beginFrameEv>:
 8014a9c:	4b04      	ldr	r3, [pc, #16]	@ (8014ab0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	b123      	cbz	r3, 8014aac <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014aa2:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8014aa6:	f080 0001 	eor.w	r0, r0, #1
 8014aaa:	4770      	bx	lr
 8014aac:	2001      	movs	r0, #1
 8014aae:	4770      	bx	lr
 8014ab0:	20011f2a 	.word	0x20011f2a

08014ab4 <_ZN8touchgfx3HAL8endFrameEv>:
 8014ab4:	b510      	push	{r4, lr}
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	6840      	ldr	r0, [r0, #4]
 8014aba:	6803      	ldr	r3, [r0, #0]
 8014abc:	689b      	ldr	r3, [r3, #8]
 8014abe:	4798      	blx	r3
 8014ac0:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8014ac4:	b113      	cbz	r3, 8014acc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014acc:	bd10      	pop	{r4, pc}

08014ace <_ZN8touchgfx3HAL10initializeEv>:
 8014ace:	b510      	push	{r4, lr}
 8014ad0:	4604      	mov	r4, r0
 8014ad2:	f7fd ffb9 	bl	8012a48 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014ad6:	f7fd fcff 	bl	80124d8 <_ZN8touchgfx4GPIO4initEv>
 8014ada:	6860      	ldr	r0, [r4, #4]
 8014adc:	6803      	ldr	r3, [r0, #0]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	4798      	blx	r3
 8014ae2:	68e0      	ldr	r0, [r4, #12]
 8014ae4:	6803      	ldr	r3, [r0, #0]
 8014ae6:	689b      	ldr	r3, [r3, #8]
 8014ae8:	4798      	blx	r3
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	4620      	mov	r0, r4
 8014aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014af4:	4718      	bx	r3

08014af6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014af6:	4604      	mov	r4, r0
 8014af8:	b508      	push	{r3, lr}
 8014afa:	6803      	ldr	r3, [r0, #0]
 8014afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b00:	4798      	blx	r3
 8014b02:	6823      	ldr	r3, [r4, #0]
 8014b04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014b06:	4620      	mov	r0, r4
 8014b08:	4798      	blx	r3
 8014b0a:	f7fe f813 	bl	8012b34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014b0e:	6823      	ldr	r3, [r4, #0]
 8014b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b12:	e7f8      	b.n	8014b06 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014b14 <_ZN8touchgfx3HAL4tickEv>:
 8014b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014b16:	6803      	ldr	r3, [r0, #0]
 8014b18:	4604      	mov	r4, r0
 8014b1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014b1e:	4798      	blx	r3
 8014b20:	4d59      	ldr	r5, [pc, #356]	@ (8014c88 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8014b22:	2800      	cmp	r0, #0
 8014b24:	f000 8095 	beq.w	8014c52 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8014b28:	2600      	movs	r6, #0
 8014b2a:	2001      	movs	r0, #1
 8014b2c:	f7fd fcdc 	bl	80124e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014b30:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8014b34:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8014b38:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014b3c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8014b40:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8014b44:	b133      	cbz	r3, 8014b54 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014b46:	6823      	ldr	r3, [r4, #0]
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014b4e:	4798      	blx	r3
 8014b50:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014b54:	2601      	movs	r6, #1
 8014b56:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8014b5a:	6862      	ldr	r2, [r4, #4]
 8014b5c:	f083 0301 	eor.w	r3, r3, #1
 8014b60:	7253      	strb	r3, [r2, #9]
 8014b62:	702e      	strb	r6, [r5, #0]
 8014b64:	f005 f88c 	bl	8019c80 <_ZN8touchgfx11Application11getInstanceEv>
 8014b68:	6803      	ldr	r3, [r0, #0]
 8014b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b6c:	4798      	blx	r3
 8014b6e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014b72:	b90b      	cbnz	r3, 8014b78 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014b74:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014b78:	f005 f882 	bl	8019c80 <_ZN8touchgfx11Application11getInstanceEv>
 8014b7c:	6803      	ldr	r3, [r0, #0]
 8014b7e:	695b      	ldr	r3, [r3, #20]
 8014b80:	4798      	blx	r3
 8014b82:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014b84:	6803      	ldr	r3, [r0, #0]
 8014b86:	691b      	ldr	r3, [r3, #16]
 8014b88:	4798      	blx	r3
 8014b8a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014b8e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8014b92:	3b01      	subs	r3, #1
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014b9a:	b10a      	cbz	r2, 8014ba0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d1eb      	bne.n	8014b78 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8014c8c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014ba2:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014ba6:	7813      	ldrb	r3, [r2, #0]
 8014ba8:	3301      	adds	r3, #1
 8014baa:	b25b      	sxtb	r3, r3
 8014bac:	4299      	cmp	r1, r3
 8014bae:	7013      	strb	r3, [r2, #0]
 8014bb0:	dc10      	bgt.n	8014bd4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	68e0      	ldr	r0, [r4, #12]
 8014bb6:	7013      	strb	r3, [r2, #0]
 8014bb8:	6803      	ldr	r3, [r0, #0]
 8014bba:	aa03      	add	r2, sp, #12
 8014bbc:	68db      	ldr	r3, [r3, #12]
 8014bbe:	a902      	add	r1, sp, #8
 8014bc0:	4798      	blx	r3
 8014bc2:	6823      	ldr	r3, [r4, #0]
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	d050      	beq.n	8014c6a <_ZN8touchgfx3HAL4tickEv+0x156>
 8014bc8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014bcc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014bd0:	4620      	mov	r0, r4
 8014bd2:	4798      	blx	r3
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	6960      	ldr	r0, [r4, #20]
 8014bd8:	f88d 3007 	strb.w	r3, [sp, #7]
 8014bdc:	b158      	cbz	r0, 8014bf6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014bde:	6803      	ldr	r3, [r0, #0]
 8014be0:	f10d 0107 	add.w	r1, sp, #7
 8014be4:	68db      	ldr	r3, [r3, #12]
 8014be6:	4798      	blx	r3
 8014be8:	b128      	cbz	r0, 8014bf6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014bea:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014bec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014bf0:	6803      	ldr	r3, [r0, #0]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	4798      	blx	r3
 8014bf6:	f104 001c 	add.w	r0, r4, #28
 8014bfa:	f016 fb89 	bl	802b310 <_ZN8touchgfx8Gestures4tickEv>
 8014bfe:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8014c02:	b30b      	cbz	r3, 8014c48 <_ZN8touchgfx3HAL4tickEv+0x134>
 8014c04:	6920      	ldr	r0, [r4, #16]
 8014c06:	6803      	ldr	r3, [r0, #0]
 8014c08:	691b      	ldr	r3, [r3, #16]
 8014c0a:	4798      	blx	r3
 8014c0c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014c0e:	4606      	mov	r6, r0
 8014c10:	b903      	cbnz	r3, 8014c14 <_ZN8touchgfx3HAL4tickEv+0x100>
 8014c12:	6760      	str	r0, [r4, #116]	@ 0x74
 8014c14:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014c16:	4a1e      	ldr	r2, [pc, #120]	@ (8014c90 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014c18:	1af3      	subs	r3, r6, r3
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d914      	bls.n	8014c48 <_ZN8touchgfx3HAL4tickEv+0x134>
 8014c1e:	6920      	ldr	r0, [r4, #16]
 8014c20:	6803      	ldr	r3, [r0, #0]
 8014c22:	699b      	ldr	r3, [r3, #24]
 8014c24:	4798      	blx	r3
 8014c26:	2264      	movs	r2, #100	@ 0x64
 8014c28:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014c2a:	1af3      	subs	r3, r6, r3
 8014c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8014c34:	2800      	cmp	r0, #0
 8014c36:	dc1d      	bgt.n	8014c74 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014c38:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8014c3c:	6920      	ldr	r0, [r4, #16]
 8014c3e:	2100      	movs	r1, #0
 8014c40:	6803      	ldr	r3, [r0, #0]
 8014c42:	69db      	ldr	r3, [r3, #28]
 8014c44:	4798      	blx	r3
 8014c46:	6766      	str	r6, [r4, #116]	@ 0x74
 8014c48:	f005 f81a 	bl	8019c80 <_ZN8touchgfx11Application11getInstanceEv>
 8014c4c:	6803      	ldr	r3, [r0, #0]
 8014c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c50:	4798      	blx	r3
 8014c52:	6823      	ldr	r3, [r4, #0]
 8014c54:	4620      	mov	r0, r4
 8014c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014c5a:	4798      	blx	r3
 8014c5c:	2001      	movs	r0, #1
 8014c5e:	f7fd fc5f 	bl	8012520 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014c62:	2300      	movs	r3, #0
 8014c64:	702b      	strb	r3, [r5, #0]
 8014c66:	b004      	add	sp, #16
 8014c68:	bd70      	pop	{r4, r5, r6, pc}
 8014c6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014c6e:	4620      	mov	r0, r4
 8014c70:	4798      	blx	r3
 8014c72:	e7af      	b.n	8014bd4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014c74:	2863      	cmp	r0, #99	@ 0x63
 8014c76:	bfcb      	itete	gt
 8014c78:	2300      	movgt	r3, #0
 8014c7a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8014c7e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8014c82:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014c86:	e7d9      	b.n	8014c3c <_ZN8touchgfx3HAL4tickEv+0x128>
 8014c88:	20011f30 	.word	0x20011f30
 8014c8c:	20011f31 	.word	0x20011f31
 8014c90:	05f5e100 	.word	0x05f5e100

08014c94 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014c94:	b510      	push	{r4, lr}
 8014c96:	4604      	mov	r4, r0
 8014c98:	f7fd ff18 	bl	8012acc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	6863      	ldr	r3, [r4, #4]
 8014ca0:	729a      	strb	r2, [r3, #10]
 8014ca2:	bd10      	pop	{r4, pc}

08014ca4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014ca4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014ca6:	301c      	adds	r0, #28
 8014ca8:	f016 bb30 	b.w	802b30c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014cac <_ZN8touchgfx3HAL5touchEll>:
 8014cac:	b530      	push	{r4, r5, lr}
 8014cae:	4604      	mov	r4, r0
 8014cb0:	b087      	sub	sp, #28
 8014cb2:	a804      	add	r0, sp, #16
 8014cb4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014cb8:	f004 fe1a 	bl	80198f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014cbc:	9b04      	ldr	r3, [sp, #16]
 8014cbe:	a906      	add	r1, sp, #24
 8014cc0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014cc4:	9b05      	ldr	r3, [sp, #20]
 8014cc6:	a803      	add	r0, sp, #12
 8014cc8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014ccc:	f004 fe62 	bl	8019994 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014cd0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8014cd4:	f104 001c 	add.w	r0, r4, #28
 8014cd8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014cdc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014ce0:	b189      	cbz	r1, 8014d06 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014ce2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8014cec:	4613      	mov	r3, r2
 8014cee:	462a      	mov	r2, r5
 8014cf0:	f016 fb1c 	bl	802b32c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014cf4:	b128      	cbz	r0, 8014d02 <_ZN8touchgfx3HAL5touchEll+0x56>
 8014cf6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014cfa:	6623      	str	r3, [r4, #96]	@ 0x60
 8014cfc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014d00:	6663      	str	r3, [r4, #100]	@ 0x64
 8014d02:	b007      	add	sp, #28
 8014d04:	bd30      	pop	{r4, r5, pc}
 8014d06:	f016 fb51 	bl	802b3ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014d10:	e7f1      	b.n	8014cf6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08014d12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014d12:	b510      	push	{r4, lr}
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d046      	beq.n	8014da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014d18:	ea81 0002 	eor.w	r0, r1, r2
 8014d1c:	07c4      	lsls	r4, r0, #31
 8014d1e:	d508      	bpl.n	8014d32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014d20:	440b      	add	r3, r1
 8014d22:	3a01      	subs	r2, #1
 8014d24:	428b      	cmp	r3, r1
 8014d26:	d93e      	bls.n	8014da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014d28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014d2c:	f801 0b01 	strb.w	r0, [r1], #1
 8014d30:	e7f8      	b.n	8014d24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014d32:	07d0      	lsls	r0, r2, #31
 8014d34:	bf42      	ittt	mi
 8014d36:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014d3a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014d3e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014d42:	2b01      	cmp	r3, #1
 8014d44:	d911      	bls.n	8014d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014d46:	ea81 0402 	eor.w	r4, r1, r2
 8014d4a:	07a4      	lsls	r4, r4, #30
 8014d4c:	4610      	mov	r0, r2
 8014d4e:	d022      	beq.n	8014d96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014d50:	f023 0401 	bic.w	r4, r3, #1
 8014d54:	440c      	add	r4, r1
 8014d56:	428c      	cmp	r4, r1
 8014d58:	4602      	mov	r2, r0
 8014d5a:	d904      	bls.n	8014d66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014d5c:	8812      	ldrh	r2, [r2, #0]
 8014d5e:	3002      	adds	r0, #2
 8014d60:	f821 2b02 	strh.w	r2, [r1], #2
 8014d64:	e7f7      	b.n	8014d56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014d66:	f003 0301 	and.w	r3, r3, #1
 8014d6a:	f023 0003 	bic.w	r0, r3, #3
 8014d6e:	4408      	add	r0, r1
 8014d70:	4288      	cmp	r0, r1
 8014d72:	4614      	mov	r4, r2
 8014d74:	d904      	bls.n	8014d80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014d76:	6824      	ldr	r4, [r4, #0]
 8014d78:	3204      	adds	r2, #4
 8014d7a:	f841 4b04 	str.w	r4, [r1], #4
 8014d7e:	e7f7      	b.n	8014d70 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014d80:	f003 0303 	and.w	r3, r3, #3
 8014d84:	440b      	add	r3, r1
 8014d86:	3a01      	subs	r2, #1
 8014d88:	428b      	cmp	r3, r1
 8014d8a:	d90c      	bls.n	8014da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014d8c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014d90:	f801 0b01 	strb.w	r0, [r1], #1
 8014d94:	e7f8      	b.n	8014d88 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014d96:	0790      	lsls	r0, r2, #30
 8014d98:	d0e7      	beq.n	8014d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014d9a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014d9e:	3b02      	subs	r3, #2
 8014da0:	f821 0b02 	strh.w	r0, [r1], #2
 8014da4:	e7e1      	b.n	8014d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014da6:	2001      	movs	r0, #1
 8014da8:	bd10      	pop	{r4, pc}

08014daa <_ZN8touchgfx3HAL7noTouchEv>:
 8014daa:	b510      	push	{r4, lr}
 8014dac:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8014db0:	4604      	mov	r4, r0
 8014db2:	b153      	cbz	r3, 8014dca <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014db4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8014db8:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8014dbc:	2101      	movs	r1, #1
 8014dbe:	301c      	adds	r0, #28
 8014dc0:	f016 faf4 	bl	802b3ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014dca:	bd10      	pop	{r4, pc}

08014dcc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dd0:	4604      	mov	r4, r0
 8014dd2:	2000      	movs	r0, #0
 8014dd4:	b085      	sub	sp, #20
 8014dd6:	ad04      	add	r5, sp, #16
 8014dd8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014ddc:	69a0      	ldr	r0, [r4, #24]
 8014dde:	4699      	mov	r9, r3
 8014de0:	6806      	ldr	r6, [r0, #0]
 8014de2:	9501      	str	r5, [sp, #4]
 8014de4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8014de8:	460f      	mov	r7, r1
 8014dea:	9500      	str	r5, [sp, #0]
 8014dec:	6835      	ldr	r5, [r6, #0]
 8014dee:	4690      	mov	r8, r2
 8014df0:	47a8      	blx	r5
 8014df2:	4d10      	ldr	r5, [pc, #64]	@ (8014e34 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014df4:	4606      	mov	r6, r0
 8014df6:	f8a5 9000 	strh.w	r9, [r5]
 8014dfa:	f7f8 fd93 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 8014dfe:	6803      	ldr	r3, [r0, #0]
 8014e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e02:	4798      	blx	r3
 8014e04:	b128      	cbz	r0, 8014e12 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8014e06:	2801      	cmp	r0, #1
 8014e08:	d00b      	beq.n	8014e22 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8014e0a:	4630      	mov	r0, r6
 8014e0c:	b005      	add	sp, #20
 8014e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e12:	882b      	ldrh	r3, [r5, #0]
 8014e14:	fb08 7203 	mla	r2, r8, r3, r7
 8014e18:	9b03      	ldr	r3, [sp, #12]
 8014e1a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014e1e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014e20:	e7f3      	b.n	8014e0a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014e22:	882a      	ldrh	r2, [r5, #0]
 8014e24:	9b03      	ldr	r3, [sp, #12]
 8014e26:	fb08 7202 	mla	r2, r8, r2, r7
 8014e2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014e2e:	1a9a      	subs	r2, r3, r2
 8014e30:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8014e32:	e7ea      	b.n	8014e0a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014e34:	20011f26 	.word	0x20011f26

08014e38 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e3a:	b08b      	sub	sp, #44	@ 0x2c
 8014e3c:	4617      	mov	r7, r2
 8014e3e:	4604      	mov	r4, r0
 8014e40:	460e      	mov	r6, r1
 8014e42:	461d      	mov	r5, r3
 8014e44:	f7f8 fd6e 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 8014e48:	6803      	ldr	r3, [r0, #0]
 8014e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e4c:	4798      	blx	r3
 8014e4e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014e52:	9007      	str	r0, [sp, #28]
 8014e54:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014e58:	4b0d      	ldr	r3, [pc, #52]	@ (8014e90 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014e5a:	6822      	ldr	r2, [r4, #0]
 8014e5c:	881b      	ldrh	r3, [r3, #0]
 8014e5e:	4631      	mov	r1, r6
 8014e60:	9306      	str	r3, [sp, #24]
 8014e62:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014e66:	4620      	mov	r0, r4
 8014e68:	9305      	str	r3, [sp, #20]
 8014e6a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8014e6e:	9304      	str	r3, [sp, #16]
 8014e70:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014e74:	9303      	str	r3, [sp, #12]
 8014e76:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014e7a:	9302      	str	r3, [sp, #8]
 8014e7c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014e80:	e9cd 5300 	strd	r5, r3, [sp]
 8014e84:	463b      	mov	r3, r7
 8014e86:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8014e88:	2200      	movs	r2, #0
 8014e8a:	47a8      	blx	r5
 8014e8c:	b00b      	add	sp, #44	@ 0x2c
 8014e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e90:	20011f26 	.word	0x20011f26

08014e94 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e98:	4698      	mov	r8, r3
 8014e9a:	6803      	ldr	r3, [r0, #0]
 8014e9c:	b08b      	sub	sp, #44	@ 0x2c
 8014e9e:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8014ea0:	4b14      	ldr	r3, [pc, #80]	@ (8014ef4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014ea2:	4617      	mov	r7, r2
 8014ea4:	f8b3 9000 	ldrh.w	r9, [r3]
 8014ea8:	460e      	mov	r6, r1
 8014eaa:	4604      	mov	r4, r0
 8014eac:	f7f8 fd3a 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 8014eb0:	6803      	ldr	r3, [r0, #0]
 8014eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eb4:	4798      	blx	r3
 8014eb6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8014eba:	2200      	movs	r2, #0
 8014ebc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014ec0:	2302      	movs	r3, #2
 8014ec2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	9305      	str	r3, [sp, #20]
 8014eca:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014ece:	4631      	mov	r1, r6
 8014ed0:	9304      	str	r3, [sp, #16]
 8014ed2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	9303      	str	r3, [sp, #12]
 8014eda:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014ede:	9302      	str	r3, [sp, #8]
 8014ee0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014ee4:	e9cd 8300 	strd	r8, r3, [sp]
 8014ee8:	463b      	mov	r3, r7
 8014eea:	47a8      	blx	r5
 8014eec:	b00b      	add	sp, #44	@ 0x2c
 8014eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ef2:	bf00      	nop
 8014ef4:	20011f26 	.word	0x20011f26

08014ef8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8014ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014efc:	4698      	mov	r8, r3
 8014efe:	6803      	ldr	r3, [r0, #0]
 8014f00:	b087      	sub	sp, #28
 8014f02:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8014f04:	4b10      	ldr	r3, [pc, #64]	@ (8014f48 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8014f06:	460e      	mov	r6, r1
 8014f08:	f8b3 9000 	ldrh.w	r9, [r3]
 8014f0c:	4617      	mov	r7, r2
 8014f0e:	4604      	mov	r4, r0
 8014f10:	f7f8 fd08 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 8014f14:	6803      	ldr	r3, [r0, #0]
 8014f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f18:	4798      	blx	r3
 8014f1a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8014f1e:	f8cd 900c 	str.w	r9, [sp, #12]
 8014f22:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014f26:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8014f2a:	463a      	mov	r2, r7
 8014f2c:	9302      	str	r3, [sp, #8]
 8014f2e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8014f32:	4631      	mov	r1, r6
 8014f34:	9301      	str	r3, [sp, #4]
 8014f36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	4643      	mov	r3, r8
 8014f40:	47a8      	blx	r5
 8014f42:	b007      	add	sp, #28
 8014f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f48:	20011f26 	.word	0x20011f26

08014f4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f50:	4604      	mov	r4, r0
 8014f52:	b08f      	sub	sp, #60	@ 0x3c
 8014f54:	4610      	mov	r0, r2
 8014f56:	460d      	mov	r5, r1
 8014f58:	4691      	mov	r9, r2
 8014f5a:	461e      	mov	r6, r3
 8014f5c:	f007 ff46 	bl	801cdec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	f000 809d 	beq.w	80150a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014f66:	6823      	ldr	r3, [r4, #0]
 8014f68:	4620      	mov	r0, r4
 8014f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f6c:	4798      	blx	r3
 8014f6e:	6823      	ldr	r3, [r4, #0]
 8014f70:	f8df b190 	ldr.w	fp, [pc, #400]	@ 8015104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f76:	4620      	mov	r0, r4
 8014f78:	4798      	blx	r3
 8014f7a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8015108 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014f7e:	f8bb 3000 	ldrh.w	r3, [fp]
 8014f82:	4f5d      	ldr	r7, [pc, #372]	@ (80150f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014f84:	9301      	str	r3, [sp, #4]
 8014f86:	f8ba 3000 	ldrh.w	r3, [sl]
 8014f8a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8014f8e:	9302      	str	r3, [sp, #8]
 8014f90:	883b      	ldrh	r3, [r7, #0]
 8014f92:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014f96:	9303      	str	r3, [sp, #12]
 8014f98:	4b58      	ldr	r3, [pc, #352]	@ (80150fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	881a      	ldrh	r2, [r3, #0]
 8014f9e:	9305      	str	r3, [sp, #20]
 8014fa0:	9204      	str	r2, [sp, #16]
 8014fa2:	f007 ffb7 	bl	801cf14 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014fa6:	8038      	strh	r0, [r7, #0]
 8014fa8:	4640      	mov	r0, r8
 8014faa:	f007 ffe7 	bl	801cf7c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014fae:	9b05      	ldr	r3, [sp, #20]
 8014fb0:	b280      	uxth	r0, r0
 8014fb2:	8018      	strh	r0, [r3, #0]
 8014fb4:	4b52      	ldr	r3, [pc, #328]	@ (8015100 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d174      	bne.n	80150a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014fbc:	883b      	ldrh	r3, [r7, #0]
 8014fbe:	f8aa 0000 	strh.w	r0, [sl]
 8014fc2:	f8ab 3000 	strh.w	r3, [fp]
 8014fc6:	4648      	mov	r0, r9
 8014fc8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8014fcc:	f007 ff0e 	bl	801cdec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8014fd6:	4611      	mov	r1, r2
 8014fd8:	4628      	mov	r0, r5
 8014fda:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014fde:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014fe2:	f7f9 fa4a 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8014fec:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014ff0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	dd5c      	ble.n	80150b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014ff8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	dd58      	ble.n	80150b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015000:	462a      	mov	r2, r5
 8015002:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015006:	ab0a      	add	r3, sp, #40	@ 0x28
 8015008:	6851      	ldr	r1, [r2, #4]
 801500a:	c303      	stmia	r3!, {r0, r1}
 801500c:	4631      	mov	r1, r6
 801500e:	a80a      	add	r0, sp, #40	@ 0x28
 8015010:	f7ff fbf8 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8015014:	2100      	movs	r1, #0
 8015016:	4b38      	ldr	r3, [pc, #224]	@ (80150f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015018:	910c      	str	r1, [sp, #48]	@ 0x30
 801501a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801501e:	4b37      	ldr	r3, [pc, #220]	@ (80150fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015020:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015028:	aa0a      	add	r2, sp, #40	@ 0x28
 801502a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801502e:	ab08      	add	r3, sp, #32
 8015030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015034:	e883 0003 	stmia.w	r3, {r0, r1}
 8015038:	4618      	mov	r0, r3
 801503a:	a90c      	add	r1, sp, #48	@ 0x30
 801503c:	f7ff fbe2 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8015040:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015042:	2b00      	cmp	r3, #0
 8015044:	d13c      	bne.n	80150c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8015046:	2000      	movs	r0, #0
 8015048:	2600      	movs	r6, #0
 801504a:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801504e:	696b      	ldr	r3, [r5, #20]
 8015050:	682a      	ldr	r2, [r5, #0]
 8015052:	616e      	str	r6, [r5, #20]
 8015054:	9305      	str	r3, [sp, #20]
 8015056:	6892      	ldr	r2, [r2, #8]
 8015058:	a908      	add	r1, sp, #32
 801505a:	4628      	mov	r0, r5
 801505c:	4790      	blx	r2
 801505e:	9b05      	ldr	r3, [sp, #20]
 8015060:	4652      	mov	r2, sl
 8015062:	616b      	str	r3, [r5, #20]
 8015064:	4649      	mov	r1, r9
 8015066:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801506a:	4628      	mov	r0, r5
 801506c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8015070:	f7f9 fa03 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
 8015074:	9a01      	ldr	r2, [sp, #4]
 8015076:	4b23      	ldr	r3, [pc, #140]	@ (8015104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015078:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801507c:	801a      	strh	r2, [r3, #0]
 801507e:	9a02      	ldr	r2, [sp, #8]
 8015080:	4b21      	ldr	r3, [pc, #132]	@ (8015108 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015082:	4620      	mov	r0, r4
 8015084:	801a      	strh	r2, [r3, #0]
 8015086:	9a03      	ldr	r2, [sp, #12]
 8015088:	4b1b      	ldr	r3, [pc, #108]	@ (80150f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801508a:	801a      	strh	r2, [r3, #0]
 801508c:	4b1b      	ldr	r3, [pc, #108]	@ (80150fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801508e:	9a04      	ldr	r2, [sp, #16]
 8015090:	801a      	strh	r2, [r3, #0]
 8015092:	6823      	ldr	r3, [r4, #0]
 8015094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015096:	4798      	blx	r3
 8015098:	6823      	ldr	r3, [r4, #0]
 801509a:	4620      	mov	r0, r4
 801509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801509e:	4798      	blx	r3
 80150a0:	b00f      	add	sp, #60	@ 0x3c
 80150a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a6:	883b      	ldrh	r3, [r7, #0]
 80150a8:	f8ab 0000 	strh.w	r0, [fp]
 80150ac:	f8aa 3000 	strh.w	r3, [sl]
 80150b0:	e789      	b.n	8014fc6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80150b2:	462a      	mov	r2, r5
 80150b4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80150b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80150ba:	6851      	ldr	r1, [r2, #4]
 80150bc:	c303      	stmia	r3!, {r0, r1}
 80150be:	e7a9      	b.n	8015014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80150c0:	a807      	add	r0, sp, #28
 80150c2:	f008 f89d 	bl	801d200 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80150c6:	4606      	mov	r6, r0
 80150c8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80150ca:	6803      	ldr	r3, [r0, #0]
 80150cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150ce:	4798      	blx	r3
 80150d0:	4286      	cmp	r6, r0
 80150d2:	d1b8      	bne.n	8015046 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80150d4:	f7f8 fc26 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 80150d8:	6803      	ldr	r3, [r0, #0]
 80150da:	4606      	mov	r6, r0
 80150dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80150de:	a807      	add	r0, sp, #28
 80150e0:	9305      	str	r3, [sp, #20]
 80150e2:	f008 f88d 	bl	801d200 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80150e6:	9b05      	ldr	r3, [sp, #20]
 80150e8:	4601      	mov	r1, r0
 80150ea:	4630      	mov	r0, r6
 80150ec:	4798      	blx	r3
 80150ee:	f080 0001 	eor.w	r0, r0, #1
 80150f2:	b2c0      	uxtb	r0, r0
 80150f4:	e7a8      	b.n	8015048 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80150f6:	bf00      	nop
 80150f8:	20011f20 	.word	0x20011f20
 80150fc:	20011f22 	.word	0x20011f22
 8015100:	20011f24 	.word	0x20011f24
 8015104:	20011f26 	.word	0x20011f26
 8015108:	20011f28 	.word	0x20011f28

0801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801510c:	b510      	push	{r4, lr}
 801510e:	4b07      	ldr	r3, [pc, #28]	@ (801512c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015110:	4604      	mov	r4, r0
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	b13b      	cbz	r3, 8015126 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015116:	6803      	ldr	r3, [r0, #0]
 8015118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801511a:	4798      	blx	r3
 801511c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801511e:	4283      	cmp	r3, r0
 8015120:	d101      	bne.n	8015126 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015122:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8015124:	bd10      	pop	{r4, pc}
 8015126:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8015128:	e7fc      	b.n	8015124 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801512a:	bf00      	nop
 801512c:	20011f2a 	.word	0x20011f2a

08015130 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015134:	461d      	mov	r5, r3
 8015136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801513a:	2400      	movs	r4, #0
 801513c:	b08a      	sub	sp, #40	@ 0x28
 801513e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015142:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015146:	4690      	mov	r8, r2
 8015148:	f8ad 3018 	strh.w	r3, [sp, #24]
 801514c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015150:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8015154:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015158:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801515c:	4607      	mov	r7, r0
 801515e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015162:	9404      	str	r4, [sp, #16]
 8015164:	f88d 4020 	strb.w	r4, [sp, #32]
 8015168:	f7ff ffd0 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801516c:	fb06 8505 	mla	r5, r6, r5, r8
 8015170:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	9505      	str	r5, [sp, #20]
 8015178:	f8ad 601e 	strh.w	r6, [sp, #30]
 801517c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015180:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8015184:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015188:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801518c:	6803      	ldr	r3, [r0, #0]
 801518e:	a901      	add	r1, sp, #4
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	4798      	blx	r3
 8015194:	b00a      	add	sp, #40	@ 0x28
 8015196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801519a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801519a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801519e:	2400      	movs	r4, #0
 80151a0:	461d      	mov	r5, r3
 80151a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80151a6:	4691      	mov	r9, r2
 80151a8:	b08b      	sub	sp, #44	@ 0x2c
 80151aa:	4688      	mov	r8, r1
 80151ac:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80151b0:	4607      	mov	r7, r0
 80151b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80151b6:	9404      	str	r4, [sp, #16]
 80151b8:	f7ff ffa8 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80151bc:	fb06 9505 	mla	r5, r6, r5, r9
 80151c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80151c4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80151c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80151cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	9505      	str	r5, [sp, #20]
 80151d4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80151d8:	f8ad 401c 	strh.w	r4, [sp, #28]
 80151dc:	f8ad 601e 	strh.w	r6, [sp, #30]
 80151e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80151e4:	f8ad 4020 	strh.w	r4, [sp, #32]
 80151e8:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80151ec:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80151f0:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80151f4:	6803      	ldr	r3, [r0, #0]
 80151f6:	a901      	add	r1, sp, #4
 80151f8:	685b      	ldr	r3, [r3, #4]
 80151fa:	4798      	blx	r3
 80151fc:	b00b      	add	sp, #44	@ 0x2c
 80151fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015204 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015208:	4698      	mov	r8, r3
 801520a:	2300      	movs	r3, #0
 801520c:	b08a      	sub	sp, #40	@ 0x28
 801520e:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015212:	4606      	mov	r6, r0
 8015214:	2d0b      	cmp	r5, #11
 8015216:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801521a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801521e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8015222:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8015226:	9304      	str	r3, [sp, #16]
 8015228:	d137      	bne.n	801529a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801522a:	2380      	movs	r3, #128	@ 0x80
 801522c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015230:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015234:	f88d 0020 	strb.w	r0, [sp, #32]
 8015238:	f8ad 3018 	strh.w	r3, [sp, #24]
 801523c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015240:	4630      	mov	r0, r6
 8015242:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015246:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801524a:	9203      	str	r2, [sp, #12]
 801524c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015250:	f7ff ff5c 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015254:	2c0b      	cmp	r4, #11
 8015256:	bf8c      	ite	hi
 8015258:	2100      	movhi	r1, #0
 801525a:	4b1b      	ldrls	r3, [pc, #108]	@ (80152c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801525c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015260:	bf98      	it	ls
 8015262:	5d19      	ldrbls	r1, [r3, r4]
 8015264:	fb02 8307 	mla	r3, r2, r7, r8
 8015268:	10c9      	asrs	r1, r1, #3
 801526a:	fb01 0003 	mla	r0, r1, r3, r0
 801526e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8015272:	9005      	str	r0, [sp, #20]
 8015274:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015278:	2300      	movs	r3, #0
 801527a:	6870      	ldr	r0, [r6, #4]
 801527c:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015280:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8015284:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015288:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801528c:	6803      	ldr	r3, [r0, #0]
 801528e:	a901      	add	r1, sp, #4
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	4798      	blx	r3
 8015294:	b00a      	add	sp, #40	@ 0x28
 8015296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801529a:	2d02      	cmp	r5, #2
 801529c:	d109      	bne.n	80152b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801529e:	28ff      	cmp	r0, #255	@ 0xff
 80152a0:	d105      	bne.n	80152ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80152a2:	f1bc 0f00 	cmp.w	ip, #0
 80152a6:	bf14      	ite	ne
 80152a8:	2340      	movne	r3, #64	@ 0x40
 80152aa:	2320      	moveq	r3, #32
 80152ac:	e7be      	b.n	801522c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80152ae:	2340      	movs	r3, #64	@ 0x40
 80152b0:	e7bc      	b.n	801522c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80152b2:	28ff      	cmp	r0, #255	@ 0xff
 80152b4:	d105      	bne.n	80152c2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80152b6:	f1bc 0f00 	cmp.w	ip, #0
 80152ba:	bf14      	ite	ne
 80152bc:	2304      	movne	r3, #4
 80152be:	2301      	moveq	r3, #1
 80152c0:	e7b4      	b.n	801522c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80152c2:	2304      	movs	r3, #4
 80152c4:	e7b2      	b.n	801522c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80152c6:	bf00      	nop
 80152c8:	0802ef10 	.word	0x0802ef10

080152cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80152cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d0:	b08b      	sub	sp, #44	@ 0x2c
 80152d2:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80152d6:	461d      	mov	r5, r3
 80152d8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80152dc:	bf14      	ite	ne
 80152de:	2308      	movne	r3, #8
 80152e0:	2302      	moveq	r3, #2
 80152e2:	2400      	movs	r4, #0
 80152e4:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80152e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152ec:	4688      	mov	r8, r1
 80152ee:	4693      	mov	fp, r2
 80152f0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80152f4:	9404      	str	r4, [sp, #16]
 80152f6:	4607      	mov	r7, r0
 80152f8:	f7ff ff08 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80152fc:	2e0b      	cmp	r6, #11
 80152fe:	bf98      	it	ls
 8015300:	4b15      	ldrls	r3, [pc, #84]	@ (8015358 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015302:	fb05 b50a 	mla	r5, r5, sl, fp
 8015306:	bf98      	it	ls
 8015308:	5d9c      	ldrbls	r4, [r3, r6]
 801530a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801530e:	10e4      	asrs	r4, r4, #3
 8015310:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015314:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8015318:	fb04 0405 	mla	r4, r4, r5, r0
 801531c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015320:	2300      	movs	r3, #0
 8015322:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	9405      	str	r4, [sp, #20]
 801532a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801532e:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015332:	f8cd 8010 	str.w	r8, [sp, #16]
 8015336:	f88d 9020 	strb.w	r9, [sp, #32]
 801533a:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 801533e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015342:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8015346:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801534a:	6803      	ldr	r3, [r0, #0]
 801534c:	a901      	add	r1, sp, #4
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	4798      	blx	r3
 8015352:	b00b      	add	sp, #44	@ 0x2c
 8015354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015358:	0802ef10 	.word	0x0802ef10

0801535c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015360:	461e      	mov	r6, r3
 8015362:	4b0a      	ldr	r3, [pc, #40]	@ (801538c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015364:	460f      	mov	r7, r1
 8015366:	881d      	ldrh	r5, [r3, #0]
 8015368:	4690      	mov	r8, r2
 801536a:	f7f8 fadb 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 801536e:	6803      	ldr	r3, [r0, #0]
 8015370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015372:	4798      	blx	r3
 8015374:	280b      	cmp	r0, #11
 8015376:	bf8e      	itee	hi
 8015378:	2400      	movhi	r4, #0
 801537a:	4b05      	ldrls	r3, [pc, #20]	@ (8015390 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801537c:	5c1c      	ldrbls	r4, [r3, r0]
 801537e:	fb08 7005 	mla	r0, r8, r5, r7
 8015382:	10e4      	asrs	r4, r4, #3
 8015384:	fb04 6000 	mla	r0, r4, r0, r6
 8015388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801538c:	20011f26 	.word	0x20011f26
 8015390:	0802ef10 	.word	0x0802ef10

08015394 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015396:	2500      	movs	r5, #0
 8015398:	b08b      	sub	sp, #44	@ 0x2c
 801539a:	461f      	mov	r7, r3
 801539c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80153a0:	4604      	mov	r4, r0
 80153a2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80153a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80153aa:	4616      	mov	r6, r2
 80153ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 80153b0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80153b4:	9504      	str	r5, [sp, #16]
 80153b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80153ba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80153be:	f8ad 301c 	strh.w	r3, [sp, #28]
 80153c2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80153c6:	f88d 3020 	strb.w	r3, [sp, #32]
 80153ca:	f7ff fe9f 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80153ce:	463a      	mov	r2, r7
 80153d0:	4631      	mov	r1, r6
 80153d2:	4603      	mov	r3, r0
 80153d4:	4620      	mov	r0, r4
 80153d6:	f7ff ffc1 	bl	801535c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80153da:	4b0e      	ldr	r3, [pc, #56]	@ (8015414 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80153dc:	9005      	str	r0, [sp, #20]
 80153de:	881b      	ldrh	r3, [r3, #0]
 80153e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80153e4:	f7f8 fa9e 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 80153e8:	6803      	ldr	r3, [r0, #0]
 80153ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153ec:	4798      	blx	r3
 80153ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80153f0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80153f4:	9304      	str	r3, [sp, #16]
 80153f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80153fa:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80153fe:	6860      	ldr	r0, [r4, #4]
 8015400:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015404:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8015408:	6803      	ldr	r3, [r0, #0]
 801540a:	a901      	add	r1, sp, #4
 801540c:	685b      	ldr	r3, [r3, #4]
 801540e:	4798      	blx	r3
 8015410:	b00b      	add	sp, #44	@ 0x2c
 8015412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015414:	20011f26 	.word	0x20011f26

08015418 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801541a:	b08d      	sub	sp, #52	@ 0x34
 801541c:	466b      	mov	r3, sp
 801541e:	e883 0006 	stmia.w	r3, {r1, r2}
 8015422:	2300      	movs	r3, #0
 8015424:	2501      	movs	r5, #1
 8015426:	9306      	str	r3, [sp, #24]
 8015428:	6803      	ldr	r3, [r0, #0]
 801542a:	9503      	str	r5, [sp, #12]
 801542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801542e:	4604      	mov	r4, r0
 8015430:	f8bd 6000 	ldrh.w	r6, [sp]
 8015434:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015438:	4798      	blx	r3
 801543a:	463a      	mov	r2, r7
 801543c:	4631      	mov	r1, r6
 801543e:	4603      	mov	r3, r0
 8015440:	4620      	mov	r0, r4
 8015442:	f7ff ff8b 	bl	801535c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015446:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015448:	9004      	str	r0, [sp, #16]
 801544a:	9307      	str	r3, [sp, #28]
 801544c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015450:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015454:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015458:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801545c:	4b0e      	ldr	r3, [pc, #56]	@ (8015498 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801545e:	881b      	ldrh	r3, [r3, #0]
 8015460:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015464:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015468:	f7f8 fa5c 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 801546c:	6803      	ldr	r3, [r0, #0]
 801546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015470:	4798      	blx	r3
 8015472:	23ff      	movs	r3, #255	@ 0xff
 8015474:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015478:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801547c:	6860      	ldr	r0, [r4, #4]
 801547e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015482:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015486:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801548a:	6803      	ldr	r3, [r0, #0]
 801548c:	a903      	add	r1, sp, #12
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	4798      	blx	r3
 8015492:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8015494:	b00d      	add	sp, #52	@ 0x34
 8015496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015498:	20011f26 	.word	0x20011f26

0801549c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a0:	b08c      	sub	sp, #48	@ 0x30
 80154a2:	466d      	mov	r5, sp
 80154a4:	461e      	mov	r6, r3
 80154a6:	2300      	movs	r3, #0
 80154a8:	e885 0006 	stmia.w	r5, {r1, r2}
 80154ac:	2501      	movs	r5, #1
 80154ae:	9306      	str	r3, [sp, #24]
 80154b0:	6803      	ldr	r3, [r0, #0]
 80154b2:	9503      	str	r5, [sp, #12]
 80154b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154b6:	4604      	mov	r4, r0
 80154b8:	f8bd 7000 	ldrh.w	r7, [sp]
 80154bc:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80154c0:	4798      	blx	r3
 80154c2:	4642      	mov	r2, r8
 80154c4:	4639      	mov	r1, r7
 80154c6:	4603      	mov	r3, r0
 80154c8:	4620      	mov	r0, r4
 80154ca:	f7ff ff47 	bl	801535c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80154ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80154d2:	9004      	str	r0, [sp, #16]
 80154d4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80154d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80154dc:	9607      	str	r6, [sp, #28]
 80154de:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80154e2:	4b10      	ldr	r3, [pc, #64]	@ (8015524 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80154e4:	881b      	ldrh	r3, [r3, #0]
 80154e6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80154ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80154ec:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80154f0:	f7f8 fa18 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 80154f4:	6803      	ldr	r3, [r0, #0]
 80154f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154f8:	4798      	blx	r3
 80154fa:	23ff      	movs	r3, #255	@ 0xff
 80154fc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015500:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015504:	6860      	ldr	r0, [r4, #4]
 8015506:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801550a:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801550e:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015512:	6803      	ldr	r3, [r0, #0]
 8015514:	a903      	add	r1, sp, #12
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	4798      	blx	r3
 801551a:	4630      	mov	r0, r6
 801551c:	b00c      	add	sp, #48	@ 0x30
 801551e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015522:	bf00      	nop
 8015524:	20011f26 	.word	0x20011f26

08015528 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801552a:	b085      	sub	sp, #20
 801552c:	ac02      	add	r4, sp, #8
 801552e:	e884 0006 	stmia.w	r4, {r1, r2}
 8015532:	4605      	mov	r5, r0
 8015534:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015538:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801553c:	f7ff fde6 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015540:	463a      	mov	r2, r7
 8015542:	4603      	mov	r3, r0
 8015544:	4631      	mov	r1, r6
 8015546:	4628      	mov	r0, r5
 8015548:	f7ff ff08 	bl	801535c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801554c:	4a05      	ldr	r2, [pc, #20]	@ (8015564 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801554e:	682b      	ldr	r3, [r5, #0]
 8015550:	8812      	ldrh	r2, [r2, #0]
 8015552:	9200      	str	r2, [sp, #0]
 8015554:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8015556:	e894 0006 	ldmia.w	r4, {r1, r2}
 801555a:	4603      	mov	r3, r0
 801555c:	4628      	mov	r0, r5
 801555e:	47b0      	blx	r6
 8015560:	b005      	add	sp, #20
 8015562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015564:	20011f26 	.word	0x20011f26

08015568 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015568:	b570      	push	{r4, r5, r6, lr}
 801556a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801556e:	4604      	mov	r4, r0
 8015570:	b19b      	cbz	r3, 801559a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015572:	2002      	movs	r0, #2
 8015574:	f7fc fff0 	bl	8012558 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015578:	2300      	movs	r3, #0
 801557a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801557e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8015582:	6823      	ldr	r3, [r4, #0]
 8015584:	4620      	mov	r0, r4
 8015586:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801558a:	f7ff fdbf 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801558e:	462b      	mov	r3, r5
 8015590:	4601      	mov	r1, r0
 8015592:	4620      	mov	r0, r4
 8015594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015598:	4718      	bx	r3
 801559a:	bd70      	pop	{r4, r5, r6, pc}

0801559c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801559c:	b538      	push	{r3, r4, r5, lr}
 801559e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80155a2:	4604      	mov	r4, r0
 80155a4:	428b      	cmp	r3, r1
 80155a6:	460d      	mov	r5, r1
 80155a8:	d006      	beq.n	80155b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80155aa:	6803      	ldr	r3, [r0, #0]
 80155ac:	b929      	cbnz	r1, 80155ba <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80155ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80155b2:	4798      	blx	r3
 80155b4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80155b8:	bd38      	pop	{r3, r4, r5, pc}
 80155ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80155be:	e7f8      	b.n	80155b2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080155c0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80155c0:	b510      	push	{r4, lr}
 80155c2:	4b0d      	ldr	r3, [pc, #52]	@ (80155f8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80155c4:	4604      	mov	r4, r0
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	b95b      	cbnz	r3, 80155e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80155ca:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80155ce:	2b02      	cmp	r3, #2
 80155d0:	d007      	beq.n	80155e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80155d2:	6840      	ldr	r0, [r0, #4]
 80155d4:	f000 f928 	bl	8015828 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80155d8:	b118      	cbz	r0, 80155e2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80155da:	6862      	ldr	r2, [r4, #4]
 80155dc:	7a53      	ldrb	r3, [r2, #9]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d0fc      	beq.n	80155dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80155e2:	f7fd fa65 	bl	8012ab0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80155e6:	4620      	mov	r0, r4
 80155e8:	2100      	movs	r1, #0
 80155ea:	f7ff ffd7 	bl	801559c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80155ee:	4620      	mov	r0, r4
 80155f0:	f7ff fd8c 	bl	801510c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80155f4:	bd10      	pop	{r4, pc}
 80155f6:	bf00      	nop
 80155f8:	20011f2a 	.word	0x20011f2a

080155fc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80155fc:	b570      	push	{r4, r5, r6, lr}
 80155fe:	4604      	mov	r4, r0
 8015600:	6803      	ldr	r3, [r0, #0]
 8015602:	b919      	cbnz	r1, 801560c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8015604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801560a:	4718      	bx	r3
 801560c:	2200      	movs	r2, #0
 801560e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8015612:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8015616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015618:	4798      	blx	r3
 801561a:	2101      	movs	r1, #1
 801561c:	4605      	mov	r5, r0
 801561e:	6863      	ldr	r3, [r4, #4]
 8015620:	4620      	mov	r0, r4
 8015622:	7299      	strb	r1, [r3, #10]
 8015624:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8015628:	f7ff ffb8 	bl	801559c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801562c:	4628      	mov	r0, r5
 801562e:	bd70      	pop	{r4, r5, r6, pc}

08015630 <_ZN8touchgfx13DMA_Interface5flushEv>:
 8015630:	6803      	ldr	r3, [r0, #0]
 8015632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015634:	4718      	bx	r3

08015636 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015636:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801563a:	1a13      	subs	r3, r2, r0
 801563c:	4258      	negs	r0, r3
 801563e:	4158      	adcs	r0, r3
 8015640:	4770      	bx	lr

08015642 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015642:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015646:	1a9b      	subs	r3, r3, r2
 8015648:	2b00      	cmp	r3, #0
 801564a:	bfdc      	itt	le
 801564c:	6882      	ldrle	r2, [r0, #8]
 801564e:	189b      	addle	r3, r3, r2
 8015650:	2b01      	cmp	r3, #1
 8015652:	bfcc      	ite	gt
 8015654:	2000      	movgt	r0, #0
 8015656:	2001      	movle	r0, #1
 8015658:	4770      	bx	lr

0801565a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801565a:	6902      	ldr	r2, [r0, #16]
 801565c:	6843      	ldr	r3, [r0, #4]
 801565e:	2024      	movs	r0, #36	@ 0x24
 8015660:	fb00 3002 	mla	r0, r0, r2, r3
 8015664:	4770      	bx	lr

08015666 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015666:	6803      	ldr	r3, [r0, #0]
 8015668:	691b      	ldr	r3, [r3, #16]
 801566a:	4718      	bx	r3

0801566c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801566c:	2301      	movs	r3, #1
 801566e:	b570      	push	{r4, r5, r6, lr}
 8015670:	7203      	strb	r3, [r0, #8]
 8015672:	4604      	mov	r4, r0
 8015674:	6840      	ldr	r0, [r0, #4]
 8015676:	6803      	ldr	r3, [r0, #0]
 8015678:	699b      	ldr	r3, [r3, #24]
 801567a:	4798      	blx	r3
 801567c:	6803      	ldr	r3, [r0, #0]
 801567e:	4605      	mov	r5, r0
 8015680:	2b40      	cmp	r3, #64	@ 0x40
 8015682:	d00c      	beq.n	801569e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015684:	d810      	bhi.n	80156a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015686:	2b04      	cmp	r3, #4
 8015688:	d01d      	beq.n	80156c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801568a:	d804      	bhi.n	8015696 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801568c:	2b01      	cmp	r3, #1
 801568e:	d006      	beq.n	801569e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015690:	2b02      	cmp	r3, #2
 8015692:	d02c      	beq.n	80156ee <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015694:	bd70      	pop	{r4, r5, r6, pc}
 8015696:	2b08      	cmp	r3, #8
 8015698:	d01d      	beq.n	80156d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801569a:	2b20      	cmp	r3, #32
 801569c:	d1fa      	bne.n	8015694 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801569e:	6823      	ldr	r3, [r4, #0]
 80156a0:	4620      	mov	r0, r4
 80156a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156a4:	4798      	blx	r3
 80156a6:	e013      	b.n	80156d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80156a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80156ac:	d0f7      	beq.n	801569e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80156ae:	d804      	bhi.n	80156ba <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80156b0:	2b80      	cmp	r3, #128	@ 0x80
 80156b2:	d0f4      	beq.n	801569e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80156b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80156b8:	e7f0      	b.n	801569c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80156ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80156be:	d0ee      	beq.n	801569e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80156c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80156c4:	e7e5      	b.n	8015692 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80156c6:	6823      	ldr	r3, [r4, #0]
 80156c8:	7f01      	ldrb	r1, [r0, #28]
 80156ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156cc:	4620      	mov	r0, r4
 80156ce:	4798      	blx	r3
 80156d0:	6823      	ldr	r3, [r4, #0]
 80156d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80156d4:	e006      	b.n	80156e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80156d6:	6823      	ldr	r3, [r4, #0]
 80156d8:	7f01      	ldrb	r1, [r0, #28]
 80156da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156dc:	4620      	mov	r0, r4
 80156de:	4798      	blx	r3
 80156e0:	6823      	ldr	r3, [r4, #0]
 80156e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156e4:	4629      	mov	r1, r5
 80156e6:	4620      	mov	r0, r4
 80156e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156ec:	4718      	bx	r3
 80156ee:	6823      	ldr	r3, [r4, #0]
 80156f0:	4620      	mov	r0, r4
 80156f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156f4:	4798      	blx	r3
 80156f6:	e7f3      	b.n	80156e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080156f8 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80156f8:	4770      	bx	lr

080156fa <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80156fa:	4770      	bx	lr

080156fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80156fc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015700:	1ad2      	subs	r2, r2, r3
 8015702:	2a00      	cmp	r2, #0
 8015704:	b510      	push	{r4, lr}
 8015706:	bfdc      	itt	le
 8015708:	6884      	ldrle	r4, [r0, #8]
 801570a:	1912      	addle	r2, r2, r4
 801570c:	2a01      	cmp	r2, #1
 801570e:	dd16      	ble.n	801573e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015710:	2424      	movs	r4, #36	@ 0x24
 8015712:	6842      	ldr	r2, [r0, #4]
 8015714:	fb04 2303 	mla	r3, r4, r3, r2
 8015718:	f101 0220 	add.w	r2, r1, #32
 801571c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015720:	4291      	cmp	r1, r2
 8015722:	f843 4b04 	str.w	r4, [r3], #4
 8015726:	d1f9      	bne.n	801571c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8015728:	780a      	ldrb	r2, [r1, #0]
 801572a:	701a      	strb	r2, [r3, #0]
 801572c:	68c3      	ldr	r3, [r0, #12]
 801572e:	6882      	ldr	r2, [r0, #8]
 8015730:	3301      	adds	r3, #1
 8015732:	429a      	cmp	r2, r3
 8015734:	bfd8      	it	le
 8015736:	1a9b      	suble	r3, r3, r2
 8015738:	f3bf 8f5b 	dmb	ish
 801573c:	60c3      	str	r3, [r0, #12]
 801573e:	bd10      	pop	{r4, pc}

08015740 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015740:	6903      	ldr	r3, [r0, #16]
 8015742:	6882      	ldr	r2, [r0, #8]
 8015744:	3301      	adds	r3, #1
 8015746:	429a      	cmp	r2, r3
 8015748:	bfd8      	it	le
 801574a:	1a9b      	suble	r3, r3, r2
 801574c:	f3bf 8f5b 	dmb	ish
 8015750:	6103      	str	r3, [r0, #16]
 8015752:	4770      	bx	lr

08015754 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015754:	b570      	push	{r4, r5, r6, lr}
 8015756:	4604      	mov	r4, r0
 8015758:	460e      	mov	r6, r1
 801575a:	6860      	ldr	r0, [r4, #4]
 801575c:	6803      	ldr	r3, [r0, #0]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	4798      	blx	r3
 8015762:	2800      	cmp	r0, #0
 8015764:	d1f9      	bne.n	801575a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015766:	4d0d      	ldr	r5, [pc, #52]	@ (801579c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015768:	6828      	ldr	r0, [r5, #0]
 801576a:	6803      	ldr	r3, [r0, #0]
 801576c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801576e:	4798      	blx	r3
 8015770:	f7fd f9b8 	bl	8012ae4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015774:	6828      	ldr	r0, [r5, #0]
 8015776:	2101      	movs	r1, #1
 8015778:	f7ff ff10 	bl	801559c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801577c:	6860      	ldr	r0, [r4, #4]
 801577e:	4631      	mov	r1, r6
 8015780:	6803      	ldr	r3, [r0, #0]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	4798      	blx	r3
 8015786:	6823      	ldr	r3, [r4, #0]
 8015788:	4620      	mov	r0, r4
 801578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801578c:	4798      	blx	r3
 801578e:	6828      	ldr	r0, [r5, #0]
 8015790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015794:	6803      	ldr	r3, [r0, #0]
 8015796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015798:	4718      	bx	r3
 801579a:	bf00      	nop
 801579c:	20011f2c 	.word	0x20011f2c

080157a0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80157a0:	b508      	push	{r3, lr}
 80157a2:	f7fd f985 	bl	8012ab0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80157a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80157aa:	f7fd b98f 	b.w	8012acc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080157ae <_ZN8touchgfx13DMA_Interface5startEv>:
 80157ae:	b510      	push	{r4, lr}
 80157b0:	4604      	mov	r4, r0
 80157b2:	6840      	ldr	r0, [r0, #4]
 80157b4:	6803      	ldr	r3, [r0, #0]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	4798      	blx	r3
 80157ba:	b948      	cbnz	r0, 80157d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80157bc:	7a63      	ldrb	r3, [r4, #9]
 80157be:	b13b      	cbz	r3, 80157d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80157c0:	7a23      	ldrb	r3, [r4, #8]
 80157c2:	b92b      	cbnz	r3, 80157d0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80157c4:	6823      	ldr	r3, [r4, #0]
 80157c6:	4620      	mov	r0, r4
 80157c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157ce:	4718      	bx	r3
 80157d0:	bd10      	pop	{r4, pc}

080157d2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80157d2:	b570      	push	{r4, r5, r6, lr}
 80157d4:	4604      	mov	r4, r0
 80157d6:	6840      	ldr	r0, [r0, #4]
 80157d8:	6803      	ldr	r3, [r0, #0]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4798      	blx	r3
 80157de:	4605      	mov	r5, r0
 80157e0:	b930      	cbnz	r0, 80157f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80157e2:	7a23      	ldrb	r3, [r4, #8]
 80157e4:	b123      	cbz	r3, 80157f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80157e6:	6860      	ldr	r0, [r4, #4]
 80157e8:	6803      	ldr	r3, [r0, #0]
 80157ea:	695b      	ldr	r3, [r3, #20]
 80157ec:	4798      	blx	r3
 80157ee:	7225      	strb	r5, [r4, #8]
 80157f0:	6860      	ldr	r0, [r4, #4]
 80157f2:	6803      	ldr	r3, [r0, #0]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	4798      	blx	r3
 80157f8:	b928      	cbnz	r0, 8015806 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80157fa:	6823      	ldr	r3, [r4, #0]
 80157fc:	4620      	mov	r0, r4
 80157fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015804:	4718      	bx	r3
 8015806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801580a:	f7fd b977 	b.w	8012afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08015810 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015810:	6082      	str	r2, [r0, #8]
 8015812:	2200      	movs	r2, #0
 8015814:	b510      	push	{r4, lr}
 8015816:	4c03      	ldr	r4, [pc, #12]	@ (8015824 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015818:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801581c:	e9c0 4100 	strd	r4, r1, [r0]
 8015820:	bd10      	pop	{r4, pc}
 8015822:	bf00      	nop
 8015824:	0802f04c 	.word	0x0802f04c

08015828 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015828:	6840      	ldr	r0, [r0, #4]
 801582a:	6803      	ldr	r3, [r0, #0]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	4718      	bx	r3

08015830 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8015830:	b508      	push	{r3, lr}
 8015832:	4b05      	ldr	r3, [pc, #20]	@ (8015848 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8015834:	6818      	ldr	r0, [r3, #0]
 8015836:	6803      	ldr	r3, [r0, #0]
 8015838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801583c:	4798      	blx	r3
 801583e:	1e43      	subs	r3, r0, #1
 8015840:	4258      	negs	r0, r3
 8015842:	4158      	adcs	r0, r3
 8015844:	bd08      	pop	{r3, pc}
 8015846:	bf00      	nop
 8015848:	20011f2c 	.word	0x20011f2c

0801584c <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 801584c:	b430      	push	{r4, r5}
 801584e:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8015852:	8a02      	ldrh	r2, [r0, #16]
 8015854:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8015858:	9202      	str	r2, [sp, #8]
 801585a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801585e:	68c2      	ldr	r2, [r0, #12]
 8015860:	4629      	mov	r1, r5
 8015862:	4620      	mov	r0, r4
 8015864:	bc30      	pop	{r4, r5}
 8015866:	f7fe b819 	b.w	801389c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

0801586a <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 801586a:	f7fe b805 	b.w	8013878 <_ZN8touchgfx5paint8tearDownEv>
	...

08015870 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015872:	6803      	ldr	r3, [r0, #0]
 8015874:	460d      	mov	r5, r1
 8015876:	4604      	mov	r4, r0
 8015878:	4601      	mov	r1, r0
 801587a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801587c:	a802      	add	r0, sp, #8
 801587e:	4798      	blx	r3
 8015880:	466b      	mov	r3, sp
 8015882:	6828      	ldr	r0, [r5, #0]
 8015884:	6869      	ldr	r1, [r5, #4]
 8015886:	c303      	stmia	r3!, {r0, r1}
 8015888:	4668      	mov	r0, sp
 801588a:	4619      	mov	r1, r3
 801588c:	f7fe ffba 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8015890:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015892:	b188      	cbz	r0, 80158b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015894:	6803      	ldr	r3, [r0, #0]
 8015896:	1d21      	adds	r1, r4, #4
 8015898:	68db      	ldr	r3, [r3, #12]
 801589a:	4798      	blx	r3
 801589c:	b160      	cbz	r0, 80158b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801589e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	dd08      	ble.n	80158b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80158a6:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80158aa:	2d00      	cmp	r5, #0
 80158ac:	dd04      	ble.n	80158b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80158ae:	4a2b      	ldr	r2, [pc, #172]	@ (801595c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80158b0:	7812      	ldrb	r2, [r2, #0]
 80158b2:	b11a      	cbz	r2, 80158bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80158b4:	2a01      	cmp	r2, #1
 80158b6:	d029      	beq.n	801590c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80158b8:	b004      	add	sp, #16
 80158ba:	bd70      	pop	{r4, r5, r6, pc}
 80158bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80158c0:	441d      	add	r5, r3
 80158c2:	b2ad      	uxth	r5, r5
 80158c4:	b22e      	sxth	r6, r5
 80158c6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80158ca:	42b3      	cmp	r3, r6
 80158cc:	daf4      	bge.n	80158b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80158ce:	6823      	ldr	r3, [r4, #0]
 80158d0:	4669      	mov	r1, sp
 80158d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158d4:	4620      	mov	r0, r4
 80158d6:	4798      	blx	r3
 80158d8:	b940      	cbnz	r0, 80158ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80158da:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d004      	beq.n	80158ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80158e2:	3301      	adds	r3, #1
 80158e4:	105b      	asrs	r3, r3, #1
 80158e6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80158ea:	e7f0      	b.n	80158ce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80158ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80158f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80158f4:	4413      	add	r3, r2
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	441a      	add	r2, r3
 80158fa:	b212      	sxth	r2, r2
 80158fc:	4296      	cmp	r6, r2
 80158fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015902:	dae0      	bge.n	80158c6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8015904:	1aeb      	subs	r3, r5, r3
 8015906:	f8ad 3006 	strh.w	r3, [sp, #6]
 801590a:	e7dc      	b.n	80158c6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801590c:	f8bd 5000 	ldrh.w	r5, [sp]
 8015910:	441d      	add	r5, r3
 8015912:	b2ad      	uxth	r5, r5
 8015914:	b22e      	sxth	r6, r5
 8015916:	f9bd 3000 	ldrsh.w	r3, [sp]
 801591a:	42b3      	cmp	r3, r6
 801591c:	dacc      	bge.n	80158b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801591e:	6823      	ldr	r3, [r4, #0]
 8015920:	4669      	mov	r1, sp
 8015922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015924:	4620      	mov	r0, r4
 8015926:	4798      	blx	r3
 8015928:	b940      	cbnz	r0, 801593c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801592a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801592e:	2b01      	cmp	r3, #1
 8015930:	d004      	beq.n	801593c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8015932:	3301      	adds	r3, #1
 8015934:	105b      	asrs	r3, r3, #1
 8015936:	f8ad 3004 	strh.w	r3, [sp, #4]
 801593a:	e7f0      	b.n	801591e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801593c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015940:	f8bd 3000 	ldrh.w	r3, [sp]
 8015944:	4413      	add	r3, r2
 8015946:	b29b      	uxth	r3, r3
 8015948:	441a      	add	r2, r3
 801594a:	b212      	sxth	r2, r2
 801594c:	4296      	cmp	r6, r2
 801594e:	f8ad 3000 	strh.w	r3, [sp]
 8015952:	dae0      	bge.n	8015916 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8015954:	1aeb      	subs	r3, r5, r3
 8015956:	f8ad 3004 	strh.w	r3, [sp, #4]
 801595a:	e7dc      	b.n	8015916 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801595c:	20011f24 	.word	0x20011f24

08015960 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015962:	6803      	ldr	r3, [r0, #0]
 8015964:	4604      	mov	r4, r0
 8015966:	4601      	mov	r1, r0
 8015968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801596a:	4668      	mov	r0, sp
 801596c:	4798      	blx	r3
 801596e:	2100      	movs	r1, #0
 8015970:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015974:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015978:	9102      	str	r1, [sp, #8]
 801597a:	4668      	mov	r0, sp
 801597c:	a902      	add	r1, sp, #8
 801597e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015982:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015986:	f7fe ff3d 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801598a:	6823      	ldr	r3, [r4, #0]
 801598c:	4669      	mov	r1, sp
 801598e:	691b      	ldr	r3, [r3, #16]
 8015990:	4620      	mov	r0, r4
 8015992:	4798      	blx	r3
 8015994:	b004      	add	sp, #16
 8015996:	bd10      	pop	{r4, pc}

08015998 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015998:	2101      	movs	r1, #1
 801599a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801599e:	490b      	ldr	r1, [pc, #44]	@ (80159cc <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80159a0:	2200      	movs	r2, #0
 80159a2:	6001      	str	r1, [r0, #0]
 80159a4:	21ff      	movs	r1, #255	@ 0xff
 80159a6:	8082      	strh	r2, [r0, #4]
 80159a8:	80c2      	strh	r2, [r0, #6]
 80159aa:	8102      	strh	r2, [r0, #8]
 80159ac:	8142      	strh	r2, [r0, #10]
 80159ae:	8182      	strh	r2, [r0, #12]
 80159b0:	81c2      	strh	r2, [r0, #14]
 80159b2:	8202      	strh	r2, [r0, #16]
 80159b4:	8242      	strh	r2, [r0, #18]
 80159b6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80159ba:	61c2      	str	r2, [r0, #28]
 80159bc:	8402      	strh	r2, [r0, #32]
 80159be:	8442      	strh	r2, [r0, #34]	@ 0x22
 80159c0:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80159c4:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80159c8:	6282      	str	r2, [r0, #40]	@ 0x28
 80159ca:	4770      	bx	lr
 80159cc:	0802f0a8 	.word	0x0802f0a8

080159d0 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 80159d0:	6301      	str	r1, [r0, #48]	@ 0x30
 80159d2:	4770      	bx	lr

080159d4 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 80159d4:	6341      	str	r1, [r0, #52]	@ 0x34
 80159d6:	4770      	bx	lr

080159d8 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 80159d8:	4770      	bx	lr

080159da <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 80159da:	4608      	mov	r0, r1
 80159dc:	4770      	bx	lr

080159de <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80159de:	b530      	push	{r4, r5, lr}
 80159e0:	460d      	mov	r5, r1
 80159e2:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80159e4:	8949      	ldrh	r1, [r1, #10]
 80159e6:	b085      	sub	sp, #20
 80159e8:	1ac9      	subs	r1, r1, r3
 80159ea:	6803      	ldr	r3, [r0, #0]
 80159ec:	f10d 0206 	add.w	r2, sp, #6
 80159f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80159f4:	b209      	sxth	r1, r1
 80159f6:	4604      	mov	r4, r0
 80159f8:	4798      	blx	r3
 80159fa:	b1a0      	cbz	r0, 8015a26 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80159fc:	792b      	ldrb	r3, [r5, #4]
 80159fe:	b993      	cbnz	r3, 8015a26 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8015a00:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8015a04:	b178      	cbz	r0, 8015a26 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8015a06:	6803      	ldr	r3, [r0, #0]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	4798      	blx	r3
 8015a0c:	b158      	cbz	r0, 8015a26 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8015a0e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015a12:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8015a16:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015a1a:	9503      	str	r5, [sp, #12]
 8015a1c:	6803      	ldr	r3, [r0, #0]
 8015a1e:	aa02      	add	r2, sp, #8
 8015a20:	689b      	ldr	r3, [r3, #8]
 8015a22:	4621      	mov	r1, r4
 8015a24:	4798      	blx	r3
 8015a26:	b005      	add	sp, #20
 8015a28:	bd30      	pop	{r4, r5, pc}

08015a2a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8015a2a:	428a      	cmp	r2, r1
 8015a2c:	bfbc      	itt	lt
 8015a2e:	460b      	movlt	r3, r1
 8015a30:	4611      	movlt	r1, r2
 8015a32:	b510      	push	{r4, lr}
 8015a34:	bfb8      	it	lt
 8015a36:	461a      	movlt	r2, r3
 8015a38:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	428b      	cmp	r3, r1
 8015a40:	d103      	bne.n	8015a4a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8015a42:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 8015a46:	4293      	cmp	r3, r2
 8015a48:	d011      	beq.n	8015a6e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8015a4a:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8015a4e:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 8015a52:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8015a56:	f005 f989 	bl	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a5a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8015a5e:	f005 f985 	bl	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a62:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8015a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a6a:	f005 b97f 	b.w	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a6e:	bd10      	pop	{r4, pc}

08015a70 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8015a70:	428a      	cmp	r2, r1
 8015a72:	bfbc      	itt	lt
 8015a74:	460b      	movlt	r3, r1
 8015a76:	4611      	movlt	r1, r2
 8015a78:	b510      	push	{r4, lr}
 8015a7a:	bfb8      	it	lt
 8015a7c:	461a      	movlt	r2, r3
 8015a7e:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8015a82:	4604      	mov	r4, r0
 8015a84:	428b      	cmp	r3, r1
 8015a86:	d103      	bne.n	8015a90 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8015a88:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d011      	beq.n	8015ab4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8015a90:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8015a94:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8015a98:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8015a9c:	f005 f966 	bl	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015aa0:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8015aa4:	f005 f962 	bl	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015aa8:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8015aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ab0:	f005 b95c 	b.w	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015ab4:	bd10      	pop	{r4, pc}

08015ab6 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	3038      	adds	r0, #56	@ 0x38
 8015aba:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 8015abe:	f005 b955 	b.w	801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>

08015ac2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8015ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8015aca:	4605      	mov	r5, r0
 8015acc:	460f      	mov	r7, r1
 8015ace:	4616      	mov	r6, r2
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d03d      	beq.n	8015b50 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8015ad4:	6803      	ldr	r3, [r0, #0]
 8015ad6:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8015ada:	4798      	blx	r3
 8015adc:	682b      	ldr	r3, [r5, #0]
 8015ade:	b204      	sxth	r4, r0
 8015ae0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	4798      	blx	r3
 8015ae8:	b203      	sxth	r3, r0
 8015aea:	429c      	cmp	r4, r3
 8015aec:	bfc4      	itt	gt
 8015aee:	4622      	movgt	r2, r4
 8015af0:	461c      	movgt	r4, r3
 8015af2:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 8015af6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8015afa:	bfc8      	it	gt
 8015afc:	4613      	movgt	r3, r2
 8015afe:	4284      	cmp	r4, r0
 8015b00:	da26      	bge.n	8015b50 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8015b02:	4298      	cmp	r0, r3
 8015b04:	bfa8      	it	ge
 8015b06:	4618      	movge	r0, r3
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	db21      	blt.n	8015b50 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8015b0c:	b9ef      	cbnz	r7, 8015b4a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 8015b0e:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 8015b12:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015b16:	4619      	mov	r1, r3
 8015b18:	42a0      	cmp	r0, r4
 8015b1a:	dd0b      	ble.n	8015b34 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 8015b1c:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 8015b20:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8015b24:	3401      	adds	r4, #1
 8015b26:	4291      	cmp	r1, r2
 8015b28:	bfa8      	it	ge
 8015b2a:	4611      	movge	r1, r2
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	bfb8      	it	lt
 8015b30:	4613      	movlt	r3, r2
 8015b32:	e7f1      	b.n	8015b18 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8015b34:	1b89      	subs	r1, r1, r6
 8015b36:	18f2      	adds	r2, r6, r3
 8015b38:	4291      	cmp	r1, r2
 8015b3a:	d009      	beq.n	8015b50 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8015b3c:	682b      	ldr	r3, [r5, #0]
 8015b3e:	4628      	mov	r0, r5
 8015b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015b48:	4718      	bx	r3
 8015b4a:	4273      	negs	r3, r6
 8015b4c:	4631      	mov	r1, r6
 8015b4e:	e7e3      	b.n	8015b18 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8015b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b54 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8015b54:	b530      	push	{r4, r5, lr}
 8015b56:	790b      	ldrb	r3, [r1, #4]
 8015b58:	b085      	sub	sp, #20
 8015b5a:	2b02      	cmp	r3, #2
 8015b5c:	4604      	mov	r4, r0
 8015b5e:	460d      	mov	r5, r1
 8015b60:	d020      	beq.n	8015ba4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015b62:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8015b64:	88c9      	ldrh	r1, [r1, #6]
 8015b66:	f10d 0206 	add.w	r2, sp, #6
 8015b6a:	1ac9      	subs	r1, r1, r3
 8015b6c:	6803      	ldr	r3, [r0, #0]
 8015b6e:	b209      	sxth	r1, r1
 8015b70:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8015b74:	4798      	blx	r3
 8015b76:	b1a8      	cbz	r0, 8015ba4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015b78:	792b      	ldrb	r3, [r5, #4]
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d812      	bhi.n	8015ba4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015b7e:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8015b82:	b178      	cbz	r0, 8015ba4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015b84:	6803      	ldr	r3, [r0, #0]
 8015b86:	68db      	ldr	r3, [r3, #12]
 8015b88:	4798      	blx	r3
 8015b8a:	b158      	cbz	r0, 8015ba4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015b8c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015b90:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8015b94:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015b98:	9503      	str	r5, [sp, #12]
 8015b9a:	6803      	ldr	r3, [r0, #0]
 8015b9c:	aa02      	add	r2, sp, #8
 8015b9e:	689b      	ldr	r3, [r3, #8]
 8015ba0:	4621      	mov	r1, r4
 8015ba2:	4798      	blx	r3
 8015ba4:	b005      	add	sp, #20
 8015ba6:	bd30      	pop	{r4, r5, pc}

08015ba8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8015ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bac:	4604      	mov	r4, r0
 8015bae:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8015bb2:	4690      	mov	r8, r2
 8015bb4:	461f      	mov	r7, r3
 8015bb6:	9e06      	ldr	r6, [sp, #24]
 8015bb8:	b928      	cbnz	r0, 8015bc6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8015bba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015bbe:	8033      	strh	r3, [r6, #0]
 8015bc0:	803b      	strh	r3, [r7, #0]
 8015bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bc6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8015bca:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8015bce:	1883      	adds	r3, r0, r2
 8015bd0:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8015bd4:	1ad2      	subs	r2, r2, r3
 8015bd6:	b212      	sxth	r2, r2
 8015bd8:	2a01      	cmp	r2, #1
 8015bda:	dc07      	bgt.n	8015bec <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8015bdc:	2300      	movs	r3, #0
 8015bde:	803b      	strh	r3, [r7, #0]
 8015be0:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8015be4:	3b01      	subs	r3, #1
 8015be6:	8033      	strh	r3, [r6, #0]
 8015be8:	2001      	movs	r0, #1
 8015bea:	e7ea      	b.n	8015bc2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8015bec:	1a08      	subs	r0, r1, r0
 8015bee:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8015bf2:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8015bf6:	0140      	lsls	r0, r0, #5
 8015bf8:	1a5b      	subs	r3, r3, r1
 8015bfa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015bfc:	d45a      	bmi.n	8015cb4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10c>
 8015bfe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8015c02:	fb93 f1f5 	sdiv	r1, r3, r5
 8015c06:	2302      	movs	r3, #2
 8015c08:	fb91 f1f3 	sdiv	r1, r1, r3
 8015c0c:	3a01      	subs	r2, #1
 8015c0e:	f005 fa78 	bl	801b102 <_ZN8touchgfx6muldivElll>
 8015c12:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8015c16:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 8015c1a:	2900      	cmp	r1, #0
 8015c1c:	db56      	blt.n	8015ccc <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x124>
 8015c1e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8015c22:	fb93 f3fc 	sdiv	r3, r3, ip
 8015c26:	2502      	movs	r5, #2
 8015c28:	fb93 f3f5 	sdiv	r3, r3, r5
 8015c2c:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8015c30:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8015c34:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 8015c38:	1a52      	subs	r2, r2, r1
 8015c3a:	eba8 0003 	sub.w	r0, r8, r3
 8015c3e:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8015c42:	d44f      	bmi.n	8015ce4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13c>
 8015c44:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8015c48:	fb92 f1fc 	sdiv	r1, r2, ip
 8015c4c:	2202      	movs	r2, #2
 8015c4e:	fb91 f1f2 	sdiv	r1, r1, r2
 8015c52:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8015c56:	4413      	add	r3, r2
 8015c58:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8015c5c:	1ad2      	subs	r2, r2, r3
 8015c5e:	b212      	sxth	r2, r2
 8015c60:	3a01      	subs	r2, #1
 8015c62:	f005 fa4e 	bl	801b102 <_ZN8touchgfx6muldivElll>
 8015c66:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8015c6a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	db45      	blt.n	8015cfc <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x154>
 8015c70:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c78:	2202      	movs	r2, #2
 8015c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c7e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8015c82:	429d      	cmp	r5, r3
 8015c84:	bfde      	ittt	le
 8015c86:	461a      	movle	r2, r3
 8015c88:	462b      	movle	r3, r5
 8015c8a:	4615      	movle	r5, r2
 8015c8c:	2020      	movs	r0, #32
 8015c8e:	2d00      	cmp	r5, #0
 8015c90:	bfb8      	it	lt
 8015c92:	fb95 f5f0 	sdivlt	r5, r5, r0
 8015c96:	b21b      	sxth	r3, r3
 8015c98:	fb93 f3f0 	sdiv	r3, r3, r0
 8015c9c:	bfa4      	itt	ge
 8015c9e:	351f      	addge	r5, #31
 8015ca0:	116d      	asrge	r5, r5, #5
 8015ca2:	b22d      	sxth	r5, r5
 8015ca4:	2d00      	cmp	r5, #0
 8015ca6:	803b      	strh	r3, [r7, #0]
 8015ca8:	8035      	strh	r5, [r6, #0]
 8015caa:	da33      	bge.n	8015d14 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16c>
 8015cac:	2000      	movs	r0, #0
 8015cae:	8030      	strh	r0, [r6, #0]
 8015cb0:	8038      	strh	r0, [r7, #0]
 8015cb2:	e786      	b.n	8015bc2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8015cb4:	f06f 0101 	mvn.w	r1, #1
 8015cb8:	fb01 5303 	mla	r3, r1, r3, r5
 8015cbc:	1e59      	subs	r1, r3, #1
 8015cbe:	fb91 f1f5 	sdiv	r1, r1, r5
 8015cc2:	2302      	movs	r3, #2
 8015cc4:	fb91 f1f3 	sdiv	r1, r1, r3
 8015cc8:	4249      	negs	r1, r1
 8015cca:	e79f      	b.n	8015c0c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8015ccc:	f06f 0301 	mvn.w	r3, #1
 8015cd0:	fb03 c301 	mla	r3, r3, r1, ip
 8015cd4:	3b01      	subs	r3, #1
 8015cd6:	fb93 f3fc 	sdiv	r3, r3, ip
 8015cda:	2502      	movs	r5, #2
 8015cdc:	fb93 f3f5 	sdiv	r3, r3, r5
 8015ce0:	425b      	negs	r3, r3
 8015ce2:	e7a3      	b.n	8015c2c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8015ce4:	f06f 0101 	mvn.w	r1, #1
 8015ce8:	fb01 c202 	mla	r2, r1, r2, ip
 8015cec:	1e51      	subs	r1, r2, #1
 8015cee:	fb91 f1fc 	sdiv	r1, r1, ip
 8015cf2:	2202      	movs	r2, #2
 8015cf4:	fb91 f1f2 	sdiv	r1, r1, r2
 8015cf8:	4249      	negs	r1, r1
 8015cfa:	e7aa      	b.n	8015c52 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8015cfc:	f06f 0101 	mvn.w	r1, #1
 8015d00:	fb01 2303 	mla	r3, r1, r3, r2
 8015d04:	3b01      	subs	r3, #1
 8015d06:	fb93 f3f2 	sdiv	r3, r3, r2
 8015d0a:	2202      	movs	r2, #2
 8015d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015d10:	425b      	negs	r3, r3
 8015d12:	e7b4      	b.n	8015c7e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8015d14:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015d18:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	dc05      	bgt.n	8015d2c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x184>
 8015d20:	3b01      	subs	r3, #1
 8015d22:	b21b      	sxth	r3, r3
 8015d24:	8033      	strh	r3, [r6, #0]
 8015d26:	2000      	movs	r0, #0
 8015d28:	803b      	strh	r3, [r7, #0]
 8015d2a:	e74a      	b.n	8015bc2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8015d2c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8015d30:	803a      	strh	r2, [r7, #0]
 8015d32:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015d36:	f9b6 2000 	ldrsh.w	r2, [r6]
 8015d3a:	4293      	cmp	r3, r2
 8015d3c:	bfdc      	itt	le
 8015d3e:	f103 33ff 	addle.w	r3, r3, #4294967295
 8015d42:	b21a      	sxthle	r2, r3
 8015d44:	8032      	strh	r2, [r6, #0]
 8015d46:	e74f      	b.n	8015be8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

08015d48 <_ZN8touchgfx9ContainerC1Ev>:
 8015d48:	2101      	movs	r1, #1
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8015d50:	4909      	ldr	r1, [pc, #36]	@ (8015d78 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8015d52:	8082      	strh	r2, [r0, #4]
 8015d54:	80c2      	strh	r2, [r0, #6]
 8015d56:	8102      	strh	r2, [r0, #8]
 8015d58:	8142      	strh	r2, [r0, #10]
 8015d5a:	8182      	strh	r2, [r0, #12]
 8015d5c:	81c2      	strh	r2, [r0, #14]
 8015d5e:	8202      	strh	r2, [r0, #16]
 8015d60:	8242      	strh	r2, [r0, #18]
 8015d62:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015d66:	61c2      	str	r2, [r0, #28]
 8015d68:	8402      	strh	r2, [r0, #32]
 8015d6a:	8442      	strh	r2, [r0, #34]	@ 0x22
 8015d6c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8015d70:	6001      	str	r1, [r0, #0]
 8015d72:	6282      	str	r2, [r0, #40]	@ 0x28
 8015d74:	4770      	bx	lr
 8015d76:	bf00      	nop
 8015d78:	0802ee88 	.word	0x0802ee88

08015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8015d7c:	6800      	ldr	r0, [r0, #0]
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	bfbd      	ittte	lt
 8015d82:	2320      	movlt	r3, #32
 8015d84:	380f      	sublt	r0, #15
 8015d86:	fb90 f0f3 	sdivlt	r0, r0, r3
 8015d8a:	3010      	addge	r0, #16
 8015d8c:	bfa8      	it	ge
 8015d8e:	1140      	asrge	r0, r0, #5
 8015d90:	4770      	bx	lr

08015d92 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8015d92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d96:	4605      	mov	r5, r0
 8015d98:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8015d9c:	4688      	mov	r8, r1
 8015d9e:	4691      	mov	r9, r2
 8015da0:	469a      	mov	sl, r3
 8015da2:	b360      	cbz	r0, 8015dfe <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8015da4:	2700      	movs	r7, #0
 8015da6:	f04f 3bff 	mov.w	fp, #4294967295
 8015daa:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8015dae:	b23e      	sxth	r6, r7
 8015db0:	42b3      	cmp	r3, r6
 8015db2:	dd23      	ble.n	8015dfc <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8015db4:	682b      	ldr	r3, [r5, #0]
 8015db6:	4631      	mov	r1, r6
 8015db8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	4798      	blx	r3
 8015dc0:	9001      	str	r0, [sp, #4]
 8015dc2:	a801      	add	r0, sp, #4
 8015dc4:	f7ff ffda 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015dc8:	682b      	ldr	r3, [r5, #0]
 8015dca:	eba0 0008 	sub.w	r0, r0, r8
 8015dce:	b204      	sxth	r4, r0
 8015dd0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015dd4:	4631      	mov	r1, r6
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	4798      	blx	r3
 8015dda:	9001      	str	r0, [sp, #4]
 8015ddc:	a801      	add	r0, sp, #4
 8015dde:	f7ff ffcd 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015de2:	eba0 0009 	sub.w	r0, r0, r9
 8015de6:	fb10 f000 	smulbb	r0, r0, r0
 8015dea:	fb04 0404 	mla	r4, r4, r4, r0
 8015dee:	455c      	cmp	r4, fp
 8015df0:	bf3c      	itt	cc
 8015df2:	f8aa 6000 	strhcc.w	r6, [sl]
 8015df6:	46a3      	movcc	fp, r4
 8015df8:	3701      	adds	r7, #1
 8015dfa:	e7d6      	b.n	8015daa <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8015dfc:	2001      	movs	r0, #1
 8015dfe:	b003      	add	sp, #12
 8015e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e04 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8015e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015e08:	460e      	mov	r6, r1
 8015e0a:	2100      	movs	r1, #0
 8015e0c:	8011      	strh	r1, [r2, #0]
 8015e0e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8015e12:	4605      	mov	r5, r0
 8015e14:	4617      	mov	r7, r2
 8015e16:	b36b      	cbz	r3, 8015e74 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8015e18:	6803      	ldr	r3, [r0, #0]
 8015e1a:	f10d 0808 	add.w	r8, sp, #8
 8015e1e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015e22:	4798      	blx	r3
 8015e24:	f848 0d04 	str.w	r0, [r8, #-4]!
 8015e28:	4640      	mov	r0, r8
 8015e2a:	f7ff ffa7 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015e2e:	2401      	movs	r4, #1
 8015e30:	b200      	sxth	r0, r0
 8015e32:	1b80      	subs	r0, r0, r6
 8015e34:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8015e38:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8015e3c:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8015e40:	42a3      	cmp	r3, r4
 8015e42:	dd1b      	ble.n	8015e7c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 8015e44:	682b      	ldr	r3, [r5, #0]
 8015e46:	4621      	mov	r1, r4
 8015e48:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015e4c:	4628      	mov	r0, r5
 8015e4e:	4798      	blx	r3
 8015e50:	9001      	str	r0, [sp, #4]
 8015e52:	4640      	mov	r0, r8
 8015e54:	f7ff ff92 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015e58:	b200      	sxth	r0, r0
 8015e5a:	1b80      	subs	r0, r0, r6
 8015e5c:	2800      	cmp	r0, #0
 8015e5e:	bfb8      	it	lt
 8015e60:	4240      	neglt	r0, r0
 8015e62:	4548      	cmp	r0, r9
 8015e64:	bf38      	it	cc
 8015e66:	803c      	strhcc	r4, [r7, #0]
 8015e68:	f104 0401 	add.w	r4, r4, #1
 8015e6c:	bf38      	it	cc
 8015e6e:	4681      	movcc	r9, r0
 8015e70:	b224      	sxth	r4, r4
 8015e72:	e7e3      	b.n	8015e3c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8015e74:	4618      	mov	r0, r3
 8015e76:	b003      	add	sp, #12
 8015e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e7c:	2001      	movs	r0, #1
 8015e7e:	e7fa      	b.n	8015e76 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08015e80 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8015e80:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8015e84:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015e88:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8015e8c:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8015e90:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8015e94:	4770      	bx	lr

08015e96 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8015e96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e98:	4604      	mov	r4, r0
 8015e9a:	3038      	adds	r0, #56	@ 0x38
 8015e9c:	460d      	mov	r5, r1
 8015e9e:	f7fe fb37 	bl	8014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015ea2:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8015ea6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8015eaa:	9200      	str	r2, [sp, #0]
 8015eac:	2200      	movs	r2, #0
 8015eae:	4628      	mov	r0, r5
 8015eb0:	4611      	mov	r1, r2
 8015eb2:	f7f8 fa89 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015eb6:	b003      	add	sp, #12
 8015eb8:	bd30      	pop	{r4, r5, pc}

08015eba <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8015eba:	b538      	push	{r3, r4, r5, lr}
 8015ebc:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8015ec0:	460d      	mov	r5, r1
 8015ec2:	428b      	cmp	r3, r1
 8015ec4:	dd08      	ble.n	8015ed8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8015ec6:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8015ec8:	b134      	cbz	r4, 8015ed8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8015eca:	6823      	ldr	r3, [r4, #0]
 8015ecc:	4620      	mov	r0, r4
 8015ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ed0:	4629      	mov	r1, r5
 8015ed2:	4798      	blx	r3
 8015ed4:	69a4      	ldr	r4, [r4, #24]
 8015ed6:	e7f7      	b.n	8015ec8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8015ed8:	bd38      	pop	{r3, r4, r5, pc}

08015eda <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8015eda:	b570      	push	{r4, r5, r6, lr}
 8015edc:	4606      	mov	r6, r0
 8015ede:	460d      	mov	r5, r1
 8015ee0:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8015ee4:	b134      	cbz	r4, 8015ef4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8015ee6:	6823      	ldr	r3, [r4, #0]
 8015ee8:	4620      	mov	r0, r4
 8015eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015eec:	4629      	mov	r1, r5
 8015eee:	4798      	blx	r3
 8015ef0:	69a4      	ldr	r4, [r4, #24]
 8015ef2:	e7f7      	b.n	8015ee4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8015ef4:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8015ef8:	b134      	cbz	r4, 8015f08 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8015efa:	6823      	ldr	r3, [r4, #0]
 8015efc:	4620      	mov	r0, r4
 8015efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f00:	4629      	mov	r1, r5
 8015f02:	4798      	blx	r3
 8015f04:	69a4      	ldr	r4, [r4, #24]
 8015f06:	e7f7      	b.n	8015ef8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8015f08:	bd70      	pop	{r4, r5, r6, pc}

08015f0a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8015f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8015f10:	b15d      	cbz	r5, 8015f2a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8015f12:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8015f16:	4628      	mov	r0, r5
 8015f18:	9200      	str	r2, [sp, #0]
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8015f20:	4611      	mov	r1, r2
 8015f22:	f7f8 fa51 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f26:	69ad      	ldr	r5, [r5, #24]
 8015f28:	e7f2      	b.n	8015f10 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8015f2a:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8015f2e:	b15d      	cbz	r5, 8015f48 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8015f30:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 8015f34:	4628      	mov	r0, r5
 8015f36:	9200      	str	r2, [sp, #0]
 8015f38:	2200      	movs	r2, #0
 8015f3a:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 8015f3e:	4611      	mov	r1, r2
 8015f40:	f7f8 fa42 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f44:	69ad      	ldr	r5, [r5, #24]
 8015f46:	e7f2      	b.n	8015f2e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8015f48:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8015f4c:	b15d      	cbz	r5, 8015f66 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8015f4e:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8015f52:	4628      	mov	r0, r5
 8015f54:	9200      	str	r2, [sp, #0]
 8015f56:	2200      	movs	r2, #0
 8015f58:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8015f5c:	4611      	mov	r1, r2
 8015f5e:	f7f8 fa33 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f62:	69ad      	ldr	r5, [r5, #24]
 8015f64:	e7f2      	b.n	8015f4c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8015f66:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8015f6a:	b15d      	cbz	r5, 8015f84 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8015f6c:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8015f70:	4628      	mov	r0, r5
 8015f72:	9200      	str	r2, [sp, #0]
 8015f74:	2200      	movs	r2, #0
 8015f76:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8015f7a:	4611      	mov	r1, r2
 8015f7c:	f7f8 fa24 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f80:	69ad      	ldr	r5, [r5, #24]
 8015f82:	e7f2      	b.n	8015f6a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8015f84:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8015f88:	b15d      	cbz	r5, 8015fa2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8015f8a:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8015f8e:	4628      	mov	r0, r5
 8015f90:	9200      	str	r2, [sp, #0]
 8015f92:	2200      	movs	r2, #0
 8015f94:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 8015f98:	4611      	mov	r1, r2
 8015f9a:	f7f8 fa15 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f9e:	69ad      	ldr	r5, [r5, #24]
 8015fa0:	e7f2      	b.n	8015f88 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	6823      	ldr	r3, [r4, #0]
 8015fa6:	695b      	ldr	r3, [r3, #20]
 8015fa8:	b003      	add	sp, #12
 8015faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fae:	4718      	bx	r3

08015fb0 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8015fb0:	b430      	push	{r4, r5}
 8015fb2:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8015fb6:	b28a      	uxth	r2, r1
 8015fb8:	1b15      	subs	r5, r2, r4
 8015fba:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8015fbe:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8015fc2:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8015fc6:	442c      	add	r4, r5
 8015fc8:	1b12      	subs	r2, r2, r4
 8015fca:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8015fce:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8015fd2:	8101      	strh	r1, [r0, #8]
 8015fd4:	bc30      	pop	{r4, r5}
 8015fd6:	f7ff bf98 	b.w	8015f0a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08015fda <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8015fda:	b430      	push	{r4, r5}
 8015fdc:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8015fe0:	b28a      	uxth	r2, r1
 8015fe2:	1b15      	subs	r5, r2, r4
 8015fe4:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 8015fe8:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8015fec:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8015ff0:	442c      	add	r4, r5
 8015ff2:	1b12      	subs	r2, r2, r4
 8015ff4:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 8015ff8:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 8015ffc:	8141      	strh	r1, [r0, #10]
 8015ffe:	bc30      	pop	{r4, r5}
 8016000:	f7ff bf83 	b.w	8015f0a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016004 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8016004:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016008:	4604      	mov	r4, r0
 801600a:	4615      	mov	r5, r2
 801600c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8016010:	fa1f fa83 	uxth.w	sl, r3
 8016014:	4699      	mov	r9, r3
 8016016:	8903      	ldrh	r3, [r0, #8]
 8016018:	fa1f f887 	uxth.w	r8, r7
 801601c:	4452      	add	r2, sl
 801601e:	8940      	ldrh	r0, [r0, #10]
 8016020:	1a9b      	subs	r3, r3, r2
 8016022:	eb08 0201 	add.w	r2, r8, r1
 8016026:	1a80      	subs	r0, r0, r2
 8016028:	b200      	sxth	r0, r0
 801602a:	460e      	mov	r6, r1
 801602c:	9000      	str	r0, [sp, #0]
 801602e:	460a      	mov	r2, r1
 8016030:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016034:	4629      	mov	r1, r5
 8016036:	b21b      	sxth	r3, r3
 8016038:	f7f8 f9c6 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801603c:	2200      	movs	r2, #0
 801603e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016042:	4611      	mov	r1, r2
 8016044:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8016048:	9600      	str	r6, [sp, #0]
 801604a:	f7f8 f9bd 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801604e:	2200      	movs	r2, #0
 8016050:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016054:	4611      	mov	r1, r2
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801605c:	462b      	mov	r3, r5
 801605e:	f7f8 f9b3 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016062:	8921      	ldrh	r1, [r4, #8]
 8016064:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016068:	eba1 010a 	sub.w	r1, r1, sl
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8016072:	464b      	mov	r3, r9
 8016074:	2200      	movs	r2, #0
 8016076:	b209      	sxth	r1, r1
 8016078:	f7f8 f9a6 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801607c:	8962      	ldrh	r2, [r4, #10]
 801607e:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016082:	eba2 0208 	sub.w	r2, r2, r8
 8016086:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801608a:	9700      	str	r7, [sp, #0]
 801608c:	b212      	sxth	r2, r2
 801608e:	2100      	movs	r1, #0
 8016090:	f7f8 f99a 	bl	800e3c8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016094:	4620      	mov	r0, r4
 8016096:	b002      	add	sp, #8
 8016098:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801609c:	f7ff bf35 	b.w	8015f0a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080160a0 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 80160a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a4:	4604      	mov	r4, r0
 80160a6:	b085      	sub	sp, #20
 80160a8:	9103      	str	r1, [sp, #12]
 80160aa:	f7ff fe4d 	bl	8015d48 <_ZN8touchgfx9ContainerC1Ev>
 80160ae:	4b2d      	ldr	r3, [pc, #180]	@ (8016164 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 80160b0:	2601      	movs	r6, #1
 80160b2:	6023      	str	r3, [r4, #0]
 80160b4:	23ff      	movs	r3, #255	@ 0xff
 80160b6:	2500      	movs	r5, #0
 80160b8:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 80160bc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80160c0:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 80160c4:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80160c8:	4658      	mov	r0, fp
 80160ca:	f7ff fe3d 	bl	8015d48 <_ZN8touchgfx9ContainerC1Ev>
 80160ce:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 80160d2:	4648      	mov	r0, r9
 80160d4:	f7ff fe38 	bl	8015d48 <_ZN8touchgfx9ContainerC1Ev>
 80160d8:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 80160dc:	4640      	mov	r0, r8
 80160de:	f7ff fe33 	bl	8015d48 <_ZN8touchgfx9ContainerC1Ev>
 80160e2:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 80160e6:	4650      	mov	r0, sl
 80160e8:	f7ff fe2e 	bl	8015d48 <_ZN8touchgfx9ContainerC1Ev>
 80160ec:	4638      	mov	r0, r7
 80160ee:	f7ff fe2b 	bl	8015d48 <_ZN8touchgfx9ContainerC1Ev>
 80160f2:	9903      	ldr	r1, [sp, #12]
 80160f4:	4620      	mov	r0, r4
 80160f6:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 80160fa:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 80160fe:	4659      	mov	r1, fp
 8016100:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8016104:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8016108:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 801610c:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8016110:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8016114:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8016118:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801611c:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8016120:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 8016124:	f7fe f9f4 	bl	8014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016128:	4651      	mov	r1, sl
 801612a:	4620      	mov	r0, r4
 801612c:	f7fe f9f0 	bl	8014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016130:	4649      	mov	r1, r9
 8016132:	4620      	mov	r0, r4
 8016134:	f7fe f9ec 	bl	8014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016138:	4641      	mov	r1, r8
 801613a:	4620      	mov	r0, r4
 801613c:	f7fe f9e8 	bl	8014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016140:	4639      	mov	r1, r7
 8016142:	4620      	mov	r0, r4
 8016144:	f7fe f9e4 	bl	8014510 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016148:	4620      	mov	r0, r4
 801614a:	9500      	str	r5, [sp, #0]
 801614c:	462b      	mov	r3, r5
 801614e:	462a      	mov	r2, r5
 8016150:	4629      	mov	r1, r5
 8016152:	f7ff ff57 	bl	8016004 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8016156:	4620      	mov	r0, r4
 8016158:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 801615c:	b005      	add	sp, #20
 801615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016162:	bf00      	nop
 8016164:	0802f2b8 	.word	0x0802f2b8

08016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8016168:	4291      	cmp	r1, r2
 801616a:	4613      	mov	r3, r2
 801616c:	d003      	beq.n	8016176 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 801616e:	460a      	mov	r2, r1
 8016170:	4619      	mov	r1, r3
 8016172:	f004 bfc6 	b.w	801b102 <_ZN8touchgfx6muldivElll>
 8016176:	4770      	bx	lr

08016178 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8016178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801617c:	6803      	ldr	r3, [r0, #0]
 801617e:	460d      	mov	r5, r1
 8016180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016184:	4604      	mov	r4, r0
 8016186:	4798      	blx	r3
 8016188:	42a8      	cmp	r0, r5
 801618a:	4606      	mov	r6, r0
 801618c:	d024      	beq.n	80161d8 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	4601      	mov	r1, r0
 8016192:	462a      	mov	r2, r5
 8016194:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8016198:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 801619c:	f7ff ffe4 	bl	8016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80161a0:	462a      	mov	r2, r5
 80161a2:	4680      	mov	r8, r0
 80161a4:	4631      	mov	r1, r6
 80161a6:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 80161aa:	f7ff ffdd 	bl	8016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80161ae:	4641      	mov	r1, r8
 80161b0:	4602      	mov	r2, r0
 80161b2:	4620      	mov	r0, r4
 80161b4:	47b8      	blx	r7
 80161b6:	462a      	mov	r2, r5
 80161b8:	4631      	mov	r1, r6
 80161ba:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 80161be:	f7ff ffd3 	bl	8016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80161c2:	462a      	mov	r2, r5
 80161c4:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 80161c8:	4631      	mov	r1, r6
 80161ca:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80161ce:	f7ff ffcb 	bl	8016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80161d2:	6325      	str	r5, [r4, #48]	@ 0x30
 80161d4:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 80161d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161dc <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 80161dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161e0:	4604      	mov	r4, r0
 80161e2:	460f      	mov	r7, r1
 80161e4:	b1ba      	cbz	r2, 8016216 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 80161e6:	6803      	ldr	r3, [r0, #0]
 80161e8:	2600      	movs	r6, #0
 80161ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80161ee:	4798      	blx	r3
 80161f0:	4681      	mov	r9, r0
 80161f2:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80161f6:	b235      	sxth	r5, r6
 80161f8:	42ab      	cmp	r3, r5
 80161fa:	f106 0601 	add.w	r6, r6, #1
 80161fe:	dd0a      	ble.n	8016216 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 8016200:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8016204:	463a      	mov	r2, r7
 8016206:	4649      	mov	r1, r9
 8016208:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 801620c:	f7ff ffac 	bl	8016168 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016210:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8016214:	e7ed      	b.n	80161f2 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8016216:	6367      	str	r7, [r4, #52]	@ 0x34
 8016218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801621c <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 801621c:	b570      	push	{r4, r5, r6, lr}
 801621e:	4604      	mov	r4, r0
 8016220:	460d      	mov	r5, r1
 8016222:	6803      	ldr	r3, [r0, #0]
 8016224:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016228:	4798      	blx	r3
 801622a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 801622e:	4629      	mov	r1, r5
 8016230:	3301      	adds	r3, #1
 8016232:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8016236:	6823      	ldr	r3, [r4, #0]
 8016238:	4620      	mov	r0, r4
 801623a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801623e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016242:	4718      	bx	r3

08016244 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016246:	4604      	mov	r4, r0
 8016248:	4608      	mov	r0, r1
 801624a:	460d      	mov	r5, r1
 801624c:	f7fe fb1d 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016250:	b978      	cbnz	r0, 8016272 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016252:	4620      	mov	r0, r4
 8016254:	f7fe fb19 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016258:	f9b5 6000 	ldrsh.w	r6, [r5]
 801625c:	b150      	cbz	r0, 8016274 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801625e:	8026      	strh	r6, [r4, #0]
 8016260:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016264:	8063      	strh	r3, [r4, #2]
 8016266:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801626a:	80a3      	strh	r3, [r4, #4]
 801626c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016270:	80e3      	strh	r3, [r4, #6]
 8016272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016274:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016278:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801627c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016280:	42b1      	cmp	r1, r6
 8016282:	460f      	mov	r7, r1
 8016284:	bfa8      	it	ge
 8016286:	4637      	movge	r7, r6
 8016288:	4293      	cmp	r3, r2
 801628a:	4618      	mov	r0, r3
 801628c:	bfa8      	it	ge
 801628e:	4610      	movge	r0, r2
 8016290:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016294:	88ed      	ldrh	r5, [r5, #6]
 8016296:	4466      	add	r6, ip
 8016298:	442a      	add	r2, r5
 801629a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801629e:	88e5      	ldrh	r5, [r4, #6]
 80162a0:	4461      	add	r1, ip
 80162a2:	442b      	add	r3, r5
 80162a4:	b236      	sxth	r6, r6
 80162a6:	b209      	sxth	r1, r1
 80162a8:	b212      	sxth	r2, r2
 80162aa:	b21b      	sxth	r3, r3
 80162ac:	428e      	cmp	r6, r1
 80162ae:	bfac      	ite	ge
 80162b0:	ebc7 0106 	rsbge	r1, r7, r6
 80162b4:	ebc7 0101 	rsblt	r1, r7, r1
 80162b8:	429a      	cmp	r2, r3
 80162ba:	bfac      	ite	ge
 80162bc:	ebc0 0202 	rsbge	r2, r0, r2
 80162c0:	ebc0 0203 	rsblt	r2, r0, r3
 80162c4:	8027      	strh	r7, [r4, #0]
 80162c6:	8060      	strh	r0, [r4, #2]
 80162c8:	80a1      	strh	r1, [r4, #4]
 80162ca:	80e2      	strh	r2, [r4, #6]
 80162cc:	e7d1      	b.n	8016272 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080162ce <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 80162ce:	6800      	ldr	r0, [r0, #0]
 80162d0:	2800      	cmp	r0, #0
 80162d2:	bfb9      	ittee	lt
 80162d4:	2320      	movlt	r3, #32
 80162d6:	fb90 f0f3 	sdivlt	r0, r0, r3
 80162da:	301f      	addge	r0, #31
 80162dc:	1140      	asrge	r0, r0, #5
 80162de:	4770      	bx	lr

080162e0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 80162e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e4:	6803      	ldr	r3, [r0, #0]
 80162e6:	6945      	ldr	r5, [r0, #20]
 80162e8:	b093      	sub	sp, #76	@ 0x4c
 80162ea:	4604      	mov	r4, r0
 80162ec:	460f      	mov	r7, r1
 80162ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80162f0:	2d00      	cmp	r5, #0
 80162f2:	f000 81ad 	beq.w	8016650 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 80162f6:	696d      	ldr	r5, [r5, #20]
 80162f8:	4798      	blx	r3
 80162fa:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d077      	beq.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016302:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8016306:	fb13 f000 	smulbb	r0, r3, r0
 801630a:	b283      	uxth	r3, r0
 801630c:	1c58      	adds	r0, r3, #1
 801630e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016312:	1200      	asrs	r0, r0, #8
 8016314:	d06d      	beq.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016316:	b2c3      	uxtb	r3, r0
 8016318:	9308      	str	r3, [sp, #32]
 801631a:	6823      	ldr	r3, [r4, #0]
 801631c:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 8016320:	462a      	mov	r2, r5
 8016322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016326:	4621      	mov	r1, r4
 8016328:	4640      	mov	r0, r8
 801632a:	ae0e      	add	r6, sp, #56	@ 0x38
 801632c:	4798      	blx	r3
 801632e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8016332:	e886 0003 	stmia.w	r6, {r0, r1}
 8016336:	4639      	mov	r1, r7
 8016338:	4630      	mov	r0, r6
 801633a:	f7fe fa63 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801633e:	6823      	ldr	r3, [r4, #0]
 8016340:	4629      	mov	r1, r5
 8016342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016346:	4620      	mov	r0, r4
 8016348:	4798      	blx	r3
 801634a:	6823      	ldr	r3, [r4, #0]
 801634c:	4607      	mov	r7, r0
 801634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016352:	4629      	mov	r1, r5
 8016354:	4620      	mov	r0, r4
 8016356:	4798      	blx	r3
 8016358:	4681      	mov	r9, r0
 801635a:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 801635e:	4629      	mov	r1, r5
 8016360:	0103      	lsls	r3, r0, #4
 8016362:	9309      	str	r3, [sp, #36]	@ 0x24
 8016364:	6823      	ldr	r3, [r4, #0]
 8016366:	4620      	mov	r0, r4
 8016368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801636c:	4798      	blx	r3
 801636e:	b203      	sxth	r3, r0
 8016370:	9306      	str	r3, [sp, #24]
 8016372:	6823      	ldr	r3, [r4, #0]
 8016374:	4629      	mov	r1, r5
 8016376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801637a:	4620      	mov	r0, r4
 801637c:	4798      	blx	r3
 801637e:	2f00      	cmp	r7, #0
 8016380:	b203      	sxth	r3, r0
 8016382:	9307      	str	r3, [sp, #28]
 8016384:	d138      	bne.n	80163f8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8016386:	f1b9 0f00 	cmp.w	r9, #0
 801638a:	d132      	bne.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801638c:	6823      	ldr	r3, [r4, #0]
 801638e:	464a      	mov	r2, r9
 8016390:	4629      	mov	r1, r5
 8016392:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016396:	4620      	mov	r0, r4
 8016398:	4798      	blx	r3
 801639a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801639c:	1ac0      	subs	r0, r0, r3
 801639e:	9010      	str	r0, [sp, #64]	@ 0x40
 80163a0:	4640      	mov	r0, r8
 80163a2:	f7ff fceb 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80163a6:	6823      	ldr	r3, [r4, #0]
 80163a8:	4607      	mov	r7, r0
 80163aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80163ae:	4629      	mov	r1, r5
 80163b0:	4620      	mov	r0, r4
 80163b2:	4798      	blx	r3
 80163b4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80163b8:	1a38      	subs	r0, r7, r0
 80163ba:	fa0f f880 	sxth.w	r8, r0
 80163be:	eb13 0f08 	cmn.w	r3, r8
 80163c2:	d416      	bmi.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80163c4:	6823      	ldr	r3, [r4, #0]
 80163c6:	4629      	mov	r1, r5
 80163c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80163cc:	4620      	mov	r0, r4
 80163ce:	4798      	blx	r3
 80163d0:	4580      	cmp	r8, r0
 80163d2:	da0e      	bge.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80163d4:	9a08      	ldr	r2, [sp, #32]
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	9202      	str	r2, [sp, #8]
 80163da:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80163de:	b23f      	sxth	r7, r7
 80163e0:	9201      	str	r2, [sp, #4]
 80163e2:	9700      	str	r7, [sp, #0]
 80163e4:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80163e8:	4631      	mov	r1, r6
 80163ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80163ee:	4620      	mov	r0, r4
 80163f0:	47a8      	blx	r5
 80163f2:	b013      	add	sp, #76	@ 0x4c
 80163f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f8:	ddfb      	ble.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80163fa:	6823      	ldr	r3, [r4, #0]
 80163fc:	4629      	mov	r1, r5
 80163fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016402:	4620      	mov	r0, r4
 8016404:	4798      	blx	r3
 8016406:	6823      	ldr	r3, [r4, #0]
 8016408:	4683      	mov	fp, r0
 801640a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801640e:	4629      	mov	r1, r5
 8016410:	4620      	mov	r0, r4
 8016412:	4798      	blx	r3
 8016414:	eba0 030b 	sub.w	r3, r0, fp
 8016418:	2b00      	cmp	r3, #0
 801641a:	bfb8      	it	lt
 801641c:	425b      	neglt	r3, r3
 801641e:	fb93 f3f7 	sdiv	r3, r3, r7
 8016422:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8016426:	4680      	mov	r8, r0
 8016428:	dce3      	bgt.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801642a:	6823      	ldr	r3, [r4, #0]
 801642c:	465a      	mov	r2, fp
 801642e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016432:	4629      	mov	r1, r5
 8016434:	4620      	mov	r0, r4
 8016436:	4798      	blx	r3
 8016438:	6823      	ldr	r3, [r4, #0]
 801643a:	4606      	mov	r6, r0
 801643c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016440:	4642      	mov	r2, r8
 8016442:	4629      	mov	r1, r5
 8016444:	4620      	mov	r0, r4
 8016446:	4798      	blx	r3
 8016448:	42b0      	cmp	r0, r6
 801644a:	bfa2      	ittt	ge
 801644c:	4643      	movge	r3, r8
 801644e:	46d8      	movge	r8, fp
 8016450:	469b      	movge	fp, r3
 8016452:	fb98 f6f7 	sdiv	r6, r8, r7
 8016456:	45d8      	cmp	r8, fp
 8016458:	bfac      	ite	ge
 801645a:	f04f 33ff 	movge.w	r3, #4294967295
 801645e:	2301      	movlt	r3, #1
 8016460:	fb9b f2f7 	sdiv	r2, fp, r7
 8016464:	1af6      	subs	r6, r6, r3
 8016466:	441a      	add	r2, r3
 8016468:	4296      	cmp	r6, r2
 801646a:	bfac      	ite	ge
 801646c:	f04f 3aff 	movge.w	sl, #4294967295
 8016470:	f04f 0a01 	movlt.w	sl, #1
 8016474:	f1b9 0f00 	cmp.w	r9, #0
 8016478:	d13e      	bne.n	80164f8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 801647a:	fb07 fb0a 	mul.w	fp, r7, sl
 801647e:	4377      	muls	r7, r6
 8016480:	eb0a 0802 	add.w	r8, sl, r2
 8016484:	45b0      	cmp	r8, r6
 8016486:	d0b4      	beq.n	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8016488:	6823      	ldr	r3, [r4, #0]
 801648a:	463a      	mov	r2, r7
 801648c:	4629      	mov	r1, r5
 801648e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016492:	4620      	mov	r0, r4
 8016494:	4798      	blx	r3
 8016496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016498:	1ac0      	subs	r0, r0, r3
 801649a:	9010      	str	r0, [sp, #64]	@ 0x40
 801649c:	a810      	add	r0, sp, #64	@ 0x40
 801649e:	f7ff fc6d 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80164a2:	6823      	ldr	r3, [r4, #0]
 80164a4:	4681      	mov	r9, r0
 80164a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80164aa:	4629      	mov	r1, r5
 80164ac:	4620      	mov	r0, r4
 80164ae:	4798      	blx	r3
 80164b0:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80164b4:	eba9 0000 	sub.w	r0, r9, r0
 80164b8:	b203      	sxth	r3, r0
 80164ba:	42da      	cmn	r2, r3
 80164bc:	9304      	str	r3, [sp, #16]
 80164be:	d418      	bmi.n	80164f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80164c0:	6822      	ldr	r2, [r4, #0]
 80164c2:	4629      	mov	r1, r5
 80164c4:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 80164c8:	4620      	mov	r0, r4
 80164ca:	4790      	blx	r2
 80164cc:	9b04      	ldr	r3, [sp, #16]
 80164ce:	4283      	cmp	r3, r0
 80164d0:	da0f      	bge.n	80164f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80164d2:	9b08      	ldr	r3, [sp, #32]
 80164d4:	6822      	ldr	r2, [r4, #0]
 80164d6:	9302      	str	r3, [sp, #8]
 80164d8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80164dc:	a90e      	add	r1, sp, #56	@ 0x38
 80164de:	9301      	str	r3, [sp, #4]
 80164e0:	fa0f f389 	sxth.w	r3, r9
 80164e4:	9300      	str	r3, [sp, #0]
 80164e6:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 80164ea:	4620      	mov	r0, r4
 80164ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164f0:	47c8      	blx	r9
 80164f2:	4456      	add	r6, sl
 80164f4:	445f      	add	r7, fp
 80164f6:	e7c5      	b.n	8016484 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 80164f8:	fb98 f8f9 	sdiv	r8, r8, r9
 80164fc:	eba8 0203 	sub.w	r2, r8, r3
 8016500:	fb9b f8f9 	sdiv	r8, fp, r9
 8016504:	4498      	add	r8, r3
 8016506:	4542      	cmp	r2, r8
 8016508:	bfac      	ite	ge
 801650a:	f04f 33ff 	movge.w	r3, #4294967295
 801650e:	2301      	movlt	r3, #1
 8016510:	930a      	str	r3, [sp, #40]	@ 0x28
 8016512:	6823      	ldr	r3, [r4, #0]
 8016514:	4629      	mov	r1, r5
 8016516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801651a:	9204      	str	r2, [sp, #16]
 801651c:	4620      	mov	r0, r4
 801651e:	fb02 f209 	mul.w	r2, r2, r9
 8016522:	4798      	blx	r3
 8016524:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8016528:	f84b 0d08 	str.w	r0, [fp, #-8]!
 801652c:	4658      	mov	r0, fp
 801652e:	f7ff fc25 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016532:	b203      	sxth	r3, r0
 8016534:	9305      	str	r3, [sp, #20]
 8016536:	6823      	ldr	r3, [r4, #0]
 8016538:	fb06 f207 	mul.w	r2, r6, r7
 801653c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016540:	4629      	mov	r1, r5
 8016542:	4620      	mov	r0, r4
 8016544:	4798      	blx	r3
 8016546:	9010      	str	r0, [sp, #64]	@ 0x40
 8016548:	4658      	mov	r0, fp
 801654a:	f7ff fc17 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801654e:	fb07 f20a 	mul.w	r2, r7, sl
 8016552:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016556:	b203      	sxth	r3, r0
 8016558:	4442      	add	r2, r8
 801655a:	920c      	str	r2, [sp, #48]	@ 0x30
 801655c:	9a05      	ldr	r2, [sp, #20]
 801655e:	429a      	cmp	r2, r3
 8016560:	dc16      	bgt.n	8016590 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8016562:	eb06 080a 	add.w	r8, r6, sl
 8016566:	fb07 f808 	mul.w	r8, r7, r8
 801656a:	9a05      	ldr	r2, [sp, #20]
 801656c:	429a      	cmp	r2, r3
 801656e:	db54      	blt.n	801661a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8016570:	6823      	ldr	r3, [r4, #0]
 8016572:	4642      	mov	r2, r8
 8016574:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016578:	4629      	mov	r1, r5
 801657a:	4620      	mov	r0, r4
 801657c:	4798      	blx	r3
 801657e:	9010      	str	r0, [sp, #64]	@ 0x40
 8016580:	4658      	mov	r0, fp
 8016582:	f7ff fbfb 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016588:	4456      	add	r6, sl
 801658a:	b203      	sxth	r3, r0
 801658c:	4490      	add	r8, r2
 801658e:	e7ec      	b.n	801656a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	fb07 f206 	mul.w	r2, r7, r6
 8016596:	4629      	mov	r1, r5
 8016598:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801659c:	4620      	mov	r0, r4
 801659e:	4798      	blx	r3
 80165a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165a2:	1ac0      	subs	r0, r0, r3
 80165a4:	9010      	str	r0, [sp, #64]	@ 0x40
 80165a6:	4658      	mov	r0, fp
 80165a8:	f7ff fbe8 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80165ac:	6823      	ldr	r3, [r4, #0]
 80165ae:	4680      	mov	r8, r0
 80165b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80165b4:	4629      	mov	r1, r5
 80165b6:	4620      	mov	r0, r4
 80165b8:	4798      	blx	r3
 80165ba:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80165be:	eba8 0000 	sub.w	r0, r8, r0
 80165c2:	b203      	sxth	r3, r0
 80165c4:	42da      	cmn	r2, r3
 80165c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80165c8:	d418      	bmi.n	80165fc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80165ca:	6822      	ldr	r2, [r4, #0]
 80165cc:	4629      	mov	r1, r5
 80165ce:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 80165d2:	4620      	mov	r0, r4
 80165d4:	4790      	blx	r2
 80165d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80165d8:	4283      	cmp	r3, r0
 80165da:	da0f      	bge.n	80165fc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80165dc:	9b08      	ldr	r3, [sp, #32]
 80165de:	6822      	ldr	r2, [r4, #0]
 80165e0:	9302      	str	r3, [sp, #8]
 80165e2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80165e6:	a90e      	add	r1, sp, #56	@ 0x38
 80165e8:	9301      	str	r3, [sp, #4]
 80165ea:	fa0f f388 	sxth.w	r3, r8
 80165ee:	9300      	str	r3, [sp, #0]
 80165f0:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 80165f4:	4620      	mov	r0, r4
 80165f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80165fa:	47c0      	blx	r8
 80165fc:	6823      	ldr	r3, [r4, #0]
 80165fe:	4456      	add	r6, sl
 8016600:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016604:	fb06 f207 	mul.w	r2, r6, r7
 8016608:	4629      	mov	r1, r5
 801660a:	4620      	mov	r0, r4
 801660c:	4798      	blx	r3
 801660e:	9010      	str	r0, [sp, #64]	@ 0x40
 8016610:	4658      	mov	r0, fp
 8016612:	f7ff fbb3 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016616:	b203      	sxth	r3, r0
 8016618:	e7a0      	b.n	801655c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 801661a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801661c:	930d      	str	r3, [sp, #52]	@ 0x34
 801661e:	9b04      	ldr	r3, [sp, #16]
 8016620:	4413      	add	r3, r2
 8016622:	9304      	str	r3, [sp, #16]
 8016624:	9a04      	ldr	r2, [sp, #16]
 8016626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016628:	4293      	cmp	r3, r2
 801662a:	f43f aee2 	beq.w	80163f2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801662e:	9b04      	ldr	r3, [sp, #16]
 8016630:	6822      	ldr	r2, [r4, #0]
 8016632:	4629      	mov	r1, r5
 8016634:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 8016638:	4620      	mov	r0, r4
 801663a:	fb03 f209 	mul.w	r2, r3, r9
 801663e:	47c0      	blx	r8
 8016640:	9010      	str	r0, [sp, #64]	@ 0x40
 8016642:	4658      	mov	r0, fp
 8016644:	f7ff fb9a 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016648:	b203      	sxth	r3, r0
 801664a:	9305      	str	r3, [sp, #20]
 801664c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801664e:	e785      	b.n	801655c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8016650:	4798      	blx	r3
 8016652:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8016656:	deff      	udf	#255	@ 0xff

08016658 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8016658:	b510      	push	{r4, lr}
 801665a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801665e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8016662:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8016666:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801666a:	13a4      	asrs	r4, r4, #14
 801666c:	139b      	asrs	r3, r3, #14
 801666e:	429c      	cmp	r4, r3
 8016670:	bfb8      	it	lt
 8016672:	461c      	movlt	r4, r3
 8016674:	2c01      	cmp	r4, #1
 8016676:	dd07      	ble.n	8016688 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016678:	fb91 f1f4 	sdiv	r1, r1, r4
 801667c:	fb90 f0f4 	sdiv	r0, r0, r4
 8016680:	f7ff ffea 	bl	8016658 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016684:	4360      	muls	r0, r4
 8016686:	bd10      	pop	{r4, pc}
 8016688:	4340      	muls	r0, r0
 801668a:	fb01 0101 	mla	r1, r1, r1, r0
 801668e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8016692:	bfb4      	ite	lt
 8016694:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8016698:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 801669c:	2000      	movs	r0, #0
 801669e:	18c2      	adds	r2, r0, r3
 80166a0:	428a      	cmp	r2, r1
 80166a2:	bf9c      	itt	ls
 80166a4:	1898      	addls	r0, r3, r2
 80166a6:	1a89      	subls	r1, r1, r2
 80166a8:	089b      	lsrs	r3, r3, #2
 80166aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80166ae:	d1f6      	bne.n	801669e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 80166b0:	e7e9      	b.n	8016686 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080166b2 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 80166b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166b4:	9906      	ldr	r1, [sp, #24]
 80166b6:	4606      	mov	r6, r0
 80166b8:	4291      	cmp	r1, r2
 80166ba:	bfbc      	itt	lt
 80166bc:	9206      	strlt	r2, [sp, #24]
 80166be:	460a      	movlt	r2, r1
 80166c0:	9907      	ldr	r1, [sp, #28]
 80166c2:	461c      	mov	r4, r3
 80166c4:	428b      	cmp	r3, r1
 80166c6:	bfc8      	it	gt
 80166c8:	460c      	movgt	r4, r1
 80166ca:	f04f 0020 	mov.w	r0, #32
 80166ce:	fb92 f5f0 	sdiv	r5, r2, r0
 80166d2:	fb94 f4f0 	sdiv	r4, r4, r0
 80166d6:	a806      	add	r0, sp, #24
 80166d8:	bfc8      	it	gt
 80166da:	9307      	strgt	r3, [sp, #28]
 80166dc:	f7ff fdf7 	bl	80162ce <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80166e0:	4607      	mov	r7, r0
 80166e2:	a807      	add	r0, sp, #28
 80166e4:	f7ff fdf3 	bl	80162ce <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80166e8:	1b7a      	subs	r2, r7, r5
 80166ea:	1b00      	subs	r0, r0, r4
 80166ec:	80f0      	strh	r0, [r6, #6]
 80166ee:	8035      	strh	r5, [r6, #0]
 80166f0:	8074      	strh	r4, [r6, #2]
 80166f2:	80b2      	strh	r2, [r6, #4]
 80166f4:	4630      	mov	r0, r6
 80166f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080166f8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 80166f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166fa:	2602      	movs	r6, #2
 80166fc:	9c08      	ldr	r4, [sp, #32]
 80166fe:	4605      	mov	r5, r0
 8016700:	3401      	adds	r4, #1
 8016702:	fb94 f4f6 	sdiv	r4, r4, r6
 8016706:	18a6      	adds	r6, r4, r2
 8016708:	191f      	adds	r7, r3, r4
 801670a:	e9cd 6700 	strd	r6, r7, [sp]
 801670e:	1b1b      	subs	r3, r3, r4
 8016710:	1b12      	subs	r2, r2, r4
 8016712:	f7ff ffce 	bl	80166b2 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8016716:	4628      	mov	r0, r5
 8016718:	b003      	add	sp, #12
 801671a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801671c <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 801671c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016720:	6943      	ldr	r3, [r0, #20]
 8016722:	b087      	sub	sp, #28
 8016724:	4606      	mov	r6, r0
 8016726:	460d      	mov	r5, r1
 8016728:	2b00      	cmp	r3, #0
 801672a:	d072      	beq.n	8016812 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 801672c:	695c      	ldr	r4, [r3, #20]
 801672e:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8016732:	6823      	ldr	r3, [r4, #0]
 8016734:	4620      	mov	r0, r4
 8016736:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801673a:	4798      	blx	r3
 801673c:	6823      	ldr	r3, [r4, #0]
 801673e:	4680      	mov	r8, r0
 8016740:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016744:	4629      	mov	r1, r5
 8016746:	4620      	mov	r0, r4
 8016748:	4798      	blx	r3
 801674a:	017f      	lsls	r7, r7, #5
 801674c:	4603      	mov	r3, r0
 801674e:	9700      	str	r7, [sp, #0]
 8016750:	4642      	mov	r2, r8
 8016752:	4631      	mov	r1, r6
 8016754:	a802      	add	r0, sp, #8
 8016756:	f7ff ffcf 	bl	80166f8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801675a:	2d00      	cmp	r5, #0
 801675c:	dd1b      	ble.n	8016796 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 801675e:	6823      	ldr	r3, [r4, #0]
 8016760:	f105 38ff 	add.w	r8, r5, #4294967295
 8016764:	fa0f f888 	sxth.w	r8, r8
 8016768:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801676c:	4641      	mov	r1, r8
 801676e:	4620      	mov	r0, r4
 8016770:	4798      	blx	r3
 8016772:	6823      	ldr	r3, [r4, #0]
 8016774:	4681      	mov	r9, r0
 8016776:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801677a:	4641      	mov	r1, r8
 801677c:	4620      	mov	r0, r4
 801677e:	4798      	blx	r3
 8016780:	4631      	mov	r1, r6
 8016782:	4603      	mov	r3, r0
 8016784:	9700      	str	r7, [sp, #0]
 8016786:	a804      	add	r0, sp, #16
 8016788:	464a      	mov	r2, r9
 801678a:	f7ff ffb5 	bl	80166f8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801678e:	a904      	add	r1, sp, #16
 8016790:	a802      	add	r0, sp, #8
 8016792:	f7ff fd57 	bl	8016244 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016796:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801679a:	3b01      	subs	r3, #1
 801679c:	429d      	cmp	r5, r3
 801679e:	da19      	bge.n	80167d4 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 80167a0:	6823      	ldr	r3, [r4, #0]
 80167a2:	3501      	adds	r5, #1
 80167a4:	b22d      	sxth	r5, r5
 80167a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80167aa:	4629      	mov	r1, r5
 80167ac:	4620      	mov	r0, r4
 80167ae:	4798      	blx	r3
 80167b0:	6823      	ldr	r3, [r4, #0]
 80167b2:	4680      	mov	r8, r0
 80167b4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80167b8:	4629      	mov	r1, r5
 80167ba:	4620      	mov	r0, r4
 80167bc:	4798      	blx	r3
 80167be:	4631      	mov	r1, r6
 80167c0:	4603      	mov	r3, r0
 80167c2:	9700      	str	r7, [sp, #0]
 80167c4:	a804      	add	r0, sp, #16
 80167c6:	4642      	mov	r2, r8
 80167c8:	f7ff ff96 	bl	80166f8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80167cc:	a904      	add	r1, sp, #16
 80167ce:	a802      	add	r0, sp, #8
 80167d0:	f7ff fd38 	bl	8016244 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80167d4:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 80167d8:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 80167dc:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 80167e0:	18ca      	adds	r2, r1, r3
 80167e2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80167e6:	f8ad 1012 	strh.w	r1, [sp, #18]
 80167ea:	1a9b      	subs	r3, r3, r2
 80167ec:	2200      	movs	r2, #0
 80167ee:	f8ad 0014 	strh.w	r0, [sp, #20]
 80167f2:	a904      	add	r1, sp, #16
 80167f4:	a802      	add	r0, sp, #8
 80167f6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80167fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80167fe:	f7fe f801 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8016802:	6833      	ldr	r3, [r6, #0]
 8016804:	a902      	add	r1, sp, #8
 8016806:	691b      	ldr	r3, [r3, #16]
 8016808:	4630      	mov	r0, r6
 801680a:	4798      	blx	r3
 801680c:	b007      	add	sp, #28
 801680e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	deff      	udf	#255	@ 0xff

08016816 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8016816:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801681a:	2b00      	cmp	r3, #0
 801681c:	da05      	bge.n	801682a <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 801681e:	880a      	ldrh	r2, [r1, #0]
 8016820:	b29b      	uxth	r3, r3
 8016822:	441a      	add	r2, r3
 8016824:	425b      	negs	r3, r3
 8016826:	800a      	strh	r2, [r1, #0]
 8016828:	808b      	strh	r3, [r1, #4]
 801682a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801682e:	2b00      	cmp	r3, #0
 8016830:	da05      	bge.n	801683e <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8016832:	884a      	ldrh	r2, [r1, #2]
 8016834:	b29b      	uxth	r3, r3
 8016836:	441a      	add	r2, r3
 8016838:	425b      	negs	r3, r3
 801683a:	804a      	strh	r2, [r1, #2]
 801683c:	80cb      	strh	r3, [r1, #6]
 801683e:	4770      	bx	lr

08016840 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 8016840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016842:	4604      	mov	r4, r0
 8016844:	460d      	mov	r5, r1
 8016846:	6801      	ldr	r1, [r0, #0]
 8016848:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 801684c:	9001      	str	r0, [sp, #4]
 801684e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8016852:	9000      	str	r0, [sp, #0]
 8016854:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 8016858:	a802      	add	r0, sp, #8
 801685a:	4621      	mov	r1, r4
 801685c:	47b0      	blx	r6
 801685e:	a902      	add	r1, sp, #8
 8016860:	4620      	mov	r0, r4
 8016862:	f7ff ffd8 	bl	8016816 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8016866:	a802      	add	r0, sp, #8
 8016868:	4629      	mov	r1, r5
 801686a:	f7fd ffcb 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801686e:	a802      	add	r0, sp, #8
 8016870:	f7fe f80b 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016874:	b968      	cbnz	r0, 8016892 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8016876:	6823      	ldr	r3, [r4, #0]
 8016878:	a902      	add	r1, sp, #8
 801687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801687c:	4620      	mov	r0, r4
 801687e:	4798      	blx	r3
 8016880:	f7f7 f850 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 8016884:	6803      	ldr	r3, [r0, #0]
 8016886:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016888:	6a1d      	ldr	r5, [r3, #32]
 801688a:	a902      	add	r1, sp, #8
 801688c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8016890:	47a8      	blx	r5
 8016892:	b004      	add	sp, #16
 8016894:	bd70      	pop	{r4, r5, r6, pc}

08016896 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE>:
 8016896:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801689a:	6943      	ldr	r3, [r0, #20]
 801689c:	4680      	mov	r8, r0
 801689e:	460f      	mov	r7, r1
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d065      	beq.n	8016970 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xda>
 80168a4:	695d      	ldr	r5, [r3, #20]
 80168a6:	6803      	ldr	r3, [r0, #0]
 80168a8:	f9b5 b120 	ldrsh.w	fp, [r5, #288]	@ 0x120
 80168ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80168ae:	4798      	blx	r3
 80168b0:	f1bb 0f00 	cmp.w	fp, #0
 80168b4:	d04e      	beq.n	8016954 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xbe>
 80168b6:	f895 602c 	ldrb.w	r6, [r5, #44]	@ 0x2c
 80168ba:	fb16 f000 	smulbb	r0, r6, r0
 80168be:	b280      	uxth	r0, r0
 80168c0:	1c46      	adds	r6, r0, #1
 80168c2:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80168c6:	1236      	asrs	r6, r6, #8
 80168c8:	d044      	beq.n	8016954 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xbe>
 80168ca:	682b      	ldr	r3, [r5, #0]
 80168cc:	f10b 31ff 	add.w	r1, fp, #4294967295
 80168d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80168d4:	b209      	sxth	r1, r1
 80168d6:	4628      	mov	r0, r5
 80168d8:	4798      	blx	r3
 80168da:	ac02      	add	r4, sp, #8
 80168dc:	f844 0d08 	str.w	r0, [r4, #-8]!
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7ff fa4b 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80168e6:	f8b8 3030 	ldrh.w	r3, [r8, #48]	@ 0x30
 80168ea:	fa0f fa80 	sxth.w	sl, r0
 80168ee:	fa1f f980 	uxth.w	r9, r0
 80168f2:	b393      	cbz	r3, 801695a <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xc4>
 80168f4:	eb03 0009 	add.w	r0, r3, r9
 80168f8:	f9b5 1114 	ldrsh.w	r1, [r5, #276]	@ 0x114
 80168fc:	f8b5 311a 	ldrh.w	r3, [r5, #282]	@ 0x11a
 8016900:	b200      	sxth	r0, r0
 8016902:	18ca      	adds	r2, r1, r3
 8016904:	f8b5 3042 	ldrh.w	r3, [r5, #66]	@ 0x42
 8016908:	eba0 0009 	sub.w	r0, r0, r9
 801690c:	1a9b      	subs	r3, r3, r2
 801690e:	f8ad 1002 	strh.w	r1, [sp, #2]
 8016912:	f8ad 0004 	strh.w	r0, [sp, #4]
 8016916:	4621      	mov	r1, r4
 8016918:	4640      	mov	r0, r8
 801691a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801691e:	f8ad a000 	strh.w	sl, [sp]
 8016922:	f7ff ff78 	bl	8016816 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8016926:	4620      	mov	r0, r4
 8016928:	4639      	mov	r1, r7
 801692a:	f7fd ff6b 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801692e:	4620      	mov	r0, r4
 8016930:	f7fd ffab 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016934:	b970      	cbnz	r0, 8016954 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0xbe>
 8016936:	f8d8 3000 	ldr.w	r3, [r8]
 801693a:	4621      	mov	r1, r4
 801693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801693e:	4640      	mov	r0, r8
 8016940:	4798      	blx	r3
 8016942:	f7f6 ffef 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 8016946:	6803      	ldr	r3, [r0, #0]
 8016948:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 801694c:	6a1d      	ldr	r5, [r3, #32]
 801694e:	4621      	mov	r1, r4
 8016950:	b2f3      	uxtb	r3, r6
 8016952:	47a8      	blx	r5
 8016954:	b003      	add	sp, #12
 8016956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801695a:	682b      	ldr	r3, [r5, #0]
 801695c:	4659      	mov	r1, fp
 801695e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016962:	4628      	mov	r0, r5
 8016964:	4798      	blx	r3
 8016966:	9000      	str	r0, [sp, #0]
 8016968:	4620      	mov	r0, r4
 801696a:	f7ff fa07 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801696e:	e7c3      	b.n	80168f8 <_ZNK8touchgfx27GraphElementVerticalGapLine4drawERKNS_4RectE+0x62>
 8016970:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8016974:	deff      	udf	#255	@ 0xff

08016976 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8016976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801697a:	461e      	mov	r6, r3
 801697c:	b08b      	sub	sp, #44	@ 0x2c
 801697e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8016982:	460f      	mov	r7, r1
 8016984:	429e      	cmp	r6, r3
 8016986:	4615      	mov	r5, r2
 8016988:	9304      	str	r3, [sp, #16]
 801698a:	d074      	beq.n	8016a76 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 801698c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8016990:	4631      	mov	r1, r6
 8016992:	015b      	lsls	r3, r3, #5
 8016994:	9303      	str	r3, [sp, #12]
 8016996:	6813      	ldr	r3, [r2, #0]
 8016998:	4610      	mov	r0, r2
 801699a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801699e:	4798      	blx	r3
 80169a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80169a2:	f843 0d10 	str.w	r0, [r3, #-16]!
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7ff f9e8 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80169ac:	682b      	ldr	r3, [r5, #0]
 80169ae:	4631      	mov	r1, r6
 80169b0:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80169b4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80169b8:	4628      	mov	r0, r5
 80169ba:	4798      	blx	r3
 80169bc:	ab0a      	add	r3, sp, #40	@ 0x28
 80169be:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7ff f9da 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80169c8:	ea4f 1940 	mov.w	r9, r0, lsl #5
 80169cc:	464a      	mov	r2, r9
 80169ce:	4641      	mov	r1, r8
 80169d0:	4638      	mov	r0, r7
 80169d2:	f014 ff85 	bl	802b8e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80169d6:	4634      	mov	r4, r6
 80169d8:	2301      	movs	r3, #1
 80169da:	9300      	str	r3, [sp, #0]
 80169dc:	9b00      	ldr	r3, [sp, #0]
 80169de:	4628      	mov	r0, r5
 80169e0:	441c      	add	r4, r3
 80169e2:	682b      	ldr	r3, [r5, #0]
 80169e4:	b224      	sxth	r4, r4
 80169e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80169ea:	4621      	mov	r1, r4
 80169ec:	4798      	blx	r3
 80169ee:	9008      	str	r0, [sp, #32]
 80169f0:	a808      	add	r0, sp, #32
 80169f2:	f7ff f9c3 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80169f6:	0143      	lsls	r3, r0, #5
 80169f8:	9301      	str	r3, [sp, #4]
 80169fa:	682b      	ldr	r3, [r5, #0]
 80169fc:	4621      	mov	r1, r4
 80169fe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016a02:	4628      	mov	r0, r5
 8016a04:	4798      	blx	r3
 8016a06:	9009      	str	r0, [sp, #36]	@ 0x24
 8016a08:	a809      	add	r0, sp, #36	@ 0x24
 8016a0a:	f7ff f9b7 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016a0e:	0143      	lsls	r3, r0, #5
 8016a10:	9302      	str	r3, [sp, #8]
 8016a12:	9b01      	ldr	r3, [sp, #4]
 8016a14:	eba3 0b08 	sub.w	fp, r3, r8
 8016a18:	9b02      	ldr	r3, [sp, #8]
 8016a1a:	4658      	mov	r0, fp
 8016a1c:	eba3 0a09 	sub.w	sl, r3, r9
 8016a20:	4651      	mov	r1, sl
 8016a22:	f7ff fe19 	bl	8016658 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016a26:	b320      	cbz	r0, 8016a72 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8016a28:	4602      	mov	r2, r0
 8016a2a:	4651      	mov	r1, sl
 8016a2c:	9005      	str	r0, [sp, #20]
 8016a2e:	9803      	ldr	r0, [sp, #12]
 8016a30:	f004 fb67 	bl	801b102 <_ZN8touchgfx6muldivElll>
 8016a34:	2302      	movs	r3, #2
 8016a36:	fb90 faf3 	sdiv	sl, r0, r3
 8016a3a:	9b05      	ldr	r3, [sp, #20]
 8016a3c:	4659      	mov	r1, fp
 8016a3e:	461a      	mov	r2, r3
 8016a40:	9803      	ldr	r0, [sp, #12]
 8016a42:	f004 fb5e 	bl	801b102 <_ZN8touchgfx6muldivElll>
 8016a46:	2302      	movs	r3, #2
 8016a48:	fb90 fbf3 	sdiv	fp, r0, r3
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	eb0b 0209 	add.w	r2, fp, r9
 8016a52:	eba8 010a 	sub.w	r1, r8, sl
 8016a56:	689b      	ldr	r3, [r3, #8]
 8016a58:	4638      	mov	r0, r7
 8016a5a:	4798      	blx	r3
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	9a02      	ldr	r2, [sp, #8]
 8016a60:	9901      	ldr	r1, [sp, #4]
 8016a62:	689b      	ldr	r3, [r3, #8]
 8016a64:	445a      	add	r2, fp
 8016a66:	eba1 010a 	sub.w	r1, r1, sl
 8016a6a:	4638      	mov	r0, r7
 8016a6c:	4798      	blx	r3
 8016a6e:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8016a72:	42a6      	cmp	r6, r4
 8016a74:	db02      	blt.n	8016a7c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8016a76:	b00b      	add	sp, #44	@ 0x2c
 8016a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a7c:	9b00      	ldr	r3, [sp, #0]
 8016a7e:	9a04      	ldr	r2, [sp, #16]
 8016a80:	42a2      	cmp	r2, r4
 8016a82:	bf08      	it	eq
 8016a84:	f04f 33ff 	moveq.w	r3, #4294967295
 8016a88:	e7a7      	b.n	80169da <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08016a8a <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs>:
 8016a8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a8e:	f1b2 0900 	subs.w	r9, r2, #0
 8016a92:	4607      	mov	r7, r0
 8016a94:	460c      	mov	r4, r1
 8016a96:	dd2c      	ble.n	8016af2 <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs+0x68>
 8016a98:	6823      	ldr	r3, [r4, #0]
 8016a9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8016a9e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016aa2:	b209      	sxth	r1, r1
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	4798      	blx	r3
 8016aa8:	ad02      	add	r5, sp, #8
 8016aaa:	f845 0d08 	str.w	r0, [r5, #-8]!
 8016aae:	4628      	mov	r0, r5
 8016ab0:	f7ff f964 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016ab4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8016ab6:	fa0f f880 	sxth.w	r8, r0
 8016aba:	b286      	uxth	r6, r0
 8016abc:	b1e3      	cbz	r3, 8016af8 <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs+0x6e>
 8016abe:	1998      	adds	r0, r3, r6
 8016ac0:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8016ac4:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8016ac8:	b200      	sxth	r0, r0
 8016aca:	18ca      	adds	r2, r1, r3
 8016acc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8016ad0:	1b80      	subs	r0, r0, r6
 8016ad2:	1a9b      	subs	r3, r3, r2
 8016ad4:	f8ad 1002 	strh.w	r1, [sp, #2]
 8016ad8:	f8ad 0004 	strh.w	r0, [sp, #4]
 8016adc:	4629      	mov	r1, r5
 8016ade:	4638      	mov	r0, r7
 8016ae0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016ae4:	f8ad 8000 	strh.w	r8, [sp]
 8016ae8:	f7ff fe95 	bl	8016816 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	691b      	ldr	r3, [r3, #16]
 8016af0:	4798      	blx	r3
 8016af2:	b003      	add	sp, #12
 8016af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016af8:	6823      	ldr	r3, [r4, #0]
 8016afa:	4649      	mov	r1, r9
 8016afc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016b00:	4620      	mov	r0, r4
 8016b02:	4798      	blx	r3
 8016b04:	9000      	str	r0, [sp, #0]
 8016b06:	4628      	mov	r0, r5
 8016b08:	f7ff f938 	bl	8015d7c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016b0c:	e7d8      	b.n	8016ac0 <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs+0x36>

08016b0e <_ZN8touchgfx27GraphElementVerticalGapLine22invalidateGraphPointAtEs>:
 8016b0e:	b570      	push	{r4, r5, r6, lr}
 8016b10:	6943      	ldr	r3, [r0, #20]
 8016b12:	4605      	mov	r5, r0
 8016b14:	460e      	mov	r6, r1
 8016b16:	b163      	cbz	r3, 8016b32 <_ZN8touchgfx27GraphElementVerticalGapLine22invalidateGraphPointAtEs+0x24>
 8016b18:	695c      	ldr	r4, [r3, #20]
 8016b1a:	f9b4 2120 	ldrsh.w	r2, [r4, #288]	@ 0x120
 8016b1e:	4621      	mov	r1, r4
 8016b20:	f7ff ffb3 	bl	8016a8a <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs>
 8016b24:	4632      	mov	r2, r6
 8016b26:	4621      	mov	r1, r4
 8016b28:	4628      	mov	r0, r5
 8016b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b2e:	f7ff bfac 	b.w	8016a8a <_ZNK8touchgfx27GraphElementVerticalGapLine15invalidateIndexEPKNS_17AbstractDataGraphEs>
 8016b32:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8016b36:	deff      	udf	#255	@ 0xff

08016b38 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8016b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b3c:	6943      	ldr	r3, [r0, #20]
 8016b3e:	b0a4      	sub	sp, #144	@ 0x90
 8016b40:	4605      	mov	r5, r0
 8016b42:	460f      	mov	r7, r1
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d077      	beq.n	8016c38 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8016b48:	695c      	ldr	r4, [r3, #20]
 8016b4a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016b4e:	2b01      	cmp	r3, #1
 8016b50:	dc04      	bgt.n	8016b5c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8016b52:	2401      	movs	r4, #1
 8016b54:	4620      	mov	r0, r4
 8016b56:	b024      	add	sp, #144	@ 0x90
 8016b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b5c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8016b60:	ae24      	add	r6, sp, #144	@ 0x90
 8016b62:	011b      	lsls	r3, r3, #4
 8016b64:	f846 3d74 	str.w	r3, [r6, #-116]!
 8016b68:	4630      	mov	r0, r6
 8016b6a:	f7ff fbb0 	bl	80162ce <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016b6e:	8839      	ldrh	r1, [r7, #0]
 8016b70:	88ba      	ldrh	r2, [r7, #4]
 8016b72:	b280      	uxth	r0, r0
 8016b74:	440a      	add	r2, r1
 8016b76:	6823      	ldr	r3, [r4, #0]
 8016b78:	4402      	add	r2, r0
 8016b7a:	1a09      	subs	r1, r1, r0
 8016b7c:	f10d 000a 	add.w	r0, sp, #10
 8016b80:	9000      	str	r0, [sp, #0]
 8016b82:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8016b86:	b212      	sxth	r2, r2
 8016b88:	ab02      	add	r3, sp, #8
 8016b8a:	b209      	sxth	r1, r1
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	47c0      	blx	r8
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d0de      	beq.n	8016b52 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8016b94:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8016b98:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8016b9c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8016ba0:	18ca      	adds	r2, r1, r3
 8016ba2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8016ba6:	f8ad 100e 	strh.w	r1, [sp, #14]
 8016baa:	1a9b      	subs	r3, r3, r2
 8016bac:	2200      	movs	r2, #0
 8016bae:	4639      	mov	r1, r7
 8016bb0:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016bb4:	a803      	add	r0, sp, #12
 8016bb6:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016bba:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016bbe:	f7fd fe21 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8016bc2:	4629      	mov	r1, r5
 8016bc4:	a805      	add	r0, sp, #20
 8016bc6:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8016bc8:	f004 f96c 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016bcc:	682b      	ldr	r3, [r5, #0]
 8016bce:	4628      	mov	r0, r5
 8016bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016bd2:	4798      	blx	r3
 8016bd4:	ab03      	add	r3, sp, #12
 8016bd6:	9000      	str	r0, [sp, #0]
 8016bd8:	aa05      	add	r2, sp, #20
 8016bda:	4639      	mov	r1, r7
 8016bdc:	4630      	mov	r0, r6
 8016bde:	f014 fd33 	bl	802b648 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016be2:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8016be6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016bea:	2f00      	cmp	r7, #0
 8016bec:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016bf0:	dd03      	ble.n	8016bfa <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8016bf2:	42bb      	cmp	r3, r7
 8016bf4:	da01      	bge.n	8016bfa <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8016bf6:	42ba      	cmp	r2, r7
 8016bf8:	da11      	bge.n	8016c1e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016bfa:	9200      	str	r2, [sp, #0]
 8016bfc:	4622      	mov	r2, r4
 8016bfe:	4631      	mov	r1, r6
 8016c00:	4628      	mov	r0, r5
 8016c02:	f7ff feb8 	bl	8016976 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8016c06:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	f014 fdb0 	bl	802b770 <_ZN8touchgfx6Canvas6renderEh>
 8016c10:	4b0b      	ldr	r3, [pc, #44]	@ (8016c40 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 8016c12:	4604      	mov	r4, r0
 8016c14:	a80c      	add	r0, sp, #48	@ 0x30
 8016c16:	9307      	str	r3, [sp, #28]
 8016c18:	f000 fcf4 	bl	8017604 <_ZN8touchgfx7OutlineD1Ev>
 8016c1c:	e79a      	b.n	8016b54 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8016c1e:	1e7a      	subs	r2, r7, #1
 8016c20:	b212      	sxth	r2, r2
 8016c22:	9200      	str	r2, [sp, #0]
 8016c24:	4631      	mov	r1, r6
 8016c26:	4622      	mov	r2, r4
 8016c28:	4628      	mov	r0, r5
 8016c2a:	f7ff fea4 	bl	8016976 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8016c2e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016c32:	9300      	str	r3, [sp, #0]
 8016c34:	463b      	mov	r3, r7
 8016c36:	e7e1      	b.n	8016bfc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016c38:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8016c3c:	deff      	udf	#255	@ 0xff
 8016c3e:	bf00      	nop
 8016c40:	0802fdb4 	.word	0x0802fdb4

08016c44 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs>:
 8016c44:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8016c48:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016c4c:	4293      	cmp	r3, r2
 8016c4e:	da01      	bge.n	8016c54 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs+0x10>
 8016c50:	4608      	mov	r0, r1
 8016c52:	4770      	bx	lr
 8016c54:	f9b0 3120 	ldrsh.w	r3, [r0, #288]	@ 0x120
 8016c58:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 8016c5c:	428b      	cmp	r3, r1
 8016c5e:	bfc7      	ittee	gt
 8016c60:	1809      	addgt	r1, r1, r0
 8016c62:	1ac8      	subgt	r0, r1, r3
 8016c64:	1ac0      	suble	r0, r0, r3
 8016c66:	1a80      	suble	r0, r0, r2
 8016c68:	bfd8      	it	le
 8016c6a:	1840      	addle	r0, r0, r1
 8016c6c:	4770      	bx	lr

08016c6e <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>:
 8016c6e:	b510      	push	{r4, lr}
 8016c70:	4604      	mov	r4, r0
 8016c72:	f7fe ff20 	bl	8015ab6 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8016c76:	2300      	movs	r3, #0
 8016c78:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 8016c7c:	bd10      	pop	{r4, pc}

08016c7e <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv>:
 8016c7e:	b570      	push	{r4, r5, r6, lr}
 8016c80:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	@ 0x14c
 8016c84:	4604      	mov	r4, r0
 8016c86:	bb13      	cbnz	r3, 8016cce <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 8016c88:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8016c8c:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016c90:	429a      	cmp	r2, r3
 8016c92:	dc1c      	bgt.n	8016cce <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 8016c94:	6803      	ldr	r3, [r0, #0]
 8016c96:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8016c9a:	4798      	blx	r3
 8016c9c:	6823      	ldr	r3, [r4, #0]
 8016c9e:	4605      	mov	r5, r0
 8016ca0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016ca4:	4620      	mov	r0, r4
 8016ca6:	4798      	blx	r3
 8016ca8:	4606      	mov	r6, r0
 8016caa:	2d00      	cmp	r5, #0
 8016cac:	da05      	bge.n	8016cba <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x3c>
 8016cae:	b229      	sxth	r1, r5
 8016cb0:	4620      	mov	r0, r4
 8016cb2:	f7ff f912 	bl	8015eda <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016cb6:	3501      	adds	r5, #1
 8016cb8:	e7f7      	b.n	8016caa <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x2c>
 8016cba:	f9b4 511c 	ldrsh.w	r5, [r4, #284]	@ 0x11c
 8016cbe:	42b5      	cmp	r5, r6
 8016cc0:	dc05      	bgt.n	8016cce <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 8016cc2:	b229      	sxth	r1, r5
 8016cc4:	4620      	mov	r0, r4
 8016cc6:	f7ff f908 	bl	8015eda <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016cca:	3501      	adds	r5, #1
 8016ccc:	e7f7      	b.n	8016cbe <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x40>
 8016cce:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 8016cd2:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	db0b      	blt.n	8016cf2 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x74>
 8016cda:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	@ 0x14c
 8016cde:	4620      	mov	r0, r4
 8016ce0:	f7ff f8eb 	bl	8015eba <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8016ce4:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	@ 0x14c
 8016ce8:	4620      	mov	r0, r4
 8016cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cee:	f7ff b8f4 	b.w	8015eda <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016cf2:	bd70      	pop	{r4, r5, r6, pc}

08016cf4 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi>:
 8016cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf8:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 8016cfc:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8016d00:	1c6e      	adds	r6, r5, #1
 8016d02:	b236      	sxth	r6, r6
 8016d04:	fb96 f3f2 	sdiv	r3, r6, r2
 8016d08:	fb02 6313 	mls	r3, r2, r3, r6
 8016d0c:	f8a0 314c 	strh.w	r3, [r0, #332]	@ 0x14c
 8016d10:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016d14:	4688      	mov	r8, r1
 8016d16:	42ab      	cmp	r3, r5
 8016d18:	6803      	ldr	r3, [r0, #0]
 8016d1a:	bf08      	it	eq
 8016d1c:	f8a0 611e 	strheq.w	r6, [r0, #286]	@ 0x11e
 8016d20:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8016d24:	4629      	mov	r1, r5
 8016d26:	4604      	mov	r4, r0
 8016d28:	f8d0 7144 	ldr.w	r7, [r0, #324]	@ 0x144
 8016d2c:	4798      	blx	r3
 8016d2e:	4629      	mov	r1, r5
 8016d30:	f847 8020 	str.w	r8, [r7, r0, lsl #2]
 8016d34:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f7ff f8be 	bl	8015eba <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8016d3e:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 8016d42:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 8016d46:	429a      	cmp	r2, r3
 8016d48:	db28      	blt.n	8016d9c <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 8016d4a:	4629      	mov	r1, r5
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f7ff f8c4 	bl	8015eda <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016d52:	bb1d      	cbnz	r5, 8016d9c <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 8016d54:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 8016d58:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	db1d      	blt.n	8016d9c <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 8016d60:	6823      	ldr	r3, [r4, #0]
 8016d62:	4620      	mov	r0, r4
 8016d64:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8016d68:	4798      	blx	r3
 8016d6a:	6823      	ldr	r3, [r4, #0]
 8016d6c:	4606      	mov	r6, r0
 8016d6e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016d72:	4620      	mov	r0, r4
 8016d74:	4798      	blx	r3
 8016d76:	4607      	mov	r7, r0
 8016d78:	2e00      	cmp	r6, #0
 8016d7a:	da05      	bge.n	8016d88 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x94>
 8016d7c:	b231      	sxth	r1, r6
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f7ff f8ab 	bl	8015eda <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016d84:	3601      	adds	r6, #1
 8016d86:	e7f7      	b.n	8016d78 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x84>
 8016d88:	f9b4 611c 	ldrsh.w	r6, [r4, #284]	@ 0x11c
 8016d8c:	42be      	cmp	r6, r7
 8016d8e:	dc05      	bgt.n	8016d9c <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 8016d90:	b231      	sxth	r1, r6
 8016d92:	4620      	mov	r0, r4
 8016d94:	f7ff f8a1 	bl	8015eda <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8016d98:	3601      	adds	r6, #1
 8016d9a:	e7f7      	b.n	8016d8c <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x98>
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016da2 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8016da2:	2000      	movs	r0, #0
 8016da4:	4770      	bx	lr
	...

08016da8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8016da8:	4b07      	ldr	r3, [pc, #28]	@ (8016dc8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8016daa:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016dac:	881b      	ldrh	r3, [r3, #0]
 8016dae:	4293      	cmp	r3, r2
 8016db0:	bf81      	itttt	hi
 8016db2:	4b06      	ldrhi	r3, [pc, #24]	@ (8016dcc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8016db4:	681b      	ldrhi	r3, [r3, #0]
 8016db6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8016dba:	7858      	ldrbhi	r0, [r3, #1]
 8016dbc:	bf8c      	ite	hi
 8016dbe:	f000 0003 	andhi.w	r0, r0, #3
 8016dc2:	2000      	movls	r0, #0
 8016dc4:	4770      	bx	lr
 8016dc6:	bf00      	nop
 8016dc8:	20011f88 	.word	0x20011f88
 8016dcc:	20011f84 	.word	0x20011f84

08016dd0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8016dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd4:	4b10      	ldr	r3, [pc, #64]	@ (8016e18 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8016dd6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8016dd8:	881b      	ldrh	r3, [r3, #0]
 8016dda:	4604      	mov	r4, r0
 8016ddc:	428b      	cmp	r3, r1
 8016dde:	d918      	bls.n	8016e12 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8016de0:	6803      	ldr	r3, [r0, #0]
 8016de2:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8016de4:	4b0d      	ldr	r3, [pc, #52]	@ (8016e1c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8016de6:	6818      	ldr	r0, [r3, #0]
 8016de8:	f7fb f822 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 8016dec:	6823      	ldr	r3, [r4, #0]
 8016dee:	4606      	mov	r6, r0
 8016df0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016df2:	4620      	mov	r0, r4
 8016df4:	4798      	blx	r3
 8016df6:	6823      	ldr	r3, [r4, #0]
 8016df8:	4607      	mov	r7, r0
 8016dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016dfe:	4620      	mov	r0, r4
 8016e00:	4798      	blx	r3
 8016e02:	463a      	mov	r2, r7
 8016e04:	4603      	mov	r3, r0
 8016e06:	4631      	mov	r1, r6
 8016e08:	4620      	mov	r0, r4
 8016e0a:	46ac      	mov	ip, r5
 8016e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e10:	4760      	bx	ip
 8016e12:	2000      	movs	r0, #0
 8016e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e18:	20011f88 	.word	0x20011f88
 8016e1c:	20011f90 	.word	0x20011f90

08016e20 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e24:	4b17      	ldr	r3, [pc, #92]	@ (8016e84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016e26:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8016e28:	881b      	ldrh	r3, [r3, #0]
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	428b      	cmp	r3, r1
 8016e2e:	d926      	bls.n	8016e7e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8016e30:	4b15      	ldr	r3, [pc, #84]	@ (8016e88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016e38:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016e3c:	4b13      	ldr	r3, [pc, #76]	@ (8016e8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016e3e:	7855      	ldrb	r5, [r2, #1]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8016e46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8016e4a:	6833      	ldr	r3, [r6, #0]
 8016e4c:	69df      	ldr	r7, [r3, #28]
 8016e4e:	4b10      	ldr	r3, [pc, #64]	@ (8016e90 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016e50:	6818      	ldr	r0, [r3, #0]
 8016e52:	f7fa ffed 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 8016e56:	6823      	ldr	r3, [r4, #0]
 8016e58:	4680      	mov	r8, r0
 8016e5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	4798      	blx	r3
 8016e60:	6823      	ldr	r3, [r4, #0]
 8016e62:	4681      	mov	r9, r0
 8016e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016e68:	4620      	mov	r0, r4
 8016e6a:	4798      	blx	r3
 8016e6c:	464b      	mov	r3, r9
 8016e6e:	9000      	str	r0, [sp, #0]
 8016e70:	4642      	mov	r2, r8
 8016e72:	4629      	mov	r1, r5
 8016e74:	4630      	mov	r0, r6
 8016e76:	47b8      	blx	r7
 8016e78:	b003      	add	sp, #12
 8016e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e7e:	2000      	movs	r0, #0
 8016e80:	e7fa      	b.n	8016e78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8016e82:	bf00      	nop
 8016e84:	20011f88 	.word	0x20011f88
 8016e88:	20011f84 	.word	0x20011f84
 8016e8c:	20011f8c 	.word	0x20011f8c
 8016e90:	20011f90 	.word	0x20011f90

08016e94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016e94:	b40e      	push	{r1, r2, r3}
 8016e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8016f58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8016e9c:	b09d      	sub	sp, #116	@ 0x74
 8016e9e:	881a      	ldrh	r2, [r3, #0]
 8016ea0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d954      	bls.n	8016f52 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8016ea8:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8016f5c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8016eac:	aa26      	add	r2, sp, #152	@ 0x98
 8016eae:	9202      	str	r2, [sp, #8]
 8016eb0:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8016f60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8016eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8016eb8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8016ec0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8016ec4:	682b      	ldr	r3, [r5, #0]
 8016ec6:	4628      	mov	r0, r5
 8016ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016eca:	4798      	blx	r3
 8016ecc:	b207      	sxth	r7, r0
 8016ece:	4606      	mov	r6, r0
 8016ed0:	a803      	add	r0, sp, #12
 8016ed2:	f004 fc6b 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 8016ed6:	682b      	ldr	r3, [r5, #0]
 8016ed8:	4628      	mov	r0, r5
 8016eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016edc:	4798      	blx	r3
 8016ede:	682b      	ldr	r3, [r5, #0]
 8016ee0:	4682      	mov	sl, r0
 8016ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	4798      	blx	r3
 8016ee8:	4653      	mov	r3, sl
 8016eea:	9000      	str	r0, [sp, #0]
 8016eec:	9a02      	ldr	r2, [sp, #8]
 8016eee:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8016ef0:	a803      	add	r0, sp, #12
 8016ef2:	f004 fcb6 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016ef6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8016ef8:	f8d9 3000 	ldr.w	r3, [r9]
 8016efc:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8016f00:	8925      	ldrh	r5, [r4, #8]
 8016f02:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8016f06:	eba5 050c 	sub.w	r5, r5, ip
 8016f0a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016f0e:	b22d      	sxth	r5, r5
 8016f10:	784a      	ldrb	r2, [r1, #1]
 8016f12:	f8d8 3000 	ldr.w	r3, [r8]
 8016f16:	9500      	str	r5, [sp, #0]
 8016f18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016f1c:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8016f20:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016f24:	a803      	add	r0, sp, #12
 8016f26:	f002 fa69 	bl	80193fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016f2a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8016f2e:	b203      	sxth	r3, r0
 8016f30:	18b9      	adds	r1, r7, r2
 8016f32:	2900      	cmp	r1, #0
 8016f34:	dd0b      	ble.n	8016f4e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8016f36:	3b01      	subs	r3, #1
 8016f38:	fb13 f302 	smulbb	r3, r3, r2
 8016f3c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016f40:	b21f      	sxth	r7, r3
 8016f42:	4638      	mov	r0, r7
 8016f44:	b01d      	add	sp, #116	@ 0x74
 8016f46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f4a:	b003      	add	sp, #12
 8016f4c:	4770      	bx	lr
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	dcf7      	bgt.n	8016f42 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016f52:	2700      	movs	r7, #0
 8016f54:	e7f5      	b.n	8016f42 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016f56:	bf00      	nop
 8016f58:	20011f88 	.word	0x20011f88
 8016f5c:	20011f84 	.word	0x20011f84
 8016f60:	20011f8c 	.word	0x20011f8c

08016f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8016f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f68:	4bbc      	ldr	r3, [pc, #752]	@ (801725c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8016f6a:	460c      	mov	r4, r1
 8016f6c:	881b      	ldrh	r3, [r3, #0]
 8016f6e:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8016f70:	b0a9      	sub	sp, #164	@ 0xa4
 8016f72:	428b      	cmp	r3, r1
 8016f74:	4680      	mov	r8, r0
 8016f76:	d809      	bhi.n	8016f8c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8016f78:	2300      	movs	r3, #0
 8016f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f7e:	e9c0 3200 	strd	r3, r2, [r0]
 8016f82:	6083      	str	r3, [r0, #8]
 8016f84:	4640      	mov	r0, r8
 8016f86:	b029      	add	sp, #164	@ 0xa4
 8016f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f8c:	4eb4      	ldr	r6, [pc, #720]	@ (8017260 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8016f8e:	6833      	ldr	r3, [r6, #0]
 8016f90:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8016f94:	4bb3      	ldr	r3, [pc, #716]	@ (8017264 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8016f9c:	4bb2      	ldr	r3, [pc, #712]	@ (8017268 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8016f9e:	6818      	ldr	r0, [r3, #0]
 8016fa0:	f7fa ff46 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 8016fa4:	682b      	ldr	r3, [r5, #0]
 8016fa6:	4681      	mov	r9, r0
 8016fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016faa:	4628      	mov	r0, r5
 8016fac:	4798      	blx	r3
 8016fae:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8016fb0:	b203      	sxth	r3, r0
 8016fb2:	4407      	add	r7, r0
 8016fb4:	9304      	str	r3, [sp, #16]
 8016fb6:	b2bb      	uxth	r3, r7
 8016fb8:	9303      	str	r3, [sp, #12]
 8016fba:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8016fbe:	4682      	mov	sl, r0
 8016fc0:	a80f      	add	r0, sp, #60	@ 0x3c
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f040 80a5 	bne.w	8017112 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8016fc8:	f004 fbf0 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 8016fcc:	682b      	ldr	r3, [r5, #0]
 8016fce:	4628      	mov	r0, r5
 8016fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016fd2:	4798      	blx	r3
 8016fd4:	682b      	ldr	r3, [r5, #0]
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016fda:	4628      	mov	r0, r5
 8016fdc:	4798      	blx	r3
 8016fde:	6823      	ldr	r3, [r4, #0]
 8016fe0:	4607      	mov	r7, r0
 8016fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016fe4:	4620      	mov	r0, r4
 8016fe6:	4798      	blx	r3
 8016fe8:	6823      	ldr	r3, [r4, #0]
 8016fea:	4683      	mov	fp, r0
 8016fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	4798      	blx	r3
 8016ff4:	4632      	mov	r2, r6
 8016ff6:	2600      	movs	r6, #0
 8016ff8:	463b      	mov	r3, r7
 8016ffa:	4637      	mov	r7, r6
 8016ffc:	e9cd b000 	strd	fp, r0, [sp]
 8017000:	4649      	mov	r1, r9
 8017002:	a80f      	add	r0, sp, #60	@ 0x3c
 8017004:	f004 fc42 	bl	801b88c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017008:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801700c:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8017260 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017010:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017014:	bf0c      	ite	eq
 8017016:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801701a:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801701e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017020:	f8db 3000 	ldr.w	r3, [fp]
 8017024:	4629      	mov	r1, r5
 8017026:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801702a:	785b      	ldrb	r3, [r3, #1]
 801702c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017030:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017034:	a80f      	add	r0, sp, #60	@ 0x3c
 8017036:	f001 feea 	bl	8018e0e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801703a:	4286      	cmp	r6, r0
 801703c:	bfb8      	it	lt
 801703e:	4606      	movlt	r6, r0
 8017040:	9b03      	ldr	r3, [sp, #12]
 8017042:	3701      	adds	r7, #1
 8017044:	eba9 0903 	sub.w	r9, r9, r3
 8017048:	a80f      	add	r0, sp, #60	@ 0x3c
 801704a:	b236      	sxth	r6, r6
 801704c:	b2bf      	uxth	r7, r7
 801704e:	fa0f f989 	sxth.w	r9, r9
 8017052:	f004 fbd2 	bl	801b7fa <_ZN8touchgfx12TextProvider11endOfStringEv>
 8017056:	b918      	cbnz	r0, 8017060 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017058:	7a2b      	ldrb	r3, [r5, #8]
 801705a:	444b      	add	r3, r9
 801705c:	2b00      	cmp	r3, #0
 801705e:	dcde      	bgt.n	801701e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8017060:	9b03      	ldr	r3, [sp, #12]
 8017062:	9a04      	ldr	r2, [sp, #16]
 8017064:	fb13 f707 	smulbb	r7, r3, r7
 8017068:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801706a:	4620      	mov	r0, r4
 801706c:	1aff      	subs	r7, r7, r3
 801706e:	b2bf      	uxth	r7, r7
 8017070:	b23b      	sxth	r3, r7
 8017072:	429a      	cmp	r2, r3
 8017074:	bfa8      	it	ge
 8017076:	4657      	movge	r7, sl
 8017078:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801707c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8017080:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017084:	6823      	ldr	r3, [r4, #0]
 8017086:	bf08      	it	eq
 8017088:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801708c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801708e:	bf18      	it	ne
 8017090:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8017094:	4798      	blx	r3
 8017096:	444f      	add	r7, r9
 8017098:	fa1f f987 	uxth.w	r9, r7
 801709c:	2801      	cmp	r0, #1
 801709e:	fa0f f789 	sxth.w	r7, r9
 80170a2:	b2b3      	uxth	r3, r6
 80170a4:	f000 80e2 	beq.w	801726c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80170a8:	2802      	cmp	r0, #2
 80170aa:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 80170ae:	f000 80e3 	beq.w	8017278 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80170b2:	7aea      	ldrb	r2, [r5, #11]
 80170b4:	7b2d      	ldrb	r5, [r5, #12]
 80170b6:	b236      	sxth	r6, r6
 80170b8:	1ab6      	subs	r6, r6, r2
 80170ba:	442a      	add	r2, r5
 80170bc:	4413      	add	r3, r2
 80170be:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80170c2:	fa1f fa86 	uxth.w	sl, r6
 80170c6:	b29b      	uxth	r3, r3
 80170c8:	2a02      	cmp	r2, #2
 80170ca:	fa0f fb8a 	sxth.w	fp, sl
 80170ce:	b21e      	sxth	r6, r3
 80170d0:	f000 80d6 	beq.w	8017280 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80170d4:	2a03      	cmp	r2, #3
 80170d6:	f000 80de 	beq.w	8017296 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80170da:	2a01      	cmp	r2, #1
 80170dc:	f040 80e6 	bne.w	80172ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80170e0:	4633      	mov	r3, r6
 80170e2:	463e      	mov	r6, r7
 80170e4:	461f      	mov	r7, r3
 80170e6:	8925      	ldrh	r5, [r4, #8]
 80170e8:	eba5 0909 	sub.w	r9, r5, r9
 80170ec:	465d      	mov	r5, fp
 80170ee:	fa0f fb89 	sxth.w	fp, r9
 80170f2:	4b5d      	ldr	r3, [pc, #372]	@ (8017268 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80170f4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80170f6:	6818      	ldr	r0, [r3, #0]
 80170f8:	f7fa fe9a 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 80170fc:	f8a8 b000 	strh.w	fp, [r8]
 8017100:	f8a8 5002 	strh.w	r5, [r8, #2]
 8017104:	f8a8 6004 	strh.w	r6, [r8, #4]
 8017108:	f8a8 7006 	strh.w	r7, [r8, #6]
 801710c:	f8c8 0008 	str.w	r0, [r8, #8]
 8017110:	e738      	b.n	8016f84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8017112:	f004 fb4b 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 8017116:	682b      	ldr	r3, [r5, #0]
 8017118:	4628      	mov	r0, r5
 801711a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801711c:	4798      	blx	r3
 801711e:	682b      	ldr	r3, [r5, #0]
 8017120:	4607      	mov	r7, r0
 8017122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017124:	4628      	mov	r0, r5
 8017126:	4798      	blx	r3
 8017128:	6823      	ldr	r3, [r4, #0]
 801712a:	4683      	mov	fp, r0
 801712c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801712e:	4620      	mov	r0, r4
 8017130:	4798      	blx	r3
 8017132:	6822      	ldr	r2, [r4, #0]
 8017134:	9005      	str	r0, [sp, #20]
 8017136:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801713a:	4620      	mov	r0, r4
 801713c:	4790      	blx	r2
 801713e:	9b05      	ldr	r3, [sp, #20]
 8017140:	463a      	mov	r2, r7
 8017142:	4649      	mov	r1, r9
 8017144:	9001      	str	r0, [sp, #4]
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	a80f      	add	r0, sp, #60	@ 0x3c
 801714a:	465b      	mov	r3, fp
 801714c:	f004 fb9e 	bl	801b88c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017150:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017154:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8017158:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801715c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017160:	bf0a      	itet	eq
 8017162:	464a      	moveq	r2, r9
 8017164:	461a      	movne	r2, r3
 8017166:	4699      	moveq	r9, r3
 8017168:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 801716c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801716e:	1ad2      	subs	r2, r2, r3
 8017170:	6833      	ldr	r3, [r6, #0]
 8017172:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8017176:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801717a:	7859      	ldrb	r1, [r3, #1]
 801717c:	2300      	movs	r3, #0
 801717e:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8017182:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8017186:	af0f      	add	r7, sp, #60	@ 0x3c
 8017188:	f8ad 3018 	strh.w	r3, [sp, #24]
 801718c:	9707      	str	r7, [sp, #28]
 801718e:	f88d 1020 	strb.w	r1, [sp, #32]
 8017192:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8017196:	9509      	str	r5, [sp, #36]	@ 0x24
 8017198:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801719c:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 80171a0:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 80171a4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80171a8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80171ac:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80171b0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80171b4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80171b8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80171bc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80171c0:	b350      	cbz	r0, 8017218 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80171c2:	682b      	ldr	r3, [r5, #0]
 80171c4:	4628      	mov	r0, r5
 80171c6:	695b      	ldr	r3, [r3, #20]
 80171c8:	4798      	blx	r3
 80171ca:	4607      	mov	r7, r0
 80171cc:	b320      	cbz	r0, 8017218 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80171ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171d0:	4639      	mov	r1, r7
 80171d2:	6803      	ldr	r3, [r0, #0]
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	4798      	blx	r3
 80171d8:	4606      	mov	r6, r0
 80171da:	b1e8      	cbz	r0, 8017218 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80171dc:	7b43      	ldrb	r3, [r0, #13]
 80171de:	7a82      	ldrb	r2, [r0, #10]
 80171e0:	005b      	lsls	r3, r3, #1
 80171e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80171e6:	4313      	orrs	r3, r2
 80171e8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80171ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80171f0:	2b06      	cmp	r3, #6
 80171f2:	d111      	bne.n	8017218 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80171f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80171f6:	4632      	mov	r2, r6
 80171f8:	6803      	ldr	r3, [r0, #0]
 80171fa:	4639      	mov	r1, r7
 80171fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171fe:	4798      	blx	r3
 8017200:	7b73      	ldrb	r3, [r6, #13]
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017208:	7ab3      	ldrb	r3, [r6, #10]
 801720a:	4313      	orrs	r3, r2
 801720c:	4418      	add	r0, r3
 801720e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8017212:	4418      	add	r0, r3
 8017214:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8017218:	2600      	movs	r6, #0
 801721a:	4637      	mov	r7, r6
 801721c:	a806      	add	r0, sp, #24
 801721e:	f001 ffeb 	bl	80191f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017222:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8017226:	9b03      	ldr	r3, [sp, #12]
 8017228:	4286      	cmp	r6, r0
 801722a:	bfb8      	it	lt
 801722c:	4606      	movlt	r6, r0
 801722e:	eba9 0903 	sub.w	r9, r9, r3
 8017232:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017236:	3701      	adds	r7, #1
 8017238:	b236      	sxth	r6, r6
 801723a:	b2bf      	uxth	r7, r7
 801723c:	fa0f f989 	sxth.w	r9, r9
 8017240:	2b00      	cmp	r3, #0
 8017242:	f43f af0d 	beq.w	8017060 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017246:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801724a:	2b00      	cmp	r3, #0
 801724c:	f47f af08 	bne.w	8017060 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017250:	7a2b      	ldrb	r3, [r5, #8]
 8017252:	444b      	add	r3, r9
 8017254:	2b00      	cmp	r3, #0
 8017256:	dce1      	bgt.n	801721c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8017258:	e702      	b.n	8017060 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801725a:	bf00      	nop
 801725c:	20011f88 	.word	0x20011f88
 8017260:	20011f84 	.word	0x20011f84
 8017264:	20011f8c 	.word	0x20011f8c
 8017268:	20011f90 	.word	0x20011f90
 801726c:	2002      	movs	r0, #2
 801726e:	ebaa 0606 	sub.w	r6, sl, r6
 8017272:	fb96 f6f0 	sdiv	r6, r6, r0
 8017276:	e71c      	b.n	80170b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017278:	441e      	add	r6, r3
 801727a:	ebaa 0606 	sub.w	r6, sl, r6
 801727e:	e718      	b.n	80170b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017280:	8925      	ldrh	r5, [r4, #8]
 8017282:	1aed      	subs	r5, r5, r3
 8017284:	eba5 050a 	sub.w	r5, r5, sl
 8017288:	fa0f fb85 	sxth.w	fp, r5
 801728c:	8965      	ldrh	r5, [r4, #10]
 801728e:	eba5 0509 	sub.w	r5, r5, r9
 8017292:	b22d      	sxth	r5, r5
 8017294:	e72d      	b.n	80170f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017296:	8965      	ldrh	r5, [r4, #10]
 8017298:	f04f 0b00 	mov.w	fp, #0
 801729c:	1aed      	subs	r5, r5, r3
 801729e:	4633      	mov	r3, r6
 80172a0:	eba5 050a 	sub.w	r5, r5, sl
 80172a4:	463e      	mov	r6, r7
 80172a6:	b22d      	sxth	r5, r5
 80172a8:	461f      	mov	r7, r3
 80172aa:	e722      	b.n	80170f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80172ac:	2500      	movs	r5, #0
 80172ae:	e720      	b.n	80170f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

080172b0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80172b0:	b513      	push	{r0, r1, r4, lr}
 80172b2:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80172b6:	4604      	mov	r4, r0
 80172b8:	b1fb      	cbz	r3, 80172fa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80172ba:	4b16      	ldr	r3, [pc, #88]	@ (8017314 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80172bc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80172be:	881b      	ldrh	r3, [r3, #0]
 80172c0:	428b      	cmp	r3, r1
 80172c2:	d91a      	bls.n	80172fa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80172c4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	dd16      	ble.n	80172fa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80172cc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	dd12      	ble.n	80172fa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80172d4:	4b10      	ldr	r3, [pc, #64]	@ (8017318 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80172d6:	6818      	ldr	r0, [r3, #0]
 80172d8:	f7fa fdaa 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 80172dc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80172e0:	6822      	ldr	r2, [r4, #0]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	db06      	blt.n	80172f4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80172e6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	db02      	blt.n	80172f4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80172ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80172f0:	4298      	cmp	r0, r3
 80172f2:	d004      	beq.n	80172fe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80172f4:	6953      	ldr	r3, [r2, #20]
 80172f6:	4620      	mov	r0, r4
 80172f8:	4798      	blx	r3
 80172fa:	b002      	add	sp, #8
 80172fc:	bd10      	pop	{r4, pc}
 80172fe:	466b      	mov	r3, sp
 8017300:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8017304:	c903      	ldmia	r1, {r0, r1}
 8017306:	6912      	ldr	r2, [r2, #16]
 8017308:	e883 0003 	stmia.w	r3, {r0, r1}
 801730c:	4619      	mov	r1, r3
 801730e:	4620      	mov	r0, r4
 8017310:	4790      	blx	r2
 8017312:	e7f2      	b.n	80172fa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017314:	20011f88 	.word	0x20011f88
 8017318:	20011f90 	.word	0x20011f90

0801731c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017320:	4b44      	ldr	r3, [pc, #272]	@ (8017434 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8017322:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017324:	881b      	ldrh	r3, [r3, #0]
 8017326:	b08e      	sub	sp, #56	@ 0x38
 8017328:	4293      	cmp	r3, r2
 801732a:	4604      	mov	r4, r0
 801732c:	d97e      	bls.n	801742c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801732e:	6808      	ldr	r0, [r1, #0]
 8017330:	4d41      	ldr	r5, [pc, #260]	@ (8017438 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8017332:	6849      	ldr	r1, [r1, #4]
 8017334:	ab05      	add	r3, sp, #20
 8017336:	c303      	stmia	r3!, {r0, r1}
 8017338:	4611      	mov	r1, r2
 801733a:	6828      	ldr	r0, [r5, #0]
 801733c:	f7fa fd78 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 8017340:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8017344:	2b00      	cmp	r3, #0
 8017346:	db11      	blt.n	801736c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017348:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801734c:	2b00      	cmp	r3, #0
 801734e:	db0d      	blt.n	801736c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017350:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017352:	4298      	cmp	r0, r3
 8017354:	d10a      	bne.n	801736c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017356:	ab09      	add	r3, sp, #36	@ 0x24
 8017358:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801735c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017360:	e883 0003 	stmia.w	r3, {r0, r1}
 8017364:	4619      	mov	r1, r3
 8017366:	a805      	add	r0, sp, #20
 8017368:	f7fd fa4c 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801736c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017370:	2b00      	cmp	r3, #0
 8017372:	dd5b      	ble.n	801742c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017374:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017378:	2b00      	cmp	r3, #0
 801737a:	dd57      	ble.n	801742c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801737c:	4f2f      	ldr	r7, [pc, #188]	@ (801743c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801737e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017386:	4b2e      	ldr	r3, [pc, #184]	@ (8017440 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801738e:	2e00      	cmp	r6, #0
 8017390:	d04c      	beq.n	801742c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017392:	6823      	ldr	r3, [r4, #0]
 8017394:	4620      	mov	r0, r4
 8017396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017398:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801739c:	4798      	blx	r3
 801739e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 80173a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80173aa:	785b      	ldrb	r3, [r3, #1]
 80173ac:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80173b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80173b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80173b8:	4b22      	ldr	r3, [pc, #136]	@ (8017444 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80173ba:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 80173be:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80173c2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	9609      	str	r6, [sp, #36]	@ 0x24
 80173c8:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80173cc:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80173d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80173d2:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80173d6:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80173da:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80173de:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80173e2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80173e6:	b10a      	cbz	r2, 80173ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80173e8:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80173ea:	b906      	cbnz	r6, 80173ee <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80173ec:	689e      	ldr	r6, [r3, #8]
 80173ee:	af07      	add	r7, sp, #28
 80173f0:	4621      	mov	r1, r4
 80173f2:	4638      	mov	r0, r7
 80173f4:	f003 fd56 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173f8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80173fa:	6828      	ldr	r0, [r5, #0]
 80173fc:	f7fa fd18 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	4605      	mov	r5, r0
 8017404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017406:	4620      	mov	r0, r4
 8017408:	4798      	blx	r3
 801740a:	6823      	ldr	r3, [r4, #0]
 801740c:	4680      	mov	r8, r0
 801740e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017412:	4620      	mov	r0, r4
 8017414:	4798      	blx	r3
 8017416:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801741a:	ab09      	add	r3, sp, #36	@ 0x24
 801741c:	9300      	str	r3, [sp, #0]
 801741e:	9501      	str	r5, [sp, #4]
 8017420:	ab05      	add	r3, sp, #20
 8017422:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017426:	4630      	mov	r0, r6
 8017428:	f7fa fc93 	bl	8011d52 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801742c:	b00e      	add	sp, #56	@ 0x38
 801742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017432:	bf00      	nop
 8017434:	20011f88 	.word	0x20011f88
 8017438:	20011f90 	.word	0x20011f90
 801743c:	20011f84 	.word	0x20011f84
 8017440:	20011f8c 	.word	0x20011f8c
 8017444:	20011f2c 	.word	0x20011f2c

08017448 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017448:	b538      	push	{r3, r4, r5, lr}
 801744a:	4b0e      	ldr	r3, [pc, #56]	@ (8017484 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801744c:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801744e:	881b      	ldrh	r3, [r3, #0]
 8017450:	4604      	mov	r4, r0
 8017452:	429a      	cmp	r2, r3
 8017454:	d214      	bcs.n	8017480 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017456:	6803      	ldr	r3, [r0, #0]
 8017458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801745a:	4798      	blx	r3
 801745c:	6823      	ldr	r3, [r4, #0]
 801745e:	4605      	mov	r5, r0
 8017460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017462:	4620      	mov	r0, r4
 8017464:	4798      	blx	r3
 8017466:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801746a:	b22d      	sxth	r5, r5
 801746c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017470:	4601      	mov	r1, r0
 8017472:	bf06      	itte	eq
 8017474:	4602      	moveq	r2, r0
 8017476:	4629      	moveq	r1, r5
 8017478:	462a      	movne	r2, r5
 801747a:	4620      	mov	r0, r4
 801747c:	f7f7 f859 	bl	800e532 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017480:	bd38      	pop	{r3, r4, r5, pc}
 8017482:	bf00      	nop
 8017484:	20011f88 	.word	0x20011f88

08017488 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8017488:	b530      	push	{r4, r5, lr}
 801748a:	888b      	ldrh	r3, [r1, #4]
 801748c:	b085      	sub	sp, #20
 801748e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017490:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017494:	4604      	mov	r4, r0
 8017496:	b923      	cbnz	r3, 80174a2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8017498:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801749c:	b90b      	cbnz	r3, 80174a2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801749e:	f7ff ffd3 	bl	8017448 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80174a2:	466d      	mov	r5, sp
 80174a4:	6823      	ldr	r3, [r4, #0]
 80174a6:	4621      	mov	r1, r4
 80174a8:	4628      	mov	r0, r5
 80174aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80174ae:	4798      	blx	r3
 80174b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80174b4:	343c      	adds	r4, #60	@ 0x3c
 80174b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80174ba:	b005      	add	sp, #20
 80174bc:	bd30      	pop	{r4, r5, pc}

080174be <_ZNK8touchgfx3Box12getSolidRectEv>:
 80174be:	2300      	movs	r3, #0
 80174c0:	8083      	strh	r3, [r0, #4]
 80174c2:	80c3      	strh	r3, [r0, #6]
 80174c4:	8003      	strh	r3, [r0, #0]
 80174c6:	8043      	strh	r3, [r0, #2]
 80174c8:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80174cc:	2bff      	cmp	r3, #255	@ 0xff
 80174ce:	bf01      	itttt	eq
 80174d0:	890b      	ldrheq	r3, [r1, #8]
 80174d2:	8083      	strheq	r3, [r0, #4]
 80174d4:	894b      	ldrheq	r3, [r1, #10]
 80174d6:	80c3      	strheq	r3, [r0, #6]
 80174d8:	4770      	bx	lr
	...

080174dc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80174dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174de:	4604      	mov	r4, r0
 80174e0:	466b      	mov	r3, sp
 80174e2:	6808      	ldr	r0, [r1, #0]
 80174e4:	6849      	ldr	r1, [r1, #4]
 80174e6:	c303      	stmia	r3!, {r0, r1}
 80174e8:	6823      	ldr	r3, [r4, #0]
 80174ea:	4669      	mov	r1, sp
 80174ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174ee:	4620      	mov	r0, r4
 80174f0:	4798      	blx	r3
 80174f2:	4b08      	ldr	r3, [pc, #32]	@ (8017514 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80174fa:	b10a      	cbz	r2, 8017500 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80174fc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80174fe:	b900      	cbnz	r0, 8017502 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017500:	6898      	ldr	r0, [r3, #8]
 8017502:	6803      	ldr	r3, [r0, #0]
 8017504:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017506:	6a1d      	ldr	r5, [r3, #32]
 8017508:	4669      	mov	r1, sp
 801750a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801750e:	47a8      	blx	r5
 8017510:	b003      	add	sp, #12
 8017512:	bd30      	pop	{r4, r5, pc}
 8017514:	20011f2c 	.word	0x20011f2c

08017518 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017518:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801751c:	b12a      	cbz	r2, 801752a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801751e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8017522:	b112      	cbz	r2, 801752a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017524:	6803      	ldr	r3, [r0, #0]
 8017526:	695b      	ldr	r3, [r3, #20]
 8017528:	4718      	bx	r3
 801752a:	4770      	bx	lr

0801752c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801752c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017530:	4b2f      	ldr	r3, [pc, #188]	@ (80175f0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8017532:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017534:	881b      	ldrh	r3, [r3, #0]
 8017536:	b08d      	sub	sp, #52	@ 0x34
 8017538:	4293      	cmp	r3, r2
 801753a:	4604      	mov	r4, r0
 801753c:	460f      	mov	r7, r1
 801753e:	d954      	bls.n	80175ea <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8017540:	4b2c      	ldr	r3, [pc, #176]	@ (80175f4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8017542:	6819      	ldr	r1, [r3, #0]
 8017544:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8017548:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801754c:	4a2a      	ldr	r2, [pc, #168]	@ (80175f8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801754e:	6812      	ldr	r2, [r2, #0]
 8017550:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8017554:	2900      	cmp	r1, #0
 8017556:	d048      	beq.n	80175ea <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8017558:	785a      	ldrb	r2, [r3, #1]
 801755a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801755e:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8017562:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017566:	4b25      	ldr	r3, [pc, #148]	@ (80175fc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8017568:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801756c:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8017576:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 801757a:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 801757e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8017580:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8017584:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8017588:	9107      	str	r1, [sp, #28]
 801758a:	f88d 8020 	strb.w	r8, [sp, #32]
 801758e:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8017592:	9609      	str	r6, [sp, #36]	@ 0x24
 8017594:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8017598:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 801759c:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80175a0:	b10b      	cbz	r3, 80175a6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80175a2:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80175a4:	b905      	cbnz	r5, 80175a8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80175a6:	6895      	ldr	r5, [r2, #8]
 80175a8:	ae05      	add	r6, sp, #20
 80175aa:	4621      	mov	r1, r4
 80175ac:	4630      	mov	r0, r6
 80175ae:	f003 fc79 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175b2:	4b13      	ldr	r3, [pc, #76]	@ (8017600 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80175b4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80175b6:	6818      	ldr	r0, [r3, #0]
 80175b8:	f7fa fc3a 	bl	8011e30 <_ZNK8touchgfx5Texts7getTextEt>
 80175bc:	6823      	ldr	r3, [r4, #0]
 80175be:	4680      	mov	r8, r0
 80175c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80175c2:	4620      	mov	r0, r4
 80175c4:	4798      	blx	r3
 80175c6:	6823      	ldr	r3, [r4, #0]
 80175c8:	4681      	mov	r9, r0
 80175ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80175ce:	4620      	mov	r0, r4
 80175d0:	4798      	blx	r3
 80175d2:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80175d6:	ab07      	add	r3, sp, #28
 80175d8:	9300      	str	r3, [sp, #0]
 80175da:	f8cd 8004 	str.w	r8, [sp, #4]
 80175de:	463b      	mov	r3, r7
 80175e0:	e896 0006 	ldmia.w	r6, {r1, r2}
 80175e4:	4628      	mov	r0, r5
 80175e6:	f7fa fbb4 	bl	8011d52 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80175ea:	b00d      	add	sp, #52	@ 0x34
 80175ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175f0:	20011f88 	.word	0x20011f88
 80175f4:	20011f84 	.word	0x20011f84
 80175f8:	20011f8c 	.word	0x20011f8c
 80175fc:	20011f2c 	.word	0x20011f2c
 8017600:	20011f90 	.word	0x20011f90

08017604 <_ZN8touchgfx7OutlineD1Ev>:
 8017604:	4770      	bx	lr

08017606 <_ZN8touchgfx7OutlineD0Ev>:
 8017606:	b510      	push	{r4, lr}
 8017608:	4604      	mov	r4, r0
 801760a:	2130      	movs	r1, #48	@ 0x30
 801760c:	f014 fa29 	bl	802ba62 <_ZdlPvj>
 8017610:	4620      	mov	r0, r4
 8017612:	bd10      	pop	{r4, pc}

08017614 <_ZN8touchgfx7Outline5resetEv>:
 8017614:	b510      	push	{r4, lr}
 8017616:	4604      	mov	r4, r0
 8017618:	f000 fe94 	bl	8018344 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801761c:	60e0      	str	r0, [r4, #12]
 801761e:	f000 fe97 	bl	8018350 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8017622:	2200      	movs	r2, #0
 8017624:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8017628:	68e3      	ldr	r3, [r4, #12]
 801762a:	08c0      	lsrs	r0, r0, #3
 801762c:	3801      	subs	r0, #1
 801762e:	6123      	str	r3, [r4, #16]
 8017630:	6060      	str	r0, [r4, #4]
 8017632:	60a2      	str	r2, [r4, #8]
 8017634:	8019      	strh	r1, [r3, #0]
 8017636:	8059      	strh	r1, [r3, #2]
 8017638:	809a      	strh	r2, [r3, #4]
 801763a:	80da      	strh	r2, [r3, #6]
 801763c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801763e:	f023 0301 	bic.w	r3, r3, #1
 8017642:	f043 0302 	orr.w	r3, r3, #2
 8017646:	6263      	str	r3, [r4, #36]	@ 0x24
 8017648:	bd10      	pop	{r4, pc}
	...

0801764c <_ZN8touchgfx7OutlineC1Ev>:
 801764c:	4b0a      	ldr	r3, [pc, #40]	@ (8017678 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801764e:	b510      	push	{r4, lr}
 8017650:	6003      	str	r3, [r0, #0]
 8017652:	2300      	movs	r3, #0
 8017654:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8017658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801765c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8017660:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017664:	6243      	str	r3, [r0, #36]	@ 0x24
 8017666:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801766a:	4604      	mov	r4, r0
 801766c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8017670:	f7ff ffd0 	bl	8017614 <_ZN8touchgfx7Outline5resetEv>
 8017674:	4620      	mov	r0, r4
 8017676:	bd10      	pop	{r4, pc}
 8017678:	0802f8c4 	.word	0x0802f8c4

0801767c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017680:	b093      	sub	sp, #76	@ 0x4c
 8017682:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017684:	9305      	str	r3, [sp, #20]
 8017686:	f004 051f 	and.w	r5, r4, #31
 801768a:	1153      	asrs	r3, r2, #5
 801768c:	9504      	str	r5, [sp, #16]
 801768e:	1156      	asrs	r6, r2, #5
 8017690:	1165      	asrs	r5, r4, #5
 8017692:	9303      	str	r3, [sp, #12]
 8017694:	42ae      	cmp	r6, r5
 8017696:	ea4f 1364 	mov.w	r3, r4, asr #5
 801769a:	9306      	str	r3, [sp, #24]
 801769c:	f002 031f 	and.w	r3, r2, #31
 80176a0:	f040 80f8 	bne.w	8017894 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 80176a4:	9c04      	ldr	r4, [sp, #16]
 80176a6:	9a05      	ldr	r2, [sp, #20]
 80176a8:	42a3      	cmp	r3, r4
 80176aa:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80176ae:	6902      	ldr	r2, [r0, #16]
 80176b0:	d125      	bne.n	80176fe <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 80176b2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80176b6:	459e      	cmp	lr, r3
 80176b8:	d103      	bne.n	80176c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 80176ba:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80176be:	429e      	cmp	r6, r3
 80176c0:	d035      	beq.n	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80176c2:	88d1      	ldrh	r1, [r2, #6]
 80176c4:	8893      	ldrh	r3, [r2, #4]
 80176c6:	430b      	orrs	r3, r1
 80176c8:	d010      	beq.n	80176ec <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80176ca:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	db0c      	blt.n	80176ec <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80176d2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80176d4:	428b      	cmp	r3, r1
 80176d6:	da09      	bge.n	80176ec <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80176d8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80176dc:	428b      	cmp	r3, r1
 80176de:	bf38      	it	cc
 80176e0:	3208      	addcc	r2, #8
 80176e2:	f103 0301 	add.w	r3, r3, #1
 80176e6:	bf38      	it	cc
 80176e8:	6102      	strcc	r2, [r0, #16]
 80176ea:	6083      	str	r3, [r0, #8]
 80176ec:	6903      	ldr	r3, [r0, #16]
 80176ee:	9a03      	ldr	r2, [sp, #12]
 80176f0:	f8a3 e000 	strh.w	lr, [r3]
 80176f4:	805a      	strh	r2, [r3, #2]
 80176f6:	2200      	movs	r2, #0
 80176f8:	809a      	strh	r2, [r3, #4]
 80176fa:	80da      	strh	r2, [r3, #6]
 80176fc:	e017      	b.n	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80176fe:	9c05      	ldr	r4, [sp, #20]
 8017700:	114e      	asrs	r6, r1, #5
 8017702:	f004 041f 	and.w	r4, r4, #31
 8017706:	9402      	str	r4, [sp, #8]
 8017708:	9c04      	ldr	r4, [sp, #16]
 801770a:	4576      	cmp	r6, lr
 801770c:	f001 0c1f 	and.w	ip, r1, #31
 8017710:	eba4 0403 	sub.w	r4, r4, r3
 8017714:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8017718:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801771c:	d10a      	bne.n	8017734 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 801771e:	9b02      	ldr	r3, [sp, #8]
 8017720:	44a0      	add	r8, r4
 8017722:	449c      	add	ip, r3
 8017724:	fb04 a40c 	mla	r4, r4, ip, sl
 8017728:	f8a2 8004 	strh.w	r8, [r2, #4]
 801772c:	80d4      	strh	r4, [r2, #6]
 801772e:	b013      	add	sp, #76	@ 0x4c
 8017730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017734:	9d05      	ldr	r5, [sp, #20]
 8017736:	1a69      	subs	r1, r5, r1
 8017738:	bf5b      	ittet	pl
 801773a:	f1cc 0520 	rsbpl	r5, ip, #32
 801773e:	436c      	mulpl	r4, r5
 8017740:	2500      	movmi	r5, #0
 8017742:	2520      	movpl	r5, #32
 8017744:	bf44      	itt	mi
 8017746:	fb04 f40c 	mulmi.w	r4, r4, ip
 801774a:	4249      	negmi	r1, r1
 801774c:	9501      	str	r5, [sp, #4]
 801774e:	fb94 f5f1 	sdiv	r5, r4, r1
 8017752:	bf54      	ite	pl
 8017754:	f04f 0901 	movpl.w	r9, #1
 8017758:	f04f 39ff 	movmi.w	r9, #4294967295
 801775c:	fb01 4415 	mls	r4, r1, r5, r4
 8017760:	9f01      	ldr	r7, [sp, #4]
 8017762:	2c00      	cmp	r4, #0
 8017764:	bfb8      	it	lt
 8017766:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801776a:	44bc      	add	ip, r7
 801776c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017770:	44a8      	add	r8, r5
 8017772:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017776:	f8a2 c006 	strh.w	ip, [r2, #6]
 801777a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801777e:	bfb8      	it	lt
 8017780:	1864      	addlt	r4, r4, r1
 8017782:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017786:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801778a:	444e      	add	r6, r9
 801778c:	ea58 0202 	orrs.w	r2, r8, r2
 8017790:	d011      	beq.n	80177b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8017792:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017796:	f1b8 0f00 	cmp.w	r8, #0
 801779a:	db0c      	blt.n	80177b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801779c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801779e:	4590      	cmp	r8, r2
 80177a0:	da09      	bge.n	80177b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80177a2:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80177a6:	4590      	cmp	r8, r2
 80177a8:	bf3c      	itt	cc
 80177aa:	f10c 0208 	addcc.w	r2, ip, #8
 80177ae:	6102      	strcc	r2, [r0, #16]
 80177b0:	f108 0201 	add.w	r2, r8, #1
 80177b4:	6082      	str	r2, [r0, #8]
 80177b6:	2700      	movs	r7, #0
 80177b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80177bc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80177c0:	45b6      	cmp	lr, r6
 80177c2:	f8ac 6000 	strh.w	r6, [ip]
 80177c6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80177ca:	f8ac 7004 	strh.w	r7, [ip, #4]
 80177ce:	f8ac 7006 	strh.w	r7, [ip, #6]
 80177d2:	442b      	add	r3, r5
 80177d4:	d04d      	beq.n	8017872 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 80177d6:	9f04      	ldr	r7, [sp, #16]
 80177d8:	f04f 0a00 	mov.w	sl, #0
 80177dc:	1aff      	subs	r7, r7, r3
 80177de:	443d      	add	r5, r7
 80177e0:	016d      	lsls	r5, r5, #5
 80177e2:	fb95 f8f1 	sdiv	r8, r5, r1
 80177e6:	fb01 5518 	mls	r5, r1, r8, r5
 80177ea:	2d00      	cmp	r5, #0
 80177ec:	bfb8      	it	lt
 80177ee:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80177f2:	f108 0701 	add.w	r7, r8, #1
 80177f6:	bfb8      	it	lt
 80177f8:	186d      	addlt	r5, r5, r1
 80177fa:	1a64      	subs	r4, r4, r1
 80177fc:	9703      	str	r7, [sp, #12]
 80177fe:	1964      	adds	r4, r4, r5
 8017800:	bf48      	it	mi
 8017802:	4647      	movmi	r7, r8
 8017804:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017808:	bf58      	it	pl
 801780a:	9f03      	ldrpl	r7, [sp, #12]
 801780c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017810:	443b      	add	r3, r7
 8017812:	44bb      	add	fp, r7
 8017814:	f8ac b004 	strh.w	fp, [ip, #4]
 8017818:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801781c:	bf58      	it	pl
 801781e:	1a64      	subpl	r4, r4, r1
 8017820:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017824:	f8ac b006 	strh.w	fp, [ip, #6]
 8017828:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801782c:	444e      	add	r6, r9
 801782e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017832:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017836:	ea5b 0707 	orrs.w	r7, fp, r7
 801783a:	d011      	beq.n	8017860 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801783c:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017840:	f1bb 0f00 	cmp.w	fp, #0
 8017844:	db0c      	blt.n	8017860 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8017846:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017848:	45bb      	cmp	fp, r7
 801784a:	da09      	bge.n	8017860 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801784c:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017850:	45bb      	cmp	fp, r7
 8017852:	bf3c      	itt	cc
 8017854:	f10c 0708 	addcc.w	r7, ip, #8
 8017858:	6107      	strcc	r7, [r0, #16]
 801785a:	f10b 0701 	add.w	r7, fp, #1
 801785e:	6087      	str	r7, [r0, #8]
 8017860:	6907      	ldr	r7, [r0, #16]
 8017862:	45b6      	cmp	lr, r6
 8017864:	803e      	strh	r6, [r7, #0]
 8017866:	807a      	strh	r2, [r7, #2]
 8017868:	f8a7 a004 	strh.w	sl, [r7, #4]
 801786c:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017870:	d1c5      	bne.n	80177fe <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8017872:	9a04      	ldr	r2, [sp, #16]
 8017874:	1ad3      	subs	r3, r2, r3
 8017876:	6902      	ldr	r2, [r0, #16]
 8017878:	8891      	ldrh	r1, [r2, #4]
 801787a:	88d6      	ldrh	r6, [r2, #6]
 801787c:	4419      	add	r1, r3
 801787e:	8091      	strh	r1, [r2, #4]
 8017880:	9902      	ldr	r1, [sp, #8]
 8017882:	f101 0c20 	add.w	ip, r1, #32
 8017886:	9901      	ldr	r1, [sp, #4]
 8017888:	ebac 0c01 	sub.w	ip, ip, r1
 801788c:	fb03 630c 	mla	r3, r3, ip, r6
 8017890:	80d3      	strh	r3, [r2, #6]
 8017892:	e74c      	b.n	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017894:	9d05      	ldr	r5, [sp, #20]
 8017896:	1aa2      	subs	r2, r4, r2
 8017898:	eba5 0501 	sub.w	r5, r5, r1
 801789c:	9508      	str	r5, [sp, #32]
 801789e:	9202      	str	r2, [sp, #8]
 80178a0:	f140 8128 	bpl.w	8017af4 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 80178a4:	9a03      	ldr	r2, [sp, #12]
 80178a6:	2a00      	cmp	r2, #0
 80178a8:	f6ff af41 	blt.w	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80178ac:	f04f 34ff 	mov.w	r4, #4294967295
 80178b0:	9a02      	ldr	r2, [sp, #8]
 80178b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80178b4:	4252      	negs	r2, r2
 80178b6:	9202      	str	r2, [sp, #8]
 80178b8:	9a06      	ldr	r2, [sp, #24]
 80178ba:	2400      	movs	r4, #0
 80178bc:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80178c0:	9206      	str	r2, [sp, #24]
 80178c2:	462a      	mov	r2, r5
 80178c4:	435a      	muls	r2, r3
 80178c6:	9401      	str	r4, [sp, #4]
 80178c8:	9c02      	ldr	r4, [sp, #8]
 80178ca:	9d02      	ldr	r5, [sp, #8]
 80178cc:	fb92 f4f4 	sdiv	r4, r2, r4
 80178d0:	fb05 2214 	mls	r2, r5, r4, r2
 80178d4:	2a00      	cmp	r2, #0
 80178d6:	9207      	str	r2, [sp, #28]
 80178d8:	bfbc      	itt	lt
 80178da:	1952      	addlt	r2, r2, r5
 80178dc:	9207      	strlt	r2, [sp, #28]
 80178de:	9a01      	ldr	r2, [sp, #4]
 80178e0:	bfb8      	it	lt
 80178e2:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80178e6:	eb04 0901 	add.w	r9, r4, r1
 80178ea:	429a      	cmp	r2, r3
 80178ec:	ea4f 1669 	mov.w	r6, r9, asr #5
 80178f0:	6905      	ldr	r5, [r0, #16]
 80178f2:	f040 8112 	bne.w	8017b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 80178f6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80178fa:	429e      	cmp	r6, r3
 80178fc:	d104      	bne.n	8017908 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 80178fe:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017902:	9a03      	ldr	r2, [sp, #12]
 8017904:	429a      	cmp	r2, r3
 8017906:	d01b      	beq.n	8017940 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017908:	88ea      	ldrh	r2, [r5, #6]
 801790a:	88ab      	ldrh	r3, [r5, #4]
 801790c:	4313      	orrs	r3, r2
 801790e:	d010      	beq.n	8017932 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017910:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017914:	2a00      	cmp	r2, #0
 8017916:	db0c      	blt.n	8017932 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8017918:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801791a:	429a      	cmp	r2, r3
 801791c:	da09      	bge.n	8017932 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801791e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8017922:	429a      	cmp	r2, r3
 8017924:	bf38      	it	cc
 8017926:	3508      	addcc	r5, #8
 8017928:	f102 0201 	add.w	r2, r2, #1
 801792c:	bf38      	it	cc
 801792e:	6105      	strcc	r5, [r0, #16]
 8017930:	6082      	str	r2, [r0, #8]
 8017932:	6903      	ldr	r3, [r0, #16]
 8017934:	9a03      	ldr	r2, [sp, #12]
 8017936:	801e      	strh	r6, [r3, #0]
 8017938:	805a      	strh	r2, [r3, #2]
 801793a:	2200      	movs	r2, #0
 801793c:	809a      	strh	r2, [r3, #4]
 801793e:	80da      	strh	r2, [r3, #6]
 8017940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017942:	9a03      	ldr	r2, [sp, #12]
 8017944:	6901      	ldr	r1, [r0, #16]
 8017946:	441a      	add	r2, r3
 8017948:	f9b1 3000 	ldrsh.w	r3, [r1]
 801794c:	42b3      	cmp	r3, r6
 801794e:	d103      	bne.n	8017958 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8017950:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017954:	429a      	cmp	r2, r3
 8017956:	d01a      	beq.n	801798e <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8017958:	88cc      	ldrh	r4, [r1, #6]
 801795a:	888b      	ldrh	r3, [r1, #4]
 801795c:	4323      	orrs	r3, r4
 801795e:	d010      	beq.n	8017982 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017960:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017964:	2c00      	cmp	r4, #0
 8017966:	db0c      	blt.n	8017982 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8017968:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801796a:	429c      	cmp	r4, r3
 801796c:	da09      	bge.n	8017982 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801796e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017972:	429c      	cmp	r4, r3
 8017974:	bf38      	it	cc
 8017976:	3108      	addcc	r1, #8
 8017978:	f104 0401 	add.w	r4, r4, #1
 801797c:	bf38      	it	cc
 801797e:	6101      	strcc	r1, [r0, #16]
 8017980:	6084      	str	r4, [r0, #8]
 8017982:	2100      	movs	r1, #0
 8017984:	6903      	ldr	r3, [r0, #16]
 8017986:	801e      	strh	r6, [r3, #0]
 8017988:	805a      	strh	r2, [r3, #2]
 801798a:	8099      	strh	r1, [r3, #4]
 801798c:	80d9      	strh	r1, [r3, #6]
 801798e:	9b06      	ldr	r3, [sp, #24]
 8017990:	4293      	cmp	r3, r2
 8017992:	f000 8082 	beq.w	8017a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8017996:	9b08      	ldr	r3, [sp, #32]
 8017998:	9902      	ldr	r1, [sp, #8]
 801799a:	015b      	lsls	r3, r3, #5
 801799c:	fb93 f1f1 	sdiv	r1, r3, r1
 80179a0:	9c02      	ldr	r4, [sp, #8]
 80179a2:	9103      	str	r1, [sp, #12]
 80179a4:	fb04 3311 	mls	r3, r4, r1, r3
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	9308      	str	r3, [sp, #32]
 80179ac:	da04      	bge.n	80179b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 80179ae:	1e4b      	subs	r3, r1, #1
 80179b0:	9303      	str	r3, [sp, #12]
 80179b2:	9b08      	ldr	r3, [sp, #32]
 80179b4:	4423      	add	r3, r4
 80179b6:	9308      	str	r3, [sp, #32]
 80179b8:	464f      	mov	r7, r9
 80179ba:	2600      	movs	r6, #0
 80179bc:	9b07      	ldr	r3, [sp, #28]
 80179be:	9902      	ldr	r1, [sp, #8]
 80179c0:	1a5b      	subs	r3, r3, r1
 80179c2:	9307      	str	r3, [sp, #28]
 80179c4:	9b01      	ldr	r3, [sp, #4]
 80179c6:	f1c3 0320 	rsb	r3, r3, #32
 80179ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80179cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80179ce:	9b01      	ldr	r3, [sp, #4]
 80179d0:	1a5b      	subs	r3, r3, r1
 80179d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80179d4:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80179d8:	185b      	adds	r3, r3, r1
 80179da:	bf58      	it	pl
 80179dc:	9902      	ldrpl	r1, [sp, #8]
 80179de:	9307      	str	r3, [sp, #28]
 80179e0:	bf5d      	ittte	pl
 80179e2:	1a5b      	subpl	r3, r3, r1
 80179e4:	9307      	strpl	r3, [sp, #28]
 80179e6:	9b03      	ldrpl	r3, [sp, #12]
 80179e8:	9903      	ldrmi	r1, [sp, #12]
 80179ea:	bf58      	it	pl
 80179ec:	1c59      	addpl	r1, r3, #1
 80179ee:	4489      	add	r9, r1
 80179f0:	2a00      	cmp	r2, #0
 80179f2:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80179f6:	db2e      	blt.n	8017a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80179f8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80179fa:	4293      	cmp	r3, r2
 80179fc:	dd2b      	ble.n	8017a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80179fe:	9c01      	ldr	r4, [sp, #4]
 8017a00:	6905      	ldr	r5, [r0, #16]
 8017a02:	46a0      	mov	r8, r4
 8017a04:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017a06:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8017a0a:	45a0      	cmp	r8, r4
 8017a0c:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8017a10:	f040 8150 	bne.w	8017cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8017a14:	f9b5 1000 	ldrsh.w	r1, [r5]
 8017a18:	4551      	cmp	r1, sl
 8017a1a:	d103      	bne.n	8017a24 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8017a1c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017a20:	4291      	cmp	r1, r2
 8017a22:	d018      	beq.n	8017a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017a24:	ea5c 010e 	orrs.w	r1, ip, lr
 8017a28:	d00f      	beq.n	8017a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017a2a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017a2e:	2900      	cmp	r1, #0
 8017a30:	db0b      	blt.n	8017a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017a32:	428b      	cmp	r3, r1
 8017a34:	dd09      	ble.n	8017a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8017a36:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8017a3a:	4299      	cmp	r1, r3
 8017a3c:	bf38      	it	cc
 8017a3e:	3508      	addcc	r5, #8
 8017a40:	f101 0101 	add.w	r1, r1, #1
 8017a44:	bf38      	it	cc
 8017a46:	6105      	strcc	r5, [r0, #16]
 8017a48:	6081      	str	r1, [r0, #8]
 8017a4a:	6903      	ldr	r3, [r0, #16]
 8017a4c:	f8a3 a000 	strh.w	sl, [r3]
 8017a50:	805a      	strh	r2, [r3, #2]
 8017a52:	809e      	strh	r6, [r3, #4]
 8017a54:	80de      	strh	r6, [r3, #6]
 8017a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a58:	6901      	ldr	r1, [r0, #16]
 8017a5a:	441a      	add	r2, r3
 8017a5c:	88cc      	ldrh	r4, [r1, #6]
 8017a5e:	888b      	ldrh	r3, [r1, #4]
 8017a60:	4323      	orrs	r3, r4
 8017a62:	d010      	beq.n	8017a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017a64:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017a68:	2c00      	cmp	r4, #0
 8017a6a:	db0c      	blt.n	8017a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017a6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017a6e:	429c      	cmp	r4, r3
 8017a70:	da09      	bge.n	8017a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8017a72:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017a76:	429c      	cmp	r4, r3
 8017a78:	bf38      	it	cc
 8017a7a:	3108      	addcc	r1, #8
 8017a7c:	f104 0401 	add.w	r4, r4, #1
 8017a80:	bf38      	it	cc
 8017a82:	6101      	strcc	r1, [r0, #16]
 8017a84:	6084      	str	r4, [r0, #8]
 8017a86:	6903      	ldr	r3, [r0, #16]
 8017a88:	464f      	mov	r7, r9
 8017a8a:	f8a3 a000 	strh.w	sl, [r3]
 8017a8e:	805a      	strh	r2, [r3, #2]
 8017a90:	809e      	strh	r6, [r3, #4]
 8017a92:	80de      	strh	r6, [r3, #6]
 8017a94:	9b06      	ldr	r3, [sp, #24]
 8017a96:	4293      	cmp	r3, r2
 8017a98:	d19c      	bne.n	80179d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8017a9a:	9b01      	ldr	r3, [sp, #4]
 8017a9c:	6907      	ldr	r7, [r0, #16]
 8017a9e:	f1c3 0620 	rsb	r6, r3, #32
 8017aa2:	9b05      	ldr	r3, [sp, #20]
 8017aa4:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017aa8:	9b04      	ldr	r3, [sp, #16]
 8017aaa:	429e      	cmp	r6, r3
 8017aac:	f040 81cc 	bne.w	8017e48 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8017ab0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017ab4:	459e      	cmp	lr, r3
 8017ab6:	d104      	bne.n	8017ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8017ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	f43f ae36 	beq.w	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017ac2:	88f9      	ldrh	r1, [r7, #6]
 8017ac4:	88bb      	ldrh	r3, [r7, #4]
 8017ac6:	430b      	orrs	r3, r1
 8017ac8:	d010      	beq.n	8017aec <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017aca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	db0c      	blt.n	8017aec <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017ad2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017ad4:	428b      	cmp	r3, r1
 8017ad6:	da09      	bge.n	8017aec <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8017ad8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017adc:	428b      	cmp	r3, r1
 8017ade:	bf38      	it	cc
 8017ae0:	3708      	addcc	r7, #8
 8017ae2:	f103 0301 	add.w	r3, r3, #1
 8017ae6:	bf38      	it	cc
 8017ae8:	6107      	strcc	r7, [r0, #16]
 8017aea:	6083      	str	r3, [r0, #8]
 8017aec:	6903      	ldr	r3, [r0, #16]
 8017aee:	f8a3 e000 	strh.w	lr, [r3]
 8017af2:	e5ff      	b.n	80176f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8017af4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017af6:	9c03      	ldr	r4, [sp, #12]
 8017af8:	42a2      	cmp	r2, r4
 8017afa:	f6ff ae18 	blt.w	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017afe:	9c06      	ldr	r4, [sp, #24]
 8017b00:	42a2      	cmp	r2, r4
 8017b02:	bfb8      	it	lt
 8017b04:	3201      	addlt	r2, #1
 8017b06:	9c08      	ldr	r4, [sp, #32]
 8017b08:	bfb8      	it	lt
 8017b0a:	9206      	strlt	r2, [sp, #24]
 8017b0c:	f1c3 0220 	rsb	r2, r3, #32
 8017b10:	4362      	muls	r2, r4
 8017b12:	2401      	movs	r4, #1
 8017b14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017b16:	2420      	movs	r4, #32
 8017b18:	e6d5      	b.n	80178c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8017b1a:	f009 021f 	and.w	r2, r9, #31
 8017b1e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8017b22:	920c      	str	r2, [sp, #48]	@ 0x30
 8017b24:	9a01      	ldr	r2, [sp, #4]
 8017b26:	45b0      	cmp	r8, r6
 8017b28:	f001 011f 	and.w	r1, r1, #31
 8017b2c:	eba2 0203 	sub.w	r2, r2, r3
 8017b30:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8017b34:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8017b38:	d108      	bne.n	8017b4c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8017b3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b3c:	4496      	add	lr, r2
 8017b3e:	4419      	add	r1, r3
 8017b40:	fb02 a101 	mla	r1, r2, r1, sl
 8017b44:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017b48:	80e9      	strh	r1, [r5, #6]
 8017b4a:	e6f9      	b.n	8017940 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017b4c:	2c00      	cmp	r4, #0
 8017b4e:	f2c0 80aa 	blt.w	8017ca6 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8017b52:	2701      	movs	r7, #1
 8017b54:	970a      	str	r7, [sp, #40]	@ 0x28
 8017b56:	2720      	movs	r7, #32
 8017b58:	f1c1 0c20 	rsb	ip, r1, #32
 8017b5c:	fb02 f20c 	mul.w	r2, r2, ip
 8017b60:	fb92 fcf4 	sdiv	ip, r2, r4
 8017b64:	fb04 221c 	mls	r2, r4, ip, r2
 8017b68:	9709      	str	r7, [sp, #36]	@ 0x24
 8017b6a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8017b6c:	2a00      	cmp	r2, #0
 8017b6e:	bfb8      	it	lt
 8017b70:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017b74:	4439      	add	r1, r7
 8017b76:	fb0c a101 	mla	r1, ip, r1, sl
 8017b7a:	44e6      	add	lr, ip
 8017b7c:	80e9      	strh	r1, [r5, #6]
 8017b7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017b80:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017b84:	eb08 0501 	add.w	r5, r8, r1
 8017b88:	6901      	ldr	r1, [r0, #16]
 8017b8a:	bfb8      	it	lt
 8017b8c:	1912      	addlt	r2, r2, r4
 8017b8e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017b92:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017b96:	ea58 070e 	orrs.w	r7, r8, lr
 8017b9a:	d010      	beq.n	8017bbe <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017b9c:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017ba0:	f1be 0f00 	cmp.w	lr, #0
 8017ba4:	db0b      	blt.n	8017bbe <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017ba6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017ba8:	45be      	cmp	lr, r7
 8017baa:	da08      	bge.n	8017bbe <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017bac:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017bb0:	45be      	cmp	lr, r7
 8017bb2:	bf3c      	itt	cc
 8017bb4:	3108      	addcc	r1, #8
 8017bb6:	6101      	strcc	r1, [r0, #16]
 8017bb8:	f10e 0101 	add.w	r1, lr, #1
 8017bbc:	6081      	str	r1, [r0, #8]
 8017bbe:	f04f 0e00 	mov.w	lr, #0
 8017bc2:	6901      	ldr	r1, [r0, #16]
 8017bc4:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017bc8:	42ae      	cmp	r6, r5
 8017bca:	800d      	strh	r5, [r1, #0]
 8017bcc:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017bd0:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017bd4:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017bd8:	4463      	add	r3, ip
 8017bda:	d055      	beq.n	8017c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 8017bdc:	9901      	ldr	r1, [sp, #4]
 8017bde:	1b12      	subs	r2, r2, r4
 8017be0:	1ac9      	subs	r1, r1, r3
 8017be2:	4461      	add	r1, ip
 8017be4:	0149      	lsls	r1, r1, #5
 8017be6:	fb91 fef4 	sdiv	lr, r1, r4
 8017bea:	fb04 111e 	mls	r1, r4, lr, r1
 8017bee:	2900      	cmp	r1, #0
 8017bf0:	bfb8      	it	lt
 8017bf2:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017bf6:	f10e 0701 	add.w	r7, lr, #1
 8017bfa:	bfb8      	it	lt
 8017bfc:	1909      	addlt	r1, r1, r4
 8017bfe:	970d      	str	r7, [sp, #52]	@ 0x34
 8017c00:	1852      	adds	r2, r2, r1
 8017c02:	bf48      	it	mi
 8017c04:	46f4      	movmi	ip, lr
 8017c06:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8017c0a:	bf58      	it	pl
 8017c0c:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8017c10:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8017c14:	4463      	add	r3, ip
 8017c16:	44e3      	add	fp, ip
 8017c18:	f8aa b004 	strh.w	fp, [sl, #4]
 8017c1c:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8017c20:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8017c22:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8017c26:	f8aa b006 	strh.w	fp, [sl, #6]
 8017c2a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017c2e:	bf58      	it	pl
 8017c30:	1b12      	subpl	r2, r2, r4
 8017c32:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017c36:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8017c3a:	443d      	add	r5, r7
 8017c3c:	ea5b 070a 	orrs.w	r7, fp, sl
 8017c40:	d014      	beq.n	8017c6c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017c42:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8017c46:	f1ba 0f00 	cmp.w	sl, #0
 8017c4a:	db0f      	blt.n	8017c6c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017c4c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017c4e:	45ba      	cmp	sl, r7
 8017c50:	da0c      	bge.n	8017c6c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8017c52:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8017c56:	45ba      	cmp	sl, r7
 8017c58:	bf38      	it	cc
 8017c5a:	f10c 0c08 	addcc.w	ip, ip, #8
 8017c5e:	f10a 0a01 	add.w	sl, sl, #1
 8017c62:	bf38      	it	cc
 8017c64:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8017c68:	f8c0 a008 	str.w	sl, [r0, #8]
 8017c6c:	f04f 0700 	mov.w	r7, #0
 8017c70:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017c74:	42ae      	cmp	r6, r5
 8017c76:	f8ac 5000 	strh.w	r5, [ip]
 8017c7a:	f8ac 8002 	strh.w	r8, [ip, #2]
 8017c7e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017c82:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017c86:	d1bb      	bne.n	8017c00 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8017c88:	6904      	ldr	r4, [r0, #16]
 8017c8a:	9a01      	ldr	r2, [sp, #4]
 8017c8c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017c8e:	1ad3      	subs	r3, r2, r3
 8017c90:	88a2      	ldrh	r2, [r4, #4]
 8017c92:	3120      	adds	r1, #32
 8017c94:	441a      	add	r2, r3
 8017c96:	80a2      	strh	r2, [r4, #4]
 8017c98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017c9a:	1a89      	subs	r1, r1, r2
 8017c9c:	88e2      	ldrh	r2, [r4, #6]
 8017c9e:	fb03 2301 	mla	r3, r3, r1, r2
 8017ca2:	80e3      	strh	r3, [r4, #6]
 8017ca4:	e64c      	b.n	8017940 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017ca6:	f04f 37ff 	mov.w	r7, #4294967295
 8017caa:	434a      	muls	r2, r1
 8017cac:	970a      	str	r7, [sp, #40]	@ 0x28
 8017cae:	4264      	negs	r4, r4
 8017cb0:	2700      	movs	r7, #0
 8017cb2:	e755      	b.n	8017b60 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8017cb4:	ea4f 1867 	mov.w	r8, r7, asr #5
 8017cb8:	f009 031f 	and.w	r3, r9, #31
 8017cbc:	45d0      	cmp	r8, sl
 8017cbe:	f007 071f 	and.w	r7, r7, #31
 8017cc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017cc4:	fa1f fc8c 	uxth.w	ip, ip
 8017cc8:	fa1f fe8e 	uxth.w	lr, lr
 8017ccc:	d10a      	bne.n	8017ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 8017cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017cd0:	449c      	add	ip, r3
 8017cd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cd4:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017cd8:	441f      	add	r7, r3
 8017cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017cdc:	fb03 e707 	mla	r7, r3, r7, lr
 8017ce0:	80ef      	strh	r7, [r5, #6]
 8017ce2:	e6b8      	b.n	8017a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017ce4:	2900      	cmp	r1, #0
 8017ce6:	f2c0 80a7 	blt.w	8017e38 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8017cea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017cec:	f1c7 0320 	rsb	r3, r7, #32
 8017cf0:	4363      	muls	r3, r4
 8017cf2:	2401      	movs	r4, #1
 8017cf4:	940d      	str	r4, [sp, #52]	@ 0x34
 8017cf6:	2420      	movs	r4, #32
 8017cf8:	940c      	str	r4, [sp, #48]	@ 0x30
 8017cfa:	fb93 f4f1 	sdiv	r4, r3, r1
 8017cfe:	fb01 3b14 	mls	fp, r1, r4, r3
 8017d02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d04:	f1bb 0f00 	cmp.w	fp, #0
 8017d08:	bfb8      	it	lt
 8017d0a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017d0e:	441f      	add	r7, r3
 8017d10:	fb04 e707 	mla	r7, r4, r7, lr
 8017d14:	44a4      	add	ip, r4
 8017d16:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017d1a:	80ef      	strh	r7, [r5, #6]
 8017d1c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017d20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017d22:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8017d26:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017d2a:	bfb8      	it	lt
 8017d2c:	448b      	addlt	fp, r1
 8017d2e:	eb08 0503 	add.w	r5, r8, r3
 8017d32:	ea5e 0307 	orrs.w	r3, lr, r7
 8017d36:	d011      	beq.n	8017d5c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8017d38:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8017d3c:	f1be 0f00 	cmp.w	lr, #0
 8017d40:	db0c      	blt.n	8017d5c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8017d42:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017d44:	45be      	cmp	lr, r7
 8017d46:	da09      	bge.n	8017d5c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8017d48:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017d4c:	45be      	cmp	lr, r7
 8017d4e:	bf3c      	itt	cc
 8017d50:	f10c 0708 	addcc.w	r7, ip, #8
 8017d54:	6107      	strcc	r7, [r0, #16]
 8017d56:	f10e 0701 	add.w	r7, lr, #1
 8017d5a:	6087      	str	r7, [r0, #8]
 8017d5c:	6907      	ldr	r7, [r0, #16]
 8017d5e:	b213      	sxth	r3, r2
 8017d60:	9310      	str	r3, [sp, #64]	@ 0x40
 8017d62:	807b      	strh	r3, [r7, #2]
 8017d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d66:	4555      	cmp	r5, sl
 8017d68:	803d      	strh	r5, [r7, #0]
 8017d6a:	80be      	strh	r6, [r7, #4]
 8017d6c:	80fe      	strh	r6, [r7, #6]
 8017d6e:	eb04 0c03 	add.w	ip, r4, r3
 8017d72:	d050      	beq.n	8017e16 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8017d74:	9b01      	ldr	r3, [sp, #4]
 8017d76:	eba3 070c 	sub.w	r7, r3, ip
 8017d7a:	443c      	add	r4, r7
 8017d7c:	0164      	lsls	r4, r4, #5
 8017d7e:	fb94 f8f1 	sdiv	r8, r4, r1
 8017d82:	fb01 4418 	mls	r4, r1, r8, r4
 8017d86:	2c00      	cmp	r4, #0
 8017d88:	bfb8      	it	lt
 8017d8a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017d8e:	ebab 0301 	sub.w	r3, fp, r1
 8017d92:	f108 0701 	add.w	r7, r8, #1
 8017d96:	bfb8      	it	lt
 8017d98:	1864      	addlt	r4, r4, r1
 8017d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d9c:	9711      	str	r7, [sp, #68]	@ 0x44
 8017d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017da0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017da4:	191b      	adds	r3, r3, r4
 8017da6:	bf4c      	ite	mi
 8017da8:	4647      	movmi	r7, r8
 8017daa:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8017dac:	f8be b004 	ldrh.w	fp, [lr, #4]
 8017db0:	44bc      	add	ip, r7
 8017db2:	44bb      	add	fp, r7
 8017db4:	f8ae b004 	strh.w	fp, [lr, #4]
 8017db8:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dbe:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017dc2:	f8ae b006 	strh.w	fp, [lr, #6]
 8017dc6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017dc8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017dcc:	443d      	add	r5, r7
 8017dce:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017dd2:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8017dd6:	bf5c      	itt	pl
 8017dd8:	1a5b      	subpl	r3, r3, r1
 8017dda:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8017ddc:	ea5b 0307 	orrs.w	r3, fp, r7
 8017de0:	d011      	beq.n	8017e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8017de2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8017de6:	f1bb 0f00 	cmp.w	fp, #0
 8017dea:	db0c      	blt.n	8017e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8017dec:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017dee:	45bb      	cmp	fp, r7
 8017df0:	da09      	bge.n	8017e06 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8017df2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017df6:	45bb      	cmp	fp, r7
 8017df8:	bf3c      	itt	cc
 8017dfa:	f10e 0708 	addcc.w	r7, lr, #8
 8017dfe:	6107      	strcc	r7, [r0, #16]
 8017e00:	f10b 0701 	add.w	r7, fp, #1
 8017e04:	6087      	str	r7, [r0, #8]
 8017e06:	6907      	ldr	r7, [r0, #16]
 8017e08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017e0a:	4555      	cmp	r5, sl
 8017e0c:	803d      	strh	r5, [r7, #0]
 8017e0e:	807b      	strh	r3, [r7, #2]
 8017e10:	80be      	strh	r6, [r7, #4]
 8017e12:	80fe      	strh	r6, [r7, #6]
 8017e14:	d1c3      	bne.n	8017d9e <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 8017e16:	9b01      	ldr	r3, [sp, #4]
 8017e18:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017e1a:	eba3 0c0c 	sub.w	ip, r3, ip
 8017e1e:	6903      	ldr	r3, [r0, #16]
 8017e20:	3720      	adds	r7, #32
 8017e22:	8899      	ldrh	r1, [r3, #4]
 8017e24:	4461      	add	r1, ip
 8017e26:	8099      	strh	r1, [r3, #4]
 8017e28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017e2a:	1a7f      	subs	r7, r7, r1
 8017e2c:	88d9      	ldrh	r1, [r3, #6]
 8017e2e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8017e32:	f8a3 c006 	strh.w	ip, [r3, #6]
 8017e36:	e60e      	b.n	8017a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017e38:	f04f 34ff 	mov.w	r4, #4294967295
 8017e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e3e:	940d      	str	r4, [sp, #52]	@ 0x34
 8017e40:	437b      	muls	r3, r7
 8017e42:	4249      	negs	r1, r1
 8017e44:	2400      	movs	r4, #0
 8017e46:	e757      	b.n	8017cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8017e48:	9905      	ldr	r1, [sp, #20]
 8017e4a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8017e4e:	f001 011f 	and.w	r1, r1, #31
 8017e52:	9102      	str	r1, [sp, #8]
 8017e54:	9904      	ldr	r1, [sp, #16]
 8017e56:	45f3      	cmp	fp, lr
 8017e58:	f009 0c1f 	and.w	ip, r9, #31
 8017e5c:	eba1 0406 	sub.w	r4, r1, r6
 8017e60:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8017e64:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8017e68:	d108      	bne.n	8017e7c <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8017e6a:	9b02      	ldr	r3, [sp, #8]
 8017e6c:	44a0      	add	r8, r4
 8017e6e:	449c      	add	ip, r3
 8017e70:	fb04 a40c 	mla	r4, r4, ip, sl
 8017e74:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017e78:	80fc      	strh	r4, [r7, #6]
 8017e7a:	e458      	b.n	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8017e7c:	9905      	ldr	r1, [sp, #20]
 8017e7e:	ebb1 0109 	subs.w	r1, r1, r9
 8017e82:	bf5b      	ittet	pl
 8017e84:	f1cc 0520 	rsbpl	r5, ip, #32
 8017e88:	436c      	mulpl	r4, r5
 8017e8a:	2500      	movmi	r5, #0
 8017e8c:	2520      	movpl	r5, #32
 8017e8e:	bf44      	itt	mi
 8017e90:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017e94:	4249      	negmi	r1, r1
 8017e96:	9501      	str	r5, [sp, #4]
 8017e98:	fb94 f5f1 	sdiv	r5, r4, r1
 8017e9c:	bf54      	ite	pl
 8017e9e:	f04f 0901 	movpl.w	r9, #1
 8017ea2:	f04f 39ff 	movmi.w	r9, #4294967295
 8017ea6:	fb01 4415 	mls	r4, r1, r5, r4
 8017eaa:	9b01      	ldr	r3, [sp, #4]
 8017eac:	2c00      	cmp	r4, #0
 8017eae:	bfb8      	it	lt
 8017eb0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017eb4:	449c      	add	ip, r3
 8017eb6:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017eba:	44a8      	add	r8, r5
 8017ebc:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017ec0:	f8a7 c006 	strh.w	ip, [r7, #6]
 8017ec4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017ec8:	bfb8      	it	lt
 8017eca:	1864      	addlt	r4, r4, r1
 8017ecc:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017ed0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017ed4:	eb0b 0309 	add.w	r3, fp, r9
 8017ed8:	ea58 0707 	orrs.w	r7, r8, r7
 8017edc:	d011      	beq.n	8017f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8017ede:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017ee2:	f1b8 0f00 	cmp.w	r8, #0
 8017ee6:	db0c      	blt.n	8017f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8017ee8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017eea:	45b8      	cmp	r8, r7
 8017eec:	da09      	bge.n	8017f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8017eee:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8017ef2:	45b8      	cmp	r8, r7
 8017ef4:	bf3c      	itt	cc
 8017ef6:	f10c 0708 	addcc.w	r7, ip, #8
 8017efa:	6107      	strcc	r7, [r0, #16]
 8017efc:	f108 0701 	add.w	r7, r8, #1
 8017f00:	6087      	str	r7, [r0, #8]
 8017f02:	f04f 0c00 	mov.w	ip, #0
 8017f06:	6907      	ldr	r7, [r0, #16]
 8017f08:	b212      	sxth	r2, r2
 8017f0a:	459e      	cmp	lr, r3
 8017f0c:	803b      	strh	r3, [r7, #0]
 8017f0e:	807a      	strh	r2, [r7, #2]
 8017f10:	f8a7 c004 	strh.w	ip, [r7, #4]
 8017f14:	f8a7 c006 	strh.w	ip, [r7, #6]
 8017f18:	442e      	add	r6, r5
 8017f1a:	d04d      	beq.n	8017fb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8017f1c:	9f04      	ldr	r7, [sp, #16]
 8017f1e:	f04f 0a00 	mov.w	sl, #0
 8017f22:	1bbf      	subs	r7, r7, r6
 8017f24:	443d      	add	r5, r7
 8017f26:	016d      	lsls	r5, r5, #5
 8017f28:	fb95 f8f1 	sdiv	r8, r5, r1
 8017f2c:	fb01 5518 	mls	r5, r1, r8, r5
 8017f30:	4565      	cmp	r5, ip
 8017f32:	bfb8      	it	lt
 8017f34:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017f38:	f108 0701 	add.w	r7, r8, #1
 8017f3c:	bfb8      	it	lt
 8017f3e:	186d      	addlt	r5, r5, r1
 8017f40:	1a64      	subs	r4, r4, r1
 8017f42:	9703      	str	r7, [sp, #12]
 8017f44:	1964      	adds	r4, r4, r5
 8017f46:	bf48      	it	mi
 8017f48:	4647      	movmi	r7, r8
 8017f4a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f4e:	bf58      	it	pl
 8017f50:	9f03      	ldrpl	r7, [sp, #12]
 8017f52:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017f56:	443e      	add	r6, r7
 8017f58:	44bb      	add	fp, r7
 8017f5a:	f8ac b004 	strh.w	fp, [ip, #4]
 8017f5e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017f62:	bf58      	it	pl
 8017f64:	1a64      	subpl	r4, r4, r1
 8017f66:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017f6a:	f8ac b006 	strh.w	fp, [ip, #6]
 8017f6e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f72:	444b      	add	r3, r9
 8017f74:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017f78:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017f7c:	ea5b 0707 	orrs.w	r7, fp, r7
 8017f80:	d011      	beq.n	8017fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8017f82:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017f86:	f1bb 0f00 	cmp.w	fp, #0
 8017f8a:	db0c      	blt.n	8017fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8017f8c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017f8e:	45bb      	cmp	fp, r7
 8017f90:	da09      	bge.n	8017fa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8017f92:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017f96:	45bb      	cmp	fp, r7
 8017f98:	bf3c      	itt	cc
 8017f9a:	f10c 0708 	addcc.w	r7, ip, #8
 8017f9e:	6107      	strcc	r7, [r0, #16]
 8017fa0:	f10b 0701 	add.w	r7, fp, #1
 8017fa4:	6087      	str	r7, [r0, #8]
 8017fa6:	6907      	ldr	r7, [r0, #16]
 8017fa8:	459e      	cmp	lr, r3
 8017faa:	803b      	strh	r3, [r7, #0]
 8017fac:	807a      	strh	r2, [r7, #2]
 8017fae:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017fb2:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017fb6:	d1c5      	bne.n	8017f44 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8017fb8:	9b04      	ldr	r3, [sp, #16]
 8017fba:	1b9e      	subs	r6, r3, r6
 8017fbc:	6903      	ldr	r3, [r0, #16]
 8017fbe:	889a      	ldrh	r2, [r3, #4]
 8017fc0:	4432      	add	r2, r6
 8017fc2:	809a      	strh	r2, [r3, #4]
 8017fc4:	9a02      	ldr	r2, [sp, #8]
 8017fc6:	f102 0c20 	add.w	ip, r2, #32
 8017fca:	9a01      	ldr	r2, [sp, #4]
 8017fcc:	ebac 0c02 	sub.w	ip, ip, r2
 8017fd0:	88da      	ldrh	r2, [r3, #6]
 8017fd2:	fb06 260c 	mla	r6, r6, ip, r2
 8017fd6:	80de      	strh	r6, [r3, #6]
 8017fd8:	f7ff bba9 	b.w	801772e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08017fdc <_ZN8touchgfx7Outline6lineToEii>:
 8017fdc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fe0:	079b      	lsls	r3, r3, #30
 8017fe2:	460e      	mov	r6, r1
 8017fe4:	4615      	mov	r5, r2
 8017fe6:	d511      	bpl.n	801800c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017fe8:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8017fec:	ea86 0701 	eor.w	r7, r6, r1
 8017ff0:	ea85 0302 	eor.w	r3, r5, r2
 8017ff4:	433b      	orrs	r3, r7
 8017ff6:	d009      	beq.n	801800c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017ff8:	4633      	mov	r3, r6
 8017ffa:	9500      	str	r5, [sp, #0]
 8017ffc:	f7ff fb3e 	bl	801767c <_ZN8touchgfx7Outline10renderLineEiiii>
 8018000:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018002:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8018006:	f043 0301 	orr.w	r3, r3, #1
 801800a:	6243      	str	r3, [r0, #36]	@ 0x24
 801800c:	b003      	add	sp, #12
 801800e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018010 <_ZN8touchgfx7Outline6moveToEii>:
 8018010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018012:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018014:	4615      	mov	r5, r2
 8018016:	079a      	lsls	r2, r3, #30
 8018018:	4604      	mov	r4, r0
 801801a:	460e      	mov	r6, r1
 801801c:	d401      	bmi.n	8018022 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801801e:	f7ff faf9 	bl	8017614 <_ZN8touchgfx7Outline5resetEv>
 8018022:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018024:	07db      	lsls	r3, r3, #31
 8018026:	d504      	bpl.n	8018032 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8018028:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801802c:	4620      	mov	r0, r4
 801802e:	f7ff ffd5 	bl	8017fdc <_ZN8touchgfx7Outline6lineToEii>
 8018032:	6923      	ldr	r3, [r4, #16]
 8018034:	1170      	asrs	r0, r6, #5
 8018036:	f9b3 2000 	ldrsh.w	r2, [r3]
 801803a:	1169      	asrs	r1, r5, #5
 801803c:	4290      	cmp	r0, r2
 801803e:	d103      	bne.n	8018048 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8018040:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018044:	4291      	cmp	r1, r2
 8018046:	d01a      	beq.n	801807e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8018048:	88df      	ldrh	r7, [r3, #6]
 801804a:	889a      	ldrh	r2, [r3, #4]
 801804c:	433a      	orrs	r2, r7
 801804e:	d010      	beq.n	8018072 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018050:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018054:	2a00      	cmp	r2, #0
 8018056:	db0c      	blt.n	8018072 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018058:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801805a:	42ba      	cmp	r2, r7
 801805c:	da09      	bge.n	8018072 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801805e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8018062:	42ba      	cmp	r2, r7
 8018064:	bf38      	it	cc
 8018066:	3308      	addcc	r3, #8
 8018068:	f102 0201 	add.w	r2, r2, #1
 801806c:	bf38      	it	cc
 801806e:	6123      	strcc	r3, [r4, #16]
 8018070:	60a2      	str	r2, [r4, #8]
 8018072:	2200      	movs	r2, #0
 8018074:	6923      	ldr	r3, [r4, #16]
 8018076:	8018      	strh	r0, [r3, #0]
 8018078:	8059      	strh	r1, [r3, #2]
 801807a:	809a      	strh	r2, [r3, #4]
 801807c:	80da      	strh	r2, [r3, #6]
 801807e:	6166      	str	r6, [r4, #20]
 8018080:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018084:	6225      	str	r5, [r4, #32]
 8018086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018088 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801808c:	b0d0      	sub	sp, #320	@ 0x140
 801808e:	466c      	mov	r4, sp
 8018090:	4627      	mov	r7, r4
 8018092:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018096:	1a0d      	subs	r5, r1, r0
 8018098:	2d48      	cmp	r5, #72	@ 0x48
 801809a:	f100 0308 	add.w	r3, r0, #8
 801809e:	f340 80d5 	ble.w	801824c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80180a2:	112d      	asrs	r5, r5, #4
 80180a4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80180a8:	6816      	ldr	r6, [r2, #0]
 80180aa:	f9b0 9000 	ldrsh.w	r9, [r0]
 80180ae:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80180b2:	6006      	str	r6, [r0, #0]
 80180b4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80180b8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80180bc:	6856      	ldr	r6, [r2, #4]
 80180be:	6046      	str	r6, [r0, #4]
 80180c0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80180c4:	f8a2 8002 	strh.w	r8, [r2, #2]
 80180c8:	f8a2 e004 	strh.w	lr, [r2, #4]
 80180cc:	f8a2 c006 	strh.w	ip, [r2, #6]
 80180d0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80180d4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80180d8:	f1a1 0208 	sub.w	r2, r1, #8
 80180dc:	4565      	cmp	r5, ip
 80180de:	db06      	blt.n	80180ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80180e0:	d119      	bne.n	8018116 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80180e2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80180e6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80180ea:	42ae      	cmp	r6, r5
 80180ec:	dd13      	ble.n	8018116 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80180ee:	460e      	mov	r6, r1
 80180f0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80180f4:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80180f8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80180fc:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8018100:	601d      	str	r5, [r3, #0]
 8018102:	6875      	ldr	r5, [r6, #4]
 8018104:	605d      	str	r5, [r3, #4]
 8018106:	f821 9c08 	strh.w	r9, [r1, #-8]
 801810a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801810e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018112:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018116:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801811a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801811e:	42ae      	cmp	r6, r5
 8018120:	db06      	blt.n	8018130 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8018122:	d116      	bne.n	8018152 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018124:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018128:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801812c:	45ac      	cmp	ip, r5
 801812e:	da10      	bge.n	8018152 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018130:	681d      	ldr	r5, [r3, #0]
 8018132:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018136:	6005      	str	r5, [r0, #0]
 8018138:	685d      	ldr	r5, [r3, #4]
 801813a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801813e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018142:	f8a0 8008 	strh.w	r8, [r0, #8]
 8018146:	6045      	str	r5, [r0, #4]
 8018148:	8146      	strh	r6, [r0, #10]
 801814a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801814e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018152:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018156:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801815a:	4565      	cmp	r5, ip
 801815c:	db06      	blt.n	801816c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801815e:	d119      	bne.n	8018194 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018160:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018164:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018168:	42ae      	cmp	r6, r5
 801816a:	da13      	bge.n	8018194 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801816c:	460e      	mov	r6, r1
 801816e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018172:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018176:	6005      	str	r5, [r0, #0]
 8018178:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801817c:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8018180:	6875      	ldr	r5, [r6, #4]
 8018182:	6045      	str	r5, [r0, #4]
 8018184:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018188:	f821 cc06 	strh.w	ip, [r1, #-6]
 801818c:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018190:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018194:	3308      	adds	r3, #8
 8018196:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801819a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801819e:	45e6      	cmp	lr, ip
 80181a0:	dbf8      	blt.n	8018194 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80181a2:	d105      	bne.n	80181b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80181a4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80181a8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80181ac:	42ae      	cmp	r6, r5
 80181ae:	dbf1      	blt.n	8018194 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80181b0:	4615      	mov	r5, r2
 80181b2:	3a08      	subs	r2, #8
 80181b4:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80181b8:	45b4      	cmp	ip, r6
 80181ba:	dbf9      	blt.n	80181b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80181bc:	d105      	bne.n	80181ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80181be:	f9b0 8000 	ldrsh.w	r8, [r0]
 80181c2:	f9b2 6000 	ldrsh.w	r6, [r2]
 80181c6:	45b0      	cmp	r8, r6
 80181c8:	dbf2      	blt.n	80181b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80181ca:	4293      	cmp	r3, r2
 80181cc:	f1a5 0608 	sub.w	r6, r5, #8
 80181d0:	d816      	bhi.n	8018200 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80181d2:	f8d6 c000 	ldr.w	ip, [r6]
 80181d6:	f9b3 a000 	ldrsh.w	sl, [r3]
 80181da:	f8c3 c000 	str.w	ip, [r3]
 80181de:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80181e2:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80181e6:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80181ea:	f8c3 c004 	str.w	ip, [r3, #4]
 80181ee:	f825 ac08 	strh.w	sl, [r5, #-8]
 80181f2:	f825 ec06 	strh.w	lr, [r5, #-6]
 80181f6:	f825 9c04 	strh.w	r9, [r5, #-4]
 80181fa:	f825 8c02 	strh.w	r8, [r5, #-2]
 80181fe:	e7c9      	b.n	8018194 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018200:	f8d6 e000 	ldr.w	lr, [r6]
 8018204:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018208:	f8c0 e000 	str.w	lr, [r0]
 801820c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8018210:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8018214:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8018218:	1a16      	subs	r6, r2, r0
 801821a:	f8c0 e004 	str.w	lr, [r0, #4]
 801821e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018222:	f825 cc06 	strh.w	ip, [r5, #-6]
 8018226:	f825 9c04 	strh.w	r9, [r5, #-4]
 801822a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801822e:	1acd      	subs	r5, r1, r3
 8018230:	10ed      	asrs	r5, r5, #3
 8018232:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8018236:	bfb5      	itete	lt
 8018238:	e9c4 0200 	strdlt	r0, r2, [r4]
 801823c:	e9c4 3100 	strdge	r3, r1, [r4]
 8018240:	460a      	movlt	r2, r1
 8018242:	4603      	movge	r3, r0
 8018244:	3408      	adds	r4, #8
 8018246:	4618      	mov	r0, r3
 8018248:	4611      	mov	r1, r2
 801824a:	e724      	b.n	8018096 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801824c:	4299      	cmp	r1, r3
 801824e:	d928      	bls.n	80182a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8018250:	f1a3 0210 	sub.w	r2, r3, #16
 8018254:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8018258:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801825c:	45ac      	cmp	ip, r5
 801825e:	db06      	blt.n	801826e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8018260:	d11d      	bne.n	801829e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8018262:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8018266:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801826a:	42ae      	cmp	r6, r5
 801826c:	da17      	bge.n	801829e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801826e:	4615      	mov	r5, r2
 8018270:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018274:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018278:	6116      	str	r6, [r2, #16]
 801827a:	686e      	ldr	r6, [r5, #4]
 801827c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8018280:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8018284:	42a8      	cmp	r0, r5
 8018286:	6156      	str	r6, [r2, #20]
 8018288:	f8a2 9008 	strh.w	r9, [r2, #8]
 801828c:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8018290:	f8a2 800c 	strh.w	r8, [r2, #12]
 8018294:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8018298:	f1a2 0208 	sub.w	r2, r2, #8
 801829c:	d1da      	bne.n	8018254 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801829e:	3308      	adds	r3, #8
 80182a0:	e7d4      	b.n	801824c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80182a2:	42bc      	cmp	r4, r7
 80182a4:	d903      	bls.n	80182ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 80182a6:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80182aa:	3c08      	subs	r4, #8
 80182ac:	e6f3      	b.n	8018096 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80182ae:	b050      	add	sp, #320	@ 0x140
 80182b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080182b4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80182b4:	b510      	push	{r4, lr}
 80182b6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80182b8:	4604      	mov	r4, r0
 80182ba:	07da      	lsls	r2, r3, #31
 80182bc:	d507      	bpl.n	80182ce <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80182be:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80182c2:	f7ff fe8b 	bl	8017fdc <_ZN8touchgfx7Outline6lineToEii>
 80182c6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80182c8:	f023 0301 	bic.w	r3, r3, #1
 80182cc:	6243      	str	r3, [r0, #36]	@ 0x24
 80182ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80182d0:	079b      	lsls	r3, r3, #30
 80182d2:	d521      	bpl.n	8018318 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80182d4:	6923      	ldr	r3, [r4, #16]
 80182d6:	88d9      	ldrh	r1, [r3, #6]
 80182d8:	889a      	ldrh	r2, [r3, #4]
 80182da:	430a      	orrs	r2, r1
 80182dc:	d010      	beq.n	8018300 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80182de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80182e2:	2a00      	cmp	r2, #0
 80182e4:	db0c      	blt.n	8018300 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80182e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80182e8:	428a      	cmp	r2, r1
 80182ea:	da09      	bge.n	8018300 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80182ec:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80182f0:	4291      	cmp	r1, r2
 80182f2:	bf88      	it	hi
 80182f4:	3308      	addhi	r3, #8
 80182f6:	f102 0201 	add.w	r2, r2, #1
 80182fa:	bf88      	it	hi
 80182fc:	6123      	strhi	r3, [r4, #16]
 80182fe:	60a2      	str	r2, [r4, #8]
 8018300:	68a1      	ldr	r1, [r4, #8]
 8018302:	b129      	cbz	r1, 8018310 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018304:	6863      	ldr	r3, [r4, #4]
 8018306:	4299      	cmp	r1, r3
 8018308:	d802      	bhi.n	8018310 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801830a:	68e0      	ldr	r0, [r4, #12]
 801830c:	f7ff febc 	bl	8018088 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8018310:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018312:	f023 0302 	bic.w	r3, r3, #2
 8018316:	6263      	str	r3, [r4, #36]	@ 0x24
 8018318:	68e0      	ldr	r0, [r4, #12]
 801831a:	bd10      	pop	{r4, pc}

0801831c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801831c:	4b02      	ldr	r3, [pc, #8]	@ (8018328 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801831e:	6018      	str	r0, [r3, #0]
 8018320:	4b02      	ldr	r3, [pc, #8]	@ (801832c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8018322:	6019      	str	r1, [r3, #0]
 8018324:	4770      	bx	lr
 8018326:	bf00      	nop
 8018328:	20011f34 	.word	0x20011f34
 801832c:	20011f38 	.word	0x20011f38

08018330 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8018330:	2300      	movs	r3, #0
 8018332:	4a02      	ldr	r2, [pc, #8]	@ (801833c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8018334:	6013      	str	r3, [r2, #0]
 8018336:	4a02      	ldr	r2, [pc, #8]	@ (8018340 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8018338:	6013      	str	r3, [r2, #0]
 801833a:	4770      	bx	lr
 801833c:	20011f34 	.word	0x20011f34
 8018340:	20011f38 	.word	0x20011f38

08018344 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018344:	4b01      	ldr	r3, [pc, #4]	@ (801834c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018346:	6818      	ldr	r0, [r3, #0]
 8018348:	4770      	bx	lr
 801834a:	bf00      	nop
 801834c:	20011f34 	.word	0x20011f34

08018350 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018350:	4b01      	ldr	r3, [pc, #4]	@ (8018358 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8018352:	6818      	ldr	r0, [r3, #0]
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop
 8018358:	20011f38 	.word	0x20011f38

0801835c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801835c:	b510      	push	{r4, lr}
 801835e:	6803      	ldr	r3, [r0, #0]
 8018360:	460c      	mov	r4, r1
 8018362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018364:	4798      	blx	r3
 8018366:	1b03      	subs	r3, r0, r4
 8018368:	4258      	negs	r0, r3
 801836a:	4158      	adcs	r0, r3
 801836c:	bd10      	pop	{r4, pc}
	...

08018370 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018370:	4b01      	ldr	r3, [pc, #4]	@ (8018378 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018372:	6019      	str	r1, [r3, #0]
 8018374:	4770      	bx	lr
 8018376:	bf00      	nop
 8018378:	20011f3c 	.word	0x20011f3c

0801837c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018380:	4696      	mov	lr, r2
 8018382:	4614      	mov	r4, r2
 8018384:	4605      	mov	r5, r0
 8018386:	460e      	mov	r6, r1
 8018388:	461f      	mov	r7, r3
 801838a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801838e:	b097      	sub	sp, #92	@ 0x5c
 8018390:	f10d 0c1c 	add.w	ip, sp, #28
 8018394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018398:	f8de 3000 	ldr.w	r3, [lr]
 801839c:	f104 0e14 	add.w	lr, r4, #20
 80183a0:	f8cc 3000 	str.w	r3, [ip]
 80183a4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80183a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80183ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183b0:	f8de 3000 	ldr.w	r3, [lr]
 80183b4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80183b8:	f8cc 3000 	str.w	r3, [ip]
 80183bc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80183c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80183c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183c8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80183cc:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80183d0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80183d4:	f8de 3000 	ldr.w	r3, [lr]
 80183d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80183da:	f8cc 3000 	str.w	r3, [ip]
 80183de:	9201      	str	r2, [sp, #4]
 80183e0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80183e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80183e6:	682b      	ldr	r3, [r5, #0]
 80183e8:	9200      	str	r2, [sp, #0]
 80183ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80183ee:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80183f2:	aa07      	add	r2, sp, #28
 80183f4:	463b      	mov	r3, r7
 80183f6:	4631      	mov	r1, r6
 80183f8:	4628      	mov	r0, r5
 80183fa:	47d8      	blx	fp
 80183fc:	46a6      	mov	lr, r4
 80183fe:	f10d 0c1c 	add.w	ip, sp, #28
 8018402:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018406:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801840a:	f8de 3000 	ldr.w	r3, [lr]
 801840e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8018412:	f8cc 3000 	str.w	r3, [ip]
 8018416:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801841a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801841e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018422:	f8de 3000 	ldr.w	r3, [lr]
 8018426:	343c      	adds	r4, #60	@ 0x3c
 8018428:	f8cc 3000 	str.w	r3, [ip]
 801842c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8018430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018432:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018436:	6823      	ldr	r3, [r4, #0]
 8018438:	4631      	mov	r1, r6
 801843a:	f8cc 3000 	str.w	r3, [ip]
 801843e:	682b      	ldr	r3, [r5, #0]
 8018440:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018444:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018446:	f8cd 8008 	str.w	r8, [sp, #8]
 801844a:	9201      	str	r2, [sp, #4]
 801844c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801844e:	4628      	mov	r0, r5
 8018450:	9200      	str	r2, [sp, #0]
 8018452:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8018454:	aa07      	add	r2, sp, #28
 8018456:	463b      	mov	r3, r7
 8018458:	47a0      	blx	r4
 801845a:	b017      	add	sp, #92	@ 0x5c
 801845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018460 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018460:	2000      	movs	r0, #0
 8018462:	4770      	bx	lr

08018464 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018468:	b08d      	sub	sp, #52	@ 0x34
 801846a:	4688      	mov	r8, r1
 801846c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801846e:	f8d3 c000 	ldr.w	ip, [r3]
 8018472:	680f      	ldr	r7, [r1, #0]
 8018474:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8018478:	eba7 070c 	sub.w	r7, r7, ip
 801847c:	42bc      	cmp	r4, r7
 801847e:	bfa8      	it	ge
 8018480:	463c      	movge	r4, r7
 8018482:	ee07 4a90 	vmov	s15, r4
 8018486:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801848a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801848e:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8018492:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8018496:	edd3 6a07 	vldr	s13, [r3, #28]
 801849a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801849e:	ee65 4a24 	vmul.f32	s9, s10, s9
 80184a2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80184a6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80184aa:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80184ae:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80184b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80184b6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80184b8:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80184bc:	f9b1 9000 	ldrsh.w	r9, [r1]
 80184c0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80184c4:	eb09 0e0c 	add.w	lr, r9, ip
 80184c8:	4571      	cmp	r1, lr
 80184ca:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80184ce:	ee32 1a05 	vadd.f32	s2, s4, s10
 80184d2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80184d6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80184da:	ee22 2a07 	vmul.f32	s4, s4, s14
 80184de:	f340 808c 	ble.w	80185fa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80184e2:	eba1 060e 	sub.w	r6, r1, lr
 80184e6:	fb96 f5f4 	sdiv	r5, r6, r4
 80184ea:	ee07 5a10 	vmov	s14, r5
 80184ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80184f2:	2d00      	cmp	r5, #0
 80184f4:	fb04 6615 	mls	r6, r4, r5, r6
 80184f8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80184fc:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018500:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018504:	dd12      	ble.n	801852c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8018506:	ee70 6a44 	vsub.f32	s13, s0, s8
 801850a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018512:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018516:	bf14      	ite	ne
 8018518:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801851c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8018520:	ee31 2a45 	vsub.f32	s4, s2, s10
 8018524:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018528:	ee22 2a07 	vmul.f32	s4, s4, s14
 801852c:	fb05 f204 	mul.w	r2, r5, r4
 8018530:	1abf      	subs	r7, r7, r2
 8018532:	4494      	add	ip, r2
 8018534:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018538:	4411      	add	r1, r2
 801853a:	eb09 020c 	add.w	r2, r9, ip
 801853e:	443a      	add	r2, r7
 8018540:	b209      	sxth	r1, r1
 8018542:	428a      	cmp	r2, r1
 8018544:	bfc4      	itt	gt
 8018546:	eba1 0209 	subgt.w	r2, r1, r9
 801854a:	eba2 070c 	subgt.w	r7, r2, ip
 801854e:	2f00      	cmp	r7, #0
 8018550:	dd50      	ble.n	80185f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8018552:	fb97 f1f4 	sdiv	r1, r7, r4
 8018556:	fb04 7211 	mls	r2, r4, r1, r7
 801855a:	b90a      	cbnz	r2, 8018560 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801855c:	4622      	mov	r2, r4
 801855e:	3901      	subs	r1, #1
 8018560:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018564:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018568:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801856c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018570:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018574:	ee17 7a90 	vmov	r7, s15
 8018578:	ee73 7a42 	vsub.f32	s15, s6, s4
 801857c:	eef0 6a42 	vmov.f32	s13, s4
 8018580:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018584:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018588:	ee17 ca90 	vmov	ip, s15
 801858c:	eeb0 7a61 	vmov.f32	s14, s3
 8018590:	6840      	ldr	r0, [r0, #4]
 8018592:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8018596:	f8d0 a000 	ldr.w	sl, [r0]
 801859a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801859c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801859e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80185a2:	9008      	str	r0, [sp, #32]
 80185a4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80185a6:	695b      	ldr	r3, [r3, #20]
 80185a8:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80185ac:	fb9c fcf4 	sdiv	ip, ip, r4
 80185b0:	445b      	add	r3, fp
 80185b2:	9307      	str	r3, [sp, #28]
 80185b4:	ee16 3a90 	vmov	r3, s13
 80185b8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80185bc:	fb0c 3306 	mla	r3, ip, r6, r3
 80185c0:	fb97 f7f4 	sdiv	r7, r7, r4
 80185c4:	9302      	str	r3, [sp, #8]
 80185c6:	ee17 3a10 	vmov	r3, s14
 80185ca:	2900      	cmp	r1, #0
 80185cc:	bfcc      	ite	gt
 80185ce:	46a1      	movgt	r9, r4
 80185d0:	4691      	movle	r9, r2
 80185d2:	44b6      	add	lr, r6
 80185d4:	fb04 e505 	mla	r5, r4, r5, lr
 80185d8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80185dc:	fb07 3706 	mla	r7, r7, r6, r3
 80185e0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80185e4:	e9cd 4700 	strd	r4, r7, [sp]
 80185e8:	eba9 0306 	sub.w	r3, r9, r6
 80185ec:	f8da 4008 	ldr.w	r4, [sl, #8]
 80185f0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80185f2:	47a0      	blx	r4
 80185f4:	b00d      	add	sp, #52	@ 0x34
 80185f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185fa:	2500      	movs	r5, #0
 80185fc:	462e      	mov	r6, r5
 80185fe:	e799      	b.n	8018534 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018604:	461d      	mov	r5, r3
 8018606:	b0db      	sub	sp, #364	@ 0x16c
 8018608:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801860c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801860e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018610:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8018614:	9009      	str	r0, [sp, #36]	@ 0x24
 8018616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018618:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801861c:	4614      	mov	r4, r2
 801861e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018620:	6803      	ldr	r3, [r0, #0]
 8018622:	4629      	mov	r1, r5
 8018624:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8018626:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801862a:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801862e:	47b8      	blx	r7
 8018630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018632:	6058      	str	r0, [r3, #4]
 8018634:	2800      	cmp	r0, #0
 8018636:	f000 83a1 	beq.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801863a:	ed94 7a02 	vldr	s14, [r4, #8]
 801863e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8018642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018646:	682b      	ldr	r3, [r5, #0]
 8018648:	9314      	str	r3, [sp, #80]	@ 0x50
 801864a:	686b      	ldr	r3, [r5, #4]
 801864c:	9315      	str	r3, [sp, #84]	@ 0x54
 801864e:	4bc1      	ldr	r3, [pc, #772]	@ (8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018650:	7819      	ldrb	r1, [r3, #0]
 8018652:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018656:	2900      	cmp	r1, #0
 8018658:	bf16      	itet	ne
 801865a:	4619      	movne	r1, r3
 801865c:	4611      	moveq	r1, r2
 801865e:	4613      	movne	r3, r2
 8018660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018664:	9116      	str	r1, [sp, #88]	@ 0x58
 8018666:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801866a:	f240 8387 	bls.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801866e:	ed94 7a07 	vldr	s14, [r4, #28]
 8018672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801867a:	f240 837f 	bls.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801867e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8018682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801868a:	f240 8377 	bls.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801868e:	6822      	ldr	r2, [r4, #0]
 8018690:	4bb1      	ldr	r3, [pc, #708]	@ (8018958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8018692:	429a      	cmp	r2, r3
 8018694:	f2c0 8372 	blt.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018698:	49b0      	ldr	r1, [pc, #704]	@ (801895c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801869a:	6963      	ldr	r3, [r4, #20]
 801869c:	428a      	cmp	r2, r1
 801869e:	f300 836d 	bgt.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80186a2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80186a6:	48ae      	ldr	r0, [pc, #696]	@ (8018960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80186a8:	33ff      	adds	r3, #255	@ 0xff
 80186aa:	4283      	cmp	r3, r0
 80186ac:	f200 8366 	bhi.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80186b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80186b2:	4dac      	ldr	r5, [pc, #688]	@ (8018964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80186b4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80186b8:	33ff      	adds	r3, #255	@ 0xff
 80186ba:	42ab      	cmp	r3, r5
 80186bc:	f200 835e 	bhi.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80186c0:	6862      	ldr	r2, [r4, #4]
 80186c2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80186c6:	33ff      	adds	r3, #255	@ 0xff
 80186c8:	4283      	cmp	r3, r0
 80186ca:	f200 8357 	bhi.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80186ce:	69a1      	ldr	r1, [r4, #24]
 80186d0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80186d4:	33ff      	adds	r3, #255	@ 0xff
 80186d6:	4283      	cmp	r3, r0
 80186d8:	f200 8350 	bhi.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80186dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80186de:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80186e2:	30ff      	adds	r0, #255	@ 0xff
 80186e4:	42a8      	cmp	r0, r5
 80186e6:	f200 8349 	bhi.w	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80186ea:	428a      	cmp	r2, r1
 80186ec:	f280 8110 	bge.w	8018910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80186f0:	429a      	cmp	r2, r3
 80186f2:	f300 8119 	bgt.w	8018928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80186f6:	4299      	cmp	r1, r3
 80186f8:	f280 811d 	bge.w	8018936 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80186fc:	2502      	movs	r5, #2
 80186fe:	2701      	movs	r7, #1
 8018700:	46a9      	mov	r9, r5
 8018702:	46b8      	mov	r8, r7
 8018704:	f04f 0a00 	mov.w	sl, #0
 8018708:	4621      	mov	r1, r4
 801870a:	a849      	add	r0, sp, #292	@ 0x124
 801870c:	f003 fdc0 	bl	801c290 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018710:	4622      	mov	r2, r4
 8018712:	4653      	mov	r3, sl
 8018714:	a949      	add	r1, sp, #292	@ 0x124
 8018716:	f8cd 9000 	str.w	r9, [sp]
 801871a:	a819      	add	r0, sp, #100	@ 0x64
 801871c:	f003 feea 	bl	801c4f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018720:	4622      	mov	r2, r4
 8018722:	4653      	mov	r3, sl
 8018724:	a949      	add	r1, sp, #292	@ 0x124
 8018726:	f8cd 8000 	str.w	r8, [sp]
 801872a:	a829      	add	r0, sp, #164	@ 0xa4
 801872c:	f003 fee2 	bl	801c4f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018730:	4643      	mov	r3, r8
 8018732:	4622      	mov	r2, r4
 8018734:	a949      	add	r1, sp, #292	@ 0x124
 8018736:	f8cd 9000 	str.w	r9, [sp]
 801873a:	a839      	add	r0, sp, #228	@ 0xe4
 801873c:	f003 feda 	bl	801c4f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018740:	42af      	cmp	r7, r5
 8018742:	bfb5      	itete	lt
 8018744:	2300      	movlt	r3, #0
 8018746:	2301      	movge	r3, #1
 8018748:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801874a:	930e      	strge	r3, [sp, #56]	@ 0x38
 801874c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801874e:	af12      	add	r7, sp, #72	@ 0x48
 8018750:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018754:	bfb9      	ittee	lt
 8018756:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8018758:	ac19      	addlt	r4, sp, #100	@ 0x64
 801875a:	ad19      	addge	r5, sp, #100	@ 0x64
 801875c:	ac29      	addge	r4, sp, #164	@ 0xa4
 801875e:	e887 0003 	stmia.w	r7, {r0, r1}
 8018762:	b928      	cbnz	r0, 8018770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018764:	4b80      	ldr	r3, [pc, #512]	@ (8018968 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018766:	6818      	ldr	r0, [r3, #0]
 8018768:	6803      	ldr	r3, [r0, #0]
 801876a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801876c:	4798      	blx	r3
 801876e:	6038      	str	r0, [r7, #0]
 8018770:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018772:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018776:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801877a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801877c:	930c      	str	r3, [sp, #48]	@ 0x30
 801877e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018780:	6963      	ldr	r3, [r4, #20]
 8018782:	440b      	add	r3, r1
 8018784:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018788:	4408      	add	r0, r1
 801878a:	b200      	sxth	r0, r0
 801878c:	4283      	cmp	r3, r0
 801878e:	900d      	str	r0, [sp, #52]	@ 0x34
 8018790:	f280 80dd 	bge.w	801894e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018794:	428b      	cmp	r3, r1
 8018796:	da08      	bge.n	80187aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018798:	2a00      	cmp	r2, #0
 801879a:	dd06      	ble.n	80187aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801879c:	1acb      	subs	r3, r1, r3
 801879e:	429a      	cmp	r2, r3
 80187a0:	f2c0 80e4 	blt.w	801896c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	f300 80e2 	bgt.w	801896e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80187aa:	6967      	ldr	r7, [r4, #20]
 80187ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187ae:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80187b2:	443b      	add	r3, r7
 80187b4:	461f      	mov	r7, r3
 80187b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187b8:	1bdf      	subs	r7, r3, r7
 80187ba:	4297      	cmp	r7, r2
 80187bc:	bfa8      	it	ge
 80187be:	4617      	movge	r7, r2
 80187c0:	2f00      	cmp	r7, #0
 80187c2:	f340 8166 	ble.w	8018a92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80187c6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80187c8:	6829      	ldr	r1, [r5, #0]
 80187ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187ce:	f9bb 3000 	ldrsh.w	r3, [fp]
 80187d2:	4411      	add	r1, r2
 80187d4:	4299      	cmp	r1, r3
 80187d6:	6820      	ldr	r0, [r4, #0]
 80187d8:	dd1a      	ble.n	8018810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80187da:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80187de:	4402      	add	r2, r0
 80187e0:	440b      	add	r3, r1
 80187e2:	b21b      	sxth	r3, r3
 80187e4:	429a      	cmp	r2, r3
 80187e6:	dc13      	bgt.n	8018810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80187e8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80187ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187ec:	a912      	add	r1, sp, #72	@ 0x48
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	9206      	str	r2, [sp, #24]
 80187f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80187f4:	9500      	str	r5, [sp, #0]
 80187f6:	9205      	str	r2, [sp, #20]
 80187f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80187fc:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018800:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018802:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018806:	aa49      	add	r2, sp, #292	@ 0x124
 8018808:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801880c:	4623      	mov	r3, r4
 801880e:	47c8      	blx	r9
 8018810:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018814:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018818:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801881c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018824:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018828:	ed94 6a08 	vldr	s12, [r4, #32]
 801882c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018830:	edd4 6a07 	vldr	s13, [r4, #28]
 8018834:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018838:	441a      	add	r2, r3
 801883a:	6963      	ldr	r3, [r4, #20]
 801883c:	68a1      	ldr	r1, [r4, #8]
 801883e:	3301      	adds	r3, #1
 8018840:	6163      	str	r3, [r4, #20]
 8018842:	69a3      	ldr	r3, [r4, #24]
 8018844:	6022      	str	r2, [r4, #0]
 8018846:	3b01      	subs	r3, #1
 8018848:	61a3      	str	r3, [r4, #24]
 801884a:	6923      	ldr	r3, [r4, #16]
 801884c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018850:	440b      	add	r3, r1
 8018852:	68e1      	ldr	r1, [r4, #12]
 8018854:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018858:	428b      	cmp	r3, r1
 801885a:	edc4 6a07 	vstr	s13, [r4, #28]
 801885e:	6123      	str	r3, [r4, #16]
 8018860:	db15      	blt.n	801888e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018862:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018866:	ee76 6a26 	vadd.f32	s13, s12, s13
 801886a:	edc4 6a07 	vstr	s13, [r4, #28]
 801886e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018872:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018876:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801887a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801887e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018882:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018886:	3201      	adds	r2, #1
 8018888:	1a5b      	subs	r3, r3, r1
 801888a:	6022      	str	r2, [r4, #0]
 801888c:	6123      	str	r3, [r4, #16]
 801888e:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018892:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018896:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801889a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801889e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80188a2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80188a6:	ed95 6a08 	vldr	s12, [r5, #32]
 80188aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80188ae:	edd5 6a07 	vldr	s13, [r5, #28]
 80188b2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80188b6:	441a      	add	r2, r3
 80188b8:	696b      	ldr	r3, [r5, #20]
 80188ba:	68a9      	ldr	r1, [r5, #8]
 80188bc:	3301      	adds	r3, #1
 80188be:	616b      	str	r3, [r5, #20]
 80188c0:	69ab      	ldr	r3, [r5, #24]
 80188c2:	602a      	str	r2, [r5, #0]
 80188c4:	3b01      	subs	r3, #1
 80188c6:	61ab      	str	r3, [r5, #24]
 80188c8:	692b      	ldr	r3, [r5, #16]
 80188ca:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80188ce:	440b      	add	r3, r1
 80188d0:	68e9      	ldr	r1, [r5, #12]
 80188d2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80188d6:	428b      	cmp	r3, r1
 80188d8:	edc5 6a07 	vstr	s13, [r5, #28]
 80188dc:	612b      	str	r3, [r5, #16]
 80188de:	db15      	blt.n	801890c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80188e0:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80188e4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80188e8:	edc5 6a07 	vstr	s13, [r5, #28]
 80188ec:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80188f0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80188f4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80188f8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80188fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018900:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018904:	3201      	adds	r2, #1
 8018906:	1a5b      	subs	r3, r3, r1
 8018908:	602a      	str	r2, [r5, #0]
 801890a:	612b      	str	r3, [r5, #16]
 801890c:	3f01      	subs	r7, #1
 801890e:	e757      	b.n	80187c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018910:	4299      	cmp	r1, r3
 8018912:	dc13      	bgt.n	801893c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018914:	429a      	cmp	r2, r3
 8018916:	da14      	bge.n	8018942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018918:	2502      	movs	r5, #2
 801891a:	2703      	movs	r7, #3
 801891c:	46a9      	mov	r9, r5
 801891e:	f04f 0800 	mov.w	r8, #0
 8018922:	f04f 0a01 	mov.w	sl, #1
 8018926:	e6ef      	b.n	8018708 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018928:	2501      	movs	r5, #1
 801892a:	2700      	movs	r7, #0
 801892c:	46a9      	mov	r9, r5
 801892e:	46b8      	mov	r8, r7
 8018930:	f04f 0a02 	mov.w	sl, #2
 8018934:	e6e8      	b.n	8018708 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018936:	2501      	movs	r5, #1
 8018938:	2702      	movs	r7, #2
 801893a:	e6e1      	b.n	8018700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801893c:	2500      	movs	r5, #0
 801893e:	2701      	movs	r7, #1
 8018940:	e7f4      	b.n	801892c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018942:	2702      	movs	r7, #2
 8018944:	2503      	movs	r5, #3
 8018946:	f04f 0900 	mov.w	r9, #0
 801894a:	46b8      	mov	r8, r7
 801894c:	e7e9      	b.n	8018922 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801894e:	4613      	mov	r3, r2
 8018950:	e728      	b.n	80187a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018952:	bf00      	nop
 8018954:	20011f24 	.word	0x20011f24
 8018958:	fffd8f01 	.word	0xfffd8f01
 801895c:	00027100 	.word	0x00027100
 8018960:	0004e1ff 	.word	0x0004e1ff
 8018964:	0004e1fe 	.word	0x0004e1fe
 8018968:	20011f2c 	.word	0x20011f2c
 801896c:	4613      	mov	r3, r2
 801896e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8018972:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8018976:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801897a:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801897e:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8018982:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8018986:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801898a:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801898e:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8018992:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8018996:	469e      	mov	lr, r3
 8018998:	469c      	mov	ip, r3
 801899a:	f04f 0900 	mov.w	r9, #0
 801899e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80189a0:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80189a2:	9111      	str	r1, [sp, #68]	@ 0x44
 80189a4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80189a8:	f1bc 0f00 	cmp.w	ip, #0
 80189ac:	d147      	bne.n	8018a3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80189ae:	eb03 0c07 	add.w	ip, r3, r7
 80189b2:	1ad7      	subs	r7, r2, r3
 80189b4:	f1b9 0f00 	cmp.w	r9, #0
 80189b8:	d009      	beq.n	80189ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80189ba:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80189be:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80189c2:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80189c6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80189ca:	9029      	str	r0, [sp, #164]	@ 0xa4
 80189cc:	912d      	str	r1, [sp, #180]	@ 0xb4
 80189ce:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80189d2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80189d6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80189da:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80189de:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80189e2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80189e6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80189ea:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80189ee:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80189f2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80189f6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80189fa:	f04f 0800 	mov.w	r8, #0
 80189fe:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018a00:	9111      	str	r1, [sp, #68]	@ 0x44
 8018a02:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018a06:	f1be 0f00 	cmp.w	lr, #0
 8018a0a:	d031      	beq.n	8018a70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018a0c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018a0e:	4450      	add	r0, sl
 8018a10:	4431      	add	r1, r6
 8018a12:	4549      	cmp	r1, r9
 8018a14:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018a18:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018a1c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018a20:	db08      	blt.n	8018a34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018a22:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018a26:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018a2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018a2e:	3001      	adds	r0, #1
 8018a30:	eba1 0109 	sub.w	r1, r1, r9
 8018a34:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018a38:	f04f 0801 	mov.w	r8, #1
 8018a3c:	e7e3      	b.n	8018a06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018a3e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018a40:	4450      	add	r0, sl
 8018a42:	4431      	add	r1, r6
 8018a44:	4541      	cmp	r1, r8
 8018a46:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018a4a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018a4e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018a52:	db08      	blt.n	8018a66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018a54:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018a58:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018a5c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018a60:	3001      	adds	r0, #1
 8018a62:	eba1 0108 	sub.w	r1, r1, r8
 8018a66:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a6a:	f04f 0901 	mov.w	r9, #1
 8018a6e:	e79b      	b.n	80189a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018a70:	449c      	add	ip, r3
 8018a72:	1aff      	subs	r7, r7, r3
 8018a74:	f1b8 0f00 	cmp.w	r8, #0
 8018a78:	d009      	beq.n	8018a8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018a7a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8018a7e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8018a82:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018a86:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018a8a:	9019      	str	r0, [sp, #100]	@ 0x64
 8018a8c:	911d      	str	r1, [sp, #116]	@ 0x74
 8018a8e:	1ad2      	subs	r2, r2, r3
 8018a90:	e68b      	b.n	80187aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a94:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	f000 80d1 	beq.w	8018c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018a9c:	ad19      	add	r5, sp, #100	@ 0x64
 8018a9e:	ac39      	add	r4, sp, #228	@ 0xe4
 8018aa0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018aa2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018aa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018aaa:	930c      	str	r3, [sp, #48]	@ 0x30
 8018aac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018aae:	6963      	ldr	r3, [r4, #20]
 8018ab0:	440b      	add	r3, r1
 8018ab2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018ab6:	4408      	add	r0, r1
 8018ab8:	b200      	sxth	r0, r0
 8018aba:	4283      	cmp	r3, r0
 8018abc:	900d      	str	r0, [sp, #52]	@ 0x34
 8018abe:	f280 80c1 	bge.w	8018c44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018ac2:	428b      	cmp	r3, r1
 8018ac4:	da08      	bge.n	8018ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018ac6:	2a00      	cmp	r2, #0
 8018ac8:	dd06      	ble.n	8018ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018aca:	1acb      	subs	r3, r1, r3
 8018acc:	429a      	cmp	r2, r3
 8018ace:	f2c0 80bb 	blt.w	8018c48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	f300 80b9 	bgt.w	8018c4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018ad8:	6967      	ldr	r7, [r4, #20]
 8018ada:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018adc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018ae0:	443b      	add	r3, r7
 8018ae2:	461f      	mov	r7, r3
 8018ae4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ae6:	1bdf      	subs	r7, r3, r7
 8018ae8:	4297      	cmp	r7, r2
 8018aea:	bfa8      	it	ge
 8018aec:	4617      	movge	r7, r2
 8018aee:	2f00      	cmp	r7, #0
 8018af0:	f340 813c 	ble.w	8018d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018af4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018af6:	6829      	ldr	r1, [r5, #0]
 8018af8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018afc:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018b00:	4411      	add	r1, r2
 8018b02:	4299      	cmp	r1, r3
 8018b04:	6820      	ldr	r0, [r4, #0]
 8018b06:	dd1a      	ble.n	8018b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018b08:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018b0c:	4402      	add	r2, r0
 8018b0e:	440b      	add	r3, r1
 8018b10:	b21b      	sxth	r3, r3
 8018b12:	429a      	cmp	r2, r3
 8018b14:	dc13      	bgt.n	8018b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018b16:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b1a:	a912      	add	r1, sp, #72	@ 0x48
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	9206      	str	r2, [sp, #24]
 8018b20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018b22:	9500      	str	r5, [sp, #0]
 8018b24:	9205      	str	r2, [sp, #20]
 8018b26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018b28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018b2a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018b2e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8018b30:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018b34:	aa49      	add	r2, sp, #292	@ 0x124
 8018b36:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018b3a:	4623      	mov	r3, r4
 8018b3c:	47c8      	blx	r9
 8018b3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018b42:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018b46:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018b4a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b52:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8018b56:	ed94 6a08 	vldr	s12, [r4, #32]
 8018b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b5e:	edd4 6a07 	vldr	s13, [r4, #28]
 8018b62:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b66:	441a      	add	r2, r3
 8018b68:	6963      	ldr	r3, [r4, #20]
 8018b6a:	68a1      	ldr	r1, [r4, #8]
 8018b6c:	3301      	adds	r3, #1
 8018b6e:	6163      	str	r3, [r4, #20]
 8018b70:	69a3      	ldr	r3, [r4, #24]
 8018b72:	6022      	str	r2, [r4, #0]
 8018b74:	3b01      	subs	r3, #1
 8018b76:	61a3      	str	r3, [r4, #24]
 8018b78:	6923      	ldr	r3, [r4, #16]
 8018b7a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018b7e:	440b      	add	r3, r1
 8018b80:	68e1      	ldr	r1, [r4, #12]
 8018b82:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018b86:	428b      	cmp	r3, r1
 8018b88:	edc4 6a07 	vstr	s13, [r4, #28]
 8018b8c:	6123      	str	r3, [r4, #16]
 8018b8e:	db15      	blt.n	8018bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018b90:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8018b94:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018b98:	edc4 6a07 	vstr	s13, [r4, #28]
 8018b9c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018ba0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018ba4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018ba8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018bb0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018bb4:	3201      	adds	r2, #1
 8018bb6:	1a5b      	subs	r3, r3, r1
 8018bb8:	6022      	str	r2, [r4, #0]
 8018bba:	6123      	str	r3, [r4, #16]
 8018bbc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018bc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018bc4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018bc8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018bd0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018bd4:	ed95 6a08 	vldr	s12, [r5, #32]
 8018bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018bdc:	edd5 6a07 	vldr	s13, [r5, #28]
 8018be0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018be4:	441a      	add	r2, r3
 8018be6:	696b      	ldr	r3, [r5, #20]
 8018be8:	68a9      	ldr	r1, [r5, #8]
 8018bea:	3301      	adds	r3, #1
 8018bec:	616b      	str	r3, [r5, #20]
 8018bee:	69ab      	ldr	r3, [r5, #24]
 8018bf0:	602a      	str	r2, [r5, #0]
 8018bf2:	3b01      	subs	r3, #1
 8018bf4:	61ab      	str	r3, [r5, #24]
 8018bf6:	692b      	ldr	r3, [r5, #16]
 8018bf8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018bfc:	440b      	add	r3, r1
 8018bfe:	68e9      	ldr	r1, [r5, #12]
 8018c00:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018c04:	428b      	cmp	r3, r1
 8018c06:	edc5 6a07 	vstr	s13, [r5, #28]
 8018c0a:	612b      	str	r3, [r5, #16]
 8018c0c:	db15      	blt.n	8018c3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018c0e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8018c12:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018c16:	edc5 6a07 	vstr	s13, [r5, #28]
 8018c1a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018c1e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018c22:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018c26:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8018c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c2e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018c32:	3201      	adds	r2, #1
 8018c34:	1a5b      	subs	r3, r3, r1
 8018c36:	602a      	str	r2, [r5, #0]
 8018c38:	612b      	str	r3, [r5, #16]
 8018c3a:	3f01      	subs	r7, #1
 8018c3c:	e757      	b.n	8018aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018c3e:	ad39      	add	r5, sp, #228	@ 0xe4
 8018c40:	ac19      	add	r4, sp, #100	@ 0x64
 8018c42:	e72d      	b.n	8018aa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018c44:	4613      	mov	r3, r2
 8018c46:	e744      	b.n	8018ad2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018c48:	4613      	mov	r3, r2
 8018c4a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8018c4e:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8018c52:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8018c56:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8018c5a:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8018c5e:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8018c62:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8018c66:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8018c6a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8018c6e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8018c72:	469e      	mov	lr, r3
 8018c74:	461f      	mov	r7, r3
 8018c76:	f04f 0900 	mov.w	r9, #0
 8018c7a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8018c7c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8018c80:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8018c82:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8018c86:	960e      	str	r6, [sp, #56]	@ 0x38
 8018c88:	2f00      	cmp	r7, #0
 8018c8a:	d146      	bne.n	8018d1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018c8c:	449c      	add	ip, r3
 8018c8e:	1ad7      	subs	r7, r2, r3
 8018c90:	f1b9 0f00 	cmp.w	r9, #0
 8018c94:	d009      	beq.n	8018caa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018c96:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8018c9a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8018c9e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8018ca2:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8018ca6:	9039      	str	r0, [sp, #228]	@ 0xe4
 8018ca8:	913d      	str	r1, [sp, #244]	@ 0xf4
 8018caa:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018cae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018cb2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8018cb6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018cba:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018cbe:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8018cc2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018cc6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018cca:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018cce:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8018cd2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018cd6:	f04f 0800 	mov.w	r8, #0
 8018cda:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018cdc:	910e      	str	r1, [sp, #56]	@ 0x38
 8018cde:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8018ce2:	f1be 0f00 	cmp.w	lr, #0
 8018ce6:	d030      	beq.n	8018d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018ce8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018cea:	4450      	add	r0, sl
 8018cec:	4431      	add	r1, r6
 8018cee:	4549      	cmp	r1, r9
 8018cf0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018cf4:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018cf8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018cfc:	db08      	blt.n	8018d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018cfe:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018d02:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018d06:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018d0a:	3001      	adds	r0, #1
 8018d0c:	eba1 0109 	sub.w	r1, r1, r9
 8018d10:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018d14:	f04f 0801 	mov.w	r8, #1
 8018d18:	e7e3      	b.n	8018ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018d1a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018d1c:	4450      	add	r0, sl
 8018d1e:	4431      	add	r1, r6
 8018d20:	4541      	cmp	r1, r8
 8018d22:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018d26:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018d2a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018d2e:	db08      	blt.n	8018d42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018d30:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018d34:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018d38:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018d3c:	3001      	adds	r0, #1
 8018d3e:	eba1 0108 	sub.w	r1, r1, r8
 8018d42:	3f01      	subs	r7, #1
 8018d44:	f04f 0901 	mov.w	r9, #1
 8018d48:	e79e      	b.n	8018c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018d4a:	449c      	add	ip, r3
 8018d4c:	1aff      	subs	r7, r7, r3
 8018d4e:	f1b8 0f00 	cmp.w	r8, #0
 8018d52:	d009      	beq.n	8018d68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018d54:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8018d58:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8018d5c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018d60:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018d64:	9019      	str	r0, [sp, #100]	@ 0x64
 8018d66:	911d      	str	r1, [sp, #116]	@ 0x74
 8018d68:	1ad2      	subs	r2, r2, r3
 8018d6a:	e6b5      	b.n	8018ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	b923      	cbnz	r3, 8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018d72:	4b04      	ldr	r3, [pc, #16]	@ (8018d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018d74:	6818      	ldr	r0, [r3, #0]
 8018d76:	6803      	ldr	r3, [r0, #0]
 8018d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d7a:	4798      	blx	r3
 8018d7c:	b05b      	add	sp, #364	@ 0x16c
 8018d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d82:	bf00      	nop
 8018d84:	20011f2c 	.word	0x20011f2c

08018d88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8018d88:	b570      	push	{r4, r5, r6, lr}
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	2500      	movs	r5, #0
 8018d8e:	9805      	ldr	r0, [sp, #20]
 8018d90:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8018d94:	6061      	str	r1, [r4, #4]
 8018d96:	8263      	strh	r3, [r4, #18]
 8018d98:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8018d9c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018da0:	8025      	strh	r5, [r4, #0]
 8018da2:	7221      	strb	r1, [r4, #8]
 8018da4:	7266      	strb	r6, [r4, #9]
 8018da6:	60e0      	str	r0, [r4, #12]
 8018da8:	8222      	strh	r2, [r4, #16]
 8018daa:	82a3      	strh	r3, [r4, #20]
 8018dac:	82e5      	strh	r5, [r4, #22]
 8018dae:	8325      	strh	r5, [r4, #24]
 8018db0:	8365      	strh	r5, [r4, #26]
 8018db2:	83a5      	strh	r5, [r4, #28]
 8018db4:	83e5      	strh	r5, [r4, #30]
 8018db6:	8425      	strh	r5, [r4, #32]
 8018db8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8018dbc:	b32e      	cbz	r6, 8018e0a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018dbe:	6803      	ldr	r3, [r0, #0]
 8018dc0:	695b      	ldr	r3, [r3, #20]
 8018dc2:	4798      	blx	r3
 8018dc4:	4606      	mov	r6, r0
 8018dc6:	b300      	cbz	r0, 8018e0a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018dc8:	68e0      	ldr	r0, [r4, #12]
 8018dca:	4631      	mov	r1, r6
 8018dcc:	6803      	ldr	r3, [r0, #0]
 8018dce:	68db      	ldr	r3, [r3, #12]
 8018dd0:	4798      	blx	r3
 8018dd2:	4605      	mov	r5, r0
 8018dd4:	b1c8      	cbz	r0, 8018e0a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018dd6:	7b43      	ldrb	r3, [r0, #13]
 8018dd8:	7a82      	ldrb	r2, [r0, #10]
 8018dda:	005b      	lsls	r3, r3, #1
 8018ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018de0:	4313      	orrs	r3, r2
 8018de2:	8423      	strh	r3, [r4, #32]
 8018de4:	7a63      	ldrb	r3, [r4, #9]
 8018de6:	2b06      	cmp	r3, #6
 8018de8:	d10f      	bne.n	8018e0a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018dea:	68e0      	ldr	r0, [r4, #12]
 8018dec:	462a      	mov	r2, r5
 8018dee:	6803      	ldr	r3, [r0, #0]
 8018df0:	4631      	mov	r1, r6
 8018df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018df4:	4798      	blx	r3
 8018df6:	7b6b      	ldrb	r3, [r5, #13]
 8018df8:	005b      	lsls	r3, r3, #1
 8018dfa:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018dfe:	7aab      	ldrb	r3, [r5, #10]
 8018e00:	4313      	orrs	r3, r2
 8018e02:	4418      	add	r0, r3
 8018e04:	8c23      	ldrh	r3, [r4, #32]
 8018e06:	4418      	add	r0, r3
 8018e08:	8420      	strh	r0, [r4, #32]
 8018e0a:	4620      	mov	r0, r4
 8018e0c:	bd70      	pop	{r4, r5, r6, pc}

08018e0e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018e0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e12:	2400      	movs	r4, #0
 8018e14:	4681      	mov	r9, r0
 8018e16:	4688      	mov	r8, r1
 8018e18:	4692      	mov	sl, r2
 8018e1a:	469b      	mov	fp, r3
 8018e1c:	4627      	mov	r7, r4
 8018e1e:	4625      	mov	r5, r4
 8018e20:	4626      	mov	r6, r4
 8018e22:	b085      	sub	sp, #20
 8018e24:	4554      	cmp	r4, sl
 8018e26:	da2a      	bge.n	8018e7e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	9303      	str	r3, [sp, #12]
 8018e2c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018e30:	429d      	cmp	r5, r3
 8018e32:	d004      	beq.n	8018e3e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8018e34:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018e38:	429d      	cmp	r5, r3
 8018e3a:	bf18      	it	ne
 8018e3c:	462f      	movne	r7, r5
 8018e3e:	ab03      	add	r3, sp, #12
 8018e40:	4642      	mov	r2, r8
 8018e42:	4659      	mov	r1, fp
 8018e44:	4648      	mov	r0, r9
 8018e46:	f003 f839 	bl	801bebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e4a:	4605      	mov	r5, r0
 8018e4c:	b1b8      	cbz	r0, 8018e7e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018e4e:	280a      	cmp	r0, #10
 8018e50:	d015      	beq.n	8018e7e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8018e52:	9a03      	ldr	r2, [sp, #12]
 8018e54:	b18a      	cbz	r2, 8018e7a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8018e56:	7b50      	ldrb	r0, [r2, #13]
 8018e58:	7a93      	ldrb	r3, [r2, #10]
 8018e5a:	0040      	lsls	r0, r0, #1
 8018e5c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8018e60:	4303      	orrs	r3, r0
 8018e62:	9301      	str	r3, [sp, #4]
 8018e64:	f8d8 3000 	ldr.w	r3, [r8]
 8018e68:	4639      	mov	r1, r7
 8018e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018e6c:	4640      	mov	r0, r8
 8018e6e:	8895      	ldrh	r5, [r2, #4]
 8018e70:	4798      	blx	r3
 8018e72:	9b01      	ldr	r3, [sp, #4]
 8018e74:	4418      	add	r0, r3
 8018e76:	4406      	add	r6, r0
 8018e78:	b2b6      	uxth	r6, r6
 8018e7a:	3401      	adds	r4, #1
 8018e7c:	e7d2      	b.n	8018e24 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8018e7e:	4630      	mov	r0, r6
 8018e80:	b005      	add	sp, #20
 8018e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e86 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8018e86:	2a02      	cmp	r2, #2
 8018e88:	b530      	push	{r4, r5, lr}
 8018e8a:	d011      	beq.n	8018eb0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018e8c:	2a03      	cmp	r2, #3
 8018e8e:	d01c      	beq.n	8018eca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018e90:	2a01      	cmp	r2, #1
 8018e92:	d10c      	bne.n	8018eae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018e94:	888b      	ldrh	r3, [r1, #4]
 8018e96:	8801      	ldrh	r1, [r0, #0]
 8018e98:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018e9c:	1a5b      	subs	r3, r3, r1
 8018e9e:	8844      	ldrh	r4, [r0, #2]
 8018ea0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018ea4:	1a9b      	subs	r3, r3, r2
 8018ea6:	8004      	strh	r4, [r0, #0]
 8018ea8:	8043      	strh	r3, [r0, #2]
 8018eaa:	8081      	strh	r1, [r0, #4]
 8018eac:	80c2      	strh	r2, [r0, #6]
 8018eae:	bd30      	pop	{r4, r5, pc}
 8018eb0:	88cb      	ldrh	r3, [r1, #6]
 8018eb2:	8842      	ldrh	r2, [r0, #2]
 8018eb4:	1a9b      	subs	r3, r3, r2
 8018eb6:	88c2      	ldrh	r2, [r0, #6]
 8018eb8:	1a9b      	subs	r3, r3, r2
 8018eba:	888a      	ldrh	r2, [r1, #4]
 8018ebc:	8801      	ldrh	r1, [r0, #0]
 8018ebe:	8043      	strh	r3, [r0, #2]
 8018ec0:	1a52      	subs	r2, r2, r1
 8018ec2:	8881      	ldrh	r1, [r0, #4]
 8018ec4:	1a52      	subs	r2, r2, r1
 8018ec6:	8002      	strh	r2, [r0, #0]
 8018ec8:	e7f1      	b.n	8018eae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018eca:	88cb      	ldrh	r3, [r1, #6]
 8018ecc:	8841      	ldrh	r1, [r0, #2]
 8018ece:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018ed2:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018ed6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018eda:	1a5b      	subs	r3, r3, r1
 8018edc:	1a9b      	subs	r3, r3, r2
 8018ede:	8003      	strh	r3, [r0, #0]
 8018ee0:	8045      	strh	r5, [r0, #2]
 8018ee2:	8082      	strh	r2, [r0, #4]
 8018ee4:	80c4      	strh	r4, [r0, #6]
 8018ee6:	e7e2      	b.n	8018eae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018ee8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eec:	b09f      	sub	sp, #124	@ 0x7c
 8018eee:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8018ef2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018ef4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8018ef6:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8018ef8:	8812      	ldrh	r2, [r2, #0]
 8018efa:	889b      	ldrh	r3, [r3, #4]
 8018efc:	900e      	str	r0, [sp, #56]	@ 0x38
 8018efe:	4413      	add	r3, r2
 8018f00:	6828      	ldr	r0, [r5, #0]
 8018f02:	b21b      	sxth	r3, r3
 8018f04:	9311      	str	r3, [sp, #68]	@ 0x44
 8018f06:	6803      	ldr	r3, [r0, #0]
 8018f08:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f0c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8018f10:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8018f14:	4798      	blx	r3
 8018f16:	682b      	ldr	r3, [r5, #0]
 8018f18:	9013      	str	r0, [sp, #76]	@ 0x4c
 8018f1a:	7b1a      	ldrb	r2, [r3, #12]
 8018f1c:	7adb      	ldrb	r3, [r3, #11]
 8018f1e:	9215      	str	r2, [sp, #84]	@ 0x54
 8018f20:	9316      	str	r3, [sp, #88]	@ 0x58
 8018f22:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8018f26:	2c00      	cmp	r4, #0
 8018f28:	d067      	beq.n	8018ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018f2a:	7c2b      	ldrb	r3, [r5, #16]
 8018f2c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8018f2e:	2b06      	cmp	r3, #6
 8018f30:	bf14      	ite	ne
 8018f32:	2301      	movne	r3, #1
 8018f34:	2302      	moveq	r3, #2
 8018f36:	4413      	add	r3, r2
 8018f38:	f04f 0900 	mov.w	r9, #0
 8018f3c:	464c      	mov	r4, r9
 8018f3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018f40:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8018f44:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8018f48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018f4a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018f4c:	4293      	cmp	r3, r2
 8018f4e:	f280 808b 	bge.w	8019068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018f52:	2300      	movs	r3, #0
 8018f54:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8018f58:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8018f5c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018f60:	429c      	cmp	r4, r3
 8018f62:	d006      	beq.n	8018f72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8018f64:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018f68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f6a:	4294      	cmp	r4, r2
 8018f6c:	bf18      	it	ne
 8018f6e:	4623      	movne	r3, r4
 8018f70:	930c      	str	r3, [sp, #48]	@ 0x30
 8018f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018f74:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8018f76:	682a      	ldr	r2, [r5, #0]
 8018f78:	428b      	cmp	r3, r1
 8018f7a:	db40      	blt.n	8018ffe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8018f7c:	6813      	ldr	r3, [r2, #0]
 8018f7e:	4610      	mov	r0, r2
 8018f80:	695b      	ldr	r3, [r3, #20]
 8018f82:	4798      	blx	r3
 8018f84:	4604      	mov	r4, r0
 8018f86:	6828      	ldr	r0, [r5, #0]
 8018f88:	aa1d      	add	r2, sp, #116	@ 0x74
 8018f8a:	6803      	ldr	r3, [r0, #0]
 8018f8c:	4621      	mov	r1, r4
 8018f8e:	689f      	ldr	r7, [r3, #8]
 8018f90:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8018f94:	47b8      	blx	r7
 8018f96:	901c      	str	r0, [sp, #112]	@ 0x70
 8018f98:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018f9c:	429c      	cmp	r4, r3
 8018f9e:	f000 80ea 	beq.w	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018fa2:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018fa6:	429c      	cmp	r4, r3
 8018fa8:	f000 80e5 	beq.w	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8018fac:	2c00      	cmp	r4, #0
 8018fae:	f000 810c 	beq.w	80191ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 8018fb2:	2c0a      	cmp	r4, #10
 8018fb4:	d05e      	beq.n	8019074 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018fb6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018fb8:	b36a      	cbz	r2, 8019016 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8018fba:	8894      	ldrh	r4, [r2, #4]
 8018fbc:	f1bb 0f00 	cmp.w	fp, #0
 8018fc0:	d03a      	beq.n	8019038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018fc2:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018fc6:	f1bb 0f01 	cmp.w	fp, #1
 8018fca:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018fce:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8018fd2:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018fd6:	ea49 0903 	orr.w	r9, r9, r3
 8018fda:	d133      	bne.n	8019044 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8018fdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018fde:	eba6 0609 	sub.w	r6, r6, r9
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d14d      	bne.n	8019082 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018fe6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018fe8:	eb09 0306 	add.w	r3, r9, r6
 8018fec:	4413      	add	r3, r2
 8018fee:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018ff0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018ff4:	4293      	cmp	r3, r2
 8018ff6:	da4e      	bge.n	8019096 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8018ff8:	e036      	b.n	8019068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018ffa:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8018ffc:	e79c      	b.n	8018f38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8018ffe:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8019002:	9301      	str	r3, [sp, #4]
 8019004:	ab1d      	add	r3, sp, #116	@ 0x74
 8019006:	9300      	str	r3, [sp, #0]
 8019008:	4659      	mov	r1, fp
 801900a:	ab1c      	add	r3, sp, #112	@ 0x70
 801900c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801900e:	f002 ff9e 	bl	801bf4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019012:	4604      	mov	r4, r0
 8019014:	e7c0      	b.n	8018f98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019016:	6828      	ldr	r0, [r5, #0]
 8019018:	6803      	ldr	r3, [r0, #0]
 801901a:	691b      	ldr	r3, [r3, #16]
 801901c:	4798      	blx	r3
 801901e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019022:	4298      	cmp	r0, r3
 8019024:	f000 80a7 	beq.w	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019028:	f242 030b 	movw	r3, #8203	@ 0x200b
 801902c:	4298      	cmp	r0, r3
 801902e:	f000 80a2 	beq.w	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019032:	f1bb 0f00 	cmp.w	fp, #0
 8019036:	d100      	bne.n	801903a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019038:	444e      	add	r6, r9
 801903a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801903c:	2a00      	cmp	r2, #0
 801903e:	d1c0      	bne.n	8018fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019040:	4691      	mov	r9, r2
 8019042:	e098      	b.n	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019046:	2b00      	cmp	r3, #0
 8019048:	f000 80c1 	beq.w	80191ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 801904c:	f1bb 0f00 	cmp.w	fp, #0
 8019050:	d117      	bne.n	8019082 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019052:	6828      	ldr	r0, [r5, #0]
 8019054:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019056:	6803      	ldr	r3, [r0, #0]
 8019058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801905a:	4798      	blx	r3
 801905c:	4406      	add	r6, r0
 801905e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019060:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019062:	1af3      	subs	r3, r6, r3
 8019064:	4293      	cmp	r3, r2
 8019066:	dd16      	ble.n	8019096 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8019068:	2c00      	cmp	r4, #0
 801906a:	f000 80ae 	beq.w	80191ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 801906e:	2c0a      	cmp	r4, #10
 8019070:	f040 809c 	bne.w	80191ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 8019074:	240a      	movs	r4, #10
 8019076:	fab4 f084 	clz	r0, r4
 801907a:	0940      	lsrs	r0, r0, #5
 801907c:	b01f      	add	sp, #124	@ 0x7c
 801907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019082:	6828      	ldr	r0, [r5, #0]
 8019084:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019086:	6803      	ldr	r3, [r0, #0]
 8019088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801908a:	4798      	blx	r3
 801908c:	f1bb 0f01 	cmp.w	fp, #1
 8019090:	eba6 0600 	sub.w	r6, r6, r0
 8019094:	d0a7      	beq.n	8018fe6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8019096:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8019098:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801909a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801909e:	f9b3 8000 	ldrsh.w	r8, [r3]
 80190a2:	7b43      	ldrb	r3, [r0, #13]
 80190a4:	4431      	add	r1, r6
 80190a6:	015b      	lsls	r3, r3, #5
 80190a8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80190ac:	7983      	ldrb	r3, [r0, #6]
 80190ae:	4313      	orrs	r3, r2
 80190b0:	440b      	add	r3, r1
 80190b2:	4543      	cmp	r3, r8
 80190b4:	db5f      	blt.n	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80190b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80190b8:	4299      	cmp	r1, r3
 80190ba:	da5c      	bge.n	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80190bc:	6828      	ldr	r0, [r5, #0]
 80190be:	45b0      	cmp	r8, r6
 80190c0:	6803      	ldr	r3, [r0, #0]
 80190c2:	bfc8      	it	gt
 80190c4:	eba8 0806 	subgt.w	r8, r8, r6
 80190c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190ca:	bfcc      	ite	gt
 80190cc:	fa1f f888 	uxthgt.w	r8, r8
 80190d0:	f04f 0800 	movle.w	r8, #0
 80190d4:	4798      	blx	r3
 80190d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80190d8:	7b53      	ldrb	r3, [r2, #13]
 80190da:	00d9      	lsls	r1, r3, #3
 80190dc:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 80190e0:	7a11      	ldrb	r1, [r2, #8]
 80190e2:	4339      	orrs	r1, r7
 80190e4:	065f      	lsls	r7, r3, #25
 80190e6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80190e8:	bf44      	itt	mi
 80190ea:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 80190ee:	b209      	sxthmi	r1, r1
 80190f0:	19c7      	adds	r7, r0, r7
 80190f2:	1a7f      	subs	r7, r7, r1
 80190f4:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80190f6:	b2bf      	uxth	r7, r7
 80190f8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80190fc:	fa0f fa87 	sxth.w	sl, r7
 8019100:	4551      	cmp	r1, sl
 8019102:	dd3c      	ble.n	801917e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019104:	011b      	lsls	r3, r3, #4
 8019106:	79d0      	ldrb	r0, [r2, #7]
 8019108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801910c:	4303      	orrs	r3, r0
 801910e:	449a      	add	sl, r3
 8019110:	4551      	cmp	r1, sl
 8019112:	dc30      	bgt.n	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019114:	468a      	mov	sl, r1
 8019116:	1bcf      	subs	r7, r1, r7
 8019118:	b23f      	sxth	r7, r7
 801911a:	9219      	str	r2, [sp, #100]	@ 0x64
 801911c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801911e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019120:	6828      	ldr	r0, [r5, #0]
 8019122:	2a00      	cmp	r2, #0
 8019124:	d12d      	bne.n	8019182 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8019126:	9318      	str	r3, [sp, #96]	@ 0x60
 8019128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801912a:	b2bf      	uxth	r7, r7
 801912c:	6819      	ldr	r1, [r3, #0]
 801912e:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8019130:	6801      	ldr	r1, [r0, #0]
 8019132:	9314      	str	r3, [sp, #80]	@ 0x50
 8019134:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019136:	4788      	blx	r1
 8019138:	79a9      	ldrb	r1, [r5, #6]
 801913a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801913c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801913e:	7ba9      	ldrb	r1, [r5, #14]
 8019140:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019142:	910a      	str	r1, [sp, #40]	@ 0x28
 8019144:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8019148:	9109      	str	r1, [sp, #36]	@ 0x24
 801914a:	68a9      	ldr	r1, [r5, #8]
 801914c:	9306      	str	r3, [sp, #24]
 801914e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019150:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8019154:	44b0      	add	r8, r6
 8019156:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801915a:	9304      	str	r3, [sp, #16]
 801915c:	fa0f f388 	sxth.w	r3, r8
 8019160:	9300      	str	r3, [sp, #0]
 8019162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019164:	9205      	str	r2, [sp, #20]
 8019166:	f8cd a004 	str.w	sl, [sp, #4]
 801916a:	681a      	ldr	r2, [r3, #0]
 801916c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801916e:	685b      	ldr	r3, [r3, #4]
 8019170:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019172:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8019174:	47b8      	blx	r7
 8019176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019178:	3301      	adds	r3, #1
 801917a:	930d      	str	r3, [sp, #52]	@ 0x34
 801917c:	e6e4      	b.n	8018f48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801917e:	2700      	movs	r7, #0
 8019180:	e7cb      	b.n	801911a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8019182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019184:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8019188:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801918a:	f8dc 1000 	ldr.w	r1, [ip]
 801918e:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8019192:	79aa      	ldrb	r2, [r5, #6]
 8019194:	9203      	str	r2, [sp, #12]
 8019196:	7baa      	ldrb	r2, [r5, #14]
 8019198:	9202      	str	r2, [sp, #8]
 801919a:	68aa      	ldr	r2, [r5, #8]
 801919c:	e9cd 0200 	strd	r0, r2, [sp]
 80191a0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80191a2:	688f      	ldr	r7, [r1, #8]
 80191a4:	4660      	mov	r0, ip
 80191a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80191a8:	47b8      	blx	r7
 80191aa:	e7e4      	b.n	8019176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80191ac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80191ae:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80191b0:	3501      	adds	r5, #1
 80191b2:	429d      	cmp	r5, r3
 80191b4:	f6bf af5f 	bge.w	8019076 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80191b8:	4659      	mov	r1, fp
 80191ba:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80191bc:	f7f8 fd18 	bl	8011bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80191c0:	4604      	mov	r4, r0
 80191c2:	b110      	cbz	r0, 80191ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 80191c4:	280a      	cmp	r0, #10
 80191c6:	d1f2      	bne.n	80191ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 80191c8:	e754      	b.n	8019074 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80191ca:	2400      	movs	r4, #0
 80191cc:	e753      	b.n	8019076 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80191ce:	f1bb 0f00 	cmp.w	fp, #0
 80191d2:	f43f af44 	beq.w	801905e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80191d6:	e75e      	b.n	8019096 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

080191d8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80191d8:	b530      	push	{r4, r5, lr}
 80191da:	8ac4      	ldrh	r4, [r0, #22]
 80191dc:	8b45      	ldrh	r5, [r0, #26]
 80191de:	8343      	strh	r3, [r0, #26]
 80191e0:	442c      	add	r4, r5
 80191e2:	1ae4      	subs	r4, r4, r3
 80191e4:	82c4      	strh	r4, [r0, #22]
 80191e6:	8b83      	ldrh	r3, [r0, #28]
 80191e8:	8b04      	ldrh	r4, [r0, #24]
 80191ea:	4422      	add	r2, r4
 80191ec:	440c      	add	r4, r1
 80191ee:	1a59      	subs	r1, r3, r1
 80191f0:	83c2      	strh	r2, [r0, #30]
 80191f2:	8304      	strh	r4, [r0, #24]
 80191f4:	8381      	strh	r1, [r0, #28]
 80191f6:	bd30      	pop	{r4, r5, pc}

080191f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80191f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191fc:	4604      	mov	r4, r0
 80191fe:	8a47      	ldrh	r7, [r0, #18]
 8019200:	68c0      	ldr	r0, [r0, #12]
 8019202:	b085      	sub	sp, #20
 8019204:	6803      	ldr	r3, [r0, #0]
 8019206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019208:	4798      	blx	r3
 801920a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801920e:	7a63      	ldrb	r3, [r4, #9]
 8019210:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8019214:	42b7      	cmp	r7, r6
 8019216:	f103 33ff 	add.w	r3, r3, #4294967295
 801921a:	bfac      	ite	ge
 801921c:	f04f 0900 	movge.w	r9, #0
 8019220:	f04f 0901 	movlt.w	r9, #1
 8019224:	2b05      	cmp	r3, #5
 8019226:	d804      	bhi.n	8019232 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 8019228:	e8df f003 	tbb	[pc, r3]
 801922c:	460e0852 	.word	0x460e0852
 8019230:	4b4b      	.short	0x4b4b
 8019232:	2500      	movs	r5, #0
 8019234:	46a9      	mov	r9, r5
 8019236:	462e      	mov	r6, r5
 8019238:	462f      	mov	r7, r5
 801923a:	e00d      	b.n	8019258 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801923c:	42b7      	cmp	r7, r6
 801923e:	bfb4      	ite	lt
 8019240:	2600      	movlt	r6, #0
 8019242:	2601      	movge	r6, #1
 8019244:	2500      	movs	r5, #0
 8019246:	e7f7      	b.n	8019238 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8019248:	464d      	mov	r5, r9
 801924a:	f04f 0900 	mov.w	r9, #0
 801924e:	42b7      	cmp	r7, r6
 8019250:	bfb4      	ite	lt
 8019252:	2600      	movlt	r6, #0
 8019254:	2601      	movge	r6, #1
 8019256:	464f      	mov	r7, r9
 8019258:	f04f 0800 	mov.w	r8, #0
 801925c:	f8a4 8016 	strh.w	r8, [r4, #22]
 8019260:	f8a4 8018 	strh.w	r8, [r4, #24]
 8019264:	f8cd 8004 	str.w	r8, [sp, #4]
 8019268:	2300      	movs	r3, #0
 801926a:	9303      	str	r3, [sp, #12]
 801926c:	8823      	ldrh	r3, [r4, #0]
 801926e:	2b20      	cmp	r3, #32
 8019270:	d032      	beq.n	80192d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe0>
 8019272:	f242 010b 	movw	r1, #8203	@ 0x200b
 8019276:	1a5a      	subs	r2, r3, r1
 8019278:	f1d2 0a00 	rsbs	sl, r2, #0
 801927c:	eb4a 0a02 	adc.w	sl, sl, r2
 8019280:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8019284:	4293      	cmp	r3, r2
 8019286:	d008      	beq.n	801929a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8019288:	428b      	cmp	r3, r1
 801928a:	9a01      	ldr	r2, [sp, #4]
 801928c:	bf16      	itet	ne
 801928e:	461a      	movne	r2, r3
 8019290:	f04f 0a01 	moveq.w	sl, #1
 8019294:	f04f 0a00 	movne.w	sl, #0
 8019298:	9201      	str	r2, [sp, #4]
 801929a:	ab03      	add	r3, sp, #12
 801929c:	68e2      	ldr	r2, [r4, #12]
 801929e:	7a21      	ldrb	r1, [r4, #8]
 80192a0:	6860      	ldr	r0, [r4, #4]
 80192a2:	f002 fe0b 	bl	801bebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80192a6:	8020      	strh	r0, [r4, #0]
 80192a8:	b9d0      	cbnz	r0, 80192e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe8>
 80192aa:	2300      	movs	r3, #0
 80192ac:	8ba2      	ldrh	r2, [r4, #28]
 80192ae:	4611      	mov	r1, r2
 80192b0:	4620      	mov	r0, r4
 80192b2:	f7ff ff91 	bl	80191d8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80192b6:	e06d      	b.n	8019394 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 80192b8:	2500      	movs	r5, #0
 80192ba:	2701      	movs	r7, #1
 80192bc:	46a9      	mov	r9, r5
 80192be:	462e      	mov	r6, r5
 80192c0:	e7ca      	b.n	8019258 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80192c2:	2500      	movs	r5, #0
 80192c4:	42b7      	cmp	r7, r6
 80192c6:	bfb4      	ite	lt
 80192c8:	2700      	movlt	r7, #0
 80192ca:	2701      	movge	r7, #1
 80192cc:	462e      	mov	r6, r5
 80192ce:	e7c3      	b.n	8019258 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80192d0:	2500      	movs	r5, #0
 80192d2:	2601      	movs	r6, #1
 80192d4:	46a9      	mov	r9, r5
 80192d6:	e7af      	b.n	8019238 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 80192d8:	9301      	str	r3, [sp, #4]
 80192da:	f04f 0a01 	mov.w	sl, #1
 80192de:	e7dc      	b.n	801929a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80192e0:	8b63      	ldrh	r3, [r4, #26]
 80192e2:	280a      	cmp	r0, #10
 80192e4:	f103 0301 	add.w	r3, r3, #1
 80192e8:	8363      	strh	r3, [r4, #26]
 80192ea:	d0de      	beq.n	80192aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80192ec:	9a03      	ldr	r2, [sp, #12]
 80192ee:	bb62      	cbnz	r2, 801934a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x152>
 80192f0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80192f4:	4298      	cmp	r0, r3
 80192f6:	d003      	beq.n	8019300 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 80192f8:	f242 030b 	movw	r3, #8203	@ 0x200b
 80192fc:	4298      	cmp	r0, r3
 80192fe:	d1b3      	bne.n	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019300:	8823      	ldrh	r3, [r4, #0]
 8019302:	8ba1      	ldrh	r1, [r4, #28]
 8019304:	2b20      	cmp	r3, #32
 8019306:	d003      	beq.n	8019310 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x118>
 8019308:	f242 000b 	movw	r0, #8203	@ 0x200b
 801930c:	4283      	cmp	r3, r0
 801930e:	d131      	bne.n	8019374 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17c>
 8019310:	f1ba 0f00 	cmp.w	sl, #0
 8019314:	bf0a      	itet	eq
 8019316:	4688      	moveq	r8, r1
 8019318:	4650      	movne	r0, sl
 801931a:	2001      	moveq	r0, #1
 801931c:	440a      	add	r2, r1
 801931e:	8b23      	ldrh	r3, [r4, #24]
 8019320:	b292      	uxth	r2, r2
 8019322:	83a2      	strh	r2, [r4, #28]
 8019324:	4413      	add	r3, r2
 8019326:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801932a:	f1b9 0f00 	cmp.w	r9, #0
 801932e:	d102      	bne.n	8019336 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x13e>
 8019330:	2d00      	cmp	r5, #0
 8019332:	d042      	beq.n	80193ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c2>
 8019334:	b300      	cbz	r0, 8019378 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 8019336:	8c21      	ldrh	r1, [r4, #32]
 8019338:	4419      	add	r1, r3
 801933a:	458c      	cmp	ip, r1
 801933c:	da37      	bge.n	80193ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 801933e:	8ae1      	ldrh	r1, [r4, #22]
 8019340:	2900      	cmp	r1, #0
 8019342:	d034      	beq.n	80193ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 8019344:	4563      	cmp	r3, ip
 8019346:	dd8f      	ble.n	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019348:	e01d      	b.n	8019386 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x18e>
 801934a:	8893      	ldrh	r3, [r2, #4]
 801934c:	9901      	ldr	r1, [sp, #4]
 801934e:	8023      	strh	r3, [r4, #0]
 8019350:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8019354:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8019358:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 801935c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8019360:	ea4b 0b00 	orr.w	fp, fp, r0
 8019364:	68e0      	ldr	r0, [r4, #12]
 8019366:	6803      	ldr	r3, [r0, #0]
 8019368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801936a:	4798      	blx	r3
 801936c:	eb0b 0200 	add.w	r2, fp, r0
 8019370:	b292      	uxth	r2, r2
 8019372:	e7c5      	b.n	8019300 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 8019374:	2000      	movs	r0, #0
 8019376:	e7d1      	b.n	801931c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x124>
 8019378:	4563      	cmp	r3, ip
 801937a:	f77f af75 	ble.w	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801937e:	8ae3      	ldrh	r3, [r4, #22]
 8019380:	2b00      	cmp	r3, #0
 8019382:	f43f af71 	beq.w	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019386:	2301      	movs	r3, #1
 8019388:	8c22      	ldrh	r2, [r4, #32]
 801938a:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801938e:	8be3      	ldrh	r3, [r4, #30]
 8019390:	4413      	add	r3, r2
 8019392:	83e3      	strh	r3, [r4, #30]
 8019394:	68e0      	ldr	r0, [r4, #12]
 8019396:	6803      	ldr	r3, [r0, #0]
 8019398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801939a:	4798      	blx	r3
 801939c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80193a0:	4418      	add	r0, r3
 80193a2:	8a63      	ldrh	r3, [r4, #18]
 80193a4:	1a18      	subs	r0, r3, r0
 80193a6:	8260      	strh	r0, [r4, #18]
 80193a8:	b005      	add	sp, #20
 80193aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193ae:	2300      	movs	r3, #0
 80193b0:	4611      	mov	r1, r2
 80193b2:	4620      	mov	r0, r4
 80193b4:	f7ff ff10 	bl	80191d8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80193b8:	e756      	b.n	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80193ba:	4563      	cmp	r3, ip
 80193bc:	dd14      	ble.n	80193e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f0>
 80193be:	b117      	cbz	r7, 80193c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ce>
 80193c0:	2301      	movs	r3, #1
 80193c2:	460a      	mov	r2, r1
 80193c4:	e773      	b.n	80192ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80193c6:	2e00      	cmp	r6, #0
 80193c8:	f43f af4e 	beq.w	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80193cc:	2800      	cmp	r0, #0
 80193ce:	f47f af4b 	bne.w	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80193d2:	f1ba 0f00 	cmp.w	sl, #0
 80193d6:	d002      	beq.n	80193de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e6>
 80193d8:	2301      	movs	r3, #1
 80193da:	4642      	mov	r2, r8
 80193dc:	e768      	b.n	80192b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80193de:	8ae3      	ldrh	r3, [r4, #22]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	f43f af41 	beq.w	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80193e6:	e7d5      	b.n	8019394 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 80193e8:	2800      	cmp	r0, #0
 80193ea:	f47f af3d 	bne.w	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80193ee:	f1ba 0f00 	cmp.w	sl, #0
 80193f2:	f43f af39 	beq.w	8019268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80193f6:	2301      	movs	r3, #1
 80193f8:	4642      	mov	r2, r8
 80193fa:	e7da      	b.n	80193b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>

080193fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80193fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193fe:	4605      	mov	r5, r0
 8019400:	b08f      	sub	sp, #60	@ 0x3c
 8019402:	4617      	mov	r7, r2
 8019404:	461c      	mov	r4, r3
 8019406:	460e      	mov	r6, r1
 8019408:	b1d1      	cbz	r1, 8019440 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	4620      	mov	r0, r4
 801940e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019410:	4798      	blx	r3
 8019412:	4240      	negs	r0, r0
 8019414:	b200      	sxth	r0, r0
 8019416:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801941a:	9603      	str	r6, [sp, #12]
 801941c:	9700      	str	r7, [sp, #0]
 801941e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019422:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8019426:	4629      	mov	r1, r5
 8019428:	a805      	add	r0, sp, #20
 801942a:	f7ff fcad 	bl	8018d88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801942e:	2401      	movs	r4, #1
 8019430:	a805      	add	r0, sp, #20
 8019432:	f7ff fee1 	bl	80191f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8019436:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801943a:	b163      	cbz	r3, 8019456 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801943c:	3401      	adds	r4, #1
 801943e:	e7f7      	b.n	8019430 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019440:	f002 fe0a 	bl	801c058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019444:	2401      	movs	r4, #1
 8019446:	280a      	cmp	r0, #10
 8019448:	4628      	mov	r0, r5
 801944a:	bf08      	it	eq
 801944c:	3401      	addeq	r4, #1
 801944e:	f002 fe03 	bl	801c058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019452:	2800      	cmp	r0, #0
 8019454:	d1f7      	bne.n	8019446 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8019456:	b2a0      	uxth	r0, r4
 8019458:	b00f      	add	sp, #60	@ 0x3c
 801945a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801945c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019460:	b0e3      	sub	sp, #396	@ 0x18c
 8019462:	461c      	mov	r4, r3
 8019464:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8019466:	4683      	mov	fp, r0
 8019468:	4688      	mov	r8, r1
 801946a:	2b00      	cmp	r3, #0
 801946c:	f000 8112 	beq.w	8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019470:	6823      	ldr	r3, [r4, #0]
 8019472:	2b00      	cmp	r3, #0
 8019474:	f000 810e 	beq.w	8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019478:	7ba3      	ldrb	r3, [r4, #14]
 801947a:	2b00      	cmp	r3, #0
 801947c:	f000 810a 	beq.w	8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019480:	ad0a      	add	r5, sp, #40	@ 0x28
 8019482:	462b      	mov	r3, r5
 8019484:	6810      	ldr	r0, [r2, #0]
 8019486:	6851      	ldr	r1, [r2, #4]
 8019488:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801948c:	c303      	stmia	r3!, {r0, r1}
 801948e:	2100      	movs	r1, #0
 8019490:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8019494:	910c      	str	r1, [sp, #48]	@ 0x30
 8019496:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801949a:	a90c      	add	r1, sp, #48	@ 0x30
 801949c:	79a2      	ldrb	r2, [r4, #6]
 801949e:	4628      	mov	r0, r5
 80194a0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80194a4:	f7ff fcef 	bl	8018e86 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80194a8:	a90c      	add	r1, sp, #48	@ 0x30
 80194aa:	4608      	mov	r0, r1
 80194ac:	79a2      	ldrb	r2, [r4, #6]
 80194ae:	f7ff fcea 	bl	8018e86 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80194b2:	a817      	add	r0, sp, #92	@ 0x5c
 80194b4:	f002 f97a 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 80194b8:	6820      	ldr	r0, [r4, #0]
 80194ba:	6803      	ldr	r3, [r0, #0]
 80194bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80194be:	4798      	blx	r3
 80194c0:	4606      	mov	r6, r0
 80194c2:	6820      	ldr	r0, [r4, #0]
 80194c4:	6803      	ldr	r3, [r0, #0]
 80194c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194c8:	4798      	blx	r3
 80194ca:	4633      	mov	r3, r6
 80194cc:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80194ce:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80194d0:	9000      	str	r0, [sp, #0]
 80194d2:	a817      	add	r0, sp, #92	@ 0x5c
 80194d4:	f002 f9c5 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80194d8:	6820      	ldr	r0, [r4, #0]
 80194da:	f894 a004 	ldrb.w	sl, [r4, #4]
 80194de:	6803      	ldr	r3, [r0, #0]
 80194e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194e2:	4798      	blx	r3
 80194e4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80194e8:	6823      	ldr	r3, [r4, #0]
 80194ea:	4607      	mov	r7, r0
 80194ec:	4406      	add	r6, r0
 80194ee:	a830      	add	r0, sp, #192	@ 0xc0
 80194f0:	f893 9009 	ldrb.w	r9, [r3, #9]
 80194f4:	f002 f95a 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 80194f8:	7c23      	ldrb	r3, [r4, #16]
 80194fa:	b17b      	cbz	r3, 801951c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80194fc:	6820      	ldr	r0, [r4, #0]
 80194fe:	6803      	ldr	r3, [r0, #0]
 8019500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019502:	4798      	blx	r3
 8019504:	9009      	str	r0, [sp, #36]	@ 0x24
 8019506:	6820      	ldr	r0, [r4, #0]
 8019508:	6802      	ldr	r2, [r0, #0]
 801950a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801950c:	4790      	blx	r2
 801950e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019510:	9000      	str	r0, [sp, #0]
 8019512:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8019514:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8019516:	a830      	add	r0, sp, #192	@ 0xc0
 8019518:	f002 f9a3 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801951c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8019520:	7be2      	ldrb	r2, [r4, #15]
 8019522:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8019526:	1a8a      	subs	r2, r1, r2
 8019528:	7c21      	ldrb	r1, [r4, #16]
 801952a:	b292      	uxth	r2, r2
 801952c:	9103      	str	r1, [sp, #12]
 801952e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8019532:	a80e      	add	r0, sp, #56	@ 0x38
 8019534:	9102      	str	r1, [sp, #8]
 8019536:	6821      	ldr	r1, [r4, #0]
 8019538:	9101      	str	r1, [sp, #4]
 801953a:	7961      	ldrb	r1, [r4, #5]
 801953c:	9100      	str	r1, [sp, #0]
 801953e:	a930      	add	r1, sp, #192	@ 0xc0
 8019540:	f7ff fc22 	bl	8018d88 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8019544:	2e00      	cmp	r6, #0
 8019546:	dc5b      	bgt.n	8019600 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8019548:	f04f 0900 	mov.w	r9, #0
 801954c:	af17      	add	r7, sp, #92	@ 0x5c
 801954e:	7c23      	ldrb	r3, [r4, #16]
 8019550:	2b00      	cmp	r3, #0
 8019552:	f000 80b1 	beq.w	80196b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8019556:	a80e      	add	r0, sp, #56	@ 0x38
 8019558:	f7ff fe4e 	bl	80191f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801955c:	f1ba 0f00 	cmp.w	sl, #0
 8019560:	f000 80a5 	beq.w	80196ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019564:	7c23      	ldrb	r3, [r4, #16]
 8019566:	2264      	movs	r2, #100	@ 0x64
 8019568:	4639      	mov	r1, r7
 801956a:	a849      	add	r0, sp, #292	@ 0x124
 801956c:	9309      	str	r3, [sp, #36]	@ 0x24
 801956e:	f012 fdd2 	bl	802c116 <memcpy>
 8019572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019574:	2b00      	cmp	r3, #0
 8019576:	f000 80a7 	beq.w	80196c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801957a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801957e:	7922      	ldrb	r2, [r4, #4]
 8019580:	2a01      	cmp	r2, #1
 8019582:	f040 808a 	bne.w	801969a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019586:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801958a:	1ac0      	subs	r0, r0, r3
 801958c:	2302      	movs	r3, #2
 801958e:	fb90 f0f3 	sdiv	r0, r0, r3
 8019592:	b200      	sxth	r0, r0
 8019594:	7c23      	ldrb	r3, [r4, #16]
 8019596:	2b00      	cmp	r3, #0
 8019598:	f000 808b 	beq.w	80196b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801959c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 80195a0:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 80195a4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80195a8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80195ac:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80195b0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80195b4:	4410      	add	r0, r2
 80195b6:	b200      	sxth	r0, r0
 80195b8:	9000      	str	r0, [sp, #0]
 80195ba:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80195be:	4642      	mov	r2, r8
 80195c0:	2100      	movs	r1, #0
 80195c2:	4658      	mov	r0, fp
 80195c4:	f7ff fc90 	bl	8018ee8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80195c8:	2800      	cmp	r0, #0
 80195ca:	d163      	bne.n	8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80195cc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80195d0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80195d4:	b2b2      	uxth	r2, r6
 80195d6:	4413      	add	r3, r2
 80195d8:	1a8a      	subs	r2, r1, r2
 80195da:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80195de:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 80195e2:	b21b      	sxth	r3, r3
 80195e4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80195e8:	2a00      	cmp	r2, #0
 80195ea:	d153      	bne.n	8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80195ec:	6822      	ldr	r2, [r4, #0]
 80195ee:	8869      	ldrh	r1, [r5, #2]
 80195f0:	7a12      	ldrb	r2, [r2, #8]
 80195f2:	1a9b      	subs	r3, r3, r2
 80195f4:	88ea      	ldrh	r2, [r5, #6]
 80195f6:	440a      	add	r2, r1
 80195f8:	b212      	sxth	r2, r2
 80195fa:	4293      	cmp	r3, r2
 80195fc:	dda7      	ble.n	801954e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80195fe:	e049      	b.n	8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019600:	7c23      	ldrb	r3, [r4, #16]
 8019602:	444f      	add	r7, r9
 8019604:	b1c3      	cbz	r3, 8019638 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8019606:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801960a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801960e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019612:	443b      	add	r3, r7
 8019614:	4293      	cmp	r3, r2
 8019616:	da97      	bge.n	8019548 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8019618:	a80e      	add	r0, sp, #56	@ 0x38
 801961a:	f7ff fded 	bl	80191f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801961e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8019622:	3b01      	subs	r3, #1
 8019624:	b29b      	uxth	r3, r3
 8019626:	454b      	cmp	r3, r9
 8019628:	9309      	str	r3, [sp, #36]	@ 0x24
 801962a:	d021      	beq.n	8019670 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801962c:	7961      	ldrb	r1, [r4, #5]
 801962e:	a817      	add	r0, sp, #92	@ 0x5c
 8019630:	f7f8 fade 	bl	8011bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019636:	e7f4      	b.n	8019622 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8019638:	fa1f f986 	uxth.w	r9, r6
 801963c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019640:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019644:	443b      	add	r3, r7
 8019646:	4293      	cmp	r3, r2
 8019648:	f6bf af7e 	bge.w	8019548 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801964c:	a817      	add	r0, sp, #92	@ 0x5c
 801964e:	f002 fd03 	bl	801c058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019652:	b1f8      	cbz	r0, 8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019654:	280a      	cmp	r0, #10
 8019656:	d1f1      	bne.n	801963c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8019658:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801965c:	444b      	add	r3, r9
 801965e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019662:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8019666:	eba3 0309 	sub.w	r3, r3, r9
 801966a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801966e:	e7e5      	b.n	801963c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8019670:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8019674:	b2b3      	uxth	r3, r6
 8019676:	441a      	add	r2, r3
 8019678:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801967c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8019680:	1ad3      	subs	r3, r2, r3
 8019682:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019686:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801968a:	b11b      	cbz	r3, 8019694 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801968c:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8019690:	2b00      	cmp	r3, #0
 8019692:	d0ba      	beq.n	801960a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8019694:	b063      	add	sp, #396	@ 0x18c
 8019696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969a:	2a02      	cmp	r2, #2
 801969c:	d105      	bne.n	80196aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801969e:	7be2      	ldrb	r2, [r4, #15]
 80196a0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80196a4:	1a80      	subs	r0, r0, r2
 80196a6:	1ac0      	subs	r0, r0, r3
 80196a8:	e773      	b.n	8019592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80196aa:	2000      	movs	r0, #0
 80196ac:	e772      	b.n	8019594 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80196ae:	7be0      	ldrb	r0, [r4, #15]
 80196b0:	e770      	b.n	8019594 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80196b2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80196b6:	e773      	b.n	80195a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80196b8:	f1ba 0f00 	cmp.w	sl, #0
 80196bc:	d0f7      	beq.n	80196ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80196be:	2264      	movs	r2, #100	@ 0x64
 80196c0:	4639      	mov	r1, r7
 80196c2:	a849      	add	r0, sp, #292	@ 0x124
 80196c4:	f012 fd27 	bl	802c116 <memcpy>
 80196c8:	2300      	movs	r3, #0
 80196ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80196ce:	6821      	ldr	r1, [r4, #0]
 80196d0:	a849      	add	r0, sp, #292	@ 0x124
 80196d2:	f7ff fb9c 	bl	8018e0e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80196d6:	b203      	sxth	r3, r0
 80196d8:	e751      	b.n	801957e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080196da <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80196da:	2b03      	cmp	r3, #3
 80196dc:	d818      	bhi.n	8019710 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80196de:	e8df f003 	tbb	[pc, r3]
 80196e2:	0602      	.short	0x0602
 80196e4:	130d      	.short	0x130d
 80196e6:	f9b0 2000 	ldrsh.w	r2, [r0]
 80196ea:	1850      	adds	r0, r2, r1
 80196ec:	4770      	bx	lr
 80196ee:	8803      	ldrh	r3, [r0, #0]
 80196f0:	8880      	ldrh	r0, [r0, #4]
 80196f2:	4418      	add	r0, r3
 80196f4:	b200      	sxth	r0, r0
 80196f6:	1a80      	subs	r0, r0, r2
 80196f8:	3801      	subs	r0, #1
 80196fa:	4770      	bx	lr
 80196fc:	8803      	ldrh	r3, [r0, #0]
 80196fe:	8880      	ldrh	r0, [r0, #4]
 8019700:	4418      	add	r0, r3
 8019702:	b200      	sxth	r0, r0
 8019704:	1a40      	subs	r0, r0, r1
 8019706:	e7f7      	b.n	80196f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019708:	f9b0 0000 	ldrsh.w	r0, [r0]
 801970c:	4410      	add	r0, r2
 801970e:	4770      	bx	lr
 8019710:	2000      	movs	r0, #0
 8019712:	4770      	bx	lr

08019714 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019714:	2b03      	cmp	r3, #3
 8019716:	d817      	bhi.n	8019748 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8019718:	e8df f003 	tbb	[pc, r3]
 801971c:	10090602 	.word	0x10090602
 8019720:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019724:	1850      	adds	r0, r2, r1
 8019726:	4770      	bx	lr
 8019728:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801972c:	e7fa      	b.n	8019724 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801972e:	8843      	ldrh	r3, [r0, #2]
 8019730:	88c0      	ldrh	r0, [r0, #6]
 8019732:	4418      	add	r0, r3
 8019734:	b200      	sxth	r0, r0
 8019736:	1a80      	subs	r0, r0, r2
 8019738:	3801      	subs	r0, #1
 801973a:	4770      	bx	lr
 801973c:	8843      	ldrh	r3, [r0, #2]
 801973e:	88c0      	ldrh	r0, [r0, #6]
 8019740:	4418      	add	r0, r3
 8019742:	b200      	sxth	r0, r0
 8019744:	1a40      	subs	r0, r0, r1
 8019746:	e7f7      	b.n	8019738 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019748:	2000      	movs	r0, #0
 801974a:	4770      	bx	lr

0801974c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801974c:	2200      	movs	r2, #0
 801974e:	4b01      	ldr	r3, [pc, #4]	@ (8019754 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019750:	601a      	str	r2, [r3, #0]
 8019752:	4770      	bx	lr
 8019754:	20011f3c 	.word	0x20011f3c

08019758 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019758:	4603      	mov	r3, r0
 801975a:	b1c8      	cbz	r0, 8019790 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801975c:	0c02      	lsrs	r2, r0, #16
 801975e:	0412      	lsls	r2, r2, #16
 8019760:	b9a2      	cbnz	r2, 801978c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8019762:	0403      	lsls	r3, r0, #16
 8019764:	2010      	movs	r0, #16
 8019766:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801976a:	bf04      	itt	eq
 801976c:	021b      	lsleq	r3, r3, #8
 801976e:	3008      	addeq	r0, #8
 8019770:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8019774:	bf04      	itt	eq
 8019776:	011b      	lsleq	r3, r3, #4
 8019778:	3004      	addeq	r0, #4
 801977a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801977e:	bf04      	itt	eq
 8019780:	009b      	lsleq	r3, r3, #2
 8019782:	3002      	addeq	r0, #2
 8019784:	2b00      	cmp	r3, #0
 8019786:	db04      	blt.n	8019792 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019788:	3001      	adds	r0, #1
 801978a:	4770      	bx	lr
 801978c:	2000      	movs	r0, #0
 801978e:	e7ea      	b.n	8019766 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019790:	2020      	movs	r0, #32
 8019792:	4770      	bx	lr

08019794 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019798:	b087      	sub	sp, #28
 801979a:	460d      	mov	r5, r1
 801979c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80197a0:	4616      	mov	r6, r2
 80197a2:	4698      	mov	r8, r3
 80197a4:	4601      	mov	r1, r0
 80197a6:	b120      	cbz	r0, 80197b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80197a8:	b11a      	cbz	r2, 80197b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80197aa:	2d1f      	cmp	r5, #31
 80197ac:	d801      	bhi.n	80197b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80197ae:	2b1f      	cmp	r3, #31
 80197b0:	d904      	bls.n	80197bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80197b2:	2000      	movs	r0, #0
 80197b4:	6038      	str	r0, [r7, #0]
 80197b6:	b007      	add	sp, #28
 80197b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197bc:	b97d      	cbnz	r5, 80197de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80197be:	b143      	cbz	r3, 80197d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80197c0:	4602      	mov	r2, r0
 80197c2:	e9cd 4700 	strd	r4, r7, [sp]
 80197c6:	462b      	mov	r3, r5
 80197c8:	4641      	mov	r1, r8
 80197ca:	4630      	mov	r0, r6
 80197cc:	f7ff ffe2 	bl	8019794 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80197d0:	e7f1      	b.n	80197b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80197d2:	f04f 33ff 	mov.w	r3, #4294967295
 80197d6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80197da:	603b      	str	r3, [r7, #0]
 80197dc:	e7eb      	b.n	80197b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80197de:	fa32 fa05 	lsrs.w	sl, r2, r5
 80197e2:	d106      	bne.n	80197f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80197e4:	4346      	muls	r6, r0
 80197e6:	fbb6 f0f4 	udiv	r0, r6, r4
 80197ea:	fb04 6610 	mls	r6, r4, r0, r6
 80197ee:	603e      	str	r6, [r7, #0]
 80197f0:	e7e1      	b.n	80197b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80197f2:	fa00 fb05 	lsl.w	fp, r0, r5
 80197f6:	fbbb f9f4 	udiv	r9, fp, r4
 80197fa:	2201      	movs	r2, #1
 80197fc:	fb0a f309 	mul.w	r3, sl, r9
 8019800:	40aa      	lsls	r2, r5
 8019802:	3a01      	subs	r2, #1
 8019804:	4016      	ands	r6, r2
 8019806:	4630      	mov	r0, r6
 8019808:	9303      	str	r3, [sp, #12]
 801980a:	f7ff ffa5 	bl	8019758 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801980e:	462b      	mov	r3, r5
 8019810:	460a      	mov	r2, r1
 8019812:	e9cd 4700 	strd	r4, r7, [sp]
 8019816:	4601      	mov	r1, r0
 8019818:	4630      	mov	r0, r6
 801981a:	f7ff ffbb 	bl	8019794 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801981e:	fb04 b919 	mls	r9, r4, r9, fp
 8019822:	4606      	mov	r6, r0
 8019824:	4648      	mov	r0, r9
 8019826:	eb05 0108 	add.w	r1, r5, r8
 801982a:	f7ff ff95 	bl	8019758 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801982e:	ab05      	add	r3, sp, #20
 8019830:	e9cd 4300 	strd	r4, r3, [sp]
 8019834:	464a      	mov	r2, r9
 8019836:	4603      	mov	r3, r0
 8019838:	4650      	mov	r0, sl
 801983a:	f7ff ffab 	bl	8019794 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801983e:	6839      	ldr	r1, [r7, #0]
 8019840:	9a05      	ldr	r2, [sp, #20]
 8019842:	9b03      	ldr	r3, [sp, #12]
 8019844:	4411      	add	r1, r2
 8019846:	fbb1 f2f4 	udiv	r2, r1, r4
 801984a:	fb04 1412 	mls	r4, r4, r2, r1
 801984e:	18d3      	adds	r3, r2, r3
 8019850:	441e      	add	r6, r3
 8019852:	4430      	add	r0, r6
 8019854:	603c      	str	r4, [r7, #0]
 8019856:	e7ae      	b.n	80197b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08019858 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801985c:	b085      	sub	sp, #20
 801985e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019860:	f1b0 0900 	subs.w	r9, r0, #0
 8019864:	461d      	mov	r5, r3
 8019866:	bfbf      	itttt	lt
 8019868:	6823      	ldrlt	r3, [r4, #0]
 801986a:	f1c9 0900 	rsblt	r9, r9, #0
 801986e:	425b      	neglt	r3, r3
 8019870:	6023      	strlt	r3, [r4, #0]
 8019872:	bfb4      	ite	lt
 8019874:	f04f 36ff 	movlt.w	r6, #4294967295
 8019878:	2601      	movge	r6, #1
 801987a:	2a00      	cmp	r2, #0
 801987c:	4617      	mov	r7, r2
 801987e:	da04      	bge.n	801988a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019880:	6823      	ldr	r3, [r4, #0]
 8019882:	4257      	negs	r7, r2
 8019884:	425b      	negs	r3, r3
 8019886:	4276      	negs	r6, r6
 8019888:	6023      	str	r3, [r4, #0]
 801988a:	2d00      	cmp	r5, #0
 801988c:	4638      	mov	r0, r7
 801988e:	bfba      	itte	lt
 8019890:	426d      	neglt	r5, r5
 8019892:	f04f 38ff 	movlt.w	r8, #4294967295
 8019896:	f04f 0801 	movge.w	r8, #1
 801989a:	f7ff ff5d 	bl	8019758 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801989e:	ab03      	add	r3, sp, #12
 80198a0:	e9cd 5300 	strd	r5, r3, [sp]
 80198a4:	463a      	mov	r2, r7
 80198a6:	4603      	mov	r3, r0
 80198a8:	4648      	mov	r0, r9
 80198aa:	f7ff ff73 	bl	8019794 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80198ae:	6823      	ldr	r3, [r4, #0]
 80198b0:	9a03      	ldr	r2, [sp, #12]
 80198b2:	4546      	cmp	r6, r8
 80198b4:	441a      	add	r2, r3
 80198b6:	fb92 f3f5 	sdiv	r3, r2, r5
 80198ba:	4418      	add	r0, r3
 80198bc:	fb05 2313 	mls	r3, r5, r3, r2
 80198c0:	bf18      	it	ne
 80198c2:	4240      	negne	r0, r0
 80198c4:	1c72      	adds	r2, r6, #1
 80198c6:	6023      	str	r3, [r4, #0]
 80198c8:	d105      	bne.n	80198d6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	f1c3 0200 	rsb	r2, r3, #0
 80198d0:	db0b      	blt.n	80198ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80198d2:	6022      	str	r2, [r4, #0]
 80198d4:	e006      	b.n	80198e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80198d6:	2e01      	cmp	r6, #1
 80198d8:	d104      	bne.n	80198e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80198da:	2b00      	cmp	r3, #0
 80198dc:	da02      	bge.n	80198e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80198de:	442b      	add	r3, r5
 80198e0:	3801      	subs	r0, #1
 80198e2:	6023      	str	r3, [r4, #0]
 80198e4:	b005      	add	sp, #20
 80198e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198ea:	3801      	subs	r0, #1
 80198ec:	1b52      	subs	r2, r2, r5
 80198ee:	e7f0      	b.n	80198d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080198f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80198f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80198f4:	4c1c      	ldr	r4, [pc, #112]	@ (8019968 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80198f6:	4605      	mov	r5, r0
 80198f8:	69a3      	ldr	r3, [r4, #24]
 80198fa:	6807      	ldr	r7, [r0, #0]
 80198fc:	b92b      	cbnz	r3, 801990a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80198fe:	6840      	ldr	r0, [r0, #4]
 8019900:	e9c5 7000 	strd	r7, r0, [r5]
 8019904:	b004      	add	sp, #16
 8019906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801990a:	f04f 0802 	mov.w	r8, #2
 801990e:	fb93 f1f8 	sdiv	r1, r3, r8
 8019912:	68a2      	ldr	r2, [r4, #8]
 8019914:	ae04      	add	r6, sp, #16
 8019916:	440a      	add	r2, r1
 8019918:	f846 2d04 	str.w	r2, [r6, #-4]!
 801991c:	69e1      	ldr	r1, [r4, #28]
 801991e:	463a      	mov	r2, r7
 8019920:	9600      	str	r6, [sp, #0]
 8019922:	6820      	ldr	r0, [r4, #0]
 8019924:	f7ff ff98 	bl	8019858 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019928:	69a3      	ldr	r3, [r4, #24]
 801992a:	4607      	mov	r7, r0
 801992c:	686a      	ldr	r2, [r5, #4]
 801992e:	6a21      	ldr	r1, [r4, #32]
 8019930:	9600      	str	r6, [sp, #0]
 8019932:	6860      	ldr	r0, [r4, #4]
 8019934:	f7ff ff90 	bl	8019858 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019938:	69a3      	ldr	r3, [r4, #24]
 801993a:	6962      	ldr	r2, [r4, #20]
 801993c:	fb93 f8f8 	sdiv	r8, r3, r8
 8019940:	4442      	add	r2, r8
 8019942:	9203      	str	r2, [sp, #12]
 8019944:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019946:	682a      	ldr	r2, [r5, #0]
 8019948:	4407      	add	r7, r0
 801994a:	9600      	str	r6, [sp, #0]
 801994c:	68e0      	ldr	r0, [r4, #12]
 801994e:	f7ff ff83 	bl	8019858 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019952:	9600      	str	r6, [sp, #0]
 8019954:	4680      	mov	r8, r0
 8019956:	69a3      	ldr	r3, [r4, #24]
 8019958:	686a      	ldr	r2, [r5, #4]
 801995a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801995c:	6920      	ldr	r0, [r4, #16]
 801995e:	f7ff ff7b 	bl	8019858 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019962:	4440      	add	r0, r8
 8019964:	e7cc      	b.n	8019900 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019966:	bf00      	nop
 8019968:	20011f40 	.word	0x20011f40

0801996c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801996c:	4b07      	ldr	r3, [pc, #28]	@ (801998c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801996e:	781b      	ldrb	r3, [r3, #0]
 8019970:	2b01      	cmp	r3, #1
 8019972:	d109      	bne.n	8019988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019974:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019978:	f9b0 2000 	ldrsh.w	r2, [r0]
 801997c:	8003      	strh	r3, [r0, #0]
 801997e:	4b04      	ldr	r3, [pc, #16]	@ (8019990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019980:	881b      	ldrh	r3, [r3, #0]
 8019982:	3b01      	subs	r3, #1
 8019984:	1a9b      	subs	r3, r3, r2
 8019986:	800b      	strh	r3, [r1, #0]
 8019988:	4770      	bx	lr
 801998a:	bf00      	nop
 801998c:	20011f24 	.word	0x20011f24
 8019990:	20011f20 	.word	0x20011f20

08019994 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019994:	b510      	push	{r4, lr}
 8019996:	4b07      	ldr	r3, [pc, #28]	@ (80199b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019998:	781b      	ldrb	r3, [r3, #0]
 801999a:	2b01      	cmp	r3, #1
 801999c:	d108      	bne.n	80199b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801999e:	4b06      	ldr	r3, [pc, #24]	@ (80199b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80199a0:	880c      	ldrh	r4, [r1, #0]
 80199a2:	881b      	ldrh	r3, [r3, #0]
 80199a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80199a8:	3b01      	subs	r3, #1
 80199aa:	1b1b      	subs	r3, r3, r4
 80199ac:	8003      	strh	r3, [r0, #0]
 80199ae:	800a      	strh	r2, [r1, #0]
 80199b0:	bd10      	pop	{r4, pc}
 80199b2:	bf00      	nop
 80199b4:	20011f24 	.word	0x20011f24
 80199b8:	20011f20 	.word	0x20011f20

080199bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80199bc:	b510      	push	{r4, lr}
 80199be:	4b0a      	ldr	r3, [pc, #40]	@ (80199e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80199c0:	781b      	ldrb	r3, [r3, #0]
 80199c2:	2b01      	cmp	r3, #1
 80199c4:	d10e      	bne.n	80199e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80199c6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80199ca:	8843      	ldrh	r3, [r0, #2]
 80199cc:	f9b0 4000 	ldrsh.w	r4, [r0]
 80199d0:	18ca      	adds	r2, r1, r3
 80199d2:	4b06      	ldr	r3, [pc, #24]	@ (80199ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80199d4:	8044      	strh	r4, [r0, #2]
 80199d6:	881b      	ldrh	r3, [r3, #0]
 80199d8:	1a9b      	subs	r3, r3, r2
 80199da:	8003      	strh	r3, [r0, #0]
 80199dc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80199e0:	8081      	strh	r1, [r0, #4]
 80199e2:	80c3      	strh	r3, [r0, #6]
 80199e4:	bd10      	pop	{r4, pc}
 80199e6:	bf00      	nop
 80199e8:	20011f24 	.word	0x20011f24
 80199ec:	20011f20 	.word	0x20011f20

080199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80199f0:	4b08      	ldr	r3, [pc, #32]	@ (8019a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80199f2:	781b      	ldrb	r3, [r3, #0]
 80199f4:	2b01      	cmp	r3, #1
 80199f6:	d10c      	bne.n	8019a12 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80199f8:	8803      	ldrh	r3, [r0, #0]
 80199fa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80199fe:	8842      	ldrh	r2, [r0, #2]
 8019a00:	8002      	strh	r2, [r0, #0]
 8019a02:	185a      	adds	r2, r3, r1
 8019a04:	4b04      	ldr	r3, [pc, #16]	@ (8019a18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019a06:	881b      	ldrh	r3, [r3, #0]
 8019a08:	1a9b      	subs	r3, r3, r2
 8019a0a:	8043      	strh	r3, [r0, #2]
 8019a0c:	88c3      	ldrh	r3, [r0, #6]
 8019a0e:	80c1      	strh	r1, [r0, #6]
 8019a10:	8083      	strh	r3, [r0, #4]
 8019a12:	4770      	bx	lr
 8019a14:	20011f24 	.word	0x20011f24
 8019a18:	20011f20 	.word	0x20011f20

08019a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019a1c:	b510      	push	{r4, lr}
 8019a1e:	4b07      	ldr	r3, [pc, #28]	@ (8019a3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019a20:	781b      	ldrb	r3, [r3, #0]
 8019a22:	2b01      	cmp	r3, #1
 8019a24:	d108      	bne.n	8019a38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019a26:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019a2a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019a2e:	8003      	strh	r3, [r0, #0]
 8019a30:	8893      	ldrh	r3, [r2, #4]
 8019a32:	3b01      	subs	r3, #1
 8019a34:	1b1b      	subs	r3, r3, r4
 8019a36:	800b      	strh	r3, [r1, #0]
 8019a38:	bd10      	pop	{r4, pc}
 8019a3a:	bf00      	nop
 8019a3c:	20011f24 	.word	0x20011f24

08019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019a40:	b510      	push	{r4, lr}
 8019a42:	4b0a      	ldr	r3, [pc, #40]	@ (8019a6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019a44:	460a      	mov	r2, r1
 8019a46:	781b      	ldrb	r3, [r3, #0]
 8019a48:	2b01      	cmp	r3, #1
 8019a4a:	d10d      	bne.n	8019a68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019a4c:	8881      	ldrh	r1, [r0, #4]
 8019a4e:	8803      	ldrh	r3, [r0, #0]
 8019a50:	440b      	add	r3, r1
 8019a52:	4601      	mov	r1, r0
 8019a54:	3b01      	subs	r3, #1
 8019a56:	f821 3b02 	strh.w	r3, [r1], #2
 8019a5a:	f7ff ffdf 	bl	8019a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019a5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019a62:	88c2      	ldrh	r2, [r0, #6]
 8019a64:	80c3      	strh	r3, [r0, #6]
 8019a66:	8082      	strh	r2, [r0, #4]
 8019a68:	bd10      	pop	{r4, pc}
 8019a6a:	bf00      	nop
 8019a6c:	20011f24 	.word	0x20011f24

08019a70 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019a70:	2100      	movs	r1, #0
 8019a72:	4b06      	ldr	r3, [pc, #24]	@ (8019a8c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019a74:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8019a78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a7c:	4b04      	ldr	r3, [pc, #16]	@ (8019a90 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019a7e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8019a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a86:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8019a8a:	4770      	bx	lr
 8019a8c:	20011f20 	.word	0x20011f20
 8019a90:	20011f22 	.word	0x20011f22

08019a94 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019a94:	4b03      	ldr	r3, [pc, #12]	@ (8019aa4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019a96:	6818      	ldr	r0, [r3, #0]
 8019a98:	b110      	cbz	r0, 8019aa0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019a9a:	6803      	ldr	r3, [r0, #0]
 8019a9c:	699b      	ldr	r3, [r3, #24]
 8019a9e:	4718      	bx	r3
 8019aa0:	4770      	bx	lr
 8019aa2:	bf00      	nop
 8019aa4:	20011f70 	.word	0x20011f70

08019aa8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019aa8:	4770      	bx	lr
	...

08019aac <_ZN8touchgfx11Application4drawEv>:
 8019aac:	b507      	push	{r0, r1, r2, lr}
 8019aae:	2100      	movs	r1, #0
 8019ab0:	4b08      	ldr	r3, [pc, #32]	@ (8019ad4 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019ab2:	9100      	str	r1, [sp, #0]
 8019ab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ab8:	4b07      	ldr	r3, [pc, #28]	@ (8019ad8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019aba:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ac2:	4669      	mov	r1, sp
 8019ac4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019ac8:	6803      	ldr	r3, [r0, #0]
 8019aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019acc:	4798      	blx	r3
 8019ace:	b003      	add	sp, #12
 8019ad0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ad4:	20011f20 	.word	0x20011f20
 8019ad8:	20011f22 	.word	0x20011f22

08019adc <_ZN8touchgfx11Application10invalidateEv>:
 8019adc:	2100      	movs	r1, #0
 8019ade:	4b09      	ldr	r3, [pc, #36]	@ (8019b04 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019ae0:	b082      	sub	sp, #8
 8019ae2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ae6:	4b08      	ldr	r3, [pc, #32]	@ (8019b08 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8019ae8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019af0:	9100      	str	r1, [sp, #0]
 8019af2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019af6:	6803      	ldr	r3, [r0, #0]
 8019af8:	aa02      	add	r2, sp, #8
 8019afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019afc:	e912 0006 	ldmdb	r2, {r1, r2}
 8019b00:	b002      	add	sp, #8
 8019b02:	4718      	bx	r3
 8019b04:	20011f20 	.word	0x20011f20
 8019b08:	20011f22 	.word	0x20011f22

08019b0c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019b0c:	4b03      	ldr	r3, [pc, #12]	@ (8019b1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019b0e:	6818      	ldr	r0, [r3, #0]
 8019b10:	b110      	cbz	r0, 8019b18 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019b12:	6803      	ldr	r3, [r0, #0]
 8019b14:	69db      	ldr	r3, [r3, #28]
 8019b16:	4718      	bx	r3
 8019b18:	4770      	bx	lr
 8019b1a:	bf00      	nop
 8019b1c:	20011f70 	.word	0x20011f70

08019b20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019b20:	4b03      	ldr	r3, [pc, #12]	@ (8019b30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019b22:	6818      	ldr	r0, [r3, #0]
 8019b24:	b110      	cbz	r0, 8019b2c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019b26:	6803      	ldr	r3, [r0, #0]
 8019b28:	6a1b      	ldr	r3, [r3, #32]
 8019b2a:	4718      	bx	r3
 8019b2c:	4770      	bx	lr
 8019b2e:	bf00      	nop
 8019b30:	20011f70 	.word	0x20011f70

08019b34 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019b34:	2300      	movs	r3, #0
 8019b36:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8019b3a:	4770      	bx	lr

08019b3c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019b3c:	4b03      	ldr	r3, [pc, #12]	@ (8019b4c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019b3e:	6818      	ldr	r0, [r3, #0]
 8019b40:	b110      	cbz	r0, 8019b48 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019b42:	6803      	ldr	r3, [r0, #0]
 8019b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b46:	4718      	bx	r3
 8019b48:	4770      	bx	lr
 8019b4a:	bf00      	nop
 8019b4c:	20011f70 	.word	0x20011f70

08019b50 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019b50:	b510      	push	{r4, lr}
 8019b52:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019b56:	888a      	ldrh	r2, [r1, #4]
 8019b58:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019b5c:	4422      	add	r2, r4
 8019b5e:	b212      	sxth	r2, r2
 8019b60:	4293      	cmp	r3, r2
 8019b62:	da15      	bge.n	8019b90 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019b64:	8882      	ldrh	r2, [r0, #4]
 8019b66:	4413      	add	r3, r2
 8019b68:	b21b      	sxth	r3, r3
 8019b6a:	429c      	cmp	r4, r3
 8019b6c:	da10      	bge.n	8019b90 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019b6e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019b72:	88c9      	ldrh	r1, [r1, #6]
 8019b74:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019b78:	4419      	add	r1, r3
 8019b7a:	b209      	sxth	r1, r1
 8019b7c:	428a      	cmp	r2, r1
 8019b7e:	da07      	bge.n	8019b90 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019b80:	88c0      	ldrh	r0, [r0, #6]
 8019b82:	4410      	add	r0, r2
 8019b84:	b200      	sxth	r0, r0
 8019b86:	4283      	cmp	r3, r0
 8019b88:	bfac      	ite	ge
 8019b8a:	2000      	movge	r0, #0
 8019b8c:	2001      	movlt	r0, #1
 8019b8e:	bd10      	pop	{r4, pc}
 8019b90:	2000      	movs	r0, #0
 8019b92:	e7fc      	b.n	8019b8e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019b94 <_ZN8touchgfx4Rect10restrictToEss>:
 8019b94:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019b98:	b510      	push	{r4, lr}
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	da04      	bge.n	8019ba8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019b9e:	8884      	ldrh	r4, [r0, #4]
 8019ba0:	4423      	add	r3, r4
 8019ba2:	8083      	strh	r3, [r0, #4]
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	8003      	strh	r3, [r0, #0]
 8019ba8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019bac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019bb0:	1b09      	subs	r1, r1, r4
 8019bb2:	428b      	cmp	r3, r1
 8019bb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019bb8:	bfc8      	it	gt
 8019bba:	8081      	strhgt	r1, [r0, #4]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	da04      	bge.n	8019bca <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019bc0:	88c1      	ldrh	r1, [r0, #6]
 8019bc2:	440b      	add	r3, r1
 8019bc4:	80c3      	strh	r3, [r0, #6]
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	8043      	strh	r3, [r0, #2]
 8019bca:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019bce:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019bd2:	1a52      	subs	r2, r2, r1
 8019bd4:	4293      	cmp	r3, r2
 8019bd6:	bfc8      	it	gt
 8019bd8:	80c2      	strhgt	r2, [r0, #6]
 8019bda:	bd10      	pop	{r4, pc}

08019bdc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019bdc:	b510      	push	{r4, lr}
 8019bde:	460c      	mov	r4, r1
 8019be0:	4b0f      	ldr	r3, [pc, #60]	@ (8019c20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019be2:	4620      	mov	r0, r4
 8019be4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019be8:	4b0e      	ldr	r3, [pc, #56]	@ (8019c24 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019bea:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019bee:	f7ff ffd1 	bl	8019b94 <_ZN8touchgfx4Rect10restrictToEss>
 8019bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8019c28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019bf4:	6818      	ldr	r0, [r3, #0]
 8019bf6:	b190      	cbz	r0, 8019c1e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019bf8:	6803      	ldr	r3, [r0, #0]
 8019bfa:	4621      	mov	r1, r4
 8019bfc:	689b      	ldr	r3, [r3, #8]
 8019bfe:	4798      	blx	r3
 8019c00:	4b0a      	ldr	r3, [pc, #40]	@ (8019c2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8019c02:	6818      	ldr	r0, [r3, #0]
 8019c04:	b118      	cbz	r0, 8019c0e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8019c06:	6803      	ldr	r3, [r0, #0]
 8019c08:	4621      	mov	r1, r4
 8019c0a:	689b      	ldr	r3, [r3, #8]
 8019c0c:	4798      	blx	r3
 8019c0e:	4b08      	ldr	r3, [pc, #32]	@ (8019c30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019c10:	4621      	mov	r1, r4
 8019c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c16:	6818      	ldr	r0, [r3, #0]
 8019c18:	6803      	ldr	r3, [r0, #0]
 8019c1a:	69db      	ldr	r3, [r3, #28]
 8019c1c:	4718      	bx	r3
 8019c1e:	bd10      	pop	{r4, pc}
 8019c20:	20011f22 	.word	0x20011f22
 8019c24:	20011f20 	.word	0x20011f20
 8019c28:	20011f70 	.word	0x20011f70
 8019c2c:	20011f6c 	.word	0x20011f6c
 8019c30:	20011f2c 	.word	0x20011f2c

08019c34 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c36:	4606      	mov	r6, r0
 8019c38:	4608      	mov	r0, r1
 8019c3a:	460f      	mov	r7, r1
 8019c3c:	f7fa fe25 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019c40:	b9e8      	cbnz	r0, 8019c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019c42:	f9b7 5000 	ldrsh.w	r5, [r7]
 8019c46:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019c4a:	42a5      	cmp	r5, r4
 8019c4c:	db17      	blt.n	8019c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019c4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019c52:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019c56:	429a      	cmp	r2, r3
 8019c58:	db11      	blt.n	8019c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019c5a:	88b9      	ldrh	r1, [r7, #4]
 8019c5c:	440d      	add	r5, r1
 8019c5e:	88b1      	ldrh	r1, [r6, #4]
 8019c60:	b22d      	sxth	r5, r5
 8019c62:	440c      	add	r4, r1
 8019c64:	b224      	sxth	r4, r4
 8019c66:	42a5      	cmp	r5, r4
 8019c68:	dc09      	bgt.n	8019c7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019c6a:	88f8      	ldrh	r0, [r7, #6]
 8019c6c:	4410      	add	r0, r2
 8019c6e:	88f2      	ldrh	r2, [r6, #6]
 8019c70:	b200      	sxth	r0, r0
 8019c72:	4413      	add	r3, r2
 8019c74:	b21b      	sxth	r3, r3
 8019c76:	4298      	cmp	r0, r3
 8019c78:	bfcc      	ite	gt
 8019c7a:	2000      	movgt	r0, #0
 8019c7c:	2001      	movle	r0, #1
 8019c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019c80 <_ZN8touchgfx11Application11getInstanceEv>:
 8019c80:	4b01      	ldr	r3, [pc, #4]	@ (8019c88 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019c82:	6818      	ldr	r0, [r3, #0]
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop
 8019c88:	20011f80 	.word	0x20011f80

08019c8c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	b510      	push	{r4, lr}
 8019c90:	4604      	mov	r4, r0
 8019c92:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8019c96:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8019c9a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8019c9e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8019ca2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8019ca6:	429a      	cmp	r2, r3
 8019ca8:	d90e      	bls.n	8019cc8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8019caa:	18e2      	adds	r2, r4, r3
 8019cac:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8019cb0:	b122      	cbz	r2, 8019cbc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8019cb2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8019cb6:	6803      	ldr	r3, [r0, #0]
 8019cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019cba:	4798      	blx	r3
 8019cbc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8019cc0:	3301      	adds	r3, #1
 8019cc2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019cc6:	e7ea      	b.n	8019c9e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8019cc8:	bd10      	pop	{r4, pc}

08019cca <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8019cca:	2300      	movs	r3, #0
 8019ccc:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8019cd0:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8019cd4:	30a4      	adds	r0, #164	@ 0xa4
 8019cd6:	f802 3b01 	strb.w	r3, [r2], #1
 8019cda:	4282      	cmp	r2, r0
 8019cdc:	d1fb      	bne.n	8019cd6 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8019cde:	4770      	bx	lr

08019ce0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019ce0:	b570      	push	{r4, r5, r6, lr}
 8019ce2:	4c0b      	ldr	r4, [pc, #44]	@ (8019d10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019ce4:	4605      	mov	r5, r0
 8019ce6:	6820      	ldr	r0, [r4, #0]
 8019ce8:	460e      	mov	r6, r1
 8019cea:	b110      	cbz	r0, 8019cf2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8019cec:	6803      	ldr	r3, [r0, #0]
 8019cee:	695b      	ldr	r3, [r3, #20]
 8019cf0:	4798      	blx	r3
 8019cf2:	1d28      	adds	r0, r5, #4
 8019cf4:	f7ff ffe9 	bl	8019cca <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019cf8:	6026      	str	r6, [r4, #0]
 8019cfa:	6833      	ldr	r3, [r6, #0]
 8019cfc:	4630      	mov	r0, r6
 8019cfe:	68db      	ldr	r3, [r3, #12]
 8019d00:	4798      	blx	r3
 8019d02:	682b      	ldr	r3, [r5, #0]
 8019d04:	4628      	mov	r0, r5
 8019d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019d0c:	4718      	bx	r3
 8019d0e:	bf00      	nop
 8019d10:	20011f70 	.word	0x20011f70

08019d14 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019d14:	2300      	movs	r3, #0
 8019d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d18:	461a      	mov	r2, r3
 8019d1a:	461c      	mov	r4, r3
 8019d1c:	461d      	mov	r5, r3
 8019d1e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8019d22:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8019d26:	459c      	cmp	ip, r3
 8019d28:	dd1a      	ble.n	8019d60 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8019d2a:	18c6      	adds	r6, r0, r3
 8019d2c:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8019d30:	b16e      	cbz	r6, 8019d4e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8019d32:	429a      	cmp	r2, r3
 8019d34:	d008      	beq.n	8019d48 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8019d36:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8019d3a:	fa1f fe82 	uxth.w	lr, r2
 8019d3e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8019d42:	1887      	adds	r7, r0, r2
 8019d44:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8019d48:	3201      	adds	r2, #1
 8019d4a:	3301      	adds	r3, #1
 8019d4c:	e7eb      	b.n	8019d26 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8019d4e:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8019d52:	4299      	cmp	r1, r3
 8019d54:	bfa8      	it	ge
 8019d56:	3501      	addge	r5, #1
 8019d58:	429e      	cmp	r6, r3
 8019d5a:	bfc8      	it	gt
 8019d5c:	3401      	addgt	r4, #1
 8019d5e:	e7f4      	b.n	8019d4a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8019d60:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8019d64:	1b49      	subs	r1, r1, r5
 8019d66:	1b1b      	subs	r3, r3, r4
 8019d68:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8019d6c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8019d70:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8019d74:	4293      	cmp	r3, r2
 8019d76:	dd03      	ble.n	8019d80 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8019d78:	3b01      	subs	r3, #1
 8019d7a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8019d7e:	e7f7      	b.n	8019d70 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8019d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019d84 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019d84:	b570      	push	{r4, r5, r6, lr}
 8019d86:	4d16      	ldr	r5, [pc, #88]	@ (8019de0 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8019d88:	4604      	mov	r4, r0
 8019d8a:	6828      	ldr	r0, [r5, #0]
 8019d8c:	b140      	cbz	r0, 8019da0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019d8e:	7a03      	ldrb	r3, [r0, #8]
 8019d90:	b933      	cbnz	r3, 8019da0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019d92:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8019d96:	6803      	ldr	r3, [r0, #0]
 8019d98:	689b      	ldr	r3, [r3, #8]
 8019d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d9e:	4718      	bx	r3
 8019da0:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8019da4:	4e0f      	ldr	r6, [pc, #60]	@ (8019de4 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8019da6:	b973      	cbnz	r3, 8019dc6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019da8:	b168      	cbz	r0, 8019dc6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019daa:	7a03      	ldrb	r3, [r0, #8]
 8019dac:	b15b      	cbz	r3, 8019dc6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019dae:	6830      	ldr	r0, [r6, #0]
 8019db0:	b110      	cbz	r0, 8019db8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019db2:	6803      	ldr	r3, [r0, #0]
 8019db4:	691b      	ldr	r3, [r3, #16]
 8019db6:	4798      	blx	r3
 8019db8:	6828      	ldr	r0, [r5, #0]
 8019dba:	6803      	ldr	r3, [r0, #0]
 8019dbc:	68db      	ldr	r3, [r3, #12]
 8019dbe:	4798      	blx	r3
 8019dc0:	2301      	movs	r3, #1
 8019dc2:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8019dc6:	3404      	adds	r4, #4
 8019dc8:	4620      	mov	r0, r4
 8019dca:	f7ff ff5f 	bl	8019c8c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8019dce:	4620      	mov	r0, r4
 8019dd0:	f7ff ffa0 	bl	8019d14 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8019dd4:	6830      	ldr	r0, [r6, #0]
 8019dd6:	b110      	cbz	r0, 8019dde <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8019dd8:	6803      	ldr	r3, [r0, #0]
 8019dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ddc:	e7dd      	b.n	8019d9a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019dde:	bd70      	pop	{r4, r5, r6, pc}
 8019de0:	20011f74 	.word	0x20011f74
 8019de4:	20011f70 	.word	0x20011f70

08019de8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019de8:	4603      	mov	r3, r0
 8019dea:	2200      	movs	r2, #0
 8019dec:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8019df0:	801a      	strh	r2, [r3, #0]
 8019df2:	805a      	strh	r2, [r3, #2]
 8019df4:	809a      	strh	r2, [r3, #4]
 8019df6:	80da      	strh	r2, [r3, #6]
 8019df8:	3308      	adds	r3, #8
 8019dfa:	428b      	cmp	r3, r1
 8019dfc:	d1f8      	bne.n	8019df0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019dfe:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8019e02:	4770      	bx	lr

08019e04 <_ZN8touchgfx11ApplicationC1Ev>:
 8019e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e06:	4606      	mov	r6, r0
 8019e08:	4604      	mov	r4, r0
 8019e0a:	2500      	movs	r5, #0
 8019e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8019e7c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019e0e:	22a8      	movs	r2, #168	@ 0xa8
 8019e10:	f846 3b04 	str.w	r3, [r6], #4
 8019e14:	2100      	movs	r1, #0
 8019e16:	4630      	mov	r0, r6
 8019e18:	f012 f857 	bl	802beca <memset>
 8019e1c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8019e20:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8019e24:	f7ff ffe0 	bl	8019de8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019e28:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8019e2c:	f7ff ffdc 	bl	8019de8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019e30:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8019e34:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8019e38:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8019e3c:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8019e40:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8019e44:	490e      	ldr	r1, [pc, #56]	@ (8019e80 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019e46:	480f      	ldr	r0, [pc, #60]	@ (8019e84 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019e48:	f011 f9ee 	bl	802b228 <CRC_Lock>
 8019e4c:	4f0e      	ldr	r7, [pc, #56]	@ (8019e88 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8019e8c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8019e50:	b158      	cbz	r0, 8019e6a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8019e52:	801d      	strh	r5, [r3, #0]
 8019e54:	2300      	movs	r3, #0
 8019e56:	4a0e      	ldr	r2, [pc, #56]	@ (8019e90 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8019e58:	4630      	mov	r0, r6
 8019e5a:	6013      	str	r3, [r2, #0]
 8019e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8019e94 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8019e5e:	603b      	str	r3, [r7, #0]
 8019e60:	6013      	str	r3, [r2, #0]
 8019e62:	f7ff ff32 	bl	8019cca <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019e66:	4620      	mov	r0, r4
 8019e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019e6e:	2002      	movs	r0, #2
 8019e70:	801a      	strh	r2, [r3, #0]
 8019e72:	6038      	str	r0, [r7, #0]
 8019e74:	f001 fb20 	bl	801b4b8 <_ZN8touchgfx6Screen4drawEv>
 8019e78:	e7ec      	b.n	8019e54 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8019e7a:	bf00      	nop
 8019e7c:	0802f92c 	.word	0x0802f92c
 8019e80:	b5e8b5cd 	.word	0xb5e8b5cd
 8019e84:	f407a5c2 	.word	0xf407a5c2
 8019e88:	20011f70 	.word	0x20011f70
 8019e8c:	20000024 	.word	0x20000024
 8019e90:	20011f80 	.word	0x20011f80
 8019e94:	20011f74 	.word	0x20011f74

08019e98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019e98:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8019e9c:	b510      	push	{r4, lr}
 8019e9e:	3b01      	subs	r3, #1
 8019ea0:	b29b      	uxth	r3, r3
 8019ea2:	428b      	cmp	r3, r1
 8019ea4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8019ea8:	d908      	bls.n	8019ebc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8019eaa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8019eae:	681a      	ldr	r2, [r3, #0]
 8019eb0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019eb4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019eb8:	685a      	ldr	r2, [r3, #4]
 8019eba:	6062      	str	r2, [r4, #4]
 8019ebc:	bd10      	pop	{r4, pc}
	...

08019ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec4:	4b8f      	ldr	r3, [pc, #572]	@ (801a104 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8019ec6:	b08f      	sub	sp, #60	@ 0x3c
 8019ec8:	ac0a      	add	r4, sp, #40	@ 0x28
 8019eca:	e884 0006 	stmia.w	r4, {r1, r2}
 8019ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ed2:	4b8d      	ldr	r3, [pc, #564]	@ (801a108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8019ed4:	4683      	mov	fp, r0
 8019ed6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019eda:	4620      	mov	r0, r4
 8019edc:	f7ff fe5a 	bl	8019b94 <_ZN8touchgfx4Rect10restrictToEss>
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	f7fa fcd2 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ee6:	2800      	cmp	r0, #0
 8019ee8:	d16a      	bne.n	8019fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019eea:	9403      	str	r4, [sp, #12]
 8019eec:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019ef0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019ef4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8019ef8:	35a4      	adds	r5, #164	@ 0xa4
 8019efa:	9301      	str	r3, [sp, #4]
 8019efc:	b15c      	cbz	r4, 8019f16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019efe:	4629      	mov	r1, r5
 8019f00:	9803      	ldr	r0, [sp, #12]
 8019f02:	f7ff fe97 	bl	8019c34 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019f06:	3c01      	subs	r4, #1
 8019f08:	b118      	cbz	r0, 8019f12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8019f0a:	b2a1      	uxth	r1, r4
 8019f0c:	9801      	ldr	r0, [sp, #4]
 8019f0e:	f7ff ffc3 	bl	8019e98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019f12:	3d08      	subs	r5, #8
 8019f14:	e7f2      	b.n	8019efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8019f16:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8019f1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019f1e:	9302      	str	r3, [sp, #8]
 8019f20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019f24:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8019f28:	f8cd a010 	str.w	sl, [sp, #16]
 8019f2c:	9306      	str	r3, [sp, #24]
 8019f2e:	445c      	add	r4, fp
 8019f30:	2500      	movs	r5, #0
 8019f32:	4626      	mov	r6, r4
 8019f34:	462f      	mov	r7, r5
 8019f36:	f8cd a014 	str.w	sl, [sp, #20]
 8019f3a:	9b05      	ldr	r3, [sp, #20]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d073      	beq.n	801a028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8019f40:	9903      	ldr	r1, [sp, #12]
 8019f42:	4630      	mov	r0, r6
 8019f44:	f7ff fe04 	bl	8019b50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019f48:	b350      	cbz	r0, 8019fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019f4a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8019f4e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8019f52:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8019f56:	45e6      	cmp	lr, ip
 8019f58:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019f5c:	db33      	blt.n	8019fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019f5e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019f62:	88b3      	ldrh	r3, [r6, #4]
 8019f64:	4472      	add	r2, lr
 8019f66:	4463      	add	r3, ip
 8019f68:	b212      	sxth	r2, r2
 8019f6a:	b21b      	sxth	r3, r3
 8019f6c:	429a      	cmp	r2, r3
 8019f6e:	dc2a      	bgt.n	8019fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019f70:	88f3      	ldrh	r3, [r6, #6]
 8019f72:	fa1f f289 	uxth.w	r2, r9
 8019f76:	4413      	add	r3, r2
 8019f78:	b29b      	uxth	r3, r3
 8019f7a:	45c8      	cmp	r8, r9
 8019f7c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019f80:	fa1f fc88 	uxth.w	ip, r8
 8019f84:	fa0f fe83 	sxth.w	lr, r3
 8019f88:	db0f      	blt.n	8019faa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019f8a:	eba3 030c 	sub.w	r3, r3, ip
 8019f8e:	1ac9      	subs	r1, r1, r3
 8019f90:	b209      	sxth	r1, r1
 8019f92:	2900      	cmp	r1, #0
 8019f94:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019f98:	dd12      	ble.n	8019fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019f9a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8019f9e:	4605      	mov	r5, r0
 8019fa0:	9b05      	ldr	r3, [sp, #20]
 8019fa2:	3e08      	subs	r6, #8
 8019fa4:	3b01      	subs	r3, #1
 8019fa6:	9305      	str	r3, [sp, #20]
 8019fa8:	e7c7      	b.n	8019f3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019faa:	4461      	add	r1, ip
 8019fac:	b209      	sxth	r1, r1
 8019fae:	4571      	cmp	r1, lr
 8019fb0:	dc38      	bgt.n	801a024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019fb2:	eba2 020c 	sub.w	r2, r2, ip
 8019fb6:	b212      	sxth	r2, r2
 8019fb8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8019fbc:	2a00      	cmp	r2, #0
 8019fbe:	dcee      	bgt.n	8019f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8019fc0:	b00f      	add	sp, #60	@ 0x3c
 8019fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fc6:	45c8      	cmp	r8, r9
 8019fc8:	db2c      	blt.n	801a024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019fca:	88f3      	ldrh	r3, [r6, #6]
 8019fcc:	4499      	add	r9, r3
 8019fce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8019fd2:	fa0f f989 	sxth.w	r9, r9
 8019fd6:	4498      	add	r8, r3
 8019fd8:	fa0f f888 	sxth.w	r8, r8
 8019fdc:	45c1      	cmp	r9, r8
 8019fde:	db21      	blt.n	801a024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019fe0:	88b3      	ldrh	r3, [r6, #4]
 8019fe2:	fa1f f28c 	uxth.w	r2, ip
 8019fe6:	4413      	add	r3, r2
 8019fe8:	b29b      	uxth	r3, r3
 8019fea:	45e6      	cmp	lr, ip
 8019fec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019ff0:	fa1f f88e 	uxth.w	r8, lr
 8019ff4:	fa0f f983 	sxth.w	r9, r3
 8019ff8:	db0a      	blt.n	801a010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8019ffa:	eba3 0308 	sub.w	r3, r3, r8
 8019ffe:	1ac9      	subs	r1, r1, r3
 801a000:	b209      	sxth	r1, r1
 801a002:	2900      	cmp	r1, #0
 801a004:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801a008:	ddda      	ble.n	8019fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a00a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801a00e:	e7c6      	b.n	8019f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a010:	4441      	add	r1, r8
 801a012:	b209      	sxth	r1, r1
 801a014:	4549      	cmp	r1, r9
 801a016:	dc05      	bgt.n	801a024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801a018:	eba2 0208 	sub.w	r2, r2, r8
 801a01c:	b212      	sxth	r2, r2
 801a01e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801a022:	e7cb      	b.n	8019fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801a024:	4607      	mov	r7, r0
 801a026:	e7bb      	b.n	8019fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a028:	2d00      	cmp	r5, #0
 801a02a:	d181      	bne.n	8019f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801a02c:	2f00      	cmp	r7, #0
 801a02e:	f000 81de 	beq.w	801a3ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801a032:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801a036:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801a03a:	b2b3      	uxth	r3, r6
 801a03c:	9305      	str	r3, [sp, #20]
 801a03e:	9a05      	ldr	r2, [sp, #20]
 801a040:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801a044:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801a048:	4413      	add	r3, r2
 801a04a:	b2ba      	uxth	r2, r7
 801a04c:	4492      	add	sl, r2
 801a04e:	b29b      	uxth	r3, r3
 801a050:	fa1f fa8a 	uxth.w	sl, sl
 801a054:	fa0f f883 	sxth.w	r8, r3
 801a058:	fa0f f98a 	sxth.w	r9, sl
 801a05c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801a060:	9b04      	ldr	r3, [sp, #16]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d052      	beq.n	801a10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801a066:	9903      	ldr	r1, [sp, #12]
 801a068:	4620      	mov	r0, r4
 801a06a:	f7ff fd71 	bl	8019b50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a06e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a072:	b1c0      	cbz	r0, 801a0a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a074:	f9b4 e000 	ldrsh.w	lr, [r4]
 801a078:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a07c:	4576      	cmp	r6, lr
 801a07e:	dc22      	bgt.n	801a0c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a080:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a084:	44f4      	add	ip, lr
 801a086:	fa0f fc8c 	sxth.w	ip, ip
 801a08a:	45e0      	cmp	r8, ip
 801a08c:	db1b      	blt.n	801a0c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a08e:	428f      	cmp	r7, r1
 801a090:	fa1f fc81 	uxth.w	ip, r1
 801a094:	88e1      	ldrh	r1, [r4, #6]
 801a096:	dc0d      	bgt.n	801a0b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801a098:	ebaa 0c0c 	sub.w	ip, sl, ip
 801a09c:	eba1 010c 	sub.w	r1, r1, ip
 801a0a0:	f8a4 9002 	strh.w	r9, [r4, #2]
 801a0a4:	80e1      	strh	r1, [r4, #6]
 801a0a6:	4628      	mov	r0, r5
 801a0a8:	9904      	ldr	r1, [sp, #16]
 801a0aa:	3c08      	subs	r4, #8
 801a0ac:	3901      	subs	r1, #1
 801a0ae:	9104      	str	r1, [sp, #16]
 801a0b0:	4605      	mov	r5, r0
 801a0b2:	e7d3      	b.n	801a05c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801a0b4:	4461      	add	r1, ip
 801a0b6:	b209      	sxth	r1, r1
 801a0b8:	4549      	cmp	r1, r9
 801a0ba:	dcf5      	bgt.n	801a0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a0bc:	eba2 0c0c 	sub.w	ip, r2, ip
 801a0c0:	f8a4 c006 	strh.w	ip, [r4, #6]
 801a0c4:	e7ef      	b.n	801a0a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a0c6:	428f      	cmp	r7, r1
 801a0c8:	dcee      	bgt.n	801a0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a0ca:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801a0ce:	4461      	add	r1, ip
 801a0d0:	b209      	sxth	r1, r1
 801a0d2:	4589      	cmp	r9, r1
 801a0d4:	dbe8      	blt.n	801a0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a0d6:	4576      	cmp	r6, lr
 801a0d8:	fa1f fc8e 	uxth.w	ip, lr
 801a0dc:	88a1      	ldrh	r1, [r4, #4]
 801a0de:	dc07      	bgt.n	801a0f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801a0e0:	eba3 0c0c 	sub.w	ip, r3, ip
 801a0e4:	eba1 010c 	sub.w	r1, r1, ip
 801a0e8:	f8a4 8000 	strh.w	r8, [r4]
 801a0ec:	80a1      	strh	r1, [r4, #4]
 801a0ee:	e7da      	b.n	801a0a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a0f0:	4461      	add	r1, ip
 801a0f2:	b209      	sxth	r1, r1
 801a0f4:	4588      	cmp	r8, r1
 801a0f6:	dbd7      	blt.n	801a0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801a0f8:	9905      	ldr	r1, [sp, #20]
 801a0fa:	eba1 0c0c 	sub.w	ip, r1, ip
 801a0fe:	f8a4 c004 	strh.w	ip, [r4, #4]
 801a102:	e7d0      	b.n	801a0a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a104:	20011f22 	.word	0x20011f22
 801a108:	20011f20 	.word	0x20011f20
 801a10c:	2d00      	cmp	r5, #0
 801a10e:	f000 816e 	beq.w	801a3ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801a112:	9b06      	ldr	r3, [sp, #24]
 801a114:	445b      	add	r3, fp
 801a116:	461c      	mov	r4, r3
 801a118:	9b02      	ldr	r3, [sp, #8]
 801a11a:	3301      	adds	r3, #1
 801a11c:	f000 8167 	beq.w	801a3ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801a120:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801a124:	4629      	mov	r1, r5
 801a126:	9803      	ldr	r0, [sp, #12]
 801a128:	f7ff fd84 	bl	8019c34 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a12c:	b120      	cbz	r0, 801a138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801a12e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a132:	9801      	ldr	r0, [sp, #4]
 801a134:	f7ff feb0 	bl	8019e98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a138:	9903      	ldr	r1, [sp, #12]
 801a13a:	4628      	mov	r0, r5
 801a13c:	f7ff fd08 	bl	8019b50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a140:	2800      	cmp	r0, #0
 801a142:	f000 809c 	beq.w	801a27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801a146:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801a14a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801a14e:	fa1f f189 	uxth.w	r1, r9
 801a152:	eb01 0c03 	add.w	ip, r1, r3
 801a156:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801a15a:	fa1f fa8c 	uxth.w	sl, ip
 801a15e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801a162:	9309      	str	r3, [sp, #36]	@ 0x24
 801a164:	b283      	uxth	r3, r0
 801a166:	eb03 050c 	add.w	r5, r3, ip
 801a16a:	b2ad      	uxth	r5, r5
 801a16c:	9505      	str	r5, [sp, #20]
 801a16e:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801a172:	4548      	cmp	r0, r9
 801a174:	9504      	str	r5, [sp, #16]
 801a176:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801a17a:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801a17e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801a182:	f340 8099 	ble.w	801a2b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801a186:	1a5b      	subs	r3, r3, r1
 801a188:	b29b      	uxth	r3, r3
 801a18a:	4596      	cmp	lr, r2
 801a18c:	fa0f f08a 	sxth.w	r0, sl
 801a190:	b21e      	sxth	r6, r3
 801a192:	dd2e      	ble.n	801a1f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801a194:	9f02      	ldr	r7, [sp, #8]
 801a196:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801a19a:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801a19e:	9f04      	ldr	r7, [sp, #16]
 801a1a0:	fa1f fe8e 	uxth.w	lr, lr
 801a1a4:	1a3f      	subs	r7, r7, r0
 801a1a6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801a1aa:	b292      	uxth	r2, r2
 801a1ac:	ebae 0102 	sub.w	r1, lr, r2
 801a1b0:	44a6      	add	lr, r4
 801a1b2:	4402      	add	r2, r0
 801a1b4:	b289      	uxth	r1, r1
 801a1b6:	fa0f fe8e 	sxth.w	lr, lr
 801a1ba:	b212      	sxth	r2, r2
 801a1bc:	b20d      	sxth	r5, r1
 801a1be:	ebae 0202 	sub.w	r2, lr, r2
 801a1c2:	436f      	muls	r7, r5
 801a1c4:	4372      	muls	r2, r6
 801a1c6:	4297      	cmp	r7, r2
 801a1c8:	db09      	blt.n	801a1de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801a1ca:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801a1ce:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801a1d2:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801a1d6:	449c      	add	ip, r3
 801a1d8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801a1dc:	e686      	b.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a1de:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801a1e2:	4421      	add	r1, r4
 801a1e4:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801a1e8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801a1ec:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801a1f0:	e67c      	b.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a1f2:	9f04      	ldr	r7, [sp, #16]
 801a1f4:	42b8      	cmp	r0, r7
 801a1f6:	da27      	bge.n	801a248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801a1f8:	9902      	ldr	r1, [sp, #8]
 801a1fa:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801a1fe:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801a202:	eb05 010e 	add.w	r1, r5, lr
 801a206:	fa1f f881 	uxth.w	r8, r1
 801a20a:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801a20e:	fa0f f988 	sxth.w	r9, r8
 801a212:	4411      	add	r1, r2
 801a214:	eba1 0108 	sub.w	r1, r1, r8
 801a218:	b289      	uxth	r1, r1
 801a21a:	fa0f f881 	sxth.w	r8, r1
 801a21e:	eba2 020e 	sub.w	r2, r2, lr
 801a222:	1a3f      	subs	r7, r7, r0
 801a224:	4372      	muls	r2, r6
 801a226:	fb08 f707 	mul.w	r7, r8, r7
 801a22a:	42ba      	cmp	r2, r7
 801a22c:	dc06      	bgt.n	801a23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801a22e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801a232:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801a236:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801a23a:	e7ca      	b.n	801a1d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801a23c:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801a240:	4429      	add	r1, r5
 801a242:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801a246:	e651      	b.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a248:	9805      	ldr	r0, [sp, #20]
 801a24a:	2d06      	cmp	r5, #6
 801a24c:	ebaa 0000 	sub.w	r0, sl, r0
 801a250:	b280      	uxth	r0, r0
 801a252:	fa0f fe80 	sxth.w	lr, r0
 801a256:	d817      	bhi.n	801a288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801a258:	9b04      	ldr	r3, [sp, #16]
 801a25a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801a25e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801a262:	1c6b      	adds	r3, r5, #1
 801a264:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801a268:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801a26c:	9b01      	ldr	r3, [sp, #4]
 801a26e:	9801      	ldr	r0, [sp, #4]
 801a270:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a274:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801a278:	805a      	strh	r2, [r3, #2]
 801a27a:	809e      	strh	r6, [r3, #4]
 801a27c:	80d9      	strh	r1, [r3, #6]
 801a27e:	9b02      	ldr	r3, [sp, #8]
 801a280:	3c08      	subs	r4, #8
 801a282:	3b01      	subs	r3, #1
 801a284:	9302      	str	r3, [sp, #8]
 801a286:	e747      	b.n	801a118 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801a288:	9a02      	ldr	r2, [sp, #8]
 801a28a:	45b6      	cmp	lr, r6
 801a28c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a290:	db0d      	blt.n	801a2ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a292:	449c      	add	ip, r3
 801a294:	fa1f fc8c 	uxth.w	ip, ip
 801a298:	445a      	add	r2, fp
 801a29a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801a29e:	448c      	add	ip, r1
 801a2a0:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801a2a4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801a2a8:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801a2ac:	e61e      	b.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a2ae:	445a      	add	r2, fp
 801a2b0:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801a2b4:	4484      	add	ip, r0
 801a2b6:	e78f      	b.n	801a1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a2b8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801a2bc:	fa1f f18e 	uxth.w	r1, lr
 801a2c0:	eb01 0806 	add.w	r8, r1, r6
 801a2c4:	b293      	uxth	r3, r2
 801a2c6:	fa1f f888 	uxth.w	r8, r8
 801a2ca:	9306      	str	r3, [sp, #24]
 801a2cc:	fa0f f388 	sxth.w	r3, r8
 801a2d0:	9307      	str	r3, [sp, #28]
 801a2d2:	9f06      	ldr	r7, [sp, #24]
 801a2d4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801a2d8:	4596      	cmp	lr, r2
 801a2da:	443b      	add	r3, r7
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	9308      	str	r3, [sp, #32]
 801a2e0:	da24      	bge.n	801a32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801a2e2:	9905      	ldr	r1, [sp, #20]
 801a2e4:	eba3 0308 	sub.w	r3, r3, r8
 801a2e8:	ebaa 0401 	sub.w	r4, sl, r1
 801a2ec:	b2a4      	uxth	r4, r4
 801a2ee:	b29b      	uxth	r3, r3
 801a2f0:	b225      	sxth	r5, r4
 801a2f2:	b219      	sxth	r1, r3
 801a2f4:	eba2 020e 	sub.w	r2, r2, lr
 801a2f8:	eba9 0000 	sub.w	r0, r9, r0
 801a2fc:	436a      	muls	r2, r5
 801a2fe:	4348      	muls	r0, r1
 801a300:	4282      	cmp	r2, r0
 801a302:	9a02      	ldr	r2, [sp, #8]
 801a304:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a308:	445a      	add	r2, fp
 801a30a:	dc06      	bgt.n	801a31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801a30c:	9b07      	ldr	r3, [sp, #28]
 801a30e:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801a312:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801a316:	44a4      	add	ip, r4
 801a318:	e75e      	b.n	801a1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a31a:	9904      	ldr	r1, [sp, #16]
 801a31c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801a320:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801a324:	4433      	add	r3, r6
 801a326:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a32a:	e5df      	b.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a32c:	9f06      	ldr	r7, [sp, #24]
 801a32e:	9b04      	ldr	r3, [sp, #16]
 801a330:	1bc9      	subs	r1, r1, r7
 801a332:	fa0f f78a 	sxth.w	r7, sl
 801a336:	b289      	uxth	r1, r1
 801a338:	429f      	cmp	r7, r3
 801a33a:	fa0f fe81 	sxth.w	lr, r1
 801a33e:	dd24      	ble.n	801a38a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 801a340:	9a05      	ldr	r2, [sp, #20]
 801a342:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a346:	ebaa 0202 	sub.w	r2, sl, r2
 801a34a:	9d07      	ldr	r5, [sp, #28]
 801a34c:	b292      	uxth	r2, r2
 801a34e:	eba5 0a03 	sub.w	sl, r5, r3
 801a352:	b214      	sxth	r4, r2
 801a354:	eba9 0000 	sub.w	r0, r9, r0
 801a358:	fb0e f000 	mul.w	r0, lr, r0
 801a35c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a360:	9b02      	ldr	r3, [sp, #8]
 801a362:	4550      	cmp	r0, sl
 801a364:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801a368:	445b      	add	r3, fp
 801a36a:	db03      	blt.n	801a374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 801a36c:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801a370:	4494      	add	ip, r2
 801a372:	e731      	b.n	801a1d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801a374:	9a04      	ldr	r2, [sp, #16]
 801a376:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801a37a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801a37e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801a382:	4431      	add	r1, r6
 801a384:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801a388:	e75b      	b.n	801a242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801a38a:	9b08      	ldr	r3, [sp, #32]
 801a38c:	2d06      	cmp	r5, #6
 801a38e:	eba3 0308 	sub.w	r3, r3, r8
 801a392:	b29b      	uxth	r3, r3
 801a394:	b218      	sxth	r0, r3
 801a396:	d813      	bhi.n	801a3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 801a398:	9b07      	ldr	r3, [sp, #28]
 801a39a:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801a39e:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801a3a2:	1c6b      	adds	r3, r5, #1
 801a3a4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801a3a8:	9b01      	ldr	r3, [sp, #4]
 801a3aa:	9901      	ldr	r1, [sp, #4]
 801a3ac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a3b0:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801a3b4:	805a      	strh	r2, [r3, #2]
 801a3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a3b8:	f8a3 e006 	strh.w	lr, [r3, #6]
 801a3bc:	809a      	strh	r2, [r3, #4]
 801a3be:	e75e      	b.n	801a27e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801a3c0:	9c02      	ldr	r4, [sp, #8]
 801a3c2:	4570      	cmp	r0, lr
 801a3c4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801a3c8:	db0d      	blt.n	801a3e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 801a3ca:	4431      	add	r1, r6
 801a3cc:	9b06      	ldr	r3, [sp, #24]
 801a3ce:	b289      	uxth	r1, r1
 801a3d0:	445c      	add	r4, fp
 801a3d2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801a3d6:	4419      	add	r1, r3
 801a3d8:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801a3dc:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801a3e0:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801a3e4:	e582      	b.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a3e6:	445c      	add	r4, fp
 801a3e8:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801a3ec:	e79a      	b.n	801a324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801a3ee:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801a3f2:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801a3f6:	1e65      	subs	r5, r4, #1
 801a3f8:	b2ad      	uxth	r5, r5
 801a3fa:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801a3fe:	42b5      	cmp	r5, r6
 801a400:	d044      	beq.n	801a48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5cc>
 801a402:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801a406:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801a40a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801a40e:	4282      	cmp	r2, r0
 801a410:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801a414:	d11f      	bne.n	801a456 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801a416:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801a41a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801a41e:	459c      	cmp	ip, r3
 801a420:	d119      	bne.n	801a456 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801a422:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801a426:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801a42a:	19d8      	adds	r0, r3, r7
 801a42c:	b200      	sxth	r0, r0
 801a42e:	4288      	cmp	r0, r1
 801a430:	d109      	bne.n	801a446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801a432:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801a436:	4413      	add	r3, r2
 801a438:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801a43c:	4629      	mov	r1, r5
 801a43e:	9801      	ldr	r0, [sp, #4]
 801a440:	f7ff fd2a 	bl	8019e98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a444:	e003      	b.n	801a44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801a446:	4411      	add	r1, r2
 801a448:	b209      	sxth	r1, r1
 801a44a:	42b9      	cmp	r1, r7
 801a44c:	d0f3      	beq.n	801a436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x576>
 801a44e:	3d01      	subs	r5, #1
 801a450:	b2ad      	uxth	r5, r5
 801a452:	3c08      	subs	r4, #8
 801a454:	e7d3      	b.n	801a3fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 801a456:	42b9      	cmp	r1, r7
 801a458:	d1f9      	bne.n	801a44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801a45a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801a45e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801a462:	4299      	cmp	r1, r3
 801a464:	d1f3      	bne.n	801a44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801a466:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801a46a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801a46e:	181f      	adds	r7, r3, r0
 801a470:	b23f      	sxth	r7, r7
 801a472:	42ba      	cmp	r2, r7
 801a474:	d105      	bne.n	801a482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c2>
 801a476:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801a47a:	440b      	add	r3, r1
 801a47c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a480:	e7dc      	b.n	801a43c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 801a482:	440a      	add	r2, r1
 801a484:	b212      	sxth	r2, r2
 801a486:	4290      	cmp	r0, r2
 801a488:	d1e1      	bne.n	801a44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801a48a:	e7f6      	b.n	801a47a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ba>
 801a48c:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801a490:	2e07      	cmp	r6, #7
 801a492:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801a496:	d812      	bhi.n	801a4be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801a498:	1c75      	adds	r5, r6, #1
 801a49a:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801a49e:	9d01      	ldr	r5, [sp, #4]
 801a4a0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801a4a4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801a4a8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801a4ac:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801a4b0:	442c      	add	r4, r5
 801a4b2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a4b6:	8061      	strh	r1, [r4, #2]
 801a4b8:	80a2      	strh	r2, [r4, #4]
 801a4ba:	80e3      	strh	r3, [r4, #6]
 801a4bc:	e580      	b.n	8019fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a4be:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801a4c2:	f04f 37ff 	mov.w	r7, #4294967295
 801a4c6:	2500      	movs	r5, #0
 801a4c8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801a4cc:	3e01      	subs	r6, #1
 801a4ce:	445c      	add	r4, fp
 801a4d0:	9305      	str	r3, [sp, #20]
 801a4d2:	1e72      	subs	r2, r6, #1
 801a4d4:	4691      	mov	r9, r2
 801a4d6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801a4da:	9302      	str	r3, [sp, #8]
 801a4dc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801a4e0:	9304      	str	r3, [sp, #16]
 801a4e2:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801a4e6:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a4ea:	bf16      	itet	ne
 801a4ec:	9905      	ldrne	r1, [sp, #20]
 801a4ee:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a4f2:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a4f6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a4fa:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a4fe:	6818      	ldr	r0, [r3, #0]
 801a500:	fb18 f801 	smulbb	r8, r8, r1
 801a504:	6859      	ldr	r1, [r3, #4]
 801a506:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a50a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a50e:	4671      	mov	r1, lr
 801a510:	a80c      	add	r0, sp, #48	@ 0x30
 801a512:	9207      	str	r2, [sp, #28]
 801a514:	9306      	str	r3, [sp, #24]
 801a516:	f7fb fe95 	bl	8016244 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a51a:	f04f 0c08 	mov.w	ip, #8
 801a51e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a522:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a526:	9b04      	ldr	r3, [sp, #16]
 801a528:	9a02      	ldr	r2, [sp, #8]
 801a52a:	fb10 f001 	smulbb	r0, r0, r1
 801a52e:	fb02 8803 	mla	r8, r2, r3, r8
 801a532:	eba0 0108 	sub.w	r1, r0, r8
 801a536:	fb90 f0fc 	sdiv	r0, r0, ip
 801a53a:	4288      	cmp	r0, r1
 801a53c:	dc20      	bgt.n	801a580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801a53e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a542:	4551      	cmp	r1, sl
 801a544:	da03      	bge.n	801a54e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 801a546:	b1d9      	cbz	r1, 801a580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801a548:	468a      	mov	sl, r1
 801a54a:	464f      	mov	r7, r9
 801a54c:	4635      	mov	r5, r6
 801a54e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a552:	f119 0f02 	cmn.w	r9, #2
 801a556:	d1c6      	bne.n	801a4e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801a558:	4616      	mov	r6, r2
 801a55a:	3201      	adds	r2, #1
 801a55c:	f1a4 0408 	sub.w	r4, r4, #8
 801a560:	d1b7      	bne.n	801a4d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 801a562:	9b01      	ldr	r3, [sp, #4]
 801a564:	b2ac      	uxth	r4, r5
 801a566:	00ed      	lsls	r5, r5, #3
 801a568:	1958      	adds	r0, r3, r5
 801a56a:	1c7b      	adds	r3, r7, #1
 801a56c:	d10b      	bne.n	801a586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 801a56e:	4601      	mov	r1, r0
 801a570:	9803      	ldr	r0, [sp, #12]
 801a572:	f7fb fe67 	bl	8016244 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a576:	4621      	mov	r1, r4
 801a578:	9801      	ldr	r0, [sp, #4]
 801a57a:	f7ff fc8d 	bl	8019e98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a57e:	e4b5      	b.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a580:	464f      	mov	r7, r9
 801a582:	4635      	mov	r5, r6
 801a584:	e7ed      	b.n	801a562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801a586:	9b01      	ldr	r3, [sp, #4]
 801a588:	00ff      	lsls	r7, r7, #3
 801a58a:	19d9      	adds	r1, r3, r7
 801a58c:	f7fb fe5a 	bl	8016244 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a590:	9b03      	ldr	r3, [sp, #12]
 801a592:	445f      	add	r7, fp
 801a594:	cb03      	ldmia	r3!, {r0, r1}
 801a596:	445d      	add	r5, fp
 801a598:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801a59c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801a5a0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801a5a4:	9b03      	ldr	r3, [sp, #12]
 801a5a6:	6869      	ldr	r1, [r5, #4]
 801a5a8:	c303      	stmia	r3!, {r0, r1}
 801a5aa:	e7e4      	b.n	801a576 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0801a5ac <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5b0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801a5b4:	b09b      	sub	sp, #108	@ 0x6c
 801a5b6:	4604      	mov	r4, r0
 801a5b8:	4630      	mov	r0, r6
 801a5ba:	f7fa f966 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a5be:	4605      	mov	r5, r0
 801a5c0:	b948      	cbnz	r0, 801a5d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801a5c2:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a5c6:	6823      	ldr	r3, [r4, #0]
 801a5c8:	4620      	mov	r0, r4
 801a5ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a5cc:	4798      	blx	r3
 801a5ce:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801a5d2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801a5d6:	4bc6      	ldr	r3, [pc, #792]	@ (801a8f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d03f      	beq.n	801a65e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a5de:	4dc5      	ldr	r5, [pc, #788]	@ (801a8f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801a5e0:	4628      	mov	r0, r5
 801a5e2:	f7fa f952 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a5e6:	4606      	mov	r6, r0
 801a5e8:	2800      	cmp	r0, #0
 801a5ea:	d138      	bne.n	801a65e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a5ec:	4628      	mov	r0, r5
 801a5ee:	f7ff f9e5 	bl	80199bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	6829      	ldr	r1, [r5, #0]
 801a5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a5f8:	686a      	ldr	r2, [r5, #4]
 801a5fa:	4620      	mov	r0, r4
 801a5fc:	4798      	blx	r3
 801a5fe:	802e      	strh	r6, [r5, #0]
 801a600:	806e      	strh	r6, [r5, #2]
 801a602:	80ae      	strh	r6, [r5, #4]
 801a604:	80ee      	strh	r6, [r5, #6]
 801a606:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801a60a:	4dbb      	ldr	r5, [pc, #748]	@ (801a8f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a60c:	4640      	mov	r0, r8
 801a60e:	f7ff fbeb 	bl	8019de8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a612:	882e      	ldrh	r6, [r5, #0]
 801a614:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801a618:	4633      	mov	r3, r6
 801a61a:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801a61e:	42bb      	cmp	r3, r7
 801a620:	d224      	bcs.n	801a66c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a622:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801a626:	2907      	cmp	r1, #7
 801a628:	d816      	bhi.n	801a658 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801a62a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a62e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801a632:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801a636:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801a63a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801a63e:	1c4a      	adds	r2, r1, #1
 801a640:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801a644:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801a648:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801a64c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801a650:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a654:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a658:	3301      	adds	r3, #1
 801a65a:	b29b      	uxth	r3, r3
 801a65c:	e7df      	b.n	801a61e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801a65e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a662:	2b00      	cmp	r3, #0
 801a664:	d1cf      	bne.n	801a606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801a666:	b01b      	add	sp, #108	@ 0x6c
 801a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a66c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801a670:	42b3      	cmp	r3, r6
 801a672:	d90c      	bls.n	801a68e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801a674:	6822      	ldr	r2, [r4, #0]
 801a676:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a67a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801a67c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801a680:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801a684:	4620      	mov	r0, r4
 801a686:	3601      	adds	r6, #1
 801a688:	47b8      	blx	r7
 801a68a:	b2b6      	uxth	r6, r6
 801a68c:	e7ee      	b.n	801a66c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a68e:	4a9b      	ldr	r2, [pc, #620]	@ (801a8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a690:	6813      	ldr	r3, [r2, #0]
 801a692:	4691      	mov	r9, r2
 801a694:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801a698:	2b01      	cmp	r3, #1
 801a69a:	f040 80e2 	bne.w	801a862 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801a69e:	2600      	movs	r6, #0
 801a6a0:	8829      	ldrh	r1, [r5, #0]
 801a6a2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801a6a6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801a6aa:	33ae      	adds	r3, #174	@ 0xae
 801a6ac:	428f      	cmp	r7, r1
 801a6ae:	f103 0308 	add.w	r3, r3, #8
 801a6b2:	dd0a      	ble.n	801a6ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801a6b4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801a6b8:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801a6bc:	3101      	adds	r1, #1
 801a6be:	4402      	add	r2, r0
 801a6c0:	b212      	sxth	r2, r2
 801a6c2:	4296      	cmp	r6, r2
 801a6c4:	bfb8      	it	lt
 801a6c6:	4616      	movlt	r6, r2
 801a6c8:	e7f0      	b.n	801a6ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801a6ca:	4b8d      	ldr	r3, [pc, #564]	@ (801a900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801a6cc:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 801a8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 801a6d0:	881b      	ldrh	r3, [r3, #0]
 801a6d2:	2b0f      	cmp	r3, #15
 801a6d4:	bf88      	it	hi
 801a6d6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801a6da:	f04f 0300 	mov.w	r3, #0
 801a6de:	bf98      	it	ls
 801a6e0:	f04f 0b01 	movls.w	fp, #1
 801a6e4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a6e8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801a6ec:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801a6f0:	4b82      	ldr	r3, [pc, #520]	@ (801a8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a6f2:	4438      	add	r0, r7
 801a6f4:	b207      	sxth	r7, r0
 801a6f6:	6818      	ldr	r0, [r3, #0]
 801a6f8:	42b7      	cmp	r7, r6
 801a6fa:	6803      	ldr	r3, [r0, #0]
 801a6fc:	f280 8083 	bge.w	801a806 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a700:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a704:	4798      	blx	r3
 801a706:	eb07 030b 	add.w	r3, r7, fp
 801a70a:	4298      	cmp	r0, r3
 801a70c:	da07      	bge.n	801a71e <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801a70e:	42b0      	cmp	r0, r6
 801a710:	da05      	bge.n	801a71e <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801a712:	4287      	cmp	r7, r0
 801a714:	dd6c      	ble.n	801a7f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a716:	2f00      	cmp	r7, #0
 801a718:	dd6a      	ble.n	801a7f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801a71a:	4630      	mov	r0, r6
 801a71c:	e004      	b.n	801a728 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801a71e:	4287      	cmp	r7, r0
 801a720:	dcfb      	bgt.n	801a71a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801a722:	42b0      	cmp	r0, r6
 801a724:	bfa8      	it	ge
 801a726:	4630      	movge	r0, r6
 801a728:	2200      	movs	r2, #0
 801a72a:	4b76      	ldr	r3, [pc, #472]	@ (801a904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801a72c:	1bc0      	subs	r0, r0, r7
 801a72e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a732:	f8ad 7016 	strh.w	r7, [sp, #22]
 801a736:	882f      	ldrh	r7, [r5, #0]
 801a738:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a73c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a740:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a744:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a748:	42bb      	cmp	r3, r7
 801a74a:	d9cd      	bls.n	801a6e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801a74c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801a750:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a754:	ab07      	add	r3, sp, #28
 801a756:	6851      	ldr	r1, [r2, #4]
 801a758:	c303      	stmia	r3!, {r0, r1}
 801a75a:	a905      	add	r1, sp, #20
 801a75c:	a807      	add	r0, sp, #28
 801a75e:	f7ff f9f7 	bl	8019b50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a762:	2800      	cmp	r0, #0
 801a764:	d04c      	beq.n	801a800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801a766:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a76a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801a76e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801a772:	4686      	mov	lr, r0
 801a774:	4290      	cmp	r0, r2
 801a776:	4450      	add	r0, sl
 801a778:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801a77c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a780:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a784:	bfb8      	it	lt
 801a786:	4696      	movlt	lr, r2
 801a788:	4452      	add	r2, sl
 801a78a:	4299      	cmp	r1, r3
 801a78c:	b280      	uxth	r0, r0
 801a78e:	b292      	uxth	r2, r2
 801a790:	468c      	mov	ip, r1
 801a792:	9302      	str	r3, [sp, #8]
 801a794:	bfb8      	it	lt
 801a796:	469c      	movlt	ip, r3
 801a798:	fa0f fa82 	sxth.w	sl, r2
 801a79c:	b203      	sxth	r3, r0
 801a79e:	4553      	cmp	r3, sl
 801a7a0:	bfb8      	it	lt
 801a7a2:	4602      	movlt	r2, r0
 801a7a4:	eba2 020e 	sub.w	r2, r2, lr
 801a7a8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a7ac:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801a7b0:	9b02      	ldr	r3, [sp, #8]
 801a7b2:	4411      	add	r1, r2
 801a7b4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a7b8:	b289      	uxth	r1, r1
 801a7ba:	4413      	add	r3, r2
 801a7bc:	b29b      	uxth	r3, r3
 801a7be:	b208      	sxth	r0, r1
 801a7c0:	b21a      	sxth	r2, r3
 801a7c2:	4290      	cmp	r0, r2
 801a7c4:	bfb8      	it	lt
 801a7c6:	460b      	movlt	r3, r1
 801a7c8:	eba3 030c 	sub.w	r3, r3, ip
 801a7cc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a7d0:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a7d4:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a7d8:	a807      	add	r0, sp, #28
 801a7da:	f7fa f856 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7de:	b920      	cbnz	r0, 801a7ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801a7e0:	6823      	ldr	r3, [r4, #0]
 801a7e2:	a907      	add	r1, sp, #28
 801a7e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	4798      	blx	r3
 801a7ea:	3701      	adds	r7, #1
 801a7ec:	b2bf      	uxth	r7, r7
 801a7ee:	e7a9      	b.n	801a744 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801a7f0:	f8d9 0000 	ldr.w	r0, [r9]
 801a7f4:	2101      	movs	r1, #1
 801a7f6:	6803      	ldr	r3, [r0, #0]
 801a7f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a7fc:	4798      	blx	r3
 801a7fe:	e773      	b.n	801a6e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801a800:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801a804:	e7e8      	b.n	801a7d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801a806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a808:	4798      	blx	r3
 801a80a:	4b3f      	ldr	r3, [pc, #252]	@ (801a908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801a80c:	781b      	ldrb	r3, [r3, #0]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	f43f af29 	beq.w	801a666 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801a814:	2300      	movs	r3, #0
 801a816:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801a81a:	882b      	ldrh	r3, [r5, #0]
 801a81c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801a820:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801a824:	42ab      	cmp	r3, r5
 801a826:	f4bf af1e 	bcs.w	801a666 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801a82a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801a82e:	2907      	cmp	r1, #7
 801a830:	d814      	bhi.n	801a85c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801a832:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801a836:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801a83a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801a83e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801a842:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801a846:	1c4a      	adds	r2, r1, #1
 801a848:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801a84c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801a850:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801a854:	f8a2 c002 	strh.w	ip, [r2, #2]
 801a858:	8097      	strh	r7, [r2, #4]
 801a85a:	80d6      	strh	r6, [r2, #6]
 801a85c:	3301      	adds	r3, #1
 801a85e:	b29b      	uxth	r3, r3
 801a860:	e7e0      	b.n	801a824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 801a862:	2b02      	cmp	r3, #2
 801a864:	f040 8133 	bne.w	801aace <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801a868:	4b28      	ldr	r3, [pc, #160]	@ (801a90c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801a86a:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801a86e:	781b      	ldrb	r3, [r3, #0]
 801a870:	2b01      	cmp	r3, #1
 801a872:	f000 8098 	beq.w	801a9a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801a876:	882a      	ldrh	r2, [r5, #0]
 801a878:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801a87c:	3201      	adds	r2, #1
 801a87e:	b292      	uxth	r2, r2
 801a880:	2900      	cmp	r1, #0
 801a882:	d0c2      	beq.n	801a80a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801a884:	4694      	mov	ip, r2
 801a886:	f04f 0900 	mov.w	r9, #0
 801a88a:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801a88e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801a892:	441e      	add	r6, r3
 801a894:	b236      	sxth	r6, r6
 801a896:	fa1f f38c 	uxth.w	r3, ip
 801a89a:	4299      	cmp	r1, r3
 801a89c:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801a8a0:	f240 80bf 	bls.w	801aa22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 801a8a4:	4427      	add	r7, r4
 801a8a6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801a8aa:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801a8ae:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801a8b2:	4283      	cmp	r3, r0
 801a8b4:	f340 80a1 	ble.w	801a9fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 801a8b8:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801a8bc:	46e1      	mov	r9, ip
 801a8be:	4406      	add	r6, r0
 801a8c0:	b236      	sxth	r6, r6
 801a8c2:	429e      	cmp	r6, r3
 801a8c4:	bfa8      	it	ge
 801a8c6:	461e      	movge	r6, r3
 801a8c8:	f10c 0c01 	add.w	ip, ip, #1
 801a8cc:	e7e3      	b.n	801a896 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 801a8ce:	d10a      	bne.n	801a8e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801a8d0:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801a8d4:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801a8d8:	4562      	cmp	r2, ip
 801a8da:	bfb8      	it	lt
 801a8dc:	4662      	movlt	r2, ip
 801a8de:	4288      	cmp	r0, r1
 801a8e0:	bfb8      	it	lt
 801a8e2:	461f      	movlt	r7, r3
 801a8e4:	e087      	b.n	801a9f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801a8e6:	428a      	cmp	r2, r1
 801a8e8:	bfb8      	it	lt
 801a8ea:	460a      	movlt	r2, r1
 801a8ec:	e083      	b.n	801a9f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801a8ee:	bf00      	nop
 801a8f0:	20011f6c 	.word	0x20011f6c
 801a8f4:	20011f78 	.word	0x20011f78
 801a8f8:	20000024 	.word	0x20000024
 801a8fc:	20011f2c 	.word	0x20011f2c
 801a900:	20011f22 	.word	0x20011f22
 801a904:	20011f20 	.word	0x20011f20
 801a908:	20011f2a 	.word	0x20011f2a
 801a90c:	20011f24 	.word	0x20011f24
 801a910:	19a1      	adds	r1, r4, r6
 801a912:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801a916:	ab07      	add	r3, sp, #28
 801a918:	6849      	ldr	r1, [r1, #4]
 801a91a:	c303      	stmia	r3!, {r0, r1}
 801a91c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a920:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a924:	2b13      	cmp	r3, #19
 801a926:	bfd8      	it	le
 801a928:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801a92c:	440b      	add	r3, r1
 801a92e:	1a9b      	subs	r3, r3, r2
 801a930:	a807      	add	r0, sp, #28
 801a932:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a936:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a93a:	f7ff f859 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a93e:	a807      	add	r0, sp, #28
 801a940:	f7f9 ffa3 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a944:	bb78      	cbnz	r0, 801a9a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801a946:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801a94a:	f8d9 0000 	ldr.w	r0, [r9]
 801a94e:	f1bc 0f14 	cmp.w	ip, #20
 801a952:	bfa8      	it	ge
 801a954:	f04f 0c14 	movge.w	ip, #20
 801a958:	f8d0 e000 	ldr.w	lr, [r0]
 801a95c:	fa1f fc8c 	uxth.w	ip, ip
 801a960:	f8cd c000 	str.w	ip, [sp]
 801a964:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801a968:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a96c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a970:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a974:	47d8      	blx	fp
 801a976:	4683      	mov	fp, r0
 801a978:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801a97c:	a807      	add	r0, sp, #28
 801a97e:	f7ff f81d 	bl	80199bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a982:	6823      	ldr	r3, [r4, #0]
 801a984:	4620      	mov	r0, r4
 801a986:	4426      	add	r6, r4
 801a988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a98a:	a907      	add	r1, sp, #28
 801a98c:	4798      	blx	r3
 801a98e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801a992:	eba0 000b 	sub.w	r0, r0, fp
 801a996:	b200      	sxth	r0, r0
 801a998:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801a99c:	b918      	cbnz	r0, 801a9a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801a99e:	b2b9      	uxth	r1, r7
 801a9a0:	4650      	mov	r0, sl
 801a9a2:	f7ff fa79 	bl	8019e98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a9a6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801a9aa:	f1bb 0f00 	cmp.w	fp, #0
 801a9ae:	f43f af2c 	beq.w	801a80a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801a9b2:	2700      	movs	r7, #0
 801a9b4:	882b      	ldrh	r3, [r5, #0]
 801a9b6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	b29b      	uxth	r3, r3
 801a9be:	b299      	uxth	r1, r3
 801a9c0:	458b      	cmp	fp, r1
 801a9c2:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 801a9c6:	d9a3      	bls.n	801a910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 801a9c8:	4426      	add	r6, r4
 801a9ca:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801a9ce:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801a9d2:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801a9d6:	4408      	add	r0, r1
 801a9d8:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801a9dc:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801a9e0:	b200      	sxth	r0, r0
 801a9e2:	4461      	add	r1, ip
 801a9e4:	b209      	sxth	r1, r1
 801a9e6:	4288      	cmp	r0, r1
 801a9e8:	f6bf af71 	bge.w	801a8ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801a9ec:	4584      	cmp	ip, r0
 801a9ee:	4662      	mov	r2, ip
 801a9f0:	461f      	mov	r7, r3
 801a9f2:	bfb8      	it	lt
 801a9f4:	4602      	movlt	r2, r0
 801a9f6:	3301      	adds	r3, #1
 801a9f8:	e7e1      	b.n	801a9be <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 801a9fa:	d10e      	bne.n	801aa1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 801a9fc:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801aa00:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801aa04:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801aa08:	4473      	add	r3, lr
 801aa0a:	b21b      	sxth	r3, r3
 801aa0c:	429e      	cmp	r6, r3
 801aa0e:	bfa8      	it	ge
 801aa10:	461e      	movge	r6, r3
 801aa12:	4287      	cmp	r7, r0
 801aa14:	bfb8      	it	lt
 801aa16:	46e1      	movlt	r9, ip
 801aa18:	e756      	b.n	801a8c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801aa1a:	4286      	cmp	r6, r0
 801aa1c:	bfa8      	it	ge
 801aa1e:	4606      	movge	r6, r0
 801aa20:	e752      	b.n	801a8c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801aa22:	eb0a 0007 	add.w	r0, sl, r7
 801aa26:	4427      	add	r7, r4
 801aa28:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801aa2c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801aa30:	f1bb 0f13 	cmp.w	fp, #19
 801aa34:	bfde      	ittt	le
 801aa36:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801aa3a:	445e      	addle	r6, fp
 801aa3c:	b236      	sxthle	r6, r6
 801aa3e:	f7f9 ff24 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa42:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801aa46:	2800      	cmp	r0, #0
 801aa48:	f47f af1a 	bne.w	801a880 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 801aa4c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801aa50:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801aa54:	1ab6      	subs	r6, r6, r2
 801aa56:	2e14      	cmp	r6, #20
 801aa58:	bfa8      	it	ge
 801aa5a:	2614      	movge	r6, #20
 801aa5c:	4828      	ldr	r0, [pc, #160]	@ (801ab00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 801aa5e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801aa62:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801aa66:	6800      	ldr	r0, [r0, #0]
 801aa68:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aa6c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801aa70:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aa74:	f8d0 c000 	ldr.w	ip, [r0]
 801aa78:	b2b6      	uxth	r6, r6
 801aa7a:	fa1f fb8b 	uxth.w	fp, fp
 801aa7e:	455e      	cmp	r6, fp
 801aa80:	bf94      	ite	ls
 801aa82:	9600      	strls	r6, [sp, #0]
 801aa84:	f8cd b000 	strhi.w	fp, [sp]
 801aa88:	b292      	uxth	r2, r2
 801aa8a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	b289      	uxth	r1, r1
 801aa92:	47b0      	blx	r6
 801aa94:	6823      	ldr	r3, [r4, #0]
 801aa96:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801aa9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801aa9c:	a907      	add	r1, sp, #28
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	4798      	blx	r3
 801aaa2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801aaa6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801aaaa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801aaae:	1a5b      	subs	r3, r3, r1
 801aab0:	440a      	add	r2, r1
 801aab2:	b21b      	sxth	r3, r3
 801aab4:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801aab8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	f47f aeda 	bne.w	801a876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801aac2:	fa1f f189 	uxth.w	r1, r9
 801aac6:	4650      	mov	r0, sl
 801aac8:	f7ff f9e6 	bl	8019e98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aacc:	e6d3      	b.n	801a876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801aace:	882e      	ldrh	r6, [r5, #0]
 801aad0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801aad4:	42b3      	cmp	r3, r6
 801aad6:	f67f ae98 	bls.w	801a80a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801aada:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801aade:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801aae2:	ab07      	add	r3, sp, #28
 801aae4:	6851      	ldr	r1, [r2, #4]
 801aae6:	c303      	stmia	r3!, {r0, r1}
 801aae8:	a807      	add	r0, sp, #28
 801aaea:	f7f9 fece 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aaee:	b920      	cbnz	r0, 801aafa <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 801aaf0:	6823      	ldr	r3, [r4, #0]
 801aaf2:	a907      	add	r1, sp, #28
 801aaf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	4798      	blx	r3
 801aafa:	3601      	adds	r6, #1
 801aafc:	b2b6      	uxth	r6, r6
 801aafe:	e7e7      	b.n	801aad0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 801ab00:	20011f2c 	.word	0x20011f2c

0801ab04 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ab04:	2200      	movs	r2, #0
 801ab06:	4b03      	ldr	r3, [pc, #12]	@ (801ab14 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ab08:	801a      	strh	r2, [r3, #0]
 801ab0a:	805a      	strh	r2, [r3, #2]
 801ab0c:	809a      	strh	r2, [r3, #4]
 801ab0e:	80da      	strh	r2, [r3, #6]
 801ab10:	4770      	bx	lr
 801ab12:	bf00      	nop
 801ab14:	20011f78 	.word	0x20011f78

0801ab18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab1c:	4606      	mov	r6, r0
 801ab1e:	b09d      	sub	sp, #116	@ 0x74
 801ab20:	a803      	add	r0, sp, #12
 801ab22:	4614      	mov	r4, r2
 801ab24:	468a      	mov	sl, r1
 801ab26:	461d      	mov	r5, r3
 801ab28:	f000 fe40 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 801ab2c:	6833      	ldr	r3, [r6, #0]
 801ab2e:	4630      	mov	r0, r6
 801ab30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ab32:	4798      	blx	r3
 801ab34:	6833      	ldr	r3, [r6, #0]
 801ab36:	4607      	mov	r7, r0
 801ab38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ab3a:	4630      	mov	r0, r6
 801ab3c:	4798      	blx	r3
 801ab3e:	462a      	mov	r2, r5
 801ab40:	2500      	movs	r5, #0
 801ab42:	9000      	str	r0, [sp, #0]
 801ab44:	4621      	mov	r1, r4
 801ab46:	463b      	mov	r3, r7
 801ab48:	a803      	add	r0, sp, #12
 801ab4a:	f000 fe8a 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ab4e:	462c      	mov	r4, r5
 801ab50:	46a9      	mov	r9, r5
 801ab52:	46a8      	mov	r8, r5
 801ab54:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801ab58:	2300      	movs	r3, #0
 801ab5a:	9302      	str	r3, [sp, #8]
 801ab5c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ab60:	429c      	cmp	r4, r3
 801ab62:	d002      	beq.n	801ab6a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ab64:	455c      	cmp	r4, fp
 801ab66:	bf18      	it	ne
 801ab68:	4625      	movne	r5, r4
 801ab6a:	ab02      	add	r3, sp, #8
 801ab6c:	4632      	mov	r2, r6
 801ab6e:	4651      	mov	r1, sl
 801ab70:	a803      	add	r0, sp, #12
 801ab72:	f001 f9a3 	bl	801bebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ab76:	4604      	mov	r4, r0
 801ab78:	b108      	cbz	r0, 801ab7e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ab7a:	280a      	cmp	r0, #10
 801ab7c:	d10a      	bne.n	801ab94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ab7e:	45c1      	cmp	r9, r8
 801ab80:	bf38      	it	cc
 801ab82:	46c1      	movcc	r9, r8
 801ab84:	f04f 0800 	mov.w	r8, #0
 801ab88:	2c00      	cmp	r4, #0
 801ab8a:	d1e5      	bne.n	801ab58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ab8c:	4648      	mov	r0, r9
 801ab8e:	b01d      	add	sp, #116	@ 0x74
 801ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab94:	9a02      	ldr	r2, [sp, #8]
 801ab96:	2a00      	cmp	r2, #0
 801ab98:	d0de      	beq.n	801ab58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ab9a:	7b57      	ldrb	r7, [r2, #13]
 801ab9c:	6833      	ldr	r3, [r6, #0]
 801ab9e:	007f      	lsls	r7, r7, #1
 801aba0:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801aba4:	7a97      	ldrb	r7, [r2, #10]
 801aba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aba8:	4307      	orrs	r7, r0
 801abaa:	4629      	mov	r1, r5
 801abac:	4630      	mov	r0, r6
 801abae:	8894      	ldrh	r4, [r2, #4]
 801abb0:	4798      	blx	r3
 801abb2:	4438      	add	r0, r7
 801abb4:	4480      	add	r8, r0
 801abb6:	fa1f f888 	uxth.w	r8, r8
 801abba:	e7e5      	b.n	801ab88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801abbc <_ZNK8touchgfx4Font12getCharWidthEt>:
 801abbc:	b508      	push	{r3, lr}
 801abbe:	6803      	ldr	r3, [r0, #0]
 801abc0:	68db      	ldr	r3, [r3, #12]
 801abc2:	4798      	blx	r3
 801abc4:	b128      	cbz	r0, 801abd2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801abc6:	7b43      	ldrb	r3, [r0, #13]
 801abc8:	7a80      	ldrb	r0, [r0, #10]
 801abca:	005b      	lsls	r3, r3, #1
 801abcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801abd0:	4318      	orrs	r0, r3
 801abd2:	bd08      	pop	{r3, pc}

0801abd4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801abd4:	b40e      	push	{r1, r2, r3}
 801abd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abd8:	4605      	mov	r5, r0
 801abda:	b09e      	sub	sp, #120	@ 0x78
 801abdc:	ab23      	add	r3, sp, #140	@ 0x8c
 801abde:	f853 4b04 	ldr.w	r4, [r3], #4
 801abe2:	a805      	add	r0, sp, #20
 801abe4:	9303      	str	r3, [sp, #12]
 801abe6:	f000 fde1 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 801abea:	682b      	ldr	r3, [r5, #0]
 801abec:	4628      	mov	r0, r5
 801abee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801abf0:	4798      	blx	r3
 801abf2:	682b      	ldr	r3, [r5, #0]
 801abf4:	4606      	mov	r6, r0
 801abf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801abf8:	4628      	mov	r0, r5
 801abfa:	4798      	blx	r3
 801abfc:	4621      	mov	r1, r4
 801abfe:	2400      	movs	r4, #0
 801ac00:	4633      	mov	r3, r6
 801ac02:	9000      	str	r0, [sp, #0]
 801ac04:	9a03      	ldr	r2, [sp, #12]
 801ac06:	ae1e      	add	r6, sp, #120	@ 0x78
 801ac08:	a805      	add	r0, sp, #20
 801ac0a:	f000 fe2a 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ac0e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ac12:	4633      	mov	r3, r6
 801ac14:	462a      	mov	r2, r5
 801ac16:	4621      	mov	r1, r4
 801ac18:	a805      	add	r0, sp, #20
 801ac1a:	f001 f94f 	bl	801bebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ac1e:	b1f0      	cbz	r0, 801ac5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801ac20:	280a      	cmp	r0, #10
 801ac22:	d018      	beq.n	801ac56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801ac24:	9f04      	ldr	r7, [sp, #16]
 801ac26:	b1b7      	cbz	r7, 801ac56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801ac28:	7b78      	ldrb	r0, [r7, #13]
 801ac2a:	7a3b      	ldrb	r3, [r7, #8]
 801ac2c:	00c1      	lsls	r1, r0, #3
 801ac2e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801ac32:	4319      	orrs	r1, r3
 801ac34:	0643      	lsls	r3, r0, #25
 801ac36:	bf44      	itt	mi
 801ac38:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801ac3c:	b219      	sxthmi	r1, r3
 801ac3e:	0100      	lsls	r0, r0, #4
 801ac40:	79fb      	ldrb	r3, [r7, #7]
 801ac42:	88ea      	ldrh	r2, [r5, #6]
 801ac44:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801ac48:	4303      	orrs	r3, r0
 801ac4a:	4413      	add	r3, r2
 801ac4c:	1a5b      	subs	r3, r3, r1
 801ac4e:	b21b      	sxth	r3, r3
 801ac50:	429c      	cmp	r4, r3
 801ac52:	bfb8      	it	lt
 801ac54:	461c      	movlt	r4, r3
 801ac56:	4633      	mov	r3, r6
 801ac58:	462a      	mov	r2, r5
 801ac5a:	2100      	movs	r1, #0
 801ac5c:	e7dc      	b.n	801ac18 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801ac5e:	b2a0      	uxth	r0, r4
 801ac60:	b01e      	add	sp, #120	@ 0x78
 801ac62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ac66:	b003      	add	sp, #12
 801ac68:	4770      	bx	lr

0801ac6a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ac6a:	7a43      	ldrb	r3, [r0, #9]
 801ac6c:	8880      	ldrh	r0, [r0, #4]
 801ac6e:	4418      	add	r0, r3
 801ac70:	b280      	uxth	r0, r0
 801ac72:	4770      	bx	lr

0801ac74 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ac74:	6803      	ldr	r3, [r0, #0]
 801ac76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ac78:	4718      	bx	r3

0801ac7a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ac7a:	b40e      	push	{r1, r2, r3}
 801ac7c:	b570      	push	{r4, r5, r6, lr}
 801ac7e:	4604      	mov	r4, r0
 801ac80:	b09d      	sub	sp, #116	@ 0x74
 801ac82:	ab21      	add	r3, sp, #132	@ 0x84
 801ac84:	f853 5b04 	ldr.w	r5, [r3], #4
 801ac88:	a803      	add	r0, sp, #12
 801ac8a:	9302      	str	r3, [sp, #8]
 801ac8c:	f000 fd8e 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 801ac90:	6823      	ldr	r3, [r4, #0]
 801ac92:	4620      	mov	r0, r4
 801ac94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ac96:	4798      	blx	r3
 801ac98:	6823      	ldr	r3, [r4, #0]
 801ac9a:	4606      	mov	r6, r0
 801ac9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ac9e:	4620      	mov	r0, r4
 801aca0:	4798      	blx	r3
 801aca2:	4633      	mov	r3, r6
 801aca4:	9000      	str	r0, [sp, #0]
 801aca6:	9a02      	ldr	r2, [sp, #8]
 801aca8:	4629      	mov	r1, r5
 801acaa:	a803      	add	r0, sp, #12
 801acac:	f000 fdd9 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801acb0:	a803      	add	r0, sp, #12
 801acb2:	f001 f9d1 	bl	801c058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801acb6:	2401      	movs	r4, #1
 801acb8:	b2a3      	uxth	r3, r4
 801acba:	b140      	cbz	r0, 801acce <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801acbc:	280a      	cmp	r0, #10
 801acbe:	bf08      	it	eq
 801acc0:	3301      	addeq	r3, #1
 801acc2:	a803      	add	r0, sp, #12
 801acc4:	bf08      	it	eq
 801acc6:	b21c      	sxtheq	r4, r3
 801acc8:	f001 f9c6 	bl	801c058 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801accc:	e7f4      	b.n	801acb8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801acce:	4618      	mov	r0, r3
 801acd0:	b01d      	add	sp, #116	@ 0x74
 801acd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801acd6:	b003      	add	sp, #12
 801acd8:	4770      	bx	lr

0801acda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801acda:	b40e      	push	{r1, r2, r3}
 801acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acde:	4604      	mov	r4, r0
 801ace0:	b09e      	sub	sp, #120	@ 0x78
 801ace2:	ab23      	add	r3, sp, #140	@ 0x8c
 801ace4:	f853 5b04 	ldr.w	r5, [r3], #4
 801ace8:	a805      	add	r0, sp, #20
 801acea:	9303      	str	r3, [sp, #12]
 801acec:	f000 fd5e 	bl	801b7ac <_ZN8touchgfx12TextProviderC1Ev>
 801acf0:	6823      	ldr	r3, [r4, #0]
 801acf2:	4620      	mov	r0, r4
 801acf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801acf6:	4798      	blx	r3
 801acf8:	6823      	ldr	r3, [r4, #0]
 801acfa:	4606      	mov	r6, r0
 801acfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801acfe:	4620      	mov	r0, r4
 801ad00:	4798      	blx	r3
 801ad02:	4633      	mov	r3, r6
 801ad04:	4629      	mov	r1, r5
 801ad06:	9000      	str	r0, [sp, #0]
 801ad08:	9a03      	ldr	r2, [sp, #12]
 801ad0a:	a805      	add	r0, sp, #20
 801ad0c:	f000 fda9 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ad10:	2100      	movs	r1, #0
 801ad12:	ad1e      	add	r5, sp, #120	@ 0x78
 801ad14:	f845 1d68 	str.w	r1, [r5, #-104]!
 801ad18:	462b      	mov	r3, r5
 801ad1a:	4622      	mov	r2, r4
 801ad1c:	a805      	add	r0, sp, #20
 801ad1e:	f001 f8cd 	bl	801bebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ad22:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801ad26:	b1d8      	cbz	r0, 801ad60 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801ad28:	280a      	cmp	r0, #10
 801ad2a:	d012      	beq.n	801ad52 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ad2c:	9804      	ldr	r0, [sp, #16]
 801ad2e:	b180      	cbz	r0, 801ad52 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801ad30:	7b47      	ldrb	r7, [r0, #13]
 801ad32:	88e2      	ldrh	r2, [r4, #6]
 801ad34:	00fb      	lsls	r3, r7, #3
 801ad36:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ad3a:	7a03      	ldrb	r3, [r0, #8]
 801ad3c:	430b      	orrs	r3, r1
 801ad3e:	0679      	lsls	r1, r7, #25
 801ad40:	bf44      	itt	mi
 801ad42:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ad46:	b21b      	sxthmi	r3, r3
 801ad48:	1ad3      	subs	r3, r2, r3
 801ad4a:	b21b      	sxth	r3, r3
 801ad4c:	429e      	cmp	r6, r3
 801ad4e:	bfa8      	it	ge
 801ad50:	461e      	movge	r6, r3
 801ad52:	462b      	mov	r3, r5
 801ad54:	4622      	mov	r2, r4
 801ad56:	2100      	movs	r1, #0
 801ad58:	a805      	add	r0, sp, #20
 801ad5a:	f001 f8af 	bl	801bebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ad5e:	e7e2      	b.n	801ad26 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ad60:	4630      	mov	r0, r6
 801ad62:	b01e      	add	sp, #120	@ 0x78
 801ad64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ad68:	b003      	add	sp, #12
 801ad6a:	4770      	bx	lr

0801ad6c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ad6c:	b513      	push	{r0, r1, r4, lr}
 801ad6e:	2400      	movs	r4, #0
 801ad70:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ad74:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ad78:	6803      	ldr	r3, [r0, #0]
 801ad7a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ad7e:	9400      	str	r4, [sp, #0]
 801ad80:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ad84:	691b      	ldr	r3, [r3, #16]
 801ad86:	4669      	mov	r1, sp
 801ad88:	4798      	blx	r3
 801ad8a:	b002      	add	sp, #8
 801ad8c:	bd10      	pop	{r4, pc}

0801ad8e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ad8e:	b538      	push	{r3, r4, r5, lr}
 801ad90:	460c      	mov	r4, r1
 801ad92:	4605      	mov	r5, r0
 801ad94:	680b      	ldr	r3, [r1, #0]
 801ad96:	68db      	ldr	r3, [r3, #12]
 801ad98:	4798      	blx	r3
 801ad9a:	6823      	ldr	r3, [r4, #0]
 801ad9c:	4620      	mov	r0, r4
 801ad9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ada0:	4629      	mov	r1, r5
 801ada2:	4798      	blx	r3
 801ada4:	4628      	mov	r0, r5
 801ada6:	bd38      	pop	{r3, r4, r5, pc}

0801ada8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ada8:	b410      	push	{r4}
 801adaa:	880a      	ldrh	r2, [r1, #0]
 801adac:	8884      	ldrh	r4, [r0, #4]
 801adae:	4422      	add	r2, r4
 801adb0:	800a      	strh	r2, [r1, #0]
 801adb2:	88c4      	ldrh	r4, [r0, #6]
 801adb4:	884a      	ldrh	r2, [r1, #2]
 801adb6:	4422      	add	r2, r4
 801adb8:	804a      	strh	r2, [r1, #2]
 801adba:	6940      	ldr	r0, [r0, #20]
 801adbc:	b120      	cbz	r0, 801adc8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801adbe:	6803      	ldr	r3, [r0, #0]
 801adc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801adc6:	4718      	bx	r3
 801adc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adcc:	4770      	bx	lr

0801adce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801adce:	b570      	push	{r4, r5, r6, lr}
 801add0:	460c      	mov	r4, r1
 801add2:	8882      	ldrh	r2, [r0, #4]
 801add4:	880b      	ldrh	r3, [r1, #0]
 801add6:	4605      	mov	r5, r0
 801add8:	4413      	add	r3, r2
 801adda:	800b      	strh	r3, [r1, #0]
 801addc:	88c2      	ldrh	r2, [r0, #6]
 801adde:	884b      	ldrh	r3, [r1, #2]
 801ade0:	4413      	add	r3, r2
 801ade2:	804b      	strh	r3, [r1, #2]
 801ade4:	1d01      	adds	r1, r0, #4
 801ade6:	4620      	mov	r0, r4
 801ade8:	f7f9 fd0c 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801adec:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	dd0b      	ble.n	801ae0c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801adf4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	dd07      	ble.n	801ae0c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801adfc:	6968      	ldr	r0, [r5, #20]
 801adfe:	b128      	cbz	r0, 801ae0c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ae00:	6803      	ldr	r3, [r0, #0]
 801ae02:	4621      	mov	r1, r4
 801ae04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae0a:	4718      	bx	r3
 801ae0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ae10 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ae10:	b570      	push	{r4, r5, r6, lr}
 801ae12:	460c      	mov	r4, r1
 801ae14:	8882      	ldrh	r2, [r0, #4]
 801ae16:	880b      	ldrh	r3, [r1, #0]
 801ae18:	4605      	mov	r5, r0
 801ae1a:	4413      	add	r3, r2
 801ae1c:	800b      	strh	r3, [r1, #0]
 801ae1e:	88c2      	ldrh	r2, [r0, #6]
 801ae20:	884b      	ldrh	r3, [r1, #2]
 801ae22:	4413      	add	r3, r2
 801ae24:	804b      	strh	r3, [r1, #2]
 801ae26:	1d01      	adds	r1, r0, #4
 801ae28:	4620      	mov	r0, r4
 801ae2a:	f7f9 fceb 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801ae2e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	dd19      	ble.n	801ae6a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ae36:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	dd15      	ble.n	801ae6a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ae3e:	6968      	ldr	r0, [r5, #20]
 801ae40:	b128      	cbz	r0, 801ae4e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ae42:	6803      	ldr	r3, [r0, #0]
 801ae44:	4621      	mov	r1, r4
 801ae46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae4a:	691b      	ldr	r3, [r3, #16]
 801ae4c:	4718      	bx	r3
 801ae4e:	4b07      	ldr	r3, [pc, #28]	@ (801ae6c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	3304      	adds	r3, #4
 801ae54:	429d      	cmp	r5, r3
 801ae56:	d108      	bne.n	801ae6a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ae58:	f7fe ff12 	bl	8019c80 <_ZN8touchgfx11Application11getInstanceEv>
 801ae5c:	6803      	ldr	r3, [r0, #0]
 801ae5e:	6821      	ldr	r1, [r4, #0]
 801ae60:	6862      	ldr	r2, [r4, #4]
 801ae62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ae64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae68:	4718      	bx	r3
 801ae6a:	bd70      	pop	{r4, r5, r6, pc}
 801ae6c:	20011f70 	.word	0x20011f70

0801ae70 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ae70:	b570      	push	{r4, r5, r6, lr}
 801ae72:	4604      	mov	r4, r0
 801ae74:	4616      	mov	r6, r2
 801ae76:	460d      	mov	r5, r1
 801ae78:	b901      	cbnz	r1, 801ae7c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ae7a:	b192      	cbz	r2, 801aea2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ae7c:	6823      	ldr	r3, [r4, #0]
 801ae7e:	4620      	mov	r0, r4
 801ae80:	699b      	ldr	r3, [r3, #24]
 801ae82:	4798      	blx	r3
 801ae84:	88e2      	ldrh	r2, [r4, #6]
 801ae86:	88a1      	ldrh	r1, [r4, #4]
 801ae88:	4432      	add	r2, r6
 801ae8a:	4429      	add	r1, r5
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	b212      	sxth	r2, r2
 801ae90:	b209      	sxth	r1, r1
 801ae92:	f7f3 faf2 	bl	800e47a <_ZN8touchgfx8Drawable5setXYEss>
 801ae96:	6823      	ldr	r3, [r4, #0]
 801ae98:	4620      	mov	r0, r4
 801ae9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae9e:	699b      	ldr	r3, [r3, #24]
 801aea0:	4718      	bx	r3
 801aea2:	bd70      	pop	{r4, r5, r6, pc}

0801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801aea4:	b510      	push	{r4, lr}
 801aea6:	2300      	movs	r3, #0
 801aea8:	4604      	mov	r4, r0
 801aeaa:	4608      	mov	r0, r1
 801aeac:	8023      	strh	r3, [r4, #0]
 801aeae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801aeb2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801aeb6:	8063      	strh	r3, [r4, #2]
 801aeb8:	6803      	ldr	r3, [r0, #0]
 801aeba:	80a1      	strh	r1, [r4, #4]
 801aebc:	80e2      	strh	r2, [r4, #6]
 801aebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aec0:	4621      	mov	r1, r4
 801aec2:	4798      	blx	r3
 801aec4:	4620      	mov	r0, r4
 801aec6:	bd10      	pop	{r4, pc}

0801aec8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801aec8:	b530      	push	{r4, r5, lr}
 801aeca:	8083      	strh	r3, [r0, #4]
 801aecc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801aed0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801aed4:	80c3      	strh	r3, [r0, #6]
 801aed6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801aeda:	6141      	str	r1, [r0, #20]
 801aedc:	7203      	strb	r3, [r0, #8]
 801aede:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801aee2:	8302      	strh	r2, [r0, #24]
 801aee4:	7243      	strb	r3, [r0, #9]
 801aee6:	7a83      	ldrb	r3, [r0, #10]
 801aee8:	f365 0306 	bfi	r3, r5, #0, #7
 801aeec:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801aef0:	f365 13c7 	bfi	r3, r5, #7, #1
 801aef4:	7283      	strb	r3, [r0, #10]
 801aef6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801aefa:	72c3      	strb	r3, [r0, #11]
 801aefc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801af00:	7303      	strb	r3, [r0, #12]
 801af02:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801af06:	81c3      	strh	r3, [r0, #14]
 801af08:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801af0c:	8203      	strh	r3, [r0, #16]
 801af0e:	4b01      	ldr	r3, [pc, #4]	@ (801af14 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801af10:	6003      	str	r3, [r0, #0]
 801af12:	bd30      	pop	{r4, r5, pc}
 801af14:	0802f9e8 	.word	0x0802f9e8

0801af18 <_ZNK8touchgfx9ConstFont4findEt>:
 801af18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af1a:	6944      	ldr	r4, [r0, #20]
 801af1c:	b3bc      	cbz	r4, 801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af1e:	88a3      	ldrh	r3, [r4, #4]
 801af20:	8b02      	ldrh	r2, [r0, #24]
 801af22:	1acb      	subs	r3, r1, r3
 801af24:	f102 32ff 	add.w	r2, r2, #4294967295
 801af28:	d431      	bmi.n	801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af2a:	4293      	cmp	r3, r2
 801af2c:	dd0c      	ble.n	801af48 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801af2e:	230e      	movs	r3, #14
 801af30:	fb03 4302 	mla	r3, r3, r2, r4
 801af34:	889b      	ldrh	r3, [r3, #4]
 801af36:	1a5b      	subs	r3, r3, r1
 801af38:	1ad3      	subs	r3, r2, r3
 801af3a:	429a      	cmp	r2, r3
 801af3c:	db27      	blt.n	801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af3e:	2b00      	cmp	r3, #0
 801af40:	bfbc      	itt	lt
 801af42:	2302      	movlt	r3, #2
 801af44:	fb92 f3f3 	sdivlt	r3, r2, r3
 801af48:	2500      	movs	r5, #0
 801af4a:	260e      	movs	r6, #14
 801af4c:	4295      	cmp	r5, r2
 801af4e:	dc1e      	bgt.n	801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af50:	fb06 4003 	mla	r0, r6, r3, r4
 801af54:	8887      	ldrh	r7, [r0, #4]
 801af56:	42b9      	cmp	r1, r7
 801af58:	d01a      	beq.n	801af90 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801af5a:	d20d      	bcs.n	801af78 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801af5c:	1e5a      	subs	r2, r3, #1
 801af5e:	4295      	cmp	r5, r2
 801af60:	dc15      	bgt.n	801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af62:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801af66:	1a5b      	subs	r3, r3, r1
 801af68:	1ad3      	subs	r3, r2, r3
 801af6a:	429a      	cmp	r2, r3
 801af6c:	db0f      	blt.n	801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af6e:	429d      	cmp	r5, r3
 801af70:	ddec      	ble.n	801af4c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801af72:	1953      	adds	r3, r2, r5
 801af74:	105b      	asrs	r3, r3, #1
 801af76:	e7e9      	b.n	801af4c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801af78:	1c5d      	adds	r5, r3, #1
 801af7a:	42aa      	cmp	r2, r5
 801af7c:	db07      	blt.n	801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af7e:	8a43      	ldrh	r3, [r0, #18]
 801af80:	1acb      	subs	r3, r1, r3
 801af82:	442b      	add	r3, r5
 801af84:	429d      	cmp	r5, r3
 801af86:	dc02      	bgt.n	801af8e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801af88:	429a      	cmp	r2, r3
 801af8a:	dadf      	bge.n	801af4c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801af8c:	e7f1      	b.n	801af72 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801af8e:	2000      	movs	r0, #0
 801af90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801af92 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801af92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af94:	4604      	mov	r4, r0
 801af96:	4617      	mov	r7, r2
 801af98:	461e      	mov	r6, r3
 801af9a:	b911      	cbnz	r1, 801afa2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801af9c:	2500      	movs	r5, #0
 801af9e:	4628      	mov	r0, r5
 801afa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afa2:	290a      	cmp	r1, #10
 801afa4:	d0fa      	beq.n	801af9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801afa6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801afaa:	4291      	cmp	r1, r2
 801afac:	d0f6      	beq.n	801af9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801afae:	f242 020b 	movw	r2, #8203	@ 0x200b
 801afb2:	4291      	cmp	r1, r2
 801afb4:	d0f2      	beq.n	801af9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801afb6:	f7ff ffaf 	bl	801af18 <_ZNK8touchgfx9ConstFont4findEt>
 801afba:	4605      	mov	r5, r0
 801afbc:	b950      	cbnz	r0, 801afd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801afbe:	6823      	ldr	r3, [r4, #0]
 801afc0:	4620      	mov	r0, r4
 801afc2:	691b      	ldr	r3, [r3, #16]
 801afc4:	4798      	blx	r3
 801afc6:	4601      	mov	r1, r0
 801afc8:	4620      	mov	r0, r4
 801afca:	f7ff ffa5 	bl	801af18 <_ZNK8touchgfx9ConstFont4findEt>
 801afce:	4605      	mov	r5, r0
 801afd0:	2800      	cmp	r0, #0
 801afd2:	d0e3      	beq.n	801af9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801afd4:	6823      	ldr	r3, [r4, #0]
 801afd6:	4629      	mov	r1, r5
 801afd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801afda:	4620      	mov	r0, r4
 801afdc:	4798      	blx	r3
 801afde:	6038      	str	r0, [r7, #0]
 801afe0:	6823      	ldr	r3, [r4, #0]
 801afe2:	4620      	mov	r0, r4
 801afe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801afe6:	4798      	blx	r3
 801afe8:	7030      	strb	r0, [r6, #0]
 801afea:	e7d8      	b.n	801af9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801afec <_ZN8touchgfx4clzuEm>:
 801afec:	4603      	mov	r3, r0
 801afee:	b1c8      	cbz	r0, 801b024 <_ZN8touchgfx4clzuEm+0x38>
 801aff0:	0c02      	lsrs	r2, r0, #16
 801aff2:	0412      	lsls	r2, r2, #16
 801aff4:	b9a2      	cbnz	r2, 801b020 <_ZN8touchgfx4clzuEm+0x34>
 801aff6:	0403      	lsls	r3, r0, #16
 801aff8:	2010      	movs	r0, #16
 801affa:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801affe:	bf04      	itt	eq
 801b000:	021b      	lsleq	r3, r3, #8
 801b002:	3008      	addeq	r0, #8
 801b004:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801b008:	bf04      	itt	eq
 801b00a:	011b      	lsleq	r3, r3, #4
 801b00c:	3004      	addeq	r0, #4
 801b00e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801b012:	bf04      	itt	eq
 801b014:	009b      	lsleq	r3, r3, #2
 801b016:	3002      	addeq	r0, #2
 801b018:	2b00      	cmp	r3, #0
 801b01a:	db04      	blt.n	801b026 <_ZN8touchgfx4clzuEm+0x3a>
 801b01c:	3001      	adds	r0, #1
 801b01e:	4770      	bx	lr
 801b020:	2000      	movs	r0, #0
 801b022:	e7ea      	b.n	801affa <_ZN8touchgfx4clzuEm+0xe>
 801b024:	2020      	movs	r0, #32
 801b026:	4770      	bx	lr

0801b028 <_ZN8touchgfx7muldivuEmmmRm>:
 801b028:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b02c:	460f      	mov	r7, r1
 801b02e:	4615      	mov	r5, r2
 801b030:	461e      	mov	r6, r3
 801b032:	4601      	mov	r1, r0
 801b034:	b100      	cbz	r0, 801b038 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801b036:	b927      	cbnz	r7, 801b042 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801b038:	2000      	movs	r0, #0
 801b03a:	6030      	str	r0, [r6, #0]
 801b03c:	b002      	add	sp, #8
 801b03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b042:	f7ff ffd3 	bl	801afec <_ZN8touchgfx4clzuEm>
 801b046:	b980      	cbnz	r0, 801b06a <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801b048:	4638      	mov	r0, r7
 801b04a:	f7ff ffcf 	bl	801afec <_ZN8touchgfx4clzuEm>
 801b04e:	2800      	cmp	r0, #0
 801b050:	dd05      	ble.n	801b05e <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801b052:	4633      	mov	r3, r6
 801b054:	462a      	mov	r2, r5
 801b056:	4638      	mov	r0, r7
 801b058:	f7ff ffe6 	bl	801b028 <_ZN8touchgfx7muldivuEmmmRm>
 801b05c:	e7ee      	b.n	801b03c <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b05e:	f04f 33ff 	mov.w	r3, #4294967295
 801b062:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b066:	6033      	str	r3, [r6, #0]
 801b068:	e7e8      	b.n	801b03c <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b06a:	fa37 f800 	lsrs.w	r8, r7, r0
 801b06e:	fb07 f301 	mul.w	r3, r7, r1
 801b072:	d105      	bne.n	801b080 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801b074:	fbb3 f0f5 	udiv	r0, r3, r5
 801b078:	fb05 3510 	mls	r5, r5, r0, r3
 801b07c:	6035      	str	r5, [r6, #0]
 801b07e:	e7dd      	b.n	801b03c <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b080:	2301      	movs	r3, #1
 801b082:	fa01 fa00 	lsl.w	sl, r1, r0
 801b086:	fa03 f000 	lsl.w	r0, r3, r0
 801b08a:	3801      	subs	r0, #1
 801b08c:	462a      	mov	r2, r5
 801b08e:	4633      	mov	r3, r6
 801b090:	4038      	ands	r0, r7
 801b092:	f7ff ffc9 	bl	801b028 <_ZN8touchgfx7muldivuEmmmRm>
 801b096:	fbba f9f5 	udiv	r9, sl, r5
 801b09a:	462a      	mov	r2, r5
 801b09c:	4607      	mov	r7, r0
 801b09e:	ab01      	add	r3, sp, #4
 801b0a0:	fb05 a119 	mls	r1, r5, r9, sl
 801b0a4:	4640      	mov	r0, r8
 801b0a6:	f7ff ffbf 	bl	801b028 <_ZN8touchgfx7muldivuEmmmRm>
 801b0aa:	9b01      	ldr	r3, [sp, #4]
 801b0ac:	6832      	ldr	r2, [r6, #0]
 801b0ae:	fb08 f409 	mul.w	r4, r8, r9
 801b0b2:	441a      	add	r2, r3
 801b0b4:	fbb2 f3f5 	udiv	r3, r2, r5
 801b0b8:	441c      	add	r4, r3
 801b0ba:	443c      	add	r4, r7
 801b0bc:	4420      	add	r0, r4
 801b0be:	fb05 2513 	mls	r5, r5, r3, r2
 801b0c2:	e7db      	b.n	801b07c <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801b0c4 <_ZN8touchgfx6muldivElllRl>:
 801b0c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b0c6:	2800      	cmp	r0, #0
 801b0c8:	bfb6      	itet	lt
 801b0ca:	f04f 34ff 	movlt.w	r4, #4294967295
 801b0ce:	2401      	movge	r4, #1
 801b0d0:	4240      	neglt	r0, r0
 801b0d2:	2900      	cmp	r1, #0
 801b0d4:	bfbc      	itt	lt
 801b0d6:	4249      	neglt	r1, r1
 801b0d8:	4264      	neglt	r4, r4
 801b0da:	2a00      	cmp	r2, #0
 801b0dc:	bfb6      	itet	lt
 801b0de:	4265      	neglt	r5, r4
 801b0e0:	4625      	movge	r5, r4
 801b0e2:	4252      	neglt	r2, r2
 801b0e4:	4288      	cmp	r0, r1
 801b0e6:	461e      	mov	r6, r3
 801b0e8:	bfc2      	ittt	gt
 801b0ea:	4603      	movgt	r3, r0
 801b0ec:	4608      	movgt	r0, r1
 801b0ee:	4619      	movgt	r1, r3
 801b0f0:	ab01      	add	r3, sp, #4
 801b0f2:	f7ff ff99 	bl	801b028 <_ZN8touchgfx7muldivuEmmmRm>
 801b0f6:	9b01      	ldr	r3, [sp, #4]
 801b0f8:	4368      	muls	r0, r5
 801b0fa:	435c      	muls	r4, r3
 801b0fc:	6034      	str	r4, [r6, #0]
 801b0fe:	b002      	add	sp, #8
 801b100:	bd70      	pop	{r4, r5, r6, pc}

0801b102 <_ZN8touchgfx6muldivElll>:
 801b102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b104:	4606      	mov	r6, r0
 801b106:	ab01      	add	r3, sp, #4
 801b108:	460d      	mov	r5, r1
 801b10a:	4614      	mov	r4, r2
 801b10c:	f7ff ffda 	bl	801b0c4 <_ZN8touchgfx6muldivElllRl>
 801b110:	2e00      	cmp	r6, #0
 801b112:	db20      	blt.n	801b156 <_ZN8touchgfx6muldivElll+0x54>
 801b114:	bf14      	ite	ne
 801b116:	2301      	movne	r3, #1
 801b118:	2300      	moveq	r3, #0
 801b11a:	2d00      	cmp	r5, #0
 801b11c:	db1e      	blt.n	801b15c <_ZN8touchgfx6muldivElll+0x5a>
 801b11e:	bf14      	ite	ne
 801b120:	2201      	movne	r2, #1
 801b122:	2200      	moveq	r2, #0
 801b124:	2c00      	cmp	r4, #0
 801b126:	fb03 f202 	mul.w	r2, r3, r2
 801b12a:	db1a      	blt.n	801b162 <_ZN8touchgfx6muldivElll+0x60>
 801b12c:	bf14      	ite	ne
 801b12e:	2301      	movne	r3, #1
 801b130:	2300      	moveq	r3, #0
 801b132:	4353      	muls	r3, r2
 801b134:	2b01      	cmp	r3, #1
 801b136:	d117      	bne.n	801b168 <_ZN8touchgfx6muldivElll+0x66>
 801b138:	9b01      	ldr	r3, [sp, #4]
 801b13a:	2c00      	cmp	r4, #0
 801b13c:	bfb8      	it	lt
 801b13e:	4264      	neglt	r4, r4
 801b140:	2b00      	cmp	r3, #0
 801b142:	f104 0401 	add.w	r4, r4, #1
 801b146:	bfb8      	it	lt
 801b148:	425b      	neglt	r3, r3
 801b14a:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b14e:	db00      	blt.n	801b152 <_ZN8touchgfx6muldivElll+0x50>
 801b150:	3001      	adds	r0, #1
 801b152:	b002      	add	sp, #8
 801b154:	bd70      	pop	{r4, r5, r6, pc}
 801b156:	f04f 33ff 	mov.w	r3, #4294967295
 801b15a:	e7de      	b.n	801b11a <_ZN8touchgfx6muldivElll+0x18>
 801b15c:	f04f 32ff 	mov.w	r2, #4294967295
 801b160:	e7e0      	b.n	801b124 <_ZN8touchgfx6muldivElll+0x22>
 801b162:	f04f 33ff 	mov.w	r3, #4294967295
 801b166:	e7e4      	b.n	801b132 <_ZN8touchgfx6muldivElll+0x30>
 801b168:	3301      	adds	r3, #1
 801b16a:	d1f2      	bne.n	801b152 <_ZN8touchgfx6muldivElll+0x50>
 801b16c:	9b01      	ldr	r3, [sp, #4]
 801b16e:	2c00      	cmp	r4, #0
 801b170:	bfb8      	it	lt
 801b172:	4264      	neglt	r4, r4
 801b174:	2b00      	cmp	r3, #0
 801b176:	bfb8      	it	lt
 801b178:	425b      	neglt	r3, r3
 801b17a:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b17e:	bfc8      	it	gt
 801b180:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801b184:	e7e5      	b.n	801b152 <_ZN8touchgfx6muldivElll+0x50>

0801b186 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b186:	2000      	movs	r0, #0
 801b188:	4770      	bx	lr

0801b18a <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b18a:	2001      	movs	r0, #1
 801b18c:	4770      	bx	lr

0801b18e <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b18e:	2002      	movs	r0, #2
 801b190:	4770      	bx	lr

0801b192 <_ZN8touchgfx12GestureEventD1Ev>:
 801b192:	4770      	bx	lr

0801b194 <_ZN8touchgfx9DragEventD1Ev>:
 801b194:	4770      	bx	lr

0801b196 <_ZN8touchgfx10ClickEventD1Ev>:
 801b196:	4770      	bx	lr

0801b198 <_ZN8touchgfx10ClickEventD0Ev>:
 801b198:	b510      	push	{r4, lr}
 801b19a:	4604      	mov	r4, r0
 801b19c:	210c      	movs	r1, #12
 801b19e:	f010 fc60 	bl	802ba62 <_ZdlPvj>
 801b1a2:	4620      	mov	r0, r4
 801b1a4:	bd10      	pop	{r4, pc}

0801b1a6 <_ZN8touchgfx9DragEventD0Ev>:
 801b1a6:	b510      	push	{r4, lr}
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	2110      	movs	r1, #16
 801b1ac:	f010 fc59 	bl	802ba62 <_ZdlPvj>
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	bd10      	pop	{r4, pc}

0801b1b4 <_ZN8touchgfx12GestureEventD0Ev>:
 801b1b4:	b510      	push	{r4, lr}
 801b1b6:	4604      	mov	r4, r0
 801b1b8:	210c      	movs	r1, #12
 801b1ba:	f010 fc52 	bl	802ba62 <_ZdlPvj>
 801b1be:	4620      	mov	r0, r4
 801b1c0:	bd10      	pop	{r4, pc}
	...

0801b1c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b1c4:	b530      	push	{r4, r5, lr}
 801b1c6:	460d      	mov	r5, r1
 801b1c8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b1ca:	b087      	sub	sp, #28
 801b1cc:	4604      	mov	r4, r0
 801b1ce:	b301      	cbz	r1, 801b212 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b1d0:	a801      	add	r0, sp, #4
 801b1d2:	f7ff fe67 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b1d6:	892a      	ldrh	r2, [r5, #8]
 801b1d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b1dc:	7928      	ldrb	r0, [r5, #4]
 801b1de:	1ad2      	subs	r2, r2, r3
 801b1e0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b1e2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b1e6:	441a      	add	r2, r3
 801b1e8:	896b      	ldrh	r3, [r5, #10]
 801b1ea:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b1ee:	f88d 0010 	strb.w	r0, [sp, #16]
 801b1f2:	1b5b      	subs	r3, r3, r5
 801b1f4:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801b1f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b1f8:	442b      	add	r3, r5
 801b1fa:	4d07      	ldr	r5, [pc, #28]	@ (801b218 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b1fc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b200:	9503      	str	r5, [sp, #12]
 801b202:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b206:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b20a:	6803      	ldr	r3, [r0, #0]
 801b20c:	a903      	add	r1, sp, #12
 801b20e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b210:	4798      	blx	r3
 801b212:	b007      	add	sp, #28
 801b214:	bd30      	pop	{r4, r5, pc}
 801b216:	bf00      	nop
 801b218:	0802fa78 	.word	0x0802fa78

0801b21c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b220:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b222:	b08a      	sub	sp, #40	@ 0x28
 801b224:	4604      	mov	r4, r0
 801b226:	460d      	mov	r5, r1
 801b228:	b113      	cbz	r3, 801b230 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b22a:	790b      	ldrb	r3, [r1, #4]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d044      	beq.n	801b2ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b230:	f104 0804 	add.w	r8, r4, #4
 801b234:	4641      	mov	r1, r8
 801b236:	a803      	add	r0, sp, #12
 801b238:	f7ff fe34 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b23c:	792b      	ldrb	r3, [r5, #4]
 801b23e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b242:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b246:	b983      	cbnz	r3, 801b26a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b248:	892a      	ldrh	r2, [r5, #8]
 801b24a:	88e9      	ldrh	r1, [r5, #6]
 801b24c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801b250:	1b92      	subs	r2, r2, r6
 801b252:	1bc9      	subs	r1, r1, r7
 801b254:	9301      	str	r3, [sp, #4]
 801b256:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801b25a:	9300      	str	r3, [sp, #0]
 801b25c:	b212      	sxth	r2, r2
 801b25e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801b262:	b209      	sxth	r1, r1
 801b264:	4640      	mov	r0, r8
 801b266:	f7f9 f9ed 	bl	8014644 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b26a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b26c:	b329      	cbz	r1, 801b2ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b26e:	a805      	add	r0, sp, #20
 801b270:	f7ff fe18 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b274:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b278:	792b      	ldrb	r3, [r5, #4]
 801b27a:	1abf      	subs	r7, r7, r2
 801b27c:	88ea      	ldrh	r2, [r5, #6]
 801b27e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b280:	4417      	add	r7, r2
 801b282:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801b284:	f88d 3020 	strb.w	r3, [sp, #32]
 801b288:	4417      	add	r7, r2
 801b28a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b28e:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801b292:	1ab6      	subs	r6, r6, r2
 801b294:	892a      	ldrh	r2, [r5, #8]
 801b296:	a907      	add	r1, sp, #28
 801b298:	4416      	add	r6, r2
 801b29a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b29c:	4416      	add	r6, r2
 801b29e:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801b2a2:	2600      	movs	r6, #0
 801b2a4:	4a06      	ldr	r2, [pc, #24]	@ (801b2c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b2a6:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801b2aa:	9207      	str	r2, [sp, #28]
 801b2ac:	6803      	ldr	r3, [r0, #0]
 801b2ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b2b0:	4798      	blx	r3
 801b2b2:	792b      	ldrb	r3, [r5, #4]
 801b2b4:	b10b      	cbz	r3, 801b2ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b2b6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801b2ba:	b00a      	add	sp, #40	@ 0x28
 801b2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2c0:	0802fa50 	.word	0x0802fa50

0801b2c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2c8:	460c      	mov	r4, r1
 801b2ca:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b2cc:	b088      	sub	sp, #32
 801b2ce:	4605      	mov	r5, r0
 801b2d0:	2900      	cmp	r1, #0
 801b2d2:	d06d      	beq.n	801b3b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b2d4:	4668      	mov	r0, sp
 801b2d6:	f7ff fde5 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2da:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801b2dc:	88e3      	ldrh	r3, [r4, #6]
 801b2de:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b2e2:	440b      	add	r3, r1
 801b2e4:	b21b      	sxth	r3, r3
 801b2e6:	4543      	cmp	r3, r8
 801b2e8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b2ec:	db31      	blt.n	801b352 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b2ee:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b2f2:	44c4      	add	ip, r8
 801b2f4:	fa0f fc8c 	sxth.w	ip, ip
 801b2f8:	4563      	cmp	r3, ip
 801b2fa:	da2a      	bge.n	801b352 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b2fc:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801b2fe:	8926      	ldrh	r6, [r4, #8]
 801b300:	4416      	add	r6, r2
 801b302:	b236      	sxth	r6, r6
 801b304:	42be      	cmp	r6, r7
 801b306:	db24      	blt.n	801b352 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b308:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b30c:	4438      	add	r0, r7
 801b30e:	b200      	sxth	r0, r0
 801b310:	4286      	cmp	r6, r0
 801b312:	da1e      	bge.n	801b352 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b314:	8963      	ldrh	r3, [r4, #10]
 801b316:	4419      	add	r1, r3
 801b318:	b209      	sxth	r1, r1
 801b31a:	4541      	cmp	r1, r8
 801b31c:	db08      	blt.n	801b330 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b31e:	4561      	cmp	r1, ip
 801b320:	da06      	bge.n	801b330 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b322:	89a3      	ldrh	r3, [r4, #12]
 801b324:	441a      	add	r2, r3
 801b326:	b212      	sxth	r2, r2
 801b328:	42ba      	cmp	r2, r7
 801b32a:	db01      	blt.n	801b330 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b32c:	4282      	cmp	r2, r0
 801b32e:	db10      	blt.n	801b352 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b330:	4b21      	ldr	r3, [pc, #132]	@ (801b3b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b332:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b334:	9304      	str	r3, [sp, #16]
 801b336:	2302      	movs	r3, #2
 801b338:	f88d 3014 	strb.w	r3, [sp, #20]
 801b33c:	2300      	movs	r3, #0
 801b33e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b342:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b346:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b34a:	6803      	ldr	r3, [r0, #0]
 801b34c:	a904      	add	r1, sp, #16
 801b34e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b350:	4798      	blx	r3
 801b352:	1d29      	adds	r1, r5, #4
 801b354:	a802      	add	r0, sp, #8
 801b356:	f7ff fda5 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b35a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b35e:	88e0      	ldrh	r0, [r4, #6]
 801b360:	eba3 0808 	sub.w	r8, r3, r8
 801b364:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b368:	7921      	ldrb	r1, [r4, #4]
 801b36a:	1bdf      	subs	r7, r3, r7
 801b36c:	b2bb      	uxth	r3, r7
 801b36e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801b372:	fa1f f888 	uxth.w	r8, r8
 801b376:	8922      	ldrh	r2, [r4, #8]
 801b378:	8967      	ldrh	r7, [r4, #10]
 801b37a:	89a4      	ldrh	r4, [r4, #12]
 801b37c:	4440      	add	r0, r8
 801b37e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801b380:	4460      	add	r0, ip
 801b382:	441a      	add	r2, r3
 801b384:	44b8      	add	r8, r7
 801b386:	4423      	add	r3, r4
 801b388:	4c0c      	ldr	r4, [pc, #48]	@ (801b3bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b38a:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b38e:	4433      	add	r3, r6
 801b390:	4432      	add	r2, r6
 801b392:	44e0      	add	r8, ip
 801b394:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b396:	f88d 1014 	strb.w	r1, [sp, #20]
 801b39a:	9404      	str	r4, [sp, #16]
 801b39c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b3a0:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b3a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b3a8:	6803      	ldr	r3, [r0, #0]
 801b3aa:	a904      	add	r1, sp, #16
 801b3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b3ae:	4798      	blx	r3
 801b3b0:	b008      	add	sp, #32
 801b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3b6:	bf00      	nop
 801b3b8:	0802fa50 	.word	0x0802fa50
 801b3bc:	0802fa64 	.word	0x0802fa64

0801b3c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b3c8:	3201      	adds	r2, #1
 801b3ca:	d112      	bne.n	801b3f2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b3cc:	2500      	movs	r5, #0
 801b3ce:	9500      	str	r5, [sp, #0]
 801b3d0:	466d      	mov	r5, sp
 801b3d2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b3d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b3da:	6803      	ldr	r3, [r0, #0]
 801b3dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b3e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b3e4:	4629      	mov	r1, r5
 801b3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3e8:	4798      	blx	r3
 801b3ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b3ee:	e884 0003 	stmia.w	r4, {r0, r1}
 801b3f2:	4620      	mov	r0, r4
 801b3f4:	b003      	add	sp, #12
 801b3f6:	bd30      	pop	{r4, r5, pc}

0801b3f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b3f8:	b513      	push	{r0, r1, r4, lr}
 801b3fa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b3fe:	4604      	mov	r4, r0
 801b400:	3301      	adds	r3, #1
 801b402:	d109      	bne.n	801b418 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b404:	4601      	mov	r1, r0
 801b406:	4668      	mov	r0, sp
 801b408:	f7ff fd4c 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b40c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b410:	8423      	strh	r3, [r4, #32]
 801b412:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b416:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b418:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b41c:	b002      	add	sp, #8
 801b41e:	bd10      	pop	{r4, pc}

0801b420 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b420:	b513      	push	{r0, r1, r4, lr}
 801b422:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801b426:	4604      	mov	r4, r0
 801b428:	3301      	adds	r3, #1
 801b42a:	d109      	bne.n	801b440 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b42c:	4601      	mov	r1, r0
 801b42e:	4668      	mov	r0, sp
 801b430:	f7ff fd38 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b434:	f8bd 3000 	ldrh.w	r3, [sp]
 801b438:	8423      	strh	r3, [r4, #32]
 801b43a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b43e:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b440:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801b444:	b002      	add	sp, #8
 801b446:	bd10      	pop	{r4, pc}

0801b448 <_ZN8touchgfx6ScreenC1Ev>:
 801b448:	b570      	push	{r4, r5, r6, lr}
 801b44a:	4605      	mov	r5, r0
 801b44c:	4b16      	ldr	r3, [pc, #88]	@ (801b4a8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b44e:	2101      	movs	r1, #1
 801b450:	f845 3b04 	str.w	r3, [r5], #4
 801b454:	2300      	movs	r3, #0
 801b456:	4604      	mov	r4, r0
 801b458:	8103      	strh	r3, [r0, #8]
 801b45a:	8143      	strh	r3, [r0, #10]
 801b45c:	8183      	strh	r3, [r0, #12]
 801b45e:	81c3      	strh	r3, [r0, #14]
 801b460:	8203      	strh	r3, [r0, #16]
 801b462:	8243      	strh	r3, [r0, #18]
 801b464:	8283      	strh	r3, [r0, #20]
 801b466:	82c3      	strh	r3, [r0, #22]
 801b468:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b46c:	6203      	str	r3, [r0, #32]
 801b46e:	8483      	strh	r3, [r0, #36]	@ 0x24
 801b470:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801b472:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801b476:	4a0d      	ldr	r2, [pc, #52]	@ (801b4ac <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b478:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801b47c:	6343      	str	r3, [r0, #52]	@ 0x34
 801b47e:	4b0c      	ldr	r3, [pc, #48]	@ (801b4b0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b480:	6042      	str	r2, [r0, #4]
 801b482:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b486:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801b488:	4a0a      	ldr	r2, [pc, #40]	@ (801b4b4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b48a:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801b48e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b492:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b496:	4628      	mov	r0, r5
 801b498:	4798      	blx	r3
 801b49a:	6863      	ldr	r3, [r4, #4]
 801b49c:	4628      	mov	r0, r5
 801b49e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b4a0:	4631      	mov	r1, r6
 801b4a2:	4798      	blx	r3
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	bd70      	pop	{r4, r5, r6, pc}
 801b4a8:	0802fa8c 	.word	0x0802fa8c
 801b4ac:	0802ee88 	.word	0x0802ee88
 801b4b0:	20011f22 	.word	0x20011f22
 801b4b4:	20011f20 	.word	0x20011f20

0801b4b8 <_ZN8touchgfx6Screen4drawEv>:
 801b4b8:	b507      	push	{r0, r1, r2, lr}
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	4b08      	ldr	r3, [pc, #32]	@ (801b4e0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b4be:	9100      	str	r1, [sp, #0]
 801b4c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b4c4:	4b07      	ldr	r3, [pc, #28]	@ (801b4e4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b4c6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b4ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4ce:	4669      	mov	r1, sp
 801b4d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b4d4:	6803      	ldr	r3, [r0, #0]
 801b4d6:	689b      	ldr	r3, [r3, #8]
 801b4d8:	4798      	blx	r3
 801b4da:	b003      	add	sp, #12
 801b4dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4e0:	20011f20 	.word	0x20011f20
 801b4e4:	20011f22 	.word	0x20011f22

0801b4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b4f0:	b089      	sub	sp, #36	@ 0x24
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	4680      	mov	r8, r0
 801b4f6:	460c      	mov	r4, r1
 801b4f8:	4615      	mov	r5, r2
 801b4fa:	dd0e      	ble.n	801b51a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b4fc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b500:	2b00      	cmp	r3, #0
 801b502:	dd0a      	ble.n	801b51a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b504:	4628      	mov	r0, r5
 801b506:	f7ff ff5b 	bl	801b3c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b50a:	4621      	mov	r1, r4
 801b50c:	f7fe fb20 	bl	8019b50 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b510:	69eb      	ldr	r3, [r5, #28]
 801b512:	b928      	cbnz	r0, 801b520 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b514:	461d      	mov	r5, r3
 801b516:	2b00      	cmp	r3, #0
 801b518:	d1f4      	bne.n	801b504 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b51a:	b009      	add	sp, #36	@ 0x24
 801b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b520:	ae04      	add	r6, sp, #16
 801b522:	2b00      	cmp	r3, #0
 801b524:	f000 80b5 	beq.w	801b692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b528:	682b      	ldr	r3, [r5, #0]
 801b52a:	4629      	mov	r1, r5
 801b52c:	68db      	ldr	r3, [r3, #12]
 801b52e:	a802      	add	r0, sp, #8
 801b530:	4798      	blx	r3
 801b532:	4628      	mov	r0, r5
 801b534:	f7ff ff60 	bl	801b3f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b538:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b53c:	4407      	add	r7, r0
 801b53e:	4628      	mov	r0, r5
 801b540:	f7ff ff6e 	bl	801b420 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b544:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b548:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b54c:	4418      	add	r0, r3
 801b54e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b552:	4621      	mov	r1, r4
 801b554:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b558:	b23f      	sxth	r7, r7
 801b55a:	4630      	mov	r0, r6
 801b55c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b560:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b564:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b568:	f7f9 f94c 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801b56c:	4628      	mov	r0, r5
 801b56e:	f7ff ff27 	bl	801b3c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b572:	4602      	mov	r2, r0
 801b574:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b578:	ab06      	add	r3, sp, #24
 801b57a:	e883 0003 	stmia.w	r3, {r0, r1}
 801b57e:	4611      	mov	r1, r2
 801b580:	4618      	mov	r0, r3
 801b582:	f7f9 f93f 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801b586:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b58a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b58e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b592:	4299      	cmp	r1, r3
 801b594:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b598:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b59c:	d10b      	bne.n	801b5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b59e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b5a2:	4552      	cmp	r2, sl
 801b5a4:	d107      	bne.n	801b5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b5a6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b5aa:	455a      	cmp	r2, fp
 801b5ac:	d103      	bne.n	801b5b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b5ae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b5b2:	454a      	cmp	r2, r9
 801b5b4:	d06d      	beq.n	801b692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b5b6:	f1bb 0f00 	cmp.w	fp, #0
 801b5ba:	dd65      	ble.n	801b688 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b5bc:	f1b9 0f00 	cmp.w	r9, #0
 801b5c0:	dd62      	ble.n	801b688 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b5c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b5c6:	fa1f f08a 	uxth.w	r0, sl
 801b5ca:	4552      	cmp	r2, sl
 801b5cc:	9000      	str	r0, [sp, #0]
 801b5ce:	da12      	bge.n	801b5f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b5d0:	9301      	str	r3, [sp, #4]
 801b5d2:	9b00      	ldr	r3, [sp, #0]
 801b5d4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b5d8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b5dc:	1a9a      	subs	r2, r3, r2
 801b5de:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b5e2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b5e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b5ea:	69ea      	ldr	r2, [r5, #28]
 801b5ec:	4631      	mov	r1, r6
 801b5ee:	4640      	mov	r0, r8
 801b5f0:	f7ff ff7a 	bl	801b4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b5f4:	9b01      	ldr	r3, [sp, #4]
 801b5f6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b5fa:	b29f      	uxth	r7, r3
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	da0d      	bge.n	801b61c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b600:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b604:	1aba      	subs	r2, r7, r2
 801b606:	f8ad a012 	strh.w	sl, [sp, #18]
 801b60a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b60e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b612:	69ea      	ldr	r2, [r5, #28]
 801b614:	4631      	mov	r1, r6
 801b616:	4640      	mov	r0, r8
 801b618:	f7ff ff66 	bl	801b4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b61c:	8822      	ldrh	r2, [r4, #0]
 801b61e:	88a3      	ldrh	r3, [r4, #4]
 801b620:	445f      	add	r7, fp
 801b622:	4413      	add	r3, r2
 801b624:	b29b      	uxth	r3, r3
 801b626:	b2bf      	uxth	r7, r7
 801b628:	b23a      	sxth	r2, r7
 801b62a:	b219      	sxth	r1, r3
 801b62c:	4291      	cmp	r1, r2
 801b62e:	dd0d      	ble.n	801b64c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b630:	1bdb      	subs	r3, r3, r7
 801b632:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b636:	f8ad a012 	strh.w	sl, [sp, #18]
 801b63a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b63e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b642:	69ea      	ldr	r2, [r5, #28]
 801b644:	4631      	mov	r1, r6
 801b646:	4640      	mov	r0, r8
 801b648:	f7ff ff4e 	bl	801b4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b64c:	88e2      	ldrh	r2, [r4, #6]
 801b64e:	8863      	ldrh	r3, [r4, #2]
 801b650:	4413      	add	r3, r2
 801b652:	9a00      	ldr	r2, [sp, #0]
 801b654:	b29b      	uxth	r3, r3
 801b656:	444a      	add	r2, r9
 801b658:	fa1f f982 	uxth.w	r9, r2
 801b65c:	fa0f f289 	sxth.w	r2, r9
 801b660:	b219      	sxth	r1, r3
 801b662:	428a      	cmp	r2, r1
 801b664:	da15      	bge.n	801b692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b666:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b66a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b66e:	eba3 0309 	sub.w	r3, r3, r9
 801b672:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b676:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b67a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b67e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b682:	69ea      	ldr	r2, [r5, #28]
 801b684:	4631      	mov	r1, r6
 801b686:	e001      	b.n	801b68c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b688:	4621      	mov	r1, r4
 801b68a:	69ea      	ldr	r2, [r5, #28]
 801b68c:	4640      	mov	r0, r8
 801b68e:	f7ff ff2b 	bl	801b4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b692:	4628      	mov	r0, r5
 801b694:	f7ff fe94 	bl	801b3c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b698:	4633      	mov	r3, r6
 801b69a:	4602      	mov	r2, r0
 801b69c:	6861      	ldr	r1, [r4, #4]
 801b69e:	6820      	ldr	r0, [r4, #0]
 801b6a0:	c303      	stmia	r3!, {r0, r1}
 801b6a2:	4611      	mov	r1, r2
 801b6a4:	4630      	mov	r0, r6
 801b6a6:	f7f9 f8ad 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801b6aa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	f77f af33 	ble.w	801b51a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b6b4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	f77f af2e 	ble.w	801b51a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b6be:	4628      	mov	r0, r5
 801b6c0:	f7ff fe9a 	bl	801b3f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b6c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b6c8:	1a18      	subs	r0, r3, r0
 801b6ca:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b6ce:	4628      	mov	r0, r5
 801b6d0:	f7ff fea6 	bl	801b420 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b6d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b6d8:	4631      	mov	r1, r6
 801b6da:	1a18      	subs	r0, r3, r0
 801b6dc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b6e0:	682b      	ldr	r3, [r5, #0]
 801b6e2:	4628      	mov	r0, r5
 801b6e4:	689b      	ldr	r3, [r3, #8]
 801b6e6:	4798      	blx	r3
 801b6e8:	e717      	b.n	801b51a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b6ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b6ea:	b570      	push	{r4, r5, r6, lr}
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	460c      	mov	r4, r1
 801b6f0:	b086      	sub	sp, #24
 801b6f2:	1d06      	adds	r6, r0, #4
 801b6f4:	4631      	mov	r1, r6
 801b6f6:	4605      	mov	r5, r0
 801b6f8:	a802      	add	r0, sp, #8
 801b6fa:	9301      	str	r3, [sp, #4]
 801b6fc:	f7ff fbd2 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b700:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b704:	8822      	ldrh	r2, [r4, #0]
 801b706:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b70a:	1ad2      	subs	r2, r2, r3
 801b70c:	8863      	ldrh	r3, [r4, #2]
 801b70e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b712:	1a5b      	subs	r3, r3, r1
 801b714:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b718:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b71c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b720:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b724:	aa01      	add	r2, sp, #4
 801b726:	a904      	add	r1, sp, #16
 801b728:	4630      	mov	r0, r6
 801b72a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b72e:	f7f9 f941 	bl	80149b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b732:	9a01      	ldr	r2, [sp, #4]
 801b734:	b11a      	cbz	r2, 801b73e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801b736:	4621      	mov	r1, r4
 801b738:	4628      	mov	r0, r5
 801b73a:	f7ff fed5 	bl	801b4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b73e:	b006      	add	sp, #24
 801b740:	bd70      	pop	{r4, r5, r6, pc}

0801b742 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b742:	b530      	push	{r4, r5, lr}
 801b744:	4602      	mov	r2, r0
 801b746:	b085      	sub	sp, #20
 801b748:	460d      	mov	r5, r1
 801b74a:	466b      	mov	r3, sp
 801b74c:	4604      	mov	r4, r0
 801b74e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b752:	6851      	ldr	r1, [r2, #4]
 801b754:	c303      	stmia	r3!, {r0, r1}
 801b756:	4629      	mov	r1, r5
 801b758:	4668      	mov	r0, sp
 801b75a:	f7f9 f853 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 801b75e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801b762:	b12b      	cbz	r3, 801b770 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801b764:	4669      	mov	r1, sp
 801b766:	4620      	mov	r0, r4
 801b768:	f7ff ffbf 	bl	801b6ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b76c:	b005      	add	sp, #20
 801b76e:	bd30      	pop	{r4, r5, pc}
 801b770:	3404      	adds	r4, #4
 801b772:	4621      	mov	r1, r4
 801b774:	a802      	add	r0, sp, #8
 801b776:	f7ff fb95 	bl	801aea4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b77a:	f8bd 3000 	ldrh.w	r3, [sp]
 801b77e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b782:	4669      	mov	r1, sp
 801b784:	1a9b      	subs	r3, r3, r2
 801b786:	f8ad 3000 	strh.w	r3, [sp]
 801b78a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b78e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b792:	4620      	mov	r0, r4
 801b794:	1a9b      	subs	r3, r3, r2
 801b796:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b79a:	f7f9 f8d2 	bl	8014942 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b79e:	e7e5      	b.n	801b76c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801b7a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b7a0:	460b      	mov	r3, r1
 801b7a2:	680a      	ldr	r2, [r1, #0]
 801b7a4:	1d01      	adds	r1, r0, #4
 801b7a6:	6992      	ldr	r2, [r2, #24]
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	4710      	bx	r2

0801b7ac <_ZN8touchgfx12TextProviderC1Ev>:
 801b7ac:	b538      	push	{r3, r4, r5, lr}
 801b7ae:	2500      	movs	r5, #0
 801b7b0:	2302      	movs	r3, #2
 801b7b2:	4604      	mov	r4, r0
 801b7b4:	e9c0 5500 	strd	r5, r5, [r0]
 801b7b8:	7403      	strb	r3, [r0, #16]
 801b7ba:	6145      	str	r5, [r0, #20]
 801b7bc:	7605      	strb	r5, [r0, #24]
 801b7be:	83c5      	strh	r5, [r0, #30]
 801b7c0:	8405      	strh	r5, [r0, #32]
 801b7c2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801b7c4:	8705      	strh	r5, [r0, #56]	@ 0x38
 801b7c6:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801b7c8:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801b7cc:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801b7d0:	220e      	movs	r2, #14
 801b7d2:	4629      	mov	r1, r5
 801b7d4:	304c      	adds	r0, #76	@ 0x4c
 801b7d6:	f010 fb78 	bl	802beca <memset>
 801b7da:	2301      	movs	r3, #1
 801b7dc:	4620      	mov	r0, r4
 801b7de:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801b7e2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801b7e6:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801b7ea:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801b7ee:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801b7f2:	f7f6 faa3 	bl	8011d3c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	bd38      	pop	{r3, r4, r5, pc}

0801b7fa <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801b7fa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b7fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b800:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801b802:	fab0 f080 	clz	r0, r0
 801b806:	0940      	lsrs	r0, r0, #5
 801b808:	4770      	bx	lr

0801b80a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b80a:	b530      	push	{r4, r5, lr}
 801b80c:	2500      	movs	r5, #0
 801b80e:	2401      	movs	r4, #1
 801b810:	6843      	ldr	r3, [r0, #4]
 801b812:	b913      	cbnz	r3, 801b81a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b814:	6803      	ldr	r3, [r0, #0]
 801b816:	b313      	cbz	r3, 801b85e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b818:	6043      	str	r3, [r0, #4]
 801b81a:	7e03      	ldrb	r3, [r0, #24]
 801b81c:	b143      	cbz	r3, 801b830 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b81e:	6943      	ldr	r3, [r0, #20]
 801b820:	b12b      	cbz	r3, 801b82e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b822:	881a      	ldrh	r2, [r3, #0]
 801b824:	b11a      	cbz	r2, 801b82e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b826:	1c9a      	adds	r2, r3, #2
 801b828:	6142      	str	r2, [r0, #20]
 801b82a:	8818      	ldrh	r0, [r3, #0]
 801b82c:	bd30      	pop	{r4, r5, pc}
 801b82e:	7605      	strb	r5, [r0, #24]
 801b830:	6843      	ldr	r3, [r0, #4]
 801b832:	8819      	ldrh	r1, [r3, #0]
 801b834:	b199      	cbz	r1, 801b85e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b836:	1c9a      	adds	r2, r3, #2
 801b838:	2902      	cmp	r1, #2
 801b83a:	6042      	str	r2, [r0, #4]
 801b83c:	d1f5      	bne.n	801b82a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b83e:	7c03      	ldrb	r3, [r0, #16]
 801b840:	2b01      	cmp	r3, #1
 801b842:	d8e5      	bhi.n	801b810 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b844:	1c5a      	adds	r2, r3, #1
 801b846:	7402      	strb	r2, [r0, #16]
 801b848:	3302      	adds	r3, #2
 801b84a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801b84e:	6143      	str	r3, [r0, #20]
 801b850:	2b00      	cmp	r3, #0
 801b852:	d0dd      	beq.n	801b810 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b854:	881b      	ldrh	r3, [r3, #0]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d0da      	beq.n	801b810 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b85a:	7604      	strb	r4, [r0, #24]
 801b85c:	e7d8      	b.n	801b810 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b85e:	2000      	movs	r0, #0
 801b860:	e7e4      	b.n	801b82c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801b862:	6001      	str	r1, [r0, #0]
 801b864:	2100      	movs	r1, #0
 801b866:	b430      	push	{r4, r5}
 801b868:	6041      	str	r1, [r0, #4]
 801b86a:	6815      	ldr	r5, [r2, #0]
 801b86c:	6085      	str	r5, [r0, #8]
 801b86e:	6852      	ldr	r2, [r2, #4]
 801b870:	6443      	str	r3, [r0, #68]	@ 0x44
 801b872:	9b02      	ldr	r3, [sp, #8]
 801b874:	60c2      	str	r2, [r0, #12]
 801b876:	7401      	strb	r1, [r0, #16]
 801b878:	6141      	str	r1, [r0, #20]
 801b87a:	7601      	strb	r1, [r0, #24]
 801b87c:	8701      	strh	r1, [r0, #56]	@ 0x38
 801b87e:	8401      	strh	r1, [r0, #32]
 801b880:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801b884:	6483      	str	r3, [r0, #72]	@ 0x48
 801b886:	bc30      	pop	{r4, r5}
 801b888:	f7f6 ba58 	b.w	8011d3c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801b88c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801b88c:	b408      	push	{r3}
 801b88e:	b510      	push	{r4, lr}
 801b890:	b085      	sub	sp, #20
 801b892:	ac07      	add	r4, sp, #28
 801b894:	f854 3b04 	ldr.w	r3, [r4], #4
 801b898:	9300      	str	r3, [sp, #0]
 801b89a:	4613      	mov	r3, r2
 801b89c:	4622      	mov	r2, r4
 801b89e:	9403      	str	r4, [sp, #12]
 801b8a0:	f7ff ffdf 	bl	801b862 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b8a4:	b005      	add	sp, #20
 801b8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8aa:	b001      	add	sp, #4
 801b8ac:	4770      	bx	lr

0801b8ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b8ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8b0:	4605      	mov	r5, r0
 801b8b2:	4608      	mov	r0, r1
 801b8b4:	b1e9      	cbz	r1, 801b8f2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801b8b6:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801b8ba:	460b      	mov	r3, r1
 801b8bc:	4622      	mov	r2, r4
 801b8be:	f101 0708 	add.w	r7, r1, #8
 801b8c2:	4626      	mov	r6, r4
 801b8c4:	6818      	ldr	r0, [r3, #0]
 801b8c6:	6859      	ldr	r1, [r3, #4]
 801b8c8:	3308      	adds	r3, #8
 801b8ca:	c603      	stmia	r6!, {r0, r1}
 801b8cc:	42bb      	cmp	r3, r7
 801b8ce:	4634      	mov	r4, r6
 801b8d0:	d1f7      	bne.n	801b8c2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b8d2:	6818      	ldr	r0, [r3, #0]
 801b8d4:	6030      	str	r0, [r6, #0]
 801b8d6:	4610      	mov	r0, r2
 801b8d8:	889b      	ldrh	r3, [r3, #4]
 801b8da:	80b3      	strh	r3, [r6, #4]
 801b8dc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801b8e0:	015b      	lsls	r3, r3, #5
 801b8e2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801b8e6:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801b8ea:	430b      	orrs	r3, r1
 801b8ec:	425b      	negs	r3, r3
 801b8ee:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b8f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b8f4:	b538      	push	{r3, r4, r5, lr}
 801b8f6:	460c      	mov	r4, r1
 801b8f8:	6811      	ldr	r1, [r2, #0]
 801b8fa:	4610      	mov	r0, r2
 801b8fc:	68cd      	ldr	r5, [r1, #12]
 801b8fe:	4619      	mov	r1, r3
 801b900:	47a8      	blx	r5
 801b902:	2800      	cmp	r0, #0
 801b904:	bf08      	it	eq
 801b906:	4620      	moveq	r0, r4
 801b908:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b90c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b910:	468c      	mov	ip, r1
 801b912:	4605      	mov	r5, r0
 801b914:	4614      	mov	r4, r2
 801b916:	b942      	cbnz	r2, 801b92a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801b918:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801b91c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801b920:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801b924:	4620      	mov	r0, r4
 801b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b92a:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801b92e:	7b50      	ldrb	r0, [r2, #13]
 801b930:	8893      	ldrh	r3, [r2, #4]
 801b932:	0106      	lsls	r6, r0, #4
 801b934:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801b938:	79e6      	ldrb	r6, [r4, #7]
 801b93a:	4316      	orrs	r6, r2
 801b93c:	185a      	adds	r2, r3, r1
 801b93e:	b291      	uxth	r1, r2
 801b940:	291d      	cmp	r1, #29
 801b942:	b2b7      	uxth	r7, r6
 801b944:	d87d      	bhi.n	801ba42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801b946:	2201      	movs	r2, #1
 801b948:	408a      	lsls	r2, r1
 801b94a:	498a      	ldr	r1, [pc, #552]	@ (801bb74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801b94c:	10f6      	asrs	r6, r6, #3
 801b94e:	420a      	tst	r2, r1
 801b950:	d12d      	bne.n	801b9ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801b952:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801b956:	d074      	beq.n	801ba42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801b958:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801b95c:	4623      	mov	r3, r4
 801b95e:	f104 0e08 	add.w	lr, r4, #8
 801b962:	4614      	mov	r4, r2
 801b964:	4694      	mov	ip, r2
 801b966:	6818      	ldr	r0, [r3, #0]
 801b968:	6859      	ldr	r1, [r3, #4]
 801b96a:	3308      	adds	r3, #8
 801b96c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b970:	4573      	cmp	r3, lr
 801b972:	4662      	mov	r2, ip
 801b974:	d1f6      	bne.n	801b964 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801b976:	6818      	ldr	r0, [r3, #0]
 801b978:	f8cc 0000 	str.w	r0, [ip]
 801b97c:	889b      	ldrh	r3, [r3, #4]
 801b97e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801b982:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801b986:	b2b3      	uxth	r3, r6
 801b988:	1aca      	subs	r2, r1, r3
 801b98a:	b292      	uxth	r2, r2
 801b98c:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801b990:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801b994:	10d2      	asrs	r2, r2, #3
 801b996:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801b99a:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801b99e:	4302      	orrs	r2, r0
 801b9a0:	1bcf      	subs	r7, r1, r7
 801b9a2:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801b9a6:	1afb      	subs	r3, r7, r3
 801b9a8:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801b9ac:	e7ba      	b.n	801b924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801b9ae:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801b9b2:	4623      	mov	r3, r4
 801b9b4:	f104 0808 	add.w	r8, r4, #8
 801b9b8:	4614      	mov	r4, r2
 801b9ba:	4696      	mov	lr, r2
 801b9bc:	6818      	ldr	r0, [r3, #0]
 801b9be:	6859      	ldr	r1, [r3, #4]
 801b9c0:	3308      	adds	r3, #8
 801b9c2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b9c6:	4543      	cmp	r3, r8
 801b9c8:	4672      	mov	r2, lr
 801b9ca:	d1f6      	bne.n	801b9ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801b9cc:	6818      	ldr	r0, [r3, #0]
 801b9ce:	f8ce 0000 	str.w	r0, [lr]
 801b9d2:	889b      	ldrh	r3, [r3, #4]
 801b9d4:	f8ae 3004 	strh.w	r3, [lr, #4]
 801b9d8:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801b9da:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801b9de:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801b9e0:	f640 6333 	movw	r3, #3635	@ 0xe33
 801b9e4:	4299      	cmp	r1, r3
 801b9e6:	d111      	bne.n	801ba0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801b9e8:	f8dc 3000 	ldr.w	r3, [ip]
 801b9ec:	4660      	mov	r0, ip
 801b9ee:	68db      	ldr	r3, [r3, #12]
 801b9f0:	4798      	blx	r3
 801b9f2:	7b41      	ldrb	r1, [r0, #13]
 801b9f4:	00cb      	lsls	r3, r1, #3
 801b9f6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b9fa:	7a03      	ldrb	r3, [r0, #8]
 801b9fc:	4313      	orrs	r3, r2
 801b9fe:	064a      	lsls	r2, r1, #25
 801ba00:	bf44      	itt	mi
 801ba02:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ba06:	b21b      	sxthmi	r3, r3
 801ba08:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801ba0c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801ba10:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801ba14:	443b      	add	r3, r7
 801ba16:	4433      	add	r3, r6
 801ba18:	b29b      	uxth	r3, r3
 801ba1a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801ba1e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801ba22:	10db      	asrs	r3, r3, #3
 801ba24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801ba28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801ba2c:	4313      	orrs	r3, r2
 801ba2e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801ba32:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801ba36:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801ba3a:	1a9b      	subs	r3, r3, r2
 801ba3c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801ba40:	e770      	b.n	801b924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801ba42:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801ba46:	f023 0204 	bic.w	r2, r3, #4
 801ba4a:	428a      	cmp	r2, r1
 801ba4c:	d003      	beq.n	801ba56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801ba4e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801ba52:	4293      	cmp	r3, r2
 801ba54:	d137      	bne.n	801bac6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801ba56:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801ba5a:	4622      	mov	r2, r4
 801ba5c:	f104 0808 	add.w	r8, r4, #8
 801ba60:	4634      	mov	r4, r6
 801ba62:	46b6      	mov	lr, r6
 801ba64:	6810      	ldr	r0, [r2, #0]
 801ba66:	6851      	ldr	r1, [r2, #4]
 801ba68:	3208      	adds	r2, #8
 801ba6a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ba6e:	4542      	cmp	r2, r8
 801ba70:	4676      	mov	r6, lr
 801ba72:	d1f6      	bne.n	801ba62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801ba74:	6810      	ldr	r0, [r2, #0]
 801ba76:	3b01      	subs	r3, #1
 801ba78:	f8ce 0000 	str.w	r0, [lr]
 801ba7c:	8892      	ldrh	r2, [r2, #4]
 801ba7e:	b29b      	uxth	r3, r3
 801ba80:	f8ae 2004 	strh.w	r2, [lr, #4]
 801ba84:	4621      	mov	r1, r4
 801ba86:	4662      	mov	r2, ip
 801ba88:	4628      	mov	r0, r5
 801ba8a:	f7ff ff33 	bl	801b8f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ba8e:	7b41      	ldrb	r1, [r0, #13]
 801ba90:	00cb      	lsls	r3, r1, #3
 801ba92:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ba96:	7a03      	ldrb	r3, [r0, #8]
 801ba98:	0648      	lsls	r0, r1, #25
 801ba9a:	ea43 0302 	orr.w	r3, r3, r2
 801ba9e:	bf44      	itt	mi
 801baa0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801baa4:	b21b      	sxthmi	r3, r3
 801baa6:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801baaa:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801baae:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801bab2:	005b      	lsls	r3, r3, #1
 801bab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bab8:	4313      	orrs	r3, r2
 801baba:	115a      	asrs	r2, r3, #5
 801babc:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bac0:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801bac4:	e046      	b.n	801bb54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801bac6:	00c2      	lsls	r2, r0, #3
 801bac8:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801bacc:	7a22      	ldrb	r2, [r4, #8]
 801bace:	430a      	orrs	r2, r1
 801bad0:	0641      	lsls	r1, r0, #25
 801bad2:	f640 6109 	movw	r1, #3593	@ 0xe09
 801bad6:	bf44      	itt	mi
 801bad8:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801badc:	b212      	sxthmi	r2, r2
 801bade:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801bae2:	f023 0210 	bic.w	r2, r3, #16
 801bae6:	428a      	cmp	r2, r1
 801bae8:	d003      	beq.n	801baf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801baea:	f640 6213 	movw	r2, #3603	@ 0xe13
 801baee:	4293      	cmp	r3, r2
 801baf0:	d13d      	bne.n	801bb6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801baf2:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801baf6:	4696      	mov	lr, r2
 801baf8:	f104 0808 	add.w	r8, r4, #8
 801bafc:	4616      	mov	r6, r2
 801bafe:	6820      	ldr	r0, [r4, #0]
 801bb00:	6861      	ldr	r1, [r4, #4]
 801bb02:	3408      	adds	r4, #8
 801bb04:	c603      	stmia	r6!, {r0, r1}
 801bb06:	4544      	cmp	r4, r8
 801bb08:	4632      	mov	r2, r6
 801bb0a:	d1f7      	bne.n	801bafc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801bb0c:	6820      	ldr	r0, [r4, #0]
 801bb0e:	6030      	str	r0, [r6, #0]
 801bb10:	88a1      	ldrh	r1, [r4, #4]
 801bb12:	4628      	mov	r0, r5
 801bb14:	80b1      	strh	r1, [r6, #4]
 801bb16:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801bb1a:	4671      	mov	r1, lr
 801bb1c:	0076      	lsls	r6, r6, #1
 801bb1e:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bb22:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801bb26:	4674      	mov	r4, lr
 801bb28:	4316      	orrs	r6, r2
 801bb2a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801bb2e:	4293      	cmp	r3, r2
 801bb30:	bf1a      	itte	ne
 801bb32:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bb36:	b29b      	uxthne	r3, r3
 801bb38:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801bb3c:	4662      	mov	r2, ip
 801bb3e:	f7ff fed9 	bl	801b8f4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bb42:	7b43      	ldrb	r3, [r0, #13]
 801bb44:	7a82      	ldrb	r2, [r0, #10]
 801bb46:	005b      	lsls	r3, r3, #1
 801bb48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bb4c:	4313      	orrs	r3, r2
 801bb4e:	1af6      	subs	r6, r6, r3
 801bb50:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801bb54:	7b61      	ldrb	r1, [r4, #13]
 801bb56:	00cb      	lsls	r3, r1, #3
 801bb58:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bb5c:	7a23      	ldrb	r3, [r4, #8]
 801bb5e:	4313      	orrs	r3, r2
 801bb60:	064a      	lsls	r2, r1, #25
 801bb62:	bf44      	itt	mi
 801bb64:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bb68:	b21b      	sxthmi	r3, r3
 801bb6a:	1bdb      	subs	r3, r3, r7
 801bb6c:	e71c      	b.n	801b9a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801bb6e:	2300      	movs	r3, #0
 801bb70:	e7a6      	b.n	801bac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801bb72:	bf00      	nop
 801bb74:	3fc00079 	.word	0x3fc00079

0801bb78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb7c:	4604      	mov	r4, r0
 801bb7e:	b942      	cbnz	r2, 801bb92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bb80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bb84:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801bb88:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801bb8c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801bb90:	e047      	b.n	801bc22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bb92:	7b51      	ldrb	r1, [r2, #13]
 801bb94:	8893      	ldrh	r3, [r2, #4]
 801bb96:	010d      	lsls	r5, r1, #4
 801bb98:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801bb9c:	79d5      	ldrb	r5, [r2, #7]
 801bb9e:	4305      	orrs	r5, r0
 801bba0:	2d04      	cmp	r5, #4
 801bba2:	bfcc      	ite	gt
 801bba4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bba8:	f04f 0e01 	movle.w	lr, #1
 801bbac:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801bbb0:	f200 80ab 	bhi.w	801bd0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bbb4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801bbb8:	4283      	cmp	r3, r0
 801bbba:	d216      	bcs.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bbbc:	f240 605b 	movw	r0, #1627	@ 0x65b
 801bbc0:	4283      	cmp	r3, r0
 801bbc2:	d859      	bhi.n	801bc78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bbc4:	f240 6057 	movw	r0, #1623	@ 0x657
 801bbc8:	4283      	cmp	r3, r0
 801bbca:	d20e      	bcs.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bbcc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bbd0:	d24a      	bcs.n	801bc68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bbd2:	f240 604e 	movw	r0, #1614	@ 0x64e
 801bbd6:	4283      	cmp	r3, r0
 801bbd8:	d207      	bcs.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bbda:	f240 601a 	movw	r0, #1562	@ 0x61a
 801bbde:	4283      	cmp	r3, r0
 801bbe0:	d02a      	beq.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bbe2:	d821      	bhi.n	801bc28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bbe4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801bbe8:	d35b      	bcc.n	801bca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bbea:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801bbee:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bbf2:	f040 80d0 	bne.w	801bd96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bbf6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801bbfa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bbfe:	f040 80ca 	bne.w	801bd96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bc02:	00cb      	lsls	r3, r1, #3
 801bc04:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bc08:	7a13      	ldrb	r3, [r2, #8]
 801bc0a:	0649      	lsls	r1, r1, #25
 801bc0c:	ea43 0300 	orr.w	r3, r3, r0
 801bc10:	bf44      	itt	mi
 801bc12:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bc16:	b21b      	sxthmi	r3, r3
 801bc18:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bc1c:	1b5d      	subs	r5, r3, r5
 801bc1e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bc22:	4610      	mov	r0, r2
 801bc24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc28:	f240 604b 	movw	r0, #1611	@ 0x64b
 801bc2c:	4283      	cmp	r3, r0
 801bc2e:	d338      	bcc.n	801bca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bc30:	f240 604c 	movw	r0, #1612	@ 0x64c
 801bc34:	4283      	cmp	r3, r0
 801bc36:	d9d8      	bls.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc38:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801bc3c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801bc40:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bc44:	f040 80f2 	bne.w	801be2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801bc48:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bc4c:	f040 80ee 	bne.w	801be2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801bc50:	00cb      	lsls	r3, r1, #3
 801bc52:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bc56:	7a13      	ldrb	r3, [r2, #8]
 801bc58:	064e      	lsls	r6, r1, #25
 801bc5a:	ea43 0300 	orr.w	r3, r3, r0
 801bc5e:	bf44      	itt	mi
 801bc60:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bc64:	b21b      	sxthmi	r3, r3
 801bc66:	e7d9      	b.n	801bc1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801bc68:	f240 6054 	movw	r0, #1620	@ 0x654
 801bc6c:	4283      	cmp	r3, r0
 801bc6e:	d8e3      	bhi.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bc70:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bc74:	d9e0      	bls.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bc76:	e7b8      	b.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc78:	f240 6074 	movw	r0, #1652	@ 0x674
 801bc7c:	4283      	cmp	r3, r0
 801bc7e:	d0b4      	beq.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc80:	d82d      	bhi.n	801bcde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801bc82:	f240 605e 	movw	r0, #1630	@ 0x65e
 801bc86:	4283      	cmp	r3, r0
 801bc88:	d804      	bhi.n	801bc94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801bc8a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801bc8e:	4283      	cmp	r3, r0
 801bc90:	d3d2      	bcc.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bc92:	e7aa      	b.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc94:	f240 605f 	movw	r0, #1631	@ 0x65f
 801bc98:	4283      	cmp	r3, r0
 801bc9a:	d0cd      	beq.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bc9c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801bca0:	d0a3      	beq.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bca2:	00cb      	lsls	r3, r1, #3
 801bca4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bca8:	7a13      	ldrb	r3, [r2, #8]
 801bcaa:	0649      	lsls	r1, r1, #25
 801bcac:	ea43 0300 	orr.w	r3, r3, r0
 801bcb0:	bf44      	itt	mi
 801bcb2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bcb6:	b21b      	sxthmi	r3, r3
 801bcb8:	1b5d      	subs	r5, r3, r5
 801bcba:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bcbe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801bcc2:	7b53      	ldrb	r3, [r2, #13]
 801bcc4:	015b      	lsls	r3, r3, #5
 801bcc6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bcca:	7993      	ldrb	r3, [r2, #6]
 801bccc:	430b      	orrs	r3, r1
 801bcce:	2105      	movs	r1, #5
 801bcd0:	005b      	lsls	r3, r3, #1
 801bcd2:	fb93 f3f1 	sdiv	r3, r3, r1
 801bcd6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801bcda:	440b      	add	r3, r1
 801bcdc:	e756      	b.n	801bb8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801bcde:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801bce2:	4283      	cmp	r3, r0
 801bce4:	d809      	bhi.n	801bcfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801bce6:	f240 60df 	movw	r0, #1759	@ 0x6df
 801bcea:	4283      	cmp	r3, r0
 801bcec:	f4bf af7d 	bcs.w	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bcf0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801bcf4:	2b05      	cmp	r3, #5
 801bcf6:	d8d4      	bhi.n	801bca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bcf8:	e777      	b.n	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bcfa:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801bcfe:	4283      	cmp	r3, r0
 801bd00:	d09a      	beq.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd02:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801bd06:	4283      	cmp	r3, r0
 801bd08:	e7ca      	b.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bd0a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801bd0e:	d22b      	bcs.n	801bd68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801bd10:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801bd14:	4283      	cmp	r3, r0
 801bd16:	d28f      	bcs.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd18:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801bd1c:	4283      	cmp	r3, r0
 801bd1e:	d816      	bhi.n	801bd4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801bd20:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801bd24:	4283      	cmp	r3, r0
 801bd26:	f4bf af60 	bcs.w	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd2a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801bd2e:	4283      	cmp	r3, r0
 801bd30:	d80a      	bhi.n	801bd48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801bd32:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801bd36:	4283      	cmp	r3, r0
 801bd38:	f4bf af57 	bcs.w	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd3c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801bd40:	4283      	cmp	r3, r0
 801bd42:	f43f af79 	beq.w	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd46:	e7ac      	b.n	801bca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bd48:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801bd4c:	e7f8      	b.n	801bd40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801bd4e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801bd52:	4283      	cmp	r3, r0
 801bd54:	d802      	bhi.n	801bd5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801bd56:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801bd5a:	e798      	b.n	801bc8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801bd5c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801bd60:	4283      	cmp	r3, r0
 801bd62:	f47f af42 	bne.w	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd66:	e767      	b.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd68:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801bd6c:	4283      	cmp	r3, r0
 801bd6e:	f43f af63 	beq.w	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd72:	d802      	bhi.n	801bd7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801bd74:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801bd78:	e7f2      	b.n	801bd60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801bd7a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801bd7e:	4283      	cmp	r3, r0
 801bd80:	d805      	bhi.n	801bd8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801bd82:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801bd86:	4283      	cmp	r3, r0
 801bd88:	f4ff af2f 	bcc.w	801bbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd8c:	e754      	b.n	801bc38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd8e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801bd92:	4283      	cmp	r3, r0
 801bd94:	e7af      	b.n	801bcf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801bd96:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801bd9a:	4617      	mov	r7, r2
 801bd9c:	4666      	mov	r6, ip
 801bd9e:	f102 0808 	add.w	r8, r2, #8
 801bda2:	46e6      	mov	lr, ip
 801bda4:	6838      	ldr	r0, [r7, #0]
 801bda6:	6879      	ldr	r1, [r7, #4]
 801bda8:	3708      	adds	r7, #8
 801bdaa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bdae:	4547      	cmp	r7, r8
 801bdb0:	46f4      	mov	ip, lr
 801bdb2:	d1f6      	bne.n	801bda2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801bdb4:	6838      	ldr	r0, [r7, #0]
 801bdb6:	f8ce 0000 	str.w	r0, [lr]
 801bdba:	88b9      	ldrh	r1, [r7, #4]
 801bdbc:	f8ae 1004 	strh.w	r1, [lr, #4]
 801bdc0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801bdc4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bdc8:	d009      	beq.n	801bdde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801bdca:	7b51      	ldrb	r1, [r2, #13]
 801bdcc:	7992      	ldrb	r2, [r2, #6]
 801bdce:	0149      	lsls	r1, r1, #5
 801bdd0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801bdd4:	4311      	orrs	r1, r2
 801bdd6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bdda:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801bdde:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bde2:	b2ad      	uxth	r5, r5
 801bde4:	d00d      	beq.n	801be02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801bde6:	442b      	add	r3, r5
 801bde8:	b29b      	uxth	r3, r3
 801bdea:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801bdee:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801bdf2:	10db      	asrs	r3, r3, #3
 801bdf4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801bdf8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801bdfc:	4313      	orrs	r3, r2
 801bdfe:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801be02:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801be06:	00cb      	lsls	r3, r1, #3
 801be08:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801be0c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801be10:	064f      	lsls	r7, r1, #25
 801be12:	ea43 0302 	orr.w	r3, r3, r2
 801be16:	bf44      	itt	mi
 801be18:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801be1c:	b21b      	sxthmi	r3, r3
 801be1e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801be22:	1b5b      	subs	r3, r3, r5
 801be24:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801be28:	4632      	mov	r2, r6
 801be2a:	e6fa      	b.n	801bc22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801be2c:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801be30:	4617      	mov	r7, r2
 801be32:	4666      	mov	r6, ip
 801be34:	f102 0908 	add.w	r9, r2, #8
 801be38:	46e0      	mov	r8, ip
 801be3a:	6838      	ldr	r0, [r7, #0]
 801be3c:	6879      	ldr	r1, [r7, #4]
 801be3e:	3708      	adds	r7, #8
 801be40:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801be44:	454f      	cmp	r7, r9
 801be46:	46c4      	mov	ip, r8
 801be48:	d1f6      	bne.n	801be38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801be4a:	6838      	ldr	r0, [r7, #0]
 801be4c:	f8c8 0000 	str.w	r0, [r8]
 801be50:	88b9      	ldrh	r1, [r7, #4]
 801be52:	f8a8 1004 	strh.w	r1, [r8, #4]
 801be56:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801be5a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801be5e:	d009      	beq.n	801be74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801be60:	7b51      	ldrb	r1, [r2, #13]
 801be62:	7992      	ldrb	r2, [r2, #6]
 801be64:	0149      	lsls	r1, r1, #5
 801be66:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801be6a:	4311      	orrs	r1, r2
 801be6c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801be70:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801be74:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801be78:	d00e      	beq.n	801be98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801be7a:	eba3 030e 	sub.w	r3, r3, lr
 801be7e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801be82:	b29b      	uxth	r3, r3
 801be84:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801be88:	10db      	asrs	r3, r3, #3
 801be8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801be8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801be92:	4313      	orrs	r3, r2
 801be94:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801be98:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801be9c:	00cb      	lsls	r3, r1, #3
 801be9e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bea2:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801bea6:	0648      	lsls	r0, r1, #25
 801bea8:	ea43 0302 	orr.w	r3, r3, r2
 801beac:	bf44      	itt	mi
 801beae:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801beb2:	b21b      	sxthmi	r3, r3
 801beb4:	1b5d      	subs	r5, r3, r5
 801beb6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801beba:	e7b5      	b.n	801be28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801bebc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bec0:	461e      	mov	r6, r3
 801bec2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801bec4:	4604      	mov	r4, r0
 801bec6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801beca:	4617      	mov	r7, r2
 801becc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801bed0:	f7f5 fe8e 	bl	8011bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bed4:	4605      	mov	r5, r0
 801bed6:	b918      	cbnz	r0, 801bee0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801bed8:	6030      	str	r0, [r6, #0]
 801beda:	4628      	mov	r0, r5
 801bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bee0:	683b      	ldr	r3, [r7, #0]
 801bee2:	4601      	mov	r1, r0
 801bee4:	68db      	ldr	r3, [r3, #12]
 801bee6:	4638      	mov	r0, r7
 801bee8:	4798      	blx	r3
 801beea:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801beee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801bef2:	4602      	mov	r2, r0
 801bef4:	6030      	str	r0, [r6, #0]
 801bef6:	d213      	bcs.n	801bf20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801bef8:	4643      	mov	r3, r8
 801befa:	4639      	mov	r1, r7
 801befc:	4620      	mov	r0, r4
 801befe:	f7ff fe3b 	bl	801bb78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bf02:	6030      	str	r0, [r6, #0]
 801bf04:	6833      	ldr	r3, [r6, #0]
 801bf06:	b143      	cbz	r3, 801bf1a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801bf08:	7b5a      	ldrb	r2, [r3, #13]
 801bf0a:	7a9b      	ldrb	r3, [r3, #10]
 801bf0c:	0052      	lsls	r2, r2, #1
 801bf0e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801bf12:	4313      	orrs	r3, r2
 801bf14:	bf0c      	ite	eq
 801bf16:	2301      	moveq	r3, #1
 801bf18:	2300      	movne	r3, #0
 801bf1a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801bf1e:	e7dc      	b.n	801beda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801bf20:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801bf24:	b29b      	uxth	r3, r3
 801bf26:	2b7f      	cmp	r3, #127	@ 0x7f
 801bf28:	d804      	bhi.n	801bf34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801bf2a:	4639      	mov	r1, r7
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	f7ff fced 	bl	801b90c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bf32:	e7e6      	b.n	801bf02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801bf34:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d0e3      	beq.n	801bf04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bf3c:	f640 1302 	movw	r3, #2306	@ 0x902
 801bf40:	429d      	cmp	r5, r3
 801bf42:	d1df      	bne.n	801bf04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bf44:	4601      	mov	r1, r0
 801bf46:	4620      	mov	r0, r4
 801bf48:	f7ff fcb1 	bl	801b8ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bf4c:	e7d9      	b.n	801bf02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801bf4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801bf4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf52:	461e      	mov	r6, r3
 801bf54:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801bf56:	4604      	mov	r4, r0
 801bf58:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bf5c:	4617      	mov	r7, r2
 801bf5e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801bf62:	f7f5 fe45 	bl	8011bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf66:	4605      	mov	r5, r0
 801bf68:	b918      	cbnz	r0, 801bf72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801bf6a:	6030      	str	r0, [r6, #0]
 801bf6c:	4628      	mov	r0, r5
 801bf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf72:	683b      	ldr	r3, [r7, #0]
 801bf74:	4601      	mov	r1, r0
 801bf76:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801bf7a:	4638      	mov	r0, r7
 801bf7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bf80:	47c8      	blx	r9
 801bf82:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801bf86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801bf8a:	4602      	mov	r2, r0
 801bf8c:	6030      	str	r0, [r6, #0]
 801bf8e:	d213      	bcs.n	801bfb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801bf90:	4643      	mov	r3, r8
 801bf92:	4639      	mov	r1, r7
 801bf94:	4620      	mov	r0, r4
 801bf96:	f7ff fdef 	bl	801bb78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bf9a:	6030      	str	r0, [r6, #0]
 801bf9c:	6833      	ldr	r3, [r6, #0]
 801bf9e:	b143      	cbz	r3, 801bfb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801bfa0:	7b5a      	ldrb	r2, [r3, #13]
 801bfa2:	7a9b      	ldrb	r3, [r3, #10]
 801bfa4:	0052      	lsls	r2, r2, #1
 801bfa6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801bfaa:	4313      	orrs	r3, r2
 801bfac:	bf0c      	ite	eq
 801bfae:	2301      	moveq	r3, #1
 801bfb0:	2300      	movne	r3, #0
 801bfb2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801bfb6:	e7d9      	b.n	801bf6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801bfb8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801bfbc:	b29b      	uxth	r3, r3
 801bfbe:	2b7f      	cmp	r3, #127	@ 0x7f
 801bfc0:	d804      	bhi.n	801bfcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801bfc2:	4639      	mov	r1, r7
 801bfc4:	4620      	mov	r0, r4
 801bfc6:	f7ff fca1 	bl	801b90c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bfca:	e7e6      	b.n	801bf9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801bfcc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d0e3      	beq.n	801bf9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801bfd4:	f640 1302 	movw	r3, #2306	@ 0x902
 801bfd8:	429d      	cmp	r5, r3
 801bfda:	d1df      	bne.n	801bf9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801bfdc:	4601      	mov	r1, r0
 801bfde:	4620      	mov	r0, r4
 801bfe0:	f7ff fc65 	bl	801b8ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bfe4:	e7d9      	b.n	801bf9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801bfe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801bfe6:	b510      	push	{r4, lr}
 801bfe8:	4604      	mov	r4, r0
 801bfea:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801bfee:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801bff0:	b1f1      	cbz	r1, 801c030 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801bff2:	2b0a      	cmp	r3, #10
 801bff4:	d02f      	beq.n	801c056 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801bff6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801bff8:	3901      	subs	r1, #1
 801bffa:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801bffe:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801c000:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801c004:	1c51      	adds	r1, r2, #1
 801c006:	b289      	uxth	r1, r1
 801c008:	2901      	cmp	r1, #1
 801c00a:	bf84      	itt	hi
 801c00c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c010:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801c012:	f103 0201 	add.w	r2, r3, #1
 801c016:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c018:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c01a:	bf98      	it	ls
 801c01c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801c01e:	4413      	add	r3, r2
 801c020:	b29b      	uxth	r3, r3
 801c022:	2b09      	cmp	r3, #9
 801c024:	bf88      	it	hi
 801c026:	3b0a      	subhi	r3, #10
 801c028:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c02c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c02e:	e7dc      	b.n	801bfea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c030:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c032:	2b0a      	cmp	r3, #10
 801c034:	d00f      	beq.n	801c056 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801c036:	4620      	mov	r0, r4
 801c038:	f7ff fbe7 	bl	801b80a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c03c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c03e:	1c5a      	adds	r2, r3, #1
 801c040:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c042:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c044:	4413      	add	r3, r2
 801c046:	b29b      	uxth	r3, r3
 801c048:	2b09      	cmp	r3, #9
 801c04a:	bf88      	it	hi
 801c04c:	3b0a      	subhi	r3, #10
 801c04e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c052:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c054:	e7ec      	b.n	801c030 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801c056:	bd10      	pop	{r4, pc}

0801c058 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c058:	b538      	push	{r3, r4, r5, lr}
 801c05a:	4604      	mov	r4, r0
 801c05c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c05e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c062:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801c064:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801c066:	3a01      	subs	r2, #1
 801c068:	8702      	strh	r2, [r0, #56]	@ 0x38
 801c06a:	1c5a      	adds	r2, r3, #1
 801c06c:	b292      	uxth	r2, r2
 801c06e:	2a09      	cmp	r2, #9
 801c070:	bf86      	itte	hi
 801c072:	3b09      	subhi	r3, #9
 801c074:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801c076:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801c078:	f7ff ffb5 	bl	801bfe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c07c:	8c23      	ldrh	r3, [r4, #32]
 801c07e:	2b01      	cmp	r3, #1
 801c080:	bf9c      	itt	ls
 801c082:	3301      	addls	r3, #1
 801c084:	8423      	strhls	r3, [r4, #32]
 801c086:	8be3      	ldrh	r3, [r4, #30]
 801c088:	b90b      	cbnz	r3, 801c08e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c08a:	2302      	movs	r3, #2
 801c08c:	83e3      	strh	r3, [r4, #30]
 801c08e:	8be3      	ldrh	r3, [r4, #30]
 801c090:	4628      	mov	r0, r5
 801c092:	3b01      	subs	r3, #1
 801c094:	b29b      	uxth	r3, r3
 801c096:	83e3      	strh	r3, [r4, #30]
 801c098:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c09c:	8365      	strh	r5, [r4, #26]
 801c09e:	bd38      	pop	{r3, r4, r5, pc}

0801c0a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c0a0:	428a      	cmp	r2, r1
 801c0a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0a6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801c0a8:	d931      	bls.n	801c10e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801c0aa:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801c0ac:	1a54      	subs	r4, r2, r1
 801c0ae:	19ee      	adds	r6, r5, r7
 801c0b0:	3e01      	subs	r6, #1
 801c0b2:	fa1f fe84 	uxth.w	lr, r4
 801c0b6:	b2b4      	uxth	r4, r6
 801c0b8:	eba4 090e 	sub.w	r9, r4, lr
 801c0bc:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801c0c0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801c0c4:	fa1f f989 	uxth.w	r9, r9
 801c0c8:	2c09      	cmp	r4, #9
 801c0ca:	4626      	mov	r6, r4
 801c0cc:	bf88      	it	hi
 801c0ce:	f1a4 060a 	subhi.w	r6, r4, #10
 801c0d2:	f1bc 0f00 	cmp.w	ip, #0
 801c0d6:	bf08      	it	eq
 801c0d8:	f04f 0c02 	moveq.w	ip, #2
 801c0dc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c0e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c0e4:	3c01      	subs	r4, #1
 801c0e6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801c0ea:	fa1f fc8c 	uxth.w	ip, ip
 801c0ee:	b2a4      	uxth	r4, r4
 801c0f0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c0f4:	454c      	cmp	r4, r9
 801c0f6:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801c0fa:	d1e5      	bne.n	801c0c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c0fc:	eba5 050e 	sub.w	r5, r5, lr
 801c100:	eb0e 0408 	add.w	r4, lr, r8
 801c104:	8705      	strh	r5, [r0, #56]	@ 0x38
 801c106:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801c10a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801c10e:	250a      	movs	r5, #10
 801c110:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801c112:	1a64      	subs	r4, r4, r1
 801c114:	4439      	add	r1, r7
 801c116:	b289      	uxth	r1, r1
 801c118:	2909      	cmp	r1, #9
 801c11a:	bf88      	it	hi
 801c11c:	390a      	subhi	r1, #10
 801c11e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801c120:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c122:	b18a      	cbz	r2, 801c148 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801c124:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801c126:	3a01      	subs	r2, #1
 801c128:	3101      	adds	r1, #1
 801c12a:	b292      	uxth	r2, r2
 801c12c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c130:	8701      	strh	r1, [r0, #56]	@ 0x38
 801c132:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c134:	b901      	cbnz	r1, 801c138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801c136:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801c138:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c13a:	3901      	subs	r1, #1
 801c13c:	b289      	uxth	r1, r1
 801c13e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c140:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c144:	844c      	strh	r4, [r1, #34]	@ 0x22
 801c146:	e7ec      	b.n	801c122 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801c148:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c14c:	f7ff bf4b 	b.w	801bfe6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c150 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c150:	b570      	push	{r4, r5, r6, lr}
 801c152:	2500      	movs	r5, #0
 801c154:	4295      	cmp	r5, r2
 801c156:	d011      	beq.n	801c17c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c158:	8bc4      	ldrh	r4, [r0, #30]
 801c15a:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c15e:	4414      	add	r4, r2
 801c160:	3c01      	subs	r4, #1
 801c162:	1b64      	subs	r4, r4, r5
 801c164:	b2a4      	uxth	r4, r4
 801c166:	2c01      	cmp	r4, #1
 801c168:	bf88      	it	hi
 801c16a:	3c02      	subhi	r4, #2
 801c16c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c170:	8b64      	ldrh	r4, [r4, #26]
 801c172:	42b4      	cmp	r4, r6
 801c174:	d117      	bne.n	801c1a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c176:	3501      	adds	r5, #1
 801c178:	b2ad      	uxth	r5, r5
 801c17a:	e7eb      	b.n	801c154 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c17c:	2400      	movs	r4, #0
 801c17e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c182:	4413      	add	r3, r2
 801c184:	b2a2      	uxth	r2, r4
 801c186:	429a      	cmp	r2, r3
 801c188:	da0f      	bge.n	801c1aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c18a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801c18c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c190:	4432      	add	r2, r6
 801c192:	b292      	uxth	r2, r2
 801c194:	2a09      	cmp	r2, #9
 801c196:	bf88      	it	hi
 801c198:	3a0a      	subhi	r2, #10
 801c19a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c19e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801c1a0:	3401      	adds	r4, #1
 801c1a2:	42aa      	cmp	r2, r5
 801c1a4:	d0ee      	beq.n	801c184 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c1a6:	2000      	movs	r0, #0
 801c1a8:	bd70      	pop	{r4, r5, r6, pc}
 801c1aa:	2001      	movs	r0, #1
 801c1ac:	e7fc      	b.n	801c1a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c1ae <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c1ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1b2:	4605      	mov	r5, r0
 801c1b4:	4616      	mov	r6, r2
 801c1b6:	1c8c      	adds	r4, r1, #2
 801c1b8:	8809      	ldrh	r1, [r1, #0]
 801c1ba:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c1be:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c1c2:	42b3      	cmp	r3, r6
 801c1c4:	d124      	bne.n	801c210 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c1c6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c1ca:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c1ce:	f001 070f 	and.w	r7, r1, #15
 801c1d2:	f8cd 8000 	str.w	r8, [sp]
 801c1d6:	464b      	mov	r3, r9
 801c1d8:	4652      	mov	r2, sl
 801c1da:	4621      	mov	r1, r4
 801c1dc:	4628      	mov	r0, r5
 801c1de:	f7ff ffb7 	bl	801c150 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c1e2:	4683      	mov	fp, r0
 801c1e4:	b168      	cbz	r0, 801c202 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c1e6:	eb0a 0109 	add.w	r1, sl, r9
 801c1ea:	4441      	add	r1, r8
 801c1ec:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c1f0:	463a      	mov	r2, r7
 801c1f2:	4649      	mov	r1, r9
 801c1f4:	4628      	mov	r0, r5
 801c1f6:	f7ff ff53 	bl	801c0a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c1fa:	4658      	mov	r0, fp
 801c1fc:	b003      	add	sp, #12
 801c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c202:	eb07 010a 	add.w	r1, r7, sl
 801c206:	4449      	add	r1, r9
 801c208:	4441      	add	r1, r8
 801c20a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c20e:	e7d2      	b.n	801c1b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c210:	f04f 0b00 	mov.w	fp, #0
 801c214:	e7f1      	b.n	801c1fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c216 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c216:	b570      	push	{r4, r5, r6, lr}
 801c218:	8810      	ldrh	r0, [r2, #0]
 801c21a:	4298      	cmp	r0, r3
 801c21c:	d817      	bhi.n	801c24e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c21e:	1e48      	subs	r0, r1, #1
 801c220:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c224:	4298      	cmp	r0, r3
 801c226:	d312      	bcc.n	801c24e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c228:	2400      	movs	r4, #0
 801c22a:	428c      	cmp	r4, r1
 801c22c:	d20f      	bcs.n	801c24e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c22e:	1860      	adds	r0, r4, r1
 801c230:	1040      	asrs	r0, r0, #1
 801c232:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c236:	0085      	lsls	r5, r0, #2
 801c238:	42b3      	cmp	r3, r6
 801c23a:	d902      	bls.n	801c242 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c23c:	3001      	adds	r0, #1
 801c23e:	b284      	uxth	r4, r0
 801c240:	e7f3      	b.n	801c22a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c242:	d201      	bcs.n	801c248 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c244:	b281      	uxth	r1, r0
 801c246:	e7f0      	b.n	801c22a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c248:	442a      	add	r2, r5
 801c24a:	8850      	ldrh	r0, [r2, #2]
 801c24c:	bd70      	pop	{r4, r5, r6, pc}
 801c24e:	2000      	movs	r0, #0
 801c250:	e7fc      	b.n	801c24c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c252 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c256:	4604      	mov	r4, r0
 801c258:	260b      	movs	r6, #11
 801c25a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801c25c:	886f      	ldrh	r7, [r5, #2]
 801c25e:	087f      	lsrs	r7, r7, #1
 801c260:	3e01      	subs	r6, #1
 801c262:	d013      	beq.n	801c28c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c264:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801c266:	462a      	mov	r2, r5
 801c268:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c26c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c270:	4639      	mov	r1, r7
 801c272:	4643      	mov	r3, r8
 801c274:	4620      	mov	r0, r4
 801c276:	f7ff ffce 	bl	801c216 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c27a:	b138      	cbz	r0, 801c28c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c27c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c280:	4642      	mov	r2, r8
 801c282:	4620      	mov	r0, r4
 801c284:	f7ff ff93 	bl	801c1ae <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c288:	2800      	cmp	r0, #0
 801c28a:	d1e9      	bne.n	801c260 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c290 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c290:	b570      	push	{r4, r5, r6, lr}
 801c292:	694a      	ldr	r2, [r1, #20]
 801c294:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801c296:	684b      	ldr	r3, [r1, #4]
 801c298:	1b54      	subs	r4, r2, r5
 801c29a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801c29c:	f000 8107 	beq.w	801c4ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801c2a0:	1b9b      	subs	r3, r3, r6
 801c2a2:	d003      	beq.n	801c2ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c2a4:	2210      	movs	r2, #16
 801c2a6:	4363      	muls	r3, r4
 801c2a8:	fb93 f3f2 	sdiv	r3, r3, r2
 801c2ac:	680c      	ldr	r4, [r1, #0]
 801c2ae:	698a      	ldr	r2, [r1, #24]
 801c2b0:	1b65      	subs	r5, r4, r5
 801c2b2:	f000 80fe 	beq.w	801c4b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801c2b6:	1b92      	subs	r2, r2, r6
 801c2b8:	d003      	beq.n	801c2c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c2ba:	2410      	movs	r4, #16
 801c2bc:	436a      	muls	r2, r5
 801c2be:	fb92 f2f4 	sdiv	r2, r2, r4
 801c2c2:	1a9b      	subs	r3, r3, r2
 801c2c4:	ee07 3a90 	vmov	s15, r3
 801c2c8:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801c4f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801c2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c2d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c2d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c2d8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c2dc:	460a      	mov	r2, r1
 801c2de:	eeb1 6a43 	vneg.f32	s12, s6
 801c2e2:	4603      	mov	r3, r0
 801c2e4:	f100 040c 	add.w	r4, r0, #12
 801c2e8:	edd2 7a02 	vldr	s15, [r2, #8]
 801c2ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c2f0:	ece3 6a01 	vstmia	r3!, {s13}
 801c2f4:	edd2 7a03 	vldr	s15, [r2, #12]
 801c2f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c2fc:	edc3 7a02 	vstr	s15, [r3, #8]
 801c300:	edd2 7a04 	vldr	s15, [r2, #16]
 801c304:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c308:	429c      	cmp	r4, r3
 801c30a:	edc3 7a05 	vstr	s15, [r3, #20]
 801c30e:	f102 0214 	add.w	r2, r2, #20
 801c312:	d1e9      	bne.n	801c2e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c314:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c316:	698b      	ldr	r3, [r1, #24]
 801c318:	edd0 4a02 	vldr	s9, [r0, #8]
 801c31c:	1a9b      	subs	r3, r3, r2
 801c31e:	ee07 3a90 	vmov	s15, r3
 801c322:	684b      	ldr	r3, [r1, #4]
 801c324:	edd0 3a00 	vldr	s7, [r0]
 801c328:	1a9b      	subs	r3, r3, r2
 801c32a:	edd0 6a01 	vldr	s13, [r0, #4]
 801c32e:	ee07 3a10 	vmov	s14, r3
 801c332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c336:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c33a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c33e:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c342:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c346:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c34a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c34e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c352:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c356:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801c35a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c35c:	694a      	ldr	r2, [r1, #20]
 801c35e:	ed90 5a05 	vldr	s10, [r0, #20]
 801c362:	1b13      	subs	r3, r2, r4
 801c364:	ee07 3a10 	vmov	s14, r3
 801c368:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c36c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c370:	680b      	ldr	r3, [r1, #0]
 801c372:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c376:	1b1b      	subs	r3, r3, r4
 801c378:	ee07 3a10 	vmov	s14, r3
 801c37c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c380:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c384:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c388:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c38c:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801c390:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c392:	698b      	ldr	r3, [r1, #24]
 801c394:	ed90 2a03 	vldr	s4, [r0, #12]
 801c398:	1a9b      	subs	r3, r3, r2
 801c39a:	ee06 3a90 	vmov	s13, r3
 801c39e:	684b      	ldr	r3, [r1, #4]
 801c3a0:	edd0 5a04 	vldr	s11, [r0, #16]
 801c3a4:	1a9b      	subs	r3, r3, r2
 801c3a6:	ee07 3a10 	vmov	s14, r3
 801c3aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c3ae:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c3b2:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c3b6:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c3ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3be:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c3c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3c6:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c3ca:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c3ce:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801c3d2:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c3d4:	694a      	ldr	r2, [r1, #20]
 801c3d6:	ed90 1a07 	vldr	s2, [r0, #28]
 801c3da:	1b13      	subs	r3, r2, r4
 801c3dc:	ee07 3a10 	vmov	s14, r3
 801c3e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3e8:	680b      	ldr	r3, [r1, #0]
 801c3ea:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c3ee:	1b1b      	subs	r3, r3, r4
 801c3f0:	ee07 3a10 	vmov	s14, r3
 801c3f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3fc:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c400:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c404:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801c408:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c40a:	698b      	ldr	r3, [r1, #24]
 801c40c:	edd0 5a08 	vldr	s11, [r0, #32]
 801c410:	1a9b      	subs	r3, r3, r2
 801c412:	ee07 3a10 	vmov	s14, r3
 801c416:	684b      	ldr	r3, [r1, #4]
 801c418:	edd0 2a06 	vldr	s5, [r0, #24]
 801c41c:	1a9b      	subs	r3, r3, r2
 801c41e:	ee01 3a90 	vmov	s3, r3
 801c422:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c426:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c42a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c42e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c432:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c436:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c43a:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c43e:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c442:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c446:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c44a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c44c:	694a      	ldr	r2, [r1, #20]
 801c44e:	1b13      	subs	r3, r2, r4
 801c450:	ee03 3a10 	vmov	s6, r3
 801c454:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c458:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c45c:	680b      	ldr	r3, [r1, #0]
 801c45e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c462:	1b1b      	subs	r3, r3, r4
 801c464:	ee03 3a10 	vmov	s6, r3
 801c468:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c46c:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c470:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c474:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c478:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c47c:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c480:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c488:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801c48c:	dd13      	ble.n	801c4b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c48e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c492:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c496:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c49a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c4a4:	dd15      	ble.n	801c4d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c4a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c4aa:	6403      	str	r3, [r0, #64]	@ 0x40
 801c4ac:	bd70      	pop	{r4, r5, r6, pc}
 801c4ae:	4623      	mov	r3, r4
 801c4b0:	e6fc      	b.n	801c2ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c4b2:	462a      	mov	r2, r5
 801c4b4:	e705      	b.n	801c2c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c4b6:	d502      	bpl.n	801c4be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801c4b8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c4bc:	e7e9      	b.n	801c492 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801c4be:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c4c2:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c4c6:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ce:	dade      	bge.n	801c48e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801c4d0:	e7f2      	b.n	801c4b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801c4d2:	d502      	bpl.n	801c4da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801c4d4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c4d8:	e7e7      	b.n	801c4aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801c4da:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c4de:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c4e2:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ea:	dadc      	bge.n	801c4a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801c4ec:	e7f2      	b.n	801c4d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801c4ee:	bf00      	nop
 801c4f0:	3d800000 	.word	0x3d800000

0801c4f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4f8:	2714      	movs	r7, #20
 801c4fa:	435f      	muls	r7, r3
 801c4fc:	eb02 0c07 	add.w	ip, r2, r7
 801c500:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c504:	f115 0e0f 	adds.w	lr, r5, #15
 801c508:	f100 80a2 	bmi.w	801c650 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c50c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c510:	2614      	movs	r6, #20
 801c512:	9c08      	ldr	r4, [sp, #32]
 801c514:	f8c0 e014 	str.w	lr, [r0, #20]
 801c518:	4366      	muls	r6, r4
 801c51a:	eb02 0806 	add.w	r8, r2, r6
 801c51e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c522:	f115 040f 	adds.w	r4, r5, #15
 801c526:	f100 809f 	bmi.w	801c668 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c52a:	1124      	asrs	r4, r4, #4
 801c52c:	eba4 040e 	sub.w	r4, r4, lr
 801c530:	6184      	str	r4, [r0, #24]
 801c532:	2c00      	cmp	r4, #0
 801c534:	f000 808a 	beq.w	801c64c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c538:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c53c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c540:	5995      	ldr	r5, [r2, r6]
 801c542:	eba4 0809 	sub.w	r8, r4, r9
 801c546:	59d4      	ldr	r4, [r2, r7]
 801c548:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c54c:	eba5 0a04 	sub.w	sl, r5, r4
 801c550:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c554:	fb0e fe05 	mul.w	lr, lr, r5
 801c558:	fb0a ee19 	mls	lr, sl, r9, lr
 801c55c:	fb08 e404 	mla	r4, r8, r4, lr
 801c560:	3c01      	subs	r4, #1
 801c562:	19a4      	adds	r4, r4, r6
 801c564:	f100 808c 	bmi.w	801c680 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c568:	fb94 fef6 	sdiv	lr, r4, r6
 801c56c:	fb06 441e 	mls	r4, r6, lr, r4
 801c570:	f8c0 e000 	str.w	lr, [r0]
 801c574:	6104      	str	r4, [r0, #16]
 801c576:	2d00      	cmp	r5, #0
 801c578:	f2c0 8095 	blt.w	801c6a6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c57c:	fb95 f4f6 	sdiv	r4, r5, r6
 801c580:	fb06 5514 	mls	r5, r6, r4, r5
 801c584:	6044      	str	r4, [r0, #4]
 801c586:	6085      	str	r5, [r0, #8]
 801c588:	60c6      	str	r6, [r0, #12]
 801c58a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c58e:	6945      	ldr	r5, [r0, #20]
 801c590:	59d2      	ldr	r2, [r2, r7]
 801c592:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c596:	ee07 4a10 	vmov	s14, r4
 801c59a:	6804      	ldr	r4, [r0, #0]
 801c59c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801c6c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c5a0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c5a4:	ee07 2a90 	vmov	s15, r2
 801c5a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c5b4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c5b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c5bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c5c0:	edd3 6a00 	vldr	s13, [r3]
 801c5c4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c5c8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801c5cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c5d0:	edc0 6a07 	vstr	s13, [r0, #28]
 801c5d4:	edd0 6a01 	vldr	s13, [r0, #4]
 801c5d8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801c5dc:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c5e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c5e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c5e8:	ed80 6a08 	vstr	s12, [r0, #32]
 801c5ec:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801c5ee:	6242      	str	r2, [r0, #36]	@ 0x24
 801c5f0:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801c5f4:	ed93 6a03 	vldr	s12, [r3, #12]
 801c5f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c5fc:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c600:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c604:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801c608:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c60c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801c610:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c614:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801c618:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c61a:	6302      	str	r2, [r0, #48]	@ 0x30
 801c61c:	ed93 6a06 	vldr	s12, [r3, #24]
 801c620:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801c624:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c628:	eeb0 7a46 	vmov.f32	s14, s12
 801c62c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801c630:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c634:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c638:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801c63c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801c640:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c644:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801c648:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c64a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c650:	2410      	movs	r4, #16
 801c652:	f1c5 0501 	rsb	r5, r5, #1
 801c656:	f015 050f 	ands.w	r5, r5, #15
 801c65a:	fb9e fef4 	sdiv	lr, lr, r4
 801c65e:	bf18      	it	ne
 801c660:	2501      	movne	r5, #1
 801c662:	ebae 0e05 	sub.w	lr, lr, r5
 801c666:	e753      	b.n	801c510 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c668:	f04f 0910 	mov.w	r9, #16
 801c66c:	f1c5 0501 	rsb	r5, r5, #1
 801c670:	f015 050f 	ands.w	r5, r5, #15
 801c674:	fb94 f4f9 	sdiv	r4, r4, r9
 801c678:	bf18      	it	ne
 801c67a:	2501      	movne	r5, #1
 801c67c:	1b64      	subs	r4, r4, r5
 801c67e:	e755      	b.n	801c52c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c680:	4264      	negs	r4, r4
 801c682:	fb94 fef6 	sdiv	lr, r4, r6
 801c686:	fb06 441e 	mls	r4, r6, lr, r4
 801c68a:	f1ce 0800 	rsb	r8, lr, #0
 801c68e:	f8c0 8000 	str.w	r8, [r0]
 801c692:	6104      	str	r4, [r0, #16]
 801c694:	2c00      	cmp	r4, #0
 801c696:	f43f af6e 	beq.w	801c576 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c69a:	ea6f 0e0e 	mvn.w	lr, lr
 801c69e:	1b34      	subs	r4, r6, r4
 801c6a0:	f8c0 e000 	str.w	lr, [r0]
 801c6a4:	e766      	b.n	801c574 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c6a6:	426d      	negs	r5, r5
 801c6a8:	fb95 f4f6 	sdiv	r4, r5, r6
 801c6ac:	fb06 5514 	mls	r5, r6, r4, r5
 801c6b0:	f1c4 0e00 	rsb	lr, r4, #0
 801c6b4:	f8c0 e004 	str.w	lr, [r0, #4]
 801c6b8:	6085      	str	r5, [r0, #8]
 801c6ba:	2d00      	cmp	r5, #0
 801c6bc:	f43f af64 	beq.w	801c588 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c6c0:	43e4      	mvns	r4, r4
 801c6c2:	1b75      	subs	r5, r6, r5
 801c6c4:	6044      	str	r4, [r0, #4]
 801c6c6:	e75e      	b.n	801c586 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c6c8:	3d800000 	.word	0x3d800000

0801c6cc <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c6cc:	4602      	mov	r2, r0
 801c6ce:	b148      	cbz	r0, 801c6e4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	b298      	uxth	r0, r3
 801c6d4:	3301      	adds	r3, #1
 801c6d6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c6da:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c6de:	2900      	cmp	r1, #0
 801c6e0:	d1f7      	bne.n	801c6d2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c6e2:	4770      	bx	lr
 801c6e4:	4770      	bx	lr

0801c6e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c6e6:	b530      	push	{r4, r5, lr}
 801c6e8:	4604      	mov	r4, r0
 801c6ea:	b159      	cbz	r1, 801c704 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c6ec:	b148      	cbz	r0, 801c702 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	b298      	uxth	r0, r3
 801c6f2:	4282      	cmp	r2, r0
 801c6f4:	d905      	bls.n	801c702 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c6f6:	5ccd      	ldrb	r5, [r1, r3]
 801c6f8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c6fc:	3301      	adds	r3, #1
 801c6fe:	2d00      	cmp	r5, #0
 801c700:	d1f6      	bne.n	801c6f0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c702:	bd30      	pop	{r4, r5, pc}
 801c704:	4608      	mov	r0, r1
 801c706:	e7fc      	b.n	801c702 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c708 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801c708:	468c      	mov	ip, r1
 801c70a:	2100      	movs	r1, #0
 801c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c70e:	4604      	mov	r4, r0
 801c710:	261f      	movs	r6, #31
 801c712:	b08b      	sub	sp, #44	@ 0x2c
 801c714:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c718:	af01      	add	r7, sp, #4
 801c71a:	fb94 fef3 	sdiv	lr, r4, r3
 801c71e:	fb03 441e 	mls	r4, r3, lr, r4
 801c722:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c726:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c72a:	b2ec      	uxtb	r4, r5
 801c72c:	2d09      	cmp	r5, #9
 801c72e:	bfd4      	ite	le
 801c730:	3430      	addle	r4, #48	@ 0x30
 801c732:	3457      	addgt	r4, #87	@ 0x57
 801c734:	b2e4      	uxtb	r4, r4
 801c736:	55bc      	strb	r4, [r7, r6]
 801c738:	4674      	mov	r4, lr
 801c73a:	1e71      	subs	r1, r6, #1
 801c73c:	b974      	cbnz	r4, 801c75c <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801c73e:	2800      	cmp	r0, #0
 801c740:	da05      	bge.n	801c74e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801c742:	ab0a      	add	r3, sp, #40	@ 0x28
 801c744:	4419      	add	r1, r3
 801c746:	232d      	movs	r3, #45	@ 0x2d
 801c748:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c74c:	1eb1      	subs	r1, r6, #2
 801c74e:	3101      	adds	r1, #1
 801c750:	4439      	add	r1, r7
 801c752:	4660      	mov	r0, ip
 801c754:	f7ff ffc7 	bl	801c6e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c758:	b00b      	add	sp, #44	@ 0x2c
 801c75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c75c:	460e      	mov	r6, r1
 801c75e:	e7dc      	b.n	801c71a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801c760 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801c760:	468c      	mov	ip, r1
 801c762:	2100      	movs	r1, #0
 801c764:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c766:	b08b      	sub	sp, #44	@ 0x2c
 801c768:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c76c:	211f      	movs	r1, #31
 801c76e:	ae01      	add	r6, sp, #4
 801c770:	fbb0 f7f3 	udiv	r7, r0, r3
 801c774:	fb03 0517 	mls	r5, r3, r7, r0
 801c778:	b2ec      	uxtb	r4, r5
 801c77a:	2d09      	cmp	r5, #9
 801c77c:	bfd4      	ite	le
 801c77e:	3430      	addle	r4, #48	@ 0x30
 801c780:	3457      	addgt	r4, #87	@ 0x57
 801c782:	b2e4      	uxtb	r4, r4
 801c784:	558c      	strb	r4, [r1, r6]
 801c786:	4638      	mov	r0, r7
 801c788:	1e4c      	subs	r4, r1, #1
 801c78a:	b92f      	cbnz	r7, 801c798 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801c78c:	4431      	add	r1, r6
 801c78e:	4660      	mov	r0, ip
 801c790:	f7ff ffa9 	bl	801c6e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c794:	b00b      	add	sp, #44	@ 0x2c
 801c796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c798:	4621      	mov	r1, r4
 801c79a:	e7e9      	b.n	801c770 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801c79c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7a0:	4691      	mov	r9, r2
 801c7a2:	b085      	sub	sp, #20
 801c7a4:	6802      	ldr	r2, [r0, #0]
 801c7a6:	4688      	mov	r8, r1
 801c7a8:	461c      	mov	r4, r3
 801c7aa:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801c7ae:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801c7b2:	4683      	mov	fp, r0
 801c7b4:	4610      	mov	r0, r2
 801c7b6:	9103      	str	r1, [sp, #12]
 801c7b8:	9302      	str	r3, [sp, #8]
 801c7ba:	9201      	str	r2, [sp, #4]
 801c7bc:	f7ff ff86 	bl	801c6cc <_ZN8touchgfx7Unicode6strlenEPKt>
 801c7c0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c7c4:	f1b8 0f00 	cmp.w	r8, #0
 801c7c8:	bf0c      	ite	eq
 801c7ca:	4684      	moveq	ip, r0
 801c7cc:	f100 0c01 	addne.w	ip, r0, #1
 801c7d0:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801c7d4:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801c7d8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c7da:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c7dc:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801c7e0:	fa1f fc8c 	uxth.w	ip, ip
 801c7e4:	9903      	ldr	r1, [sp, #12]
 801c7e6:	d041      	beq.n	801c86c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c7e8:	d834      	bhi.n	801c854 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801c7ea:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801c7ee:	d059      	beq.n	801c8a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801c7f0:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801c7f4:	d03a      	beq.n	801c86c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c7f6:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801c7fa:	d034      	beq.n	801c866 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c7fc:	2400      	movs	r4, #0
 801c7fe:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801c802:	3a01      	subs	r2, #1
 801c804:	b169      	cbz	r1, 801c822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c806:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c808:	458c      	cmp	ip, r1
 801c80a:	da09      	bge.n	801c820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c80c:	eba1 010c 	sub.w	r1, r1, ip
 801c810:	b289      	uxth	r1, r1
 801c812:	b933      	cbnz	r3, 801c822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c814:	2e00      	cmp	r6, #0
 801c816:	d051      	beq.n	801c8bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c818:	2800      	cmp	r0, #0
 801c81a:	d04f      	beq.n	801c8bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c81c:	440c      	add	r4, r1
 801c81e:	b2a4      	uxth	r4, r4
 801c820:	2100      	movs	r1, #0
 801c822:	682b      	ldr	r3, [r5, #0]
 801c824:	4293      	cmp	r3, r2
 801c826:	da07      	bge.n	801c838 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c828:	f1b8 0f00 	cmp.w	r8, #0
 801c82c:	d004      	beq.n	801c838 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c82e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801c832:	682b      	ldr	r3, [r5, #0]
 801c834:	3301      	adds	r3, #1
 801c836:	602b      	str	r3, [r5, #0]
 801c838:	2730      	movs	r7, #48	@ 0x30
 801c83a:	2c00      	cmp	r4, #0
 801c83c:	d04e      	beq.n	801c8dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c83e:	682e      	ldr	r6, [r5, #0]
 801c840:	3c01      	subs	r4, #1
 801c842:	42b2      	cmp	r2, r6
 801c844:	b2a4      	uxth	r4, r4
 801c846:	dd49      	ble.n	801c8dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c848:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c84c:	682b      	ldr	r3, [r5, #0]
 801c84e:	3301      	adds	r3, #1
 801c850:	602b      	str	r3, [r5, #0]
 801c852:	e7f2      	b.n	801c83a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801c854:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801c858:	d01d      	beq.n	801c896 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801c85a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801c85e:	d002      	beq.n	801c866 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c860:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801c864:	e7c9      	b.n	801c7fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801c866:	4684      	mov	ip, r0
 801c868:	f04f 0800 	mov.w	r8, #0
 801c86c:	2c00      	cmp	r4, #0
 801c86e:	d0c6      	beq.n	801c7fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c870:	b947      	cbnz	r7, 801c884 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c872:	2801      	cmp	r0, #1
 801c874:	d106      	bne.n	801c884 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c876:	8814      	ldrh	r4, [r2, #0]
 801c878:	2c30      	cmp	r4, #48	@ 0x30
 801c87a:	bf02      	ittt	eq
 801c87c:	4638      	moveq	r0, r7
 801c87e:	3202      	addeq	r2, #2
 801c880:	f8cb 2000 	streq.w	r2, [fp]
 801c884:	45bc      	cmp	ip, r7
 801c886:	da14      	bge.n	801c8b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801c888:	b2bf      	uxth	r7, r7
 801c88a:	eba7 040c 	sub.w	r4, r7, ip
 801c88e:	46bc      	mov	ip, r7
 801c890:	b2a4      	uxth	r4, r4
 801c892:	2600      	movs	r6, #0
 801c894:	e7b3      	b.n	801c7fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c896:	4684      	mov	ip, r0
 801c898:	b16c      	cbz	r4, 801c8b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801c89a:	42b8      	cmp	r0, r7
 801c89c:	dd00      	ble.n	801c8a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801c89e:	b2b8      	uxth	r0, r7
 801c8a0:	2400      	movs	r4, #0
 801c8a2:	e003      	b.n	801c8ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801c8a4:	f04f 0c01 	mov.w	ip, #1
 801c8a8:	2400      	movs	r4, #0
 801c8aa:	4660      	mov	r0, ip
 801c8ac:	4626      	mov	r6, r4
 801c8ae:	46a0      	mov	r8, r4
 801c8b0:	e7a5      	b.n	801c7fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c8b2:	2400      	movs	r4, #0
 801c8b4:	e7ed      	b.n	801c892 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801c8b6:	4626      	mov	r6, r4
 801c8b8:	46a0      	mov	r8, r4
 801c8ba:	e7a0      	b.n	801c7fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c8bc:	2900      	cmp	r1, #0
 801c8be:	d0b0      	beq.n	801c822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c8c0:	2720      	movs	r7, #32
 801c8c2:	682e      	ldr	r6, [r5, #0]
 801c8c4:	2900      	cmp	r1, #0
 801c8c6:	d0ac      	beq.n	801c822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c8c8:	3901      	subs	r1, #1
 801c8ca:	4296      	cmp	r6, r2
 801c8cc:	b289      	uxth	r1, r1
 801c8ce:	daa7      	bge.n	801c820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c8d0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c8d4:	682b      	ldr	r3, [r5, #0]
 801c8d6:	3301      	adds	r3, #1
 801c8d8:	602b      	str	r3, [r5, #0]
 801c8da:	e7f2      	b.n	801c8c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801c8dc:	b188      	cbz	r0, 801c902 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c8de:	682b      	ldr	r3, [r5, #0]
 801c8e0:	3801      	subs	r0, #1
 801c8e2:	429a      	cmp	r2, r3
 801c8e4:	b280      	uxth	r0, r0
 801c8e6:	dd0c      	ble.n	801c902 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c8e8:	f8db 3000 	ldr.w	r3, [fp]
 801c8ec:	1c9c      	adds	r4, r3, #2
 801c8ee:	f8cb 4000 	str.w	r4, [fp]
 801c8f2:	881c      	ldrh	r4, [r3, #0]
 801c8f4:	682b      	ldr	r3, [r5, #0]
 801c8f6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801c8fa:	682b      	ldr	r3, [r5, #0]
 801c8fc:	3301      	adds	r3, #1
 801c8fe:	602b      	str	r3, [r5, #0]
 801c900:	e7ec      	b.n	801c8dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c902:	2620      	movs	r6, #32
 801c904:	b151      	cbz	r1, 801c91c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c906:	6828      	ldr	r0, [r5, #0]
 801c908:	3901      	subs	r1, #1
 801c90a:	4282      	cmp	r2, r0
 801c90c:	b289      	uxth	r1, r1
 801c90e:	dd05      	ble.n	801c91c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c910:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801c914:	682b      	ldr	r3, [r5, #0]
 801c916:	3301      	adds	r3, #1
 801c918:	602b      	str	r3, [r5, #0]
 801c91a:	e7f3      	b.n	801c904 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801c91c:	b005      	add	sp, #20
 801c91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c922 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801c922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c926:	2400      	movs	r4, #0
 801c928:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801c92c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801c930:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801c934:	8014      	strh	r4, [r2, #0]
 801c936:	701c      	strb	r4, [r3, #0]
 801c938:	f888 4000 	strb.w	r4, [r8]
 801c93c:	f88c 4000 	strb.w	r4, [ip]
 801c940:	f88e 4000 	strb.w	r4, [lr]
 801c944:	703c      	strb	r4, [r7, #0]
 801c946:	6804      	ldr	r4, [r0, #0]
 801c948:	b1a4      	cbz	r4, 801c974 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801c94a:	8824      	ldrh	r4, [r4, #0]
 801c94c:	f04f 0901 	mov.w	r9, #1
 801c950:	b314      	cbz	r4, 801c998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c952:	2c2b      	cmp	r4, #43	@ 0x2b
 801c954:	d001      	beq.n	801c95a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801c956:	2c20      	cmp	r4, #32
 801c958:	d110      	bne.n	801c97c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801c95a:	8014      	strh	r4, [r2, #0]
 801c95c:	6804      	ldr	r4, [r0, #0]
 801c95e:	b10c      	cbz	r4, 801c964 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801c960:	3402      	adds	r4, #2
 801c962:	6004      	str	r4, [r0, #0]
 801c964:	680c      	ldr	r4, [r1, #0]
 801c966:	b10c      	cbz	r4, 801c96c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801c968:	3401      	adds	r4, #1
 801c96a:	600c      	str	r4, [r1, #0]
 801c96c:	6804      	ldr	r4, [r0, #0]
 801c96e:	b17c      	cbz	r4, 801c990 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801c970:	8824      	ldrh	r4, [r4, #0]
 801c972:	e7ed      	b.n	801c950 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c974:	680c      	ldr	r4, [r1, #0]
 801c976:	b17c      	cbz	r4, 801c998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c978:	7824      	ldrb	r4, [r4, #0]
 801c97a:	e7e7      	b.n	801c94c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801c97c:	2c2d      	cmp	r4, #45	@ 0x2d
 801c97e:	d102      	bne.n	801c986 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801c980:	f883 9000 	strb.w	r9, [r3]
 801c984:	e7ea      	b.n	801c95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c986:	2c23      	cmp	r4, #35	@ 0x23
 801c988:	d107      	bne.n	801c99a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801c98a:	f888 9000 	strb.w	r9, [r8]
 801c98e:	e7e5      	b.n	801c95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c990:	680c      	ldr	r4, [r1, #0]
 801c992:	b10c      	cbz	r4, 801c998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c994:	7824      	ldrb	r4, [r4, #0]
 801c996:	e7db      	b.n	801c950 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c998:	2400      	movs	r4, #0
 801c99a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801c99e:	2b09      	cmp	r3, #9
 801c9a0:	d901      	bls.n	801c9a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801c9a2:	2c2a      	cmp	r4, #42	@ 0x2a
 801c9a4:	d122      	bne.n	801c9ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c9a6:	2301      	movs	r3, #1
 801c9a8:	2c30      	cmp	r4, #48	@ 0x30
 801c9aa:	f88e 3000 	strb.w	r3, [lr]
 801c9ae:	d10d      	bne.n	801c9cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c9b0:	f88c 3000 	strb.w	r3, [ip]
 801c9b4:	6803      	ldr	r3, [r0, #0]
 801c9b6:	b10b      	cbz	r3, 801c9bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801c9b8:	3302      	adds	r3, #2
 801c9ba:	6003      	str	r3, [r0, #0]
 801c9bc:	680b      	ldr	r3, [r1, #0]
 801c9be:	b10b      	cbz	r3, 801c9c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801c9c0:	3301      	adds	r3, #1
 801c9c2:	600b      	str	r3, [r1, #0]
 801c9c4:	6803      	ldr	r3, [r0, #0]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d02f      	beq.n	801ca2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801c9ca:	881c      	ldrh	r4, [r3, #0]
 801c9cc:	2c2a      	cmp	r4, #42	@ 0x2a
 801c9ce:	d135      	bne.n	801ca3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c9d0:	f04f 33ff 	mov.w	r3, #4294967295
 801c9d4:	6033      	str	r3, [r6, #0]
 801c9d6:	6803      	ldr	r3, [r0, #0]
 801c9d8:	b10b      	cbz	r3, 801c9de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801c9da:	3302      	adds	r3, #2
 801c9dc:	6003      	str	r3, [r0, #0]
 801c9de:	680b      	ldr	r3, [r1, #0]
 801c9e0:	b10b      	cbz	r3, 801c9e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801c9e2:	3301      	adds	r3, #1
 801c9e4:	600b      	str	r3, [r1, #0]
 801c9e6:	6803      	ldr	r3, [r0, #0]
 801c9e8:	b31b      	cbz	r3, 801ca32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801c9ea:	881c      	ldrh	r4, [r3, #0]
 801c9ec:	2c2e      	cmp	r4, #46	@ 0x2e
 801c9ee:	d11a      	bne.n	801ca26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c9f0:	2301      	movs	r3, #1
 801c9f2:	703b      	strb	r3, [r7, #0]
 801c9f4:	6803      	ldr	r3, [r0, #0]
 801c9f6:	b10b      	cbz	r3, 801c9fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801c9f8:	3302      	adds	r3, #2
 801c9fa:	6003      	str	r3, [r0, #0]
 801c9fc:	680b      	ldr	r3, [r1, #0]
 801c9fe:	b10b      	cbz	r3, 801ca04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ca00:	3301      	adds	r3, #1
 801ca02:	600b      	str	r3, [r1, #0]
 801ca04:	6803      	ldr	r3, [r0, #0]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d036      	beq.n	801ca78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ca0a:	881b      	ldrh	r3, [r3, #0]
 801ca0c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca0e:	d137      	bne.n	801ca80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ca10:	f04f 33ff 	mov.w	r3, #4294967295
 801ca14:	602b      	str	r3, [r5, #0]
 801ca16:	6803      	ldr	r3, [r0, #0]
 801ca18:	b10b      	cbz	r3, 801ca1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ca1a:	3302      	adds	r3, #2
 801ca1c:	6003      	str	r3, [r0, #0]
 801ca1e:	680b      	ldr	r3, [r1, #0]
 801ca20:	b10b      	cbz	r3, 801ca26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ca22:	3301      	adds	r3, #1
 801ca24:	600b      	str	r3, [r1, #0]
 801ca26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca2a:	680c      	ldr	r4, [r1, #0]
 801ca2c:	b134      	cbz	r4, 801ca3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ca2e:	7824      	ldrb	r4, [r4, #0]
 801ca30:	e7cc      	b.n	801c9cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ca32:	680b      	ldr	r3, [r1, #0]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d0f6      	beq.n	801ca26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ca38:	781c      	ldrb	r4, [r3, #0]
 801ca3a:	e7d7      	b.n	801c9ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	220a      	movs	r2, #10
 801ca40:	6033      	str	r3, [r6, #0]
 801ca42:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801ca46:	fa1f f38c 	uxth.w	r3, ip
 801ca4a:	2b09      	cmp	r3, #9
 801ca4c:	d8ce      	bhi.n	801c9ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ca4e:	6833      	ldr	r3, [r6, #0]
 801ca50:	fb02 c303 	mla	r3, r2, r3, ip
 801ca54:	6033      	str	r3, [r6, #0]
 801ca56:	6803      	ldr	r3, [r0, #0]
 801ca58:	b10b      	cbz	r3, 801ca5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ca5a:	3302      	adds	r3, #2
 801ca5c:	6003      	str	r3, [r0, #0]
 801ca5e:	680b      	ldr	r3, [r1, #0]
 801ca60:	b10b      	cbz	r3, 801ca66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ca62:	3301      	adds	r3, #1
 801ca64:	600b      	str	r3, [r1, #0]
 801ca66:	6803      	ldr	r3, [r0, #0]
 801ca68:	b10b      	cbz	r3, 801ca6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ca6a:	881c      	ldrh	r4, [r3, #0]
 801ca6c:	e7e9      	b.n	801ca42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ca6e:	680c      	ldr	r4, [r1, #0]
 801ca70:	2c00      	cmp	r4, #0
 801ca72:	d0e6      	beq.n	801ca42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ca74:	7824      	ldrb	r4, [r4, #0]
 801ca76:	e7e4      	b.n	801ca42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ca78:	680b      	ldr	r3, [r1, #0]
 801ca7a:	b10b      	cbz	r3, 801ca80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ca7c:	781b      	ldrb	r3, [r3, #0]
 801ca7e:	e7c5      	b.n	801ca0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ca80:	2200      	movs	r2, #0
 801ca82:	240a      	movs	r4, #10
 801ca84:	602a      	str	r2, [r5, #0]
 801ca86:	3b30      	subs	r3, #48	@ 0x30
 801ca88:	b29e      	uxth	r6, r3
 801ca8a:	2e09      	cmp	r6, #9
 801ca8c:	682a      	ldr	r2, [r5, #0]
 801ca8e:	d813      	bhi.n	801cab8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ca90:	fb04 3302 	mla	r3, r4, r2, r3
 801ca94:	602b      	str	r3, [r5, #0]
 801ca96:	6803      	ldr	r3, [r0, #0]
 801ca98:	b10b      	cbz	r3, 801ca9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ca9a:	3302      	adds	r3, #2
 801ca9c:	6003      	str	r3, [r0, #0]
 801ca9e:	680b      	ldr	r3, [r1, #0]
 801caa0:	b10b      	cbz	r3, 801caa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801caa2:	3301      	adds	r3, #1
 801caa4:	600b      	str	r3, [r1, #0]
 801caa6:	6803      	ldr	r3, [r0, #0]
 801caa8:	b10b      	cbz	r3, 801caae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801caaa:	881b      	ldrh	r3, [r3, #0]
 801caac:	e7eb      	b.n	801ca86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801caae:	680b      	ldr	r3, [r1, #0]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d0e8      	beq.n	801ca86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cab4:	781b      	ldrb	r3, [r3, #0]
 801cab6:	e7e6      	b.n	801ca86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cab8:	2a06      	cmp	r2, #6
 801caba:	bfa8      	it	ge
 801cabc:	2206      	movge	r2, #6
 801cabe:	602a      	str	r2, [r5, #0]
 801cac0:	e7b1      	b.n	801ca26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801cac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801cac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cac6:	2600      	movs	r6, #0
 801cac8:	4607      	mov	r7, r0
 801caca:	b0a3      	sub	sp, #140	@ 0x8c
 801cacc:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801cad0:	4688      	mov	r8, r1
 801cad2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801cad6:	4631      	mov	r1, r6
 801cad8:	2242      	movs	r2, #66	@ 0x42
 801cada:	4648      	mov	r0, r9
 801cadc:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801cade:	960d      	str	r6, [sp, #52]	@ 0x34
 801cae0:	f00f f9f3 	bl	802beca <memset>
 801cae4:	b15f      	cbz	r7, 801cafe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801cae6:	f108 3aff 	add.w	sl, r8, #4294967295
 801caea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801caec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801caee:	b152      	cbz	r2, 801cb06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801caf0:	8812      	ldrh	r2, [r2, #0]
 801caf2:	b10a      	cbz	r2, 801caf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801caf4:	459a      	cmp	sl, r3
 801caf6:	dc2e      	bgt.n	801cb56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801caf8:	2200      	movs	r2, #0
 801cafa:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cafe:	4638      	mov	r0, r7
 801cb00:	b023      	add	sp, #140	@ 0x8c
 801cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb06:	9a08      	ldr	r2, [sp, #32]
 801cb08:	2a00      	cmp	r2, #0
 801cb0a:	d0f5      	beq.n	801caf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cb0c:	7812      	ldrb	r2, [r2, #0]
 801cb0e:	e7f0      	b.n	801caf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801cb10:	2d00      	cmp	r5, #0
 801cb12:	d0ea      	beq.n	801caea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cb14:	782a      	ldrb	r2, [r5, #0]
 801cb16:	b142      	cbz	r2, 801cb2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801cb18:	2a25      	cmp	r2, #37	@ 0x25
 801cb1a:	d001      	beq.n	801cb20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801cb1c:	459a      	cmp	sl, r3
 801cb1e:	dc08      	bgt.n	801cb32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801cb20:	f1bb 0f00 	cmp.w	fp, #0
 801cb24:	d121      	bne.n	801cb6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801cb26:	2d00      	cmp	r5, #0
 801cb28:	d0df      	beq.n	801caea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cb2a:	782a      	ldrb	r2, [r5, #0]
 801cb2c:	f04f 0b00 	mov.w	fp, #0
 801cb30:	e01d      	b.n	801cb6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801cb32:	f1bb 0f00 	cmp.w	fp, #0
 801cb36:	d076      	beq.n	801cc26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x164>
 801cb38:	f8bb 2000 	ldrh.w	r2, [fp]
 801cb3c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cb40:	f1bb 0f00 	cmp.w	fp, #0
 801cb44:	d002      	beq.n	801cb4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801cb46:	f10b 0202 	add.w	r2, fp, #2
 801cb4a:	9209      	str	r2, [sp, #36]	@ 0x24
 801cb4c:	b10d      	cbz	r5, 801cb52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801cb4e:	3501      	adds	r5, #1
 801cb50:	9508      	str	r5, [sp, #32]
 801cb52:	3301      	adds	r3, #1
 801cb54:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb56:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801cb5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb5c:	f1bb 0f00 	cmp.w	fp, #0
 801cb60:	d0d6      	beq.n	801cb10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801cb62:	f8bb 2000 	ldrh.w	r2, [fp]
 801cb66:	2a00      	cmp	r2, #0
 801cb68:	d1d6      	bne.n	801cb18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801cb6a:	f8bb 2000 	ldrh.w	r2, [fp]
 801cb6e:	2a00      	cmp	r2, #0
 801cb70:	d0bb      	beq.n	801caea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cb72:	459a      	cmp	sl, r3
 801cb74:	ddb9      	ble.n	801caea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cb76:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801cb7a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801cb7e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801cb82:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801cb86:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801cb8a:	960e      	str	r6, [sp, #56]	@ 0x38
 801cb8c:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801cb90:	960f      	str	r6, [sp, #60]	@ 0x3c
 801cb92:	f1bb 0f00 	cmp.w	fp, #0
 801cb96:	d002      	beq.n	801cb9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801cb98:	f10b 0302 	add.w	r3, fp, #2
 801cb9c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb9e:	b10d      	cbz	r5, 801cba4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801cba0:	1c6b      	adds	r3, r5, #1
 801cba2:	9308      	str	r3, [sp, #32]
 801cba4:	ab0f      	add	r3, sp, #60	@ 0x3c
 801cba6:	9305      	str	r3, [sp, #20]
 801cba8:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801cbac:	9304      	str	r3, [sp, #16]
 801cbae:	ab0e      	add	r3, sp, #56	@ 0x38
 801cbb0:	9303      	str	r3, [sp, #12]
 801cbb2:	ab0c      	add	r3, sp, #48	@ 0x30
 801cbb4:	9302      	str	r3, [sp, #8]
 801cbb6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801cbba:	9301      	str	r3, [sp, #4]
 801cbbc:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801cbc0:	9300      	str	r3, [sp, #0]
 801cbc2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801cbc6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801cbca:	a908      	add	r1, sp, #32
 801cbcc:	a809      	add	r0, sp, #36	@ 0x24
 801cbce:	f7ff fea8 	bl	801c922 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801cbd2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cbd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	bfbf      	itttt	lt
 801cbdc:	6823      	ldrlt	r3, [r4, #0]
 801cbde:	3404      	addlt	r4, #4
 801cbe0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cbe4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801cbe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	bfbf      	itttt	lt
 801cbec:	6823      	ldrlt	r3, [r4, #0]
 801cbee:	3404      	addlt	r4, #4
 801cbf0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cbf4:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801cbf6:	b1d9      	cbz	r1, 801cc30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801cbf8:	880b      	ldrh	r3, [r1, #0]
 801cbfa:	2b69      	cmp	r3, #105	@ 0x69
 801cbfc:	d01f      	beq.n	801cc3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801cbfe:	d82f      	bhi.n	801cc60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19e>
 801cc00:	2b58      	cmp	r3, #88	@ 0x58
 801cc02:	d01c      	beq.n	801cc3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801cc04:	d818      	bhi.n	801cc38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x176>
 801cc06:	2b25      	cmp	r3, #37	@ 0x25
 801cc08:	d034      	beq.n	801cc74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b2>
 801cc0a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801cc0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc10:	f1bb 0f00 	cmp.w	fp, #0
 801cc14:	f000 80b7 	beq.w	801cd86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c4>
 801cc18:	f8bb 5000 	ldrh.w	r5, [fp]
 801cc1c:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801cc20:	3301      	adds	r3, #1
 801cc22:	930d      	str	r3, [sp, #52]	@ 0x34
 801cc24:	e029      	b.n	801cc7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b8>
 801cc26:	b10d      	cbz	r5, 801cc2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16a>
 801cc28:	782a      	ldrb	r2, [r5, #0]
 801cc2a:	e787      	b.n	801cb3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801cc2c:	462a      	mov	r2, r5
 801cc2e:	e785      	b.n	801cb3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801cc30:	2a00      	cmp	r2, #0
 801cc32:	d0ea      	beq.n	801cc0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 801cc34:	7813      	ldrb	r3, [r2, #0]
 801cc36:	e7e0      	b.n	801cbfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x138>
 801cc38:	3b63      	subs	r3, #99	@ 0x63
 801cc3a:	2b01      	cmp	r3, #1
 801cc3c:	d8e5      	bhi.n	801cc0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 801cc3e:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801cc42:	b329      	cbz	r1, 801cc90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ce>
 801cc44:	880b      	ldrh	r3, [r1, #0]
 801cc46:	2b69      	cmp	r3, #105	@ 0x69
 801cc48:	d063      	beq.n	801cd12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801cc4a:	d825      	bhi.n	801cc98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d6>
 801cc4c:	2b63      	cmp	r3, #99	@ 0x63
 801cc4e:	d038      	beq.n	801ccc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x200>
 801cc50:	2b64      	cmp	r3, #100	@ 0x64
 801cc52:	d05e      	beq.n	801cd12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801cc54:	2b58      	cmp	r3, #88	@ 0x58
 801cc56:	d07a      	beq.n	801cd4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28c>
 801cc58:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801cc5c:	4625      	mov	r5, r4
 801cc5e:	e036      	b.n	801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801cc60:	2b73      	cmp	r3, #115	@ 0x73
 801cc62:	d0ec      	beq.n	801cc3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801cc64:	d802      	bhi.n	801cc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801cc66:	2b6f      	cmp	r3, #111	@ 0x6f
 801cc68:	d1cf      	bne.n	801cc0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 801cc6a:	e7e8      	b.n	801cc3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801cc6c:	2b75      	cmp	r3, #117	@ 0x75
 801cc6e:	d0e6      	beq.n	801cc3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801cc70:	2b78      	cmp	r3, #120	@ 0x78
 801cc72:	e7f9      	b.n	801cc68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a6>
 801cc74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cc76:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801cc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc7c:	b10b      	cbz	r3, 801cc82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c0>
 801cc7e:	3302      	adds	r3, #2
 801cc80:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc82:	9b08      	ldr	r3, [sp, #32]
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	f43f af30 	beq.w	801caea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	9308      	str	r3, [sp, #32]
 801cc8e:	e72c      	b.n	801caea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cc90:	2a00      	cmp	r2, #0
 801cc92:	d0e1      	beq.n	801cc58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 801cc94:	7813      	ldrb	r3, [r2, #0]
 801cc96:	e7d6      	b.n	801cc46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x184>
 801cc98:	2b73      	cmp	r3, #115	@ 0x73
 801cc9a:	d036      	beq.n	801cd0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x248>
 801cc9c:	d807      	bhi.n	801ccae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ec>
 801cc9e:	2b6f      	cmp	r3, #111	@ 0x6f
 801cca0:	d1da      	bne.n	801cc58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 801cca2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cca4:	1d25      	adds	r5, r4, #4
 801cca6:	eba8 0202 	sub.w	r2, r8, r2
 801ccaa:	2308      	movs	r3, #8
 801ccac:	e049      	b.n	801cd42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x280>
 801ccae:	2b75      	cmp	r3, #117	@ 0x75
 801ccb0:	d042      	beq.n	801cd38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x276>
 801ccb2:	2b78      	cmp	r3, #120	@ 0x78
 801ccb4:	d1d0      	bne.n	801cc58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 801ccb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ccb8:	1d25      	adds	r5, r4, #4
 801ccba:	eba8 0202 	sub.w	r2, r8, r2
 801ccbe:	2310      	movs	r3, #16
 801ccc0:	e03f      	b.n	801cd42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x280>
 801ccc2:	6823      	ldr	r3, [r4, #0]
 801ccc4:	1d25      	adds	r5, r4, #4
 801ccc6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801ccca:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801ccce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccd0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d051      	beq.n	801cd7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ba>
 801ccd8:	881a      	ldrh	r2, [r3, #0]
 801ccda:	a80d      	add	r0, sp, #52	@ 0x34
 801ccdc:	9005      	str	r0, [sp, #20]
 801ccde:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801cce2:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801cce6:	9004      	str	r0, [sp, #16]
 801cce8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ccea:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ccee:	9003      	str	r0, [sp, #12]
 801ccf0:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801ccf4:	462c      	mov	r4, r5
 801ccf6:	9002      	str	r0, [sp, #8]
 801ccf8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ccfa:	9001      	str	r0, [sp, #4]
 801ccfc:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801cd00:	9000      	str	r0, [sp, #0]
 801cd02:	a810      	add	r0, sp, #64	@ 0x40
 801cd04:	f7ff fd4a 	bl	801c79c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801cd08:	e7b7      	b.n	801cc7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b8>
 801cd0a:	6823      	ldr	r3, [r4, #0]
 801cd0c:	1d25      	adds	r5, r4, #4
 801cd0e:	9310      	str	r3, [sp, #64]	@ 0x40
 801cd10:	e7dd      	b.n	801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801cd12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cd14:	230a      	movs	r3, #10
 801cd16:	eba8 0202 	sub.w	r2, r8, r2
 801cd1a:	b292      	uxth	r2, r2
 801cd1c:	4649      	mov	r1, r9
 801cd1e:	6820      	ldr	r0, [r4, #0]
 801cd20:	f7ff fcf2 	bl	801c708 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801cd24:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801cd28:	1d25      	adds	r5, r4, #4
 801cd2a:	2b2d      	cmp	r3, #45	@ 0x2d
 801cd2c:	d1cf      	bne.n	801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801cd2e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801cd32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cd34:	3302      	adds	r3, #2
 801cd36:	e7ea      	b.n	801cd0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801cd38:	230a      	movs	r3, #10
 801cd3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cd3c:	1d25      	adds	r5, r4, #4
 801cd3e:	eba8 0202 	sub.w	r2, r8, r2
 801cd42:	b292      	uxth	r2, r2
 801cd44:	4649      	mov	r1, r9
 801cd46:	6820      	ldr	r0, [r4, #0]
 801cd48:	f7ff fd0a 	bl	801c760 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801cd4c:	e7bf      	b.n	801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801cd4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cd50:	2310      	movs	r3, #16
 801cd52:	eba8 0202 	sub.w	r2, r8, r2
 801cd56:	b292      	uxth	r2, r2
 801cd58:	4649      	mov	r1, r9
 801cd5a:	6820      	ldr	r0, [r4, #0]
 801cd5c:	f7ff fd00 	bl	801c760 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801cd60:	1d25      	adds	r5, r4, #4
 801cd62:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801cd66:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d0af      	beq.n	801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801cd6e:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801cd72:	2919      	cmp	r1, #25
 801cd74:	d8f7      	bhi.n	801cd66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a4>
 801cd76:	3b20      	subs	r3, #32
 801cd78:	8013      	strh	r3, [r2, #0]
 801cd7a:	e7f4      	b.n	801cd66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a4>
 801cd7c:	9a08      	ldr	r2, [sp, #32]
 801cd7e:	2a00      	cmp	r2, #0
 801cd80:	d0ab      	beq.n	801ccda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x218>
 801cd82:	7812      	ldrb	r2, [r2, #0]
 801cd84:	e7a9      	b.n	801ccda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x218>
 801cd86:	2d00      	cmp	r5, #0
 801cd88:	f43f af48 	beq.w	801cc1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15a>
 801cd8c:	782d      	ldrb	r5, [r5, #0]
 801cd8e:	e745      	b.n	801cc1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15a>

0801cd90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801cd90:	b507      	push	{r0, r1, r2, lr}
 801cd92:	9300      	str	r3, [sp, #0]
 801cd94:	4613      	mov	r3, r2
 801cd96:	2200      	movs	r2, #0
 801cd98:	f7ff fe93 	bl	801cac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801cd9c:	b003      	add	sp, #12
 801cd9e:	f85d fb04 	ldr.w	pc, [sp], #4

0801cda2 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801cda2:	b40c      	push	{r2, r3}
 801cda4:	b507      	push	{r0, r1, r2, lr}
 801cda6:	ab04      	add	r3, sp, #16
 801cda8:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdac:	9301      	str	r3, [sp, #4]
 801cdae:	f7ff ffef 	bl	801cd90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801cdb2:	b003      	add	sp, #12
 801cdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdb8:	b002      	add	sp, #8
 801cdba:	4770      	bx	lr

0801cdbc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cdbc:	4b01      	ldr	r3, [pc, #4]	@ (801cdc4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cdbe:	6018      	str	r0, [r3, #0]
 801cdc0:	4770      	bx	lr
 801cdc2:	bf00      	nop
 801cdc4:	20011f94 	.word	0x20011f94

0801cdc8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801cdc8:	4b06      	ldr	r3, [pc, #24]	@ (801cde4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801cdca:	881a      	ldrh	r2, [r3, #0]
 801cdcc:	4282      	cmp	r2, r0
 801cdce:	d807      	bhi.n	801cde0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801cdd0:	4b05      	ldr	r3, [pc, #20]	@ (801cde8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801cdd2:	881b      	ldrh	r3, [r3, #0]
 801cdd4:	4413      	add	r3, r2
 801cdd6:	4298      	cmp	r0, r3
 801cdd8:	bfac      	ite	ge
 801cdda:	2000      	movge	r0, #0
 801cddc:	2001      	movlt	r0, #1
 801cdde:	4770      	bx	lr
 801cde0:	2000      	movs	r0, #0
 801cde2:	4770      	bx	lr
 801cde4:	20011fb4 	.word	0x20011fb4
 801cde8:	20011fb8 	.word	0x20011fb8

0801cdec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cdec:	b508      	push	{r3, lr}
 801cdee:	4601      	mov	r1, r0
 801cdf0:	f7ff ffea 	bl	801cdc8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cdf4:	b118      	cbz	r0, 801cdfe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801cdf6:	4b02      	ldr	r3, [pc, #8]	@ (801ce00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801cdfe:	bd08      	pop	{r3, pc}
 801ce00:	20011f98 	.word	0x20011f98

0801ce04 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ce04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce06:	4c24      	ldr	r4, [pc, #144]	@ (801ce98 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801ce08:	6823      	ldr	r3, [r4, #0]
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d042      	beq.n	801ce94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ce0e:	4a23      	ldr	r2, [pc, #140]	@ (801ce9c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801ce10:	4d23      	ldr	r5, [pc, #140]	@ (801cea0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801ce12:	8811      	ldrh	r1, [r2, #0]
 801ce14:	f8b5 c000 	ldrh.w	ip, [r5]
 801ce18:	4822      	ldr	r0, [pc, #136]	@ (801cea4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ce1a:	4461      	add	r1, ip
 801ce1c:	1c4a      	adds	r2, r1, #1
 801ce1e:	f022 0201 	bic.w	r2, r2, #1
 801ce22:	008f      	lsls	r7, r1, #2
 801ce24:	0412      	lsls	r2, r2, #16
 801ce26:	19de      	adds	r6, r3, r7
 801ce28:	0c12      	lsrs	r2, r2, #16
 801ce2a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ce2e:	6006      	str	r6, [r0, #0]
 801ce30:	4e1d      	ldr	r6, [pc, #116]	@ (801cea8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ce32:	19da      	adds	r2, r3, r7
 801ce34:	6032      	str	r2, [r6, #0]
 801ce36:	220e      	movs	r2, #14
 801ce38:	fb02 f20c 	mul.w	r2, r2, ip
 801ce3c:	3203      	adds	r2, #3
 801ce3e:	f022 0203 	bic.w	r2, r2, #3
 801ce42:	443a      	add	r2, r7
 801ce44:	4f19      	ldr	r7, [pc, #100]	@ (801ceac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ce46:	4413      	add	r3, r2
 801ce48:	603b      	str	r3, [r7, #0]
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	4f18      	ldr	r7, [pc, #96]	@ (801ceb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ce4e:	469c      	mov	ip, r3
 801ce50:	803b      	strh	r3, [r7, #0]
 801ce52:	4f18      	ldr	r7, [pc, #96]	@ (801ceb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ce54:	683f      	ldr	r7, [r7, #0]
 801ce56:	1aba      	subs	r2, r7, r2
 801ce58:	4f17      	ldr	r7, [pc, #92]	@ (801ceb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ce5a:	603a      	str	r2, [r7, #0]
 801ce5c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801ce60:	4a16      	ldr	r2, [pc, #88]	@ (801cebc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ce62:	8013      	strh	r3, [r2, #0]
 801ce64:	428b      	cmp	r3, r1
 801ce66:	d10d      	bne.n	801ce84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ce68:	2300      	movs	r3, #0
 801ce6a:	240e      	movs	r4, #14
 801ce6c:	882d      	ldrh	r5, [r5, #0]
 801ce6e:	6830      	ldr	r0, [r6, #0]
 801ce70:	429d      	cmp	r5, r3
 801ce72:	d90f      	bls.n	801ce94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ce74:	fb04 0203 	mla	r2, r4, r3, r0
 801ce78:	7b11      	ldrb	r1, [r2, #12]
 801ce7a:	3301      	adds	r3, #1
 801ce7c:	f36f 1145 	bfc	r1, #5, #1
 801ce80:	7311      	strb	r1, [r2, #12]
 801ce82:	e7f5      	b.n	801ce70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ce84:	6822      	ldr	r2, [r4, #0]
 801ce86:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ce8a:	6802      	ldr	r2, [r0, #0]
 801ce8c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ce90:	3301      	adds	r3, #1
 801ce92:	e7e7      	b.n	801ce64 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ce94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce96:	bf00      	nop
 801ce98:	20011f98 	.word	0x20011f98
 801ce9c:	20011fb4 	.word	0x20011fb4
 801cea0:	20011fb8 	.word	0x20011fb8
 801cea4:	20011fac 	.word	0x20011fac
 801cea8:	20011f9c 	.word	0x20011f9c
 801ceac:	20011fa4 	.word	0x20011fa4
 801ceb0:	20011fb6 	.word	0x20011fb6
 801ceb4:	20011fa0 	.word	0x20011fa0
 801ceb8:	20011fb0 	.word	0x20011fb0
 801cebc:	20011fa8 	.word	0x20011fa8

0801cec0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cec0:	4b06      	ldr	r3, [pc, #24]	@ (801cedc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	b943      	cbnz	r3, 801ced8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cec6:	b139      	cbz	r1, 801ced8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801cec8:	4b05      	ldr	r3, [pc, #20]	@ (801cee0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ceca:	801a      	strh	r2, [r3, #0]
 801cecc:	4b05      	ldr	r3, [pc, #20]	@ (801cee4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801cece:	6019      	str	r1, [r3, #0]
 801ced0:	4b05      	ldr	r3, [pc, #20]	@ (801cee8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ced2:	6018      	str	r0, [r3, #0]
 801ced4:	f7ff bf96 	b.w	801ce04 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ced8:	4770      	bx	lr
 801ceda:	bf00      	nop
 801cedc:	20011fa4 	.word	0x20011fa4
 801cee0:	20011fb8 	.word	0x20011fb8
 801cee4:	20011fa0 	.word	0x20011fa0
 801cee8:	20011f98 	.word	0x20011f98

0801ceec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ceec:	b470      	push	{r4, r5, r6}
 801ceee:	4c07      	ldr	r4, [pc, #28]	@ (801cf0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801cef0:	4605      	mov	r5, r0
 801cef2:	6826      	ldr	r6, [r4, #0]
 801cef4:	4610      	mov	r0, r2
 801cef6:	9a03      	ldr	r2, [sp, #12]
 801cef8:	b936      	cbnz	r6, 801cf08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801cefa:	6025      	str	r5, [r4, #0]
 801cefc:	4c04      	ldr	r4, [pc, #16]	@ (801cf10 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cefe:	8021      	strh	r1, [r4, #0]
 801cf00:	bc70      	pop	{r4, r5, r6}
 801cf02:	4619      	mov	r1, r3
 801cf04:	f7ff bfdc 	b.w	801cec0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cf08:	bc70      	pop	{r4, r5, r6}
 801cf0a:	4770      	bx	lr
 801cf0c:	20011fbc 	.word	0x20011fbc
 801cf10:	20011fb4 	.word	0x20011fb4

0801cf14 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cf14:	4a12      	ldr	r2, [pc, #72]	@ (801cf60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801cf16:	8803      	ldrh	r3, [r0, #0]
 801cf18:	8812      	ldrh	r2, [r2, #0]
 801cf1a:	4293      	cmp	r3, r2
 801cf1c:	d207      	bcs.n	801cf2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801cf1e:	2114      	movs	r1, #20
 801cf20:	4a10      	ldr	r2, [pc, #64]	@ (801cf64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801cf22:	6812      	ldr	r2, [r2, #0]
 801cf24:	fb01 2303 	mla	r3, r1, r3, r2
 801cf28:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801cf2c:	4770      	bx	lr
 801cf2e:	490e      	ldr	r1, [pc, #56]	@ (801cf68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cf30:	8809      	ldrh	r1, [r1, #0]
 801cf32:	4411      	add	r1, r2
 801cf34:	428b      	cmp	r3, r1
 801cf36:	da04      	bge.n	801cf42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801cf38:	1a9b      	subs	r3, r3, r2
 801cf3a:	4a0c      	ldr	r2, [pc, #48]	@ (801cf6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cf3c:	210e      	movs	r1, #14
 801cf3e:	6812      	ldr	r2, [r2, #0]
 801cf40:	e7f0      	b.n	801cf24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801cf42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cf46:	4293      	cmp	r3, r2
 801cf48:	d108      	bne.n	801cf5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801cf4a:	4b09      	ldr	r3, [pc, #36]	@ (801cf70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cf4c:	781b      	ldrb	r3, [r3, #0]
 801cf4e:	b91b      	cbnz	r3, 801cf58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801cf50:	4b08      	ldr	r3, [pc, #32]	@ (801cf74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cf52:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cf56:	4770      	bx	lr
 801cf58:	4b07      	ldr	r3, [pc, #28]	@ (801cf78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cf5a:	e7fa      	b.n	801cf52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801cf5c:	2000      	movs	r0, #0
 801cf5e:	4770      	bx	lr
 801cf60:	20011fb4 	.word	0x20011fb4
 801cf64:	20011fbc 	.word	0x20011fbc
 801cf68:	20011fb8 	.word	0x20011fb8
 801cf6c:	20011f9c 	.word	0x20011f9c
 801cf70:	20011f24 	.word	0x20011f24
 801cf74:	20011f26 	.word	0x20011f26
 801cf78:	20011f28 	.word	0x20011f28

0801cf7c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cf7c:	4a12      	ldr	r2, [pc, #72]	@ (801cfc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801cf7e:	8803      	ldrh	r3, [r0, #0]
 801cf80:	8812      	ldrh	r2, [r2, #0]
 801cf82:	4293      	cmp	r3, r2
 801cf84:	d207      	bcs.n	801cf96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801cf86:	2114      	movs	r1, #20
 801cf88:	4a10      	ldr	r2, [pc, #64]	@ (801cfcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801cf8a:	6812      	ldr	r2, [r2, #0]
 801cf8c:	fb01 2303 	mla	r3, r1, r3, r2
 801cf90:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801cf94:	4770      	bx	lr
 801cf96:	490e      	ldr	r1, [pc, #56]	@ (801cfd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cf98:	8809      	ldrh	r1, [r1, #0]
 801cf9a:	4411      	add	r1, r2
 801cf9c:	428b      	cmp	r3, r1
 801cf9e:	da04      	bge.n	801cfaa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801cfa0:	1a9b      	subs	r3, r3, r2
 801cfa2:	4a0c      	ldr	r2, [pc, #48]	@ (801cfd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cfa4:	210e      	movs	r1, #14
 801cfa6:	6812      	ldr	r2, [r2, #0]
 801cfa8:	e7f0      	b.n	801cf8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801cfaa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cfae:	4293      	cmp	r3, r2
 801cfb0:	d108      	bne.n	801cfc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801cfb2:	4b09      	ldr	r3, [pc, #36]	@ (801cfd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cfb4:	781b      	ldrb	r3, [r3, #0]
 801cfb6:	b91b      	cbnz	r3, 801cfc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801cfb8:	4b08      	ldr	r3, [pc, #32]	@ (801cfdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cfba:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cfbe:	4770      	bx	lr
 801cfc0:	4b07      	ldr	r3, [pc, #28]	@ (801cfe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cfc2:	e7fa      	b.n	801cfba <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801cfc4:	2000      	movs	r0, #0
 801cfc6:	4770      	bx	lr
 801cfc8:	20011fb4 	.word	0x20011fb4
 801cfcc:	20011fbc 	.word	0x20011fbc
 801cfd0:	20011fb8 	.word	0x20011fb8
 801cfd4:	20011f9c 	.word	0x20011f9c
 801cfd8:	20011f24 	.word	0x20011f24
 801cfdc:	20011f28 	.word	0x20011f28
 801cfe0:	20011f26 	.word	0x20011f26

0801cfe4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801cfe4:	b530      	push	{r4, r5, lr}
 801cfe6:	4a22      	ldr	r2, [pc, #136]	@ (801d070 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801cfe8:	880b      	ldrh	r3, [r1, #0]
 801cfea:	8812      	ldrh	r2, [r2, #0]
 801cfec:	4293      	cmp	r3, r2
 801cfee:	d213      	bcs.n	801d018 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801cff0:	2114      	movs	r1, #20
 801cff2:	4a20      	ldr	r2, [pc, #128]	@ (801d074 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801cff4:	6812      	ldr	r2, [r2, #0]
 801cff6:	fb01 2303 	mla	r3, r1, r3, r2
 801cffa:	8a1a      	ldrh	r2, [r3, #16]
 801cffc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d000:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d004:	8a5b      	ldrh	r3, [r3, #18]
 801d006:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d00a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d00e:	8004      	strh	r4, [r0, #0]
 801d010:	8041      	strh	r1, [r0, #2]
 801d012:	8082      	strh	r2, [r0, #4]
 801d014:	80c3      	strh	r3, [r0, #6]
 801d016:	e024      	b.n	801d062 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801d018:	4917      	ldr	r1, [pc, #92]	@ (801d078 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d01a:	8809      	ldrh	r1, [r1, #0]
 801d01c:	4411      	add	r1, r2
 801d01e:	428b      	cmp	r3, r1
 801d020:	da10      	bge.n	801d044 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801d022:	1a9b      	subs	r3, r3, r2
 801d024:	220e      	movs	r2, #14
 801d026:	4353      	muls	r3, r2
 801d028:	4a14      	ldr	r2, [pc, #80]	@ (801d07c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d02a:	6811      	ldr	r1, [r2, #0]
 801d02c:	18ca      	adds	r2, r1, r3
 801d02e:	5ecd      	ldrsh	r5, [r1, r3]
 801d030:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801d034:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801d038:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801d03c:	8005      	strh	r5, [r0, #0]
 801d03e:	8044      	strh	r4, [r0, #2]
 801d040:	8081      	strh	r1, [r0, #4]
 801d042:	e7e7      	b.n	801d014 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801d044:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d048:	4293      	cmp	r3, r2
 801d04a:	d10b      	bne.n	801d064 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801d04c:	4b0c      	ldr	r3, [pc, #48]	@ (801d080 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d04e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d052:	4b0c      	ldr	r3, [pc, #48]	@ (801d084 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d054:	8081      	strh	r1, [r0, #4]
 801d056:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d05a:	2300      	movs	r3, #0
 801d05c:	80c2      	strh	r2, [r0, #6]
 801d05e:	8003      	strh	r3, [r0, #0]
 801d060:	8043      	strh	r3, [r0, #2]
 801d062:	bd30      	pop	{r4, r5, pc}
 801d064:	2300      	movs	r3, #0
 801d066:	8003      	strh	r3, [r0, #0]
 801d068:	8043      	strh	r3, [r0, #2]
 801d06a:	8083      	strh	r3, [r0, #4]
 801d06c:	e7d2      	b.n	801d014 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801d06e:	bf00      	nop
 801d070:	20011fb4 	.word	0x20011fb4
 801d074:	20011fbc 	.word	0x20011fbc
 801d078:	20011fb8 	.word	0x20011fb8
 801d07c:	20011f9c 	.word	0x20011f9c
 801d080:	20011f20 	.word	0x20011f20
 801d084:	20011f22 	.word	0x20011f22

0801d088 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d088:	4a17      	ldr	r2, [pc, #92]	@ (801d0e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801d08a:	8803      	ldrh	r3, [r0, #0]
 801d08c:	8812      	ldrh	r2, [r2, #0]
 801d08e:	4293      	cmp	r3, r2
 801d090:	d213      	bcs.n	801d0ba <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801d092:	2114      	movs	r1, #20
 801d094:	4a15      	ldr	r2, [pc, #84]	@ (801d0ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d096:	6812      	ldr	r2, [r2, #0]
 801d098:	fb01 2303 	mla	r3, r1, r3, r2
 801d09c:	8a1a      	ldrh	r2, [r3, #16]
 801d09e:	8919      	ldrh	r1, [r3, #8]
 801d0a0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d0a4:	428a      	cmp	r2, r1
 801d0a6:	db1d      	blt.n	801d0e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d0a8:	8a58      	ldrh	r0, [r3, #18]
 801d0aa:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d0ae:	895b      	ldrh	r3, [r3, #10]
 801d0b0:	4298      	cmp	r0, r3
 801d0b2:	bfac      	ite	ge
 801d0b4:	2000      	movge	r0, #0
 801d0b6:	2001      	movlt	r0, #1
 801d0b8:	4770      	bx	lr
 801d0ba:	490d      	ldr	r1, [pc, #52]	@ (801d0f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d0bc:	8809      	ldrh	r1, [r1, #0]
 801d0be:	4411      	add	r1, r2
 801d0c0:	428b      	cmp	r3, r1
 801d0c2:	da0d      	bge.n	801d0e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801d0c4:	210e      	movs	r1, #14
 801d0c6:	1a9b      	subs	r3, r3, r2
 801d0c8:	4a0a      	ldr	r2, [pc, #40]	@ (801d0f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d0ca:	6812      	ldr	r2, [r2, #0]
 801d0cc:	fb01 2303 	mla	r3, r1, r3, r2
 801d0d0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d0d4:	891a      	ldrh	r2, [r3, #8]
 801d0d6:	4291      	cmp	r1, r2
 801d0d8:	db04      	blt.n	801d0e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d0da:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d0de:	e7e6      	b.n	801d0ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801d0e0:	2000      	movs	r0, #0
 801d0e2:	4770      	bx	lr
 801d0e4:	2001      	movs	r0, #1
 801d0e6:	4770      	bx	lr
 801d0e8:	20011fb4 	.word	0x20011fb4
 801d0ec:	20011fbc 	.word	0x20011fbc
 801d0f0:	20011fb8 	.word	0x20011fb8
 801d0f4:	20011f9c 	.word	0x20011f9c

0801d0f8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d0f8:	4a12      	ldr	r2, [pc, #72]	@ (801d144 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d0fa:	8803      	ldrh	r3, [r0, #0]
 801d0fc:	8811      	ldrh	r1, [r2, #0]
 801d0fe:	428b      	cmp	r3, r1
 801d100:	d20b      	bcs.n	801d11a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801d102:	4a11      	ldr	r2, [pc, #68]	@ (801d148 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d104:	6812      	ldr	r2, [r2, #0]
 801d106:	b112      	cbz	r2, 801d10e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d108:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d10c:	b9c0      	cbnz	r0, 801d140 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801d10e:	4a0f      	ldr	r2, [pc, #60]	@ (801d14c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d110:	6811      	ldr	r1, [r2, #0]
 801d112:	2214      	movs	r2, #20
 801d114:	4353      	muls	r3, r2
 801d116:	58c8      	ldr	r0, [r1, r3]
 801d118:	4770      	bx	lr
 801d11a:	4a0d      	ldr	r2, [pc, #52]	@ (801d150 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d11c:	8812      	ldrh	r2, [r2, #0]
 801d11e:	440a      	add	r2, r1
 801d120:	4293      	cmp	r3, r2
 801d122:	da04      	bge.n	801d12e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801d124:	4a08      	ldr	r2, [pc, #32]	@ (801d148 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d126:	6812      	ldr	r2, [r2, #0]
 801d128:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d12c:	4770      	bx	lr
 801d12e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d132:	4293      	cmp	r3, r2
 801d134:	d103      	bne.n	801d13e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d136:	4b07      	ldr	r3, [pc, #28]	@ (801d154 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801d13c:	4770      	bx	lr
 801d13e:	2000      	movs	r0, #0
 801d140:	4770      	bx	lr
 801d142:	bf00      	nop
 801d144:	20011fb4 	.word	0x20011fb4
 801d148:	20011f98 	.word	0x20011f98
 801d14c:	20011fbc 	.word	0x20011fbc
 801d150:	20011fb8 	.word	0x20011fb8
 801d154:	20011f2c 	.word	0x20011f2c

0801d158 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d158:	4b24      	ldr	r3, [pc, #144]	@ (801d1ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d15a:	8802      	ldrh	r2, [r0, #0]
 801d15c:	8818      	ldrh	r0, [r3, #0]
 801d15e:	4282      	cmp	r2, r0
 801d160:	d221      	bcs.n	801d1a6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801d162:	4b23      	ldr	r3, [pc, #140]	@ (801d1f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d164:	6819      	ldr	r1, [r3, #0]
 801d166:	2314      	movs	r3, #20
 801d168:	fb03 1302 	mla	r3, r3, r2, r1
 801d16c:	6858      	ldr	r0, [r3, #4]
 801d16e:	2800      	cmp	r0, #0
 801d170:	d03a      	beq.n	801d1e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d172:	4920      	ldr	r1, [pc, #128]	@ (801d1f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d174:	6809      	ldr	r1, [r1, #0]
 801d176:	2900      	cmp	r1, #0
 801d178:	d036      	beq.n	801d1e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d17a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d17e:	2900      	cmp	r1, #0
 801d180:	d032      	beq.n	801d1e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d182:	891a      	ldrh	r2, [r3, #8]
 801d184:	8958      	ldrh	r0, [r3, #10]
 801d186:	4350      	muls	r0, r2
 801d188:	7c5a      	ldrb	r2, [r3, #17]
 801d18a:	7cdb      	ldrb	r3, [r3, #19]
 801d18c:	0952      	lsrs	r2, r2, #5
 801d18e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d192:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d196:	2b0b      	cmp	r3, #11
 801d198:	bf18      	it	ne
 801d19a:	0040      	lslne	r0, r0, #1
 801d19c:	3003      	adds	r0, #3
 801d19e:	f020 0003 	bic.w	r0, r0, #3
 801d1a2:	4408      	add	r0, r1
 801d1a4:	4770      	bx	lr
 801d1a6:	4b14      	ldr	r3, [pc, #80]	@ (801d1f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d1a8:	881b      	ldrh	r3, [r3, #0]
 801d1aa:	4403      	add	r3, r0
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	da1a      	bge.n	801d1e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d1b0:	210e      	movs	r1, #14
 801d1b2:	4b12      	ldr	r3, [pc, #72]	@ (801d1fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d1b4:	1a10      	subs	r0, r2, r0
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	fb01 3000 	mla	r0, r1, r0, r3
 801d1bc:	7b03      	ldrb	r3, [r0, #12]
 801d1be:	f003 031f 	and.w	r3, r3, #31
 801d1c2:	2b0b      	cmp	r3, #11
 801d1c4:	d10b      	bne.n	801d1de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801d1c6:	8903      	ldrh	r3, [r0, #8]
 801d1c8:	8940      	ldrh	r0, [r0, #10]
 801d1ca:	4358      	muls	r0, r3
 801d1cc:	4b09      	ldr	r3, [pc, #36]	@ (801d1f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d1ce:	3003      	adds	r0, #3
 801d1d0:	6819      	ldr	r1, [r3, #0]
 801d1d2:	f020 0303 	bic.w	r3, r0, #3
 801d1d6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d1da:	4418      	add	r0, r3
 801d1dc:	4770      	bx	lr
 801d1de:	2b0d      	cmp	r3, #13
 801d1e0:	d101      	bne.n	801d1e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d1e2:	300d      	adds	r0, #13
 801d1e4:	4770      	bx	lr
 801d1e6:	2000      	movs	r0, #0
 801d1e8:	4770      	bx	lr
 801d1ea:	bf00      	nop
 801d1ec:	20011fb4 	.word	0x20011fb4
 801d1f0:	20011fbc 	.word	0x20011fbc
 801d1f4:	20011f98 	.word	0x20011f98
 801d1f8:	20011fb8 	.word	0x20011fb8
 801d1fc:	20011f9c 	.word	0x20011f9c

0801d200 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d200:	b510      	push	{r4, lr}
 801d202:	4b1f      	ldr	r3, [pc, #124]	@ (801d280 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801d204:	8802      	ldrh	r2, [r0, #0]
 801d206:	881b      	ldrh	r3, [r3, #0]
 801d208:	429a      	cmp	r2, r3
 801d20a:	d21a      	bcs.n	801d242 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801d20c:	2114      	movs	r1, #20
 801d20e:	4b1d      	ldr	r3, [pc, #116]	@ (801d284 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	fb01 3102 	mla	r1, r1, r2, r3
 801d216:	7c4b      	ldrb	r3, [r1, #17]
 801d218:	0958      	lsrs	r0, r3, #5
 801d21a:	7ccb      	ldrb	r3, [r1, #19]
 801d21c:	491a      	ldr	r1, [pc, #104]	@ (801d288 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801d21e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d222:	6809      	ldr	r1, [r1, #0]
 801d224:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801d228:	b2d8      	uxtb	r0, r3
 801d22a:	b149      	cbz	r1, 801d240 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d22c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d230:	b132      	cbz	r2, 801d240 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d232:	2b0e      	cmp	r3, #14
 801d234:	d021      	beq.n	801d27a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801d236:	280f      	cmp	r0, #15
 801d238:	d01d      	beq.n	801d276 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801d23a:	2810      	cmp	r0, #16
 801d23c:	bf08      	it	eq
 801d23e:	2002      	moveq	r0, #2
 801d240:	bd10      	pop	{r4, pc}
 801d242:	4912      	ldr	r1, [pc, #72]	@ (801d28c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801d244:	8809      	ldrh	r1, [r1, #0]
 801d246:	4419      	add	r1, r3
 801d248:	428a      	cmp	r2, r1
 801d24a:	da09      	bge.n	801d260 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801d24c:	210e      	movs	r1, #14
 801d24e:	1ad3      	subs	r3, r2, r3
 801d250:	4a0f      	ldr	r2, [pc, #60]	@ (801d290 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801d252:	6812      	ldr	r2, [r2, #0]
 801d254:	fb01 2303 	mla	r3, r1, r3, r2
 801d258:	7b18      	ldrb	r0, [r3, #12]
 801d25a:	f000 001f 	and.w	r0, r0, #31
 801d25e:	e7ef      	b.n	801d240 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d260:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801d264:	429a      	cmp	r2, r3
 801d266:	d108      	bne.n	801d27a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801d268:	f7f0 fb5c 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 801d26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d270:	6803      	ldr	r3, [r0, #0]
 801d272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d274:	4718      	bx	r3
 801d276:	2001      	movs	r0, #1
 801d278:	e7e2      	b.n	801d240 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d27a:	2000      	movs	r0, #0
 801d27c:	e7e0      	b.n	801d240 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d27e:	bf00      	nop
 801d280:	20011fb4 	.word	0x20011fb4
 801d284:	20011fbc 	.word	0x20011fbc
 801d288:	20011f98 	.word	0x20011f98
 801d28c:	20011fb8 	.word	0x20011fb8
 801d290:	20011f9c 	.word	0x20011f9c

0801d294 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801d294:	2010      	movs	r0, #16
 801d296:	4770      	bx	lr

0801d298 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801d298:	2000      	movs	r0, #0
 801d29a:	4770      	bx	lr

0801d29c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801d29c:	4b02      	ldr	r3, [pc, #8]	@ (801d2a8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801d29e:	8818      	ldrh	r0, [r3, #0]
 801d2a0:	0040      	lsls	r0, r0, #1
 801d2a2:	b280      	uxth	r0, r0
 801d2a4:	4770      	bx	lr
 801d2a6:	bf00      	nop
 801d2a8:	20011f26 	.word	0x20011f26

0801d2ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d2ac:	2bff      	cmp	r3, #255	@ 0xff
 801d2ae:	d05e      	beq.n	801d36e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801d2b0:	2a0b      	cmp	r2, #11
 801d2b2:	d058      	beq.n	801d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801d2b4:	d80e      	bhi.n	801d2d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d2b6:	2a03      	cmp	r2, #3
 801d2b8:	d04d      	beq.n	801d356 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801d2ba:	d804      	bhi.n	801d2c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d2bc:	2a01      	cmp	r2, #1
 801d2be:	d04c      	beq.n	801d35a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801d2c0:	d94d      	bls.n	801d35e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801d2c2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801d2c4:	e031      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d2c6:	2a09      	cmp	r2, #9
 801d2c8:	d04d      	beq.n	801d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801d2ca:	d84a      	bhi.n	801d362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801d2cc:	2a08      	cmp	r2, #8
 801d2ce:	d048      	beq.n	801d362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	e02a      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d2d4:	2a2f      	cmp	r2, #47	@ 0x2f
 801d2d6:	d02c      	beq.n	801d332 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801d2d8:	d811      	bhi.n	801d2fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d2da:	2a2d      	cmp	r2, #45	@ 0x2d
 801d2dc:	d018      	beq.n	801d310 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801d2de:	d831      	bhi.n	801d344 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801d2e0:	2a2c      	cmp	r2, #44	@ 0x2c
 801d2e2:	d1f5      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d2e4:	684a      	ldr	r2, [r1, #4]
 801d2e6:	7813      	ldrb	r3, [r2, #0]
 801d2e8:	7852      	ldrb	r2, [r2, #1]
 801d2ea:	2a00      	cmp	r2, #0
 801d2ec:	d1f0      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d2ee:	2b01      	cmp	r3, #1
 801d2f0:	d01d      	beq.n	801d32e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d02d      	beq.n	801d352 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d2f6:	2b02      	cmp	r3, #2
 801d2f8:	d1ea      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d2fa:	68c3      	ldr	r3, [r0, #12]
 801d2fc:	e015      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d2fe:	2a31      	cmp	r2, #49	@ 0x31
 801d300:	d004      	beq.n	801d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801d302:	d332      	bcc.n	801d36a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d304:	2a32      	cmp	r2, #50	@ 0x32
 801d306:	d030      	beq.n	801d36a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d308:	2a33      	cmp	r2, #51	@ 0x33
 801d30a:	d1e1      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d30c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801d30e:	e00c      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d310:	684a      	ldr	r2, [r1, #4]
 801d312:	7813      	ldrb	r3, [r2, #0]
 801d314:	7852      	ldrb	r2, [r2, #1]
 801d316:	2a00      	cmp	r2, #0
 801d318:	d1da      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d31a:	2b01      	cmp	r3, #1
 801d31c:	d004      	beq.n	801d328 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801d31e:	d30f      	bcc.n	801d340 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801d320:	2b02      	cmp	r3, #2
 801d322:	d1d5      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d324:	6943      	ldr	r3, [r0, #20]
 801d326:	e000      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d328:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801d32a:	4618      	mov	r0, r3
 801d32c:	4770      	bx	lr
 801d32e:	69c3      	ldr	r3, [r0, #28]
 801d330:	e7fb      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d332:	684b      	ldr	r3, [r1, #4]
 801d334:	781a      	ldrb	r2, [r3, #0]
 801d336:	785b      	ldrb	r3, [r3, #1]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d1c9      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d33c:	2a00      	cmp	r2, #0
 801d33e:	d1f4      	bne.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d340:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d342:	e7f2      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d344:	684b      	ldr	r3, [r1, #4]
 801d346:	781a      	ldrb	r2, [r3, #0]
 801d348:	785b      	ldrb	r3, [r3, #1]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d1c0      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d34e:	2a00      	cmp	r2, #0
 801d350:	d1eb      	bne.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d352:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801d354:	e7e9      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d356:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801d358:	e7e7      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d35a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d35c:	e7e5      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d35e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d360:	e7e3      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d362:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801d364:	e7e1      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d366:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801d368:	e7df      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d36a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801d36c:	e7dd      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d36e:	2a0b      	cmp	r2, #11
 801d370:	d059      	beq.n	801d426 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801d372:	d80e      	bhi.n	801d392 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801d374:	2a03      	cmp	r2, #3
 801d376:	d050      	beq.n	801d41a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801d378:	d804      	bhi.n	801d384 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801d37a:	2a01      	cmp	r2, #1
 801d37c:	d04f      	beq.n	801d41e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801d37e:	d950      	bls.n	801d422 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801d380:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801d382:	e7d2      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d384:	2a09      	cmp	r2, #9
 801d386:	d04e      	beq.n	801d426 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801d388:	d801      	bhi.n	801d38e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801d38a:	2a08      	cmp	r2, #8
 801d38c:	d1a0      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d38e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801d390:	e7cb      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d392:	2a2f      	cmp	r2, #47	@ 0x2f
 801d394:	d02d      	beq.n	801d3f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801d396:	d811      	bhi.n	801d3bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801d398:	2a2d      	cmp	r2, #45	@ 0x2d
 801d39a:	d018      	beq.n	801d3ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801d39c:	d833      	bhi.n	801d406 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801d39e:	2a2c      	cmp	r2, #44	@ 0x2c
 801d3a0:	d196      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d3a2:	684a      	ldr	r2, [r1, #4]
 801d3a4:	7813      	ldrb	r3, [r2, #0]
 801d3a6:	7852      	ldrb	r2, [r2, #1]
 801d3a8:	2a00      	cmp	r2, #0
 801d3aa:	d191      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	d01e      	beq.n	801d3ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d030      	beq.n	801d416 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801d3b4:	2b02      	cmp	r3, #2
 801d3b6:	d18b      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d3b8:	6903      	ldr	r3, [r0, #16]
 801d3ba:	e7b6      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d3bc:	2a31      	cmp	r2, #49	@ 0x31
 801d3be:	d004      	beq.n	801d3ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801d3c0:	d333      	bcc.n	801d42a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801d3c2:	2a32      	cmp	r2, #50	@ 0x32
 801d3c4:	d031      	beq.n	801d42a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801d3c6:	2a33      	cmp	r2, #51	@ 0x33
 801d3c8:	d182      	bne.n	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d3ca:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801d3cc:	e7ad      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d3ce:	684a      	ldr	r2, [r1, #4]
 801d3d0:	7813      	ldrb	r3, [r2, #0]
 801d3d2:	7852      	ldrb	r2, [r2, #1]
 801d3d4:	2a00      	cmp	r2, #0
 801d3d6:	f47f af7b 	bne.w	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d3da:	2b01      	cmp	r3, #1
 801d3dc:	d005      	beq.n	801d3ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d3de:	d310      	bcc.n	801d402 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801d3e0:	2b02      	cmp	r3, #2
 801d3e2:	f47f af75 	bne.w	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d3e6:	6983      	ldr	r3, [r0, #24]
 801d3e8:	e79f      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d3ea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801d3ec:	e79d      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d3ee:	6a03      	ldr	r3, [r0, #32]
 801d3f0:	e79b      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d3f2:	684b      	ldr	r3, [r1, #4]
 801d3f4:	781a      	ldrb	r2, [r3, #0]
 801d3f6:	785b      	ldrb	r3, [r3, #1]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	f47f af69 	bne.w	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d3fe:	2a00      	cmp	r2, #0
 801d400:	d193      	bne.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d402:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801d404:	e791      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d406:	684b      	ldr	r3, [r1, #4]
 801d408:	781a      	ldrb	r2, [r3, #0]
 801d40a:	785b      	ldrb	r3, [r3, #1]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	f47f af5f 	bne.w	801d2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801d412:	2a00      	cmp	r2, #0
 801d414:	d189      	bne.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d416:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d418:	e787      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d41a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801d41c:	e785      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d41e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801d420:	e783      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d422:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801d424:	e781      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d426:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801d428:	e77f      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d42a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801d42c:	e77d      	b.n	801d32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801d42e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d42e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d432:	b087      	sub	sp, #28
 801d434:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d436:	9101      	str	r1, [sp, #4]
 801d438:	9205      	str	r2, [sp, #20]
 801d43a:	6841      	ldr	r1, [r0, #4]
 801d43c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d440:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801d444:	9202      	str	r2, [sp, #8]
 801d446:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801d44a:	fb01 2404 	mla	r4, r1, r4, r2
 801d44e:	6802      	ldr	r2, [r0, #0]
 801d450:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d454:	f8de 2000 	ldr.w	r2, [lr]
 801d458:	9203      	str	r2, [sp, #12]
 801d45a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d45e:	3204      	adds	r2, #4
 801d460:	9204      	str	r2, [sp, #16]
 801d462:	9a02      	ldr	r2, [sp, #8]
 801d464:	43d6      	mvns	r6, r2
 801d466:	b2f6      	uxtb	r6, r6
 801d468:	9a01      	ldr	r2, [sp, #4]
 801d46a:	2a00      	cmp	r2, #0
 801d46c:	dc03      	bgt.n	801d476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d46e:	9a05      	ldr	r2, [sp, #20]
 801d470:	2a00      	cmp	r2, #0
 801d472:	f340 8129 	ble.w	801d6c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d476:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d478:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d47c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d480:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d482:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d486:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	dd0e      	ble.n	801d4ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d48e:	1408      	asrs	r0, r1, #16
 801d490:	d405      	bmi.n	801d49e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d492:	4560      	cmp	r0, ip
 801d494:	da03      	bge.n	801d49e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d496:	1410      	asrs	r0, r2, #16
 801d498:	d401      	bmi.n	801d49e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d49a:	42b8      	cmp	r0, r7
 801d49c:	db07      	blt.n	801d4ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d49e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d4a0:	3b01      	subs	r3, #1
 801d4a2:	4401      	add	r1, r0
 801d4a4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d4a6:	3402      	adds	r4, #2
 801d4a8:	4402      	add	r2, r0
 801d4aa:	e7ee      	b.n	801d48a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d4ac:	d071      	beq.n	801d592 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d4ae:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d4b0:	1e58      	subs	r0, r3, #1
 801d4b2:	fb05 1500 	mla	r5, r5, r0, r1
 801d4b6:	142d      	asrs	r5, r5, #16
 801d4b8:	d45f      	bmi.n	801d57a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d4ba:	4565      	cmp	r5, ip
 801d4bc:	da5d      	bge.n	801d57a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d4be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d4c0:	fb05 2000 	mla	r0, r5, r0, r2
 801d4c4:	1400      	asrs	r0, r0, #16
 801d4c6:	d458      	bmi.n	801d57a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d4c8:	42b8      	cmp	r0, r7
 801d4ca:	da56      	bge.n	801d57a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d4cc:	4699      	mov	r9, r3
 801d4ce:	46a2      	mov	sl, r4
 801d4d0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801d4d4:	f1b9 0f00 	cmp.w	r9, #0
 801d4d8:	dd57      	ble.n	801d58a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d4da:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d4de:	9803      	ldr	r0, [sp, #12]
 801d4e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d4e4:	fb07 000c 	mla	r0, r7, ip, r0
 801d4e8:	140d      	asrs	r5, r1, #16
 801d4ea:	5d40      	ldrb	r0, [r0, r5]
 801d4ec:	9d04      	ldr	r5, [sp, #16]
 801d4ee:	f109 39ff 	add.w	r9, r9, #4294967295
 801d4f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d4f6:	f8ba 5000 	ldrh.w	r5, [sl]
 801d4fa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d4fe:	122f      	asrs	r7, r5, #8
 801d500:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d504:	fb17 f706 	smulbb	r7, r7, r6
 801d508:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d50c:	00ed      	lsls	r5, r5, #3
 801d50e:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801d512:	b2ed      	uxtb	r5, r5
 801d514:	fb18 f806 	smulbb	r8, r8, r6
 801d518:	fb15 f506 	smulbb	r5, r5, r6
 801d51c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d520:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d524:	10c7      	asrs	r7, r0, #3
 801d526:	00c0      	lsls	r0, r0, #3
 801d528:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d52c:	b2c0      	uxtb	r0, r0
 801d52e:	fb07 870b 	mla	r7, r7, fp, r8
 801d532:	fb00 500b 	mla	r0, r0, fp, r5
 801d536:	fa1f fc8c 	uxth.w	ip, ip
 801d53a:	b280      	uxth	r0, r0
 801d53c:	b2bf      	uxth	r7, r7
 801d53e:	f10c 0501 	add.w	r5, ip, #1
 801d542:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d546:	f107 0801 	add.w	r8, r7, #1
 801d54a:	1c45      	adds	r5, r0, #1
 801d54c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d550:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d554:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d556:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d55a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d55e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d562:	ea45 0c0c 	orr.w	ip, r5, ip
 801d566:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d56a:	4401      	add	r1, r0
 801d56c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d56e:	ea4c 0c08 	orr.w	ip, ip, r8
 801d572:	f82a cb02 	strh.w	ip, [sl], #2
 801d576:	4402      	add	r2, r0
 801d578:	e7ac      	b.n	801d4d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d57a:	f04f 0800 	mov.w	r8, #0
 801d57e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d582:	eb03 0008 	add.w	r0, r3, r8
 801d586:	2800      	cmp	r0, #0
 801d588:	dc41      	bgt.n	801d60e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d58a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d58e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d592:	9b01      	ldr	r3, [sp, #4]
 801d594:	2b00      	cmp	r3, #0
 801d596:	f340 8097 	ble.w	801d6c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d59a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d59e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d5ae:	eef0 6a62 	vmov.f32	s13, s5
 801d5b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5c6:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d5ca:	eef0 6a43 	vmov.f32	s13, s6
 801d5ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5d2:	ee12 2a90 	vmov	r2, s5
 801d5d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5e4:	ee13 2a10 	vmov	r2, s6
 801d5e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d5ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5ec:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801d5f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5f4:	9314      	str	r3, [sp, #80]	@ 0x50
 801d5f6:	9b01      	ldr	r3, [sp, #4]
 801d5f8:	9a05      	ldr	r2, [sp, #20]
 801d5fa:	3b01      	subs	r3, #1
 801d5fc:	9301      	str	r3, [sp, #4]
 801d5fe:	eeb0 3a67 	vmov.f32	s6, s15
 801d602:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d604:	eef0 2a47 	vmov.f32	s5, s14
 801d608:	bf08      	it	eq
 801d60a:	4613      	moveq	r3, r2
 801d60c:	e72c      	b.n	801d468 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d60e:	140f      	asrs	r7, r1, #16
 801d610:	d453      	bmi.n	801d6ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d612:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d616:	42bd      	cmp	r5, r7
 801d618:	dd4f      	ble.n	801d6ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d61a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d61e:	d44c      	bmi.n	801d6ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d620:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d624:	4560      	cmp	r0, ip
 801d626:	dd48      	ble.n	801d6ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d628:	9803      	ldr	r0, [sp, #12]
 801d62a:	b22d      	sxth	r5, r5
 801d62c:	fb0c 0505 	mla	r5, ip, r5, r0
 801d630:	5de8      	ldrb	r0, [r5, r7]
 801d632:	9d04      	ldr	r5, [sp, #16]
 801d634:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d638:	f06f 0501 	mvn.w	r5, #1
 801d63c:	fb05 fb08 	mul.w	fp, r5, r8
 801d640:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d644:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d648:	122f      	asrs	r7, r5, #8
 801d64a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d64e:	fb17 f706 	smulbb	r7, r7, r6
 801d652:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d656:	00ed      	lsls	r5, r5, #3
 801d658:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d65c:	b2ed      	uxtb	r5, r5
 801d65e:	fb19 f906 	smulbb	r9, r9, r6
 801d662:	fb15 f506 	smulbb	r5, r5, r6
 801d666:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d66a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d66e:	10c7      	asrs	r7, r0, #3
 801d670:	00c0      	lsls	r0, r0, #3
 801d672:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d676:	b2c0      	uxtb	r0, r0
 801d678:	fb07 970a 	mla	r7, r7, sl, r9
 801d67c:	fb00 500a 	mla	r0, r0, sl, r5
 801d680:	fa1f fc8c 	uxth.w	ip, ip
 801d684:	b2bf      	uxth	r7, r7
 801d686:	b280      	uxth	r0, r0
 801d688:	f10c 0501 	add.w	r5, ip, #1
 801d68c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d690:	f107 0901 	add.w	r9, r7, #1
 801d694:	1c45      	adds	r5, r0, #1
 801d696:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d69a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d69e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d6a2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d6a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d6aa:	ea45 0c0c 	orr.w	ip, r5, ip
 801d6ae:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d6b2:	ea4c 0c09 	orr.w	ip, ip, r9
 801d6b6:	f824 c00b 	strh.w	ip, [r4, fp]
 801d6ba:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d6bc:	f108 38ff 	add.w	r8, r8, #4294967295
 801d6c0:	4401      	add	r1, r0
 801d6c2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d6c4:	4402      	add	r2, r0
 801d6c6:	e75c      	b.n	801d582 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d6c8:	b007      	add	sp, #28
 801d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d6d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d6:	b085      	sub	sp, #20
 801d6d8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d6da:	4693      	mov	fp, r2
 801d6dc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d6e0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801d6e4:	6870      	ldr	r0, [r6, #4]
 801d6e6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d6e8:	fb00 2404 	mla	r4, r0, r4, r2
 801d6ec:	6832      	ldr	r2, [r6, #0]
 801d6ee:	9100      	str	r1, [sp, #0]
 801d6f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d6f4:	682a      	ldr	r2, [r5, #0]
 801d6f6:	9201      	str	r2, [sp, #4]
 801d6f8:	686a      	ldr	r2, [r5, #4]
 801d6fa:	3204      	adds	r2, #4
 801d6fc:	9202      	str	r2, [sp, #8]
 801d6fe:	9a00      	ldr	r2, [sp, #0]
 801d700:	2a00      	cmp	r2, #0
 801d702:	dc03      	bgt.n	801d70c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d704:	f1bb 0f00 	cmp.w	fp, #0
 801d708:	f340 80a0 	ble.w	801d84c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d70c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d70e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d712:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d716:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d718:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d71c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d720:	2b00      	cmp	r3, #0
 801d722:	dd0c      	ble.n	801d73e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d724:	1406      	asrs	r6, r0, #16
 801d726:	d405      	bmi.n	801d734 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d728:	454e      	cmp	r6, r9
 801d72a:	da03      	bge.n	801d734 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d72c:	1416      	asrs	r6, r2, #16
 801d72e:	d401      	bmi.n	801d734 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d730:	4546      	cmp	r6, r8
 801d732:	db05      	blt.n	801d740 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d734:	4470      	add	r0, lr
 801d736:	4462      	add	r2, ip
 801d738:	3b01      	subs	r3, #1
 801d73a:	3402      	adds	r4, #2
 801d73c:	e7f0      	b.n	801d720 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d73e:	d00f      	beq.n	801d760 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d740:	1e5e      	subs	r6, r3, #1
 801d742:	fb0e 0706 	mla	r7, lr, r6, r0
 801d746:	143f      	asrs	r7, r7, #16
 801d748:	d541      	bpl.n	801d7ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d74a:	4698      	mov	r8, r3
 801d74c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d750:	9603      	str	r6, [sp, #12]
 801d752:	f1b8 0f00 	cmp.w	r8, #0
 801d756:	dc59      	bgt.n	801d80c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d758:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d75c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d760:	9b00      	ldr	r3, [sp, #0]
 801d762:	2b00      	cmp	r3, #0
 801d764:	dd72      	ble.n	801d84c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d766:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d76a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d76e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d772:	eeb0 6a62 	vmov.f32	s12, s5
 801d776:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d77a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d77e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d782:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d786:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d78a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d78e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d792:	eeb0 6a43 	vmov.f32	s12, s6
 801d796:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d79a:	ee12 2a90 	vmov	r2, s5
 801d79e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7a8:	fb92 fef3 	sdiv	lr, r2, r3
 801d7ac:	ee13 2a10 	vmov	r2, s6
 801d7b0:	fb92 fcf3 	sdiv	ip, r2, r3
 801d7b4:	9b00      	ldr	r3, [sp, #0]
 801d7b6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d7ba:	3b01      	subs	r3, #1
 801d7bc:	9300      	str	r3, [sp, #0]
 801d7be:	eeb0 3a67 	vmov.f32	s6, s15
 801d7c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7c4:	eef0 2a47 	vmov.f32	s5, s14
 801d7c8:	bf08      	it	eq
 801d7ca:	465b      	moveq	r3, fp
 801d7cc:	e797      	b.n	801d6fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d7ce:	454f      	cmp	r7, r9
 801d7d0:	dabb      	bge.n	801d74a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d7d2:	fb0c 2606 	mla	r6, ip, r6, r2
 801d7d6:	1436      	asrs	r6, r6, #16
 801d7d8:	d4b7      	bmi.n	801d74a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d7da:	4546      	cmp	r6, r8
 801d7dc:	dab5      	bge.n	801d74a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d7de:	461e      	mov	r6, r3
 801d7e0:	46a0      	mov	r8, r4
 801d7e2:	2e00      	cmp	r6, #0
 801d7e4:	ddb8      	ble.n	801d758 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d7e6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d7ea:	9901      	ldr	r1, [sp, #4]
 801d7ec:	1417      	asrs	r7, r2, #16
 801d7ee:	fb0a 1707 	mla	r7, sl, r7, r1
 801d7f2:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d7f6:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d7fa:	9902      	ldr	r1, [sp, #8]
 801d7fc:	4470      	add	r0, lr
 801d7fe:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d802:	4462      	add	r2, ip
 801d804:	f828 7b02 	strh.w	r7, [r8], #2
 801d808:	3e01      	subs	r6, #1
 801d80a:	e7ea      	b.n	801d7e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d80c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d810:	d417      	bmi.n	801d842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d812:	68ae      	ldr	r6, [r5, #8]
 801d814:	454e      	cmp	r6, r9
 801d816:	dd14      	ble.n	801d842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d818:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d81c:	d411      	bmi.n	801d842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d81e:	68ef      	ldr	r7, [r5, #12]
 801d820:	4557      	cmp	r7, sl
 801d822:	dd0e      	ble.n	801d842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d824:	f06f 0101 	mvn.w	r1, #1
 801d828:	9f01      	ldr	r7, [sp, #4]
 801d82a:	b236      	sxth	r6, r6
 801d82c:	fb0a 7606 	mla	r6, sl, r6, r7
 801d830:	9f02      	ldr	r7, [sp, #8]
 801d832:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d836:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d83a:	fb01 f608 	mul.w	r6, r1, r8
 801d83e:	9903      	ldr	r1, [sp, #12]
 801d840:	538f      	strh	r7, [r1, r6]
 801d842:	4470      	add	r0, lr
 801d844:	4462      	add	r2, ip
 801d846:	f108 38ff 	add.w	r8, r8, #4294967295
 801d84a:	e782      	b.n	801d752 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d84c:	b005      	add	sp, #20
 801d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d856:	b087      	sub	sp, #28
 801d858:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d85a:	9102      	str	r1, [sp, #8]
 801d85c:	9205      	str	r2, [sp, #20]
 801d85e:	6861      	ldr	r1, [r4, #4]
 801d860:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d864:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d868:	9203      	str	r2, [sp, #12]
 801d86a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801d86e:	fb01 2000 	mla	r0, r1, r0, r2
 801d872:	6822      	ldr	r2, [r4, #0]
 801d874:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d878:	9200      	str	r2, [sp, #0]
 801d87a:	f8dc 2000 	ldr.w	r2, [ip]
 801d87e:	9204      	str	r2, [sp, #16]
 801d880:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d884:	3204      	adds	r2, #4
 801d886:	9201      	str	r2, [sp, #4]
 801d888:	9a03      	ldr	r2, [sp, #12]
 801d88a:	43d5      	mvns	r5, r2
 801d88c:	b2ed      	uxtb	r5, r5
 801d88e:	9a02      	ldr	r2, [sp, #8]
 801d890:	2a00      	cmp	r2, #0
 801d892:	dc03      	bgt.n	801d89c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d894:	9a05      	ldr	r2, [sp, #20]
 801d896:	2a00      	cmp	r2, #0
 801d898:	f340 812c 	ble.w	801daf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d89c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d89e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d8a2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d8a6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d8a8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d8ac:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	dd10      	ble.n	801d8d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d8b4:	140c      	asrs	r4, r1, #16
 801d8b6:	d405      	bmi.n	801d8c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d8b8:	4574      	cmp	r4, lr
 801d8ba:	da03      	bge.n	801d8c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d8bc:	1414      	asrs	r4, r2, #16
 801d8be:	d401      	bmi.n	801d8c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d8c0:	42bc      	cmp	r4, r7
 801d8c2:	db09      	blt.n	801d8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d8c4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d8c6:	9800      	ldr	r0, [sp, #0]
 801d8c8:	4421      	add	r1, r4
 801d8ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d8cc:	3002      	adds	r0, #2
 801d8ce:	4422      	add	r2, r4
 801d8d0:	3b01      	subs	r3, #1
 801d8d2:	9000      	str	r0, [sp, #0]
 801d8d4:	e7ec      	b.n	801d8b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d8d6:	d071      	beq.n	801d9bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d8d8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d8da:	1e5c      	subs	r4, r3, #1
 801d8dc:	fb06 1604 	mla	r6, r6, r4, r1
 801d8e0:	1436      	asrs	r6, r6, #16
 801d8e2:	d45d      	bmi.n	801d9a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d8e4:	4576      	cmp	r6, lr
 801d8e6:	da5b      	bge.n	801d9a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d8e8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d8ea:	fb06 2404 	mla	r4, r6, r4, r2
 801d8ee:	1424      	asrs	r4, r4, #16
 801d8f0:	d456      	bmi.n	801d9a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d8f2:	42bc      	cmp	r4, r7
 801d8f4:	da54      	bge.n	801d9a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d8f6:	4698      	mov	r8, r3
 801d8f8:	f8dd 9000 	ldr.w	r9, [sp]
 801d8fc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d900:	f1b8 0f00 	cmp.w	r8, #0
 801d904:	dd54      	ble.n	801d9b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d906:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d90a:	9804      	ldr	r0, [sp, #16]
 801d90c:	1414      	asrs	r4, r2, #16
 801d90e:	fb07 0404 	mla	r4, r7, r4, r0
 801d912:	140e      	asrs	r6, r1, #16
 801d914:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d918:	9801      	ldr	r0, [sp, #4]
 801d91a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d91e:	eb00 0b0e 	add.w	fp, r0, lr
 801d922:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d926:	f8b9 4000 	ldrh.w	r4, [r9]
 801d92a:	fb16 f60a 	smulbb	r6, r6, sl
 801d92e:	1227      	asrs	r7, r4, #8
 801d930:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d934:	fb07 6705 	mla	r7, r7, r5, r6
 801d938:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d93c:	10e6      	asrs	r6, r4, #3
 801d93e:	00e4      	lsls	r4, r4, #3
 801d940:	b2e4      	uxtb	r4, r4
 801d942:	fb1b fb0a 	smulbb	fp, fp, sl
 801d946:	fb14 f405 	smulbb	r4, r4, r5
 801d94a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d94e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d952:	fb06 b605 	mla	r6, r6, r5, fp
 801d956:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d95a:	b2bf      	uxth	r7, r7
 801d95c:	b2b6      	uxth	r6, r6
 801d95e:	fa1f fe8e 	uxth.w	lr, lr
 801d962:	1c7c      	adds	r4, r7, #1
 801d964:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d968:	f106 0b01 	add.w	fp, r6, #1
 801d96c:	f10e 0401 	add.w	r4, lr, #1
 801d970:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d972:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d976:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d97a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d97e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d982:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d986:	4327      	orrs	r7, r4
 801d988:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801d98c:	4401      	add	r1, r0
 801d98e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d990:	ea47 070b 	orr.w	r7, r7, fp
 801d994:	f829 7b02 	strh.w	r7, [r9], #2
 801d998:	4402      	add	r2, r0
 801d99a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d99e:	e7af      	b.n	801d900 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d9a0:	f04f 0e00 	mov.w	lr, #0
 801d9a4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d9a8:	eb03 040e 	add.w	r4, r3, lr
 801d9ac:	2c00      	cmp	r4, #0
 801d9ae:	dc43      	bgt.n	801da38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d9b0:	9a00      	ldr	r2, [sp, #0]
 801d9b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d9b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d9ba:	9300      	str	r3, [sp, #0]
 801d9bc:	9b02      	ldr	r3, [sp, #8]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	f340 8098 	ble.w	801daf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d9c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d9c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d9cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d9d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d9d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d9d8:	eef0 6a62 	vmov.f32	s13, s5
 801d9dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d9e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d9e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d9e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d9ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d9f0:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801d9f4:	eef0 6a43 	vmov.f32	s13, s6
 801d9f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d9fc:	ee12 2a90 	vmov	r2, s5
 801da00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801da0e:	ee13 2a10 	vmov	r2, s6
 801da12:	9313      	str	r3, [sp, #76]	@ 0x4c
 801da14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da16:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801da1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801da1e:	9314      	str	r3, [sp, #80]	@ 0x50
 801da20:	9b02      	ldr	r3, [sp, #8]
 801da22:	9a05      	ldr	r2, [sp, #20]
 801da24:	3b01      	subs	r3, #1
 801da26:	9302      	str	r3, [sp, #8]
 801da28:	eeb0 3a67 	vmov.f32	s6, s15
 801da2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da2e:	eef0 2a47 	vmov.f32	s5, s14
 801da32:	bf08      	it	eq
 801da34:	4613      	moveq	r3, r2
 801da36:	e72a      	b.n	801d88e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801da38:	140f      	asrs	r7, r1, #16
 801da3a:	d454      	bmi.n	801dae6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801da3c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801da40:	42be      	cmp	r6, r7
 801da42:	dd50      	ble.n	801dae6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801da44:	ea5f 4822 	movs.w	r8, r2, asr #16
 801da48:	d44d      	bmi.n	801dae6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801da4a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801da4e:	4544      	cmp	r4, r8
 801da50:	dd49      	ble.n	801dae6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801da52:	f06f 0001 	mvn.w	r0, #1
 801da56:	9c04      	ldr	r4, [sp, #16]
 801da58:	b236      	sxth	r6, r6
 801da5a:	fb08 4606 	mla	r6, r8, r6, r4
 801da5e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801da62:	9c01      	ldr	r4, [sp, #4]
 801da64:	fb00 fa0e 	mul.w	sl, r0, lr
 801da68:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801da6c:	eb04 0b08 	add.w	fp, r4, r8
 801da70:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801da74:	9800      	ldr	r0, [sp, #0]
 801da76:	fb16 f609 	smulbb	r6, r6, r9
 801da7a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801da7e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801da82:	1227      	asrs	r7, r4, #8
 801da84:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801da88:	fb07 6705 	mla	r7, r7, r5, r6
 801da8c:	10e6      	asrs	r6, r4, #3
 801da8e:	00e4      	lsls	r4, r4, #3
 801da90:	b2e4      	uxtb	r4, r4
 801da92:	fb1b fb09 	smulbb	fp, fp, r9
 801da96:	9801      	ldr	r0, [sp, #4]
 801da98:	fb14 f405 	smulbb	r4, r4, r5
 801da9c:	f810 8008 	ldrb.w	r8, [r0, r8]
 801daa0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801daa4:	fb06 b605 	mla	r6, r6, r5, fp
 801daa8:	fb08 4809 	mla	r8, r8, r9, r4
 801daac:	b2bf      	uxth	r7, r7
 801daae:	b2b6      	uxth	r6, r6
 801dab0:	fa1f f888 	uxth.w	r8, r8
 801dab4:	1c7c      	adds	r4, r7, #1
 801dab6:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801daba:	f106 0b01 	add.w	fp, r6, #1
 801dabe:	f108 0401 	add.w	r4, r8, #1
 801dac2:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801dac6:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801daca:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801dace:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801dad2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801dad6:	4327      	orrs	r7, r4
 801dad8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801dadc:	9800      	ldr	r0, [sp, #0]
 801dade:	ea47 070b 	orr.w	r7, r7, fp
 801dae2:	f820 700a 	strh.w	r7, [r0, sl]
 801dae6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801dae8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801daec:	4401      	add	r1, r0
 801daee:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801daf0:	4402      	add	r2, r0
 801daf2:	e759      	b.n	801d9a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801daf4:	b007      	add	sp, #28
 801daf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801dafc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dafc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db04:	b085      	sub	sp, #20
 801db06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801db08:	9203      	str	r2, [sp, #12]
 801db0a:	6870      	ldr	r0, [r6, #4]
 801db0c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801db10:	fb00 2404 	mla	r4, r0, r4, r2
 801db14:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801db16:	6832      	ldr	r2, [r6, #0]
 801db18:	686f      	ldr	r7, [r5, #4]
 801db1a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801db1e:	682a      	ldr	r2, [r5, #0]
 801db20:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801db24:	9101      	str	r1, [sp, #4]
 801db26:	9202      	str	r2, [sp, #8]
 801db28:	3704      	adds	r7, #4
 801db2a:	9a01      	ldr	r2, [sp, #4]
 801db2c:	2a00      	cmp	r2, #0
 801db2e:	dc03      	bgt.n	801db38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801db30:	9a03      	ldr	r2, [sp, #12]
 801db32:	2a00      	cmp	r2, #0
 801db34:	f340 80cc 	ble.w	801dcd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801db38:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801db3a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801db3e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801db42:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801db44:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801db48:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	dd0d      	ble.n	801db6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801db50:	1406      	asrs	r6, r0, #16
 801db52:	d405      	bmi.n	801db60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801db54:	454e      	cmp	r6, r9
 801db56:	da03      	bge.n	801db60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801db58:	1416      	asrs	r6, r2, #16
 801db5a:	d401      	bmi.n	801db60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801db5c:	4546      	cmp	r6, r8
 801db5e:	db06      	blt.n	801db6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801db60:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801db62:	4460      	add	r0, ip
 801db64:	4432      	add	r2, r6
 801db66:	3b01      	subs	r3, #1
 801db68:	3402      	adds	r4, #2
 801db6a:	e7ef      	b.n	801db4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801db6c:	d00f      	beq.n	801db8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801db6e:	1e5e      	subs	r6, r3, #1
 801db70:	fb0c 0e06 	mla	lr, ip, r6, r0
 801db74:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801db78:	d543      	bpl.n	801dc02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801db7a:	4698      	mov	r8, r3
 801db7c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801db80:	f1b8 0f00 	cmp.w	r8, #0
 801db84:	dc71      	bgt.n	801dc6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801db86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801db8e:	9b01      	ldr	r3, [sp, #4]
 801db90:	2b00      	cmp	r3, #0
 801db92:	f340 809d 	ble.w	801dcd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801db96:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dba2:	eeb0 6a62 	vmov.f32	s12, s5
 801dba6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbaa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dbae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dbba:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801dbbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dbc2:	eeb0 6a43 	vmov.f32	s12, s6
 801dbc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dbca:	ee12 2a90 	vmov	r2, s5
 801dbce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dbd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbd8:	fb92 fcf3 	sdiv	ip, r2, r3
 801dbdc:	ee13 2a10 	vmov	r2, s6
 801dbe0:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbe4:	9312      	str	r3, [sp, #72]	@ 0x48
 801dbe6:	9b01      	ldr	r3, [sp, #4]
 801dbe8:	9a03      	ldr	r2, [sp, #12]
 801dbea:	3b01      	subs	r3, #1
 801dbec:	9301      	str	r3, [sp, #4]
 801dbee:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dbf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbf4:	eeb0 3a67 	vmov.f32	s6, s15
 801dbf8:	bf08      	it	eq
 801dbfa:	4613      	moveq	r3, r2
 801dbfc:	eef0 2a47 	vmov.f32	s5, s14
 801dc00:	e793      	b.n	801db2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801dc02:	45ce      	cmp	lr, r9
 801dc04:	dab9      	bge.n	801db7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dc06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801dc08:	fb01 2606 	mla	r6, r1, r6, r2
 801dc0c:	1436      	asrs	r6, r6, #16
 801dc0e:	d4b4      	bmi.n	801db7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dc10:	4546      	cmp	r6, r8
 801dc12:	dab2      	bge.n	801db7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dc14:	4698      	mov	r8, r3
 801dc16:	46a2      	mov	sl, r4
 801dc18:	f1b8 0f00 	cmp.w	r8, #0
 801dc1c:	ddb3      	ble.n	801db86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dc1e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801dc22:	9902      	ldr	r1, [sp, #8]
 801dc24:	1416      	asrs	r6, r2, #16
 801dc26:	fb09 1606 	mla	r6, r9, r6, r1
 801dc2a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801dc2e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801dc32:	4929      	ldr	r1, [pc, #164]	@ (801dcd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801dc34:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801dc38:	eb07 0b0e 	add.w	fp, r7, lr
 801dc3c:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801dc40:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801dc44:	00f6      	lsls	r6, r6, #3
 801dc46:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801dc4a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801dc4e:	ea49 0606 	orr.w	r6, r9, r6
 801dc52:	f817 900e 	ldrb.w	r9, [r7, lr]
 801dc56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801dc58:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801dc5c:	f82a 6b02 	strh.w	r6, [sl], #2
 801dc60:	4460      	add	r0, ip
 801dc62:	440a      	add	r2, r1
 801dc64:	f108 38ff 	add.w	r8, r8, #4294967295
 801dc68:	e7d6      	b.n	801dc18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801dc6a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dc6e:	d429      	bmi.n	801dcc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dc70:	68ae      	ldr	r6, [r5, #8]
 801dc72:	454e      	cmp	r6, r9
 801dc74:	dd26      	ble.n	801dcc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dc76:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801dc7a:	d423      	bmi.n	801dcc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dc7c:	68e9      	ldr	r1, [r5, #12]
 801dc7e:	4559      	cmp	r1, fp
 801dc80:	dd20      	ble.n	801dcc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801dc82:	9902      	ldr	r1, [sp, #8]
 801dc84:	fa0f fe86 	sxth.w	lr, r6
 801dc88:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801dc8c:	f06f 0101 	mvn.w	r1, #1
 801dc90:	f81e e009 	ldrb.w	lr, [lr, r9]
 801dc94:	fb01 f908 	mul.w	r9, r1, r8
 801dc98:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801dc9c:	eb07 060e 	add.w	r6, r7, lr
 801dca0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801dca4:	7876      	ldrb	r6, [r6, #1]
 801dca6:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801dcaa:	00f6      	lsls	r6, r6, #3
 801dcac:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801dcb0:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801dcb4:	ea4b 0606 	orr.w	r6, fp, r6
 801dcb8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801dcbc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801dcc0:	f82a 6009 	strh.w	r6, [sl, r9]
 801dcc4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801dcc6:	4460      	add	r0, ip
 801dcc8:	440a      	add	r2, r1
 801dcca:	f108 38ff 	add.w	r8, r8, #4294967295
 801dcce:	e757      	b.n	801db80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dcd0:	b005      	add	sp, #20
 801dcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcd6:	bf00      	nop
 801dcd8:	fffff800 	.word	0xfffff800

0801dcdc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dce4:	b087      	sub	sp, #28
 801dce6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dce8:	468b      	mov	fp, r1
 801dcea:	9204      	str	r2, [sp, #16]
 801dcec:	6841      	ldr	r1, [r0, #4]
 801dcee:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801dcf2:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801dcf6:	9205      	str	r2, [sp, #20]
 801dcf8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801dcfc:	fb01 2404 	mla	r4, r1, r4, r2
 801dd00:	6802      	ldr	r2, [r0, #0]
 801dd02:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dd06:	f8dc 2000 	ldr.w	r2, [ip]
 801dd0a:	9201      	str	r2, [sp, #4]
 801dd0c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801dd10:	3204      	adds	r2, #4
 801dd12:	9202      	str	r2, [sp, #8]
 801dd14:	f1bb 0f00 	cmp.w	fp, #0
 801dd18:	dc03      	bgt.n	801dd22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801dd1a:	9a04      	ldr	r2, [sp, #16]
 801dd1c:	2a00      	cmp	r2, #0
 801dd1e:	f340 8138 	ble.w	801df92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801dd22:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801dd24:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801dd28:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801dd2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dd2e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801dd32:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	dd0e      	ble.n	801dd58 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dd3a:	1402      	asrs	r2, r0, #16
 801dd3c:	d405      	bmi.n	801dd4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dd3e:	42ba      	cmp	r2, r7
 801dd40:	da03      	bge.n	801dd4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dd42:	140a      	asrs	r2, r1, #16
 801dd44:	d401      	bmi.n	801dd4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dd46:	42b2      	cmp	r2, r6
 801dd48:	db07      	blt.n	801dd5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dd4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dd4c:	3b01      	subs	r3, #1
 801dd4e:	4410      	add	r0, r2
 801dd50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dd52:	3402      	adds	r4, #2
 801dd54:	4411      	add	r1, r2
 801dd56:	e7ee      	b.n	801dd36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801dd58:	d019      	beq.n	801dd8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801dd5a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801dd5c:	1e5a      	subs	r2, r3, #1
 801dd5e:	fb05 0502 	mla	r5, r5, r2, r0
 801dd62:	142d      	asrs	r5, r5, #16
 801dd64:	d409      	bmi.n	801dd7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dd66:	42bd      	cmp	r5, r7
 801dd68:	da07      	bge.n	801dd7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dd6a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801dd6c:	fb05 1202 	mla	r2, r5, r2, r1
 801dd70:	1412      	asrs	r2, r2, #16
 801dd72:	d402      	bmi.n	801dd7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dd74:	42b2      	cmp	r2, r6
 801dd76:	f2c0 80ac 	blt.w	801ded2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801dd7a:	f04f 0e00 	mov.w	lr, #0
 801dd7e:	eb03 020e 	add.w	r2, r3, lr
 801dd82:	2a00      	cmp	r2, #0
 801dd84:	dc3e      	bgt.n	801de04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801dd86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd8e:	f1bb 0f00 	cmp.w	fp, #0
 801dd92:	f340 80fe 	ble.w	801df92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801dd96:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dda2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dda6:	eeb0 6a62 	vmov.f32	s12, s5
 801ddaa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ddae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ddb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ddb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ddbe:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ddc2:	eeb0 6a43 	vmov.f32	s12, s6
 801ddc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ddca:	ee12 2a90 	vmov	r2, s5
 801ddce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ddd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddd8:	fb92 f3f3 	sdiv	r3, r2, r3
 801dddc:	ee13 2a10 	vmov	r2, s6
 801dde0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dde2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dde4:	f1bb 0b01 	subs.w	fp, fp, #1
 801dde8:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddec:	9a04      	ldr	r2, [sp, #16]
 801ddee:	9314      	str	r3, [sp, #80]	@ 0x50
 801ddf0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ddf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddf6:	eeb0 3a67 	vmov.f32	s6, s15
 801ddfa:	bf08      	it	eq
 801ddfc:	4613      	moveq	r3, r2
 801ddfe:	eef0 2a47 	vmov.f32	s5, s14
 801de02:	e787      	b.n	801dd14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801de04:	1406      	asrs	r6, r0, #16
 801de06:	d45d      	bmi.n	801dec4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801de08:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801de0c:	42b5      	cmp	r5, r6
 801de0e:	dd59      	ble.n	801dec4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801de10:	140f      	asrs	r7, r1, #16
 801de12:	d457      	bmi.n	801dec4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801de14:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801de18:	42ba      	cmp	r2, r7
 801de1a:	dd53      	ble.n	801dec4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801de1c:	9a01      	ldr	r2, [sp, #4]
 801de1e:	b22d      	sxth	r5, r5
 801de20:	fb07 2505 	mla	r5, r7, r5, r2
 801de24:	5daa      	ldrb	r2, [r5, r6]
 801de26:	9d02      	ldr	r5, [sp, #8]
 801de28:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801de2c:	0e2e      	lsrs	r6, r5, #24
 801de2e:	d049      	beq.n	801dec4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801de30:	f06f 0201 	mvn.w	r2, #1
 801de34:	fb02 f20e 	mul.w	r2, r2, lr
 801de38:	f834 8002 	ldrh.w	r8, [r4, r2]
 801de3c:	9203      	str	r2, [sp, #12]
 801de3e:	9a05      	ldr	r2, [sp, #20]
 801de40:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801de44:	4356      	muls	r6, r2
 801de46:	1c72      	adds	r2, r6, #1
 801de48:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801de4c:	1212      	asrs	r2, r2, #8
 801de4e:	fa1f f982 	uxth.w	r9, r2
 801de52:	43d2      	mvns	r2, r2
 801de54:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801de58:	fb16 f609 	smulbb	r6, r6, r9
 801de5c:	b2ed      	uxtb	r5, r5
 801de5e:	ea4f 2728 	mov.w	r7, r8, asr #8
 801de62:	fb15 f509 	smulbb	r5, r5, r9
 801de66:	b2d2      	uxtb	r2, r2
 801de68:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801de6c:	fb07 6702 	mla	r7, r7, r2, r6
 801de70:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801de74:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801de78:	fb1a fa09 	smulbb	sl, sl, r9
 801de7c:	fa5f f888 	uxtb.w	r8, r8
 801de80:	fb08 5502 	mla	r5, r8, r2, r5
 801de84:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801de88:	fb06 a602 	mla	r6, r6, r2, sl
 801de8c:	b2bf      	uxth	r7, r7
 801de8e:	b2ad      	uxth	r5, r5
 801de90:	1c7a      	adds	r2, r7, #1
 801de92:	f105 0a01 	add.w	sl, r5, #1
 801de96:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801de9a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801de9e:	b2b6      	uxth	r6, r6
 801dea0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dea4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801dea8:	ea4a 0707 	orr.w	r7, sl, r7
 801deac:	f106 0a01 	add.w	sl, r6, #1
 801deb0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801deb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801deb8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801debc:	9a03      	ldr	r2, [sp, #12]
 801debe:	ea47 070a 	orr.w	r7, r7, sl
 801dec2:	52a7      	strh	r7, [r4, r2]
 801dec4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dec6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801deca:	4410      	add	r0, r2
 801decc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dece:	4411      	add	r1, r2
 801ded0:	e755      	b.n	801dd7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ded2:	f04f 0800 	mov.w	r8, #0
 801ded6:	eba3 0208 	sub.w	r2, r3, r8
 801deda:	2a00      	cmp	r2, #0
 801dedc:	f77f af53 	ble.w	801dd86 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801dee0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801dee4:	9f01      	ldr	r7, [sp, #4]
 801dee6:	140a      	asrs	r2, r1, #16
 801dee8:	fb06 7202 	mla	r2, r6, r2, r7
 801deec:	1405      	asrs	r5, r0, #16
 801deee:	5d52      	ldrb	r2, [r2, r5]
 801def0:	9d02      	ldr	r5, [sp, #8]
 801def2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801def6:	0e2e      	lsrs	r6, r5, #24
 801def8:	d044      	beq.n	801df84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801defa:	9a05      	ldr	r2, [sp, #20]
 801defc:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801df00:	4356      	muls	r6, r2
 801df02:	1c72      	adds	r2, r6, #1
 801df04:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801df08:	1212      	asrs	r2, r2, #8
 801df0a:	fa1f f982 	uxth.w	r9, r2
 801df0e:	43d2      	mvns	r2, r2
 801df10:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801df14:	fb16 f609 	smulbb	r6, r6, r9
 801df18:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801df1c:	b2ed      	uxtb	r5, r5
 801df1e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801df22:	fb15 f509 	smulbb	r5, r5, r9
 801df26:	b2d2      	uxtb	r2, r2
 801df28:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801df2c:	fb07 6702 	mla	r7, r7, r2, r6
 801df30:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801df34:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801df38:	fb1a fa09 	smulbb	sl, sl, r9
 801df3c:	fa5f fe8e 	uxtb.w	lr, lr
 801df40:	fb0e 5502 	mla	r5, lr, r2, r5
 801df44:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801df48:	fb06 a602 	mla	r6, r6, r2, sl
 801df4c:	b2bf      	uxth	r7, r7
 801df4e:	b2ad      	uxth	r5, r5
 801df50:	1c7a      	adds	r2, r7, #1
 801df52:	f105 0a01 	add.w	sl, r5, #1
 801df56:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801df5a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801df5e:	b2b6      	uxth	r6, r6
 801df60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801df64:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801df68:	ea4a 0707 	orr.w	r7, sl, r7
 801df6c:	f106 0a01 	add.w	sl, r6, #1
 801df70:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801df74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801df78:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801df7c:	ea47 070a 	orr.w	r7, r7, sl
 801df80:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801df84:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801df86:	f108 0801 	add.w	r8, r8, #1
 801df8a:	4410      	add	r0, r2
 801df8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801df8e:	4411      	add	r1, r2
 801df90:	e7a1      	b.n	801ded6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801df92:	b007      	add	sp, #28
 801df94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801df98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfa0:	b085      	sub	sp, #20
 801dfa2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801dfa4:	468b      	mov	fp, r1
 801dfa6:	6841      	ldr	r1, [r0, #4]
 801dfa8:	9203      	str	r2, [sp, #12]
 801dfaa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801dfae:	fb01 2404 	mla	r4, r1, r4, r2
 801dfb2:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801dfb6:	6802      	ldr	r2, [r0, #0]
 801dfb8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dfbc:	f8de 2000 	ldr.w	r2, [lr]
 801dfc0:	9200      	str	r2, [sp, #0]
 801dfc2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dfc6:	3204      	adds	r2, #4
 801dfc8:	9201      	str	r2, [sp, #4]
 801dfca:	f1bb 0f00 	cmp.w	fp, #0
 801dfce:	dc03      	bgt.n	801dfd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801dfd0:	9a03      	ldr	r2, [sp, #12]
 801dfd2:	2a00      	cmp	r2, #0
 801dfd4:	f340 8153 	ble.w	801e27e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801dfd8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dfda:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dfde:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801dfe2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dfe4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801dfe8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	dd0e      	ble.n	801e00e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dff0:	1408      	asrs	r0, r1, #16
 801dff2:	d405      	bmi.n	801e000 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dff4:	42b8      	cmp	r0, r7
 801dff6:	da03      	bge.n	801e000 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dff8:	1410      	asrs	r0, r2, #16
 801dffa:	d401      	bmi.n	801e000 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dffc:	42b0      	cmp	r0, r6
 801dffe:	db07      	blt.n	801e010 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e000:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e002:	3b01      	subs	r3, #1
 801e004:	4401      	add	r1, r0
 801e006:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e008:	3402      	adds	r4, #2
 801e00a:	4402      	add	r2, r0
 801e00c:	e7ee      	b.n	801dfec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e00e:	d017      	beq.n	801e040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e010:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e012:	1e58      	subs	r0, r3, #1
 801e014:	fb05 1500 	mla	r5, r5, r0, r1
 801e018:	142d      	asrs	r5, r5, #16
 801e01a:	d409      	bmi.n	801e030 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e01c:	42bd      	cmp	r5, r7
 801e01e:	da07      	bge.n	801e030 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e020:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e022:	fb05 2000 	mla	r0, r5, r0, r2
 801e026:	1400      	asrs	r0, r0, #16
 801e028:	d402      	bmi.n	801e030 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e02a:	42b0      	cmp	r0, r6
 801e02c:	f2c0 80bc 	blt.w	801e1a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e030:	2600      	movs	r6, #0
 801e032:	1998      	adds	r0, r3, r6
 801e034:	2800      	cmp	r0, #0
 801e036:	dc3e      	bgt.n	801e0b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e03c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e040:	f1bb 0f00 	cmp.w	fp, #0
 801e044:	f340 811b 	ble.w	801e27e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801e048:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e04c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e050:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e054:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e058:	eeb0 6a62 	vmov.f32	s12, s5
 801e05c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e060:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e064:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e068:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e06c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e070:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e074:	eeb0 6a43 	vmov.f32	s12, s6
 801e078:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e07c:	ee12 2a90 	vmov	r2, s5
 801e080:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e086:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e08a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e08e:	ee13 2a10 	vmov	r2, s6
 801e092:	9311      	str	r3, [sp, #68]	@ 0x44
 801e094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e096:	f1bb 0b01 	subs.w	fp, fp, #1
 801e09a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e09e:	9a03      	ldr	r2, [sp, #12]
 801e0a0:	9312      	str	r3, [sp, #72]	@ 0x48
 801e0a2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e0a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e0a8:	eeb0 3a67 	vmov.f32	s6, s15
 801e0ac:	bf08      	it	eq
 801e0ae:	4613      	moveq	r3, r2
 801e0b0:	eef0 2a47 	vmov.f32	s5, s14
 801e0b4:	e789      	b.n	801dfca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e0b6:	140f      	asrs	r7, r1, #16
 801e0b8:	d426      	bmi.n	801e108 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e0ba:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e0be:	42bd      	cmp	r5, r7
 801e0c0:	dd22      	ble.n	801e108 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e0c2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e0c6:	d41f      	bmi.n	801e108 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e0c8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e0cc:	4560      	cmp	r0, ip
 801e0ce:	dd1b      	ble.n	801e108 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e0d0:	9800      	ldr	r0, [sp, #0]
 801e0d2:	b22d      	sxth	r5, r5
 801e0d4:	fb0c 0505 	mla	r5, ip, r5, r0
 801e0d8:	5de8      	ldrb	r0, [r5, r7]
 801e0da:	9d01      	ldr	r5, [sp, #4]
 801e0dc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801e0e0:	0e07      	lsrs	r7, r0, #24
 801e0e2:	2fff      	cmp	r7, #255	@ 0xff
 801e0e4:	d116      	bne.n	801e114 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e0e6:	f06f 0501 	mvn.w	r5, #1
 801e0ea:	fb05 f706 	mul.w	r7, r5, r6
 801e0ee:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801e0f2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801e0f6:	0945      	lsrs	r5, r0, #5
 801e0f8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e0fc:	ea4c 0505 	orr.w	r5, ip, r5
 801e100:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e104:	4305      	orrs	r5, r0
 801e106:	53e5      	strh	r5, [r4, r7]
 801e108:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e10a:	3e01      	subs	r6, #1
 801e10c:	4401      	add	r1, r0
 801e10e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e110:	4402      	add	r2, r0
 801e112:	e78e      	b.n	801e032 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e114:	b2fd      	uxtb	r5, r7
 801e116:	2f00      	cmp	r7, #0
 801e118:	d0f6      	beq.n	801e108 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e11a:	f06f 0701 	mvn.w	r7, #1
 801e11e:	fa1f f985 	uxth.w	r9, r5
 801e122:	43ed      	mvns	r5, r5
 801e124:	4377      	muls	r7, r6
 801e126:	f834 8007 	ldrh.w	r8, [r4, r7]
 801e12a:	9702      	str	r7, [sp, #8]
 801e12c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801e130:	fb17 f709 	smulbb	r7, r7, r9
 801e134:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e138:	b2c0      	uxtb	r0, r0
 801e13a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e13e:	fb10 f009 	smulbb	r0, r0, r9
 801e142:	b2ed      	uxtb	r5, r5
 801e144:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e148:	fb0c 7c05 	mla	ip, ip, r5, r7
 801e14c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801e150:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e154:	fb1a fa09 	smulbb	sl, sl, r9
 801e158:	fa5f f888 	uxtb.w	r8, r8
 801e15c:	fb08 0005 	mla	r0, r8, r5, r0
 801e160:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e164:	fb07 a705 	mla	r7, r7, r5, sl
 801e168:	b280      	uxth	r0, r0
 801e16a:	fa1f fc8c 	uxth.w	ip, ip
 801e16e:	f100 0a01 	add.w	sl, r0, #1
 801e172:	f10c 0501 	add.w	r5, ip, #1
 801e176:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801e17a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e17e:	b2bf      	uxth	r7, r7
 801e180:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e184:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e188:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e18c:	f107 0a01 	add.w	sl, r7, #1
 801e190:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e194:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e198:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e19c:	9802      	ldr	r0, [sp, #8]
 801e19e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e1a2:	f824 c000 	strh.w	ip, [r4, r0]
 801e1a6:	e7af      	b.n	801e108 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e1a8:	f04f 0800 	mov.w	r8, #0
 801e1ac:	eba3 0008 	sub.w	r0, r3, r8
 801e1b0:	2800      	cmp	r0, #0
 801e1b2:	f77f af41 	ble.w	801e038 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e1b6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e1ba:	9f00      	ldr	r7, [sp, #0]
 801e1bc:	1410      	asrs	r0, r2, #16
 801e1be:	fb06 7000 	mla	r0, r6, r0, r7
 801e1c2:	140d      	asrs	r5, r1, #16
 801e1c4:	5d40      	ldrb	r0, [r0, r5]
 801e1c6:	9d01      	ldr	r5, [sp, #4]
 801e1c8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801e1cc:	0e2e      	lsrs	r6, r5, #24
 801e1ce:	2eff      	cmp	r6, #255	@ 0xff
 801e1d0:	d112      	bne.n	801e1f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801e1d2:	482c      	ldr	r0, [pc, #176]	@ (801e284 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801e1d4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801e1d8:	0968      	lsrs	r0, r5, #5
 801e1da:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e1de:	4330      	orrs	r0, r6
 801e1e0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e1e4:	4328      	orrs	r0, r5
 801e1e6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801e1ea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e1ec:	f108 0801 	add.w	r8, r8, #1
 801e1f0:	4401      	add	r1, r0
 801e1f2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e1f4:	4402      	add	r2, r0
 801e1f6:	e7d9      	b.n	801e1ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e1f8:	b2f0      	uxtb	r0, r6
 801e1fa:	2e00      	cmp	r6, #0
 801e1fc:	d0f5      	beq.n	801e1ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801e1fe:	fa1f f980 	uxth.w	r9, r0
 801e202:	43c0      	mvns	r0, r0
 801e204:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e208:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801e20c:	fb16 f609 	smulbb	r6, r6, r9
 801e210:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e214:	b2ed      	uxtb	r5, r5
 801e216:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e21a:	fb15 f509 	smulbb	r5, r5, r9
 801e21e:	b2c0      	uxtb	r0, r0
 801e220:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e224:	fb07 6700 	mla	r7, r7, r0, r6
 801e228:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e22c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e230:	fb1a fa09 	smulbb	sl, sl, r9
 801e234:	fa5f fc8c 	uxtb.w	ip, ip
 801e238:	fb0c 5500 	mla	r5, ip, r0, r5
 801e23c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e240:	fb06 a600 	mla	r6, r6, r0, sl
 801e244:	b2bf      	uxth	r7, r7
 801e246:	b2ad      	uxth	r5, r5
 801e248:	1c78      	adds	r0, r7, #1
 801e24a:	f105 0a01 	add.w	sl, r5, #1
 801e24e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801e252:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e256:	b2b6      	uxth	r6, r6
 801e258:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e25c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e260:	ea4a 0707 	orr.w	r7, sl, r7
 801e264:	f106 0a01 	add.w	sl, r6, #1
 801e268:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e26c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e270:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e274:	ea47 070a 	orr.w	r7, r7, sl
 801e278:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801e27c:	e7b5      	b.n	801e1ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801e27e:	b005      	add	sp, #20
 801e280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e284:	fffff800 	.word	0xfffff800

0801e288 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e290:	b087      	sub	sp, #28
 801e292:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e294:	468b      	mov	fp, r1
 801e296:	9204      	str	r2, [sp, #16]
 801e298:	6861      	ldr	r1, [r4, #4]
 801e29a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e29e:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801e2a2:	9205      	str	r2, [sp, #20]
 801e2a4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801e2a8:	fb01 2000 	mla	r0, r1, r0, r2
 801e2ac:	6822      	ldr	r2, [r4, #0]
 801e2ae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e2b2:	f8de 2000 	ldr.w	r2, [lr]
 801e2b6:	9201      	str	r2, [sp, #4]
 801e2b8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e2bc:	9202      	str	r2, [sp, #8]
 801e2be:	f1bb 0f00 	cmp.w	fp, #0
 801e2c2:	dc03      	bgt.n	801e2cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e2c4:	9a04      	ldr	r2, [sp, #16]
 801e2c6:	2a00      	cmp	r2, #0
 801e2c8:	f340 8142 	ble.w	801e550 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e2cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e2ce:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e2d2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e2d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e2d8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801e2dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	dd0e      	ble.n	801e302 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e2e4:	140c      	asrs	r4, r1, #16
 801e2e6:	d405      	bmi.n	801e2f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e2e8:	42bc      	cmp	r4, r7
 801e2ea:	da03      	bge.n	801e2f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e2ec:	1414      	asrs	r4, r2, #16
 801e2ee:	d401      	bmi.n	801e2f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e2f0:	42b4      	cmp	r4, r6
 801e2f2:	db07      	blt.n	801e304 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e2f4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e2f6:	3b01      	subs	r3, #1
 801e2f8:	4421      	add	r1, r4
 801e2fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e2fc:	3002      	adds	r0, #2
 801e2fe:	4422      	add	r2, r4
 801e300:	e7ee      	b.n	801e2e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e302:	d019      	beq.n	801e338 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e304:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e306:	1e5c      	subs	r4, r3, #1
 801e308:	fb05 1504 	mla	r5, r5, r4, r1
 801e30c:	142d      	asrs	r5, r5, #16
 801e30e:	d409      	bmi.n	801e324 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e310:	42bd      	cmp	r5, r7
 801e312:	da07      	bge.n	801e324 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e314:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e316:	fb05 2404 	mla	r4, r5, r4, r2
 801e31a:	1424      	asrs	r4, r4, #16
 801e31c:	d402      	bmi.n	801e324 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801e31e:	42b4      	cmp	r4, r6
 801e320:	f2c0 80b1 	blt.w	801e486 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801e324:	f04f 0800 	mov.w	r8, #0
 801e328:	eb03 0408 	add.w	r4, r3, r8
 801e32c:	2c00      	cmp	r4, #0
 801e32e:	dc3e      	bgt.n	801e3ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e330:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e334:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e338:	f1bb 0f00 	cmp.w	fp, #0
 801e33c:	f340 8108 	ble.w	801e550 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801e340:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e344:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e348:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e34c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e350:	eeb0 6a62 	vmov.f32	s12, s5
 801e354:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e358:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e35c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e360:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e364:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e368:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e36c:	eeb0 6a43 	vmov.f32	s12, s6
 801e370:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e374:	ee12 2a90 	vmov	r2, s5
 801e378:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e37c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e37e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e382:	fb92 f3f3 	sdiv	r3, r2, r3
 801e386:	ee13 2a10 	vmov	r2, s6
 801e38a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e38c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e38e:	f1bb 0b01 	subs.w	fp, fp, #1
 801e392:	fb92 f3f3 	sdiv	r3, r2, r3
 801e396:	9a04      	ldr	r2, [sp, #16]
 801e398:	9314      	str	r3, [sp, #80]	@ 0x50
 801e39a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e39e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3a0:	eeb0 3a67 	vmov.f32	s6, s15
 801e3a4:	bf08      	it	eq
 801e3a6:	4613      	moveq	r3, r2
 801e3a8:	eef0 2a47 	vmov.f32	s5, s14
 801e3ac:	e787      	b.n	801e2be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e3ae:	140e      	asrs	r6, r1, #16
 801e3b0:	d462      	bmi.n	801e478 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e3b2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e3b6:	42b5      	cmp	r5, r6
 801e3b8:	dd5e      	ble.n	801e478 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e3ba:	1417      	asrs	r7, r2, #16
 801e3bc:	d45c      	bmi.n	801e478 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e3be:	f8de 400c 	ldr.w	r4, [lr, #12]
 801e3c2:	42bc      	cmp	r4, r7
 801e3c4:	dd58      	ble.n	801e478 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e3c6:	b22d      	sxth	r5, r5
 801e3c8:	fb07 6505 	mla	r5, r7, r5, r6
 801e3cc:	9c02      	ldr	r4, [sp, #8]
 801e3ce:	5d66      	ldrb	r6, [r4, r5]
 801e3d0:	2e00      	cmp	r6, #0
 801e3d2:	d051      	beq.n	801e478 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e3d4:	9c01      	ldr	r4, [sp, #4]
 801e3d6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801e3da:	f06f 0401 	mvn.w	r4, #1
 801e3de:	fb04 f408 	mul.w	r4, r4, r8
 801e3e2:	5b05      	ldrh	r5, [r0, r4]
 801e3e4:	9403      	str	r4, [sp, #12]
 801e3e6:	9c05      	ldr	r4, [sp, #20]
 801e3e8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e3ec:	4366      	muls	r6, r4
 801e3ee:	1c74      	adds	r4, r6, #1
 801e3f0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e3f4:	1224      	asrs	r4, r4, #8
 801e3f6:	b2a7      	uxth	r7, r4
 801e3f8:	43e4      	mvns	r4, r4
 801e3fa:	122e      	asrs	r6, r5, #8
 801e3fc:	b2e4      	uxtb	r4, r4
 801e3fe:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e402:	fb16 f604 	smulbb	r6, r6, r4
 801e406:	00ed      	lsls	r5, r5, #3
 801e408:	b2ed      	uxtb	r5, r5
 801e40a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801e40e:	fb15 f504 	smulbb	r5, r5, r4
 801e412:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e416:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e41a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e41e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801e422:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e426:	fb1a fa04 	smulbb	sl, sl, r4
 801e42a:	fa5f f989 	uxtb.w	r9, r9
 801e42e:	fb09 5507 	mla	r5, r9, r7, r5
 801e432:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e436:	fb06 a607 	mla	r6, r6, r7, sl
 801e43a:	fa1f fc8c 	uxth.w	ip, ip
 801e43e:	b2ad      	uxth	r5, r5
 801e440:	f10c 0401 	add.w	r4, ip, #1
 801e444:	f105 0a01 	add.w	sl, r5, #1
 801e448:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e44c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e450:	b2b6      	uxth	r6, r6
 801e452:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e456:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e45a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e45e:	f106 0a01 	add.w	sl, r6, #1
 801e462:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e466:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e46a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e46e:	9c03      	ldr	r4, [sp, #12]
 801e470:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e474:	f820 c004 	strh.w	ip, [r0, r4]
 801e478:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e47a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e47e:	4421      	add	r1, r4
 801e480:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e482:	4422      	add	r2, r4
 801e484:	e750      	b.n	801e328 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e486:	f04f 0900 	mov.w	r9, #0
 801e48a:	eba3 0409 	sub.w	r4, r3, r9
 801e48e:	2c00      	cmp	r4, #0
 801e490:	f77f af4e 	ble.w	801e330 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e494:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801e498:	140d      	asrs	r5, r1, #16
 801e49a:	1414      	asrs	r4, r2, #16
 801e49c:	fb06 5404 	mla	r4, r6, r4, r5
 801e4a0:	9d02      	ldr	r5, [sp, #8]
 801e4a2:	5d2e      	ldrb	r6, [r5, r4]
 801e4a4:	2e00      	cmp	r6, #0
 801e4a6:	d04c      	beq.n	801e542 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e4a8:	9d01      	ldr	r5, [sp, #4]
 801e4aa:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801e4ae:	9c05      	ldr	r4, [sp, #20]
 801e4b0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e4b4:	4366      	muls	r6, r4
 801e4b6:	1c74      	adds	r4, r6, #1
 801e4b8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801e4bc:	1224      	asrs	r4, r4, #8
 801e4be:	b2a7      	uxth	r7, r4
 801e4c0:	43e4      	mvns	r4, r4
 801e4c2:	122e      	asrs	r6, r5, #8
 801e4c4:	b2e4      	uxtb	r4, r4
 801e4c6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e4ca:	fb16 f604 	smulbb	r6, r6, r4
 801e4ce:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e4d2:	00ed      	lsls	r5, r5, #3
 801e4d4:	b2ed      	uxtb	r5, r5
 801e4d6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801e4da:	fb15 f504 	smulbb	r5, r5, r4
 801e4de:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e4e2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e4e6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e4ea:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e4ee:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e4f2:	fb1a fa04 	smulbb	sl, sl, r4
 801e4f6:	fa5f f888 	uxtb.w	r8, r8
 801e4fa:	fb08 5507 	mla	r5, r8, r7, r5
 801e4fe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e502:	fb06 a607 	mla	r6, r6, r7, sl
 801e506:	fa1f fc8c 	uxth.w	ip, ip
 801e50a:	b2ad      	uxth	r5, r5
 801e50c:	f10c 0401 	add.w	r4, ip, #1
 801e510:	f105 0a01 	add.w	sl, r5, #1
 801e514:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e518:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e51c:	b2b6      	uxth	r6, r6
 801e51e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e522:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e526:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e52a:	f106 0a01 	add.w	sl, r6, #1
 801e52e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e532:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e536:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e53a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e53e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e542:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e544:	f109 0901 	add.w	r9, r9, #1
 801e548:	4421      	add	r1, r4
 801e54a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e54c:	4422      	add	r2, r4
 801e54e:	e79c      	b.n	801e48a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e550:	b007      	add	sp, #28
 801e552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e556 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e55a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e55e:	b085      	sub	sp, #20
 801e560:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e562:	468b      	mov	fp, r1
 801e564:	6861      	ldr	r1, [r4, #4]
 801e566:	9203      	str	r2, [sp, #12]
 801e568:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801e56c:	fb01 2000 	mla	r0, r1, r0, r2
 801e570:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801e574:	6822      	ldr	r2, [r4, #0]
 801e576:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e57a:	f8d8 2000 	ldr.w	r2, [r8]
 801e57e:	9200      	str	r2, [sp, #0]
 801e580:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e584:	9201      	str	r2, [sp, #4]
 801e586:	f1bb 0f00 	cmp.w	fp, #0
 801e58a:	dc03      	bgt.n	801e594 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e58c:	9a03      	ldr	r2, [sp, #12]
 801e58e:	2a00      	cmp	r2, #0
 801e590:	f340 8146 	ble.w	801e820 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e594:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e596:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e59a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e59e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e5a0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e5a4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	dd0e      	ble.n	801e5ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e5ac:	140c      	asrs	r4, r1, #16
 801e5ae:	d405      	bmi.n	801e5bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e5b0:	42bc      	cmp	r4, r7
 801e5b2:	da03      	bge.n	801e5bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e5b4:	1414      	asrs	r4, r2, #16
 801e5b6:	d401      	bmi.n	801e5bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e5b8:	42b4      	cmp	r4, r6
 801e5ba:	db07      	blt.n	801e5cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e5bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e5be:	3b01      	subs	r3, #1
 801e5c0:	4421      	add	r1, r4
 801e5c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e5c4:	3002      	adds	r0, #2
 801e5c6:	4422      	add	r2, r4
 801e5c8:	e7ee      	b.n	801e5a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e5ca:	d017      	beq.n	801e5fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e5cc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e5ce:	1e5c      	subs	r4, r3, #1
 801e5d0:	fb05 1504 	mla	r5, r5, r4, r1
 801e5d4:	142d      	asrs	r5, r5, #16
 801e5d6:	d409      	bmi.n	801e5ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5d8:	42bd      	cmp	r5, r7
 801e5da:	da07      	bge.n	801e5ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5dc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e5de:	fb05 2404 	mla	r4, r5, r4, r2
 801e5e2:	1424      	asrs	r4, r4, #16
 801e5e4:	d402      	bmi.n	801e5ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5e6:	42b4      	cmp	r4, r6
 801e5e8:	f2c0 80b3 	blt.w	801e752 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e5ec:	2600      	movs	r6, #0
 801e5ee:	199c      	adds	r4, r3, r6
 801e5f0:	2c00      	cmp	r4, #0
 801e5f2:	dc3e      	bgt.n	801e672 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e5f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e5fc:	f1bb 0f00 	cmp.w	fp, #0
 801e600:	f340 810e 	ble.w	801e820 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e604:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e608:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e60c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e610:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e614:	eeb0 6a62 	vmov.f32	s12, s5
 801e618:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e61c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e620:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e624:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e628:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e62c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e630:	eeb0 6a43 	vmov.f32	s12, s6
 801e634:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e638:	ee12 2a90 	vmov	r2, s5
 801e63c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e642:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e646:	fb92 f3f3 	sdiv	r3, r2, r3
 801e64a:	ee13 2a10 	vmov	r2, s6
 801e64e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e652:	f1bb 0b01 	subs.w	fp, fp, #1
 801e656:	fb92 f3f3 	sdiv	r3, r2, r3
 801e65a:	9a03      	ldr	r2, [sp, #12]
 801e65c:	9312      	str	r3, [sp, #72]	@ 0x48
 801e65e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e664:	eeb0 3a67 	vmov.f32	s6, s15
 801e668:	bf08      	it	eq
 801e66a:	4613      	moveq	r3, r2
 801e66c:	eef0 2a47 	vmov.f32	s5, s14
 801e670:	e789      	b.n	801e586 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e672:	140f      	asrs	r7, r1, #16
 801e674:	d418      	bmi.n	801e6a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e676:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e67a:	42bd      	cmp	r5, r7
 801e67c:	dd14      	ble.n	801e6a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e67e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e682:	d411      	bmi.n	801e6a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e684:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801e688:	4564      	cmp	r4, ip
 801e68a:	dd0d      	ble.n	801e6a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e68c:	b22d      	sxth	r5, r5
 801e68e:	fb0c 7505 	mla	r5, ip, r5, r7
 801e692:	9c01      	ldr	r4, [sp, #4]
 801e694:	5d64      	ldrb	r4, [r4, r5]
 801e696:	2cff      	cmp	r4, #255	@ 0xff
 801e698:	d10c      	bne.n	801e6b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e69a:	9c00      	ldr	r4, [sp, #0]
 801e69c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801e6a0:	f06f 0401 	mvn.w	r4, #1
 801e6a4:	4374      	muls	r4, r6
 801e6a6:	5305      	strh	r5, [r0, r4]
 801e6a8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e6aa:	3e01      	subs	r6, #1
 801e6ac:	4421      	add	r1, r4
 801e6ae:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e6b0:	4422      	add	r2, r4
 801e6b2:	e79c      	b.n	801e5ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e6b4:	2c00      	cmp	r4, #0
 801e6b6:	d0f7      	beq.n	801e6a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e6b8:	9f00      	ldr	r7, [sp, #0]
 801e6ba:	fa1f fc84 	uxth.w	ip, r4
 801e6be:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801e6c2:	f06f 0501 	mvn.w	r5, #1
 801e6c6:	43e4      	mvns	r4, r4
 801e6c8:	4375      	muls	r5, r6
 801e6ca:	9502      	str	r5, [sp, #8]
 801e6cc:	5b45      	ldrh	r5, [r0, r5]
 801e6ce:	b2e4      	uxtb	r4, r4
 801e6d0:	122f      	asrs	r7, r5, #8
 801e6d2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e6d6:	fb17 f704 	smulbb	r7, r7, r4
 801e6da:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e6de:	00ed      	lsls	r5, r5, #3
 801e6e0:	b2ed      	uxtb	r5, r5
 801e6e2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801e6e6:	fb15 f504 	smulbb	r5, r5, r4
 801e6ea:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e6ee:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801e6f2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e6f6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801e6fa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e6fe:	fb1a fa04 	smulbb	sl, sl, r4
 801e702:	fa5f f989 	uxtb.w	r9, r9
 801e706:	fb09 550c 	mla	r5, r9, ip, r5
 801e70a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e70e:	fb07 a70c 	mla	r7, r7, ip, sl
 801e712:	fa1f fe8e 	uxth.w	lr, lr
 801e716:	b2ad      	uxth	r5, r5
 801e718:	f10e 0401 	add.w	r4, lr, #1
 801e71c:	f105 0a01 	add.w	sl, r5, #1
 801e720:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e724:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e728:	b2bf      	uxth	r7, r7
 801e72a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e72e:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e732:	ea4a 0e0e 	orr.w	lr, sl, lr
 801e736:	f107 0a01 	add.w	sl, r7, #1
 801e73a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e73e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e742:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e746:	9c02      	ldr	r4, [sp, #8]
 801e748:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e74c:	f820 e004 	strh.w	lr, [r0, r4]
 801e750:	e7aa      	b.n	801e6a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e752:	f04f 0900 	mov.w	r9, #0
 801e756:	eba3 0409 	sub.w	r4, r3, r9
 801e75a:	2c00      	cmp	r4, #0
 801e75c:	f77f af4a 	ble.w	801e5f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e760:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e764:	1414      	asrs	r4, r2, #16
 801e766:	140d      	asrs	r5, r1, #16
 801e768:	fb06 5504 	mla	r5, r6, r4, r5
 801e76c:	9c01      	ldr	r4, [sp, #4]
 801e76e:	5d64      	ldrb	r4, [r4, r5]
 801e770:	2cff      	cmp	r4, #255	@ 0xff
 801e772:	d10b      	bne.n	801e78c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e774:	9c00      	ldr	r4, [sp, #0]
 801e776:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e77a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e77e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e780:	f109 0901 	add.w	r9, r9, #1
 801e784:	4421      	add	r1, r4
 801e786:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e788:	4422      	add	r2, r4
 801e78a:	e7e4      	b.n	801e756 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e78c:	2c00      	cmp	r4, #0
 801e78e:	d0f6      	beq.n	801e77e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e790:	b2a7      	uxth	r7, r4
 801e792:	43e4      	mvns	r4, r4
 801e794:	9e00      	ldr	r6, [sp, #0]
 801e796:	b2e4      	uxtb	r4, r4
 801e798:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e79c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e7a0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e7a4:	122e      	asrs	r6, r5, #8
 801e7a6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e7aa:	fb16 f604 	smulbb	r6, r6, r4
 801e7ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e7b2:	00ed      	lsls	r5, r5, #3
 801e7b4:	b2ed      	uxtb	r5, r5
 801e7b6:	fb15 f504 	smulbb	r5, r5, r4
 801e7ba:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e7be:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e7c2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e7c6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e7ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e7ce:	fb1a fa04 	smulbb	sl, sl, r4
 801e7d2:	fa5f fe8e 	uxtb.w	lr, lr
 801e7d6:	fb0e 5507 	mla	r5, lr, r7, r5
 801e7da:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e7de:	fb06 a607 	mla	r6, r6, r7, sl
 801e7e2:	fa1f fc8c 	uxth.w	ip, ip
 801e7e6:	b2ad      	uxth	r5, r5
 801e7e8:	f10c 0401 	add.w	r4, ip, #1
 801e7ec:	f105 0a01 	add.w	sl, r5, #1
 801e7f0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e7f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e7f8:	b2b6      	uxth	r6, r6
 801e7fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e7fe:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e802:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e806:	f106 0a01 	add.w	sl, r6, #1
 801e80a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e80e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e812:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e816:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e81a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e81e:	e7ae      	b.n	801e77e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e820:	b005      	add	sp, #20
 801e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e826 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e82a:	b085      	sub	sp, #20
 801e82c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e82e:	9100      	str	r1, [sp, #0]
 801e830:	9203      	str	r2, [sp, #12]
 801e832:	6841      	ldr	r1, [r0, #4]
 801e834:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e838:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801e83c:	9201      	str	r2, [sp, #4]
 801e83e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e842:	fb01 2404 	mla	r4, r1, r4, r2
 801e846:	6802      	ldr	r2, [r0, #0]
 801e848:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e84c:	f8de 2000 	ldr.w	r2, [lr]
 801e850:	9202      	str	r2, [sp, #8]
 801e852:	9a01      	ldr	r2, [sp, #4]
 801e854:	43d6      	mvns	r6, r2
 801e856:	b2f6      	uxtb	r6, r6
 801e858:	9a00      	ldr	r2, [sp, #0]
 801e85a:	2a00      	cmp	r2, #0
 801e85c:	dc03      	bgt.n	801e866 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e85e:	9a03      	ldr	r2, [sp, #12]
 801e860:	2a00      	cmp	r2, #0
 801e862:	f340 8124 	ble.w	801eaae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e866:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e868:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e86c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e870:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e872:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e876:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	dd0e      	ble.n	801e89c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e87e:	1408      	asrs	r0, r1, #16
 801e880:	d405      	bmi.n	801e88e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e882:	4560      	cmp	r0, ip
 801e884:	da03      	bge.n	801e88e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e886:	1410      	asrs	r0, r2, #16
 801e888:	d401      	bmi.n	801e88e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e88a:	42b8      	cmp	r0, r7
 801e88c:	db07      	blt.n	801e89e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e88e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e890:	3b01      	subs	r3, #1
 801e892:	4401      	add	r1, r0
 801e894:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e896:	3402      	adds	r4, #2
 801e898:	4402      	add	r2, r0
 801e89a:	e7ee      	b.n	801e87a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e89c:	d06e      	beq.n	801e97c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e89e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e8a0:	1e58      	subs	r0, r3, #1
 801e8a2:	fb05 1500 	mla	r5, r5, r0, r1
 801e8a6:	142d      	asrs	r5, r5, #16
 801e8a8:	d45c      	bmi.n	801e964 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e8aa:	4565      	cmp	r5, ip
 801e8ac:	da5a      	bge.n	801e964 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e8ae:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e8b0:	fb05 2000 	mla	r0, r5, r0, r2
 801e8b4:	1400      	asrs	r0, r0, #16
 801e8b6:	d455      	bmi.n	801e964 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e8b8:	42b8      	cmp	r0, r7
 801e8ba:	da53      	bge.n	801e964 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e8bc:	4699      	mov	r9, r3
 801e8be:	46a2      	mov	sl, r4
 801e8c0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e8c4:	f1b9 0f00 	cmp.w	r9, #0
 801e8c8:	dd54      	ble.n	801e974 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e8ca:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e8ce:	140d      	asrs	r5, r1, #16
 801e8d0:	1410      	asrs	r0, r2, #16
 801e8d2:	fb07 5000 	mla	r0, r7, r0, r5
 801e8d6:	9d02      	ldr	r5, [sp, #8]
 801e8d8:	f109 39ff 	add.w	r9, r9, #4294967295
 801e8dc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e8e0:	f8ba 5000 	ldrh.w	r5, [sl]
 801e8e4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e8e8:	122f      	asrs	r7, r5, #8
 801e8ea:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e8ee:	fb17 f706 	smulbb	r7, r7, r6
 801e8f2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e8f6:	00ed      	lsls	r5, r5, #3
 801e8f8:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801e8fc:	b2ed      	uxtb	r5, r5
 801e8fe:	fb18 f806 	smulbb	r8, r8, r6
 801e902:	fb15 f506 	smulbb	r5, r5, r6
 801e906:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e90a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e90e:	10c7      	asrs	r7, r0, #3
 801e910:	00c0      	lsls	r0, r0, #3
 801e912:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e916:	b2c0      	uxtb	r0, r0
 801e918:	fb07 870b 	mla	r7, r7, fp, r8
 801e91c:	fb00 500b 	mla	r0, r0, fp, r5
 801e920:	fa1f fc8c 	uxth.w	ip, ip
 801e924:	b280      	uxth	r0, r0
 801e926:	b2bf      	uxth	r7, r7
 801e928:	f10c 0501 	add.w	r5, ip, #1
 801e92c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e930:	f107 0801 	add.w	r8, r7, #1
 801e934:	1c45      	adds	r5, r0, #1
 801e936:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e93a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e93e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e940:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e944:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e948:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e94c:	ea45 0c0c 	orr.w	ip, r5, ip
 801e950:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801e954:	4401      	add	r1, r0
 801e956:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e958:	ea4c 0c08 	orr.w	ip, ip, r8
 801e95c:	f82a cb02 	strh.w	ip, [sl], #2
 801e960:	4402      	add	r2, r0
 801e962:	e7af      	b.n	801e8c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e964:	f04f 0800 	mov.w	r8, #0
 801e968:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e96c:	eb03 0008 	add.w	r0, r3, r8
 801e970:	2800      	cmp	r0, #0
 801e972:	dc41      	bgt.n	801e9f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e978:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e97c:	9b00      	ldr	r3, [sp, #0]
 801e97e:	2b00      	cmp	r3, #0
 801e980:	f340 8095 	ble.w	801eaae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e988:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e98c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e990:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e998:	eef0 6a62 	vmov.f32	s13, s5
 801e99c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e9a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9b0:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801e9b4:	eef0 6a43 	vmov.f32	s13, s6
 801e9b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9bc:	ee12 2a90 	vmov	r2, s5
 801e9c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9ce:	ee13 2a10 	vmov	r2, s6
 801e9d2:	9311      	str	r3, [sp, #68]	@ 0x44
 801e9d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9d6:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801e9da:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9de:	9312      	str	r3, [sp, #72]	@ 0x48
 801e9e0:	9b00      	ldr	r3, [sp, #0]
 801e9e2:	9a03      	ldr	r2, [sp, #12]
 801e9e4:	3b01      	subs	r3, #1
 801e9e6:	9300      	str	r3, [sp, #0]
 801e9e8:	eeb0 3a67 	vmov.f32	s6, s15
 801e9ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9ee:	eef0 2a47 	vmov.f32	s5, s14
 801e9f2:	bf08      	it	eq
 801e9f4:	4613      	moveq	r3, r2
 801e9f6:	e72f      	b.n	801e858 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e9f8:	140f      	asrs	r7, r1, #16
 801e9fa:	d451      	bmi.n	801eaa0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e9fc:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ea00:	42bd      	cmp	r5, r7
 801ea02:	dd4d      	ble.n	801eaa0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ea04:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ea08:	d44a      	bmi.n	801eaa0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ea0a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ea0e:	4560      	cmp	r0, ip
 801ea10:	dd46      	ble.n	801eaa0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ea12:	b22d      	sxth	r5, r5
 801ea14:	fb0c 7505 	mla	r5, ip, r5, r7
 801ea18:	9802      	ldr	r0, [sp, #8]
 801ea1a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801ea1e:	f06f 0501 	mvn.w	r5, #1
 801ea22:	fb05 fb08 	mul.w	fp, r5, r8
 801ea26:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ea2a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ea2e:	122f      	asrs	r7, r5, #8
 801ea30:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ea34:	fb17 f706 	smulbb	r7, r7, r6
 801ea38:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ea3c:	00ed      	lsls	r5, r5, #3
 801ea3e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801ea42:	b2ed      	uxtb	r5, r5
 801ea44:	fb19 f906 	smulbb	r9, r9, r6
 801ea48:	fb15 f506 	smulbb	r5, r5, r6
 801ea4c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ea50:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ea54:	10c7      	asrs	r7, r0, #3
 801ea56:	00c0      	lsls	r0, r0, #3
 801ea58:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ea5c:	b2c0      	uxtb	r0, r0
 801ea5e:	fb07 970a 	mla	r7, r7, sl, r9
 801ea62:	fb00 500a 	mla	r0, r0, sl, r5
 801ea66:	fa1f fc8c 	uxth.w	ip, ip
 801ea6a:	b2bf      	uxth	r7, r7
 801ea6c:	b280      	uxth	r0, r0
 801ea6e:	f10c 0501 	add.w	r5, ip, #1
 801ea72:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ea76:	f107 0901 	add.w	r9, r7, #1
 801ea7a:	1c45      	adds	r5, r0, #1
 801ea7c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ea80:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ea84:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ea88:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ea8c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ea90:	ea45 0c0c 	orr.w	ip, r5, ip
 801ea94:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801ea98:	ea4c 0c09 	orr.w	ip, ip, r9
 801ea9c:	f824 c00b 	strh.w	ip, [r4, fp]
 801eaa0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801eaa2:	f108 38ff 	add.w	r8, r8, #4294967295
 801eaa6:	4401      	add	r1, r0
 801eaa8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eaaa:	4402      	add	r2, r0
 801eaac:	e75e      	b.n	801e96c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801eaae:	b005      	add	sp, #20
 801eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eab4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eabc:	b085      	sub	sp, #20
 801eabe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801eac0:	4693      	mov	fp, r2
 801eac2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801eac6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801eaca:	6870      	ldr	r0, [r6, #4]
 801eacc:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801eace:	fb00 2404 	mla	r4, r0, r4, r2
 801ead2:	6832      	ldr	r2, [r6, #0]
 801ead4:	9101      	str	r1, [sp, #4]
 801ead6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eada:	682a      	ldr	r2, [r5, #0]
 801eadc:	9202      	str	r2, [sp, #8]
 801eade:	9a01      	ldr	r2, [sp, #4]
 801eae0:	2a00      	cmp	r2, #0
 801eae2:	dc03      	bgt.n	801eaec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eae4:	f1bb 0f00 	cmp.w	fp, #0
 801eae8:	f340 809a 	ble.w	801ec20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801eaec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801eaee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801eaf2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801eaf6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eaf8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801eafc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	dd0c      	ble.n	801eb1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eb04:	1406      	asrs	r6, r0, #16
 801eb06:	d405      	bmi.n	801eb14 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb08:	454e      	cmp	r6, r9
 801eb0a:	da03      	bge.n	801eb14 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb0c:	1416      	asrs	r6, r2, #16
 801eb0e:	d401      	bmi.n	801eb14 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801eb10:	4546      	cmp	r6, r8
 801eb12:	db05      	blt.n	801eb20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801eb14:	4470      	add	r0, lr
 801eb16:	4462      	add	r2, ip
 801eb18:	3b01      	subs	r3, #1
 801eb1a:	3402      	adds	r4, #2
 801eb1c:	e7f0      	b.n	801eb00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801eb1e:	d00f      	beq.n	801eb40 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eb20:	1e5e      	subs	r6, r3, #1
 801eb22:	fb0e 0706 	mla	r7, lr, r6, r0
 801eb26:	143f      	asrs	r7, r7, #16
 801eb28:	d541      	bpl.n	801ebae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801eb2a:	4698      	mov	r8, r3
 801eb2c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801eb30:	9603      	str	r6, [sp, #12]
 801eb32:	f1b8 0f00 	cmp.w	r8, #0
 801eb36:	dc56      	bgt.n	801ebe6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801eb38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb3c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb40:	9b01      	ldr	r3, [sp, #4]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	dd6c      	ble.n	801ec20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801eb46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb4e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb52:	eeb0 6a62 	vmov.f32	s12, s5
 801eb56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb6a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801eb6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb72:	eeb0 6a43 	vmov.f32	s12, s6
 801eb76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb7a:	ee12 2a90 	vmov	r2, s5
 801eb7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb88:	fb92 fef3 	sdiv	lr, r2, r3
 801eb8c:	ee13 2a10 	vmov	r2, s6
 801eb90:	fb92 fcf3 	sdiv	ip, r2, r3
 801eb94:	9b01      	ldr	r3, [sp, #4]
 801eb96:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801eb9a:	3b01      	subs	r3, #1
 801eb9c:	9301      	str	r3, [sp, #4]
 801eb9e:	eeb0 3a67 	vmov.f32	s6, s15
 801eba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eba4:	eef0 2a47 	vmov.f32	s5, s14
 801eba8:	bf08      	it	eq
 801ebaa:	465b      	moveq	r3, fp
 801ebac:	e797      	b.n	801eade <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ebae:	454f      	cmp	r7, r9
 801ebb0:	dabb      	bge.n	801eb2a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ebb2:	fb0c 2606 	mla	r6, ip, r6, r2
 801ebb6:	1436      	asrs	r6, r6, #16
 801ebb8:	d4b7      	bmi.n	801eb2a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ebba:	4546      	cmp	r6, r8
 801ebbc:	dab5      	bge.n	801eb2a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ebbe:	461e      	mov	r6, r3
 801ebc0:	46a0      	mov	r8, r4
 801ebc2:	2e00      	cmp	r6, #0
 801ebc4:	ddb8      	ble.n	801eb38 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ebc6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801ebca:	1417      	asrs	r7, r2, #16
 801ebcc:	ea4f 4920 	mov.w	r9, r0, asr #16
 801ebd0:	fb0a 9707 	mla	r7, sl, r7, r9
 801ebd4:	9902      	ldr	r1, [sp, #8]
 801ebd6:	4470      	add	r0, lr
 801ebd8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801ebdc:	4462      	add	r2, ip
 801ebde:	f828 7b02 	strh.w	r7, [r8], #2
 801ebe2:	3e01      	subs	r6, #1
 801ebe4:	e7ed      	b.n	801ebc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801ebe6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ebea:	d414      	bmi.n	801ec16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ebec:	68ae      	ldr	r6, [r5, #8]
 801ebee:	454e      	cmp	r6, r9
 801ebf0:	dd11      	ble.n	801ec16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ebf2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ebf6:	d40e      	bmi.n	801ec16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ebf8:	68ef      	ldr	r7, [r5, #12]
 801ebfa:	4557      	cmp	r7, sl
 801ebfc:	dd0b      	ble.n	801ec16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801ebfe:	f06f 0101 	mvn.w	r1, #1
 801ec02:	b236      	sxth	r6, r6
 801ec04:	fb0a 9606 	mla	r6, sl, r6, r9
 801ec08:	9f02      	ldr	r7, [sp, #8]
 801ec0a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801ec0e:	fb01 f608 	mul.w	r6, r1, r8
 801ec12:	9903      	ldr	r1, [sp, #12]
 801ec14:	538f      	strh	r7, [r1, r6]
 801ec16:	4470      	add	r0, lr
 801ec18:	4462      	add	r2, ip
 801ec1a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ec1e:	e788      	b.n	801eb32 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ec20:	b005      	add	sp, #20
 801ec22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec2e:	b087      	sub	sp, #28
 801ec30:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ec32:	468b      	mov	fp, r1
 801ec34:	9203      	str	r2, [sp, #12]
 801ec36:	6841      	ldr	r1, [r0, #4]
 801ec38:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ec3c:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801ec40:	9204      	str	r2, [sp, #16]
 801ec42:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801ec46:	fb01 2505 	mla	r5, r1, r5, r2
 801ec4a:	6802      	ldr	r2, [r0, #0]
 801ec4c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801ec50:	f8d9 2000 	ldr.w	r2, [r9]
 801ec54:	9201      	str	r2, [sp, #4]
 801ec56:	f1bb 0f00 	cmp.w	fp, #0
 801ec5a:	dc03      	bgt.n	801ec64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ec5c:	9a03      	ldr	r2, [sp, #12]
 801ec5e:	2a00      	cmp	r2, #0
 801ec60:	f340 8159 	ble.w	801ef16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801ec64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ec66:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ec6a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ec6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ec70:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ec74:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	dd0e      	ble.n	801ec9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ec7c:	1402      	asrs	r2, r0, #16
 801ec7e:	d405      	bmi.n	801ec8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ec80:	42ba      	cmp	r2, r7
 801ec82:	da03      	bge.n	801ec8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ec84:	140a      	asrs	r2, r1, #16
 801ec86:	d401      	bmi.n	801ec8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ec88:	42b2      	cmp	r2, r6
 801ec8a:	db07      	blt.n	801ec9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ec8c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ec8e:	3b01      	subs	r3, #1
 801ec90:	4410      	add	r0, r2
 801ec92:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ec94:	3502      	adds	r5, #2
 801ec96:	4411      	add	r1, r2
 801ec98:	e7ee      	b.n	801ec78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ec9a:	d017      	beq.n	801eccc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ec9c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ec9e:	1e5a      	subs	r2, r3, #1
 801eca0:	fb04 0402 	mla	r4, r4, r2, r0
 801eca4:	1424      	asrs	r4, r4, #16
 801eca6:	d409      	bmi.n	801ecbc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801eca8:	42bc      	cmp	r4, r7
 801ecaa:	da07      	bge.n	801ecbc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ecac:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ecae:	fb04 1202 	mla	r2, r4, r2, r1
 801ecb2:	1412      	asrs	r2, r2, #16
 801ecb4:	d402      	bmi.n	801ecbc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ecb6:	42b2      	cmp	r2, r6
 801ecb8:	f2c0 80bf 	blt.w	801ee3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ecbc:	2700      	movs	r7, #0
 801ecbe:	19da      	adds	r2, r3, r7
 801ecc0:	2a00      	cmp	r2, #0
 801ecc2:	dc3e      	bgt.n	801ed42 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ecc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ecc8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801eccc:	f1bb 0f00 	cmp.w	fp, #0
 801ecd0:	f340 8121 	ble.w	801ef16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801ecd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ecd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ecdc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ece0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ece4:	eeb0 6a62 	vmov.f32	s12, s5
 801ece8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecfc:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ed00:	eeb0 6a43 	vmov.f32	s12, s6
 801ed04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed08:	ee12 2a90 	vmov	r2, s5
 801ed0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ed12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed16:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed1a:	ee13 2a10 	vmov	r2, s6
 801ed1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ed20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ed22:	f1bb 0b01 	subs.w	fp, fp, #1
 801ed26:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed2a:	9a03      	ldr	r2, [sp, #12]
 801ed2c:	9314      	str	r3, [sp, #80]	@ 0x50
 801ed2e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ed32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ed34:	eeb0 3a67 	vmov.f32	s6, s15
 801ed38:	bf08      	it	eq
 801ed3a:	4613      	moveq	r3, r2
 801ed3c:	eef0 2a47 	vmov.f32	s5, s14
 801ed40:	e789      	b.n	801ec56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ed42:	1406      	asrs	r6, r0, #16
 801ed44:	d42d      	bmi.n	801eda2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed46:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801ed4a:	42b4      	cmp	r4, r6
 801ed4c:	dd29      	ble.n	801eda2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed4e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801ed52:	d426      	bmi.n	801eda2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed54:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ed58:	4562      	cmp	r2, ip
 801ed5a:	dd22      	ble.n	801eda2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed5c:	b224      	sxth	r4, r4
 801ed5e:	fb0c 6404 	mla	r4, ip, r4, r6
 801ed62:	9a01      	ldr	r2, [sp, #4]
 801ed64:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801ed68:	0e22      	lsrs	r2, r4, #24
 801ed6a:	d01a      	beq.n	801eda2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed6c:	9e04      	ldr	r6, [sp, #16]
 801ed6e:	4372      	muls	r2, r6
 801ed70:	1c56      	adds	r6, r2, #1
 801ed72:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ed76:	1212      	asrs	r2, r2, #8
 801ed78:	0a26      	lsrs	r6, r4, #8
 801ed7a:	2aff      	cmp	r2, #255	@ 0xff
 801ed7c:	9605      	str	r6, [sp, #20]
 801ed7e:	d116      	bne.n	801edae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801ed80:	f06f 0201 	mvn.w	r2, #1
 801ed84:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ed88:	fb02 fc07 	mul.w	ip, r2, r7
 801ed8c:	0962      	lsrs	r2, r4, #5
 801ed8e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ed92:	f026 0607 	bic.w	r6, r6, #7
 801ed96:	4316      	orrs	r6, r2
 801ed98:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ed9c:	4326      	orrs	r6, r4
 801ed9e:	f825 600c 	strh.w	r6, [r5, ip]
 801eda2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eda4:	3f01      	subs	r7, #1
 801eda6:	4410      	add	r0, r2
 801eda8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801edaa:	4411      	add	r1, r2
 801edac:	e787      	b.n	801ecbe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801edae:	f06f 0601 	mvn.w	r6, #1
 801edb2:	fa1f fa82 	uxth.w	sl, r2
 801edb6:	43d2      	mvns	r2, r2
 801edb8:	437e      	muls	r6, r7
 801edba:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801edbe:	f835 8006 	ldrh.w	r8, [r5, r6]
 801edc2:	fb1c fc0a 	smulbb	ip, ip, sl
 801edc6:	b2e4      	uxtb	r4, r4
 801edc8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801edcc:	fb14 f40a 	smulbb	r4, r4, sl
 801edd0:	b2d2      	uxtb	r2, r2
 801edd2:	9602      	str	r6, [sp, #8]
 801edd4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801edd8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801eddc:	fb0e ce02 	mla	lr, lr, r2, ip
 801ede0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ede4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ede8:	fb16 f60a 	smulbb	r6, r6, sl
 801edec:	fa5f f888 	uxtb.w	r8, r8
 801edf0:	fb08 4402 	mla	r4, r8, r2, r4
 801edf4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801edf8:	fb0c 6c02 	mla	ip, ip, r2, r6
 801edfc:	fa1f fe8e 	uxth.w	lr, lr
 801ee00:	b2a4      	uxth	r4, r4
 801ee02:	f10e 0201 	add.w	r2, lr, #1
 801ee06:	1c66      	adds	r6, r4, #1
 801ee08:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ee0c:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ee10:	fa1f fc8c 	uxth.w	ip, ip
 801ee14:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ee18:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801ee1c:	ea46 0e0e 	orr.w	lr, r6, lr
 801ee20:	f10c 0601 	add.w	r6, ip, #1
 801ee24:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ee28:	0976      	lsrs	r6, r6, #5
 801ee2a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ee2e:	9a02      	ldr	r2, [sp, #8]
 801ee30:	ea4e 0e06 	orr.w	lr, lr, r6
 801ee34:	f825 e002 	strh.w	lr, [r5, r2]
 801ee38:	e7b3      	b.n	801eda2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ee3a:	f04f 0800 	mov.w	r8, #0
 801ee3e:	eba3 0208 	sub.w	r2, r3, r8
 801ee42:	2a00      	cmp	r2, #0
 801ee44:	f77f af3e 	ble.w	801ecc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ee48:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801ee4c:	1404      	asrs	r4, r0, #16
 801ee4e:	140a      	asrs	r2, r1, #16
 801ee50:	fb06 4202 	mla	r2, r6, r2, r4
 801ee54:	9c01      	ldr	r4, [sp, #4]
 801ee56:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801ee5a:	0e22      	lsrs	r2, r4, #24
 801ee5c:	d016      	beq.n	801ee8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ee5e:	9e04      	ldr	r6, [sp, #16]
 801ee60:	4372      	muls	r2, r6
 801ee62:	1c56      	adds	r6, r2, #1
 801ee64:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ee68:	1212      	asrs	r2, r2, #8
 801ee6a:	2aff      	cmp	r2, #255	@ 0xff
 801ee6c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801ee70:	d113      	bne.n	801ee9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801ee72:	0962      	lsrs	r2, r4, #5
 801ee74:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ee78:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ee7c:	f026 0607 	bic.w	r6, r6, #7
 801ee80:	4316      	orrs	r6, r2
 801ee82:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ee86:	4326      	orrs	r6, r4
 801ee88:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801ee8c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee8e:	f108 0801 	add.w	r8, r8, #1
 801ee92:	4410      	add	r0, r2
 801ee94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ee96:	4411      	add	r1, r2
 801ee98:	e7d1      	b.n	801ee3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801ee9a:	fa1f fa82 	uxth.w	sl, r2
 801ee9e:	43d2      	mvns	r2, r2
 801eea0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801eea4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801eea8:	fb17 f70a 	smulbb	r7, r7, sl
 801eeac:	b2e4      	uxtb	r4, r4
 801eeae:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801eeb2:	fb14 f40a 	smulbb	r4, r4, sl
 801eeb6:	b2d2      	uxtb	r2, r2
 801eeb8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801eebc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801eec0:	b2f6      	uxtb	r6, r6
 801eec2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801eec6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eeca:	fb16 f60a 	smulbb	r6, r6, sl
 801eece:	fa5f fe8e 	uxtb.w	lr, lr
 801eed2:	fb0e 4402 	mla	r4, lr, r2, r4
 801eed6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801eeda:	fb07 6702 	mla	r7, r7, r2, r6
 801eede:	fa1f fc8c 	uxth.w	ip, ip
 801eee2:	b2a4      	uxth	r4, r4
 801eee4:	f10c 0201 	add.w	r2, ip, #1
 801eee8:	1c66      	adds	r6, r4, #1
 801eeea:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801eeee:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801eef2:	b2bf      	uxth	r7, r7
 801eef4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801eef8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801eefc:	ea46 0c0c 	orr.w	ip, r6, ip
 801ef00:	1c7e      	adds	r6, r7, #1
 801ef02:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ef06:	0976      	lsrs	r6, r6, #5
 801ef08:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ef0c:	ea4c 0c06 	orr.w	ip, ip, r6
 801ef10:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801ef14:	e7ba      	b.n	801ee8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ef16:	b007      	add	sp, #28
 801ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef24:	b085      	sub	sp, #20
 801ef26:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ef28:	468b      	mov	fp, r1
 801ef2a:	6841      	ldr	r1, [r0, #4]
 801ef2c:	9203      	str	r2, [sp, #12]
 801ef2e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ef32:	fb01 2404 	mla	r4, r1, r4, r2
 801ef36:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801ef3a:	6802      	ldr	r2, [r0, #0]
 801ef3c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ef40:	f8d8 2000 	ldr.w	r2, [r8]
 801ef44:	9201      	str	r2, [sp, #4]
 801ef46:	f1bb 0f00 	cmp.w	fp, #0
 801ef4a:	dc03      	bgt.n	801ef54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ef4c:	9a03      	ldr	r2, [sp, #12]
 801ef4e:	2a00      	cmp	r2, #0
 801ef50:	f340 814f 	ble.w	801f1f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ef54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ef56:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ef5a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ef5e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ef60:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ef64:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	dd0e      	ble.n	801ef8a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ef6c:	1408      	asrs	r0, r1, #16
 801ef6e:	d405      	bmi.n	801ef7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ef70:	42b8      	cmp	r0, r7
 801ef72:	da03      	bge.n	801ef7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ef74:	1410      	asrs	r0, r2, #16
 801ef76:	d401      	bmi.n	801ef7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ef78:	42b0      	cmp	r0, r6
 801ef7a:	db07      	blt.n	801ef8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ef7c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ef7e:	3b01      	subs	r3, #1
 801ef80:	4401      	add	r1, r0
 801ef82:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ef84:	3402      	adds	r4, #2
 801ef86:	4402      	add	r2, r0
 801ef88:	e7ee      	b.n	801ef68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ef8a:	d017      	beq.n	801efbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ef8c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ef8e:	1e58      	subs	r0, r3, #1
 801ef90:	fb05 1500 	mla	r5, r5, r0, r1
 801ef94:	142d      	asrs	r5, r5, #16
 801ef96:	d409      	bmi.n	801efac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef98:	42bd      	cmp	r5, r7
 801ef9a:	da07      	bge.n	801efac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef9c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ef9e:	fb05 2000 	mla	r0, r5, r0, r2
 801efa2:	1400      	asrs	r0, r0, #16
 801efa4:	d402      	bmi.n	801efac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801efa6:	42b0      	cmp	r0, r6
 801efa8:	f2c0 80ba 	blt.w	801f120 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801efac:	2600      	movs	r6, #0
 801efae:	1998      	adds	r0, r3, r6
 801efb0:	2800      	cmp	r0, #0
 801efb2:	dc3e      	bgt.n	801f032 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801efb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efb8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801efbc:	f1bb 0f00 	cmp.w	fp, #0
 801efc0:	f340 8117 	ble.w	801f1f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801efc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efcc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801efd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801efd4:	eeb0 6a62 	vmov.f32	s12, s5
 801efd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efdc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efe0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efe4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efe8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efec:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801eff0:	eeb0 6a43 	vmov.f32	s12, s6
 801eff4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eff8:	ee12 2a90 	vmov	r2, s5
 801effc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f002:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f006:	fb92 f3f3 	sdiv	r3, r2, r3
 801f00a:	ee13 2a10 	vmov	r2, s6
 801f00e:	9311      	str	r3, [sp, #68]	@ 0x44
 801f010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f012:	f1bb 0b01 	subs.w	fp, fp, #1
 801f016:	fb92 f3f3 	sdiv	r3, r2, r3
 801f01a:	9a03      	ldr	r2, [sp, #12]
 801f01c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f01e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f024:	eeb0 3a67 	vmov.f32	s6, s15
 801f028:	bf08      	it	eq
 801f02a:	4613      	moveq	r3, r2
 801f02c:	eef0 2a47 	vmov.f32	s5, s14
 801f030:	e789      	b.n	801ef46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f032:	140f      	asrs	r7, r1, #16
 801f034:	d424      	bmi.n	801f080 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f036:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f03a:	42bd      	cmp	r5, r7
 801f03c:	dd20      	ble.n	801f080 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f03e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f042:	d41d      	bmi.n	801f080 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f044:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801f048:	4560      	cmp	r0, ip
 801f04a:	dd19      	ble.n	801f080 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f04c:	b22d      	sxth	r5, r5
 801f04e:	fb0c 7505 	mla	r5, ip, r5, r7
 801f052:	9801      	ldr	r0, [sp, #4]
 801f054:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801f058:	0e07      	lsrs	r7, r0, #24
 801f05a:	2fff      	cmp	r7, #255	@ 0xff
 801f05c:	d116      	bne.n	801f08c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f05e:	f06f 0501 	mvn.w	r5, #1
 801f062:	fb05 f706 	mul.w	r7, r5, r6
 801f066:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801f06a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f06e:	0945      	lsrs	r5, r0, #5
 801f070:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f074:	ea4c 0505 	orr.w	r5, ip, r5
 801f078:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f07c:	4305      	orrs	r5, r0
 801f07e:	53e5      	strh	r5, [r4, r7]
 801f080:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f082:	3e01      	subs	r6, #1
 801f084:	4401      	add	r1, r0
 801f086:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f088:	4402      	add	r2, r0
 801f08a:	e790      	b.n	801efae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f08c:	b2fd      	uxtb	r5, r7
 801f08e:	2f00      	cmp	r7, #0
 801f090:	d0f6      	beq.n	801f080 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f092:	f06f 0701 	mvn.w	r7, #1
 801f096:	fa1f f985 	uxth.w	r9, r5
 801f09a:	43ed      	mvns	r5, r5
 801f09c:	4377      	muls	r7, r6
 801f09e:	f834 e007 	ldrh.w	lr, [r4, r7]
 801f0a2:	9702      	str	r7, [sp, #8]
 801f0a4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f0a8:	fb17 f709 	smulbb	r7, r7, r9
 801f0ac:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f0b0:	b2c0      	uxtb	r0, r0
 801f0b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f0b6:	fb10 f009 	smulbb	r0, r0, r9
 801f0ba:	b2ed      	uxtb	r5, r5
 801f0bc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f0c0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f0c4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f0c8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f0cc:	fb1a fa09 	smulbb	sl, sl, r9
 801f0d0:	fa5f fe8e 	uxtb.w	lr, lr
 801f0d4:	fb0e 0005 	mla	r0, lr, r5, r0
 801f0d8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f0dc:	fb07 a705 	mla	r7, r7, r5, sl
 801f0e0:	b280      	uxth	r0, r0
 801f0e2:	fa1f fc8c 	uxth.w	ip, ip
 801f0e6:	f100 0a01 	add.w	sl, r0, #1
 801f0ea:	f10c 0501 	add.w	r5, ip, #1
 801f0ee:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f0f2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f0f6:	b2bf      	uxth	r7, r7
 801f0f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f0fc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f100:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f104:	f107 0a01 	add.w	sl, r7, #1
 801f108:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f10c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f110:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f114:	9802      	ldr	r0, [sp, #8]
 801f116:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f11a:	f824 c000 	strh.w	ip, [r4, r0]
 801f11e:	e7af      	b.n	801f080 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f120:	f04f 0e00 	mov.w	lr, #0
 801f124:	eba3 000e 	sub.w	r0, r3, lr
 801f128:	2800      	cmp	r0, #0
 801f12a:	f77f af43 	ble.w	801efb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f12e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f132:	140d      	asrs	r5, r1, #16
 801f134:	1410      	asrs	r0, r2, #16
 801f136:	fb06 5000 	mla	r0, r6, r0, r5
 801f13a:	9d01      	ldr	r5, [sp, #4]
 801f13c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801f140:	0e2e      	lsrs	r6, r5, #24
 801f142:	2eff      	cmp	r6, #255	@ 0xff
 801f144:	d112      	bne.n	801f16c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801f146:	482c      	ldr	r0, [pc, #176]	@ (801f1f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801f148:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801f14c:	0968      	lsrs	r0, r5, #5
 801f14e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801f152:	4330      	orrs	r0, r6
 801f154:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f158:	4328      	orrs	r0, r5
 801f15a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801f15e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f160:	f10e 0e01 	add.w	lr, lr, #1
 801f164:	4401      	add	r1, r0
 801f166:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f168:	4402      	add	r2, r0
 801f16a:	e7db      	b.n	801f124 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f16c:	b2f0      	uxtb	r0, r6
 801f16e:	2e00      	cmp	r6, #0
 801f170:	d0f5      	beq.n	801f15e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801f172:	fa1f f980 	uxth.w	r9, r0
 801f176:	43c0      	mvns	r0, r0
 801f178:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f17c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f180:	fb16 f609 	smulbb	r6, r6, r9
 801f184:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f188:	b2ed      	uxtb	r5, r5
 801f18a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f18e:	fb15 f509 	smulbb	r5, r5, r9
 801f192:	b2c0      	uxtb	r0, r0
 801f194:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f198:	fb07 6700 	mla	r7, r7, r0, r6
 801f19c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f1a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f1a4:	fb1a fa09 	smulbb	sl, sl, r9
 801f1a8:	fa5f fc8c 	uxtb.w	ip, ip
 801f1ac:	fb0c 5500 	mla	r5, ip, r0, r5
 801f1b0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f1b4:	fb06 a600 	mla	r6, r6, r0, sl
 801f1b8:	b2bf      	uxth	r7, r7
 801f1ba:	b2ad      	uxth	r5, r5
 801f1bc:	1c78      	adds	r0, r7, #1
 801f1be:	f105 0a01 	add.w	sl, r5, #1
 801f1c2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f1c6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f1ca:	b2b6      	uxth	r6, r6
 801f1cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f1d0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f1d4:	ea4a 0707 	orr.w	r7, sl, r7
 801f1d8:	f106 0a01 	add.w	sl, r6, #1
 801f1dc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f1e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f1e4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f1e8:	ea47 070a 	orr.w	r7, r7, sl
 801f1ec:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801f1f0:	e7b5      	b.n	801f15e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801f1f2:	b005      	add	sp, #20
 801f1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1f8:	fffff800 	.word	0xfffff800

0801f1fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f204:	b087      	sub	sp, #28
 801f206:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f208:	468b      	mov	fp, r1
 801f20a:	9203      	str	r2, [sp, #12]
 801f20c:	6841      	ldr	r1, [r0, #4]
 801f20e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f212:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801f216:	9204      	str	r2, [sp, #16]
 801f218:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f21c:	fb01 2404 	mla	r4, r1, r4, r2
 801f220:	6802      	ldr	r2, [r0, #0]
 801f222:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f226:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801f22a:	3201      	adds	r2, #1
 801f22c:	f022 0201 	bic.w	r2, r2, #1
 801f230:	9200      	str	r2, [sp, #0]
 801f232:	f8d9 2000 	ldr.w	r2, [r9]
 801f236:	9201      	str	r2, [sp, #4]
 801f238:	f1bb 0f00 	cmp.w	fp, #0
 801f23c:	dc03      	bgt.n	801f246 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f23e:	9a03      	ldr	r2, [sp, #12]
 801f240:	2a00      	cmp	r2, #0
 801f242:	f340 816a 	ble.w	801f51a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f246:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f248:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f24c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f250:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f252:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f256:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	dd0e      	ble.n	801f27c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f25e:	1402      	asrs	r2, r0, #16
 801f260:	d405      	bmi.n	801f26e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f262:	42ba      	cmp	r2, r7
 801f264:	da03      	bge.n	801f26e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f266:	140a      	asrs	r2, r1, #16
 801f268:	d401      	bmi.n	801f26e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f26a:	42b2      	cmp	r2, r6
 801f26c:	db07      	blt.n	801f27e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f26e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f270:	3b01      	subs	r3, #1
 801f272:	4410      	add	r0, r2
 801f274:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f276:	3402      	adds	r4, #2
 801f278:	4411      	add	r1, r2
 801f27a:	e7ee      	b.n	801f25a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f27c:	d017      	beq.n	801f2ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f27e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f280:	1e5a      	subs	r2, r3, #1
 801f282:	fb05 0502 	mla	r5, r5, r2, r0
 801f286:	142d      	asrs	r5, r5, #16
 801f288:	d409      	bmi.n	801f29e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f28a:	42bd      	cmp	r5, r7
 801f28c:	da07      	bge.n	801f29e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f28e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f290:	fb05 1202 	mla	r2, r5, r2, r1
 801f294:	1412      	asrs	r2, r2, #16
 801f296:	d402      	bmi.n	801f29e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f298:	42b2      	cmp	r2, r6
 801f29a:	f2c0 80c8 	blt.w	801f42e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f29e:	2700      	movs	r7, #0
 801f2a0:	19da      	adds	r2, r3, r7
 801f2a2:	2a00      	cmp	r2, #0
 801f2a4:	dc3e      	bgt.n	801f324 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f2a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f2ae:	f1bb 0f00 	cmp.w	fp, #0
 801f2b2:	f340 8132 	ble.w	801f51a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f2b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f2c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2c6:	eeb0 6a62 	vmov.f32	s12, s5
 801f2ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2de:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f2e2:	eeb0 6a43 	vmov.f32	s12, s6
 801f2e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2ea:	ee12 2a90 	vmov	r2, s5
 801f2ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2fc:	ee13 2a10 	vmov	r2, s6
 801f300:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f302:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f304:	f1bb 0b01 	subs.w	fp, fp, #1
 801f308:	fb92 f3f3 	sdiv	r3, r2, r3
 801f30c:	9a03      	ldr	r2, [sp, #12]
 801f30e:	9314      	str	r3, [sp, #80]	@ 0x50
 801f310:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f314:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f316:	eeb0 3a67 	vmov.f32	s6, s15
 801f31a:	bf08      	it	eq
 801f31c:	4613      	moveq	r3, r2
 801f31e:	eef0 2a47 	vmov.f32	s5, s14
 801f322:	e789      	b.n	801f238 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f324:	1405      	asrs	r5, r0, #16
 801f326:	d436      	bmi.n	801f396 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f328:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801f32c:	42aa      	cmp	r2, r5
 801f32e:	dd32      	ble.n	801f396 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f330:	140e      	asrs	r6, r1, #16
 801f332:	d430      	bmi.n	801f396 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f334:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801f338:	42b2      	cmp	r2, r6
 801f33a:	dd2c      	ble.n	801f396 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f33c:	9a00      	ldr	r2, [sp, #0]
 801f33e:	fb06 5502 	mla	r5, r6, r2, r5
 801f342:	9e01      	ldr	r6, [sp, #4]
 801f344:	086a      	lsrs	r2, r5, #1
 801f346:	5cb2      	ldrb	r2, [r6, r2]
 801f348:	07ee      	lsls	r6, r5, #31
 801f34a:	bf54      	ite	pl
 801f34c:	f002 020f 	andpl.w	r2, r2, #15
 801f350:	1112      	asrmi	r2, r2, #4
 801f352:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f356:	b2d2      	uxtb	r2, r2
 801f358:	b1ea      	cbz	r2, 801f396 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f35a:	9d04      	ldr	r5, [sp, #16]
 801f35c:	436a      	muls	r2, r5
 801f35e:	1c55      	adds	r5, r2, #1
 801f360:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f364:	4d6e      	ldr	r5, [pc, #440]	@ (801f520 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f366:	1212      	asrs	r2, r2, #8
 801f368:	682d      	ldr	r5, [r5, #0]
 801f36a:	2aff      	cmp	r2, #255	@ 0xff
 801f36c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801f370:	9605      	str	r6, [sp, #20]
 801f372:	d116      	bne.n	801f3a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f374:	f06f 0201 	mvn.w	r2, #1
 801f378:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801f37c:	fb02 fc07 	mul.w	ip, r2, r7
 801f380:	096a      	lsrs	r2, r5, #5
 801f382:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f386:	f026 0607 	bic.w	r6, r6, #7
 801f38a:	4316      	orrs	r6, r2
 801f38c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f390:	432e      	orrs	r6, r5
 801f392:	f824 600c 	strh.w	r6, [r4, ip]
 801f396:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f398:	3f01      	subs	r7, #1
 801f39a:	4410      	add	r0, r2
 801f39c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f39e:	4411      	add	r1, r2
 801f3a0:	e77e      	b.n	801f2a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f3a2:	f06f 0601 	mvn.w	r6, #1
 801f3a6:	fa1f fa82 	uxth.w	sl, r2
 801f3aa:	43d2      	mvns	r2, r2
 801f3ac:	437e      	muls	r6, r7
 801f3ae:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801f3b2:	f834 8006 	ldrh.w	r8, [r4, r6]
 801f3b6:	fb1c fc0a 	smulbb	ip, ip, sl
 801f3ba:	b2ed      	uxtb	r5, r5
 801f3bc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f3c0:	fb15 f50a 	smulbb	r5, r5, sl
 801f3c4:	b2d2      	uxtb	r2, r2
 801f3c6:	9602      	str	r6, [sp, #8]
 801f3c8:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f3cc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801f3d0:	fb0e ce02 	mla	lr, lr, r2, ip
 801f3d4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801f3d8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f3dc:	fb16 f60a 	smulbb	r6, r6, sl
 801f3e0:	fa5f f888 	uxtb.w	r8, r8
 801f3e4:	fb08 5502 	mla	r5, r8, r2, r5
 801f3e8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801f3ec:	fb0c 6c02 	mla	ip, ip, r2, r6
 801f3f0:	fa1f fe8e 	uxth.w	lr, lr
 801f3f4:	b2ad      	uxth	r5, r5
 801f3f6:	f10e 0201 	add.w	r2, lr, #1
 801f3fa:	1c6e      	adds	r6, r5, #1
 801f3fc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801f400:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801f404:	fa1f fc8c 	uxth.w	ip, ip
 801f408:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f40c:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801f410:	ea46 0e0e 	orr.w	lr, r6, lr
 801f414:	f10c 0601 	add.w	r6, ip, #1
 801f418:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801f41c:	0976      	lsrs	r6, r6, #5
 801f41e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f422:	9a02      	ldr	r2, [sp, #8]
 801f424:	ea4e 0e06 	orr.w	lr, lr, r6
 801f428:	f824 e002 	strh.w	lr, [r4, r2]
 801f42c:	e7b3      	b.n	801f396 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801f42e:	f04f 0800 	mov.w	r8, #0
 801f432:	eba3 0208 	sub.w	r2, r3, r8
 801f436:	2a00      	cmp	r2, #0
 801f438:	f77f af35 	ble.w	801f2a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f43c:	9e00      	ldr	r6, [sp, #0]
 801f43e:	1402      	asrs	r2, r0, #16
 801f440:	140d      	asrs	r5, r1, #16
 801f442:	fb06 2505 	mla	r5, r6, r5, r2
 801f446:	9e01      	ldr	r6, [sp, #4]
 801f448:	086a      	lsrs	r2, r5, #1
 801f44a:	5cb2      	ldrb	r2, [r6, r2]
 801f44c:	07ed      	lsls	r5, r5, #31
 801f44e:	bf54      	ite	pl
 801f450:	f002 020f 	andpl.w	r2, r2, #15
 801f454:	1112      	asrmi	r2, r2, #4
 801f456:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f45a:	b2d2      	uxtb	r2, r2
 801f45c:	b1c2      	cbz	r2, 801f490 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f45e:	9d04      	ldr	r5, [sp, #16]
 801f460:	436a      	muls	r2, r5
 801f462:	1c55      	adds	r5, r2, #1
 801f464:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801f468:	4d2d      	ldr	r5, [pc, #180]	@ (801f520 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801f46a:	1212      	asrs	r2, r2, #8
 801f46c:	682e      	ldr	r6, [r5, #0]
 801f46e:	2aff      	cmp	r2, #255	@ 0xff
 801f470:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801f474:	d113      	bne.n	801f49e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f476:	0972      	lsrs	r2, r6, #5
 801f478:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801f47c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f480:	f025 0507 	bic.w	r5, r5, #7
 801f484:	4315      	orrs	r5, r2
 801f486:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f48a:	4335      	orrs	r5, r6
 801f48c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801f490:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f492:	f108 0801 	add.w	r8, r8, #1
 801f496:	4410      	add	r0, r2
 801f498:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f49a:	4411      	add	r1, r2
 801f49c:	e7c9      	b.n	801f432 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f49e:	fa1f fa82 	uxth.w	sl, r2
 801f4a2:	43d2      	mvns	r2, r2
 801f4a4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801f4a8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f4ac:	fb17 f70a 	smulbb	r7, r7, sl
 801f4b0:	b2f6      	uxtb	r6, r6
 801f4b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f4b6:	fb16 f60a 	smulbb	r6, r6, sl
 801f4ba:	b2d2      	uxtb	r2, r2
 801f4bc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f4c0:	fb0c 7c02 	mla	ip, ip, r2, r7
 801f4c4:	b2ed      	uxtb	r5, r5
 801f4c6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801f4ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f4ce:	fb15 f50a 	smulbb	r5, r5, sl
 801f4d2:	fa5f fe8e 	uxtb.w	lr, lr
 801f4d6:	fb0e 6602 	mla	r6, lr, r2, r6
 801f4da:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f4de:	fb07 5702 	mla	r7, r7, r2, r5
 801f4e2:	fa1f fc8c 	uxth.w	ip, ip
 801f4e6:	b2b6      	uxth	r6, r6
 801f4e8:	f10c 0201 	add.w	r2, ip, #1
 801f4ec:	1c75      	adds	r5, r6, #1
 801f4ee:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f4f2:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f4f6:	b2bf      	uxth	r7, r7
 801f4f8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f4fc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f500:	ea45 0c0c 	orr.w	ip, r5, ip
 801f504:	1c7d      	adds	r5, r7, #1
 801f506:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801f50a:	096d      	lsrs	r5, r5, #5
 801f50c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f510:	ea4c 0c05 	orr.w	ip, ip, r5
 801f514:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801f518:	e7ba      	b.n	801f490 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f51a:	b007      	add	sp, #28
 801f51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f520:	20011f3c 	.word	0x20011f3c

0801f524 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f524:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f52c:	b087      	sub	sp, #28
 801f52e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f530:	9101      	str	r1, [sp, #4]
 801f532:	6841      	ldr	r1, [r0, #4]
 801f534:	9205      	str	r2, [sp, #20]
 801f536:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f53a:	fb01 2404 	mla	r4, r1, r4, r2
 801f53e:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801f542:	6802      	ldr	r2, [r0, #0]
 801f544:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 801f838 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801f548:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f54c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f550:	3201      	adds	r2, #1
 801f552:	f022 0201 	bic.w	r2, r2, #1
 801f556:	9202      	str	r2, [sp, #8]
 801f558:	f8db 2000 	ldr.w	r2, [fp]
 801f55c:	9203      	str	r2, [sp, #12]
 801f55e:	9a01      	ldr	r2, [sp, #4]
 801f560:	2a00      	cmp	r2, #0
 801f562:	dc03      	bgt.n	801f56c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f564:	9a05      	ldr	r2, [sp, #20]
 801f566:	2a00      	cmp	r2, #0
 801f568:	f340 8162 	ble.w	801f830 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f56c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f56e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f572:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f576:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f578:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f57c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f580:	2b00      	cmp	r3, #0
 801f582:	dd0e      	ble.n	801f5a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f584:	1402      	asrs	r2, r0, #16
 801f586:	d405      	bmi.n	801f594 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f588:	42ba      	cmp	r2, r7
 801f58a:	da03      	bge.n	801f594 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f58c:	140a      	asrs	r2, r1, #16
 801f58e:	d401      	bmi.n	801f594 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f590:	42b2      	cmp	r2, r6
 801f592:	db07      	blt.n	801f5a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f594:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f596:	3b01      	subs	r3, #1
 801f598:	4410      	add	r0, r2
 801f59a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f59c:	3402      	adds	r4, #2
 801f59e:	4411      	add	r1, r2
 801f5a0:	e7ee      	b.n	801f580 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f5a2:	d017      	beq.n	801f5d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f5a4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f5a6:	1e5a      	subs	r2, r3, #1
 801f5a8:	fb05 0502 	mla	r5, r5, r2, r0
 801f5ac:	142d      	asrs	r5, r5, #16
 801f5ae:	d409      	bmi.n	801f5c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f5b0:	42bd      	cmp	r5, r7
 801f5b2:	da07      	bge.n	801f5c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f5b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f5b6:	fb05 1202 	mla	r2, r5, r2, r1
 801f5ba:	1412      	asrs	r2, r2, #16
 801f5bc:	d402      	bmi.n	801f5c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f5be:	42b2      	cmp	r2, r6
 801f5c0:	f2c0 80c3 	blt.w	801f74a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801f5c4:	2500      	movs	r5, #0
 801f5c6:	195a      	adds	r2, r3, r5
 801f5c8:	2a00      	cmp	r2, #0
 801f5ca:	dc3f      	bgt.n	801f64c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f5cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f5d4:	9b01      	ldr	r3, [sp, #4]
 801f5d6:	2b00      	cmp	r3, #0
 801f5d8:	f340 812a 	ble.w	801f830 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f5dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f5e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5ec:	eeb0 6a62 	vmov.f32	s12, s5
 801f5f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f600:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f604:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f608:	eeb0 6a43 	vmov.f32	s12, s6
 801f60c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f610:	ee12 2a90 	vmov	r2, s5
 801f614:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f618:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f61a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f61e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f622:	ee13 2a10 	vmov	r2, s6
 801f626:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f62a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f62e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f632:	9314      	str	r3, [sp, #80]	@ 0x50
 801f634:	9b01      	ldr	r3, [sp, #4]
 801f636:	9a05      	ldr	r2, [sp, #20]
 801f638:	3b01      	subs	r3, #1
 801f63a:	9301      	str	r3, [sp, #4]
 801f63c:	eeb0 3a67 	vmov.f32	s6, s15
 801f640:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f642:	eef0 2a47 	vmov.f32	s5, s14
 801f646:	bf08      	it	eq
 801f648:	4613      	moveq	r3, r2
 801f64a:	e788      	b.n	801f55e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f64c:	1406      	asrs	r6, r0, #16
 801f64e:	d42c      	bmi.n	801f6aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f650:	f8db 2008 	ldr.w	r2, [fp, #8]
 801f654:	42b2      	cmp	r2, r6
 801f656:	dd28      	ble.n	801f6aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f658:	140f      	asrs	r7, r1, #16
 801f65a:	d426      	bmi.n	801f6aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f65c:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f660:	42ba      	cmp	r2, r7
 801f662:	dd22      	ble.n	801f6aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f664:	9a02      	ldr	r2, [sp, #8]
 801f666:	fb07 6602 	mla	r6, r7, r2, r6
 801f66a:	9f03      	ldr	r7, [sp, #12]
 801f66c:	0872      	lsrs	r2, r6, #1
 801f66e:	5cba      	ldrb	r2, [r7, r2]
 801f670:	07f6      	lsls	r6, r6, #31
 801f672:	bf54      	ite	pl
 801f674:	f002 020f 	andpl.w	r2, r2, #15
 801f678:	1112      	asrmi	r2, r2, #4
 801f67a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f67e:	b2d2      	uxtb	r2, r2
 801f680:	2aff      	cmp	r2, #255	@ 0xff
 801f682:	d118      	bne.n	801f6b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f684:	f06f 0601 	mvn.w	r6, #1
 801f688:	f8d8 2000 	ldr.w	r2, [r8]
 801f68c:	fb06 f705 	mul.w	r7, r6, r5
 801f690:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801f694:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801f698:	0956      	lsrs	r6, r2, #5
 801f69a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f69e:	ea4c 0606 	orr.w	r6, ip, r6
 801f6a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f6a6:	4316      	orrs	r6, r2
 801f6a8:	53e6      	strh	r6, [r4, r7]
 801f6aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f6ac:	3d01      	subs	r5, #1
 801f6ae:	4410      	add	r0, r2
 801f6b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f6b2:	4411      	add	r1, r2
 801f6b4:	e787      	b.n	801f5c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f6b6:	2a00      	cmp	r2, #0
 801f6b8:	d0f7      	beq.n	801f6aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f6ba:	f06f 0601 	mvn.w	r6, #1
 801f6be:	fa1f f982 	uxth.w	r9, r2
 801f6c2:	43d2      	mvns	r2, r2
 801f6c4:	436e      	muls	r6, r5
 801f6c6:	f8d8 c000 	ldr.w	ip, [r8]
 801f6ca:	f834 e006 	ldrh.w	lr, [r4, r6]
 801f6ce:	9604      	str	r6, [sp, #16]
 801f6d0:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801f6d4:	fb16 f609 	smulbb	r6, r6, r9
 801f6d8:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801f6dc:	fa5f fc8c 	uxtb.w	ip, ip
 801f6e0:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f6e4:	fb1c fc09 	smulbb	ip, ip, r9
 801f6e8:	b2d2      	uxtb	r2, r2
 801f6ea:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f6ee:	fb07 6702 	mla	r7, r7, r2, r6
 801f6f2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f6f6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f6fa:	fb1a fa09 	smulbb	sl, sl, r9
 801f6fe:	fa5f fe8e 	uxtb.w	lr, lr
 801f702:	fb0e cc02 	mla	ip, lr, r2, ip
 801f706:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f70a:	fb06 a602 	mla	r6, r6, r2, sl
 801f70e:	b2bf      	uxth	r7, r7
 801f710:	fa1f fc8c 	uxth.w	ip, ip
 801f714:	1c7a      	adds	r2, r7, #1
 801f716:	f10c 0a01 	add.w	sl, ip, #1
 801f71a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f71e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f722:	b2b6      	uxth	r6, r6
 801f724:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f728:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f72c:	ea4a 0707 	orr.w	r7, sl, r7
 801f730:	f106 0a01 	add.w	sl, r6, #1
 801f734:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f738:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f73c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f740:	9a04      	ldr	r2, [sp, #16]
 801f742:	ea47 070a 	orr.w	r7, r7, sl
 801f746:	52a7      	strh	r7, [r4, r2]
 801f748:	e7af      	b.n	801f6aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f74a:	f04f 0e00 	mov.w	lr, #0
 801f74e:	eba3 020e 	sub.w	r2, r3, lr
 801f752:	2a00      	cmp	r2, #0
 801f754:	f77f af3a 	ble.w	801f5cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f758:	9e02      	ldr	r6, [sp, #8]
 801f75a:	1402      	asrs	r2, r0, #16
 801f75c:	140d      	asrs	r5, r1, #16
 801f75e:	fb06 2505 	mla	r5, r6, r5, r2
 801f762:	9e03      	ldr	r6, [sp, #12]
 801f764:	086a      	lsrs	r2, r5, #1
 801f766:	5cb2      	ldrb	r2, [r6, r2]
 801f768:	07ed      	lsls	r5, r5, #31
 801f76a:	bf54      	ite	pl
 801f76c:	f002 020f 	andpl.w	r2, r2, #15
 801f770:	1112      	asrmi	r2, r2, #4
 801f772:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f776:	b2d2      	uxtb	r2, r2
 801f778:	2aff      	cmp	r2, #255	@ 0xff
 801f77a:	d115      	bne.n	801f7a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f77c:	f8d8 5000 	ldr.w	r5, [r8]
 801f780:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801f784:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801f788:	096a      	lsrs	r2, r5, #5
 801f78a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f78e:	4332      	orrs	r2, r6
 801f790:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f794:	432a      	orrs	r2, r5
 801f796:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801f79a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f79c:	f10e 0e01 	add.w	lr, lr, #1
 801f7a0:	4410      	add	r0, r2
 801f7a2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f7a4:	4411      	add	r1, r2
 801f7a6:	e7d2      	b.n	801f74e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f7a8:	2a00      	cmp	r2, #0
 801f7aa:	d0f6      	beq.n	801f79a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f7ac:	fa1f f982 	uxth.w	r9, r2
 801f7b0:	43d2      	mvns	r2, r2
 801f7b2:	f8d8 7000 	ldr.w	r7, [r8]
 801f7b6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f7ba:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801f7be:	fb15 f509 	smulbb	r5, r5, r9
 801f7c2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f7c6:	b2ff      	uxtb	r7, r7
 801f7c8:	ea4f 262c 	mov.w	r6, ip, asr #8
 801f7cc:	fb17 f709 	smulbb	r7, r7, r9
 801f7d0:	b2d2      	uxtb	r2, r2
 801f7d2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f7d6:	fb06 5602 	mla	r6, r6, r2, r5
 801f7da:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f7de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f7e2:	fb1a fa09 	smulbb	sl, sl, r9
 801f7e6:	fa5f fc8c 	uxtb.w	ip, ip
 801f7ea:	fb0c 7702 	mla	r7, ip, r2, r7
 801f7ee:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f7f2:	fb05 a502 	mla	r5, r5, r2, sl
 801f7f6:	b2b6      	uxth	r6, r6
 801f7f8:	b2bf      	uxth	r7, r7
 801f7fa:	1c72      	adds	r2, r6, #1
 801f7fc:	f107 0a01 	add.w	sl, r7, #1
 801f800:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f804:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f808:	b2ad      	uxth	r5, r5
 801f80a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f80e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f812:	ea4a 0606 	orr.w	r6, sl, r6
 801f816:	f105 0a01 	add.w	sl, r5, #1
 801f81a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f81e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f822:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f826:	ea46 060a 	orr.w	r6, r6, sl
 801f82a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801f82e:	e7b4      	b.n	801f79a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f830:	b007      	add	sp, #28
 801f832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f836:	bf00      	nop
 801f838:	20011f3c 	.word	0x20011f3c

0801f83c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801f83c:	4770      	bx	lr

0801f83e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801f83e:	4770      	bx	lr

0801f840 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801f840:	4770      	bx	lr

0801f842 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801f842:	4770      	bx	lr

0801f844 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f844:	4770      	bx	lr

0801f846 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f846:	4770      	bx	lr

0801f848 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f848:	4770      	bx	lr

0801f84a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f84a:	4770      	bx	lr

0801f84c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f84c:	4770      	bx	lr

0801f84e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f84e:	4770      	bx	lr

0801f850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f850:	4770      	bx	lr

0801f852 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f852:	4770      	bx	lr

0801f854 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f854:	4770      	bx	lr

0801f856 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f856:	4770      	bx	lr

0801f858 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f858:	4770      	bx	lr

0801f85a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f85a:	4770      	bx	lr

0801f85c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f85c:	4770      	bx	lr

0801f85e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f85e:	4770      	bx	lr

0801f860 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f860:	4770      	bx	lr

0801f862 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f862:	4770      	bx	lr

0801f864 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f864:	4770      	bx	lr

0801f866 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f866:	4770      	bx	lr

0801f868 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f868:	4770      	bx	lr

0801f86a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f86a:	4770      	bx	lr

0801f86c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f86c:	4770      	bx	lr

0801f86e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f86e:	4770      	bx	lr

0801f870 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f870:	4770      	bx	lr

0801f872 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f872:	4770      	bx	lr

0801f874 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f874:	4770      	bx	lr

0801f876 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f876:	4770      	bx	lr

0801f878 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f878:	4770      	bx	lr

0801f87a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f87a:	4770      	bx	lr

0801f87c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f880:	b088      	sub	sp, #32
 801f882:	ac08      	add	r4, sp, #32
 801f884:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f888:	4606      	mov	r6, r0
 801f88a:	4620      	mov	r0, r4
 801f88c:	4688      	mov	r8, r1
 801f88e:	4691      	mov	r9, r2
 801f890:	f7fd fc32 	bl	801d0f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f894:	6833      	ldr	r3, [r6, #0]
 801f896:	4605      	mov	r5, r0
 801f898:	4620      	mov	r0, r4
 801f89a:	699f      	ldr	r7, [r3, #24]
 801f89c:	f7fd fb3a 	bl	801cf14 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f8a0:	4682      	mov	sl, r0
 801f8a2:	4620      	mov	r0, r4
 801f8a4:	f7fd fb6a 	bl	801cf7c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f8a8:	9500      	str	r5, [sp, #0]
 801f8aa:	e9cd a001 	strd	sl, r0, [sp, #4]
 801f8ae:	464b      	mov	r3, r9
 801f8b0:	a806      	add	r0, sp, #24
 801f8b2:	4642      	mov	r2, r8
 801f8b4:	4631      	mov	r1, r6
 801f8b6:	47b8      	blx	r7
 801f8b8:	4628      	mov	r0, r5
 801f8ba:	b008      	add	sp, #32
 801f8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f8c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f8c4:	2300      	movs	r3, #0
 801f8c6:	9300      	str	r3, [sp, #0]
 801f8c8:	4b3d      	ldr	r3, [pc, #244]	@ (801f9c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801f8ca:	781b      	ldrb	r3, [r3, #0]
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	d137      	bne.n	801f940 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f8d0:	4a3c      	ldr	r2, [pc, #240]	@ (801f9c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f8d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f8d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d132      	bne.n	801f944 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f8de:	4b3a      	ldr	r3, [pc, #232]	@ (801f9c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f8e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f8e4:	6808      	ldr	r0, [r1, #0]
 801f8e6:	6849      	ldr	r1, [r1, #4]
 801f8e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f8ec:	ac02      	add	r4, sp, #8
 801f8ee:	ab02      	add	r3, sp, #8
 801f8f0:	c303      	stmia	r3!, {r0, r1}
 801f8f2:	4669      	mov	r1, sp
 801f8f4:	4620      	mov	r0, r4
 801f8f6:	f7fa f8a3 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f8fa:	4668      	mov	r0, sp
 801f8fc:	f7fa f878 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f900:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f904:	f8bd 2000 	ldrh.w	r2, [sp]
 801f908:	4d30      	ldr	r5, [pc, #192]	@ (801f9cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f90a:	4413      	add	r3, r2
 801f90c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f910:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f914:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f918:	6828      	ldr	r0, [r5, #0]
 801f91a:	4413      	add	r3, r2
 801f91c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f920:	6803      	ldr	r3, [r0, #0]
 801f922:	462f      	mov	r7, r5
 801f924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f926:	4798      	blx	r3
 801f928:	f010 0f01 	tst.w	r0, #1
 801f92c:	d00c      	beq.n	801f948 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f92e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f932:	6828      	ldr	r0, [r5, #0]
 801f934:	6803      	ldr	r3, [r0, #0]
 801f936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f938:	4798      	blx	r3
 801f93a:	b004      	add	sp, #16
 801f93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f940:	4a21      	ldr	r2, [pc, #132]	@ (801f9c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f942:	e7c6      	b.n	801f8d2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f944:	4b1f      	ldr	r3, [pc, #124]	@ (801f9c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f946:	e7cb      	b.n	801f8e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f948:	6838      	ldr	r0, [r7, #0]
 801f94a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f94e:	6803      	ldr	r3, [r0, #0]
 801f950:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801f954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f956:	4798      	blx	r3
 801f958:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f95c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f960:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f964:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801f968:	fb16 3602 	smlabb	r6, r6, r2, r3
 801f96c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f970:	6838      	ldr	r0, [r7, #0]
 801f972:	6803      	ldr	r3, [r0, #0]
 801f974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f976:	4798      	blx	r3
 801f978:	4a12      	ldr	r2, [pc, #72]	@ (801f9c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f97a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801f97e:	4691      	mov	r9, r2
 801f980:	8813      	ldrh	r3, [r2, #0]
 801f982:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f986:	435d      	muls	r5, r3
 801f988:	fb03 1404 	mla	r4, r3, r4, r1
 801f98c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f990:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f994:	6838      	ldr	r0, [r7, #0]
 801f996:	42ac      	cmp	r4, r5
 801f998:	6803      	ldr	r3, [r0, #0]
 801f99a:	d20e      	bcs.n	801f9ba <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f99c:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 801f9a0:	4632      	mov	r2, r6
 801f9a2:	4643      	mov	r3, r8
 801f9a4:	4621      	mov	r1, r4
 801f9a6:	47d0      	blx	sl
 801f9a8:	f8b9 3000 	ldrh.w	r3, [r9]
 801f9ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f9b0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f9b4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f9b8:	e7ec      	b.n	801f994 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801f9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9bc:	4798      	blx	r3
 801f9be:	e7bc      	b.n	801f93a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f9c0:	20011f24 	.word	0x20011f24
 801f9c4:	20011f26 	.word	0x20011f26
 801f9c8:	20011f28 	.word	0x20011f28
 801f9cc:	20011f2c 	.word	0x20011f2c

0801f9d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9d4:	b08b      	sub	sp, #44	@ 0x2c
 801f9d6:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801f9da:	460f      	mov	r7, r1
 801f9dc:	4616      	mov	r6, r2
 801f9de:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801f9e2:	f1bb 0f00 	cmp.w	fp, #0
 801f9e6:	d04a      	beq.n	801fa7e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f9e8:	6810      	ldr	r0, [r2, #0]
 801f9ea:	6851      	ldr	r1, [r2, #4]
 801f9ec:	ad06      	add	r5, sp, #24
 801f9ee:	c503      	stmia	r5!, {r0, r1}
 801f9f0:	6818      	ldr	r0, [r3, #0]
 801f9f2:	6859      	ldr	r1, [r3, #4]
 801f9f4:	ad08      	add	r5, sp, #32
 801f9f6:	c503      	stmia	r5!, {r0, r1}
 801f9f8:	a806      	add	r0, sp, #24
 801f9fa:	f7f9 fff9 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f9fe:	4631      	mov	r1, r6
 801fa00:	a808      	add	r0, sp, #32
 801fa02:	f7fa f81d 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fa06:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fa0a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801fa0e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801fa12:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801fa16:	fb16 2103 	smlabb	r1, r6, r3, r2
 801fa1a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801fa1e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fa22:	4f60      	ldr	r7, [pc, #384]	@ (801fba4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801fa24:	440a      	add	r2, r1
 801fa26:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fa2a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fa2e:	6838      	ldr	r0, [r7, #0]
 801fa30:	4413      	add	r3, r2
 801fa32:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801fa36:	6803      	ldr	r3, [r0, #0]
 801fa38:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801fa3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fa3e:	4798      	blx	r3
 801fa40:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801fa44:	46b9      	mov	r9, r7
 801fa46:	d11d      	bne.n	801fa84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801fa48:	b9fc      	cbnz	r4, 801fa8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801fa4a:	f010 0f01 	tst.w	r0, #1
 801fa4e:	d01c      	beq.n	801fa8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801fa50:	2700      	movs	r7, #0
 801fa52:	f8d9 0000 	ldr.w	r0, [r9]
 801fa56:	b2ad      	uxth	r5, r5
 801fa58:	6801      	ldr	r1, [r0, #0]
 801fa5a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801fa5e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801fa62:	f8cd b00c 	str.w	fp, [sp, #12]
 801fa66:	9402      	str	r4, [sp, #8]
 801fa68:	fa1f f488 	uxth.w	r4, r8
 801fa6c:	9501      	str	r5, [sp, #4]
 801fa6e:	9400      	str	r4, [sp, #0]
 801fa70:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 801fa72:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801fa76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fa7a:	4631      	mov	r1, r6
 801fa7c:	47a0      	blx	r4
 801fa7e:	b00b      	add	sp, #44	@ 0x2c
 801fa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa84:	f010 0f04 	tst.w	r0, #4
 801fa88:	e7e1      	b.n	801fa4e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801fa8a:	f8d9 0000 	ldr.w	r0, [r9]
 801fa8e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801fa92:	6803      	ldr	r3, [r0, #0]
 801fa94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa96:	4798      	blx	r3
 801fa98:	4b43      	ldr	r3, [pc, #268]	@ (801fba8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801fa9a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801fa9e:	881a      	ldrh	r2, [r3, #0]
 801faa0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801faa4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801faa8:	fb02 1404 	mla	r4, r2, r4, r1
 801faac:	469a      	mov	sl, r3
 801faae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801fab2:	fb05 f502 	mul.w	r5, r5, r2
 801fab6:	d059      	beq.n	801fb6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801fab8:	469e      	mov	lr, r3
 801faba:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801fabe:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801fac2:	fa1f f28b 	uxth.w	r2, fp
 801fac6:	fa1f f989 	uxth.w	r9, r9
 801faca:	42ac      	cmp	r4, r5
 801facc:	d264      	bcs.n	801fb98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801face:	eb04 0a07 	add.w	sl, r4, r7
 801fad2:	4554      	cmp	r4, sl
 801fad4:	d23d      	bcs.n	801fb52 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801fad6:	8821      	ldrh	r1, [r4, #0]
 801fad8:	f836 3b02 	ldrh.w	r3, [r6], #2
 801fadc:	1208      	asrs	r0, r1, #8
 801fade:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801fae2:	fb10 f009 	smulbb	r0, r0, r9
 801fae6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801faea:	00c9      	lsls	r1, r1, #3
 801faec:	b2c9      	uxtb	r1, r1
 801faee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801faf2:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801faf6:	fb11 f109 	smulbb	r1, r1, r9
 801fafa:	fb1b fb09 	smulbb	fp, fp, r9
 801fafe:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fb02:	fb0c 0c02 	mla	ip, ip, r2, r0
 801fb06:	10d8      	asrs	r0, r3, #3
 801fb08:	00db      	lsls	r3, r3, #3
 801fb0a:	b2db      	uxtb	r3, r3
 801fb0c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801fb10:	fb03 1302 	mla	r3, r3, r2, r1
 801fb14:	fb00 b002 	mla	r0, r0, r2, fp
 801fb18:	fa1f fc8c 	uxth.w	ip, ip
 801fb1c:	f10c 0b01 	add.w	fp, ip, #1
 801fb20:	b29b      	uxth	r3, r3
 801fb22:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fb26:	b280      	uxth	r0, r0
 801fb28:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801fb2c:	f103 0c01 	add.w	ip, r3, #1
 801fb30:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801fb34:	1c43      	adds	r3, r0, #1
 801fb36:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fb3a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801fb3e:	0940      	lsrs	r0, r0, #5
 801fb40:	ea4c 0c0b 	orr.w	ip, ip, fp
 801fb44:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fb48:	ea4c 0c00 	orr.w	ip, ip, r0
 801fb4c:	f824 cb02 	strh.w	ip, [r4], #2
 801fb50:	e7bf      	b.n	801fad2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801fb52:	f8be 3000 	ldrh.w	r3, [lr]
 801fb56:	eba3 0308 	sub.w	r3, r3, r8
 801fb5a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fb5e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801fb62:	eba3 0308 	sub.w	r3, r3, r8
 801fb66:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801fb6a:	e7ae      	b.n	801faca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801fb6c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801fb70:	f8d9 0000 	ldr.w	r0, [r9]
 801fb74:	42ac      	cmp	r4, r5
 801fb76:	6803      	ldr	r3, [r0, #0]
 801fb78:	d20e      	bcs.n	801fb98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801fb7a:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 801fb7e:	4632      	mov	r2, r6
 801fb80:	463b      	mov	r3, r7
 801fb82:	4621      	mov	r1, r4
 801fb84:	47c0      	blx	r8
 801fb86:	f8ba 3000 	ldrh.w	r3, [sl]
 801fb8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fb8e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801fb92:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801fb96:	e7eb      	b.n	801fb70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801fb98:	4b02      	ldr	r3, [pc, #8]	@ (801fba4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801fb9a:	6818      	ldr	r0, [r3, #0]
 801fb9c:	6803      	ldr	r3, [r0, #0]
 801fb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fba0:	4798      	blx	r3
 801fba2:	e76c      	b.n	801fa7e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801fba4:	20011f2c 	.word	0x20011f2c
 801fba8:	20011f26 	.word	0x20011f26

0801fbac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801fbac:	b510      	push	{r4, lr}
 801fbae:	4604      	mov	r4, r0
 801fbb0:	2104      	movs	r1, #4
 801fbb2:	f00b ff56 	bl	802ba62 <_ZdlPvj>
 801fbb6:	4620      	mov	r0, r4
 801fbb8:	bd10      	pop	{r4, pc}

0801fbba <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801fbba:	b510      	push	{r4, lr}
 801fbbc:	4604      	mov	r4, r0
 801fbbe:	2104      	movs	r1, #4
 801fbc0:	f00b ff4f 	bl	802ba62 <_ZdlPvj>
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	bd10      	pop	{r4, pc}

0801fbc8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801fbc8:	b510      	push	{r4, lr}
 801fbca:	4604      	mov	r4, r0
 801fbcc:	f640 0144 	movw	r1, #2116	@ 0x844
 801fbd0:	f00b ff47 	bl	802ba62 <_ZdlPvj>
 801fbd4:	4620      	mov	r0, r4
 801fbd6:	bd10      	pop	{r4, pc}

0801fbd8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801fbd8:	b510      	push	{r4, lr}
 801fbda:	4604      	mov	r4, r0
 801fbdc:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801fbe0:	f00b ff3f 	bl	802ba62 <_ZdlPvj>
 801fbe4:	4620      	mov	r0, r4
 801fbe6:	bd10      	pop	{r4, pc}

0801fbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fbe8:	b510      	push	{r4, lr}
 801fbea:	4604      	mov	r4, r0
 801fbec:	2104      	movs	r1, #4
 801fbee:	f00b ff38 	bl	802ba62 <_ZdlPvj>
 801fbf2:	4620      	mov	r0, r4
 801fbf4:	bd10      	pop	{r4, pc}

0801fbf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801fbf6:	b510      	push	{r4, lr}
 801fbf8:	4604      	mov	r4, r0
 801fbfa:	2104      	movs	r1, #4
 801fbfc:	f00b ff31 	bl	802ba62 <_ZdlPvj>
 801fc00:	4620      	mov	r0, r4
 801fc02:	bd10      	pop	{r4, pc}

0801fc04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fc04:	b510      	push	{r4, lr}
 801fc06:	4604      	mov	r4, r0
 801fc08:	2104      	movs	r1, #4
 801fc0a:	f00b ff2a 	bl	802ba62 <_ZdlPvj>
 801fc0e:	4620      	mov	r0, r4
 801fc10:	bd10      	pop	{r4, pc}

0801fc12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801fc12:	b510      	push	{r4, lr}
 801fc14:	4604      	mov	r4, r0
 801fc16:	2104      	movs	r1, #4
 801fc18:	f00b ff23 	bl	802ba62 <_ZdlPvj>
 801fc1c:	4620      	mov	r0, r4
 801fc1e:	bd10      	pop	{r4, pc}

0801fc20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fc20:	b510      	push	{r4, lr}
 801fc22:	4604      	mov	r4, r0
 801fc24:	2104      	movs	r1, #4
 801fc26:	f00b ff1c 	bl	802ba62 <_ZdlPvj>
 801fc2a:	4620      	mov	r0, r4
 801fc2c:	bd10      	pop	{r4, pc}

0801fc2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801fc2e:	b510      	push	{r4, lr}
 801fc30:	4604      	mov	r4, r0
 801fc32:	2104      	movs	r1, #4
 801fc34:	f00b ff15 	bl	802ba62 <_ZdlPvj>
 801fc38:	4620      	mov	r0, r4
 801fc3a:	bd10      	pop	{r4, pc}

0801fc3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fc3c:	b510      	push	{r4, lr}
 801fc3e:	4604      	mov	r4, r0
 801fc40:	2104      	movs	r1, #4
 801fc42:	f00b ff0e 	bl	802ba62 <_ZdlPvj>
 801fc46:	4620      	mov	r0, r4
 801fc48:	bd10      	pop	{r4, pc}

0801fc4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fc4a:	b510      	push	{r4, lr}
 801fc4c:	4604      	mov	r4, r0
 801fc4e:	2104      	movs	r1, #4
 801fc50:	f00b ff07 	bl	802ba62 <_ZdlPvj>
 801fc54:	4620      	mov	r0, r4
 801fc56:	bd10      	pop	{r4, pc}

0801fc58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fc58:	b510      	push	{r4, lr}
 801fc5a:	4604      	mov	r4, r0
 801fc5c:	2104      	movs	r1, #4
 801fc5e:	f00b ff00 	bl	802ba62 <_ZdlPvj>
 801fc62:	4620      	mov	r0, r4
 801fc64:	bd10      	pop	{r4, pc}

0801fc66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fc66:	b510      	push	{r4, lr}
 801fc68:	4604      	mov	r4, r0
 801fc6a:	2104      	movs	r1, #4
 801fc6c:	f00b fef9 	bl	802ba62 <_ZdlPvj>
 801fc70:	4620      	mov	r0, r4
 801fc72:	bd10      	pop	{r4, pc}

0801fc74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fc74:	b510      	push	{r4, lr}
 801fc76:	4604      	mov	r4, r0
 801fc78:	2104      	movs	r1, #4
 801fc7a:	f00b fef2 	bl	802ba62 <_ZdlPvj>
 801fc7e:	4620      	mov	r0, r4
 801fc80:	bd10      	pop	{r4, pc}

0801fc82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fc82:	b510      	push	{r4, lr}
 801fc84:	4604      	mov	r4, r0
 801fc86:	2104      	movs	r1, #4
 801fc88:	f00b feeb 	bl	802ba62 <_ZdlPvj>
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	bd10      	pop	{r4, pc}

0801fc90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fc90:	b510      	push	{r4, lr}
 801fc92:	4604      	mov	r4, r0
 801fc94:	2104      	movs	r1, #4
 801fc96:	f00b fee4 	bl	802ba62 <_ZdlPvj>
 801fc9a:	4620      	mov	r0, r4
 801fc9c:	bd10      	pop	{r4, pc}

0801fc9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801fc9e:	b510      	push	{r4, lr}
 801fca0:	4604      	mov	r4, r0
 801fca2:	2104      	movs	r1, #4
 801fca4:	f00b fedd 	bl	802ba62 <_ZdlPvj>
 801fca8:	4620      	mov	r0, r4
 801fcaa:	bd10      	pop	{r4, pc}

0801fcac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fcac:	b510      	push	{r4, lr}
 801fcae:	4604      	mov	r4, r0
 801fcb0:	2104      	movs	r1, #4
 801fcb2:	f00b fed6 	bl	802ba62 <_ZdlPvj>
 801fcb6:	4620      	mov	r0, r4
 801fcb8:	bd10      	pop	{r4, pc}

0801fcba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fcba:	b510      	push	{r4, lr}
 801fcbc:	4604      	mov	r4, r0
 801fcbe:	2104      	movs	r1, #4
 801fcc0:	f00b fecf 	bl	802ba62 <_ZdlPvj>
 801fcc4:	4620      	mov	r0, r4
 801fcc6:	bd10      	pop	{r4, pc}

0801fcc8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801fcc8:	b510      	push	{r4, lr}
 801fcca:	4604      	mov	r4, r0
 801fccc:	2104      	movs	r1, #4
 801fcce:	f00b fec8 	bl	802ba62 <_ZdlPvj>
 801fcd2:	4620      	mov	r0, r4
 801fcd4:	bd10      	pop	{r4, pc}

0801fcd6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801fcd6:	b510      	push	{r4, lr}
 801fcd8:	4604      	mov	r4, r0
 801fcda:	2104      	movs	r1, #4
 801fcdc:	f00b fec1 	bl	802ba62 <_ZdlPvj>
 801fce0:	4620      	mov	r0, r4
 801fce2:	bd10      	pop	{r4, pc}

0801fce4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fce4:	b510      	push	{r4, lr}
 801fce6:	4604      	mov	r4, r0
 801fce8:	2104      	movs	r1, #4
 801fcea:	f00b feba 	bl	802ba62 <_ZdlPvj>
 801fcee:	4620      	mov	r0, r4
 801fcf0:	bd10      	pop	{r4, pc}

0801fcf2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fcf2:	b510      	push	{r4, lr}
 801fcf4:	4604      	mov	r4, r0
 801fcf6:	2104      	movs	r1, #4
 801fcf8:	f00b feb3 	bl	802ba62 <_ZdlPvj>
 801fcfc:	4620      	mov	r0, r4
 801fcfe:	bd10      	pop	{r4, pc}

0801fd00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801fd00:	b510      	push	{r4, lr}
 801fd02:	4604      	mov	r4, r0
 801fd04:	2104      	movs	r1, #4
 801fd06:	f00b feac 	bl	802ba62 <_ZdlPvj>
 801fd0a:	4620      	mov	r0, r4
 801fd0c:	bd10      	pop	{r4, pc}

0801fd0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801fd0e:	b510      	push	{r4, lr}
 801fd10:	4604      	mov	r4, r0
 801fd12:	2104      	movs	r1, #4
 801fd14:	f00b fea5 	bl	802ba62 <_ZdlPvj>
 801fd18:	4620      	mov	r0, r4
 801fd1a:	bd10      	pop	{r4, pc}

0801fd1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801fd1c:	b510      	push	{r4, lr}
 801fd1e:	4604      	mov	r4, r0
 801fd20:	2104      	movs	r1, #4
 801fd22:	f00b fe9e 	bl	802ba62 <_ZdlPvj>
 801fd26:	4620      	mov	r0, r4
 801fd28:	bd10      	pop	{r4, pc}

0801fd2a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801fd2a:	b510      	push	{r4, lr}
 801fd2c:	4604      	mov	r4, r0
 801fd2e:	2104      	movs	r1, #4
 801fd30:	f00b fe97 	bl	802ba62 <_ZdlPvj>
 801fd34:	4620      	mov	r0, r4
 801fd36:	bd10      	pop	{r4, pc}

0801fd38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801fd38:	b510      	push	{r4, lr}
 801fd3a:	4604      	mov	r4, r0
 801fd3c:	2104      	movs	r1, #4
 801fd3e:	f00b fe90 	bl	802ba62 <_ZdlPvj>
 801fd42:	4620      	mov	r0, r4
 801fd44:	bd10      	pop	{r4, pc}

0801fd46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801fd46:	b510      	push	{r4, lr}
 801fd48:	4604      	mov	r4, r0
 801fd4a:	2104      	movs	r1, #4
 801fd4c:	f00b fe89 	bl	802ba62 <_ZdlPvj>
 801fd50:	4620      	mov	r0, r4
 801fd52:	bd10      	pop	{r4, pc}

0801fd54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801fd54:	b510      	push	{r4, lr}
 801fd56:	4604      	mov	r4, r0
 801fd58:	2104      	movs	r1, #4
 801fd5a:	f00b fe82 	bl	802ba62 <_ZdlPvj>
 801fd5e:	4620      	mov	r0, r4
 801fd60:	bd10      	pop	{r4, pc}

0801fd62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801fd62:	b510      	push	{r4, lr}
 801fd64:	4604      	mov	r4, r0
 801fd66:	2104      	movs	r1, #4
 801fd68:	f00b fe7b 	bl	802ba62 <_ZdlPvj>
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	bd10      	pop	{r4, pc}

0801fd70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd74:	b08f      	sub	sp, #60	@ 0x3c
 801fd76:	4616      	mov	r6, r2
 801fd78:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801fd7c:	4682      	mov	sl, r0
 801fd7e:	460d      	mov	r5, r1
 801fd80:	9205      	str	r2, [sp, #20]
 801fd82:	2a00      	cmp	r2, #0
 801fd84:	f000 82b7 	beq.w	80202f6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801fd88:	6830      	ldr	r0, [r6, #0]
 801fd8a:	6871      	ldr	r1, [r6, #4]
 801fd8c:	ac0a      	add	r4, sp, #40	@ 0x28
 801fd8e:	c403      	stmia	r4!, {r0, r1}
 801fd90:	6818      	ldr	r0, [r3, #0]
 801fd92:	6859      	ldr	r1, [r3, #4]
 801fd94:	ac0c      	add	r4, sp, #48	@ 0x30
 801fd96:	c403      	stmia	r4!, {r0, r1}
 801fd98:	a80a      	add	r0, sp, #40	@ 0x28
 801fd9a:	f7f9 fe29 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fd9e:	4631      	mov	r1, r6
 801fda0:	a80c      	add	r0, sp, #48	@ 0x30
 801fda2:	f7f9 fe4d 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fda6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801fdaa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801fdae:	bfdd      	ittte	le
 801fdb0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801fdb4:	b293      	uxthle	r3, r2
 801fdb6:	fb91 f3f3 	sdivle	r3, r1, r3
 801fdba:	2301      	movgt	r3, #1
 801fdbc:	9300      	str	r3, [sp, #0]
 801fdbe:	f105 0308 	add.w	r3, r5, #8
 801fdc2:	9900      	ldr	r1, [sp, #0]
 801fdc4:	9306      	str	r3, [sp, #24]
 801fdc6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801fdca:	440b      	add	r3, r1
 801fdcc:	3b01      	subs	r3, #1
 801fdce:	fb93 f3f1 	sdiv	r3, r3, r1
 801fdd2:	9906      	ldr	r1, [sp, #24]
 801fdd4:	3b01      	subs	r3, #1
 801fdd6:	b29b      	uxth	r3, r3
 801fdd8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801fddc:	9307      	str	r3, [sp, #28]
 801fdde:	9900      	ldr	r1, [sp, #0]
 801fde0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801fde4:	fb93 f0f1 	sdiv	r0, r3, r1
 801fde8:	b284      	uxth	r4, r0
 801fdea:	9402      	str	r4, [sp, #8]
 801fdec:	9d02      	ldr	r5, [sp, #8]
 801fdee:	9c00      	ldr	r4, [sp, #0]
 801fdf0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801fdf4:	fb05 3414 	mls	r4, r5, r4, r3
 801fdf8:	fb14 f402 	smulbb	r4, r4, r2
 801fdfc:	440c      	add	r4, r1
 801fdfe:	b2a4      	uxth	r4, r4
 801fe00:	2d00      	cmp	r5, #0
 801fe02:	d06c      	beq.n	801fede <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801fe04:	9806      	ldr	r0, [sp, #24]
 801fe06:	1e6a      	subs	r2, r5, #1
 801fe08:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801fe0c:	9a07      	ldr	r2, [sp, #28]
 801fe0e:	ba36      	rev	r6, r6
 801fe10:	4416      	add	r6, r2
 801fe12:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801fe16:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801fe1a:	4411      	add	r1, r2
 801fe1c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801fe20:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801fe24:	4413      	add	r3, r2
 801fe26:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fe2a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801fe2e:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 8020150 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801fe32:	9301      	str	r3, [sp, #4]
 801fe34:	4bc4      	ldr	r3, [pc, #784]	@ (8020148 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801fe36:	6818      	ldr	r0, [r3, #0]
 801fe38:	6803      	ldr	r3, [r0, #0]
 801fe3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe3c:	4798      	blx	r3
 801fe3e:	4bc3      	ldr	r3, [pc, #780]	@ (802014c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801fe40:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801fe44:	881b      	ldrh	r3, [r3, #0]
 801fe46:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801fe4a:	fb03 2808 	mla	r8, r3, r8, r2
 801fe4e:	436b      	muls	r3, r5
 801fe50:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801fe54:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801fe58:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe5a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801fe5e:	2500      	movs	r5, #0
 801fe60:	fb94 f3f3 	sdiv	r3, r4, r3
 801fe64:	9304      	str	r3, [sp, #16]
 801fe66:	f10a 0304 	add.w	r3, sl, #4
 801fe6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fe6e:	4629      	mov	r1, r5
 801fe70:	4618      	mov	r0, r3
 801fe72:	9308      	str	r3, [sp, #32]
 801fe74:	f00c f829 	bl	802beca <memset>
 801fe78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe7a:	4543      	cmp	r3, r8
 801fe7c:	f240 8236 	bls.w	80202ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801fe80:	2203      	movs	r2, #3
 801fe82:	2107      	movs	r1, #7
 801fe84:	200b      	movs	r0, #11
 801fe86:	2c00      	cmp	r4, #0
 801fe88:	f000 8131 	beq.w	80200ee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801fe8c:	7833      	ldrb	r3, [r6, #0]
 801fe8e:	b2db      	uxtb	r3, r3
 801fe90:	2bfe      	cmp	r3, #254	@ 0xfe
 801fe92:	d126      	bne.n	801fee2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801fe94:	f896 e001 	ldrb.w	lr, [r6, #1]
 801fe98:	f896 c002 	ldrb.w	ip, [r6, #2]
 801fe9c:	fa5f fe8e 	uxtb.w	lr, lr
 801fea0:	f896 b003 	ldrb.w	fp, [r6, #3]
 801fea4:	fa5f fc8c 	uxtb.w	ip, ip
 801fea8:	f36e 0507 	bfi	r5, lr, #0, #8
 801feac:	f36c 250f 	bfi	r5, ip, #8, #8
 801feb0:	fa5f fb8b 	uxtb.w	fp, fp
 801feb4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801feb8:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801febc:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801fec0:	f36b 4517 	bfi	r5, fp, #16, #8
 801fec4:	0e2b      	lsrs	r3, r5, #24
 801fec6:	fb10 c303 	smlabb	r3, r0, r3, ip
 801feca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fece:	3c01      	subs	r4, #1
 801fed0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801fed4:	1d37      	adds	r7, r6, #4
 801fed6:	b2a4      	uxth	r4, r4
 801fed8:	605d      	str	r5, [r3, #4]
 801feda:	463e      	mov	r6, r7
 801fedc:	e7d3      	b.n	801fe86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801fede:	9e07      	ldr	r6, [sp, #28]
 801fee0:	e797      	b.n	801fe12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801fee2:	2bff      	cmp	r3, #255	@ 0xff
 801fee4:	d127      	bne.n	801ff36 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801fee6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801feea:	78b3      	ldrb	r3, [r6, #2]
 801feec:	fa5f fc8c 	uxtb.w	ip, ip
 801fef0:	f896 e003 	ldrb.w	lr, [r6, #3]
 801fef4:	b2db      	uxtb	r3, r3
 801fef6:	f36c 0507 	bfi	r5, ip, #0, #8
 801fefa:	f363 250f 	bfi	r5, r3, #8, #8
 801fefe:	fa5f fe8e 	uxtb.w	lr, lr
 801ff02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ff06:	fb12 330e 	smlabb	r3, r2, lr, r3
 801ff0a:	fb11 330c 	smlabb	r3, r1, ip, r3
 801ff0e:	f896 b004 	ldrb.w	fp, [r6, #4]
 801ff12:	f36e 4517 	bfi	r5, lr, #16, #8
 801ff16:	fa5f fb8b 	uxtb.w	fp, fp
 801ff1a:	f36b 651f 	bfi	r5, fp, #24, #8
 801ff1e:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801ff22:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801ff26:	3c01      	subs	r4, #1
 801ff28:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801ff2c:	1d77      	adds	r7, r6, #5
 801ff2e:	b2a4      	uxth	r4, r4
 801ff30:	f8cb 5004 	str.w	r5, [fp, #4]
 801ff34:	e7d1      	b.n	801feda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801ff36:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801ff3a:	f106 0701 	add.w	r7, r6, #1
 801ff3e:	d107      	bne.n	801ff50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801ff40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ff44:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801ff48:	685d      	ldr	r5, [r3, #4]
 801ff4a:	3c01      	subs	r4, #1
 801ff4c:	b2a4      	uxth	r4, r4
 801ff4e:	e7c4      	b.n	801feda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801ff50:	f1bc 0f01 	cmp.w	ip, #1
 801ff54:	d12c      	bne.n	801ffb0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801ff56:	f003 0e03 	and.w	lr, r3, #3
 801ff5a:	f1ae 0e02 	sub.w	lr, lr, #2
 801ff5e:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801ff62:	fa5f fe8e 	uxtb.w	lr, lr
 801ff66:	f003 0c0c 	and.w	ip, r3, #12
 801ff6a:	f36e 0507 	bfi	r5, lr, #0, #8
 801ff6e:	f1ac 0c08 	sub.w	ip, ip, #8
 801ff72:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801ff76:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801ff7a:	f36c 250f 	bfi	r5, ip, #8, #8
 801ff7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ff82:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ff86:	3b02      	subs	r3, #2
 801ff88:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801ff8c:	b2db      	uxtb	r3, r3
 801ff8e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801ff92:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801ff96:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801ff9a:	f363 4517 	bfi	r5, r3, #16, #8
 801ff9e:	0e2e      	lsrs	r6, r5, #24
 801ffa0:	fb10 c606 	smlabb	r6, r0, r6, ip
 801ffa4:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801ffa8:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801ffac:	6075      	str	r5, [r6, #4]
 801ffae:	e7cc      	b.n	801ff4a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801ffb0:	f1bc 0f02 	cmp.w	ip, #2
 801ffb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ffb8:	d12a      	bne.n	8020010 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801ffba:	1cb7      	adds	r7, r6, #2
 801ffbc:	7876      	ldrb	r6, [r6, #1]
 801ffbe:	3b20      	subs	r3, #32
 801ffc0:	b2f6      	uxtb	r6, r6
 801ffc2:	f006 0c0f 	and.w	ip, r6, #15
 801ffc6:	f1ac 0c08 	sub.w	ip, ip, #8
 801ffca:	449c      	add	ip, r3
 801ffcc:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801ffd0:	fa5f fc8c 	uxtb.w	ip, ip
 801ffd4:	f36c 0507 	bfi	r5, ip, #0, #8
 801ffd8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801ffdc:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801ffe0:	fa5f fe8e 	uxtb.w	lr, lr
 801ffe4:	1136      	asrs	r6, r6, #4
 801ffe6:	f36e 250f 	bfi	r5, lr, #8, #8
 801ffea:	3e08      	subs	r6, #8
 801ffec:	4433      	add	r3, r6
 801ffee:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fff2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801fff6:	b2db      	uxtb	r3, r3
 801fff8:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801fffc:	fb12 ee03 	smlabb	lr, r2, r3, lr
 8020000:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 8020004:	f363 4517 	bfi	r5, r3, #16, #8
 8020008:	0e2e      	lsrs	r6, r5, #24
 802000a:	fb10 e606 	smlabb	r6, r0, r6, lr
 802000e:	e7c9      	b.n	801ffa4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 8020010:	1c5e      	adds	r6, r3, #1
 8020012:	42a6      	cmp	r6, r4
 8020014:	dd4e      	ble.n	80200b4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 8020016:	1b36      	subs	r6, r6, r4
 8020018:	2e00      	cmp	r6, #0
 802001a:	dc4e      	bgt.n	80200ba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 802001c:	2400      	movs	r4, #0
 802001e:	f8dd b004 	ldr.w	fp, [sp, #4]
 8020022:	f1bb 0f00 	cmp.w	fp, #0
 8020026:	f340 8122 	ble.w	802026e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 802002a:	1c7b      	adds	r3, r7, #1
 802002c:	9303      	str	r3, [sp, #12]
 802002e:	783b      	ldrb	r3, [r7, #0]
 8020030:	b2db      	uxtb	r3, r3
 8020032:	2bfe      	cmp	r3, #254	@ 0xfe
 8020034:	d160      	bne.n	80200f8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 8020036:	1d3b      	adds	r3, r7, #4
 8020038:	9303      	str	r3, [sp, #12]
 802003a:	2303      	movs	r3, #3
 802003c:	7879      	ldrb	r1, [r7, #1]
 802003e:	78ba      	ldrb	r2, [r7, #2]
 8020040:	b2c9      	uxtb	r1, r1
 8020042:	78f8      	ldrb	r0, [r7, #3]
 8020044:	f361 0507 	bfi	r5, r1, #0, #8
 8020048:	b2d2      	uxtb	r2, r2
 802004a:	f362 250f 	bfi	r5, r2, #8, #8
 802004e:	b2c0      	uxtb	r0, r0
 8020050:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020054:	fb13 2200 	smlabb	r2, r3, r0, r2
 8020058:	2307      	movs	r3, #7
 802005a:	fb13 2101 	smlabb	r1, r3, r1, r2
 802005e:	230b      	movs	r3, #11
 8020060:	f360 4517 	bfi	r5, r0, #16, #8
 8020064:	0e2e      	lsrs	r6, r5, #24
 8020066:	fb13 1306 	smlabb	r3, r3, r6, r1
 802006a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802006e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020072:	605d      	str	r5, [r3, #4]
 8020074:	2601      	movs	r6, #1
 8020076:	4637      	mov	r7, r6
 8020078:	0e2b      	lsrs	r3, r5, #24
 802007a:	ebab 0b07 	sub.w	fp, fp, r7
 802007e:	eba6 0607 	sub.w	r6, r6, r7
 8020082:	f040 80d3 	bne.w	802022c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 8020086:	b18c      	cbz	r4, 80200ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 8020088:	4648      	mov	r0, r9
 802008a:	00a1      	lsls	r1, r4, #2
 802008c:	f7f3 fbfb 	bl	8013886 <_ZN8touchgfx5paint9flushLineEPmi>
 8020090:	9b05      	ldr	r3, [sp, #20]
 8020092:	4622      	mov	r2, r4
 8020094:	4649      	mov	r1, r9
 8020096:	4640      	mov	r0, r8
 8020098:	f7f3 fd4a 	bl	8013b30 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 802009c:	4b2c      	ldr	r3, [pc, #176]	@ (8020150 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 802009e:	4a2d      	ldr	r2, [pc, #180]	@ (8020154 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 80200a0:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80200a4:	4599      	cmp	r9, r3
 80200a6:	bf08      	it	eq
 80200a8:	4613      	moveq	r3, r2
 80200aa:	4699      	mov	r9, r3
 80200ac:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 80200b0:	2400      	movs	r4, #0
 80200b2:	e0da      	b.n	802026a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 80200b4:	1ba6      	subs	r6, r4, r6
 80200b6:	b2b4      	uxth	r4, r6
 80200b8:	e70f      	b.n	801feda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 80200ba:	9b01      	ldr	r3, [sp, #4]
 80200bc:	9a01      	ldr	r2, [sp, #4]
 80200be:	42b3      	cmp	r3, r6
 80200c0:	bfa8      	it	ge
 80200c2:	4633      	movge	r3, r6
 80200c4:	0e2c      	lsrs	r4, r5, #24
 80200c6:	eba2 0b03 	sub.w	fp, r2, r3
 80200ca:	eba6 0603 	sub.w	r6, r6, r3
 80200ce:	d00b      	beq.n	80200e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 80200d0:	461a      	mov	r2, r3
 80200d2:	f1a9 0104 	sub.w	r1, r9, #4
 80200d6:	2a00      	cmp	r2, #0
 80200d8:	dc02      	bgt.n	80200e0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 80200da:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80200de:	e7a0      	b.n	8020022 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 80200e0:	f841 5f04 	str.w	r5, [r1, #4]!
 80200e4:	3a01      	subs	r2, #1
 80200e6:	e7f6      	b.n	80200d6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 80200e8:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 80200ec:	e799      	b.n	8020022 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 80200ee:	4637      	mov	r7, r6
 80200f0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80200f4:	4626      	mov	r6, r4
 80200f6:	e794      	b.n	8020022 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 80200f8:	2bff      	cmp	r3, #255	@ 0xff
 80200fa:	d11d      	bne.n	8020138 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 80200fc:	1d7b      	adds	r3, r7, #5
 80200fe:	7878      	ldrb	r0, [r7, #1]
 8020100:	9303      	str	r3, [sp, #12]
 8020102:	78ba      	ldrb	r2, [r7, #2]
 8020104:	78fe      	ldrb	r6, [r7, #3]
 8020106:	793b      	ldrb	r3, [r7, #4]
 8020108:	b2c0      	uxtb	r0, r0
 802010a:	b2d9      	uxtb	r1, r3
 802010c:	2303      	movs	r3, #3
 802010e:	f360 0507 	bfi	r5, r0, #0, #8
 8020112:	b2d2      	uxtb	r2, r2
 8020114:	f362 250f 	bfi	r5, r2, #8, #8
 8020118:	b2f6      	uxtb	r6, r6
 802011a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802011e:	fb13 2206 	smlabb	r2, r3, r6, r2
 8020122:	2307      	movs	r3, #7
 8020124:	fb13 2000 	smlabb	r0, r3, r0, r2
 8020128:	230b      	movs	r3, #11
 802012a:	f366 4517 	bfi	r5, r6, #16, #8
 802012e:	f361 651f 	bfi	r5, r1, #24, #8
 8020132:	fb13 0301 	smlabb	r3, r3, r1, r0
 8020136:	e798      	b.n	802006a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 8020138:	119e      	asrs	r6, r3, #6
 802013a:	d10d      	bne.n	8020158 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 802013c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020140:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020144:	685d      	ldr	r5, [r3, #4]
 8020146:	e795      	b.n	8020074 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8020148:	20011f2c 	.word	0x20011f2c
 802014c:	20011f26 	.word	0x20011f26
 8020150:	20000120 	.word	0x20000120
 8020154:	20000220 	.word	0x20000220
 8020158:	2e01      	cmp	r6, #1
 802015a:	ea4f 6115 	mov.w	r1, r5, lsr #24
 802015e:	d12b      	bne.n	80201b8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 8020160:	f003 0003 	and.w	r0, r3, #3
 8020164:	3802      	subs	r0, #2
 8020166:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 802016a:	b2c0      	uxtb	r0, r0
 802016c:	f003 020c 	and.w	r2, r3, #12
 8020170:	f360 0507 	bfi	r5, r0, #0, #8
 8020174:	3a08      	subs	r2, #8
 8020176:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 802017a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802017e:	f362 250f 	bfi	r5, r2, #8, #8
 8020182:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020186:	1e9f      	subs	r7, r3, #2
 8020188:	f3c5 4307 	ubfx	r3, r5, #16, #8
 802018c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020190:	2703      	movs	r7, #3
 8020192:	b2db      	uxtb	r3, r3
 8020194:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020198:	fb17 2203 	smlabb	r2, r7, r3, r2
 802019c:	2707      	movs	r7, #7
 802019e:	f363 4517 	bfi	r5, r3, #16, #8
 80201a2:	230b      	movs	r3, #11
 80201a4:	fb17 2000 	smlabb	r0, r7, r0, r2
 80201a8:	fb13 0101 	smlabb	r1, r3, r1, r0
 80201ac:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80201b0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80201b4:	604d      	str	r5, [r1, #4]
 80201b6:	e75e      	b.n	8020076 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 80201b8:	2e02      	cmp	r6, #2
 80201ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80201be:	d12f      	bne.n	8020220 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 80201c0:	7878      	ldrb	r0, [r7, #1]
 80201c2:	1cba      	adds	r2, r7, #2
 80201c4:	b2c0      	uxtb	r0, r0
 80201c6:	9203      	str	r2, [sp, #12]
 80201c8:	f000 020f 	and.w	r2, r0, #15
 80201cc:	3b20      	subs	r3, #32
 80201ce:	3a08      	subs	r2, #8
 80201d0:	441a      	add	r2, r3
 80201d2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80201d6:	b2d2      	uxtb	r2, r2
 80201d8:	f362 0507 	bfi	r5, r2, #0, #8
 80201dc:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80201e0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80201e4:	b2f6      	uxtb	r6, r6
 80201e6:	1100      	asrs	r0, r0, #4
 80201e8:	f366 250f 	bfi	r5, r6, #8, #8
 80201ec:	3808      	subs	r0, #8
 80201ee:	4403      	add	r3, r0
 80201f0:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80201f4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80201f8:	2003      	movs	r0, #3
 80201fa:	b2db      	uxtb	r3, r3
 80201fc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8020200:	fb10 6603 	smlabb	r6, r0, r3, r6
 8020204:	2007      	movs	r0, #7
 8020206:	f363 4517 	bfi	r5, r3, #16, #8
 802020a:	230b      	movs	r3, #11
 802020c:	fb10 6202 	smlabb	r2, r0, r2, r6
 8020210:	fb13 2101 	smlabb	r1, r3, r1, r2
 8020214:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020218:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 802021c:	604d      	str	r5, [r1, #4]
 802021e:	e729      	b.n	8020074 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8020220:	1c5e      	adds	r6, r3, #1
 8020222:	45b3      	cmp	fp, r6
 8020224:	465f      	mov	r7, fp
 8020226:	bfa8      	it	ge
 8020228:	4637      	movge	r7, r6
 802022a:	e725      	b.n	8020078 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 802022c:	193b      	adds	r3, r7, r4
 802022e:	2b40      	cmp	r3, #64	@ 0x40
 8020230:	dd13      	ble.n	802025a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 8020232:	4648      	mov	r0, r9
 8020234:	00a1      	lsls	r1, r4, #2
 8020236:	f7f3 fb26 	bl	8013886 <_ZN8touchgfx5paint9flushLineEPmi>
 802023a:	4622      	mov	r2, r4
 802023c:	4640      	mov	r0, r8
 802023e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8020242:	2400      	movs	r4, #0
 8020244:	4649      	mov	r1, r9
 8020246:	9b05      	ldr	r3, [sp, #20]
 8020248:	f7f3 fc72 	bl	8013b30 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 802024c:	4b2b      	ldr	r3, [pc, #172]	@ (80202fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 802024e:	4599      	cmp	r9, r3
 8020250:	bf0c      	ite	eq
 8020252:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 8020308 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 8020256:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 80202fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 802025a:	463b      	mov	r3, r7
 802025c:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 8020260:	3b01      	subs	r3, #1
 8020262:	f842 5b04 	str.w	r5, [r2], #4
 8020266:	d1fb      	bne.n	8020260 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 8020268:	443c      	add	r4, r7
 802026a:	9f03      	ldr	r7, [sp, #12]
 802026c:	e6d9      	b.n	8020022 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 802026e:	b15c      	cbz	r4, 8020288 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 8020270:	00a1      	lsls	r1, r4, #2
 8020272:	4648      	mov	r0, r9
 8020274:	f7f3 fb07 	bl	8013886 <_ZN8touchgfx5paint9flushLineEPmi>
 8020278:	4640      	mov	r0, r8
 802027a:	9b05      	ldr	r3, [sp, #20]
 802027c:	4622      	mov	r2, r4
 802027e:	4649      	mov	r1, r9
 8020280:	f7f3 fc56 	bl	8013b30 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8020284:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8020288:	4b1d      	ldr	r3, [pc, #116]	@ (8020300 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 802028a:	9a01      	ldr	r2, [sp, #4]
 802028c:	881b      	ldrh	r3, [r3, #0]
 802028e:	1a9b      	subs	r3, r3, r2
 8020290:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8020294:	9b04      	ldr	r3, [sp, #16]
 8020296:	3301      	adds	r3, #1
 8020298:	9304      	str	r3, [sp, #16]
 802029a:	9a04      	ldr	r2, [sp, #16]
 802029c:	9b00      	ldr	r3, [sp, #0]
 802029e:	4293      	cmp	r3, r2
 80202a0:	d11d      	bne.n	80202de <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 80202a2:	2500      	movs	r5, #0
 80202a4:	9b02      	ldr	r3, [sp, #8]
 80202a6:	9a02      	ldr	r2, [sp, #8]
 80202a8:	f103 0b01 	add.w	fp, r3, #1
 80202ac:	9b06      	ldr	r3, [sp, #24]
 80202ae:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 80202b2:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80202b6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 80202ba:	9b07      	ldr	r3, [sp, #28]
 80202bc:	ba3f      	rev	r7, r7
 80202be:	1ba4      	subs	r4, r4, r6
 80202c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80202c4:	4629      	mov	r1, r5
 80202c6:	9808      	ldr	r0, [sp, #32]
 80202c8:	441f      	add	r7, r3
 80202ca:	b2a4      	uxth	r4, r4
 80202cc:	f00b fdfd 	bl	802beca <memset>
 80202d0:	f8cd b008 	str.w	fp, [sp, #8]
 80202d4:	9504      	str	r5, [sp, #16]
 80202d6:	f7f3 facf 	bl	8013878 <_ZN8touchgfx5paint8tearDownEv>
 80202da:	463e      	mov	r6, r7
 80202dc:	e5cc      	b.n	801fe78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 80202de:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80202e2:	9b01      	ldr	r3, [sp, #4]
 80202e4:	1ae4      	subs	r4, r4, r3
 80202e6:	1ba4      	subs	r4, r4, r6
 80202e8:	b2a4      	uxth	r4, r4
 80202ea:	e7f4      	b.n	80202d6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 80202ec:	4b05      	ldr	r3, [pc, #20]	@ (8020304 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 80202ee:	6818      	ldr	r0, [r3, #0]
 80202f0:	6803      	ldr	r3, [r0, #0]
 80202f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202f4:	4798      	blx	r3
 80202f6:	b00f      	add	sp, #60	@ 0x3c
 80202f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202fc:	20000120 	.word	0x20000120
 8020300:	20011f26 	.word	0x20011f26
 8020304:	20011f2c 	.word	0x20011f2c
 8020308:	20000220 	.word	0x20000220

0802030c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020310:	b08f      	sub	sp, #60	@ 0x3c
 8020312:	9205      	str	r2, [sp, #20]
 8020314:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020318:	461c      	mov	r4, r3
 802031a:	9100      	str	r1, [sp, #0]
 802031c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802031e:	9201      	str	r2, [sp, #4]
 8020320:	2a00      	cmp	r2, #0
 8020322:	f000 8116 	beq.w	8020552 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 8020326:	6820      	ldr	r0, [r4, #0]
 8020328:	6861      	ldr	r1, [r4, #4]
 802032a:	aa0a      	add	r2, sp, #40	@ 0x28
 802032c:	c203      	stmia	r2!, {r0, r1}
 802032e:	6818      	ldr	r0, [r3, #0]
 8020330:	6859      	ldr	r1, [r3, #4]
 8020332:	aa0c      	add	r2, sp, #48	@ 0x30
 8020334:	c203      	stmia	r2!, {r0, r1}
 8020336:	a80a      	add	r0, sp, #40	@ 0x28
 8020338:	f7f9 fb5a 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802033c:	4621      	mov	r1, r4
 802033e:	a80c      	add	r0, sp, #48	@ 0x30
 8020340:	f7f9 fb7e 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020344:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020348:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 802034c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020350:	bfdd      	ittte	le
 8020352:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020356:	b2b3      	uxthle	r3, r6
 8020358:	fb92 f3f3 	sdivle	r3, r2, r3
 802035c:	2301      	movgt	r3, #1
 802035e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020362:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020366:	fb92 f1f3 	sdiv	r1, r2, r3
 802036a:	fa1f fc81 	uxth.w	ip, r1
 802036e:	4661      	mov	r1, ip
 8020370:	fb0c 2413 	mls	r4, ip, r3, r2
 8020374:	fb14 f406 	smulbb	r4, r4, r6
 8020378:	441d      	add	r5, r3
 802037a:	3d01      	subs	r5, #1
 802037c:	4404      	add	r4, r0
 802037e:	fb95 f5f3 	sdiv	r5, r5, r3
 8020382:	b2a4      	uxth	r4, r4
 8020384:	b131      	cbz	r1, 8020394 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 8020386:	9b05      	ldr	r3, [sp, #20]
 8020388:	9900      	ldr	r1, [sp, #0]
 802038a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802038e:	ba1b      	rev	r3, r3
 8020390:	4419      	add	r1, r3
 8020392:	9100      	str	r1, [sp, #0]
 8020394:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020398:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 802039c:	4418      	add	r0, r3
 802039e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80203a2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80203a6:	441a      	add	r2, r3
 80203a8:	4b6b      	ldr	r3, [pc, #428]	@ (8020558 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 80203aa:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80203ae:	6818      	ldr	r0, [r3, #0]
 80203b0:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80203b4:	6803      	ldr	r3, [r0, #0]
 80203b6:	b2ad      	uxth	r5, r5
 80203b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80203ba:	4798      	blx	r3
 80203bc:	4967      	ldr	r1, [pc, #412]	@ (802055c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 80203be:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80203c2:	880b      	ldrh	r3, [r1, #0]
 80203c4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80203c8:	00ad      	lsls	r5, r5, #2
 80203ca:	fb03 c202 	mla	r2, r3, r2, ip
 80203ce:	4373      	muls	r3, r6
 80203d0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80203d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80203d8:	9306      	str	r3, [sp, #24]
 80203da:	1d2b      	adds	r3, r5, #4
 80203dc:	9307      	str	r3, [sp, #28]
 80203de:	9b01      	ldr	r3, [sp, #4]
 80203e0:	2c00      	cmp	r4, #0
 80203e2:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80203e6:	bf0c      	ite	eq
 80203e8:	46c6      	moveq	lr, r8
 80203ea:	f04f 0e00 	movne.w	lr, #0
 80203ee:	2300      	movs	r3, #0
 80203f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80203f2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80203f6:	b292      	uxth	r2, r2
 80203f8:	fa1f fe8e 	uxth.w	lr, lr
 80203fc:	9302      	str	r3, [sp, #8]
 80203fe:	9103      	str	r1, [sp, #12]
 8020400:	9204      	str	r2, [sp, #16]
 8020402:	9a06      	ldr	r2, [sp, #24]
 8020404:	4282      	cmp	r2, r0
 8020406:	f240 809f 	bls.w	8020548 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 802040a:	b963      	cbnz	r3, 8020426 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 802040c:	9b00      	ldr	r3, [sp, #0]
 802040e:	781a      	ldrb	r2, [r3, #0]
 8020410:	0993      	lsrs	r3, r2, #6
 8020412:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020416:	9202      	str	r2, [sp, #8]
 8020418:	1e5a      	subs	r2, r3, #1
 802041a:	2a02      	cmp	r2, #2
 802041c:	d815      	bhi.n	802044a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 802041e:	9a00      	ldr	r2, [sp, #0]
 8020420:	b29b      	uxth	r3, r3
 8020422:	3201      	adds	r2, #1
 8020424:	9200      	str	r2, [sp, #0]
 8020426:	b1b4      	cbz	r4, 8020456 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 8020428:	429c      	cmp	r4, r3
 802042a:	bf99      	ittee	ls
 802042c:	1b1c      	subls	r4, r3, r4
 802042e:	fa1f fa84 	uxthls.w	sl, r4
 8020432:	4671      	movhi	r1, lr
 8020434:	f04f 0a00 	movhi.w	sl, #0
 8020438:	bf93      	iteet	ls
 802043a:	2400      	movls	r4, #0
 802043c:	1ae4      	subhi	r4, r4, r3
 802043e:	b2a4      	uxthhi	r4, r4
 8020440:	fa1f f188 	uxthls.w	r1, r8
 8020444:	4653      	mov	r3, sl
 8020446:	468e      	mov	lr, r1
 8020448:	e7db      	b.n	8020402 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 802044a:	9a00      	ldr	r2, [sp, #0]
 802044c:	9b00      	ldr	r3, [sp, #0]
 802044e:	3202      	adds	r2, #2
 8020450:	785b      	ldrb	r3, [r3, #1]
 8020452:	9200      	str	r2, [sp, #0]
 8020454:	e7e7      	b.n	8020426 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8020456:	2202      	movs	r2, #2
 8020458:	4615      	mov	r5, r2
 802045a:	4573      	cmp	r3, lr
 802045c:	bf2c      	ite	cs
 802045e:	46f1      	movcs	r9, lr
 8020460:	4699      	movcc	r9, r3
 8020462:	9907      	ldr	r1, [sp, #28]
 8020464:	9a02      	ldr	r2, [sp, #8]
 8020466:	bf28      	it	cs
 8020468:	eba3 0a0e 	subcs.w	sl, r3, lr
 802046c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020470:	9905      	ldr	r1, [sp, #20]
 8020472:	bf28      	it	cs
 8020474:	fa1f fa8a 	uxthcs.w	sl, sl
 8020478:	f831 c002 	ldrh.w	ip, [r1, r2]
 802047c:	9a01      	ldr	r2, [sp, #4]
 802047e:	bf37      	itett	cc
 8020480:	ebae 0103 	subcc.w	r1, lr, r3
 8020484:	4621      	movcs	r1, r4
 8020486:	b289      	uxthcc	r1, r1
 8020488:	46a2      	movcc	sl, r4
 802048a:	2aff      	cmp	r2, #255	@ 0xff
 802048c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020490:	d105      	bne.n	802049e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 8020492:	4481      	add	r9, r0
 8020494:	4581      	cmp	r9, r0
 8020496:	d045      	beq.n	8020524 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8020498:	f820 cb02 	strh.w	ip, [r0], #2
 802049c:	e7fa      	b.n	8020494 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 802049e:	9d03      	ldr	r5, [sp, #12]
 80204a0:	ea4f 222c 	mov.w	r2, ip, asr #8
 80204a4:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80204a8:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80204ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204b0:	436a      	muls	r2, r5
 80204b2:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80204b6:	fa5f fc8c 	uxtb.w	ip, ip
 80204ba:	fb0b fb05 	mul.w	fp, fp, r5
 80204be:	fb0c fc05 	mul.w	ip, ip, r5
 80204c2:	9208      	str	r2, [sp, #32]
 80204c4:	4481      	add	r9, r0
 80204c6:	4581      	cmp	r9, r0
 80204c8:	d02c      	beq.n	8020524 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 80204ca:	8802      	ldrh	r2, [r0, #0]
 80204cc:	9d04      	ldr	r5, [sp, #16]
 80204ce:	1216      	asrs	r6, r2, #8
 80204d0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80204d4:	fb16 f605 	smulbb	r6, r6, r5
 80204d8:	9d08      	ldr	r5, [sp, #32]
 80204da:	9f04      	ldr	r7, [sp, #16]
 80204dc:	442e      	add	r6, r5
 80204de:	10d5      	asrs	r5, r2, #3
 80204e0:	00d2      	lsls	r2, r2, #3
 80204e2:	b2d2      	uxtb	r2, r2
 80204e4:	fb12 f207 	smulbb	r2, r2, r7
 80204e8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80204ec:	fb15 f507 	smulbb	r5, r5, r7
 80204f0:	b2b6      	uxth	r6, r6
 80204f2:	4462      	add	r2, ip
 80204f4:	b292      	uxth	r2, r2
 80204f6:	1c77      	adds	r7, r6, #1
 80204f8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80204fc:	1c57      	adds	r7, r2, #1
 80204fe:	445d      	add	r5, fp
 8020500:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8020504:	b2ad      	uxth	r5, r5
 8020506:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802050a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 802050e:	4316      	orrs	r6, r2
 8020510:	1c6a      	adds	r2, r5, #1
 8020512:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8020516:	096d      	lsrs	r5, r5, #5
 8020518:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802051c:	432e      	orrs	r6, r5
 802051e:	f820 6b02 	strh.w	r6, [r0], #2
 8020522:	e7d0      	b.n	80204c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 8020524:	4573      	cmp	r3, lr
 8020526:	d38d      	bcc.n	8020444 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8020528:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 802052c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802052e:	fa1f f188 	uxth.w	r1, r8
 8020532:	1a64      	subs	r4, r4, r1
 8020534:	881b      	ldrh	r3, [r3, #0]
 8020536:	b2a4      	uxth	r4, r4
 8020538:	2c00      	cmp	r4, #0
 802053a:	eba3 0308 	sub.w	r3, r3, r8
 802053e:	bf18      	it	ne
 8020540:	2100      	movne	r1, #0
 8020542:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020546:	e77d      	b.n	8020444 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8020548:	4b03      	ldr	r3, [pc, #12]	@ (8020558 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 802054a:	6818      	ldr	r0, [r3, #0]
 802054c:	6803      	ldr	r3, [r0, #0]
 802054e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020550:	4798      	blx	r3
 8020552:	b00f      	add	sp, #60	@ 0x3c
 8020554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020558:	20011f2c 	.word	0x20011f2c
 802055c:	20011f26 	.word	0x20011f26

08020560 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8020560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020564:	b09f      	sub	sp, #124	@ 0x7c
 8020566:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 802056a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802056e:	461d      	mov	r5, r3
 8020570:	4604      	mov	r4, r0
 8020572:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020574:	9209      	str	r2, [sp, #36]	@ 0x24
 8020576:	2a00      	cmp	r2, #0
 8020578:	f000 81e9 	beq.w	802094e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 802057c:	6828      	ldr	r0, [r5, #0]
 802057e:	6869      	ldr	r1, [r5, #4]
 8020580:	aa1a      	add	r2, sp, #104	@ 0x68
 8020582:	c203      	stmia	r2!, {r0, r1}
 8020584:	6818      	ldr	r0, [r3, #0]
 8020586:	6859      	ldr	r1, [r3, #4]
 8020588:	aa1c      	add	r2, sp, #112	@ 0x70
 802058a:	c203      	stmia	r2!, {r0, r1}
 802058c:	a81a      	add	r0, sp, #104	@ 0x68
 802058e:	f7f9 fa2f 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020592:	4629      	mov	r1, r5
 8020594:	a81c      	add	r0, sp, #112	@ 0x70
 8020596:	f7f9 fa53 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802059a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802059e:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 80205a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80205a6:	bfdd      	ittte	le
 80205a8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80205ac:	b29a      	uxthle	r2, r3
 80205ae:	fb91 f2f2 	sdivle	r2, r1, r2
 80205b2:	2201      	movgt	r2, #1
 80205b4:	9202      	str	r2, [sp, #8]
 80205b6:	9802      	ldr	r0, [sp, #8]
 80205b8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80205bc:	9902      	ldr	r1, [sp, #8]
 80205be:	fb92 f0f0 	sdiv	r0, r2, r0
 80205c2:	b280      	uxth	r0, r0
 80205c4:	9010      	str	r0, [sp, #64]	@ 0x40
 80205c6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80205c8:	9802      	ldr	r0, [sp, #8]
 80205ca:	4488      	add	r8, r1
 80205cc:	fb05 2510 	mls	r5, r5, r0, r2
 80205d0:	fb15 f503 	smulbb	r5, r5, r3
 80205d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80205d8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80205dc:	fb98 f8f1 	sdiv	r8, r8, r1
 80205e0:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80205e4:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 80205e8:	440d      	add	r5, r1
 80205ea:	4419      	add	r1, r3
 80205ec:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80205f0:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80205f4:	441a      	add	r2, r3
 80205f6:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80205fa:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80205fe:	9304      	str	r3, [sp, #16]
 8020600:	4b93      	ldr	r3, [pc, #588]	@ (8020850 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 8020602:	f108 0801 	add.w	r8, r8, #1
 8020606:	6818      	ldr	r0, [r3, #0]
 8020608:	fa1f f888 	uxth.w	r8, r8
 802060c:	6803      	ldr	r3, [r0, #0]
 802060e:	b2ad      	uxth	r5, r5
 8020610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020612:	4798      	blx	r3
 8020614:	4b8f      	ldr	r3, [pc, #572]	@ (8020854 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 8020616:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 802061a:	881a      	ldrh	r2, [r3, #0]
 802061c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8020620:	4356      	muls	r6, r2
 8020622:	fb02 7101 	mla	r1, r2, r1, r7
 8020626:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802062a:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 802062e:	920a      	str	r2, [sp, #40]	@ 0x28
 8020630:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020632:	2d00      	cmp	r5, #0
 8020634:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8020638:	f108 0204 	add.w	r2, r8, #4
 802063c:	9211      	str	r2, [sp, #68]	@ 0x44
 802063e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020640:	f04f 0100 	mov.w	r1, #0
 8020644:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8020648:	9215      	str	r2, [sp, #84]	@ 0x54
 802064a:	9a04      	ldr	r2, [sp, #16]
 802064c:	bf18      	it	ne
 802064e:	2200      	movne	r2, #0
 8020650:	9318      	str	r3, [sp, #96]	@ 0x60
 8020652:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8020656:	b292      	uxth	r2, r2
 8020658:	930f      	str	r3, [sp, #60]	@ 0x3c
 802065a:	4b7f      	ldr	r3, [pc, #508]	@ (8020858 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 802065c:	910d      	str	r1, [sp, #52]	@ 0x34
 802065e:	1b1b      	subs	r3, r3, r4
 8020660:	9319      	str	r3, [sp, #100]	@ 0x64
 8020662:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020666:	fa11 f383 	uxtah	r3, r1, r3
 802066a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802066c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020670:	3304      	adds	r3, #4
 8020672:	9306      	str	r3, [sp, #24]
 8020674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020676:	4283      	cmp	r3, r0
 8020678:	f240 8164 	bls.w	8020944 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 802067c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8020680:	f04f 0a01 	mov.w	sl, #1
 8020684:	fbb5 f3f3 	udiv	r3, r5, r3
 8020688:	9902      	ldr	r1, [sp, #8]
 802068a:	9e06      	ldr	r6, [sp, #24]
 802068c:	1acb      	subs	r3, r1, r3
 802068e:	b29b      	uxth	r3, r3
 8020690:	9316      	str	r3, [sp, #88]	@ 0x58
 8020692:	9b06      	ldr	r3, [sp, #24]
 8020694:	7836      	ldrb	r6, [r6, #0]
 8020696:	7859      	ldrb	r1, [r3, #1]
 8020698:	789b      	ldrb	r3, [r3, #2]
 802069a:	9612      	str	r6, [sp, #72]	@ 0x48
 802069c:	021b      	lsls	r3, r3, #8
 802069e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80206a2:	9906      	ldr	r1, [sp, #24]
 80206a4:	3601      	adds	r6, #1
 80206a6:	78c9      	ldrb	r1, [r1, #3]
 80206a8:	9605      	str	r6, [sp, #20]
 80206aa:	430b      	orrs	r3, r1
 80206ac:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80206ae:	46d3      	mov	fp, sl
 80206b0:	4419      	add	r1, r3
 80206b2:	1c4e      	adds	r6, r1, #1
 80206b4:	9603      	str	r6, [sp, #12]
 80206b6:	7849      	ldrb	r1, [r1, #1]
 80206b8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80206ba:	0209      	lsls	r1, r1, #8
 80206bc:	5cf3      	ldrb	r3, [r6, r3]
 80206be:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80206c2:	4319      	orrs	r1, r3
 80206c4:	b28b      	uxth	r3, r1
 80206c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80206c8:	2300      	movs	r3, #0
 80206ca:	4657      	mov	r7, sl
 80206cc:	9307      	str	r3, [sp, #28]
 80206ce:	469c      	mov	ip, r3
 80206d0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80206d4:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80206d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80206da:	2d00      	cmp	r5, #0
 80206dc:	d07e      	beq.n	80207dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80206de:	42af      	cmp	r7, r5
 80206e0:	d26e      	bcs.n	80207c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 80206e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80206e4:	1bed      	subs	r5, r5, r7
 80206e6:	4283      	cmp	r3, r0
 80206e8:	b2ad      	uxth	r5, r5
 80206ea:	9201      	str	r2, [sp, #4]
 80206ec:	d802      	bhi.n	80206f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 80206ee:	e073      	b.n	80207d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	d15f      	bne.n	80207b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 80206f4:	9b03      	ldr	r3, [sp, #12]
 80206f6:	f1cb 0207 	rsb	r2, fp, #7
 80206fa:	785b      	ldrb	r3, [r3, #1]
 80206fc:	4093      	lsls	r3, r2
 80206fe:	005b      	lsls	r3, r3, #1
 8020700:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8020704:	9b03      	ldr	r3, [sp, #12]
 8020706:	781b      	ldrb	r3, [r3, #0]
 8020708:	fa43 f30b 	asr.w	r3, r3, fp
 802070c:	b2db      	uxtb	r3, r3
 802070e:	4313      	orrs	r3, r2
 8020710:	f10b 0201 	add.w	r2, fp, #1
 8020714:	fa5f fb82 	uxtb.w	fp, r2
 8020718:	9a03      	ldr	r2, [sp, #12]
 802071a:	f1bb 0f08 	cmp.w	fp, #8
 802071e:	bf15      	itete	ne
 8020720:	3201      	addne	r2, #1
 8020722:	3202      	addeq	r2, #2
 8020724:	9203      	strne	r2, [sp, #12]
 8020726:	9203      	streq	r2, [sp, #12]
 8020728:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802072a:	b29f      	uxth	r7, r3
 802072c:	bf08      	it	eq
 802072e:	f04f 0b00 	moveq.w	fp, #0
 8020732:	42ba      	cmp	r2, r7
 8020734:	d309      	bcc.n	802074a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 8020736:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802073a:	2301      	movs	r3, #1
 802073c:	9a05      	ldr	r2, [sp, #20]
 802073e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8020742:	d30e      	bcc.n	8020762 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 8020744:	469a      	mov	sl, r3
 8020746:	2600      	movs	r6, #0
 8020748:	e035      	b.n	80207b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 802074a:	9b05      	ldr	r3, [sp, #20]
 802074c:	429f      	cmp	r7, r3
 802074e:	d318      	bcc.n	8020782 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 8020750:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8020754:	eb04 030a 	add.w	r3, r4, sl
 8020758:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 802075c:	f10a 0301 	add.w	r3, sl, #1
 8020760:	b29b      	uxth	r3, r3
 8020762:	9a05      	ldr	r2, [sp, #20]
 8020764:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8020768:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802076c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802076e:	7116      	strb	r6, [r2, #4]
 8020770:	f10a 0601 	add.w	r6, sl, #1
 8020774:	80d1      	strh	r1, [r2, #6]
 8020776:	7156      	strb	r6, [r2, #5]
 8020778:	9a05      	ldr	r2, [sp, #20]
 802077a:	3201      	adds	r2, #1
 802077c:	b292      	uxth	r2, r2
 802077e:	9205      	str	r2, [sp, #20]
 8020780:	e7e0      	b.n	8020744 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 8020782:	463a      	mov	r2, r7
 8020784:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8020788:	795b      	ldrb	r3, [r3, #5]
 802078a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802078e:	4426      	add	r6, r4
 8020790:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8020792:	eb01 0c06 	add.w	ip, r1, r6
 8020796:	f1bc 0f00 	cmp.w	ip, #0
 802079a:	dd07      	ble.n	80207ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 802079c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80207a0:	f892 c004 	ldrb.w	ip, [r2, #4]
 80207a4:	f806 cd01 	strb.w	ip, [r6, #-1]!
 80207a8:	88d2      	ldrh	r2, [r2, #6]
 80207aa:	e7f1      	b.n	8020790 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 80207ac:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80207b0:	b29b      	uxth	r3, r3
 80207b2:	e7c3      	b.n	802073c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 80207b4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80207b6:	970c      	str	r7, [sp, #48]	@ 0x30
 80207b8:	9a01      	ldr	r2, [sp, #4]
 80207ba:	46b4      	mov	ip, r6
 80207bc:	461f      	mov	r7, r3
 80207be:	e78c      	b.n	80206da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 80207c0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80207c4:	1b7b      	subs	r3, r7, r5
 80207c6:	eb0c 0605 	add.w	r6, ip, r5
 80207ca:	b29b      	uxth	r3, r3
 80207cc:	9201      	str	r2, [sp, #4]
 80207ce:	b2b6      	uxth	r6, r6
 80207d0:	2500      	movs	r5, #0
 80207d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80207d4:	4282      	cmp	r2, r0
 80207d6:	d88b      	bhi.n	80206f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 80207d8:	9a01      	ldr	r2, [sp, #4]
 80207da:	e74b      	b.n	8020674 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 80207dc:	4297      	cmp	r7, r2
 80207de:	d331      	bcc.n	8020844 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 80207e0:	1abb      	subs	r3, r7, r2
 80207e2:	b29b      	uxth	r3, r3
 80207e4:	9208      	str	r2, [sp, #32]
 80207e6:	9501      	str	r5, [sp, #4]
 80207e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80207ea:	29ff      	cmp	r1, #255	@ 0xff
 80207ec:	9908      	ldr	r1, [sp, #32]
 80207ee:	eb0c 0601 	add.w	r6, ip, r1
 80207f2:	d133      	bne.n	802085c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 80207f4:	f1a0 0e02 	sub.w	lr, r0, #2
 80207f8:	b2b6      	uxth	r6, r6
 80207fa:	45b4      	cmp	ip, r6
 80207fc:	f040 808a 	bne.w	8020914 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 8020800:	9908      	ldr	r1, [sp, #32]
 8020802:	4297      	cmp	r7, r2
 8020804:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020808:	d3e2      	bcc.n	80207d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 802080a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802080c:	9904      	ldr	r1, [sp, #16]
 802080e:	8812      	ldrh	r2, [r2, #0]
 8020810:	1a52      	subs	r2, r2, r1
 8020812:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020816:	9a07      	ldr	r2, [sp, #28]
 8020818:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802081a:	3201      	adds	r2, #1
 802081c:	428a      	cmp	r2, r1
 802081e:	9207      	str	r2, [sp, #28]
 8020820:	f040 8085 	bne.w	802092e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 8020824:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8020828:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 802082c:	9b04      	ldr	r3, [sp, #16]
 802082e:	1bed      	subs	r5, r5, r7
 8020830:	b2ad      	uxth	r5, r5
 8020832:	2d00      	cmp	r5, #0
 8020834:	bf0c      	ite	eq
 8020836:	461a      	moveq	r2, r3
 8020838:	2200      	movne	r2, #0
 802083a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802083c:	b292      	uxth	r2, r2
 802083e:	3301      	adds	r3, #1
 8020840:	930d      	str	r3, [sp, #52]	@ 0x34
 8020842:	e70e      	b.n	8020662 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 8020844:	1bd1      	subs	r1, r2, r7
 8020846:	b28b      	uxth	r3, r1
 8020848:	9301      	str	r3, [sp, #4]
 802084a:	9708      	str	r7, [sp, #32]
 802084c:	462b      	mov	r3, r5
 802084e:	e7cb      	b.n	80207e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 8020850:	20011f2c 	.word	0x20011f2c
 8020854:	20011f26 	.word	0x20011f26
 8020858:	fffff7fb 	.word	0xfffff7fb
 802085c:	b2b6      	uxth	r6, r6
 802085e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020860:	45b4      	cmp	ip, r6
 8020862:	d0cd      	beq.n	8020800 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8020864:	f10c 0101 	add.w	r1, ip, #1
 8020868:	44a4      	add	ip, r4
 802086a:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802086e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020870:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020872:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8020876:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020878:	ea4f 2825 	mov.w	r8, r5, asr #8
 802087c:	f8b1 c000 	ldrh.w	ip, [r1]
 8020880:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020882:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8020886:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802088a:	fb1e fe01 	smulbb	lr, lr, r1
 802088e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020890:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8020894:	fb08 e801 	mla	r8, r8, r1, lr
 8020898:	ea4f 09ec 	mov.w	r9, ip, asr #3
 802089c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802089e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80208a2:	fb19 f901 	smulbb	r9, r9, r1
 80208a6:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 80208aa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80208ac:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80208b0:	fb0e 9e01 	mla	lr, lr, r1, r9
 80208b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80208b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80208ba:	fa5f fc8c 	uxtb.w	ip, ip
 80208be:	fb1c fc01 	smulbb	ip, ip, r1
 80208c2:	00ed      	lsls	r5, r5, #3
 80208c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80208c6:	b2ed      	uxtb	r5, r5
 80208c8:	fb05 c501 	mla	r5, r5, r1, ip
 80208cc:	fa1f f888 	uxth.w	r8, r8
 80208d0:	fa1f fe8e 	uxth.w	lr, lr
 80208d4:	b2ad      	uxth	r5, r5
 80208d6:	f108 0c01 	add.w	ip, r8, #1
 80208da:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80208de:	f10e 0901 	add.w	r9, lr, #1
 80208e2:	f105 0c01 	add.w	ip, r5, #1
 80208e6:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 80208ea:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 80208ee:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80208f2:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 80208f6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80208fa:	ea4c 0808 	orr.w	r8, ip, r8
 80208fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020900:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020904:	ea48 0809 	orr.w	r8, r8, r9
 8020908:	f821 8b02 	strh.w	r8, [r1], #2
 802090c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802090e:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 8020912:	e7a5      	b.n	8020860 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 8020914:	f10c 0801 	add.w	r8, ip, #1
 8020918:	44a4      	add	ip, r4
 802091a:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802091e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020920:	fa1f fc88 	uxth.w	ip, r8
 8020924:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8020928:	f82e 5f02 	strh.w	r5, [lr, #2]!
 802092c:	e765      	b.n	80207fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 802092e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020932:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8020936:	1aad      	subs	r5, r5, r2
 8020938:	b2ad      	uxth	r5, r5
 802093a:	2d00      	cmp	r5, #0
 802093c:	bf18      	it	ne
 802093e:	2200      	movne	r2, #0
 8020940:	9201      	str	r2, [sp, #4]
 8020942:	e746      	b.n	80207d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8020944:	4b03      	ldr	r3, [pc, #12]	@ (8020954 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 8020946:	6818      	ldr	r0, [r3, #0]
 8020948:	6803      	ldr	r3, [r0, #0]
 802094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802094c:	4798      	blx	r3
 802094e:	b01f      	add	sp, #124	@ 0x7c
 8020950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020954:	20011f2c 	.word	0x20011f2c

08020958 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 8020958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802095c:	b093      	sub	sp, #76	@ 0x4c
 802095e:	4616      	mov	r6, r2
 8020960:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8020964:	9003      	str	r0, [sp, #12]
 8020966:	460d      	mov	r5, r1
 8020968:	9201      	str	r2, [sp, #4]
 802096a:	2a00      	cmp	r2, #0
 802096c:	f000 8304 	beq.w	8020f78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 8020970:	6830      	ldr	r0, [r6, #0]
 8020972:	6871      	ldr	r1, [r6, #4]
 8020974:	ac0e      	add	r4, sp, #56	@ 0x38
 8020976:	c403      	stmia	r4!, {r0, r1}
 8020978:	6818      	ldr	r0, [r3, #0]
 802097a:	6859      	ldr	r1, [r3, #4]
 802097c:	ac10      	add	r4, sp, #64	@ 0x40
 802097e:	c403      	stmia	r4!, {r0, r1}
 8020980:	a80e      	add	r0, sp, #56	@ 0x38
 8020982:	f7f9 f835 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020986:	4631      	mov	r1, r6
 8020988:	a810      	add	r0, sp, #64	@ 0x40
 802098a:	f7f9 f859 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802098e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8020992:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8020996:	bfdd      	ittte	le
 8020998:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802099c:	b293      	uxthle	r3, r2
 802099e:	fb91 f3f3 	sdivle	r3, r1, r3
 80209a2:	2301      	movgt	r3, #1
 80209a4:	9304      	str	r3, [sp, #16]
 80209a6:	f105 0308 	add.w	r3, r5, #8
 80209aa:	9904      	ldr	r1, [sp, #16]
 80209ac:	9308      	str	r3, [sp, #32]
 80209ae:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80209b2:	440b      	add	r3, r1
 80209b4:	3b01      	subs	r3, #1
 80209b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80209ba:	9908      	ldr	r1, [sp, #32]
 80209bc:	3b01      	subs	r3, #1
 80209be:	b29b      	uxth	r3, r3
 80209c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80209c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80209c6:	9904      	ldr	r1, [sp, #16]
 80209c8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80209cc:	fb93 f0f1 	sdiv	r0, r3, r1
 80209d0:	b284      	uxth	r4, r0
 80209d2:	9405      	str	r4, [sp, #20]
 80209d4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80209d8:	fb05 3914 	mls	r9, r5, r4, r3
 80209dc:	fb19 f902 	smulbb	r9, r9, r2
 80209e0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80209e4:	4489      	add	r9, r1
 80209e6:	fa1f f989 	uxth.w	r9, r9
 80209ea:	2d00      	cmp	r5, #0
 80209ec:	d05d      	beq.n	8020aaa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 80209ee:	9808      	ldr	r0, [sp, #32]
 80209f0:	1e6a      	subs	r2, r5, #1
 80209f2:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 80209f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80209f8:	fa9a fa8a 	rev.w	sl, sl
 80209fc:	4492      	add	sl, r2
 80209fe:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8020a02:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8020a06:	4411      	add	r1, r2
 8020a08:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8020a0c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8020a10:	4413      	add	r3, r2
 8020a12:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8020a16:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8020a1a:	f04f 0600 	mov.w	r6, #0
 8020a1e:	9302      	str	r3, [sp, #8]
 8020a20:	4bca      	ldr	r3, [pc, #808]	@ (8020d4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 8020a22:	6818      	ldr	r0, [r3, #0]
 8020a24:	6803      	ldr	r3, [r0, #0]
 8020a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020a28:	4798      	blx	r3
 8020a2a:	4bc9      	ldr	r3, [pc, #804]	@ (8020d50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 8020a2c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8020a30:	881b      	ldrh	r3, [r3, #0]
 8020a32:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8020a36:	2100      	movs	r1, #0
 8020a38:	fb03 2404 	mla	r4, r3, r4, r2
 8020a3c:	436b      	muls	r3, r5
 8020a3e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020a42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020a46:	930d      	str	r3, [sp, #52]	@ 0x34
 8020a48:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8020a4c:	2280      	movs	r2, #128	@ 0x80
 8020a4e:	fb99 f3f3 	sdiv	r3, r9, r3
 8020a52:	9306      	str	r3, [sp, #24]
 8020a54:	9b01      	ldr	r3, [sp, #4]
 8020a56:	43db      	mvns	r3, r3
 8020a58:	b2db      	uxtb	r3, r3
 8020a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8020a5c:	9b03      	ldr	r3, [sp, #12]
 8020a5e:	3304      	adds	r3, #4
 8020a60:	4618      	mov	r0, r3
 8020a62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020a64:	f00b fa31 	bl	802beca <memset>
 8020a68:	4bba      	ldr	r3, [pc, #744]	@ (8020d54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 8020a6a:	9300      	str	r3, [sp, #0]
 8020a6c:	2300      	movs	r3, #0
 8020a6e:	9307      	str	r3, [sp, #28]
 8020a70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020a72:	42a3      	cmp	r3, r4
 8020a74:	f240 827b 	bls.w	8020f6e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 8020a78:	f04f 0e07 	mov.w	lr, #7
 8020a7c:	f1b9 0f00 	cmp.w	r9, #0
 8020a80:	f000 8159 	beq.w	8020d36 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8020a84:	f89a 5000 	ldrb.w	r5, [sl]
 8020a88:	f10a 0701 	add.w	r7, sl, #1
 8020a8c:	b2ed      	uxtb	r5, r5
 8020a8e:	11aa      	asrs	r2, r5, #6
 8020a90:	d10e      	bne.n	8020ab0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 8020a92:	9b03      	ldr	r3, [sp, #12]
 8020a94:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8020a98:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020a9c:	88ae      	ldrh	r6, [r5, #4]
 8020a9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8020aa2:	fa1f f989 	uxth.w	r9, r9
 8020aa6:	46ba      	mov	sl, r7
 8020aa8:	e7e8      	b.n	8020a7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 8020aaa:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8020aae:	e7a6      	b.n	80209fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 8020ab0:	2a01      	cmp	r2, #1
 8020ab2:	d129      	bne.n	8020b08 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 8020ab4:	2103      	movs	r1, #3
 8020ab6:	f3c6 0304 	ubfx	r3, r6, #0, #5
 8020aba:	f005 0203 	and.w	r2, r5, #3
 8020abe:	3b02      	subs	r3, #2
 8020ac0:	4413      	add	r3, r2
 8020ac2:	f003 031f 	and.w	r3, r3, #31
 8020ac6:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8020aca:	f363 0604 	bfi	r6, r3, #0, #5
 8020ace:	3a02      	subs	r2, #2
 8020ad0:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 8020ad4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020ad8:	f3c5 1501 	ubfx	r5, r5, #4, #2
 8020adc:	f362 164a 	bfi	r6, r2, #5, #6
 8020ae0:	3d02      	subs	r5, #2
 8020ae2:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 8020ae6:	f005 051f 	and.w	r5, r5, #31
 8020aea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020aee:	fb11 2205 	smlabb	r2, r1, r5, r2
 8020af2:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8020af6:	9a03      	ldr	r2, [sp, #12]
 8020af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020afc:	f365 26cf 	bfi	r6, r5, #11, #5
 8020b00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020b04:	809e      	strh	r6, [r3, #4]
 8020b06:	e7ca      	b.n	8020a9e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 8020b08:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8020b0c:	2a02      	cmp	r2, #2
 8020b0e:	b2ab      	uxth	r3, r5
 8020b10:	d136      	bne.n	8020b80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8020b12:	2101      	movs	r1, #1
 8020b14:	fb12 1205 	smlabb	r2, r2, r5, r1
 8020b18:	4492      	add	sl, r2
 8020b1a:	463a      	mov	r2, r7
 8020b1c:	4552      	cmp	r2, sl
 8020b1e:	d01c      	beq.n	8020b5a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 8020b20:	4694      	mov	ip, r2
 8020b22:	f04f 0b03 	mov.w	fp, #3
 8020b26:	f81c 1b02 	ldrb.w	r1, [ip], #2
 8020b2a:	7852      	ldrb	r2, [r2, #1]
 8020b2c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8020b30:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8020b34:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 8020b38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020b3c:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8020b40:	f001 021f 	and.w	r2, r1, #31
 8020b44:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8020b48:	9a03      	ldr	r2, [sp, #12]
 8020b4a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8020b4e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020b52:	460e      	mov	r6, r1
 8020b54:	8081      	strh	r1, [r0, #4]
 8020b56:	4662      	mov	r2, ip
 8020b58:	e7e0      	b.n	8020b1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 8020b5a:	4599      	cmp	r9, r3
 8020b5c:	d20b      	bcs.n	8020b76 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 8020b5e:	eba5 0509 	sub.w	r5, r5, r9
 8020b62:	2d00      	cmp	r5, #0
 8020b64:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8020b68:	f300 8209 	bgt.w	8020f7e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 8020b6c:	2301      	movs	r3, #1
 8020b6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020b72:	9307      	str	r3, [sp, #28]
 8020b74:	e00c      	b.n	8020b90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020b76:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020b7a:	eba9 0903 	sub.w	r9, r9, r3
 8020b7e:	e790      	b.n	8020aa2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 8020b80:	4599      	cmp	r9, r3
 8020b82:	d2fa      	bcs.n	8020b7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8020b84:	eba5 0509 	sub.w	r5, r5, r9
 8020b88:	2d00      	cmp	r5, #0
 8020b8a:	dc1d      	bgt.n	8020bc8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 8020b8c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020b90:	f04f 0b00 	mov.w	fp, #0
 8020b94:	f1b8 0f00 	cmp.w	r8, #0
 8020b98:	f340 81a1 	ble.w	8020ede <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 8020b9c:	783b      	ldrb	r3, [r7, #0]
 8020b9e:	f107 0a01 	add.w	sl, r7, #1
 8020ba2:	b2db      	uxtb	r3, r3
 8020ba4:	119a      	asrs	r2, r3, #6
 8020ba6:	f040 80d7 	bne.w	8020d58 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 8020baa:	9a03      	ldr	r2, [sp, #12]
 8020bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020bb0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020bb4:	889e      	ldrh	r6, [r3, #4]
 8020bb6:	9b01      	ldr	r3, [sp, #4]
 8020bb8:	2bff      	cmp	r3, #255	@ 0xff
 8020bba:	f040 81e9 	bne.w	8020f90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 8020bbe:	8026      	strh	r6, [r4, #0]
 8020bc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8020bc4:	3402      	adds	r4, #2
 8020bc6:	e0be      	b.n	8020d46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020bc8:	9b02      	ldr	r3, [sp, #8]
 8020bca:	9a02      	ldr	r2, [sp, #8]
 8020bcc:	42ab      	cmp	r3, r5
 8020bce:	bfa8      	it	ge
 8020bd0:	462b      	movge	r3, r5
 8020bd2:	eba2 0803 	sub.w	r8, r2, r3
 8020bd6:	9a07      	ldr	r2, [sp, #28]
 8020bd8:	1aed      	subs	r5, r5, r3
 8020bda:	2a00      	cmp	r2, #0
 8020bdc:	d05a      	beq.n	8020c94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 8020bde:	9a01      	ldr	r2, [sp, #4]
 8020be0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020be4:	2aff      	cmp	r2, #255	@ 0xff
 8020be6:	d049      	beq.n	8020c7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8020be8:	f8bd e004 	ldrh.w	lr, [sp, #4]
 8020bec:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8020bf0:	42a3      	cmp	r3, r4
 8020bf2:	f240 80a5 	bls.w	8020d40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8020bf6:	46bc      	mov	ip, r7
 8020bf8:	8820      	ldrh	r0, [r4, #0]
 8020bfa:	f81c 2b02 	ldrb.w	r2, [ip], #2
 8020bfe:	7879      	ldrb	r1, [r7, #1]
 8020c00:	ea4f 2a20 	mov.w	sl, r0, asr #8
 8020c04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8020c08:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8020c0c:	b212      	sxth	r2, r2
 8020c0e:	fb1a fa09 	smulbb	sl, sl, r9
 8020c12:	b291      	uxth	r1, r2
 8020c14:	120f      	asrs	r7, r1, #8
 8020c16:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020c1a:	fb07 a70e 	mla	r7, r7, lr, sl
 8020c1e:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 8020c22:	00c0      	lsls	r0, r0, #3
 8020c24:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8020c28:	b2c0      	uxtb	r0, r0
 8020c2a:	fb1a fa09 	smulbb	sl, sl, r9
 8020c2e:	fb10 f009 	smulbb	r0, r0, r9
 8020c32:	10c9      	asrs	r1, r1, #3
 8020c34:	00d2      	lsls	r2, r2, #3
 8020c36:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020c3a:	b2d2      	uxtb	r2, r2
 8020c3c:	fb01 a10e 	mla	r1, r1, lr, sl
 8020c40:	fb02 020e 	mla	r2, r2, lr, r0
 8020c44:	b2bf      	uxth	r7, r7
 8020c46:	b289      	uxth	r1, r1
 8020c48:	b292      	uxth	r2, r2
 8020c4a:	1c78      	adds	r0, r7, #1
 8020c4c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020c50:	f101 0a01 	add.w	sl, r1, #1
 8020c54:	1c50      	adds	r0, r2, #1
 8020c56:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020c5a:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 8020c5e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8020c62:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020c66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020c6a:	4307      	orrs	r7, r0
 8020c6c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020c70:	ea47 070a 	orr.w	r7, r7, sl
 8020c74:	f824 7b02 	strh.w	r7, [r4], #2
 8020c78:	4667      	mov	r7, ip
 8020c7a:	e7b9      	b.n	8020bf0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8020c7c:	42a3      	cmp	r3, r4
 8020c7e:	d95f      	bls.n	8020d40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8020c80:	463a      	mov	r2, r7
 8020c82:	f812 1b02 	ldrb.w	r1, [r2], #2
 8020c86:	7878      	ldrb	r0, [r7, #1]
 8020c88:	4617      	mov	r7, r2
 8020c8a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8020c8e:	f824 1b02 	strh.w	r1, [r4], #2
 8020c92:	e7f3      	b.n	8020c7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8020c94:	9901      	ldr	r1, [sp, #4]
 8020c96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020c9a:	29ff      	cmp	r1, #255	@ 0xff
 8020c9c:	b2b2      	uxth	r2, r6
 8020c9e:	d044      	beq.n	8020d2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8020ca0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020ca4:	ea4f 2922 	mov.w	r9, r2, asr #8
 8020ca8:	4608      	mov	r0, r1
 8020caa:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020cae:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8020cb2:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8020cb6:	fb09 f901 	mul.w	r9, r9, r1
 8020cba:	fb0e fe01 	mul.w	lr, lr, r1
 8020cbe:	00d1      	lsls	r1, r2, #3
 8020cc0:	b2c9      	uxtb	r1, r1
 8020cc2:	4341      	muls	r1, r0
 8020cc4:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 8020cc8:	429c      	cmp	r4, r3
 8020cca:	f4bf af61 	bcs.w	8020b90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020cce:	8822      	ldrh	r2, [r4, #0]
 8020cd0:	1210      	asrs	r0, r2, #8
 8020cd2:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020cd6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020cda:	00d2      	lsls	r2, r2, #3
 8020cdc:	fb00 900a 	mla	r0, r0, sl, r9
 8020ce0:	b2d2      	uxtb	r2, r2
 8020ce2:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020ce6:	fb02 120a 	mla	r2, r2, sl, r1
 8020cea:	fb0c ec0a 	mla	ip, ip, sl, lr
 8020cee:	b280      	uxth	r0, r0
 8020cf0:	b292      	uxth	r2, r2
 8020cf2:	f100 0b01 	add.w	fp, r0, #1
 8020cf6:	fa1f fc8c 	uxth.w	ip, ip
 8020cfa:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8020cfe:	1c50      	adds	r0, r2, #1
 8020d00:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020d04:	f10c 0201 	add.w	r2, ip, #1
 8020d08:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020d0c:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8020d10:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020d14:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020d18:	ea40 0b0b 	orr.w	fp, r0, fp
 8020d1c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8020d20:	ea4b 0b0c 	orr.w	fp, fp, ip
 8020d24:	f824 bb02 	strh.w	fp, [r4], #2
 8020d28:	e7ce      	b.n	8020cc8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 8020d2a:	429c      	cmp	r4, r3
 8020d2c:	f4bf af30 	bcs.w	8020b90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020d30:	f824 2b02 	strh.w	r2, [r4], #2
 8020d34:	e7f9      	b.n	8020d2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8020d36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020d3a:	4657      	mov	r7, sl
 8020d3c:	464d      	mov	r5, r9
 8020d3e:	e727      	b.n	8020b90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8020d40:	2300      	movs	r3, #0
 8020d42:	e716      	b.n	8020b72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8020d44:	44bb      	add	fp, r7
 8020d46:	4657      	mov	r7, sl
 8020d48:	e724      	b.n	8020b94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 8020d4a:	bf00      	nop
 8020d4c:	20011f2c 	.word	0x20011f2c
 8020d50:	20011f26 	.word	0x20011f26
 8020d54:	20000120 	.word	0x20000120
 8020d58:	2a01      	cmp	r2, #1
 8020d5a:	d12a      	bne.n	8020db2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 8020d5c:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8020d60:	f003 0203 	and.w	r2, r3, #3
 8020d64:	3902      	subs	r1, #2
 8020d66:	4411      	add	r1, r2
 8020d68:	f001 011f 	and.w	r1, r1, #31
 8020d6c:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8020d70:	f361 0604 	bfi	r6, r1, #0, #5
 8020d74:	3802      	subs	r0, #2
 8020d76:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8020d7a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8020d7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020d82:	f360 164a 	bfi	r6, r0, #5, #6
 8020d86:	3b02      	subs	r3, #2
 8020d88:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 8020d8c:	f002 031f 	and.w	r3, r2, #31
 8020d90:	2203      	movs	r2, #3
 8020d92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020d96:	f363 26cf 	bfi	r6, r3, #11, #5
 8020d9a:	fb12 0303 	smlabb	r3, r2, r3, r0
 8020d9e:	2207      	movs	r2, #7
 8020da0:	fb12 3301 	smlabb	r3, r2, r1, r3
 8020da4:	9a03      	ldr	r2, [sp, #12]
 8020da6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020daa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020dae:	809e      	strh	r6, [r3, #4]
 8020db0:	e701      	b.n	8020bb6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 8020db2:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8020db6:	45a8      	cmp	r8, r5
 8020db8:	4647      	mov	r7, r8
 8020dba:	bfa8      	it	ge
 8020dbc:	462f      	movge	r7, r5
 8020dbe:	2a02      	cmp	r2, #2
 8020dc0:	d154      	bne.n	8020e6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 8020dc2:	9b01      	ldr	r3, [sp, #4]
 8020dc4:	2bff      	cmp	r3, #255	@ 0xff
 8020dc6:	d01a      	beq.n	8020dfe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8020dc8:	eb0b 0307 	add.w	r3, fp, r7
 8020dcc:	2b40      	cmp	r3, #64	@ 0x40
 8020dce:	dd16      	ble.n	8020dfe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8020dd0:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8020dd4:	4649      	mov	r1, r9
 8020dd6:	9800      	ldr	r0, [sp, #0]
 8020dd8:	f7f2 fd55 	bl	8013886 <_ZN8touchgfx5paint9flushLineEPmi>
 8020ddc:	465a      	mov	r2, fp
 8020dde:	9b01      	ldr	r3, [sp, #4]
 8020de0:	4620      	mov	r0, r4
 8020de2:	9900      	ldr	r1, [sp, #0]
 8020de4:	f7f2 fdfc 	bl	80139e0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020de8:	9b00      	ldr	r3, [sp, #0]
 8020dea:	f04f 0b00 	mov.w	fp, #0
 8020dee:	461a      	mov	r2, r3
 8020df0:	4b6b      	ldr	r3, [pc, #428]	@ (8020fa0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020df2:	444c      	add	r4, r9
 8020df4:	429a      	cmp	r2, r3
 8020df6:	bf0c      	ite	eq
 8020df8:	4b6a      	ldreq	r3, [pc, #424]	@ (8020fa4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8020dfa:	4b69      	ldrne	r3, [pc, #420]	@ (8020fa0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020dfc:	9300      	str	r3, [sp, #0]
 8020dfe:	4652      	mov	r2, sl
 8020e00:	2100      	movs	r1, #0
 8020e02:	42a9      	cmp	r1, r5
 8020e04:	da2c      	bge.n	8020e60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8020e06:	4694      	mov	ip, r2
 8020e08:	f04f 0903 	mov.w	r9, #3
 8020e0c:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8020e10:	7852      	ldrb	r2, [r2, #1]
 8020e12:	42b9      	cmp	r1, r7
 8020e14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020e18:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8020e1c:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8020e20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8020e24:	fb19 000e 	smlabb	r0, r9, lr, r0
 8020e28:	f04f 0e07 	mov.w	lr, #7
 8020e2c:	f003 021f 	and.w	r2, r3, #31
 8020e30:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8020e34:	9a03      	ldr	r2, [sp, #12]
 8020e36:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8020e3a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020e3e:	461e      	mov	r6, r3
 8020e40:	8083      	strh	r3, [r0, #4]
 8020e42:	da0a      	bge.n	8020e5a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8020e44:	9a01      	ldr	r2, [sp, #4]
 8020e46:	2aff      	cmp	r2, #255	@ 0xff
 8020e48:	bf15      	itete	ne
 8020e4a:	9a00      	ldrne	r2, [sp, #0]
 8020e4c:	8023      	strheq	r3, [r4, #0]
 8020e4e:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8020e52:	3402      	addeq	r4, #2
 8020e54:	bf18      	it	ne
 8020e56:	f10b 0b01 	addne.w	fp, fp, #1
 8020e5a:	3101      	adds	r1, #1
 8020e5c:	4662      	mov	r2, ip
 8020e5e:	e7d0      	b.n	8020e02 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8020e60:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8020e64:	eba8 0807 	sub.w	r8, r8, r7
 8020e68:	1bed      	subs	r5, r5, r7
 8020e6a:	e76c      	b.n	8020d46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020e6c:	9b01      	ldr	r3, [sp, #4]
 8020e6e:	eba8 0807 	sub.w	r8, r8, r7
 8020e72:	2bff      	cmp	r3, #255	@ 0xff
 8020e74:	eba5 0507 	sub.w	r5, r5, r7
 8020e78:	fa1f f986 	uxth.w	r9, r6
 8020e7c:	d027      	beq.n	8020ece <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8020e7e:	eb0b 0307 	add.w	r3, fp, r7
 8020e82:	2b40      	cmp	r3, #64	@ 0x40
 8020e84:	dd18      	ble.n	8020eb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8020e86:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8020e8a:	4619      	mov	r1, r3
 8020e8c:	9800      	ldr	r0, [sp, #0]
 8020e8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e90:	f7f2 fcf9 	bl	8013886 <_ZN8touchgfx5paint9flushLineEPmi>
 8020e94:	465a      	mov	r2, fp
 8020e96:	9b01      	ldr	r3, [sp, #4]
 8020e98:	4620      	mov	r0, r4
 8020e9a:	9900      	ldr	r1, [sp, #0]
 8020e9c:	f7f2 fda0 	bl	80139e0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020ea2:	f04f 0b00 	mov.w	fp, #0
 8020ea6:	441c      	add	r4, r3
 8020ea8:	9b00      	ldr	r3, [sp, #0]
 8020eaa:	461a      	mov	r2, r3
 8020eac:	4b3c      	ldr	r3, [pc, #240]	@ (8020fa0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020eae:	429a      	cmp	r2, r3
 8020eb0:	bf0c      	ite	eq
 8020eb2:	4b3c      	ldreq	r3, [pc, #240]	@ (8020fa4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8020eb4:	4b3a      	ldrne	r3, [pc, #232]	@ (8020fa0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8020eb6:	9300      	str	r3, [sp, #0]
 8020eb8:	9b00      	ldr	r3, [sp, #0]
 8020eba:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8020ebe:	463b      	mov	r3, r7
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	f43f af3f 	beq.w	8020d44 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8020ec6:	f822 9b02 	strh.w	r9, [r2], #2
 8020eca:	3b01      	subs	r3, #1
 8020ecc:	e7f8      	b.n	8020ec0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8020ece:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8020ed2:	42a7      	cmp	r7, r4
 8020ed4:	f67f af37 	bls.w	8020d46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8020ed8:	f824 9b02 	strh.w	r9, [r4], #2
 8020edc:	e7f9      	b.n	8020ed2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8020ede:	f1bb 0f00 	cmp.w	fp, #0
 8020ee2:	d00c      	beq.n	8020efe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8020ee4:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8020ee8:	4641      	mov	r1, r8
 8020eea:	9800      	ldr	r0, [sp, #0]
 8020eec:	f7f2 fccb 	bl	8013886 <_ZN8touchgfx5paint9flushLineEPmi>
 8020ef0:	4620      	mov	r0, r4
 8020ef2:	9b01      	ldr	r3, [sp, #4]
 8020ef4:	465a      	mov	r2, fp
 8020ef6:	9900      	ldr	r1, [sp, #0]
 8020ef8:	f7f2 fd72 	bl	80139e0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8020efc:	4444      	add	r4, r8
 8020efe:	4b2a      	ldr	r3, [pc, #168]	@ (8020fa8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8020f00:	9a02      	ldr	r2, [sp, #8]
 8020f02:	881b      	ldrh	r3, [r3, #0]
 8020f04:	1a9b      	subs	r3, r3, r2
 8020f06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020f0a:	9b06      	ldr	r3, [sp, #24]
 8020f0c:	3301      	adds	r3, #1
 8020f0e:	9306      	str	r3, [sp, #24]
 8020f10:	9a06      	ldr	r2, [sp, #24]
 8020f12:	9b04      	ldr	r3, [sp, #16]
 8020f14:	4293      	cmp	r3, r2
 8020f16:	d120      	bne.n	8020f5a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8020f18:	9b05      	ldr	r3, [sp, #20]
 8020f1a:	9a05      	ldr	r2, [sp, #20]
 8020f1c:	f103 0801 	add.w	r8, r3, #1
 8020f20:	9b08      	ldr	r3, [sp, #32]
 8020f22:	2100      	movs	r1, #0
 8020f24:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8020f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f2a:	ba3f      	rev	r7, r7
 8020f2c:	2280      	movs	r2, #128	@ 0x80
 8020f2e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020f30:	441f      	add	r7, r3
 8020f32:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8020f36:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8020f3a:	f00a ffc6 	bl	802beca <memset>
 8020f3e:	2300      	movs	r3, #0
 8020f40:	f04f 0600 	mov.w	r6, #0
 8020f44:	eba9 0905 	sub.w	r9, r9, r5
 8020f48:	fa1f f989 	uxth.w	r9, r9
 8020f4c:	f8cd 8014 	str.w	r8, [sp, #20]
 8020f50:	9306      	str	r3, [sp, #24]
 8020f52:	f7f2 fc91 	bl	8013878 <_ZN8touchgfx5paint8tearDownEv>
 8020f56:	46ba      	mov	sl, r7
 8020f58:	e58a      	b.n	8020a70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8020f5a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8020f5e:	9b02      	ldr	r3, [sp, #8]
 8020f60:	eba9 0903 	sub.w	r9, r9, r3
 8020f64:	eba9 0505 	sub.w	r5, r9, r5
 8020f68:	fa1f f985 	uxth.w	r9, r5
 8020f6c:	e7f1      	b.n	8020f52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8020f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8020fac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8020f70:	6818      	ldr	r0, [r3, #0]
 8020f72:	6803      	ldr	r3, [r0, #0]
 8020f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020f76:	4798      	blx	r3
 8020f78:	b013      	add	sp, #76	@ 0x4c
 8020f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f7e:	9b02      	ldr	r3, [sp, #8]
 8020f80:	9a02      	ldr	r2, [sp, #8]
 8020f82:	42ab      	cmp	r3, r5
 8020f84:	bfa8      	it	ge
 8020f86:	462b      	movge	r3, r5
 8020f88:	eba2 0803 	sub.w	r8, r2, r3
 8020f8c:	1aed      	subs	r5, r5, r3
 8020f8e:	e626      	b.n	8020bde <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8020f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8020f94:	fa1f f986 	uxth.w	r9, r6
 8020f98:	2500      	movs	r5, #0
 8020f9a:	2701      	movs	r7, #1
 8020f9c:	e76f      	b.n	8020e7e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8020f9e:	bf00      	nop
 8020fa0:	20000120 	.word	0x20000120
 8020fa4:	20000220 	.word	0x20000220
 8020fa8:	20011f26 	.word	0x20011f26
 8020fac:	20011f2c 	.word	0x20011f2c

08020fb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb4:	b08f      	sub	sp, #60	@ 0x3c
 8020fb6:	9203      	str	r2, [sp, #12]
 8020fb8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020fbc:	461c      	mov	r4, r3
 8020fbe:	460f      	mov	r7, r1
 8020fc0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020fc2:	9202      	str	r2, [sp, #8]
 8020fc4:	2a00      	cmp	r2, #0
 8020fc6:	f000 812a 	beq.w	802121e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 8020fca:	6820      	ldr	r0, [r4, #0]
 8020fcc:	6861      	ldr	r1, [r4, #4]
 8020fce:	aa0a      	add	r2, sp, #40	@ 0x28
 8020fd0:	c203      	stmia	r2!, {r0, r1}
 8020fd2:	6818      	ldr	r0, [r3, #0]
 8020fd4:	6859      	ldr	r1, [r3, #4]
 8020fd6:	aa0c      	add	r2, sp, #48	@ 0x30
 8020fd8:	c203      	stmia	r2!, {r0, r1}
 8020fda:	a80a      	add	r0, sp, #40	@ 0x28
 8020fdc:	f7f8 fd08 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020fe0:	4621      	mov	r1, r4
 8020fe2:	a80c      	add	r0, sp, #48	@ 0x30
 8020fe4:	f7f8 fd2c 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020fe8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020fec:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020ff0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020ff4:	bfdd      	ittte	le
 8020ff6:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020ffa:	b2b3      	uxthle	r3, r6
 8020ffc:	fb92 f3f3 	sdivle	r3, r2, r3
 8021000:	2301      	movgt	r3, #1
 8021002:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021006:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 802100a:	fb92 f1f3 	sdiv	r1, r2, r3
 802100e:	fa1f fc81 	uxth.w	ip, r1
 8021012:	4661      	mov	r1, ip
 8021014:	fb0c 2413 	mls	r4, ip, r3, r2
 8021018:	fb14 f406 	smulbb	r4, r4, r6
 802101c:	441d      	add	r5, r3
 802101e:	3d01      	subs	r5, #1
 8021020:	4404      	add	r4, r0
 8021022:	fb95 f5f3 	sdiv	r5, r5, r3
 8021026:	b2a4      	uxth	r4, r4
 8021028:	b121      	cbz	r1, 8021034 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 802102a:	9b03      	ldr	r3, [sp, #12]
 802102c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021030:	ba1b      	rev	r3, r3
 8021032:	441f      	add	r7, r3
 8021034:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021038:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802103c:	4418      	add	r0, r3
 802103e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021042:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021046:	441a      	add	r2, r3
 8021048:	4b76      	ldr	r3, [pc, #472]	@ (8021224 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 802104a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802104e:	6818      	ldr	r0, [r3, #0]
 8021050:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021054:	6803      	ldr	r3, [r0, #0]
 8021056:	b2ad      	uxth	r5, r5
 8021058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802105a:	4798      	blx	r3
 802105c:	4a72      	ldr	r2, [pc, #456]	@ (8021228 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 802105e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021062:	8813      	ldrh	r3, [r2, #0]
 8021064:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021068:	00ad      	lsls	r5, r5, #2
 802106a:	fb03 c101 	mla	r1, r3, r1, ip
 802106e:	4373      	muls	r3, r6
 8021070:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021074:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021078:	2c00      	cmp	r4, #0
 802107a:	9304      	str	r3, [sp, #16]
 802107c:	f105 0304 	add.w	r3, r5, #4
 8021080:	9305      	str	r3, [sp, #20]
 8021082:	bf0c      	ite	eq
 8021084:	46c8      	moveq	r8, r9
 8021086:	f04f 0800 	movne.w	r8, #0
 802108a:	2300      	movs	r3, #0
 802108c:	fa1f f888 	uxth.w	r8, r8
 8021090:	9301      	str	r3, [sp, #4]
 8021092:	9209      	str	r2, [sp, #36]	@ 0x24
 8021094:	9a04      	ldr	r2, [sp, #16]
 8021096:	4282      	cmp	r2, r0
 8021098:	f240 80bc 	bls.w	8021214 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 802109c:	b95b      	cbnz	r3, 80210b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 802109e:	783a      	ldrb	r2, [r7, #0]
 80210a0:	0993      	lsrs	r3, r2, #6
 80210a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80210a6:	9201      	str	r2, [sp, #4]
 80210a8:	1e5a      	subs	r2, r3, #1
 80210aa:	2a02      	cmp	r2, #2
 80210ac:	bf8d      	iteet	hi
 80210ae:	787b      	ldrbhi	r3, [r7, #1]
 80210b0:	3701      	addls	r7, #1
 80210b2:	b29b      	uxthls	r3, r3
 80210b4:	3702      	addhi	r7, #2
 80210b6:	b184      	cbz	r4, 80210da <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80210b8:	429c      	cmp	r4, r3
 80210ba:	bf99      	ittee	ls
 80210bc:	1b1c      	subls	r4, r3, r4
 80210be:	fa1f fa84 	uxthls.w	sl, r4
 80210c2:	46c4      	movhi	ip, r8
 80210c4:	f04f 0a00 	movhi.w	sl, #0
 80210c8:	bf93      	iteet	ls
 80210ca:	2400      	movls	r4, #0
 80210cc:	1ae4      	subhi	r4, r4, r3
 80210ce:	b2a4      	uxthhi	r4, r4
 80210d0:	fa1f fc89 	uxthls.w	ip, r9
 80210d4:	4653      	mov	r3, sl
 80210d6:	46e0      	mov	r8, ip
 80210d8:	e7dc      	b.n	8021094 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 80210da:	2204      	movs	r2, #4
 80210dc:	4615      	mov	r5, r2
 80210de:	4543      	cmp	r3, r8
 80210e0:	bf2c      	ite	cs
 80210e2:	46c6      	movcs	lr, r8
 80210e4:	469e      	movcc	lr, r3
 80210e6:	9905      	ldr	r1, [sp, #20]
 80210e8:	9a01      	ldr	r2, [sp, #4]
 80210ea:	bf28      	it	cs
 80210ec:	eba3 0a08 	subcs.w	sl, r3, r8
 80210f0:	fb15 1202 	smlabb	r2, r5, r2, r1
 80210f4:	9903      	ldr	r1, [sp, #12]
 80210f6:	bf38      	it	cc
 80210f8:	eba8 0c03 	subcc.w	ip, r8, r3
 80210fc:	588a      	ldr	r2, [r1, r2]
 80210fe:	bf28      	it	cs
 8021100:	fa1f fa8a 	uxthcs.w	sl, sl
 8021104:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8021108:	bf2e      	itee	cs
 802110a:	46a4      	movcs	ip, r4
 802110c:	fa1f fc8c 	uxthcc.w	ip, ip
 8021110:	46a2      	movcc	sl, r4
 8021112:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8021116:	2900      	cmp	r1, #0
 8021118:	d066      	beq.n	80211e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 802111a:	29ff      	cmp	r1, #255	@ 0xff
 802111c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021120:	d114      	bne.n	802114c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021122:	9d02      	ldr	r5, [sp, #8]
 8021124:	2dff      	cmp	r5, #255	@ 0xff
 8021126:	d111      	bne.n	802114c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021128:	0951      	lsrs	r1, r2, #5
 802112a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 802112e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021132:	f026 0607 	bic.w	r6, r6, #7
 8021136:	430e      	orrs	r6, r1
 8021138:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802113c:	4316      	orrs	r6, r2
 802113e:	b2b6      	uxth	r6, r6
 8021140:	4486      	add	lr, r0
 8021142:	4586      	cmp	lr, r0
 8021144:	d051      	beq.n	80211ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021146:	f820 6b02 	strh.w	r6, [r0], #2
 802114a:	e7fa      	b.n	8021142 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 802114c:	9d02      	ldr	r5, [sp, #8]
 802114e:	b2f6      	uxtb	r6, r6
 8021150:	4369      	muls	r1, r5
 8021152:	1c4d      	adds	r5, r1, #1
 8021154:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8021158:	122d      	asrs	r5, r5, #8
 802115a:	ea6f 0b05 	mvn.w	fp, r5
 802115e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021162:	b2ad      	uxth	r5, r5
 8021164:	b2d2      	uxtb	r2, r2
 8021166:	fb11 f105 	smulbb	r1, r1, r5
 802116a:	fb16 f605 	smulbb	r6, r6, r5
 802116e:	fb12 f205 	smulbb	r2, r2, r5
 8021172:	b289      	uxth	r1, r1
 8021174:	b2b6      	uxth	r6, r6
 8021176:	b292      	uxth	r2, r2
 8021178:	9106      	str	r1, [sp, #24]
 802117a:	9607      	str	r6, [sp, #28]
 802117c:	9208      	str	r2, [sp, #32]
 802117e:	4486      	add	lr, r0
 8021180:	fa5f fb8b 	uxtb.w	fp, fp
 8021184:	4586      	cmp	lr, r0
 8021186:	d030      	beq.n	80211ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021188:	8802      	ldrh	r2, [r0, #0]
 802118a:	9906      	ldr	r1, [sp, #24]
 802118c:	1216      	asrs	r6, r2, #8
 802118e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021192:	10d5      	asrs	r5, r2, #3
 8021194:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021198:	fb06 160b 	mla	r6, r6, fp, r1
 802119c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80211a0:	9907      	ldr	r1, [sp, #28]
 80211a2:	00d2      	lsls	r2, r2, #3
 80211a4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80211a8:	fb05 150b 	mla	r5, r5, fp, r1
 80211ac:	b2d2      	uxtb	r2, r2
 80211ae:	9908      	ldr	r1, [sp, #32]
 80211b0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80211b4:	fb02 120b 	mla	r2, r2, fp, r1
 80211b8:	b2b6      	uxth	r6, r6
 80211ba:	b292      	uxth	r2, r2
 80211bc:	1c71      	adds	r1, r6, #1
 80211be:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80211c2:	1c51      	adds	r1, r2, #1
 80211c4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80211c8:	b2ad      	uxth	r5, r5
 80211ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80211ce:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80211d2:	4316      	orrs	r6, r2
 80211d4:	1c6a      	adds	r2, r5, #1
 80211d6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80211da:	096d      	lsrs	r5, r5, #5
 80211dc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80211e0:	432e      	orrs	r6, r5
 80211e2:	f820 6b02 	strh.w	r6, [r0], #2
 80211e6:	e7cd      	b.n	8021184 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 80211e8:	4470      	add	r0, lr
 80211ea:	4543      	cmp	r3, r8
 80211ec:	f4ff af72 	bcc.w	80210d4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80211f0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80211f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80211f6:	fa1f fc89 	uxth.w	ip, r9
 80211fa:	eba4 040c 	sub.w	r4, r4, ip
 80211fe:	881b      	ldrh	r3, [r3, #0]
 8021200:	b2a4      	uxth	r4, r4
 8021202:	2c00      	cmp	r4, #0
 8021204:	eba3 0309 	sub.w	r3, r3, r9
 8021208:	bf18      	it	ne
 802120a:	f04f 0c00 	movne.w	ip, #0
 802120e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021212:	e75f      	b.n	80210d4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021214:	4b03      	ldr	r3, [pc, #12]	@ (8021224 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021216:	6818      	ldr	r0, [r3, #0]
 8021218:	6803      	ldr	r3, [r0, #0]
 802121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802121c:	4798      	blx	r3
 802121e:	b00f      	add	sp, #60	@ 0x3c
 8021220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021224:	20011f2c 	.word	0x20011f2c
 8021228:	20011f26 	.word	0x20011f26

0802122c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021230:	b093      	sub	sp, #76	@ 0x4c
 8021232:	9205      	str	r2, [sp, #20]
 8021234:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8021238:	461c      	mov	r4, r3
 802123a:	9101      	str	r1, [sp, #4]
 802123c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802123e:	9202      	str	r2, [sp, #8]
 8021240:	2a00      	cmp	r2, #0
 8021242:	f000 812d 	beq.w	80214a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8021246:	6820      	ldr	r0, [r4, #0]
 8021248:	6861      	ldr	r1, [r4, #4]
 802124a:	aa0e      	add	r2, sp, #56	@ 0x38
 802124c:	c203      	stmia	r2!, {r0, r1}
 802124e:	6818      	ldr	r0, [r3, #0]
 8021250:	6859      	ldr	r1, [r3, #4]
 8021252:	aa10      	add	r2, sp, #64	@ 0x40
 8021254:	c203      	stmia	r2!, {r0, r1}
 8021256:	a80e      	add	r0, sp, #56	@ 0x38
 8021258:	f7f8 fbca 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802125c:	4621      	mov	r1, r4
 802125e:	a810      	add	r0, sp, #64	@ 0x40
 8021260:	f7f8 fbee 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021264:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8021268:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 802126c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021270:	bfdd      	ittte	le
 8021272:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021276:	b2b3      	uxthle	r3, r6
 8021278:	fb92 f3f3 	sdivle	r3, r2, r3
 802127c:	2301      	movgt	r3, #1
 802127e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8021282:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8021286:	fb92 f1f3 	sdiv	r1, r2, r3
 802128a:	fa1f fc81 	uxth.w	ip, r1
 802128e:	4661      	mov	r1, ip
 8021290:	fb0c 2413 	mls	r4, ip, r3, r2
 8021294:	fb14 f406 	smulbb	r4, r4, r6
 8021298:	441d      	add	r5, r3
 802129a:	3d01      	subs	r5, #1
 802129c:	4404      	add	r4, r0
 802129e:	fb95 f5f3 	sdiv	r5, r5, r3
 80212a2:	b2a4      	uxth	r4, r4
 80212a4:	b131      	cbz	r1, 80212b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 80212a6:	9b05      	ldr	r3, [sp, #20]
 80212a8:	9901      	ldr	r1, [sp, #4]
 80212aa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80212ae:	ba1b      	rev	r3, r3
 80212b0:	4419      	add	r1, r3
 80212b2:	9101      	str	r1, [sp, #4]
 80212b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80212b8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80212bc:	4418      	add	r0, r3
 80212be:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80212c2:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80212c6:	441a      	add	r2, r3
 80212c8:	4b77      	ldr	r3, [pc, #476]	@ (80214a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80212ca:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80212ce:	6818      	ldr	r0, [r3, #0]
 80212d0:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 80212d4:	6803      	ldr	r3, [r0, #0]
 80212d6:	b2ad      	uxth	r5, r5
 80212d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212da:	4798      	blx	r3
 80212dc:	4973      	ldr	r1, [pc, #460]	@ (80214ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 80212de:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 80212e2:	880b      	ldrh	r3, [r1, #0]
 80212e4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80212e8:	00ad      	lsls	r5, r5, #2
 80212ea:	fb03 c202 	mla	r2, r3, r2, ip
 80212ee:	4373      	muls	r3, r6
 80212f0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80212f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80212f8:	9308      	str	r3, [sp, #32]
 80212fa:	1d2b      	adds	r3, r5, #4
 80212fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80212fe:	9b02      	ldr	r3, [sp, #8]
 8021300:	2c00      	cmp	r4, #0
 8021302:	ea6f 0203 	mvn.w	r2, r3
 8021306:	bf0c      	ite	eq
 8021308:	46dc      	moveq	ip, fp
 802130a:	f04f 0c00 	movne.w	ip, #0
 802130e:	2300      	movs	r3, #0
 8021310:	910d      	str	r1, [sp, #52]	@ 0x34
 8021312:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021316:	b2d2      	uxtb	r2, r2
 8021318:	fa1f fc8c 	uxth.w	ip, ip
 802131c:	9303      	str	r3, [sp, #12]
 802131e:	9106      	str	r1, [sp, #24]
 8021320:	9207      	str	r2, [sp, #28]
 8021322:	9a08      	ldr	r2, [sp, #32]
 8021324:	4282      	cmp	r2, r0
 8021326:	f240 80b6 	bls.w	8021496 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 802132a:	b963      	cbnz	r3, 8021346 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 802132c:	9b01      	ldr	r3, [sp, #4]
 802132e:	781a      	ldrb	r2, [r3, #0]
 8021330:	0993      	lsrs	r3, r2, #6
 8021332:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021336:	9203      	str	r2, [sp, #12]
 8021338:	1e5a      	subs	r2, r3, #1
 802133a:	2a02      	cmp	r2, #2
 802133c:	d815      	bhi.n	802136a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 802133e:	9a01      	ldr	r2, [sp, #4]
 8021340:	b29b      	uxth	r3, r3
 8021342:	3201      	adds	r2, #1
 8021344:	9201      	str	r2, [sp, #4]
 8021346:	b1b4      	cbz	r4, 8021376 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021348:	429c      	cmp	r4, r3
 802134a:	bf99      	ittee	ls
 802134c:	1b1c      	subls	r4, r3, r4
 802134e:	fa1f f884 	uxthls.w	r8, r4
 8021352:	4666      	movhi	r6, ip
 8021354:	f04f 0800 	movhi.w	r8, #0
 8021358:	bf93      	iteet	ls
 802135a:	2400      	movls	r4, #0
 802135c:	1ae4      	subhi	r4, r4, r3
 802135e:	b2a4      	uxthhi	r4, r4
 8021360:	fa1f f68b 	uxthls.w	r6, fp
 8021364:	4643      	mov	r3, r8
 8021366:	46b4      	mov	ip, r6
 8021368:	e7db      	b.n	8021322 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 802136a:	9a01      	ldr	r2, [sp, #4]
 802136c:	9b01      	ldr	r3, [sp, #4]
 802136e:	3202      	adds	r2, #2
 8021370:	785b      	ldrb	r3, [r3, #1]
 8021372:	9201      	str	r2, [sp, #4]
 8021374:	e7e7      	b.n	8021346 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021376:	2203      	movs	r2, #3
 8021378:	4615      	mov	r5, r2
 802137a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802137c:	9a03      	ldr	r2, [sp, #12]
 802137e:	4563      	cmp	r3, ip
 8021380:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021384:	9905      	ldr	r1, [sp, #20]
 8021386:	bf28      	it	cs
 8021388:	eba3 080c 	subcs.w	r8, r3, ip
 802138c:	eb01 0502 	add.w	r5, r1, r2
 8021390:	9902      	ldr	r1, [sp, #8]
 8021392:	bf31      	iteee	cc
 8021394:	ebac 0603 	subcc.w	r6, ip, r3
 8021398:	fa1f f888 	uxthcs.w	r8, r8
 802139c:	46e1      	movcs	r9, ip
 802139e:	4626      	movcs	r6, r4
 80213a0:	bf3e      	ittt	cc
 80213a2:	b2b6      	uxthcc	r6, r6
 80213a4:	4699      	movcc	r9, r3
 80213a6:	46a0      	movcc	r8, r4
 80213a8:	29ff      	cmp	r1, #255	@ 0xff
 80213aa:	d04a      	beq.n	8021442 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 80213ac:	46ca      	mov	sl, r9
 80213ae:	9f06      	ldr	r7, [sp, #24]
 80213b0:	78a9      	ldrb	r1, [r5, #2]
 80213b2:	9004      	str	r0, [sp, #16]
 80213b4:	4379      	muls	r1, r7
 80213b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80213b8:	7869      	ldrb	r1, [r5, #1]
 80213ba:	4379      	muls	r1, r7
 80213bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80213be:	9905      	ldr	r1, [sp, #20]
 80213c0:	5c8a      	ldrb	r2, [r1, r2]
 80213c2:	437a      	muls	r2, r7
 80213c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80213c6:	f1ba 0f00 	cmp.w	sl, #0
 80213ca:	d03d      	beq.n	8021448 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 80213cc:	9f07      	ldr	r7, [sp, #28]
 80213ce:	9a04      	ldr	r2, [sp, #16]
 80213d0:	46be      	mov	lr, r7
 80213d2:	8812      	ldrh	r2, [r2, #0]
 80213d4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80213d6:	1215      	asrs	r5, r2, #8
 80213d8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80213dc:	10d1      	asrs	r1, r2, #3
 80213de:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80213e2:	fb05 750e 	mla	r5, r5, lr, r7
 80213e6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80213ea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80213ec:	00d2      	lsls	r2, r2, #3
 80213ee:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80213f2:	fb01 710e 	mla	r1, r1, lr, r7
 80213f6:	b2d2      	uxtb	r2, r2
 80213f8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80213fa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80213fe:	fb02 720e 	mla	r2, r2, lr, r7
 8021402:	b2ad      	uxth	r5, r5
 8021404:	b292      	uxth	r2, r2
 8021406:	f105 0e01 	add.w	lr, r5, #1
 802140a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802140e:	f102 0e01 	add.w	lr, r2, #1
 8021412:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021416:	b289      	uxth	r1, r1
 8021418:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802141c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8021420:	4315      	orrs	r5, r2
 8021422:	1c4a      	adds	r2, r1, #1
 8021424:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021428:	0949      	lsrs	r1, r1, #5
 802142a:	9a04      	ldr	r2, [sp, #16]
 802142c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021430:	430d      	orrs	r5, r1
 8021432:	f822 5b02 	strh.w	r5, [r2], #2
 8021436:	f10a 3aff 	add.w	sl, sl, #4294967295
 802143a:	9204      	str	r2, [sp, #16]
 802143c:	fa1f fa8a 	uxth.w	sl, sl
 8021440:	e7c1      	b.n	80213c6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8021442:	4649      	mov	r1, r9
 8021444:	4686      	mov	lr, r0
 8021446:	b999      	cbnz	r1, 8021470 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8021448:	4563      	cmp	r3, ip
 802144a:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 802144e:	d389      	bcc.n	8021364 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8021450:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8021454:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021456:	fa1f f68b 	uxth.w	r6, fp
 802145a:	1ba4      	subs	r4, r4, r6
 802145c:	881b      	ldrh	r3, [r3, #0]
 802145e:	b2a4      	uxth	r4, r4
 8021460:	2c00      	cmp	r4, #0
 8021462:	eba3 030b 	sub.w	r3, r3, fp
 8021466:	bf18      	it	ne
 8021468:	2600      	movne	r6, #0
 802146a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802146e:	e779      	b.n	8021364 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8021470:	78aa      	ldrb	r2, [r5, #2]
 8021472:	4f0f      	ldr	r7, [pc, #60]	@ (80214b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8021474:	3901      	subs	r1, #1
 8021476:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 802147a:	786a      	ldrb	r2, [r5, #1]
 802147c:	b289      	uxth	r1, r1
 802147e:	00d2      	lsls	r2, r2, #3
 8021480:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021484:	ea4a 0202 	orr.w	r2, sl, r2
 8021488:	f895 a000 	ldrb.w	sl, [r5]
 802148c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 8021490:	f82e 2b02 	strh.w	r2, [lr], #2
 8021494:	e7d7      	b.n	8021446 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 8021496:	4b04      	ldr	r3, [pc, #16]	@ (80214a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8021498:	6818      	ldr	r0, [r3, #0]
 802149a:	6803      	ldr	r3, [r0, #0]
 802149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802149e:	4798      	blx	r3
 80214a0:	b013      	add	sp, #76	@ 0x4c
 80214a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214a6:	bf00      	nop
 80214a8:	20011f2c 	.word	0x20011f2c
 80214ac:	20011f26 	.word	0x20011f26
 80214b0:	fffff800 	.word	0xfffff800

080214b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80214b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214b8:	b09d      	sub	sp, #116	@ 0x74
 80214ba:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 80214be:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80214c2:	461c      	mov	r4, r3
 80214c4:	4683      	mov	fp, r0
 80214c6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80214c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80214ca:	2a00      	cmp	r2, #0
 80214cc:	f000 81e1 	beq.w	8021892 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 80214d0:	6820      	ldr	r0, [r4, #0]
 80214d2:	6861      	ldr	r1, [r4, #4]
 80214d4:	aa18      	add	r2, sp, #96	@ 0x60
 80214d6:	c203      	stmia	r2!, {r0, r1}
 80214d8:	6818      	ldr	r0, [r3, #0]
 80214da:	6859      	ldr	r1, [r3, #4]
 80214dc:	aa1a      	add	r2, sp, #104	@ 0x68
 80214de:	c203      	stmia	r2!, {r0, r1}
 80214e0:	a818      	add	r0, sp, #96	@ 0x60
 80214e2:	f7f8 fa85 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214e6:	4621      	mov	r1, r4
 80214e8:	a81a      	add	r0, sp, #104	@ 0x68
 80214ea:	f7f8 faa9 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214ee:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80214f2:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80214f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80214fa:	bfdd      	ittte	le
 80214fc:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8021500:	b29a      	uxthle	r2, r3
 8021502:	fb91 f2f2 	sdivle	r2, r1, r2
 8021506:	2201      	movgt	r2, #1
 8021508:	9202      	str	r2, [sp, #8]
 802150a:	9802      	ldr	r0, [sp, #8]
 802150c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8021510:	9902      	ldr	r1, [sp, #8]
 8021512:	fb92 f0f0 	sdiv	r0, r2, r0
 8021516:	b280      	uxth	r0, r0
 8021518:	900f      	str	r0, [sp, #60]	@ 0x3c
 802151a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802151c:	9802      	ldr	r0, [sp, #8]
 802151e:	440c      	add	r4, r1
 8021520:	fb05 2510 	mls	r5, r5, r0, r2
 8021524:	fb15 f503 	smulbb	r5, r5, r3
 8021528:	3c01      	subs	r4, #1
 802152a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 802152e:	fb94 f4f1 	sdiv	r4, r4, r1
 8021532:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8021536:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 802153a:	440d      	add	r5, r1
 802153c:	4419      	add	r1, r3
 802153e:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8021542:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8021546:	441a      	add	r2, r3
 8021548:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802154c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8021550:	9306      	str	r3, [sp, #24]
 8021552:	4bb3      	ldr	r3, [pc, #716]	@ (8021820 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8021554:	3401      	adds	r4, #1
 8021556:	6818      	ldr	r0, [r3, #0]
 8021558:	b2a4      	uxth	r4, r4
 802155a:	6803      	ldr	r3, [r0, #0]
 802155c:	00a4      	lsls	r4, r4, #2
 802155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021560:	4798      	blx	r3
 8021562:	4bb0      	ldr	r3, [pc, #704]	@ (8021824 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8021564:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8021568:	881a      	ldrh	r2, [r3, #0]
 802156a:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 802156e:	4356      	muls	r6, r2
 8021570:	fb02 7101 	mla	r1, r2, r1, r7
 8021574:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8021578:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 802157c:	920a      	str	r2, [sp, #40]	@ 0x28
 802157e:	1d22      	adds	r2, r4, #4
 8021580:	b2ad      	uxth	r5, r5
 8021582:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021584:	9a06      	ldr	r2, [sp, #24]
 8021586:	2d00      	cmp	r5, #0
 8021588:	bf0c      	ite	eq
 802158a:	4611      	moveq	r1, r2
 802158c:	2100      	movne	r1, #0
 802158e:	2200      	movs	r2, #0
 8021590:	9316      	str	r3, [sp, #88]	@ 0x58
 8021592:	4ba5      	ldr	r3, [pc, #660]	@ (8021828 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8021594:	b289      	uxth	r1, r1
 8021596:	eba3 030b 	sub.w	r3, r3, fp
 802159a:	920d      	str	r2, [sp, #52]	@ 0x34
 802159c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802159e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80215a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80215a2:	fa12 f383 	uxtah	r3, r2, r3
 80215a6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80215a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80215ac:	3304      	adds	r3, #4
 80215ae:	9308      	str	r3, [sp, #32]
 80215b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80215b2:	4543      	cmp	r3, r8
 80215b4:	f240 8168 	bls.w	8021888 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 80215b8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80215bc:	9a02      	ldr	r2, [sp, #8]
 80215be:	fbb5 f3f3 	udiv	r3, r5, r3
 80215c2:	1ad3      	subs	r3, r2, r3
 80215c4:	b29b      	uxth	r3, r3
 80215c6:	9314      	str	r3, [sp, #80]	@ 0x50
 80215c8:	9b08      	ldr	r3, [sp, #32]
 80215ca:	9808      	ldr	r0, [sp, #32]
 80215cc:	785a      	ldrb	r2, [r3, #1]
 80215ce:	789b      	ldrb	r3, [r3, #2]
 80215d0:	7800      	ldrb	r0, [r0, #0]
 80215d2:	021b      	lsls	r3, r3, #8
 80215d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80215d8:	9a08      	ldr	r2, [sp, #32]
 80215da:	9010      	str	r0, [sp, #64]	@ 0x40
 80215dc:	78d2      	ldrb	r2, [r2, #3]
 80215de:	3001      	adds	r0, #1
 80215e0:	4313      	orrs	r3, r2
 80215e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80215e4:	9007      	str	r0, [sp, #28]
 80215e6:	441a      	add	r2, r3
 80215e8:	1c50      	adds	r0, r2, #1
 80215ea:	9005      	str	r0, [sp, #20]
 80215ec:	7852      	ldrb	r2, [r2, #1]
 80215ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80215f0:	0212      	lsls	r2, r2, #8
 80215f2:	5cc3      	ldrb	r3, [r0, r3]
 80215f4:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80215f8:	431a      	orrs	r2, r3
 80215fa:	b293      	uxth	r3, r2
 80215fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80215fe:	2300      	movs	r3, #0
 8021600:	9309      	str	r3, [sp, #36]	@ 0x24
 8021602:	2301      	movs	r3, #1
 8021604:	9301      	str	r3, [sp, #4]
 8021606:	9304      	str	r3, [sp, #16]
 8021608:	2300      	movs	r3, #0
 802160a:	f04f 0e01 	mov.w	lr, #1
 802160e:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 8021612:	9303      	str	r3, [sp, #12]
 8021614:	2d00      	cmp	r5, #0
 8021616:	d07c      	beq.n	8021712 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8021618:	45ae      	cmp	lr, r5
 802161a:	d26b      	bcs.n	80216f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 802161c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802161e:	eba5 050e 	sub.w	r5, r5, lr
 8021622:	4543      	cmp	r3, r8
 8021624:	b2ad      	uxth	r5, r5
 8021626:	460c      	mov	r4, r1
 8021628:	d802      	bhi.n	8021630 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 802162a:	e070      	b.n	802170e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 802162c:	2b00      	cmp	r3, #0
 802162e:	d15c      	bne.n	80216ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8021630:	9b05      	ldr	r3, [sp, #20]
 8021632:	9a04      	ldr	r2, [sp, #16]
 8021634:	785b      	ldrb	r3, [r3, #1]
 8021636:	f1c2 0207 	rsb	r2, r2, #7
 802163a:	4093      	lsls	r3, r2
 802163c:	005b      	lsls	r3, r3, #1
 802163e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021642:	9b05      	ldr	r3, [sp, #20]
 8021644:	9904      	ldr	r1, [sp, #16]
 8021646:	781b      	ldrb	r3, [r3, #0]
 8021648:	410b      	asrs	r3, r1
 802164a:	3101      	adds	r1, #1
 802164c:	b2c9      	uxtb	r1, r1
 802164e:	2908      	cmp	r1, #8
 8021650:	9104      	str	r1, [sp, #16]
 8021652:	9905      	ldr	r1, [sp, #20]
 8021654:	b2db      	uxtb	r3, r3
 8021656:	bf03      	ittte	eq
 8021658:	3102      	addeq	r1, #2
 802165a:	9105      	streq	r1, [sp, #20]
 802165c:	2100      	moveq	r1, #0
 802165e:	3101      	addne	r1, #1
 8021660:	bf14      	ite	ne
 8021662:	9105      	strne	r1, [sp, #20]
 8021664:	9104      	streq	r1, [sp, #16]
 8021666:	4313      	orrs	r3, r2
 8021668:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802166a:	b29a      	uxth	r2, r3
 802166c:	4291      	cmp	r1, r2
 802166e:	d30a      	bcc.n	8021686 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8021670:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8021674:	2301      	movs	r3, #1
 8021676:	9907      	ldr	r1, [sp, #28]
 8021678:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802167c:	d30f      	bcc.n	802169e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802167e:	2100      	movs	r1, #0
 8021680:	9301      	str	r3, [sp, #4]
 8021682:	9103      	str	r1, [sp, #12]
 8021684:	e032      	b.n	80216ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8021686:	9b07      	ldr	r3, [sp, #28]
 8021688:	429a      	cmp	r2, r3
 802168a:	d318      	bcc.n	80216be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 802168c:	9b01      	ldr	r3, [sp, #4]
 802168e:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 8021692:	445b      	add	r3, fp
 8021694:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021698:	9b01      	ldr	r3, [sp, #4]
 802169a:	3301      	adds	r3, #1
 802169c:	b29b      	uxth	r3, r3
 802169e:	9907      	ldr	r1, [sp, #28]
 80216a0:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 80216a4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80216a8:	7108      	strb	r0, [r1, #4]
 80216aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80216ac:	80c8      	strh	r0, [r1, #6]
 80216ae:	9801      	ldr	r0, [sp, #4]
 80216b0:	3001      	adds	r0, #1
 80216b2:	7148      	strb	r0, [r1, #5]
 80216b4:	9907      	ldr	r1, [sp, #28]
 80216b6:	3101      	adds	r1, #1
 80216b8:	b289      	uxth	r1, r1
 80216ba:	9107      	str	r1, [sp, #28]
 80216bc:	e7df      	b.n	802167e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 80216be:	4611      	mov	r1, r2
 80216c0:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80216c4:	795b      	ldrb	r3, [r3, #5]
 80216c6:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 80216ca:	4458      	add	r0, fp
 80216cc:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80216ce:	4406      	add	r6, r0
 80216d0:	2e00      	cmp	r6, #0
 80216d2:	dd06      	ble.n	80216e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 80216d4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80216d8:	790e      	ldrb	r6, [r1, #4]
 80216da:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80216de:	88c9      	ldrh	r1, [r1, #6]
 80216e0:	e7f4      	b.n	80216cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 80216e2:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80216e6:	b29b      	uxth	r3, r3
 80216e8:	e7c5      	b.n	8021676 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 80216ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80216ec:	4621      	mov	r1, r4
 80216ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80216f0:	469e      	mov	lr, r3
 80216f2:	e78f      	b.n	8021614 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 80216f4:	9a03      	ldr	r2, [sp, #12]
 80216f6:	ebae 0305 	sub.w	r3, lr, r5
 80216fa:	442a      	add	r2, r5
 80216fc:	b292      	uxth	r2, r2
 80216fe:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021702:	b29b      	uxth	r3, r3
 8021704:	9203      	str	r2, [sp, #12]
 8021706:	2500      	movs	r5, #0
 8021708:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802170a:	4542      	cmp	r2, r8
 802170c:	d88e      	bhi.n	802162c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 802170e:	4621      	mov	r1, r4
 8021710:	e74e      	b.n	80215b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8021712:	458e      	cmp	lr, r1
 8021714:	bf2c      	ite	cs
 8021716:	462c      	movcs	r4, r5
 8021718:	462b      	movcc	r3, r5
 802171a:	f04f 0900 	mov.w	r9, #0
 802171e:	bf29      	itett	cs
 8021720:	ebae 0301 	subcs.w	r3, lr, r1
 8021724:	eba1 040e 	subcc.w	r4, r1, lr
 8021728:	b29b      	uxthcs	r3, r3
 802172a:	910c      	strcs	r1, [sp, #48]	@ 0x30
 802172c:	bf3c      	itt	cc
 802172e:	b2a4      	uxthcc	r4, r4
 8021730:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8021734:	9a03      	ldr	r2, [sp, #12]
 8021736:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021738:	444a      	add	r2, r9
 802173a:	4548      	cmp	r0, r9
 802173c:	b292      	uxth	r2, r2
 802173e:	d075      	beq.n	802182c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 8021740:	2004      	movs	r0, #4
 8021742:	4605      	mov	r5, r0
 8021744:	445a      	add	r2, fp
 8021746:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021748:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802174c:	fb15 0202 	smlabb	r2, r5, r2, r0
 8021750:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021752:	5880      	ldr	r0, [r0, r2]
 8021754:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8021758:	d014      	beq.n	8021784 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 802175a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802175e:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8021762:	d112      	bne.n	802178a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8021764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021766:	2aff      	cmp	r2, #255	@ 0xff
 8021768:	d10f      	bne.n	802178a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 802176a:	0942      	lsrs	r2, r0, #5
 802176c:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8021770:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021774:	f025 0507 	bic.w	r5, r5, #7
 8021778:	4315      	orrs	r5, r2
 802177a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802177e:	4305      	orrs	r5, r0
 8021780:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8021784:	f109 0901 	add.w	r9, r9, #1
 8021788:	e7d4      	b.n	8021734 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 802178a:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 802178e:	b2ed      	uxtb	r5, r5
 8021790:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021794:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8021798:	9215      	str	r2, [sp, #84]	@ 0x54
 802179a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802179c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80217a0:	fb02 fa0a 	mul.w	sl, r2, sl
 80217a4:	f10a 0201 	add.w	r2, sl, #1
 80217a8:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80217ac:	1212      	asrs	r2, r2, #8
 80217ae:	fa1f fa82 	uxth.w	sl, r2
 80217b2:	43d2      	mvns	r2, r2
 80217b4:	b2c0      	uxtb	r0, r0
 80217b6:	fb16 f60a 	smulbb	r6, r6, sl
 80217ba:	fb10 f00a 	smulbb	r0, r0, sl
 80217be:	ea4f 272c 	mov.w	r7, ip, asr #8
 80217c2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80217c6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80217ca:	fa5f fc8c 	uxtb.w	ip, ip
 80217ce:	b2d2      	uxtb	r2, r2
 80217d0:	fb15 f50a 	smulbb	r5, r5, sl
 80217d4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80217d8:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80217dc:	fb07 6702 	mla	r7, r7, r2, r6
 80217e0:	fb0c 0002 	mla	r0, ip, r2, r0
 80217e4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80217e6:	b2bf      	uxth	r7, r7
 80217e8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80217ec:	fb06 5602 	mla	r6, r6, r2, r5
 80217f0:	b280      	uxth	r0, r0
 80217f2:	1c7a      	adds	r2, r7, #1
 80217f4:	1c45      	adds	r5, r0, #1
 80217f6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80217fa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80217fe:	b2b6      	uxth	r6, r6
 8021800:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021804:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8021808:	432f      	orrs	r7, r5
 802180a:	1c75      	adds	r5, r6, #1
 802180c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021810:	096d      	lsrs	r5, r5, #5
 8021812:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021816:	432f      	orrs	r7, r5
 8021818:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 802181c:	e7b2      	b.n	8021784 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 802181e:	bf00      	nop
 8021820:	20011f2c 	.word	0x20011f2c
 8021824:	20011f26 	.word	0x20011f26
 8021828:	fffff7fb 	.word	0xfffff7fb
 802182c:	9203      	str	r2, [sp, #12]
 802182e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021830:	458e      	cmp	lr, r1
 8021832:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8021836:	f4ff af66 	bcc.w	8021706 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 802183a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802183c:	9906      	ldr	r1, [sp, #24]
 802183e:	8812      	ldrh	r2, [r2, #0]
 8021840:	1a52      	subs	r2, r2, r1
 8021842:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8021846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021848:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802184a:	3201      	adds	r2, #1
 802184c:	428a      	cmp	r2, r1
 802184e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021850:	d110      	bne.n	8021874 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 8021852:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8021856:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 802185a:	9b06      	ldr	r3, [sp, #24]
 802185c:	eba5 0509 	sub.w	r5, r5, r9
 8021860:	b2ad      	uxth	r5, r5
 8021862:	2d00      	cmp	r5, #0
 8021864:	bf0c      	ite	eq
 8021866:	4619      	moveq	r1, r3
 8021868:	2100      	movne	r1, #0
 802186a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802186c:	b289      	uxth	r1, r1
 802186e:	3301      	adds	r3, #1
 8021870:	930d      	str	r3, [sp, #52]	@ 0x34
 8021872:	e694      	b.n	802159e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8021874:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8021878:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 802187c:	1b2d      	subs	r5, r5, r4
 802187e:	b2ad      	uxth	r5, r5
 8021880:	2d00      	cmp	r5, #0
 8021882:	bf18      	it	ne
 8021884:	2400      	movne	r4, #0
 8021886:	e73f      	b.n	8021708 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 8021888:	4b03      	ldr	r3, [pc, #12]	@ (8021898 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 802188a:	6818      	ldr	r0, [r3, #0]
 802188c:	6803      	ldr	r3, [r0, #0]
 802188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021890:	4798      	blx	r3
 8021892:	b01d      	add	sp, #116	@ 0x74
 8021894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021898:	20011f2c 	.word	0x20011f2c

0802189c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218a0:	b09f      	sub	sp, #124	@ 0x7c
 80218a2:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 80218a6:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 80218aa:	461d      	mov	r5, r3
 80218ac:	4604      	mov	r4, r0
 80218ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80218b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80218b2:	2a00      	cmp	r2, #0
 80218b4:	f000 81fc 	beq.w	8021cb0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 80218b8:	6828      	ldr	r0, [r5, #0]
 80218ba:	6869      	ldr	r1, [r5, #4]
 80218bc:	aa1a      	add	r2, sp, #104	@ 0x68
 80218be:	c203      	stmia	r2!, {r0, r1}
 80218c0:	6818      	ldr	r0, [r3, #0]
 80218c2:	6859      	ldr	r1, [r3, #4]
 80218c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80218c6:	c203      	stmia	r2!, {r0, r1}
 80218c8:	a81a      	add	r0, sp, #104	@ 0x68
 80218ca:	f7f8 f891 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80218ce:	4629      	mov	r1, r5
 80218d0:	a81c      	add	r0, sp, #112	@ 0x70
 80218d2:	f7f8 f8b5 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80218d6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80218da:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80218de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80218e2:	bfdd      	ittte	le
 80218e4:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80218e8:	b29a      	uxthle	r2, r3
 80218ea:	fb91 f2f2 	sdivle	r2, r1, r2
 80218ee:	2201      	movgt	r2, #1
 80218f0:	9201      	str	r2, [sp, #4]
 80218f2:	9801      	ldr	r0, [sp, #4]
 80218f4:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80218f8:	9901      	ldr	r1, [sp, #4]
 80218fa:	fb92 f0f0 	sdiv	r0, r2, r0
 80218fe:	b280      	uxth	r0, r0
 8021900:	9010      	str	r0, [sp, #64]	@ 0x40
 8021902:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021904:	9801      	ldr	r0, [sp, #4]
 8021906:	440e      	add	r6, r1
 8021908:	fb05 2510 	mls	r5, r5, r0, r2
 802190c:	fb15 f503 	smulbb	r5, r5, r3
 8021910:	3e01      	subs	r6, #1
 8021912:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8021916:	fb96 f6f1 	sdiv	r6, r6, r1
 802191a:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 802191e:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 8021922:	440d      	add	r5, r1
 8021924:	4419      	add	r1, r3
 8021926:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 802192a:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 802192e:	441a      	add	r2, r3
 8021930:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8021934:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8021938:	9304      	str	r3, [sp, #16]
 802193a:	4b96      	ldr	r3, [pc, #600]	@ (8021b94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 802193c:	3601      	adds	r6, #1
 802193e:	6818      	ldr	r0, [r3, #0]
 8021940:	b2b6      	uxth	r6, r6
 8021942:	6803      	ldr	r3, [r0, #0]
 8021944:	b2ad      	uxth	r5, r5
 8021946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021948:	4798      	blx	r3
 802194a:	4b93      	ldr	r3, [pc, #588]	@ (8021b98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 802194c:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8021950:	881a      	ldrh	r2, [r3, #0]
 8021952:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8021956:	4357      	muls	r7, r2
 8021958:	fb02 c101 	mla	r1, r2, r1, ip
 802195c:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8021960:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8021964:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021968:	2d00      	cmp	r5, #0
 802196a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802196e:	f106 0204 	add.w	r2, r6, #4
 8021972:	9206      	str	r2, [sp, #24]
 8021974:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021976:	bf18      	it	ne
 8021978:	2100      	movne	r1, #0
 802197a:	ea6f 0202 	mvn.w	r2, r2
 802197e:	b2d2      	uxtb	r2, r2
 8021980:	9215      	str	r2, [sp, #84]	@ 0x54
 8021982:	9a04      	ldr	r2, [sp, #16]
 8021984:	9318      	str	r3, [sp, #96]	@ 0x60
 8021986:	bf08      	it	eq
 8021988:	4611      	moveq	r1, r2
 802198a:	2200      	movs	r2, #0
 802198c:	4b83      	ldr	r3, [pc, #524]	@ (8021b9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 802198e:	b289      	uxth	r1, r1
 8021990:	1b1b      	subs	r3, r3, r4
 8021992:	920d      	str	r2, [sp, #52]	@ 0x34
 8021994:	9319      	str	r3, [sp, #100]	@ 0x64
 8021996:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021998:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802199a:	fa12 f383 	uxtah	r3, r2, r3
 802199e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80219a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80219a4:	3304      	adds	r3, #4
 80219a6:	9307      	str	r3, [sp, #28]
 80219a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219aa:	455b      	cmp	r3, fp
 80219ac:	f240 817b 	bls.w	8021ca6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 80219b0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80219b4:	f04f 0801 	mov.w	r8, #1
 80219b8:	fbb5 f3f3 	udiv	r3, r5, r3
 80219bc:	9a01      	ldr	r2, [sp, #4]
 80219be:	9807      	ldr	r0, [sp, #28]
 80219c0:	1ad3      	subs	r3, r2, r3
 80219c2:	b29b      	uxth	r3, r3
 80219c4:	9316      	str	r3, [sp, #88]	@ 0x58
 80219c6:	9b07      	ldr	r3, [sp, #28]
 80219c8:	7800      	ldrb	r0, [r0, #0]
 80219ca:	785a      	ldrb	r2, [r3, #1]
 80219cc:	789b      	ldrb	r3, [r3, #2]
 80219ce:	9011      	str	r0, [sp, #68]	@ 0x44
 80219d0:	021b      	lsls	r3, r3, #8
 80219d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80219d6:	9a07      	ldr	r2, [sp, #28]
 80219d8:	3001      	adds	r0, #1
 80219da:	78d2      	ldrb	r2, [r2, #3]
 80219dc:	9005      	str	r0, [sp, #20]
 80219de:	4313      	orrs	r3, r2
 80219e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80219e2:	46c4      	mov	ip, r8
 80219e4:	441a      	add	r2, r3
 80219e6:	1c50      	adds	r0, r2, #1
 80219e8:	9003      	str	r0, [sp, #12]
 80219ea:	7852      	ldrb	r2, [r2, #1]
 80219ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80219ee:	0212      	lsls	r2, r2, #8
 80219f0:	5cc3      	ldrb	r3, [r0, r3]
 80219f2:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80219f6:	431a      	orrs	r2, r3
 80219f8:	b293      	uxth	r3, r2
 80219fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80219fc:	2300      	movs	r3, #0
 80219fe:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8021a02:	9308      	str	r3, [sp, #32]
 8021a04:	461a      	mov	r2, r3
 8021a06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021a0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8021a0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021a10:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8021a14:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021a16:	2d00      	cmp	r5, #0
 8021a18:	d07c      	beq.n	8021b14 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8021a1a:	45ac      	cmp	ip, r5
 8021a1c:	d26c      	bcs.n	8021af8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8021a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021a20:	eba5 050c 	sub.w	r5, r5, ip
 8021a24:	455b      	cmp	r3, fp
 8021a26:	b2ad      	uxth	r5, r5
 8021a28:	4608      	mov	r0, r1
 8021a2a:	d802      	bhi.n	8021a32 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8021a2c:	e070      	b.n	8021b10 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d15c      	bne.n	8021aec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8021a32:	9b03      	ldr	r3, [sp, #12]
 8021a34:	9a02      	ldr	r2, [sp, #8]
 8021a36:	785b      	ldrb	r3, [r3, #1]
 8021a38:	f1c2 0207 	rsb	r2, r2, #7
 8021a3c:	4093      	lsls	r3, r2
 8021a3e:	005b      	lsls	r3, r3, #1
 8021a40:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021a44:	9b03      	ldr	r3, [sp, #12]
 8021a46:	9902      	ldr	r1, [sp, #8]
 8021a48:	781b      	ldrb	r3, [r3, #0]
 8021a4a:	410b      	asrs	r3, r1
 8021a4c:	3101      	adds	r1, #1
 8021a4e:	b2c9      	uxtb	r1, r1
 8021a50:	2908      	cmp	r1, #8
 8021a52:	9102      	str	r1, [sp, #8]
 8021a54:	9903      	ldr	r1, [sp, #12]
 8021a56:	b2db      	uxtb	r3, r3
 8021a58:	bf03      	ittte	eq
 8021a5a:	3102      	addeq	r1, #2
 8021a5c:	9103      	streq	r1, [sp, #12]
 8021a5e:	2100      	moveq	r1, #0
 8021a60:	3101      	addne	r1, #1
 8021a62:	bf14      	ite	ne
 8021a64:	9103      	strne	r1, [sp, #12]
 8021a66:	9102      	streq	r1, [sp, #8]
 8021a68:	4313      	orrs	r3, r2
 8021a6a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021a6c:	b29a      	uxth	r2, r3
 8021a6e:	4291      	cmp	r1, r2
 8021a70:	d30a      	bcc.n	8021a88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8021a72:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021a76:	2301      	movs	r3, #1
 8021a78:	9905      	ldr	r1, [sp, #20]
 8021a7a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021a7e:	d30f      	bcc.n	8021aa0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 8021a80:	2100      	movs	r1, #0
 8021a82:	4698      	mov	r8, r3
 8021a84:	9100      	str	r1, [sp, #0]
 8021a86:	e032      	b.n	8021aee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8021a88:	9b05      	ldr	r3, [sp, #20]
 8021a8a:	429a      	cmp	r2, r3
 8021a8c:	d318      	bcc.n	8021ac0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 8021a8e:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8021a92:	eb04 0308 	add.w	r3, r4, r8
 8021a96:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021a9a:	f108 0301 	add.w	r3, r8, #1
 8021a9e:	b29b      	uxth	r3, r3
 8021aa0:	9905      	ldr	r1, [sp, #20]
 8021aa2:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8021aa6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021aaa:	710e      	strb	r6, [r1, #4]
 8021aac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021aae:	80ce      	strh	r6, [r1, #6]
 8021ab0:	f108 0601 	add.w	r6, r8, #1
 8021ab4:	714e      	strb	r6, [r1, #5]
 8021ab6:	9905      	ldr	r1, [sp, #20]
 8021ab8:	3101      	adds	r1, #1
 8021aba:	b289      	uxth	r1, r1
 8021abc:	9105      	str	r1, [sp, #20]
 8021abe:	e7df      	b.n	8021a80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8021ac0:	4611      	mov	r1, r2
 8021ac2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021ac6:	795b      	ldrb	r3, [r3, #5]
 8021ac8:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8021acc:	4426      	add	r6, r4
 8021ace:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021ad0:	4437      	add	r7, r6
 8021ad2:	2f00      	cmp	r7, #0
 8021ad4:	dd06      	ble.n	8021ae4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8021ad6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021ada:	790f      	ldrb	r7, [r1, #4]
 8021adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021ae0:	88c9      	ldrh	r1, [r1, #6]
 8021ae2:	e7f4      	b.n	8021ace <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 8021ae4:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8021ae8:	b29b      	uxth	r3, r3
 8021aea:	e7c5      	b.n	8021a78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 8021aec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021aee:	920c      	str	r2, [sp, #48]	@ 0x30
 8021af0:	4601      	mov	r1, r0
 8021af2:	9a00      	ldr	r2, [sp, #0]
 8021af4:	469c      	mov	ip, r3
 8021af6:	e78e      	b.n	8021a16 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8021af8:	1957      	adds	r7, r2, r5
 8021afa:	ebac 0305 	sub.w	r3, ip, r5
 8021afe:	b2ba      	uxth	r2, r7
 8021b00:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021b04:	b29b      	uxth	r3, r3
 8021b06:	9200      	str	r2, [sp, #0]
 8021b08:	2500      	movs	r5, #0
 8021b0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021b0c:	455a      	cmp	r2, fp
 8021b0e:	d88e      	bhi.n	8021a2e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8021b10:	4601      	mov	r1, r0
 8021b12:	e749      	b.n	80219a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 8021b14:	458c      	cmp	ip, r1
 8021b16:	bf2c      	ite	cs
 8021b18:	4628      	movcs	r0, r5
 8021b1a:	462b      	movcc	r3, r5
 8021b1c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021b1e:	bf27      	ittee	cs
 8021b20:	ebac 0301 	subcs.w	r3, ip, r1
 8021b24:	9109      	strcs	r1, [sp, #36]	@ 0x24
 8021b26:	eba1 000c 	subcc.w	r0, r1, ip
 8021b2a:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8021b2e:	bf2c      	ite	cs
 8021b30:	b29b      	uxthcs	r3, r3
 8021b32:	b280      	uxthcc	r0, r0
 8021b34:	2dff      	cmp	r5, #255	@ 0xff
 8021b36:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021b38:	eb02 0705 	add.w	r7, r2, r5
 8021b3c:	b2bd      	uxth	r5, r7
 8021b3e:	9500      	str	r5, [sp, #0]
 8021b40:	d12e      	bne.n	8021ba0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 8021b42:	465e      	mov	r6, fp
 8021b44:	9d00      	ldr	r5, [sp, #0]
 8021b46:	42aa      	cmp	r2, r5
 8021b48:	f040 8083 	bne.w	8021c52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 8021b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b4e:	458c      	cmp	ip, r1
 8021b50:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021b54:	d3d8      	bcc.n	8021b08 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8021b56:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021b58:	9904      	ldr	r1, [sp, #16]
 8021b5a:	8812      	ldrh	r2, [r2, #0]
 8021b5c:	1a52      	subs	r2, r2, r1
 8021b5e:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8021b62:	9a08      	ldr	r2, [sp, #32]
 8021b64:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021b66:	3201      	adds	r2, #1
 8021b68:	428a      	cmp	r2, r1
 8021b6a:	9208      	str	r2, [sp, #32]
 8021b6c:	f040 8091 	bne.w	8021c92 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 8021b70:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8021b74:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8021b78:	9b04      	ldr	r3, [sp, #16]
 8021b7a:	eba5 050c 	sub.w	r5, r5, ip
 8021b7e:	b2ad      	uxth	r5, r5
 8021b80:	2d00      	cmp	r5, #0
 8021b82:	bf0c      	ite	eq
 8021b84:	4619      	moveq	r1, r3
 8021b86:	2100      	movne	r1, #0
 8021b88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021b8a:	b289      	uxth	r1, r1
 8021b8c:	3301      	adds	r3, #1
 8021b8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021b90:	e701      	b.n	8021996 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 8021b92:	bf00      	nop
 8021b94:	20011f2c 	.word	0x20011f2c
 8021b98:	20011f26 	.word	0x20011f26
 8021b9c:	fffff7fb 	.word	0xfffff7fb
 8021ba0:	46d9      	mov	r9, fp
 8021ba2:	9d00      	ldr	r5, [sp, #0]
 8021ba4:	42aa      	cmp	r2, r5
 8021ba6:	d0d1      	beq.n	8021b4c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 8021ba8:	1c55      	adds	r5, r2, #1
 8021baa:	4422      	add	r2, r4
 8021bac:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 8021bb0:	9a06      	ldr	r2, [sp, #24]
 8021bb2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021bb6:	4472      	add	r2, lr
 8021bb8:	9212      	str	r2, [sp, #72]	@ 0x48
 8021bba:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021bbc:	f8b9 2000 	ldrh.w	r2, [r9]
 8021bc0:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021bc4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021bc6:	1216      	asrs	r6, r2, #8
 8021bc8:	fb1a fa07 	smulbb	sl, sl, r7
 8021bcc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021bd0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8021bd2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021bd6:	fb06 a607 	mla	r6, r6, r7, sl
 8021bda:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021bdc:	9517      	str	r5, [sp, #92]	@ 0x5c
 8021bde:	f897 a001 	ldrb.w	sl, [r7, #1]
 8021be2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021be4:	10d5      	asrs	r5, r2, #3
 8021be6:	fb1a fa07 	smulbb	sl, sl, r7
 8021bea:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021bee:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8021bf0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021bf4:	fb05 a507 	mla	r5, r5, r7, sl
 8021bf8:	9f06      	ldr	r7, [sp, #24]
 8021bfa:	00d2      	lsls	r2, r2, #3
 8021bfc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021c00:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8021c02:	b2d2      	uxtb	r2, r2
 8021c04:	fb1e fe07 	smulbb	lr, lr, r7
 8021c08:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8021c0a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021c0e:	fb02 e207 	mla	r2, r2, r7, lr
 8021c12:	b2b6      	uxth	r6, r6
 8021c14:	b292      	uxth	r2, r2
 8021c16:	b2ad      	uxth	r5, r5
 8021c18:	f106 0a01 	add.w	sl, r6, #1
 8021c1c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021c20:	f102 0e01 	add.w	lr, r2, #1
 8021c24:	f105 0a01 	add.w	sl, r5, #1
 8021c28:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8021c2c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021c30:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8021c34:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021c38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021c3c:	ea4e 0606 	orr.w	r6, lr, r6
 8021c40:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021c44:	ea46 060a 	orr.w	r6, r6, sl
 8021c48:	f829 6b02 	strh.w	r6, [r9], #2
 8021c4c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8021c50:	e7a7      	b.n	8021ba2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 8021c52:	f102 0e01 	add.w	lr, r2, #1
 8021c56:	4422      	add	r2, r4
 8021c58:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8021c5c:	9a06      	ldr	r2, [sp, #24]
 8021c5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021c62:	eb02 0a05 	add.w	sl, r2, r5
 8021c66:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021c6a:	4a13      	ldr	r2, [pc, #76]	@ (8021cb8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 8021c6c:	9f06      	ldr	r7, [sp, #24]
 8021c6e:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8021c72:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021c76:	00d2      	lsls	r2, r2, #3
 8021c78:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021c7c:	ea49 0202 	orr.w	r2, r9, r2
 8021c80:	f817 9005 	ldrb.w	r9, [r7, r5]
 8021c84:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8021c88:	f826 2b02 	strh.w	r2, [r6], #2
 8021c8c:	fa1f f28e 	uxth.w	r2, lr
 8021c90:	e758      	b.n	8021b44 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 8021c92:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021c96:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021c9a:	1a2d      	subs	r5, r5, r0
 8021c9c:	b2ad      	uxth	r5, r5
 8021c9e:	2d00      	cmp	r5, #0
 8021ca0:	bf18      	it	ne
 8021ca2:	2000      	movne	r0, #0
 8021ca4:	e731      	b.n	8021b0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 8021ca6:	4b05      	ldr	r3, [pc, #20]	@ (8021cbc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 8021ca8:	6818      	ldr	r0, [r3, #0]
 8021caa:	6803      	ldr	r3, [r0, #0]
 8021cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021cae:	4798      	blx	r3
 8021cb0:	b01f      	add	sp, #124	@ 0x7c
 8021cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cb6:	bf00      	nop
 8021cb8:	fffff800 	.word	0xfffff800
 8021cbc:	20011f2c 	.word	0x20011f2c

08021cc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cc4:	469b      	mov	fp, r3
 8021cc6:	4616      	mov	r6, r2
 8021cc8:	b091      	sub	sp, #68	@ 0x44
 8021cca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021cce:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8021cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021cd6:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8021cda:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8021cde:	4604      	mov	r4, r0
 8021ce0:	460d      	mov	r5, r1
 8021ce2:	4640      	mov	r0, r8
 8021ce4:	4659      	mov	r1, fp
 8021ce6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8021cea:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8021cee:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8021cf2:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8021cf6:	f7f2 fd85 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8021cfa:	4631      	mov	r1, r6
 8021cfc:	4640      	mov	r0, r8
 8021cfe:	f7f2 fd81 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8021d02:	4b74      	ldr	r3, [pc, #464]	@ (8021ed4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8021d04:	8818      	ldrh	r0, [r3, #0]
 8021d06:	4b74      	ldr	r3, [pc, #464]	@ (8021ed8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8021d08:	b202      	sxth	r2, r0
 8021d0a:	8819      	ldrh	r1, [r3, #0]
 8021d0c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8021d10:	b20e      	sxth	r6, r1
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	da07      	bge.n	8021d26 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8021d16:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8021d1a:	4463      	add	r3, ip
 8021d1c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8021d20:	2300      	movs	r3, #0
 8021d22:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8021d26:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8021d2a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8021d2e:	1ad2      	subs	r2, r2, r3
 8021d30:	4594      	cmp	ip, r2
 8021d32:	bfc4      	itt	gt
 8021d34:	1ac2      	subgt	r2, r0, r3
 8021d36:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8021d3a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021d3e:	2a00      	cmp	r2, #0
 8021d40:	da07      	bge.n	8021d52 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8021d42:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8021d46:	4462      	add	r2, ip
 8021d48:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8021d4c:	2200      	movs	r2, #0
 8021d4e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8021d52:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8021d56:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8021d5a:	eba6 060a 	sub.w	r6, r6, sl
 8021d5e:	42b2      	cmp	r2, r6
 8021d60:	bfc4      	itt	gt
 8021d62:	eba1 020a 	subgt.w	r2, r1, sl
 8021d66:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8021d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8021edc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8021d6c:	7812      	ldrb	r2, [r2, #0]
 8021d6e:	b9a2      	cbnz	r2, 8021d9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8021d70:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021d74:	4286      	cmp	r6, r0
 8021d76:	4640      	mov	r0, r8
 8021d78:	9303      	str	r3, [sp, #12]
 8021d7a:	bf14      	ite	ne
 8021d7c:	2600      	movne	r6, #0
 8021d7e:	2601      	moveq	r6, #1
 8021d80:	f7f2 fd83 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021d84:	9b03      	ldr	r3, [sp, #12]
 8021d86:	b160      	cbz	r0, 8021da2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8021d88:	2300      	movs	r3, #0
 8021d8a:	8023      	strh	r3, [r4, #0]
 8021d8c:	8063      	strh	r3, [r4, #2]
 8021d8e:	80a3      	strh	r3, [r4, #4]
 8021d90:	4620      	mov	r0, r4
 8021d92:	80e3      	strh	r3, [r4, #6]
 8021d94:	b011      	add	sp, #68	@ 0x44
 8021d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d9a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8021d9e:	428e      	cmp	r6, r1
 8021da0:	e7e9      	b.n	8021d76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8021da2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8021da6:	a90e      	add	r1, sp, #56	@ 0x38
 8021da8:	9205      	str	r2, [sp, #20]
 8021daa:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8021dae:	900e      	str	r0, [sp, #56]	@ 0x38
 8021db0:	9206      	str	r2, [sp, #24]
 8021db2:	f8bb 2000 	ldrh.w	r2, [fp]
 8021db6:	a80c      	add	r0, sp, #48	@ 0x30
 8021db8:	1a9b      	subs	r3, r3, r2
 8021dba:	b21b      	sxth	r3, r3
 8021dbc:	9303      	str	r3, [sp, #12]
 8021dbe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021dc2:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8021dc6:	ebaa 0a03 	sub.w	sl, sl, r3
 8021dca:	fa0f f38a 	sxth.w	r3, sl
 8021dce:	9304      	str	r3, [sp, #16]
 8021dd0:	9b03      	ldr	r3, [sp, #12]
 8021dd2:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8021dd6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8021dda:	9b04      	ldr	r3, [sp, #16]
 8021ddc:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8021ee4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021de0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021de4:	9b05      	ldr	r3, [sp, #20]
 8021de6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8021dea:	9b06      	ldr	r3, [sp, #24]
 8021dec:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8021df0:	f7f7 fe26 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021df4:	4640      	mov	r0, r8
 8021df6:	f7f7 fdfb 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021dfa:	a80e      	add	r0, sp, #56	@ 0x38
 8021dfc:	f7f7 fdf8 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e00:	4b37      	ldr	r3, [pc, #220]	@ (8021ee0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021e02:	4628      	mov	r0, r5
 8021e04:	881b      	ldrh	r3, [r3, #0]
 8021e06:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8021e0a:	9307      	str	r3, [sp, #28]
 8021e0c:	682b      	ldr	r3, [r5, #0]
 8021e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e10:	4798      	blx	r3
 8021e12:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8021e16:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021e1a:	4681      	mov	r9, r0
 8021e1c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8021e20:	f8db 0000 	ldr.w	r0, [fp]
 8021e24:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8021e26:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021e2a:	6803      	ldr	r3, [r0, #0]
 8021e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e2e:	4798      	blx	r3
 8021e30:	4607      	mov	r7, r0
 8021e32:	f8db 0000 	ldr.w	r0, [fp]
 8021e36:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8021e3a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8021e3e:	6803      	ldr	r3, [r0, #0]
 8021e40:	9109      	str	r1, [sp, #36]	@ 0x24
 8021e42:	9208      	str	r2, [sp, #32]
 8021e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021e46:	4798      	blx	r3
 8021e48:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021e4c:	f010 0f01 	tst.w	r0, #1
 8021e50:	d012      	beq.n	8021e78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8021e52:	f8db 0000 	ldr.w	r0, [fp]
 8021e56:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8021e5a:	6803      	ldr	r3, [r0, #0]
 8021e5c:	9200      	str	r2, [sp, #0]
 8021e5e:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8021e60:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021e64:	462b      	mov	r3, r5
 8021e66:	47b0      	blx	r6
 8021e68:	9b03      	ldr	r3, [sp, #12]
 8021e6a:	8023      	strh	r3, [r4, #0]
 8021e6c:	9b04      	ldr	r3, [sp, #16]
 8021e6e:	8063      	strh	r3, [r4, #2]
 8021e70:	9b05      	ldr	r3, [sp, #20]
 8021e72:	80a3      	strh	r3, [r4, #4]
 8021e74:	9b06      	ldr	r3, [sp, #24]
 8021e76:	e78b      	b.n	8021d90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8021e78:	fb09 f202 	mul.w	r2, r9, r2
 8021e7c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021e80:	440f      	add	r7, r1
 8021e82:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8021e86:	b166      	cbz	r6, 8021ea2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021e88:	9a07      	ldr	r2, [sp, #28]
 8021e8a:	4592      	cmp	sl, r2
 8021e8c:	d109      	bne.n	8021ea2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8021e8e:	f8db 0000 	ldr.w	r0, [fp]
 8021e92:	fb09 f303 	mul.w	r3, r9, r3
 8021e96:	6802      	ldr	r2, [r0, #0]
 8021e98:	4629      	mov	r1, r5
 8021e9a:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8021e9c:	463a      	mov	r2, r7
 8021e9e:	47b0      	blx	r6
 8021ea0:	e7e2      	b.n	8021e68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021ea2:	fb0a f303 	mul.w	r3, sl, r3
 8021ea6:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8021ee4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8021eaa:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8021eae:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8021eb2:	4545      	cmp	r5, r8
 8021eb4:	d2d8      	bcs.n	8021e68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8021eb6:	f8db 0000 	ldr.w	r0, [fp]
 8021eba:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021ebe:	6802      	ldr	r2, [r0, #0]
 8021ec0:	4629      	mov	r1, r5
 8021ec2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8021ec6:	005b      	lsls	r3, r3, #1
 8021ec8:	463a      	mov	r2, r7
 8021eca:	47d0      	blx	sl
 8021ecc:	444f      	add	r7, r9
 8021ece:	4435      	add	r5, r6
 8021ed0:	e7ef      	b.n	8021eb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8021ed2:	bf00      	nop
 8021ed4:	20011f20 	.word	0x20011f20
 8021ed8:	20011f22 	.word	0x20011f22
 8021edc:	20011f24 	.word	0x20011f24
 8021ee0:	20011f26 	.word	0x20011f26
 8021ee4:	20011f2c 	.word	0x20011f2c

08021ee8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021eea:	4606      	mov	r6, r0
 8021eec:	b087      	sub	sp, #28
 8021eee:	460c      	mov	r4, r1
 8021ef0:	4617      	mov	r7, r2
 8021ef2:	461d      	mov	r5, r3
 8021ef4:	b333      	cbz	r3, 8021f44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021ef6:	4608      	mov	r0, r1
 8021ef8:	f7f2 fcc7 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021efc:	bb10      	cbnz	r0, 8021f44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021efe:	6820      	ldr	r0, [r4, #0]
 8021f00:	6861      	ldr	r1, [r4, #4]
 8021f02:	ab04      	add	r3, sp, #16
 8021f04:	4c1b      	ldr	r4, [pc, #108]	@ (8021f74 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021f06:	c303      	stmia	r3!, {r0, r1}
 8021f08:	a804      	add	r0, sp, #16
 8021f0a:	f7f7 fd71 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f0e:	6820      	ldr	r0, [r4, #0]
 8021f10:	6803      	ldr	r3, [r0, #0]
 8021f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021f14:	4798      	blx	r3
 8021f16:	2dff      	cmp	r5, #255	@ 0xff
 8021f18:	d016      	beq.n	8021f48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021f1a:	f010 0f08 	tst.w	r0, #8
 8021f1e:	6820      	ldr	r0, [r4, #0]
 8021f20:	d015      	beq.n	8021f4e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021f22:	2400      	movs	r4, #0
 8021f24:	6801      	ldr	r1, [r0, #0]
 8021f26:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021f2a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021f2e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021f32:	9401      	str	r4, [sp, #4]
 8021f34:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021f38:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021f3c:	9400      	str	r4, [sp, #0]
 8021f3e:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8021f40:	4639      	mov	r1, r7
 8021f42:	47a0      	blx	r4
 8021f44:	b007      	add	sp, #28
 8021f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f48:	f010 0f02 	tst.w	r0, #2
 8021f4c:	e7e7      	b.n	8021f1e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021f4e:	6803      	ldr	r3, [r0, #0]
 8021f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f52:	4798      	blx	r3
 8021f54:	4b08      	ldr	r3, [pc, #32]	@ (8021f78 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021f56:	4601      	mov	r1, r0
 8021f58:	881a      	ldrh	r2, [r3, #0]
 8021f5a:	e9cd 7500 	strd	r7, r5, [sp]
 8021f5e:	6833      	ldr	r3, [r6, #0]
 8021f60:	4630      	mov	r0, r6
 8021f62:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8021f64:	ab04      	add	r3, sp, #16
 8021f66:	47a8      	blx	r5
 8021f68:	6820      	ldr	r0, [r4, #0]
 8021f6a:	6803      	ldr	r3, [r0, #0]
 8021f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f6e:	4798      	blx	r3
 8021f70:	e7e8      	b.n	8021f44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021f72:	bf00      	nop
 8021f74:	20011f2c 	.word	0x20011f2c
 8021f78:	20011f26 	.word	0x20011f26

08021f7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f80:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8021f84:	4688      	mov	r8, r1
 8021f86:	4614      	mov	r4, r2
 8021f88:	461d      	mov	r5, r3
 8021f8a:	9e08      	ldr	r6, [sp, #32]
 8021f8c:	2f00      	cmp	r7, #0
 8021f8e:	f000 80a9 	beq.w	80220e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021f92:	4618      	mov	r0, r3
 8021f94:	f7f2 fc79 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021f98:	2800      	cmp	r0, #0
 8021f9a:	f040 80a3 	bne.w	80220e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021f9e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021fa2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021fa6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021faa:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021fae:	fb04 1303 	mla	r3, r4, r3, r1
 8021fb2:	4365      	muls	r5, r4
 8021fb4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021fb8:	2fff      	cmp	r7, #255	@ 0xff
 8021fba:	eba4 0200 	sub.w	r2, r4, r0
 8021fbe:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021fc2:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021fc6:	d04a      	beq.n	802205e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021fc8:	b2bc      	uxth	r4, r7
 8021fca:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8021fce:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021fd2:	fa5f f788 	uxtb.w	r7, r8
 8021fd6:	b2f3      	uxtb	r3, r6
 8021fd8:	fb0e fe04 	mul.w	lr, lr, r4
 8021fdc:	4367      	muls	r7, r4
 8021fde:	4363      	muls	r3, r4
 8021fe0:	0040      	lsls	r0, r0, #1
 8021fe2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021fe6:	fa1f fc8c 	uxth.w	ip, ip
 8021fea:	42a9      	cmp	r1, r5
 8021fec:	d27a      	bcs.n	80220e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8021fee:	eb01 0900 	add.w	r9, r1, r0
 8021ff2:	4549      	cmp	r1, r9
 8021ff4:	d231      	bcs.n	802205a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8021ff6:	880a      	ldrh	r2, [r1, #0]
 8021ff8:	1214      	asrs	r4, r2, #8
 8021ffa:	10d6      	asrs	r6, r2, #3
 8021ffc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8022000:	00d2      	lsls	r2, r2, #3
 8022002:	b2d2      	uxtb	r2, r2
 8022004:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022008:	fb14 f40c 	smulbb	r4, r4, ip
 802200c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022010:	fb12 f20c 	smulbb	r2, r2, ip
 8022014:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022018:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802201c:	4474      	add	r4, lr
 802201e:	fb16 f60c 	smulbb	r6, r6, ip
 8022022:	b2a4      	uxth	r4, r4
 8022024:	441a      	add	r2, r3
 8022026:	b292      	uxth	r2, r2
 8022028:	f104 0a01 	add.w	sl, r4, #1
 802202c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022030:	f102 0a01 	add.w	sl, r2, #1
 8022034:	443e      	add	r6, r7
 8022036:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802203a:	b2b6      	uxth	r6, r6
 802203c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8022040:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022044:	4322      	orrs	r2, r4
 8022046:	1c74      	adds	r4, r6, #1
 8022048:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 802204c:	0976      	lsrs	r6, r6, #5
 802204e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022052:	4332      	orrs	r2, r6
 8022054:	f821 2b02 	strh.w	r2, [r1], #2
 8022058:	e7cb      	b.n	8021ff2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 802205a:	4441      	add	r1, r8
 802205c:	e7c5      	b.n	8021fea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 802205e:	4f22      	ldr	r7, [pc, #136]	@ (80220e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8022060:	0973      	lsrs	r3, r6, #5
 8022062:	ea08 0707 	and.w	r7, r8, r7
 8022066:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802206a:	433b      	orrs	r3, r7
 802206c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022070:	4333      	orrs	r3, r6
 8022072:	07e7      	lsls	r7, r4, #31
 8022074:	b29b      	uxth	r3, r3
 8022076:	d50b      	bpl.n	8022090 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8022078:	0040      	lsls	r0, r0, #1
 802207a:	0052      	lsls	r2, r2, #1
 802207c:	42a9      	cmp	r1, r5
 802207e:	d231      	bcs.n	80220e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022080:	180c      	adds	r4, r1, r0
 8022082:	42a1      	cmp	r1, r4
 8022084:	d202      	bcs.n	802208c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8022086:	f821 3b02 	strh.w	r3, [r1], #2
 802208a:	e7fa      	b.n	8022082 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 802208c:	4411      	add	r1, r2
 802208e:	e7f5      	b.n	802207c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8022090:	078e      	lsls	r6, r1, #30
 8022092:	d008      	beq.n	80220a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8022094:	460a      	mov	r2, r1
 8022096:	0066      	lsls	r6, r4, #1
 8022098:	42aa      	cmp	r2, r5
 802209a:	d202      	bcs.n	80220a2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 802209c:	8013      	strh	r3, [r2, #0]
 802209e:	4432      	add	r2, r6
 80220a0:	e7fa      	b.n	8022098 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80220a2:	3102      	adds	r1, #2
 80220a4:	3801      	subs	r0, #1
 80220a6:	07c2      	lsls	r2, r0, #31
 80220a8:	d50b      	bpl.n	80220c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80220aa:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 80220ae:	3a01      	subs	r2, #1
 80220b0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80220b4:	0066      	lsls	r6, r4, #1
 80220b6:	42aa      	cmp	r2, r5
 80220b8:	d202      	bcs.n	80220c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80220ba:	8013      	strh	r3, [r2, #0]
 80220bc:	4432      	add	r2, r6
 80220be:	e7fa      	b.n	80220b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 80220c0:	3801      	subs	r0, #1
 80220c2:	b178      	cbz	r0, 80220e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80220c4:	1040      	asrs	r0, r0, #1
 80220c6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80220ca:	0080      	lsls	r0, r0, #2
 80220cc:	0064      	lsls	r4, r4, #1
 80220ce:	42a9      	cmp	r1, r5
 80220d0:	d208      	bcs.n	80220e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80220d2:	460a      	mov	r2, r1
 80220d4:	180e      	adds	r6, r1, r0
 80220d6:	42b2      	cmp	r2, r6
 80220d8:	d202      	bcs.n	80220e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 80220da:	f842 3b04 	str.w	r3, [r2], #4
 80220de:	e7fa      	b.n	80220d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 80220e0:	4421      	add	r1, r4
 80220e2:	e7f4      	b.n	80220ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 80220e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220e8:	00fff800 	.word	0x00fff800

080220ec <_ZN8touchgfx8LCD16bppC1Ev>:
 80220ec:	2200      	movs	r2, #0
 80220ee:	4912      	ldr	r1, [pc, #72]	@ (8022138 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 80220f0:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80220f4:	6001      	str	r1, [r0, #0]
 80220f6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80220fa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80220fe:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8022102:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8022106:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 802210a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 802210e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8022112:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8022116:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 802211a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 802211e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8022122:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8022126:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 802212a:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 802212e:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8022132:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8022136:	4770      	bx	lr
 8022138:	0802fd5c 	.word	0x0802fd5c

0802213c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022140:	460d      	mov	r5, r1
 8022142:	4604      	mov	r4, r0
 8022144:	4699      	mov	r9, r3
 8022146:	b08d      	sub	sp, #52	@ 0x34
 8022148:	6808      	ldr	r0, [r1, #0]
 802214a:	6849      	ldr	r1, [r1, #4]
 802214c:	ab08      	add	r3, sp, #32
 802214e:	c303      	stmia	r3!, {r0, r1}
 8022150:	6810      	ldr	r0, [r2, #0]
 8022152:	6851      	ldr	r1, [r2, #4]
 8022154:	ab0a      	add	r3, sp, #40	@ 0x28
 8022156:	c303      	stmia	r3!, {r0, r1}
 8022158:	a808      	add	r0, sp, #32
 802215a:	f7f7 fc49 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802215e:	4629      	mov	r1, r5
 8022160:	a80a      	add	r0, sp, #40	@ 0x28
 8022162:	f7f7 fc6d 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022166:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802216a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 802216e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8022172:	4d63      	ldr	r5, [pc, #396]	@ (8022300 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022174:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022178:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802217c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022180:	6828      	ldr	r0, [r5, #0]
 8022182:	440a      	add	r2, r1
 8022184:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8022188:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 802218c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8022190:	4413      	add	r3, r2
 8022192:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8022196:	6803      	ldr	r3, [r0, #0]
 8022198:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 802219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802219e:	4798      	blx	r3
 80221a0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80221a4:	d119      	bne.n	80221da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80221a6:	f010 0f20 	tst.w	r0, #32
 80221aa:	6828      	ldr	r0, [r5, #0]
 80221ac:	d018      	beq.n	80221e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80221ae:	2500      	movs	r5, #0
 80221b0:	6801      	ldr	r1, [r0, #0]
 80221b2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80221b6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80221ba:	b2b6      	uxth	r6, r6
 80221bc:	9502      	str	r5, [sp, #8]
 80221be:	fa1f f588 	uxth.w	r5, r8
 80221c2:	9601      	str	r6, [sp, #4]
 80221c4:	9500      	str	r5, [sp, #0]
 80221c6:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80221c8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80221cc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80221d0:	4621      	mov	r1, r4
 80221d2:	47a8      	blx	r5
 80221d4:	b00d      	add	sp, #52	@ 0x34
 80221d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221da:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80221de:	e7e4      	b.n	80221aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80221e0:	6803      	ldr	r3, [r0, #0]
 80221e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221e4:	4798      	blx	r3
 80221e6:	4947      	ldr	r1, [pc, #284]	@ (8022304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80221e8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80221ec:	468a      	mov	sl, r1
 80221ee:	880b      	ldrh	r3, [r1, #0]
 80221f0:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 80221f4:	fb03 5202 	mla	r2, r3, r2, r5
 80221f8:	4373      	muls	r3, r6
 80221fa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80221fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022202:	9307      	str	r3, [sp, #28]
 8022204:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022208:	9306      	str	r3, [sp, #24]
 802220a:	9b07      	ldr	r3, [sp, #28]
 802220c:	4298      	cmp	r0, r3
 802220e:	d270      	bcs.n	80222f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022210:	4621      	mov	r1, r4
 8022212:	9b06      	ldr	r3, [sp, #24]
 8022214:	eb00 0b03 	add.w	fp, r0, r3
 8022218:	4558      	cmp	r0, fp
 802221a:	d25d      	bcs.n	80222d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 802221c:	f851 4b04 	ldr.w	r4, [r1], #4
 8022220:	0e23      	lsrs	r3, r4, #24
 8022222:	d014      	beq.n	802224e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022224:	2bff      	cmp	r3, #255	@ 0xff
 8022226:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 802222a:	d112      	bne.n	8022252 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802222c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022230:	d10f      	bne.n	8022252 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022232:	0963      	lsrs	r3, r4, #5
 8022234:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8022238:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802223c:	f02c 0c07 	bic.w	ip, ip, #7
 8022240:	ea43 0c0c 	orr.w	ip, r3, ip
 8022244:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022248:	ea4c 0404 	orr.w	r4, ip, r4
 802224c:	8004      	strh	r4, [r0, #0]
 802224e:	3002      	adds	r0, #2
 8022250:	e7e2      	b.n	8022218 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022252:	fb09 f303 	mul.w	r3, r9, r3
 8022256:	1c5a      	adds	r2, r3, #1
 8022258:	eb02 2223 	add.w	r2, r2, r3, asr #8
 802225c:	1212      	asrs	r2, r2, #8
 802225e:	b293      	uxth	r3, r2
 8022260:	43d2      	mvns	r2, r2
 8022262:	8807      	ldrh	r7, [r0, #0]
 8022264:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022268:	fb1e fe03 	smulbb	lr, lr, r3
 802226c:	123e      	asrs	r6, r7, #8
 802226e:	fa5f fc8c 	uxtb.w	ip, ip
 8022272:	b2e4      	uxtb	r4, r4
 8022274:	fb1c fc03 	smulbb	ip, ip, r3
 8022278:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802227c:	fb14 f403 	smulbb	r4, r4, r3
 8022280:	b2d2      	uxtb	r2, r2
 8022282:	10fd      	asrs	r5, r7, #3
 8022284:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022288:	00ff      	lsls	r7, r7, #3
 802228a:	fb06 e602 	mla	r6, r6, r2, lr
 802228e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022292:	b2ff      	uxtb	r7, r7
 8022294:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022298:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 802229c:	fb05 c502 	mla	r5, r5, r2, ip
 80222a0:	fb07 4702 	mla	r7, r7, r2, r4
 80222a4:	b2b6      	uxth	r6, r6
 80222a6:	f106 0e01 	add.w	lr, r6, #1
 80222aa:	b2ad      	uxth	r5, r5
 80222ac:	b2bf      	uxth	r7, r7
 80222ae:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80222b2:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 80222b6:	f105 0c01 	add.w	ip, r5, #1
 80222ba:	1c7e      	adds	r6, r7, #1
 80222bc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80222c0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80222c4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80222c8:	096d      	lsrs	r5, r5, #5
 80222ca:	ea46 060e 	orr.w	r6, r6, lr
 80222ce:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80222d2:	432e      	orrs	r6, r5
 80222d4:	8006      	strh	r6, [r0, #0]
 80222d6:	e7ba      	b.n	802224e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80222d8:	f8ba 3000 	ldrh.w	r3, [sl]
 80222dc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 80222e0:	eba3 0308 	sub.w	r3, r3, r8
 80222e4:	eba4 0408 	sub.w	r4, r4, r8
 80222e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80222ec:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80222f0:	e78b      	b.n	802220a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80222f2:	4b03      	ldr	r3, [pc, #12]	@ (8022300 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80222f4:	6818      	ldr	r0, [r3, #0]
 80222f6:	6803      	ldr	r3, [r0, #0]
 80222f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222fa:	4798      	blx	r3
 80222fc:	e76a      	b.n	80221d4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80222fe:	bf00      	nop
 8022300:	20011f2c 	.word	0x20011f2c
 8022304:	20011f26 	.word	0x20011f26

08022308 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802230c:	b085      	sub	sp, #20
 802230e:	466d      	mov	r5, sp
 8022310:	4616      	mov	r6, r2
 8022312:	460c      	mov	r4, r1
 8022314:	6810      	ldr	r0, [r2, #0]
 8022316:	6851      	ldr	r1, [r2, #4]
 8022318:	c503      	stmia	r5!, {r0, r1}
 802231a:	6818      	ldr	r0, [r3, #0]
 802231c:	6859      	ldr	r1, [r3, #4]
 802231e:	c503      	stmia	r5!, {r0, r1}
 8022320:	4668      	mov	r0, sp
 8022322:	f7f7 fb65 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022326:	4631      	mov	r1, r6
 8022328:	a802      	add	r0, sp, #8
 802232a:	f7f7 fb89 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802232e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022332:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022336:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802233a:	4d28      	ldr	r5, [pc, #160]	@ (80223dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 802233c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022340:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022344:	f8bd 1000 	ldrh.w	r1, [sp]
 8022348:	6828      	ldr	r0, [r5, #0]
 802234a:	440a      	add	r2, r1
 802234c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022350:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022354:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022358:	4413      	add	r3, r2
 802235a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802235e:	6803      	ldr	r3, [r0, #0]
 8022360:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022366:	4798      	blx	r3
 8022368:	4e1d      	ldr	r6, [pc, #116]	@ (80223e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802236a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802236e:	8833      	ldrh	r3, [r6, #0]
 8022370:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022374:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80223e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022378:	fb03 1202 	mla	r2, r3, r2, r1
 802237c:	fb08 f303 	mul.w	r3, r8, r3
 8022380:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022384:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022388:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 802238c:	4298      	cmp	r0, r3
 802238e:	d21d      	bcs.n	80223cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022390:	eb00 080c 	add.w	r8, r0, ip
 8022394:	4540      	cmp	r0, r8
 8022396:	d20f      	bcs.n	80223b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022398:	f854 1b04 	ldr.w	r1, [r4], #4
 802239c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80223a0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80223a4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80223a8:	ea42 0209 	orr.w	r2, r2, r9
 80223ac:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80223b0:	430a      	orrs	r2, r1
 80223b2:	f820 2b02 	strh.w	r2, [r0], #2
 80223b6:	e7ed      	b.n	8022394 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80223b8:	8832      	ldrh	r2, [r6, #0]
 80223ba:	1bd2      	subs	r2, r2, r7
 80223bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80223c0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80223c4:	1bd2      	subs	r2, r2, r7
 80223c6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80223ca:	e7df      	b.n	802238c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80223cc:	6828      	ldr	r0, [r5, #0]
 80223ce:	6803      	ldr	r3, [r0, #0]
 80223d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223d2:	4798      	blx	r3
 80223d4:	b005      	add	sp, #20
 80223d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80223da:	bf00      	nop
 80223dc:	20011f2c 	.word	0x20011f2c
 80223e0:	20011f26 	.word	0x20011f26
 80223e4:	fffff800 	.word	0xfffff800

080223e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80223e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223ec:	460e      	mov	r6, r1
 80223ee:	4604      	mov	r4, r0
 80223f0:	461d      	mov	r5, r3
 80223f2:	b08e      	sub	sp, #56	@ 0x38
 80223f4:	6808      	ldr	r0, [r1, #0]
 80223f6:	6849      	ldr	r1, [r1, #4]
 80223f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80223fa:	c303      	stmia	r3!, {r0, r1}
 80223fc:	6810      	ldr	r0, [r2, #0]
 80223fe:	6851      	ldr	r1, [r2, #4]
 8022400:	ab0c      	add	r3, sp, #48	@ 0x30
 8022402:	c303      	stmia	r3!, {r0, r1}
 8022404:	a80a      	add	r0, sp, #40	@ 0x28
 8022406:	f7f7 faf3 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802240a:	4631      	mov	r1, r6
 802240c:	a80c      	add	r0, sp, #48	@ 0x30
 802240e:	f7f7 fb17 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022412:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022416:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 802241a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802241e:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80225d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8022422:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022426:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802242a:	440c      	add	r4, r1
 802242c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022430:	f8d8 0000 	ldr.w	r0, [r8]
 8022434:	440a      	add	r2, r1
 8022436:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802243a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 802243e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8022442:	4413      	add	r3, r2
 8022444:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022448:	6803      	ldr	r3, [r0, #0]
 802244a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802244e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022450:	4798      	blx	r3
 8022452:	2dff      	cmp	r5, #255	@ 0xff
 8022454:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80225d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022458:	d124      	bne.n	80224a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802245a:	f010 0f01 	tst.w	r0, #1
 802245e:	f8d8 0000 	ldr.w	r0, [r8]
 8022462:	d022      	beq.n	80224aa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022464:	2100      	movs	r1, #0
 8022466:	f04f 0e01 	mov.w	lr, #1
 802246a:	f8d0 c000 	ldr.w	ip, [r0]
 802246e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8022472:	f8cd e018 	str.w	lr, [sp, #24]
 8022476:	f8b9 e000 	ldrh.w	lr, [r9]
 802247a:	b2b6      	uxth	r6, r6
 802247c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022480:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022484:	b2bf      	uxth	r7, r7
 8022486:	9102      	str	r1, [sp, #8]
 8022488:	9503      	str	r5, [sp, #12]
 802248a:	9601      	str	r6, [sp, #4]
 802248c:	9700      	str	r7, [sp, #0]
 802248e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022492:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022496:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 802249a:	4621      	mov	r1, r4
 802249c:	47a8      	blx	r5
 802249e:	b00e      	add	sp, #56	@ 0x38
 80224a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224a4:	f010 0f04 	tst.w	r0, #4
 80224a8:	e7d9      	b.n	802245e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80224aa:	6803      	ldr	r3, [r0, #0]
 80224ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80224ae:	4798      	blx	r3
 80224b0:	f8b9 3000 	ldrh.w	r3, [r9]
 80224b4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80224b8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80224bc:	435e      	muls	r6, r3
 80224be:	fb03 1202 	mla	r2, r3, r2, r1
 80224c2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80224c6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80224ca:	ebac 0c07 	sub.w	ip, ip, r7
 80224ce:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80224d2:	2dff      	cmp	r5, #255	@ 0xff
 80224d4:	eba3 0707 	sub.w	r7, r3, r7
 80224d8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80224dc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80224e0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80224e4:	d049      	beq.n	802257a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80224e6:	43eb      	mvns	r3, r5
 80224e8:	fa1f f985 	uxth.w	r9, r5
 80224ec:	b2db      	uxtb	r3, r3
 80224ee:	42b0      	cmp	r0, r6
 80224f0:	d266      	bcs.n	80225c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80224f2:	eb00 0a0e 	add.w	sl, r0, lr
 80224f6:	4550      	cmp	r0, sl
 80224f8:	4621      	mov	r1, r4
 80224fa:	f104 0403 	add.w	r4, r4, #3
 80224fe:	d25b      	bcs.n	80225b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8022500:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022504:	8802      	ldrh	r2, [r0, #0]
 8022506:	fb11 f109 	smulbb	r1, r1, r9
 802250a:	ea4f 2822 	mov.w	r8, r2, asr #8
 802250e:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8022512:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8022516:	fb08 1803 	mla	r8, r8, r3, r1
 802251a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802251e:	10d5      	asrs	r5, r2, #3
 8022520:	fb11 f109 	smulbb	r1, r1, r9
 8022524:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022528:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802252c:	fb05 1503 	mla	r5, r5, r3, r1
 8022530:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022534:	00d2      	lsls	r2, r2, #3
 8022536:	fb11 f109 	smulbb	r1, r1, r9
 802253a:	b2d2      	uxtb	r2, r2
 802253c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022540:	fb02 1203 	mla	r2, r2, r3, r1
 8022544:	fa1f f888 	uxth.w	r8, r8
 8022548:	b292      	uxth	r2, r2
 802254a:	f108 0101 	add.w	r1, r8, #1
 802254e:	b2ad      	uxth	r5, r5
 8022550:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022554:	1c51      	adds	r1, r2, #1
 8022556:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802255a:	1c69      	adds	r1, r5, #1
 802255c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022560:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8022564:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022568:	096d      	lsrs	r5, r5, #5
 802256a:	ea42 0208 	orr.w	r2, r2, r8
 802256e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022572:	432a      	orrs	r2, r5
 8022574:	f820 2b02 	strh.w	r2, [r0], #2
 8022578:	e7bd      	b.n	80224f6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802257a:	4a14      	ldr	r2, [pc, #80]	@ (80225cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 802257c:	42b0      	cmp	r0, r6
 802257e:	d21f      	bcs.n	80225c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022580:	eb00 050e 	add.w	r5, r0, lr
 8022584:	42a8      	cmp	r0, r5
 8022586:	4621      	mov	r1, r4
 8022588:	f104 0403 	add.w	r4, r4, #3
 802258c:	d210      	bcs.n	80225b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802258e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8022592:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022596:	00db      	lsls	r3, r3, #3
 8022598:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 802259c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80225a0:	430b      	orrs	r3, r1
 80225a2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80225a6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80225aa:	f820 3b02 	strh.w	r3, [r0], #2
 80225ae:	e7e9      	b.n	8022584 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80225b0:	4438      	add	r0, r7
 80225b2:	eb01 040c 	add.w	r4, r1, ip
 80225b6:	e7e1      	b.n	802257c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80225b8:	4438      	add	r0, r7
 80225ba:	eb01 040c 	add.w	r4, r1, ip
 80225be:	e796      	b.n	80224ee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80225c0:	4b03      	ldr	r3, [pc, #12]	@ (80225d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80225c2:	6818      	ldr	r0, [r3, #0]
 80225c4:	6803      	ldr	r3, [r0, #0]
 80225c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225c8:	4798      	blx	r3
 80225ca:	e768      	b.n	802249e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80225cc:	fffff800 	.word	0xfffff800
 80225d0:	20011f2c 	.word	0x20011f2c
 80225d4:	20011f26 	.word	0x20011f26

080225d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80225d8:	b4f0      	push	{r4, r5, r6, r7}
 80225da:	4616      	mov	r6, r2
 80225dc:	2e01      	cmp	r6, #1
 80225de:	461c      	mov	r4, r3
 80225e0:	460d      	mov	r5, r1
 80225e2:	9a04      	ldr	r2, [sp, #16]
 80225e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80225e8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80225ec:	d012      	beq.n	8022614 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80225ee:	d303      	bcc.n	80225f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80225f0:	2e02      	cmp	r6, #2
 80225f2:	d00a      	beq.n	802260a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80225f4:	bcf0      	pop	{r4, r5, r6, r7}
 80225f6:	4770      	bx	lr
 80225f8:	6805      	ldr	r5, [r0, #0]
 80225fa:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80225fe:	68ed      	ldr	r5, [r5, #12]
 8022600:	4613      	mov	r3, r2
 8022602:	46ac      	mov	ip, r5
 8022604:	4622      	mov	r2, r4
 8022606:	bcf0      	pop	{r4, r5, r6, r7}
 8022608:	4760      	bx	ip
 802260a:	4621      	mov	r1, r4
 802260c:	4628      	mov	r0, r5
 802260e:	bcf0      	pop	{r4, r5, r6, r7}
 8022610:	f7ff bd94 	b.w	802213c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022614:	4621      	mov	r1, r4
 8022616:	4628      	mov	r0, r5
 8022618:	bcf0      	pop	{r4, r5, r6, r7}
 802261a:	f7ff bee5 	b.w	80223e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08022620 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022624:	4616      	mov	r6, r2
 8022626:	4681      	mov	r9, r0
 8022628:	b093      	sub	sp, #76	@ 0x4c
 802262a:	6810      	ldr	r0, [r2, #0]
 802262c:	4688      	mov	r8, r1
 802262e:	6851      	ldr	r1, [r2, #4]
 8022630:	ac0e      	add	r4, sp, #56	@ 0x38
 8022632:	c403      	stmia	r4!, {r0, r1}
 8022634:	6818      	ldr	r0, [r3, #0]
 8022636:	6859      	ldr	r1, [r3, #4]
 8022638:	ac10      	add	r4, sp, #64	@ 0x40
 802263a:	c403      	stmia	r4!, {r0, r1}
 802263c:	a80e      	add	r0, sp, #56	@ 0x38
 802263e:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8022642:	f7f7 f9d5 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022646:	4631      	mov	r1, r6
 8022648:	a810      	add	r0, sp, #64	@ 0x40
 802264a:	f7f7 f9f9 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802264e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8022652:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8022656:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802265a:	4e62      	ldr	r6, [pc, #392]	@ (80227e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 802265c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022660:	4489      	add	r9, r1
 8022662:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8022666:	6830      	ldr	r0, [r6, #0]
 8022668:	440a      	add	r2, r1
 802266a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802266e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022672:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8022676:	4413      	add	r3, r2
 8022678:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802267c:	6803      	ldr	r3, [r0, #0]
 802267e:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8022682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022684:	4798      	blx	r3
 8022686:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802268a:	4f57      	ldr	r7, [pc, #348]	@ (80227e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802268c:	6830      	ldr	r0, [r6, #0]
 802268e:	d01d      	beq.n	80226cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022690:	2200      	movs	r2, #0
 8022692:	6801      	ldr	r1, [r0, #0]
 8022694:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022698:	220b      	movs	r2, #11
 802269a:	9207      	str	r2, [sp, #28]
 802269c:	883a      	ldrh	r2, [r7, #0]
 802269e:	b2a4      	uxth	r4, r4
 80226a0:	9206      	str	r2, [sp, #24]
 80226a2:	2201      	movs	r2, #1
 80226a4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80226a8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80226ac:	b2ad      	uxth	r5, r5
 80226ae:	9203      	str	r2, [sp, #12]
 80226b0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80226b4:	9502      	str	r5, [sp, #8]
 80226b6:	9200      	str	r2, [sp, #0]
 80226b8:	9401      	str	r4, [sp, #4]
 80226ba:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80226bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80226c0:	4642      	mov	r2, r8
 80226c2:	4649      	mov	r1, r9
 80226c4:	47a0      	blx	r4
 80226c6:	b013      	add	sp, #76	@ 0x4c
 80226c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226cc:	6803      	ldr	r3, [r0, #0]
 80226ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80226d0:	4798      	blx	r3
 80226d2:	f04f 0e04 	mov.w	lr, #4
 80226d6:	883b      	ldrh	r3, [r7, #0]
 80226d8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80226dc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80226e0:	435d      	muls	r5, r3
 80226e2:	fb03 1202 	mla	r2, r3, r2, r1
 80226e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80226ea:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80226ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80226f0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80226f4:	1b12      	subs	r2, r2, r4
 80226f6:	920d      	str	r2, [sp, #52]	@ 0x34
 80226f8:	0062      	lsls	r2, r4, #1
 80226fa:	1b1c      	subs	r4, r3, r4
 80226fc:	0063      	lsls	r3, r4, #1
 80226fe:	920a      	str	r2, [sp, #40]	@ 0x28
 8022700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022704:	4298      	cmp	r0, r3
 8022706:	d266      	bcs.n	80227d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8022708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802270a:	eb00 0b03 	add.w	fp, r0, r3
 802270e:	4558      	cmp	r0, fp
 8022710:	d25c      	bcs.n	80227cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8022712:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022716:	fb1e e303 	smlabb	r3, lr, r3, lr
 802271a:	f858 2003 	ldr.w	r2, [r8, r3]
 802271e:	0e11      	lsrs	r1, r2, #24
 8022720:	d012      	beq.n	8022748 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022722:	29ff      	cmp	r1, #255	@ 0xff
 8022724:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8022728:	d110      	bne.n	802274c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802272a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802272e:	d10d      	bne.n	802274c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8022730:	0953      	lsrs	r3, r2, #5
 8022732:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8022736:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802273a:	f027 0707 	bic.w	r7, r7, #7
 802273e:	431f      	orrs	r7, r3
 8022740:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022744:	433a      	orrs	r2, r7
 8022746:	8002      	strh	r2, [r0, #0]
 8022748:	3002      	adds	r0, #2
 802274a:	e7e0      	b.n	802270e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 802274c:	fb0a f101 	mul.w	r1, sl, r1
 8022750:	1c4b      	adds	r3, r1, #1
 8022752:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022756:	121b      	asrs	r3, r3, #8
 8022758:	b299      	uxth	r1, r3
 802275a:	43db      	mvns	r3, r3
 802275c:	8806      	ldrh	r6, [r0, #0]
 802275e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8022762:	b2d2      	uxtb	r2, r2
 8022764:	fb1c fc01 	smulbb	ip, ip, r1
 8022768:	fb12 f201 	smulbb	r2, r2, r1
 802276c:	1235      	asrs	r5, r6, #8
 802276e:	10f4      	asrs	r4, r6, #3
 8022770:	00f6      	lsls	r6, r6, #3
 8022772:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022776:	b2f6      	uxtb	r6, r6
 8022778:	b2ff      	uxtb	r7, r7
 802277a:	b2db      	uxtb	r3, r3
 802277c:	fb17 f701 	smulbb	r7, r7, r1
 8022780:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022784:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022788:	fb05 c503 	mla	r5, r5, r3, ip
 802278c:	fb06 2203 	mla	r2, r6, r3, r2
 8022790:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022794:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022798:	fb04 7403 	mla	r4, r4, r3, r7
 802279c:	b2ad      	uxth	r5, r5
 802279e:	b292      	uxth	r2, r2
 80227a0:	f105 0c01 	add.w	ip, r5, #1
 80227a4:	1c57      	adds	r7, r2, #1
 80227a6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80227aa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80227ae:	b2a4      	uxth	r4, r4
 80227b0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80227b4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80227b8:	433d      	orrs	r5, r7
 80227ba:	1c67      	adds	r7, r4, #1
 80227bc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80227c0:	0964      	lsrs	r4, r4, #5
 80227c2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80227c6:	4325      	orrs	r5, r4
 80227c8:	8005      	strh	r5, [r0, #0]
 80227ca:	e7bd      	b.n	8022748 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80227cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227ce:	4418      	add	r0, r3
 80227d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80227d2:	4499      	add	r9, r3
 80227d4:	e795      	b.n	8022702 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80227d6:	4b03      	ldr	r3, [pc, #12]	@ (80227e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80227d8:	6818      	ldr	r0, [r3, #0]
 80227da:	6803      	ldr	r3, [r0, #0]
 80227dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227de:	4798      	blx	r3
 80227e0:	e771      	b.n	80226c6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80227e2:	bf00      	nop
 80227e4:	20011f2c 	.word	0x20011f2c
 80227e8:	20011f26 	.word	0x20011f26

080227ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80227ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227f0:	b087      	sub	sp, #28
 80227f2:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80227f6:	4680      	mov	r8, r0
 80227f8:	460d      	mov	r5, r1
 80227fa:	4614      	mov	r4, r2
 80227fc:	2e00      	cmp	r6, #0
 80227fe:	f000 80b9 	beq.w	8022974 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8022802:	6810      	ldr	r0, [r2, #0]
 8022804:	6851      	ldr	r1, [r2, #4]
 8022806:	af02      	add	r7, sp, #8
 8022808:	c703      	stmia	r7!, {r0, r1}
 802280a:	6818      	ldr	r0, [r3, #0]
 802280c:	6859      	ldr	r1, [r3, #4]
 802280e:	af04      	add	r7, sp, #16
 8022810:	c703      	stmia	r7!, {r0, r1}
 8022812:	a802      	add	r0, sp, #8
 8022814:	f7f7 f8ec 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022818:	4621      	mov	r1, r4
 802281a:	a804      	add	r0, sp, #16
 802281c:	f7f7 f910 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022820:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022824:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022828:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802282c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022830:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022834:	eb08 0401 	add.w	r4, r8, r1
 8022838:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802283c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022840:	440a      	add	r2, r1
 8022842:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022846:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802284a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802284e:	4413      	add	r3, r2
 8022850:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022854:	4b49      	ldr	r3, [pc, #292]	@ (802297c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8022856:	6818      	ldr	r0, [r3, #0]
 8022858:	6803      	ldr	r3, [r0, #0]
 802285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802285c:	4798      	blx	r3
 802285e:	4b48      	ldr	r3, [pc, #288]	@ (8022980 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8022860:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022864:	881a      	ldrh	r2, [r3, #0]
 8022866:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802286a:	2eff      	cmp	r6, #255	@ 0xff
 802286c:	fb02 c101 	mla	r1, r2, r1, ip
 8022870:	fb02 f207 	mul.w	r2, r2, r7
 8022874:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022878:	f105 0104 	add.w	r1, r5, #4
 802287c:	461d      	mov	r5, r3
 802287e:	d05a      	beq.n	8022936 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8022880:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8022884:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022888:	b2b6      	uxth	r6, r6
 802288a:	fa1f fe8e 	uxth.w	lr, lr
 802288e:	9301      	str	r3, [sp, #4]
 8022890:	4282      	cmp	r2, r0
 8022892:	d96a      	bls.n	802296a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8022894:	eb00 0b0a 	add.w	fp, r0, sl
 8022898:	4583      	cmp	fp, r0
 802289a:	d940      	bls.n	802291e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 802289c:	8805      	ldrh	r5, [r0, #0]
 802289e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80228a2:	122f      	asrs	r7, r5, #8
 80228a4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80228a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80228ac:	fb17 f70e 	smulbb	r7, r7, lr
 80228b0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80228b4:	00ed      	lsls	r5, r5, #3
 80228b6:	b2ed      	uxtb	r5, r5
 80228b8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80228bc:	fb15 f50e 	smulbb	r5, r5, lr
 80228c0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80228c4:	fb0c 7c06 	mla	ip, ip, r6, r7
 80228c8:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80228cc:	10df      	asrs	r7, r3, #3
 80228ce:	00db      	lsls	r3, r3, #3
 80228d0:	fb19 f90e 	smulbb	r9, r9, lr
 80228d4:	b2db      	uxtb	r3, r3
 80228d6:	fb03 5306 	mla	r3, r3, r6, r5
 80228da:	fa1f fc8c 	uxth.w	ip, ip
 80228de:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80228e2:	fb07 9706 	mla	r7, r7, r6, r9
 80228e6:	f10c 0901 	add.w	r9, ip, #1
 80228ea:	b29b      	uxth	r3, r3
 80228ec:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80228f0:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80228f4:	f103 0c01 	add.w	ip, r3, #1
 80228f8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80228fc:	b2bf      	uxth	r7, r7
 80228fe:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022902:	ea4c 0c09 	orr.w	ip, ip, r9
 8022906:	f107 0901 	add.w	r9, r7, #1
 802290a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802290e:	097f      	lsrs	r7, r7, #5
 8022910:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8022914:	ea4c 0c07 	orr.w	ip, ip, r7
 8022918:	f820 cb02 	strh.w	ip, [r0], #2
 802291c:	e7bc      	b.n	8022898 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 802291e:	9b01      	ldr	r3, [sp, #4]
 8022920:	881b      	ldrh	r3, [r3, #0]
 8022922:	eba3 0308 	sub.w	r3, r3, r8
 8022926:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802292a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802292e:	eba3 0308 	sub.w	r3, r3, r8
 8022932:	441c      	add	r4, r3
 8022934:	e7ac      	b.n	8022890 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8022936:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802293a:	4282      	cmp	r2, r0
 802293c:	d915      	bls.n	802296a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802293e:	eb00 060a 	add.w	r6, r0, sl
 8022942:	4286      	cmp	r6, r0
 8022944:	d906      	bls.n	8022954 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8022946:	f814 3b01 	ldrb.w	r3, [r4], #1
 802294a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802294e:	f820 3b02 	strh.w	r3, [r0], #2
 8022952:	e7f6      	b.n	8022942 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8022954:	882b      	ldrh	r3, [r5, #0]
 8022956:	eba3 0308 	sub.w	r3, r3, r8
 802295a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802295e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022962:	eba3 0308 	sub.w	r3, r3, r8
 8022966:	441c      	add	r4, r3
 8022968:	e7e7      	b.n	802293a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 802296a:	4b04      	ldr	r3, [pc, #16]	@ (802297c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802296c:	6818      	ldr	r0, [r3, #0]
 802296e:	6803      	ldr	r3, [r0, #0]
 8022970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022972:	4798      	blx	r3
 8022974:	b007      	add	sp, #28
 8022976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802297a:	bf00      	nop
 802297c:	20011f2c 	.word	0x20011f2c
 8022980:	20011f26 	.word	0x20011f26

08022984 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022988:	b091      	sub	sp, #68	@ 0x44
 802298a:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 802298e:	4680      	mov	r8, r0
 8022990:	460f      	mov	r7, r1
 8022992:	4614      	mov	r4, r2
 8022994:	2d00      	cmp	r5, #0
 8022996:	d051      	beq.n	8022a3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022998:	6810      	ldr	r0, [r2, #0]
 802299a:	6851      	ldr	r1, [r2, #4]
 802299c:	ae0c      	add	r6, sp, #48	@ 0x30
 802299e:	c603      	stmia	r6!, {r0, r1}
 80229a0:	6818      	ldr	r0, [r3, #0]
 80229a2:	6859      	ldr	r1, [r3, #4]
 80229a4:	ae0e      	add	r6, sp, #56	@ 0x38
 80229a6:	c603      	stmia	r6!, {r0, r1}
 80229a8:	a80c      	add	r0, sp, #48	@ 0x30
 80229aa:	f7f7 f821 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229ae:	4621      	mov	r1, r4
 80229b0:	a80e      	add	r0, sp, #56	@ 0x38
 80229b2:	f7f7 f845 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80229b6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80229ba:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80229be:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80229c2:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 8022ba0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80229c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80229ca:	eb08 0401 	add.w	r4, r8, r1
 80229ce:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80229d2:	f8d9 0000 	ldr.w	r0, [r9]
 80229d6:	440a      	add	r2, r1
 80229d8:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80229dc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80229e0:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80229e4:	4413      	add	r3, r2
 80229e6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80229ea:	6803      	ldr	r3, [r0, #0]
 80229ec:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80229f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80229f2:	4798      	blx	r3
 80229f4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80229f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8022ba4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80229fc:	f8d9 0000 	ldr.w	r0, [r9]
 8022a00:	d01f      	beq.n	8022a42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8022a02:	2200      	movs	r2, #0
 8022a04:	6801      	ldr	r1, [r0, #0]
 8022a06:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022a0a:	220b      	movs	r2, #11
 8022a0c:	9207      	str	r2, [sp, #28]
 8022a0e:	f8b8 2000 	ldrh.w	r2, [r8]
 8022a12:	b2b6      	uxth	r6, r6
 8022a14:	9206      	str	r2, [sp, #24]
 8022a16:	2201      	movs	r2, #1
 8022a18:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8022a1c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022a20:	9601      	str	r6, [sp, #4]
 8022a22:	9203      	str	r2, [sp, #12]
 8022a24:	fa1f f28a 	uxth.w	r2, sl
 8022a28:	9202      	str	r2, [sp, #8]
 8022a2a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022a2e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022a32:	9200      	str	r2, [sp, #0]
 8022a34:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8022a36:	463a      	mov	r2, r7
 8022a38:	4621      	mov	r1, r4
 8022a3a:	47a8      	blx	r5
 8022a3c:	b011      	add	sp, #68	@ 0x44
 8022a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a42:	6803      	ldr	r3, [r0, #0]
 8022a44:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022a4a:	4798      	blx	r3
 8022a4c:	f8b8 2000 	ldrh.w	r2, [r8]
 8022a50:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022a54:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8022a58:	2dff      	cmp	r5, #255	@ 0xff
 8022a5a:	fb02 1303 	mla	r3, r2, r3, r1
 8022a5e:	fb0a fa02 	mul.w	sl, sl, r2
 8022a62:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a66:	d062      	beq.n	8022b2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022a68:	ea6f 0c05 	mvn.w	ip, r5
 8022a6c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8022a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a72:	b2ad      	uxth	r5, r5
 8022a74:	fa5f fc8c 	uxtb.w	ip, ip
 8022a78:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8022a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022a7e:	4298      	cmp	r0, r3
 8022a80:	f080 8085 	bcs.w	8022b8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022a84:	eb00 0b09 	add.w	fp, r0, r9
 8022a88:	4558      	cmp	r0, fp
 8022a8a:	d246      	bcs.n	8022b1a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8022a8c:	2303      	movs	r3, #3
 8022a8e:	2204      	movs	r2, #4
 8022a90:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022a94:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022a98:	eb07 0a0e 	add.w	sl, r7, lr
 8022a9c:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022aa0:	8803      	ldrh	r3, [r0, #0]
 8022aa2:	fb18 f805 	smulbb	r8, r8, r5
 8022aa6:	1219      	asrs	r1, r3, #8
 8022aa8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022aac:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022ab0:	fb01 810c 	mla	r1, r1, ip, r8
 8022ab4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022ab8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022abc:	fb1e fe05 	smulbb	lr, lr, r5
 8022ac0:	fb18 f805 	smulbb	r8, r8, r5
 8022ac4:	10da      	asrs	r2, r3, #3
 8022ac6:	00db      	lsls	r3, r3, #3
 8022ac8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022acc:	b2db      	uxtb	r3, r3
 8022ace:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022ad2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022ad6:	fb02 820c 	mla	r2, r2, ip, r8
 8022ada:	fb03 e30c 	mla	r3, r3, ip, lr
 8022ade:	b289      	uxth	r1, r1
 8022ae0:	b292      	uxth	r2, r2
 8022ae2:	b29b      	uxth	r3, r3
 8022ae4:	f101 0801 	add.w	r8, r1, #1
 8022ae8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022aec:	f103 0e01 	add.w	lr, r3, #1
 8022af0:	f102 0801 	add.w	r8, r2, #1
 8022af4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022af8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8022afc:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8022b00:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022b04:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022b08:	ea4e 0101 	orr.w	r1, lr, r1
 8022b0c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8022b10:	ea41 0108 	orr.w	r1, r1, r8
 8022b14:	f820 1b02 	strh.w	r1, [r0], #2
 8022b18:	e7b6      	b.n	8022a88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8022b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b1c:	881b      	ldrh	r3, [r3, #0]
 8022b1e:	1b9b      	subs	r3, r3, r6
 8022b20:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b24:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022b28:	1b9b      	subs	r3, r3, r6
 8022b2a:	441c      	add	r4, r3
 8022b2c:	e7a6      	b.n	8022a7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8022b2e:	2203      	movs	r2, #3
 8022b30:	2504      	movs	r5, #4
 8022b32:	491a      	ldr	r1, [pc, #104]	@ (8022b9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8022b34:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022b38:	4550      	cmp	r0, sl
 8022b3a:	d228      	bcs.n	8022b8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022b3c:	eb00 0c09 	add.w	ip, r0, r9
 8022b40:	4560      	cmp	r0, ip
 8022b42:	4623      	mov	r3, r4
 8022b44:	d219      	bcs.n	8022b7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8022b46:	f893 e000 	ldrb.w	lr, [r3]
 8022b4a:	3401      	adds	r4, #1
 8022b4c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022b50:	eb07 0b0e 	add.w	fp, r7, lr
 8022b54:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022b58:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022b5c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022b60:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022b64:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022b68:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8022b6c:	ea43 030b 	orr.w	r3, r3, fp
 8022b70:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022b74:	f820 3b02 	strh.w	r3, [r0], #2
 8022b78:	e7e2      	b.n	8022b40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8022b7a:	f8b8 3000 	ldrh.w	r3, [r8]
 8022b7e:	1b9b      	subs	r3, r3, r6
 8022b80:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b84:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022b88:	1b9b      	subs	r3, r3, r6
 8022b8a:	441c      	add	r4, r3
 8022b8c:	e7d4      	b.n	8022b38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8022b8e:	4b04      	ldr	r3, [pc, #16]	@ (8022ba0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8022b90:	6818      	ldr	r0, [r3, #0]
 8022b92:	6803      	ldr	r3, [r0, #0]
 8022b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022b96:	4798      	blx	r3
 8022b98:	e750      	b.n	8022a3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8022b9a:	bf00      	nop
 8022b9c:	fffff800 	.word	0xfffff800
 8022ba0:	20011f2c 	.word	0x20011f2c
 8022ba4:	20011f26 	.word	0x20011f26

08022ba8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022ba8:	b4f0      	push	{r4, r5, r6, r7}
 8022baa:	460c      	mov	r4, r1
 8022bac:	4611      	mov	r1, r2
 8022bae:	780f      	ldrb	r7, [r1, #0]
 8022bb0:	461a      	mov	r2, r3
 8022bb2:	2f01      	cmp	r7, #1
 8022bb4:	9b04      	ldr	r3, [sp, #16]
 8022bb6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022bba:	784e      	ldrb	r6, [r1, #1]
 8022bbc:	d038      	beq.n	8022c30 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8022bbe:	d31f      	bcc.n	8022c00 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8022bc0:	2f02      	cmp	r7, #2
 8022bc2:	d14d      	bne.n	8022c60 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022bc4:	2e03      	cmp	r6, #3
 8022bc6:	d84b      	bhi.n	8022c60 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022bc8:	e8df f006 	tbb	[pc, r6]
 8022bcc:	17140702 	.word	0x17140702
 8022bd0:	9504      	str	r5, [sp, #16]
 8022bd2:	4620      	mov	r0, r4
 8022bd4:	bcf0      	pop	{r4, r5, r6, r7}
 8022bd6:	f7ff be09 	b.w	80227ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022bda:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8022bdc:	2800      	cmp	r0, #0
 8022bde:	d03f      	beq.n	8022c60 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022be0:	6806      	ldr	r6, [r0, #0]
 8022be2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022be6:	68b5      	ldr	r5, [r6, #8]
 8022be8:	4613      	mov	r3, r2
 8022bea:	46ac      	mov	ip, r5
 8022bec:	460a      	mov	r2, r1
 8022bee:	4621      	mov	r1, r4
 8022bf0:	bcf0      	pop	{r4, r5, r6, r7}
 8022bf2:	4760      	bx	ip
 8022bf4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8022bf8:	e7f0      	b.n	8022bdc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022bfa:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022bfe:	e7ed      	b.n	8022bdc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022c00:	2e03      	cmp	r6, #3
 8022c02:	d82d      	bhi.n	8022c60 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022c04:	e8df f006 	tbb	[pc, r6]
 8022c08:	110e0702 	.word	0x110e0702
 8022c0c:	9504      	str	r5, [sp, #16]
 8022c0e:	4620      	mov	r0, r4
 8022c10:	bcf0      	pop	{r4, r5, r6, r7}
 8022c12:	f7ff bd05 	b.w	8022620 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022c16:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8022c18:	b310      	cbz	r0, 8022c60 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022c1a:	6806      	ldr	r6, [r0, #0]
 8022c1c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022c20:	68f5      	ldr	r5, [r6, #12]
 8022c22:	e7e1      	b.n	8022be8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022c24:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8022c28:	e7f6      	b.n	8022c18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8022c2a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022c2e:	e7f3      	b.n	8022c18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8022c30:	2e03      	cmp	r6, #3
 8022c32:	d815      	bhi.n	8022c60 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022c34:	e8df f006 	tbb	[pc, r6]
 8022c38:	110e0702 	.word	0x110e0702
 8022c3c:	9504      	str	r5, [sp, #16]
 8022c3e:	4620      	mov	r0, r4
 8022c40:	bcf0      	pop	{r4, r5, r6, r7}
 8022c42:	f7ff be9f 	b.w	8022984 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022c46:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8022c48:	b150      	cbz	r0, 8022c60 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8022c4a:	6806      	ldr	r6, [r0, #0]
 8022c4c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022c50:	6935      	ldr	r5, [r6, #16]
 8022c52:	e7c9      	b.n	8022be8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022c54:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8022c58:	e7f6      	b.n	8022c48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8022c5a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8022c5e:	e7f3      	b.n	8022c48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8022c60:	bcf0      	pop	{r4, r5, r6, r7}
 8022c62:	4770      	bx	lr

08022c64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c68:	4617      	mov	r7, r2
 8022c6a:	4604      	mov	r4, r0
 8022c6c:	460e      	mov	r6, r1
 8022c6e:	b087      	sub	sp, #28
 8022c70:	6810      	ldr	r0, [r2, #0]
 8022c72:	6851      	ldr	r1, [r2, #4]
 8022c74:	ad02      	add	r5, sp, #8
 8022c76:	c503      	stmia	r5!, {r0, r1}
 8022c78:	6818      	ldr	r0, [r3, #0]
 8022c7a:	6859      	ldr	r1, [r3, #4]
 8022c7c:	ad04      	add	r5, sp, #16
 8022c7e:	c503      	stmia	r5!, {r0, r1}
 8022c80:	a802      	add	r0, sp, #8
 8022c82:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8022c86:	f7f6 feb3 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c8a:	4639      	mov	r1, r7
 8022c8c:	a804      	add	r0, sp, #16
 8022c8e:	f7f6 fed7 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c92:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022c96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022c9a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022c9e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022ca2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022ca6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022caa:	440e      	add	r6, r1
 8022cac:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022cb0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022cb4:	440a      	add	r2, r1
 8022cb6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022cba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022cbe:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8022eac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8022cc2:	4413      	add	r3, r2
 8022cc4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022cc8:	4b77      	ldr	r3, [pc, #476]	@ (8022ea8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022cca:	6818      	ldr	r0, [r3, #0]
 8022ccc:	6803      	ldr	r3, [r0, #0]
 8022cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022cd0:	4798      	blx	r3
 8022cd2:	f8b9 b000 	ldrh.w	fp, [r9]
 8022cd6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022cda:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022cde:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8022ce2:	fb0b 2303 	mla	r3, fp, r3, r2
 8022ce6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022cea:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022cee:	fb05 f50b 	mul.w	r5, r5, fp
 8022cf2:	9300      	str	r3, [sp, #0]
 8022cf4:	d069      	beq.n	8022dca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022cf6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8022cfa:	4558      	cmp	r0, fp
 8022cfc:	f080 80cc 	bcs.w	8022e98 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022d00:	4631      	mov	r1, r6
 8022d02:	9b00      	ldr	r3, [sp, #0]
 8022d04:	18c3      	adds	r3, r0, r3
 8022d06:	9301      	str	r3, [sp, #4]
 8022d08:	9b01      	ldr	r3, [sp, #4]
 8022d0a:	4298      	cmp	r0, r3
 8022d0c:	d24f      	bcs.n	8022dae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8022d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d12:	2a00      	cmp	r2, #0
 8022d14:	d048      	beq.n	8022da8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022d16:	fb0a f202 	mul.w	r2, sl, r2
 8022d1a:	1c53      	adds	r3, r2, #1
 8022d1c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022d20:	121b      	asrs	r3, r3, #8
 8022d22:	d041      	beq.n	8022da8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022d24:	b29e      	uxth	r6, r3
 8022d26:	43db      	mvns	r3, r3
 8022d28:	8802      	ldrh	r2, [r0, #0]
 8022d2a:	b2db      	uxtb	r3, r3
 8022d2c:	1215      	asrs	r5, r2, #8
 8022d2e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022d32:	f8b4 c000 	ldrh.w	ip, [r4]
 8022d36:	fb15 f503 	smulbb	r5, r5, r3
 8022d3a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022d3e:	00d2      	lsls	r2, r2, #3
 8022d40:	b2d2      	uxtb	r2, r2
 8022d42:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022d46:	fb12 f203 	smulbb	r2, r2, r3
 8022d4a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022d4e:	fb07 5706 	mla	r7, r7, r6, r5
 8022d52:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8022d56:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022d5a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022d5e:	fb1e fe03 	smulbb	lr, lr, r3
 8022d62:	fa5f fc8c 	uxtb.w	ip, ip
 8022d66:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022d6a:	b2bf      	uxth	r7, r7
 8022d6c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022d70:	fb05 e506 	mla	r5, r5, r6, lr
 8022d74:	f107 0e01 	add.w	lr, r7, #1
 8022d78:	fa1f fc8c 	uxth.w	ip, ip
 8022d7c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022d80:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8022d84:	f10c 0701 	add.w	r7, ip, #1
 8022d88:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022d8c:	b2ad      	uxth	r5, r5
 8022d8e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022d92:	ea47 070e 	orr.w	r7, r7, lr
 8022d96:	f105 0e01 	add.w	lr, r5, #1
 8022d9a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8022d9e:	096d      	lsrs	r5, r5, #5
 8022da0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022da4:	432f      	orrs	r7, r5
 8022da6:	8007      	strh	r7, [r0, #0]
 8022da8:	3002      	adds	r0, #2
 8022daa:	3402      	adds	r4, #2
 8022dac:	e7ac      	b.n	8022d08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8022dae:	f8b9 3000 	ldrh.w	r3, [r9]
 8022db2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022db6:	eba3 0308 	sub.w	r3, r3, r8
 8022dba:	eba6 0608 	sub.w	r6, r6, r8
 8022dbe:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022dc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022dc6:	440e      	add	r6, r1
 8022dc8:	e797      	b.n	8022cfa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022dca:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022dce:	42a8      	cmp	r0, r5
 8022dd0:	d262      	bcs.n	8022e98 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022dd2:	4631      	mov	r1, r6
 8022dd4:	9b00      	ldr	r3, [sp, #0]
 8022dd6:	eb00 0b03 	add.w	fp, r0, r3
 8022dda:	4558      	cmp	r0, fp
 8022ddc:	d24e      	bcs.n	8022e7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022de2:	b12b      	cbz	r3, 8022df0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022de4:	2bff      	cmp	r3, #255	@ 0xff
 8022de6:	f8b4 e000 	ldrh.w	lr, [r4]
 8022dea:	d104      	bne.n	8022df6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022dec:	f8a0 e000 	strh.w	lr, [r0]
 8022df0:	3002      	adds	r0, #2
 8022df2:	3402      	adds	r4, #2
 8022df4:	e7f1      	b.n	8022dda <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022df6:	b29f      	uxth	r7, r3
 8022df8:	43db      	mvns	r3, r3
 8022dfa:	8802      	ldrh	r2, [r0, #0]
 8022dfc:	b2db      	uxtb	r3, r3
 8022dfe:	1216      	asrs	r6, r2, #8
 8022e00:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022e04:	fb16 f603 	smulbb	r6, r6, r3
 8022e08:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022e0c:	00d2      	lsls	r2, r2, #3
 8022e0e:	b2d2      	uxtb	r2, r2
 8022e10:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8022e14:	fb1a fa03 	smulbb	sl, sl, r3
 8022e18:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022e1c:	fb12 f303 	smulbb	r3, r2, r3
 8022e20:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022e24:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022e28:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022e2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022e30:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022e34:	fa5f fe8e 	uxtb.w	lr, lr
 8022e38:	fb06 a607 	mla	r6, r6, r7, sl
 8022e3c:	fb0e 3307 	mla	r3, lr, r7, r3
 8022e40:	fa1f fc8c 	uxth.w	ip, ip
 8022e44:	f10c 0201 	add.w	r2, ip, #1
 8022e48:	b2b6      	uxth	r6, r6
 8022e4a:	b29b      	uxth	r3, r3
 8022e4c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022e50:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8022e54:	f106 0a01 	add.w	sl, r6, #1
 8022e58:	f103 0c01 	add.w	ip, r3, #1
 8022e5c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022e60:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022e64:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022e68:	0976      	lsrs	r6, r6, #5
 8022e6a:	ea4c 0c02 	orr.w	ip, ip, r2
 8022e6e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022e72:	ea4c 0c06 	orr.w	ip, ip, r6
 8022e76:	f8a0 c000 	strh.w	ip, [r0]
 8022e7a:	e7b9      	b.n	8022df0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022e7c:	f8b9 3000 	ldrh.w	r3, [r9]
 8022e80:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022e84:	eba3 0308 	sub.w	r3, r3, r8
 8022e88:	eba6 0608 	sub.w	r6, r6, r8
 8022e8c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022e90:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022e94:	440e      	add	r6, r1
 8022e96:	e79a      	b.n	8022dce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022e98:	4b03      	ldr	r3, [pc, #12]	@ (8022ea8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022e9a:	6818      	ldr	r0, [r3, #0]
 8022e9c:	6803      	ldr	r3, [r0, #0]
 8022e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022ea0:	4798      	blx	r3
 8022ea2:	b007      	add	sp, #28
 8022ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ea8:	20011f2c 	.word	0x20011f2c
 8022eac:	20011f26 	.word	0x20011f26

08022eb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eb4:	b089      	sub	sp, #36	@ 0x24
 8022eb6:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8022eba:	4607      	mov	r7, r0
 8022ebc:	4688      	mov	r8, r1
 8022ebe:	4692      	mov	sl, r2
 8022ec0:	4699      	mov	r9, r3
 8022ec2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022ec4:	2e00      	cmp	r6, #0
 8022ec6:	d048      	beq.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022ec8:	4608      	mov	r0, r1
 8022eca:	f7fa f823 	bl	801cf14 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022ece:	4605      	mov	r5, r0
 8022ed0:	4640      	mov	r0, r8
 8022ed2:	f7fa f853 	bl	801cf7c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022ed6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022eda:	4640      	mov	r0, r8
 8022edc:	f8ad a008 	strh.w	sl, [sp, #8]
 8022ee0:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022ee4:	f8ad 900a 	strh.w	r9, [sp, #10]
 8022ee8:	f7fa f906 	bl	801d0f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022eec:	4605      	mov	r5, r0
 8022eee:	4640      	mov	r0, r8
 8022ef0:	f7fa f932 	bl	801d158 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022ef4:	4682      	mov	sl, r0
 8022ef6:	4640      	mov	r0, r8
 8022ef8:	f7fa f982 	bl	801d200 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022efc:	2810      	cmp	r0, #16
 8022efe:	d82c      	bhi.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022f00:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022f04:	00ba00ca 	.word	0x00ba00ca
 8022f08:	002b0011 	.word	0x002b0011
 8022f0c:	002b002b 	.word	0x002b002b
 8022f10:	002b002b 	.word	0x002b002b
 8022f14:	002b002b 	.word	0x002b002b
 8022f18:	00c1002b 	.word	0x00c1002b
 8022f1c:	002b002b 	.word	0x002b002b
 8022f20:	002b0180 	.word	0x002b0180
 8022f24:	0173      	.short	0x0173
 8022f26:	4bbc      	ldr	r3, [pc, #752]	@ (8023218 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8022f28:	6818      	ldr	r0, [r3, #0]
 8022f2a:	6803      	ldr	r3, [r0, #0]
 8022f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022f2e:	4798      	blx	r3
 8022f30:	2eff      	cmp	r6, #255	@ 0xff
 8022f32:	d101      	bne.n	8022f38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022f34:	0683      	lsls	r3, r0, #26
 8022f36:	d506      	bpl.n	8022f46 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8022f38:	4633      	mov	r3, r6
 8022f3a:	4622      	mov	r2, r4
 8022f3c:	a902      	add	r1, sp, #8
 8022f3e:	4628      	mov	r0, r5
 8022f40:	f7ff f8fc 	bl	802213c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022f44:	e009      	b.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8022f46:	4640      	mov	r0, r8
 8022f48:	f7fa f89e 	bl	801d088 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022f4c:	b940      	cbnz	r0, 8022f60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8022f4e:	4623      	mov	r3, r4
 8022f50:	aa02      	add	r2, sp, #8
 8022f52:	4629      	mov	r1, r5
 8022f54:	4638      	mov	r0, r7
 8022f56:	f7ff f9d7 	bl	8022308 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022f5a:	b009      	add	sp, #36	@ 0x24
 8022f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f60:	f10d 0918 	add.w	r9, sp, #24
 8022f64:	4641      	mov	r1, r8
 8022f66:	4648      	mov	r0, r9
 8022f68:	f10d 0810 	add.w	r8, sp, #16
 8022f6c:	f7fa f83a 	bl	801cfe4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022f70:	e899 0003 	ldmia.w	r9, {r0, r1}
 8022f74:	e888 0003 	stmia.w	r8, {r0, r1}
 8022f78:	4640      	mov	r0, r8
 8022f7a:	4621      	mov	r1, r4
 8022f7c:	f7f1 fc42 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 8022f80:	4640      	mov	r0, r8
 8022f82:	f7f1 fc82 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 8022f86:	2800      	cmp	r0, #0
 8022f88:	d1d6      	bne.n	8022f38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8022f8a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022f8e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022f92:	4293      	cmp	r3, r2
 8022f94:	dd12      	ble.n	8022fbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8022f96:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022f9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022f9e:	1a9b      	subs	r3, r3, r2
 8022fa0:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022fa4:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022fa8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022fac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022fb0:	464a      	mov	r2, r9
 8022fb2:	4633      	mov	r3, r6
 8022fb4:	a902      	add	r1, sp, #8
 8022fb6:	4628      	mov	r0, r5
 8022fb8:	f7ff f8c0 	bl	802213c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022fbc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022fc0:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022fc4:	4293      	cmp	r3, r2
 8022fc6:	dd12      	ble.n	8022fee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8022fc8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022fcc:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022fd0:	1a9b      	subs	r3, r3, r2
 8022fd2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022fd6:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022fda:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022fde:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022fe2:	23ff      	movs	r3, #255	@ 0xff
 8022fe4:	464a      	mov	r2, r9
 8022fe6:	a902      	add	r1, sp, #8
 8022fe8:	4628      	mov	r0, r5
 8022fea:	f7ff f8a7 	bl	802213c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022fee:	4643      	mov	r3, r8
 8022ff0:	aa02      	add	r2, sp, #8
 8022ff2:	4629      	mov	r1, r5
 8022ff4:	4638      	mov	r0, r7
 8022ff6:	f7ff f987 	bl	8022308 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022ffa:	88a2      	ldrh	r2, [r4, #4]
 8022ffc:	8823      	ldrh	r3, [r4, #0]
 8022ffe:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023002:	4413      	add	r3, r2
 8023004:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023008:	b29b      	uxth	r3, r3
 802300a:	440a      	add	r2, r1
 802300c:	b292      	uxth	r2, r2
 802300e:	b211      	sxth	r1, r2
 8023010:	b218      	sxth	r0, r3
 8023012:	4288      	cmp	r0, r1
 8023014:	dd12      	ble.n	802303c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8023016:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802301a:	1a9b      	subs	r3, r3, r2
 802301c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023020:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023024:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023028:	f8ad 001e 	strh.w	r0, [sp, #30]
 802302c:	23ff      	movs	r3, #255	@ 0xff
 802302e:	464a      	mov	r2, r9
 8023030:	a902      	add	r1, sp, #8
 8023032:	4628      	mov	r0, r5
 8023034:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023038:	f7ff f880 	bl	802213c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802303c:	88e2      	ldrh	r2, [r4, #6]
 802303e:	8863      	ldrh	r3, [r4, #2]
 8023040:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023044:	4413      	add	r3, r2
 8023046:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802304a:	b29b      	uxth	r3, r3
 802304c:	440a      	add	r2, r1
 802304e:	b292      	uxth	r2, r2
 8023050:	b211      	sxth	r1, r2
 8023052:	b218      	sxth	r0, r3
 8023054:	4288      	cmp	r0, r1
 8023056:	dd80      	ble.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023058:	f9b4 6000 	ldrsh.w	r6, [r4]
 802305c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023060:	1a9b      	subs	r3, r3, r2
 8023062:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023066:	f8ad 6018 	strh.w	r6, [sp, #24]
 802306a:	f8ad 101a 	strh.w	r1, [sp, #26]
 802306e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023072:	23ff      	movs	r3, #255	@ 0xff
 8023074:	464a      	mov	r2, r9
 8023076:	e761      	b.n	8022f3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8023078:	4633      	mov	r3, r6
 802307a:	4622      	mov	r2, r4
 802307c:	a902      	add	r1, sp, #8
 802307e:	4628      	mov	r0, r5
 8023080:	f7ff f9b2 	bl	80223e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023084:	e769      	b.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023086:	e9cd 4600 	strd	r4, r6, [sp]
 802308a:	ab02      	add	r3, sp, #8
 802308c:	4652      	mov	r2, sl
 802308e:	4629      	mov	r1, r5
 8023090:	4638      	mov	r0, r7
 8023092:	f7ff fd89 	bl	8022ba8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023096:	e760      	b.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023098:	4640      	mov	r0, r8
 802309a:	f7f9 fff5 	bl	801d088 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802309e:	b948      	cbnz	r0, 80230b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 80230a0:	683b      	ldr	r3, [r7, #0]
 80230a2:	e9cd 6000 	strd	r6, r0, [sp]
 80230a6:	aa02      	add	r2, sp, #8
 80230a8:	68de      	ldr	r6, [r3, #12]
 80230aa:	4629      	mov	r1, r5
 80230ac:	4623      	mov	r3, r4
 80230ae:	4638      	mov	r0, r7
 80230b0:	47b0      	blx	r6
 80230b2:	e752      	b.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80230b4:	f10d 0918 	add.w	r9, sp, #24
 80230b8:	4641      	mov	r1, r8
 80230ba:	4648      	mov	r0, r9
 80230bc:	f10d 0810 	add.w	r8, sp, #16
 80230c0:	f7f9 ff90 	bl	801cfe4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80230c4:	e899 0003 	ldmia.w	r9, {r0, r1}
 80230c8:	e888 0003 	stmia.w	r8, {r0, r1}
 80230cc:	4640      	mov	r0, r8
 80230ce:	4621      	mov	r1, r4
 80230d0:	f7f1 fb98 	bl	8014804 <_ZN8touchgfx4RectaNERKS0_>
 80230d4:	4640      	mov	r0, r8
 80230d6:	f7f1 fbd8 	bl	801488a <_ZNK8touchgfx4Rect7isEmptyEv>
 80230da:	b138      	cbz	r0, 80230ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 80230dc:	4623      	mov	r3, r4
 80230de:	9600      	str	r6, [sp, #0]
 80230e0:	aa02      	add	r2, sp, #8
 80230e2:	4651      	mov	r1, sl
 80230e4:	4628      	mov	r0, r5
 80230e6:	f7ff fdbd 	bl	8022c64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80230ea:	e736      	b.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80230ec:	683b      	ldr	r3, [r7, #0]
 80230ee:	e9cd 6000 	strd	r6, r0, [sp]
 80230f2:	aa02      	add	r2, sp, #8
 80230f4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80230f8:	4629      	mov	r1, r5
 80230fa:	4643      	mov	r3, r8
 80230fc:	4638      	mov	r0, r7
 80230fe:	47d8      	blx	fp
 8023100:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023104:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023108:	4293      	cmp	r3, r2
 802310a:	dd13      	ble.n	8023134 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 802310c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023110:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023114:	1a9b      	subs	r3, r3, r2
 8023116:	f8ad 0018 	strh.w	r0, [sp, #24]
 802311a:	f8ad 201a 	strh.w	r2, [sp, #26]
 802311e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023122:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023126:	9600      	str	r6, [sp, #0]
 8023128:	464b      	mov	r3, r9
 802312a:	aa02      	add	r2, sp, #8
 802312c:	4651      	mov	r1, sl
 802312e:	4628      	mov	r0, r5
 8023130:	f7ff fd98 	bl	8022c64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023134:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023138:	f9b4 2000 	ldrsh.w	r2, [r4]
 802313c:	4293      	cmp	r3, r2
 802313e:	dd13      	ble.n	8023168 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8023140:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023144:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023148:	1a9b      	subs	r3, r3, r2
 802314a:	f8ad 2018 	strh.w	r2, [sp, #24]
 802314e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023152:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023156:	f8ad 101e 	strh.w	r1, [sp, #30]
 802315a:	9600      	str	r6, [sp, #0]
 802315c:	464b      	mov	r3, r9
 802315e:	aa02      	add	r2, sp, #8
 8023160:	4651      	mov	r1, sl
 8023162:	4628      	mov	r0, r5
 8023164:	f7ff fd7e 	bl	8022c64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023168:	88a2      	ldrh	r2, [r4, #4]
 802316a:	8823      	ldrh	r3, [r4, #0]
 802316c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023170:	4413      	add	r3, r2
 8023172:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023176:	b29b      	uxth	r3, r3
 8023178:	440a      	add	r2, r1
 802317a:	b292      	uxth	r2, r2
 802317c:	b211      	sxth	r1, r2
 802317e:	b218      	sxth	r0, r3
 8023180:	4288      	cmp	r0, r1
 8023182:	dd13      	ble.n	80231ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8023184:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023188:	1a9b      	subs	r3, r3, r2
 802318a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 802318e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023192:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023196:	f8ad 001e 	strh.w	r0, [sp, #30]
 802319a:	9600      	str	r6, [sp, #0]
 802319c:	464b      	mov	r3, r9
 802319e:	aa02      	add	r2, sp, #8
 80231a0:	4651      	mov	r1, sl
 80231a2:	4628      	mov	r0, r5
 80231a4:	f8ad 701a 	strh.w	r7, [sp, #26]
 80231a8:	f7ff fd5c 	bl	8022c64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80231ac:	88e2      	ldrh	r2, [r4, #6]
 80231ae:	8863      	ldrh	r3, [r4, #2]
 80231b0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80231b4:	4413      	add	r3, r2
 80231b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80231ba:	b29b      	uxth	r3, r3
 80231bc:	440a      	add	r2, r1
 80231be:	b292      	uxth	r2, r2
 80231c0:	b211      	sxth	r1, r2
 80231c2:	b218      	sxth	r0, r3
 80231c4:	4288      	cmp	r0, r1
 80231c6:	f77f aec8 	ble.w	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80231ca:	f9b4 7000 	ldrsh.w	r7, [r4]
 80231ce:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80231d2:	1a9b      	subs	r3, r3, r2
 80231d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80231d8:	f8ad 7018 	strh.w	r7, [sp, #24]
 80231dc:	f8ad 101a 	strh.w	r1, [sp, #26]
 80231e0:	f8ad 001c 	strh.w	r0, [sp, #28]
 80231e4:	9600      	str	r6, [sp, #0]
 80231e6:	464b      	mov	r3, r9
 80231e8:	e77a      	b.n	80230e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80231ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80231ee:	2800      	cmp	r0, #0
 80231f0:	f43f aeb3 	beq.w	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80231f4:	6803      	ldr	r3, [r0, #0]
 80231f6:	9600      	str	r6, [sp, #0]
 80231f8:	68de      	ldr	r6, [r3, #12]
 80231fa:	4623      	mov	r3, r4
 80231fc:	aa02      	add	r2, sp, #8
 80231fe:	4629      	mov	r1, r5
 8023200:	47b0      	blx	r6
 8023202:	e6aa      	b.n	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023204:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023208:	2800      	cmp	r0, #0
 802320a:	f43f aea6 	beq.w	8022f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 802320e:	6803      	ldr	r3, [r0, #0]
 8023210:	9600      	str	r6, [sp, #0]
 8023212:	689e      	ldr	r6, [r3, #8]
 8023214:	e7f1      	b.n	80231fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8023216:	bf00      	nop
 8023218:	20011f2c 	.word	0x20011f2c

0802321c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 802321c:	b180      	cbz	r0, 8023240 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 802321e:	2903      	cmp	r1, #3
 8023220:	d81c      	bhi.n	802325c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023222:	e8df f001 	tbb	[pc, r1]
 8023226:	1d02      	.short	0x1d02
 8023228:	1f08      	.short	0x1f08
 802322a:	4b10      	ldr	r3, [pc, #64]	@ (802326c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802322c:	8818      	ldrh	r0, [r3, #0]
 802322e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023232:	4240      	negs	r0, r0
 8023234:	4770      	bx	lr
 8023236:	4b0d      	ldr	r3, [pc, #52]	@ (802326c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023238:	8818      	ldrh	r0, [r3, #0]
 802323a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802323e:	4770      	bx	lr
 8023240:	2903      	cmp	r1, #3
 8023242:	d80b      	bhi.n	802325c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023244:	a301      	add	r3, pc, #4	@ (adr r3, 802324c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8023246:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802324a:	bf00      	nop
 802324c:	08023261 	.word	0x08023261
 8023250:	08023237 	.word	0x08023237
 8023254:	08023265 	.word	0x08023265
 8023258:	0802322b 	.word	0x0802322b
 802325c:	2000      	movs	r0, #0
 802325e:	4770      	bx	lr
 8023260:	2001      	movs	r0, #1
 8023262:	4770      	bx	lr
 8023264:	f04f 30ff 	mov.w	r0, #4294967295
 8023268:	4770      	bx	lr
 802326a:	bf00      	nop
 802326c:	20011f26 	.word	0x20011f26

08023270 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023270:	b180      	cbz	r0, 8023294 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8023272:	2903      	cmp	r1, #3
 8023274:	d81c      	bhi.n	80232b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023276:	e8df f001 	tbb	[pc, r1]
 802327a:	021d      	.short	0x021d
 802327c:	071f      	.short	0x071f
 802327e:	4b10      	ldr	r3, [pc, #64]	@ (80232c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023280:	8818      	ldrh	r0, [r3, #0]
 8023282:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023286:	4770      	bx	lr
 8023288:	4b0d      	ldr	r3, [pc, #52]	@ (80232c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802328a:	8818      	ldrh	r0, [r3, #0]
 802328c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023290:	4240      	negs	r0, r0
 8023292:	4770      	bx	lr
 8023294:	2903      	cmp	r1, #3
 8023296:	d80b      	bhi.n	80232b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023298:	a301      	add	r3, pc, #4	@ (adr r3, 80232a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 802329a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802329e:	bf00      	nop
 80232a0:	0802327f 	.word	0x0802327f
 80232a4:	080232b9 	.word	0x080232b9
 80232a8:	08023289 	.word	0x08023289
 80232ac:	080232b5 	.word	0x080232b5
 80232b0:	2000      	movs	r0, #0
 80232b2:	4770      	bx	lr
 80232b4:	2001      	movs	r0, #1
 80232b6:	4770      	bx	lr
 80232b8:	f04f 30ff 	mov.w	r0, #4294967295
 80232bc:	4770      	bx	lr
 80232be:	bf00      	nop
 80232c0:	20011f26 	.word	0x20011f26

080232c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80232c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c8:	b099      	sub	sp, #100	@ 0x64
 80232ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80232cc:	a914      	add	r1, sp, #80	@ 0x50
 80232ce:	e881 000c 	stmia.w	r1, {r2, r3}
 80232d2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 80232d6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80232da:	f891 900d 	ldrb.w	r9, [r1, #13]
 80232de:	9309      	str	r3, [sp, #36]	@ 0x24
 80232e0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80232e4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80232e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80232ea:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80232ee:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 80232f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80232f4:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 80232f8:	798f      	ldrb	r7, [r1, #6]
 80232fa:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 80232fe:	431f      	orrs	r7, r3
 8023300:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8023304:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8023308:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 802330c:	f000 8194 	beq.w	8023638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8023310:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023314:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8023318:	f891 9007 	ldrb.w	r9, [r1, #7]
 802331c:	ea59 0903 	orrs.w	r9, r9, r3
 8023320:	f000 818a 	beq.w	8023638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8023324:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023328:	b29b      	uxth	r3, r3
 802332a:	2d00      	cmp	r5, #0
 802332c:	f000 812f 	beq.w	802358e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 8023330:	1aed      	subs	r5, r5, r3
 8023332:	b2ad      	uxth	r5, r5
 8023334:	042b      	lsls	r3, r5, #16
 8023336:	d502      	bpl.n	802333e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8023338:	1b64      	subs	r4, r4, r5
 802333a:	2500      	movs	r5, #0
 802333c:	b224      	sxth	r4, r4
 802333e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023342:	a814      	add	r0, sp, #80	@ 0x50
 8023344:	428c      	cmp	r4, r1
 8023346:	b28b      	uxth	r3, r1
 8023348:	bfbf      	itttt	lt
 802334a:	18ed      	addlt	r5, r5, r3
 802334c:	1b2c      	sublt	r4, r5, r4
 802334e:	b2a5      	uxthlt	r5, r4
 8023350:	460c      	movlt	r4, r1
 8023352:	8891      	ldrh	r1, [r2, #4]
 8023354:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8023358:	440b      	add	r3, r1
 802335a:	b21b      	sxth	r3, r3
 802335c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802335e:	88d3      	ldrh	r3, [r2, #6]
 8023360:	8852      	ldrh	r2, [r2, #2]
 8023362:	4621      	mov	r1, r4
 8023364:	4413      	add	r3, r2
 8023366:	b21b      	sxth	r3, r3
 8023368:	930d      	str	r3, [sp, #52]	@ 0x34
 802336a:	4bbd      	ldr	r3, [pc, #756]	@ (8023660 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 802336c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802336e:	f893 b000 	ldrb.w	fp, [r3]
 8023372:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023376:	f1dc 0300 	rsbs	r3, ip, #0
 802337a:	eb43 030c 	adc.w	r3, r3, ip
 802337e:	930e      	str	r3, [sp, #56]	@ 0x38
 8023380:	4653      	mov	r3, sl
 8023382:	f7f6 f9aa 	bl	80196da <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023386:	4621      	mov	r1, r4
 8023388:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 802338c:	4653      	mov	r3, sl
 802338e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023390:	a814      	add	r0, sp, #80	@ 0x50
 8023392:	f7f6 f9bf 	bl	8019714 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023396:	a918      	add	r1, sp, #96	@ 0x60
 8023398:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802339c:	a817      	add	r0, sp, #92	@ 0x5c
 802339e:	f7f6 fae5 	bl	801996c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80233a2:	f1ba 0f00 	cmp.w	sl, #0
 80233a6:	f040 80f5 	bne.w	8023594 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 80233aa:	f1bb 0f01 	cmp.w	fp, #1
 80233ae:	f040 80f9 	bne.w	80235a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 80233b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	f040 8144 	bne.w	8023642 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 80233ba:	b2ba      	uxth	r2, r7
 80233bc:	b905      	cbnz	r5, 80233c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80233be:	b16e      	cbz	r6, 80233dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80233c0:	4631      	mov	r1, r6
 80233c2:	fb06 5302 	mla	r3, r6, r2, r5
 80233c6:	fb08 f303 	mul.w	r3, r8, r3
 80233ca:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80233cc:	f003 0607 	and.w	r6, r3, #7
 80233d0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80233d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80233d6:	eba9 0301 	sub.w	r3, r9, r1
 80233da:	930a      	str	r3, [sp, #40]	@ 0x28
 80233dc:	4651      	mov	r1, sl
 80233de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80233e0:	f7ff ff1c 	bl	802321c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80233e4:	4681      	mov	r9, r0
 80233e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80233e8:	f7ff ff42 	bl	8023270 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80233ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80233ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80233f0:	4683      	mov	fp, r0
 80233f2:	eba3 0a01 	sub.w	sl, r3, r1
 80233f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80233f8:	459a      	cmp	sl, r3
 80233fa:	bfa8      	it	ge
 80233fc:	469a      	movge	sl, r3
 80233fe:	f1ba 0f00 	cmp.w	sl, #0
 8023402:	f340 8119 	ble.w	8023638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8023406:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023408:	1b64      	subs	r4, r4, r5
 802340a:	1b1c      	subs	r4, r3, r4
 802340c:	42bc      	cmp	r4, r7
 802340e:	bfd4      	ite	le
 8023410:	ebc5 0504 	rsble	r5, r5, r4
 8023414:	ebc5 0507 	rsbgt	r5, r5, r7
 8023418:	2d00      	cmp	r5, #0
 802341a:	f340 810d 	ble.w	8023638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 802341e:	1b52      	subs	r2, r2, r5
 8023420:	fb08 f302 	mul.w	r3, r8, r2
 8023424:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023428:	2b00      	cmp	r3, #0
 802342a:	f040 8115 	bne.w	8023658 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 802342e:	4b8d      	ldr	r3, [pc, #564]	@ (8023664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8023430:	6818      	ldr	r0, [r3, #0]
 8023432:	6803      	ldr	r3, [r0, #0]
 8023434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023436:	4798      	blx	r3
 8023438:	2301      	movs	r3, #1
 802343a:	fa03 f308 	lsl.w	r3, r3, r8
 802343e:	4a8a      	ldr	r2, [pc, #552]	@ (8023668 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8023440:	3b01      	subs	r3, #1
 8023442:	b2db      	uxtb	r3, r3
 8023444:	8811      	ldrh	r1, [r2, #0]
 8023446:	930e      	str	r3, [sp, #56]	@ 0x38
 8023448:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 802344c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8023450:	fb01 2303 	mla	r3, r1, r3, r2
 8023454:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023458:	930a      	str	r3, [sp, #40]	@ 0x28
 802345a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802345c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023462:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023464:	0a19      	lsrs	r1, r3, #8
 8023466:	b2cb      	uxtb	r3, r1
 8023468:	9312      	str	r3, [sp, #72]	@ 0x48
 802346a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802346c:	b2db      	uxtb	r3, r3
 802346e:	9311      	str	r3, [sp, #68]	@ 0x44
 8023470:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023472:	095a      	lsrs	r2, r3, #5
 8023474:	4b7d      	ldr	r3, [pc, #500]	@ (802366c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023476:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802347a:	400b      	ands	r3, r1
 802347c:	4313      	orrs	r3, r2
 802347e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8023480:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023484:	4313      	orrs	r3, r2
 8023486:	b29b      	uxth	r3, r3
 8023488:	9310      	str	r3, [sp, #64]	@ 0x40
 802348a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802348c:	781a      	ldrb	r2, [r3, #0]
 802348e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8023492:	fb05 b919 	mls	r9, r5, r9, fp
 8023496:	fb03 fb05 	mul.w	fp, r3, r5
 802349a:	4132      	asrs	r2, r6
 802349c:	b2d2      	uxtb	r2, r2
 802349e:	930d      	str	r3, [sp, #52]	@ 0x34
 80234a0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80234a4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80234a8:	f0c0 80f3 	bcc.w	8023692 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 80234ac:	46ae      	mov	lr, r5
 80234ae:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 80234b2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80234b6:	f0c0 80db 	bcc.w	8023670 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80234ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80234bc:	4013      	ands	r3, r2
 80234be:	d055      	beq.n	802356c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80234c0:	20ff      	movs	r0, #255	@ 0xff
 80234c2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80234c4:	fb90 f1f1 	sdiv	r1, r0, r1
 80234c8:	434b      	muls	r3, r1
 80234ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80234cc:	dd03      	ble.n	80234d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80234ce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80234d0:	4281      	cmp	r1, r0
 80234d2:	f000 80c3 	beq.w	802365c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80234d6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80234d8:	f8bc 4000 	ldrh.w	r4, [ip]
 80234dc:	fb11 f303 	smulbb	r3, r1, r3
 80234e0:	b29b      	uxth	r3, r3
 80234e2:	1c59      	adds	r1, r3, #1
 80234e4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80234e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80234ec:	b29f      	uxth	r7, r3
 80234ee:	43db      	mvns	r3, r3
 80234f0:	b2db      	uxtb	r3, r3
 80234f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80234f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80234f6:	1220      	asrs	r0, r4, #8
 80234f8:	fb13 f907 	smulbb	r9, r3, r7
 80234fc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8023500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023502:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023506:	fb00 9003 	mla	r0, r0, r3, r9
 802350a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802350c:	10e1      	asrs	r1, r4, #3
 802350e:	fb13 f907 	smulbb	r9, r3, r7
 8023512:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023518:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802351c:	fb01 9103 	mla	r1, r1, r3, r9
 8023520:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023522:	00e4      	lsls	r4, r4, #3
 8023524:	fb13 f707 	smulbb	r7, r3, r7
 8023528:	b2e4      	uxtb	r4, r4
 802352a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802352c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8023530:	fb04 7403 	mla	r4, r4, r3, r7
 8023534:	b280      	uxth	r0, r0
 8023536:	b2a4      	uxth	r4, r4
 8023538:	1c43      	adds	r3, r0, #1
 802353a:	f104 0901 	add.w	r9, r4, #1
 802353e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023542:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023546:	b289      	uxth	r1, r1
 8023548:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802354c:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8023550:	ea49 0000 	orr.w	r0, r9, r0
 8023554:	f101 0901 	add.w	r9, r1, #1
 8023558:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 802355c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023560:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8023564:	ea40 0009 	orr.w	r0, r0, r9
 8023568:	f8ac 0000 	strh.w	r0, [ip]
 802356c:	4446      	add	r6, r8
 802356e:	b2b6      	uxth	r6, r6
 8023570:	2e07      	cmp	r6, #7
 8023572:	bf89      	itett	hi
 8023574:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8023576:	fa42 f208 	asrls.w	r2, r2, r8
 802357a:	785a      	ldrbhi	r2, [r3, #1]
 802357c:	3301      	addhi	r3, #1
 802357e:	bf88      	it	hi
 8023580:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8023582:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023584:	bf94      	ite	ls
 8023586:	b2d2      	uxtbls	r2, r2
 8023588:	2600      	movhi	r6, #0
 802358a:	449c      	add	ip, r3
 802358c:	e791      	b.n	80234b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 802358e:	441c      	add	r4, r3
 8023590:	b224      	sxth	r4, r4
 8023592:	e6d4      	b.n	802333e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8023594:	f1ba 0f01 	cmp.w	sl, #1
 8023598:	f47f af0b 	bne.w	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802359c:	f1bb 0f01 	cmp.w	fp, #1
 80235a0:	f47f af07 	bne.w	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80235a4:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8023664 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 80235a8:	f8db 0000 	ldr.w	r0, [fp]
 80235ac:	6803      	ldr	r3, [r0, #0]
 80235ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80235b0:	4798      	blx	r3
 80235b2:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80235b6:	465a      	mov	r2, fp
 80235b8:	d006      	beq.n	80235c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 80235ba:	f1b8 0f04 	cmp.w	r8, #4
 80235be:	d13e      	bne.n	802363e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 80235c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80235c2:	3300      	adds	r3, #0
 80235c4:	bf18      	it	ne
 80235c6:	2301      	movne	r3, #1
 80235c8:	0580      	lsls	r0, r0, #22
 80235ca:	d56b      	bpl.n	80236a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 80235cc:	f1b8 0f08 	cmp.w	r8, #8
 80235d0:	d168      	bne.n	80236a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	bf0c      	ite	eq
 80235d6:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80235da:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80235de:	2d00      	cmp	r5, #0
 80235e0:	f47f aee7 	bne.w	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80235e4:	2e00      	cmp	r6, #0
 80235e6:	f47f aee4 	bne.w	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80235ea:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80235ec:	19e3      	adds	r3, r4, r7
 80235ee:	4283      	cmp	r3, r0
 80235f0:	f73f aedf 	bgt.w	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80235f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80235f8:	444b      	add	r3, r9
 80235fa:	4283      	cmp	r3, r0
 80235fc:	f73f aed9 	bgt.w	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8023600:	2500      	movs	r5, #0
 8023602:	6810      	ldr	r0, [r2, #0]
 8023604:	b2bf      	uxth	r7, r7
 8023606:	6804      	ldr	r4, [r0, #0]
 8023608:	f1b8 0f08 	cmp.w	r8, #8
 802360c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8023610:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023612:	bf1c      	itt	ne
 8023614:	3701      	addne	r7, #1
 8023616:	f027 0701 	bicne.w	r7, r7, #1
 802361a:	9104      	str	r1, [sp, #16]
 802361c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802361e:	bf18      	it	ne
 8023620:	b2bf      	uxthne	r7, r7
 8023622:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8023626:	e9cd 7900 	strd	r7, r9, [sp]
 802362a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 802362e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8023632:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8023634:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023636:	47a0      	blx	r4
 8023638:	b019      	add	sp, #100	@ 0x64
 802363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802363e:	2300      	movs	r3, #0
 8023640:	e7c2      	b.n	80235c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8023642:	2208      	movs	r2, #8
 8023644:	fb92 f3f8 	sdiv	r3, r2, r8
 8023648:	1e5a      	subs	r2, r3, #1
 802364a:	443a      	add	r2, r7
 802364c:	fb92 f2f3 	sdiv	r2, r2, r3
 8023650:	fb12 f203 	smulbb	r2, r2, r3
 8023654:	b292      	uxth	r2, r2
 8023656:	e6b1      	b.n	80233bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8023658:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802365a:	e6ed      	b.n	8023438 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802365c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802365e:	e783      	b.n	8023568 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8023660:	20011f24 	.word	0x20011f24
 8023664:	20011f2c 	.word	0x20011f2c
 8023668:	20011f26 	.word	0x20011f26
 802366c:	00fff800 	.word	0x00fff800
 8023670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023672:	b153      	cbz	r3, 802368a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 8023674:	441e      	add	r6, r3
 8023676:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023678:	b2b6      	uxth	r6, r6
 802367a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802367e:	781a      	ldrb	r2, [r3, #0]
 8023680:	f006 0607 	and.w	r6, r6, #7
 8023684:	4132      	asrs	r2, r6
 8023686:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023688:	b2d2      	uxtb	r2, r2
 802368a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802368c:	445b      	add	r3, fp
 802368e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023690:	e708      	b.n	80234a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8023692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023694:	2b00      	cmp	r3, #0
 8023696:	d1cf      	bne.n	8023638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8023698:	4b05      	ldr	r3, [pc, #20]	@ (80236b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 802369a:	6818      	ldr	r0, [r3, #0]
 802369c:	6803      	ldr	r3, [r0, #0]
 802369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80236a0:	4798      	blx	r3
 80236a2:	e7c9      	b.n	8023638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	f43f ae84 	beq.w	80233b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80236aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80236ae:	e796      	b.n	80235de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 80236b0:	20011f2c 	.word	0x20011f2c

080236b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80236b4:	b538      	push	{r3, r4, r5, lr}
 80236b6:	4605      	mov	r5, r0
 80236b8:	4c13      	ldr	r4, [pc, #76]	@ (8023708 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 80236ba:	e8d4 3f8f 	ldab	r3, [r4]
 80236be:	07da      	lsls	r2, r3, #31
 80236c0:	d40b      	bmi.n	80236da <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 80236c2:	4620      	mov	r0, r4
 80236c4:	f008 f9cf 	bl	802ba66 <__cxa_guard_acquire>
 80236c8:	b138      	cbz	r0, 80236da <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 80236ca:	4620      	mov	r0, r4
 80236cc:	f008 f9d7 	bl	802ba7e <__cxa_guard_release>
 80236d0:	4a0e      	ldr	r2, [pc, #56]	@ (802370c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80236d2:	490f      	ldr	r1, [pc, #60]	@ (8023710 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80236d4:	480f      	ldr	r0, [pc, #60]	@ (8023714 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80236d6:	f008 f9bf 	bl	802ba58 <__aeabi_atexit>
 80236da:	4c0f      	ldr	r4, [pc, #60]	@ (8023718 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80236dc:	e8d4 3f8f 	ldab	r3, [r4]
 80236e0:	07db      	lsls	r3, r3, #31
 80236e2:	d40b      	bmi.n	80236fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 80236e4:	4620      	mov	r0, r4
 80236e6:	f008 f9be 	bl	802ba66 <__cxa_guard_acquire>
 80236ea:	b138      	cbz	r0, 80236fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 80236ec:	4620      	mov	r0, r4
 80236ee:	f008 f9c6 	bl	802ba7e <__cxa_guard_release>
 80236f2:	4a06      	ldr	r2, [pc, #24]	@ (802370c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80236f4:	4909      	ldr	r1, [pc, #36]	@ (802371c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80236f6:	480a      	ldr	r0, [pc, #40]	@ (8023720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80236f8:	f008 f9ae 	bl	802ba58 <__aeabi_atexit>
 80236fc:	4b05      	ldr	r3, [pc, #20]	@ (8023714 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80236fe:	616b      	str	r3, [r5, #20]
 8023700:	4b07      	ldr	r3, [pc, #28]	@ (8023720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8023702:	61ab      	str	r3, [r5, #24]
 8023704:	bd38      	pop	{r3, r4, r5, pc}
 8023706:	bf00      	nop
 8023708:	20012010 	.word	0x20012010
 802370c:	20000000 	.word	0x20000000
 8023710:	0801f877 	.word	0x0801f877
 8023714:	20000070 	.word	0x20000070
 8023718:	20012014 	.word	0x20012014
 802371c:	0801f875 	.word	0x0801f875
 8023720:	20000074 	.word	0x20000074

08023724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8023724:	b538      	push	{r3, r4, r5, lr}
 8023726:	4605      	mov	r5, r0
 8023728:	4c13      	ldr	r4, [pc, #76]	@ (8023778 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 802372a:	e8d4 3f8f 	ldab	r3, [r4]
 802372e:	07da      	lsls	r2, r3, #31
 8023730:	d40b      	bmi.n	802374a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 8023732:	4620      	mov	r0, r4
 8023734:	f008 f997 	bl	802ba66 <__cxa_guard_acquire>
 8023738:	b138      	cbz	r0, 802374a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 802373a:	4620      	mov	r0, r4
 802373c:	f008 f99f 	bl	802ba7e <__cxa_guard_release>
 8023740:	4a0e      	ldr	r2, [pc, #56]	@ (802377c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8023742:	490f      	ldr	r1, [pc, #60]	@ (8023780 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023744:	480f      	ldr	r0, [pc, #60]	@ (8023784 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8023746:	f008 f987 	bl	802ba58 <__aeabi_atexit>
 802374a:	4c0f      	ldr	r4, [pc, #60]	@ (8023788 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802374c:	e8d4 3f8f 	ldab	r3, [r4]
 8023750:	07db      	lsls	r3, r3, #31
 8023752:	d40b      	bmi.n	802376c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8023754:	4620      	mov	r0, r4
 8023756:	f008 f986 	bl	802ba66 <__cxa_guard_acquire>
 802375a:	b138      	cbz	r0, 802376c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 802375c:	4620      	mov	r0, r4
 802375e:	f008 f98e 	bl	802ba7e <__cxa_guard_release>
 8023762:	4a06      	ldr	r2, [pc, #24]	@ (802377c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8023764:	4909      	ldr	r1, [pc, #36]	@ (802378c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023766:	480a      	ldr	r0, [pc, #40]	@ (8023790 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8023768:	f008 f976 	bl	802ba58 <__aeabi_atexit>
 802376c:	4b05      	ldr	r3, [pc, #20]	@ (8023784 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802376e:	60eb      	str	r3, [r5, #12]
 8023770:	4b07      	ldr	r3, [pc, #28]	@ (8023790 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8023772:	612b      	str	r3, [r5, #16]
 8023774:	bd38      	pop	{r3, r4, r5, pc}
 8023776:	bf00      	nop
 8023778:	20011fe8 	.word	0x20011fe8
 802377c:	20000000 	.word	0x20000000
 8023780:	0801f87b 	.word	0x0801f87b
 8023784:	20000048 	.word	0x20000048
 8023788:	20011fec 	.word	0x20011fec
 802378c:	0801f879 	.word	0x0801f879
 8023790:	2000004c 	.word	0x2000004c

08023794 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8023794:	b510      	push	{r4, lr}
 8023796:	4604      	mov	r4, r0
 8023798:	f7ff ff8c 	bl	80236b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 802379c:	4620      	mov	r0, r4
 802379e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237a2:	f7ff bfbf 	b.w	8023724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080237a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80237a8:	b538      	push	{r3, r4, r5, lr}
 80237aa:	4605      	mov	r5, r0
 80237ac:	4c13      	ldr	r4, [pc, #76]	@ (80237fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 80237ae:	e8d4 3f8f 	ldab	r3, [r4]
 80237b2:	07da      	lsls	r2, r3, #31
 80237b4:	d40b      	bmi.n	80237ce <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 80237b6:	4620      	mov	r0, r4
 80237b8:	f008 f955 	bl	802ba66 <__cxa_guard_acquire>
 80237bc:	b138      	cbz	r0, 80237ce <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 80237be:	4620      	mov	r0, r4
 80237c0:	f008 f95d 	bl	802ba7e <__cxa_guard_release>
 80237c4:	4a0e      	ldr	r2, [pc, #56]	@ (8023800 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80237c6:	490f      	ldr	r1, [pc, #60]	@ (8023804 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80237c8:	480f      	ldr	r0, [pc, #60]	@ (8023808 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80237ca:	f008 f945 	bl	802ba58 <__aeabi_atexit>
 80237ce:	4c0f      	ldr	r4, [pc, #60]	@ (802380c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80237d0:	e8d4 3f8f 	ldab	r3, [r4]
 80237d4:	07db      	lsls	r3, r3, #31
 80237d6:	d40b      	bmi.n	80237f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 80237d8:	4620      	mov	r0, r4
 80237da:	f008 f944 	bl	802ba66 <__cxa_guard_acquire>
 80237de:	b138      	cbz	r0, 80237f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 80237e0:	4620      	mov	r0, r4
 80237e2:	f008 f94c 	bl	802ba7e <__cxa_guard_release>
 80237e6:	4a06      	ldr	r2, [pc, #24]	@ (8023800 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80237e8:	4909      	ldr	r1, [pc, #36]	@ (8023810 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80237ea:	480a      	ldr	r0, [pc, #40]	@ (8023814 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80237ec:	f008 f934 	bl	802ba58 <__aeabi_atexit>
 80237f0:	4b05      	ldr	r3, [pc, #20]	@ (8023808 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80237f2:	626b      	str	r3, [r5, #36]	@ 0x24
 80237f4:	4b07      	ldr	r3, [pc, #28]	@ (8023814 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80237f6:	62ab      	str	r3, [r5, #40]	@ 0x28
 80237f8:	bd38      	pop	{r3, r4, r5, pc}
 80237fa:	bf00      	nop
 80237fc:	20012018 	.word	0x20012018
 8023800:	20000000 	.word	0x20000000
 8023804:	0801f86f 	.word	0x0801f86f
 8023808:	20000078 	.word	0x20000078
 802380c:	2001201c 	.word	0x2001201c
 8023810:	0801f86d 	.word	0x0801f86d
 8023814:	2000007c 	.word	0x2000007c

08023818 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023818:	b538      	push	{r3, r4, r5, lr}
 802381a:	4605      	mov	r5, r0
 802381c:	4c13      	ldr	r4, [pc, #76]	@ (802386c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 802381e:	e8d4 3f8f 	ldab	r3, [r4]
 8023822:	07da      	lsls	r2, r3, #31
 8023824:	d40b      	bmi.n	802383e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 8023826:	4620      	mov	r0, r4
 8023828:	f008 f91d 	bl	802ba66 <__cxa_guard_acquire>
 802382c:	b138      	cbz	r0, 802383e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 802382e:	4620      	mov	r0, r4
 8023830:	f008 f925 	bl	802ba7e <__cxa_guard_release>
 8023834:	4a0e      	ldr	r2, [pc, #56]	@ (8023870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023836:	490f      	ldr	r1, [pc, #60]	@ (8023874 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023838:	480f      	ldr	r0, [pc, #60]	@ (8023878 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802383a:	f008 f90d 	bl	802ba58 <__aeabi_atexit>
 802383e:	4c0f      	ldr	r4, [pc, #60]	@ (802387c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023840:	e8d4 3f8f 	ldab	r3, [r4]
 8023844:	07db      	lsls	r3, r3, #31
 8023846:	d40b      	bmi.n	8023860 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8023848:	4620      	mov	r0, r4
 802384a:	f008 f90c 	bl	802ba66 <__cxa_guard_acquire>
 802384e:	b138      	cbz	r0, 8023860 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8023850:	4620      	mov	r0, r4
 8023852:	f008 f914 	bl	802ba7e <__cxa_guard_release>
 8023856:	4a06      	ldr	r2, [pc, #24]	@ (8023870 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023858:	4909      	ldr	r1, [pc, #36]	@ (8023880 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802385a:	480a      	ldr	r0, [pc, #40]	@ (8023884 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802385c:	f008 f8fc 	bl	802ba58 <__aeabi_atexit>
 8023860:	4b05      	ldr	r3, [pc, #20]	@ (8023878 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023862:	61eb      	str	r3, [r5, #28]
 8023864:	4b07      	ldr	r3, [pc, #28]	@ (8023884 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8023866:	622b      	str	r3, [r5, #32]
 8023868:	bd38      	pop	{r3, r4, r5, pc}
 802386a:	bf00      	nop
 802386c:	20011ff0 	.word	0x20011ff0
 8023870:	20000000 	.word	0x20000000
 8023874:	0801f873 	.word	0x0801f873
 8023878:	20000050 	.word	0x20000050
 802387c:	20011ff4 	.word	0x20011ff4
 8023880:	0801f871 	.word	0x0801f871
 8023884:	20000054 	.word	0x20000054

08023888 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8023888:	b510      	push	{r4, lr}
 802388a:	4604      	mov	r4, r0
 802388c:	f7ff ff8c 	bl	80237a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023890:	4620      	mov	r0, r4
 8023892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023896:	f7ff bfbf 	b.w	8023818 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802389c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802389c:	b538      	push	{r3, r4, r5, lr}
 802389e:	4605      	mov	r5, r0
 80238a0:	4c13      	ldr	r4, [pc, #76]	@ (80238f0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 80238a2:	e8d4 3f8f 	ldab	r3, [r4]
 80238a6:	07da      	lsls	r2, r3, #31
 80238a8:	d40b      	bmi.n	80238c2 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 80238aa:	4620      	mov	r0, r4
 80238ac:	f008 f8db 	bl	802ba66 <__cxa_guard_acquire>
 80238b0:	b138      	cbz	r0, 80238c2 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 80238b2:	4620      	mov	r0, r4
 80238b4:	f008 f8e3 	bl	802ba7e <__cxa_guard_release>
 80238b8:	4a0e      	ldr	r2, [pc, #56]	@ (80238f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80238ba:	490f      	ldr	r1, [pc, #60]	@ (80238f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80238bc:	480f      	ldr	r0, [pc, #60]	@ (80238fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80238be:	f008 f8cb 	bl	802ba58 <__aeabi_atexit>
 80238c2:	4c0f      	ldr	r4, [pc, #60]	@ (8023900 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80238c4:	e8d4 3f8f 	ldab	r3, [r4]
 80238c8:	07db      	lsls	r3, r3, #31
 80238ca:	d40b      	bmi.n	80238e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 80238cc:	4620      	mov	r0, r4
 80238ce:	f008 f8ca 	bl	802ba66 <__cxa_guard_acquire>
 80238d2:	b138      	cbz	r0, 80238e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 80238d4:	4620      	mov	r0, r4
 80238d6:	f008 f8d2 	bl	802ba7e <__cxa_guard_release>
 80238da:	4a06      	ldr	r2, [pc, #24]	@ (80238f4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80238dc:	4909      	ldr	r1, [pc, #36]	@ (8023904 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80238de:	480a      	ldr	r0, [pc, #40]	@ (8023908 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80238e0:	f008 f8ba 	bl	802ba58 <__aeabi_atexit>
 80238e4:	4b05      	ldr	r3, [pc, #20]	@ (80238fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80238e6:	636b      	str	r3, [r5, #52]	@ 0x34
 80238e8:	4b07      	ldr	r3, [pc, #28]	@ (8023908 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80238ea:	63ab      	str	r3, [r5, #56]	@ 0x38
 80238ec:	bd38      	pop	{r3, r4, r5, pc}
 80238ee:	bf00      	nop
 80238f0:	20012028 	.word	0x20012028
 80238f4:	20000000 	.word	0x20000000
 80238f8:	0801f867 	.word	0x0801f867
 80238fc:	20000088 	.word	0x20000088
 8023900:	2001202c 	.word	0x2001202c
 8023904:	0801f865 	.word	0x0801f865
 8023908:	2000008c 	.word	0x2000008c

0802390c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802390c:	b538      	push	{r3, r4, r5, lr}
 802390e:	4605      	mov	r5, r0
 8023910:	4c13      	ldr	r4, [pc, #76]	@ (8023960 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 8023912:	e8d4 3f8f 	ldab	r3, [r4]
 8023916:	07da      	lsls	r2, r3, #31
 8023918:	d40b      	bmi.n	8023932 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 802391a:	4620      	mov	r0, r4
 802391c:	f008 f8a3 	bl	802ba66 <__cxa_guard_acquire>
 8023920:	b138      	cbz	r0, 8023932 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 8023922:	4620      	mov	r0, r4
 8023924:	f008 f8ab 	bl	802ba7e <__cxa_guard_release>
 8023928:	4a0e      	ldr	r2, [pc, #56]	@ (8023964 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802392a:	490f      	ldr	r1, [pc, #60]	@ (8023968 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802392c:	480f      	ldr	r0, [pc, #60]	@ (802396c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802392e:	f008 f893 	bl	802ba58 <__aeabi_atexit>
 8023932:	4c0f      	ldr	r4, [pc, #60]	@ (8023970 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023934:	e8d4 3f8f 	ldab	r3, [r4]
 8023938:	07db      	lsls	r3, r3, #31
 802393a:	d40b      	bmi.n	8023954 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 802393c:	4620      	mov	r0, r4
 802393e:	f008 f892 	bl	802ba66 <__cxa_guard_acquire>
 8023942:	b138      	cbz	r0, 8023954 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8023944:	4620      	mov	r0, r4
 8023946:	f008 f89a 	bl	802ba7e <__cxa_guard_release>
 802394a:	4a06      	ldr	r2, [pc, #24]	@ (8023964 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802394c:	4909      	ldr	r1, [pc, #36]	@ (8023974 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802394e:	480a      	ldr	r0, [pc, #40]	@ (8023978 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023950:	f008 f882 	bl	802ba58 <__aeabi_atexit>
 8023954:	4b05      	ldr	r3, [pc, #20]	@ (802396c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023956:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023958:	4b07      	ldr	r3, [pc, #28]	@ (8023978 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802395a:	632b      	str	r3, [r5, #48]	@ 0x30
 802395c:	bd38      	pop	{r3, r4, r5, pc}
 802395e:	bf00      	nop
 8023960:	20011ff8 	.word	0x20011ff8
 8023964:	20000000 	.word	0x20000000
 8023968:	0801f86b 	.word	0x0801f86b
 802396c:	20000058 	.word	0x20000058
 8023970:	20011ffc 	.word	0x20011ffc
 8023974:	0801f869 	.word	0x0801f869
 8023978:	2000005c 	.word	0x2000005c

0802397c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 802397c:	b510      	push	{r4, lr}
 802397e:	4604      	mov	r4, r0
 8023980:	f7ff ff8c 	bl	802389c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023984:	4620      	mov	r0, r4
 8023986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802398a:	f7ff bfbf 	b.w	802390c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023990 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023990:	b538      	push	{r3, r4, r5, lr}
 8023992:	4605      	mov	r5, r0
 8023994:	4c13      	ldr	r4, [pc, #76]	@ (80239e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 8023996:	e8d4 3f8f 	ldab	r3, [r4]
 802399a:	07da      	lsls	r2, r3, #31
 802399c:	d40b      	bmi.n	80239b6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 802399e:	4620      	mov	r0, r4
 80239a0:	f008 f861 	bl	802ba66 <__cxa_guard_acquire>
 80239a4:	b138      	cbz	r0, 80239b6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 80239a6:	4620      	mov	r0, r4
 80239a8:	f008 f869 	bl	802ba7e <__cxa_guard_release>
 80239ac:	4a0e      	ldr	r2, [pc, #56]	@ (80239e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80239ae:	490f      	ldr	r1, [pc, #60]	@ (80239ec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80239b0:	480f      	ldr	r0, [pc, #60]	@ (80239f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80239b2:	f008 f851 	bl	802ba58 <__aeabi_atexit>
 80239b6:	4c0f      	ldr	r4, [pc, #60]	@ (80239f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80239b8:	e8d4 3f8f 	ldab	r3, [r4]
 80239bc:	07db      	lsls	r3, r3, #31
 80239be:	d40b      	bmi.n	80239d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 80239c0:	4620      	mov	r0, r4
 80239c2:	f008 f850 	bl	802ba66 <__cxa_guard_acquire>
 80239c6:	b138      	cbz	r0, 80239d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 80239c8:	4620      	mov	r0, r4
 80239ca:	f008 f858 	bl	802ba7e <__cxa_guard_release>
 80239ce:	4a06      	ldr	r2, [pc, #24]	@ (80239e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80239d0:	4909      	ldr	r1, [pc, #36]	@ (80239f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80239d2:	480a      	ldr	r0, [pc, #40]	@ (80239fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80239d4:	f008 f840 	bl	802ba58 <__aeabi_atexit>
 80239d8:	4b05      	ldr	r3, [pc, #20]	@ (80239f0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80239da:	656b      	str	r3, [r5, #84]	@ 0x54
 80239dc:	4b07      	ldr	r3, [pc, #28]	@ (80239fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80239de:	65ab      	str	r3, [r5, #88]	@ 0x58
 80239e0:	bd38      	pop	{r3, r4, r5, pc}
 80239e2:	bf00      	nop
 80239e4:	20012030 	.word	0x20012030
 80239e8:	20000000 	.word	0x20000000
 80239ec:	0801f857 	.word	0x0801f857
 80239f0:	20000090 	.word	0x20000090
 80239f4:	20012034 	.word	0x20012034
 80239f8:	0801f855 	.word	0x0801f855
 80239fc:	20000094 	.word	0x20000094

08023a00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8023a00:	b538      	push	{r3, r4, r5, lr}
 8023a02:	4605      	mov	r5, r0
 8023a04:	4c13      	ldr	r4, [pc, #76]	@ (8023a54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 8023a06:	e8d4 3f8f 	ldab	r3, [r4]
 8023a0a:	07da      	lsls	r2, r3, #31
 8023a0c:	d40b      	bmi.n	8023a26 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8023a0e:	4620      	mov	r0, r4
 8023a10:	f008 f829 	bl	802ba66 <__cxa_guard_acquire>
 8023a14:	b138      	cbz	r0, 8023a26 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8023a16:	4620      	mov	r0, r4
 8023a18:	f008 f831 	bl	802ba7e <__cxa_guard_release>
 8023a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8023a58 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023a1e:	490f      	ldr	r1, [pc, #60]	@ (8023a5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023a20:	480f      	ldr	r0, [pc, #60]	@ (8023a60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8023a22:	f008 f819 	bl	802ba58 <__aeabi_atexit>
 8023a26:	4c0f      	ldr	r4, [pc, #60]	@ (8023a64 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023a28:	e8d4 3f8f 	ldab	r3, [r4]
 8023a2c:	07db      	lsls	r3, r3, #31
 8023a2e:	d40b      	bmi.n	8023a48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8023a30:	4620      	mov	r0, r4
 8023a32:	f008 f818 	bl	802ba66 <__cxa_guard_acquire>
 8023a36:	b138      	cbz	r0, 8023a48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8023a38:	4620      	mov	r0, r4
 8023a3a:	f008 f820 	bl	802ba7e <__cxa_guard_release>
 8023a3e:	4a06      	ldr	r2, [pc, #24]	@ (8023a58 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023a40:	4909      	ldr	r1, [pc, #36]	@ (8023a68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8023a42:	480a      	ldr	r0, [pc, #40]	@ (8023a6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023a44:	f008 f808 	bl	802ba58 <__aeabi_atexit>
 8023a48:	4b05      	ldr	r3, [pc, #20]	@ (8023a60 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8023a4a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023a4c:	4b07      	ldr	r3, [pc, #28]	@ (8023a6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023a4e:	652b      	str	r3, [r5, #80]	@ 0x50
 8023a50:	bd38      	pop	{r3, r4, r5, pc}
 8023a52:	bf00      	nop
 8023a54:	20012038 	.word	0x20012038
 8023a58:	20000000 	.word	0x20000000
 8023a5c:	0801f85b 	.word	0x0801f85b
 8023a60:	20000098 	.word	0x20000098
 8023a64:	2001203c 	.word	0x2001203c
 8023a68:	0801f859 	.word	0x0801f859
 8023a6c:	2000009c 	.word	0x2000009c

08023a70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023a70:	b538      	push	{r3, r4, r5, lr}
 8023a72:	4605      	mov	r5, r0
 8023a74:	4c13      	ldr	r4, [pc, #76]	@ (8023ac4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 8023a76:	e8d4 3f8f 	ldab	r3, [r4]
 8023a7a:	07da      	lsls	r2, r3, #31
 8023a7c:	d40b      	bmi.n	8023a96 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8023a7e:	4620      	mov	r0, r4
 8023a80:	f007 fff1 	bl	802ba66 <__cxa_guard_acquire>
 8023a84:	b138      	cbz	r0, 8023a96 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8023a86:	4620      	mov	r0, r4
 8023a88:	f007 fff9 	bl	802ba7e <__cxa_guard_release>
 8023a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8023ac8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023a8e:	490f      	ldr	r1, [pc, #60]	@ (8023acc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023a90:	480f      	ldr	r0, [pc, #60]	@ (8023ad0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023a92:	f007 ffe1 	bl	802ba58 <__aeabi_atexit>
 8023a96:	4c0f      	ldr	r4, [pc, #60]	@ (8023ad4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023a98:	e8d4 3f8f 	ldab	r3, [r4]
 8023a9c:	07db      	lsls	r3, r3, #31
 8023a9e:	d40b      	bmi.n	8023ab8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8023aa0:	4620      	mov	r0, r4
 8023aa2:	f007 ffe0 	bl	802ba66 <__cxa_guard_acquire>
 8023aa6:	b138      	cbz	r0, 8023ab8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8023aa8:	4620      	mov	r0, r4
 8023aaa:	f007 ffe8 	bl	802ba7e <__cxa_guard_release>
 8023aae:	4a06      	ldr	r2, [pc, #24]	@ (8023ac8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023ab0:	4909      	ldr	r1, [pc, #36]	@ (8023ad8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8023ab2:	480a      	ldr	r0, [pc, #40]	@ (8023adc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023ab4:	f007 ffd0 	bl	802ba58 <__aeabi_atexit>
 8023ab8:	4b05      	ldr	r3, [pc, #20]	@ (8023ad0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023aba:	646b      	str	r3, [r5, #68]	@ 0x44
 8023abc:	4b07      	ldr	r3, [pc, #28]	@ (8023adc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023abe:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023ac0:	bd38      	pop	{r3, r4, r5, pc}
 8023ac2:	bf00      	nop
 8023ac4:	20012000 	.word	0x20012000
 8023ac8:	20000000 	.word	0x20000000
 8023acc:	0801f85f 	.word	0x0801f85f
 8023ad0:	20000060 	.word	0x20000060
 8023ad4:	20012004 	.word	0x20012004
 8023ad8:	0801f85d 	.word	0x0801f85d
 8023adc:	20000064 	.word	0x20000064

08023ae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023ae0:	b538      	push	{r3, r4, r5, lr}
 8023ae2:	4605      	mov	r5, r0
 8023ae4:	4c13      	ldr	r4, [pc, #76]	@ (8023b34 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 8023ae6:	e8d4 3f8f 	ldab	r3, [r4]
 8023aea:	07da      	lsls	r2, r3, #31
 8023aec:	d40b      	bmi.n	8023b06 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8023aee:	4620      	mov	r0, r4
 8023af0:	f007 ffb9 	bl	802ba66 <__cxa_guard_acquire>
 8023af4:	b138      	cbz	r0, 8023b06 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8023af6:	4620      	mov	r0, r4
 8023af8:	f007 ffc1 	bl	802ba7e <__cxa_guard_release>
 8023afc:	4a0e      	ldr	r2, [pc, #56]	@ (8023b38 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023afe:	490f      	ldr	r1, [pc, #60]	@ (8023b3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023b00:	480f      	ldr	r0, [pc, #60]	@ (8023b40 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023b02:	f007 ffa9 	bl	802ba58 <__aeabi_atexit>
 8023b06:	4c0f      	ldr	r4, [pc, #60]	@ (8023b44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023b08:	e8d4 3f8f 	ldab	r3, [r4]
 8023b0c:	07db      	lsls	r3, r3, #31
 8023b0e:	d40b      	bmi.n	8023b28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8023b10:	4620      	mov	r0, r4
 8023b12:	f007 ffa8 	bl	802ba66 <__cxa_guard_acquire>
 8023b16:	b138      	cbz	r0, 8023b28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8023b18:	4620      	mov	r0, r4
 8023b1a:	f007 ffb0 	bl	802ba7e <__cxa_guard_release>
 8023b1e:	4a06      	ldr	r2, [pc, #24]	@ (8023b38 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023b20:	4909      	ldr	r1, [pc, #36]	@ (8023b48 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8023b22:	480a      	ldr	r0, [pc, #40]	@ (8023b4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8023b24:	f007 ff98 	bl	802ba58 <__aeabi_atexit>
 8023b28:	4b05      	ldr	r3, [pc, #20]	@ (8023b40 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023b2a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023b2c:	4b07      	ldr	r3, [pc, #28]	@ (8023b4c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8023b2e:	642b      	str	r3, [r5, #64]	@ 0x40
 8023b30:	bd38      	pop	{r3, r4, r5, pc}
 8023b32:	bf00      	nop
 8023b34:	20012020 	.word	0x20012020
 8023b38:	20000000 	.word	0x20000000
 8023b3c:	0801f863 	.word	0x0801f863
 8023b40:	20000080 	.word	0x20000080
 8023b44:	20012024 	.word	0x20012024
 8023b48:	0801f861 	.word	0x0801f861
 8023b4c:	20000084 	.word	0x20000084

08023b50 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023b50:	b510      	push	{r4, lr}
 8023b52:	4604      	mov	r4, r0
 8023b54:	f7ff ff1c 	bl	8023990 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023b58:	4620      	mov	r0, r4
 8023b5a:	f7ff ff89 	bl	8023a70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023b5e:	4620      	mov	r0, r4
 8023b60:	f7ff ff4e 	bl	8023a00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8023b64:	4620      	mov	r0, r4
 8023b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b6a:	f7ff bfb9 	b.w	8023ae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023b70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023b70:	b538      	push	{r3, r4, r5, lr}
 8023b72:	4605      	mov	r5, r0
 8023b74:	4c13      	ldr	r4, [pc, #76]	@ (8023bc4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 8023b76:	e8d4 3f8f 	ldab	r3, [r4]
 8023b7a:	07da      	lsls	r2, r3, #31
 8023b7c:	d40b      	bmi.n	8023b96 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8023b7e:	4620      	mov	r0, r4
 8023b80:	f007 ff71 	bl	802ba66 <__cxa_guard_acquire>
 8023b84:	b138      	cbz	r0, 8023b96 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8023b86:	4620      	mov	r0, r4
 8023b88:	f007 ff79 	bl	802ba7e <__cxa_guard_release>
 8023b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8023bc8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023b8e:	490f      	ldr	r1, [pc, #60]	@ (8023bcc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023b90:	480f      	ldr	r0, [pc, #60]	@ (8023bd0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023b92:	f007 ff61 	bl	802ba58 <__aeabi_atexit>
 8023b96:	4c0f      	ldr	r4, [pc, #60]	@ (8023bd4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023b98:	e8d4 3f8f 	ldab	r3, [r4]
 8023b9c:	07db      	lsls	r3, r3, #31
 8023b9e:	d40b      	bmi.n	8023bb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8023ba0:	4620      	mov	r0, r4
 8023ba2:	f007 ff60 	bl	802ba66 <__cxa_guard_acquire>
 8023ba6:	b138      	cbz	r0, 8023bb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8023ba8:	4620      	mov	r0, r4
 8023baa:	f007 ff68 	bl	802ba7e <__cxa_guard_release>
 8023bae:	4a06      	ldr	r2, [pc, #24]	@ (8023bc8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023bb0:	4909      	ldr	r1, [pc, #36]	@ (8023bd8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023bb2:	480a      	ldr	r0, [pc, #40]	@ (8023bdc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023bb4:	f007 ff50 	bl	802ba58 <__aeabi_atexit>
 8023bb8:	4b05      	ldr	r3, [pc, #20]	@ (8023bd0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023bba:	666b      	str	r3, [r5, #100]	@ 0x64
 8023bbc:	4b07      	ldr	r3, [pc, #28]	@ (8023bdc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023bbe:	66ab      	str	r3, [r5, #104]	@ 0x68
 8023bc0:	bd38      	pop	{r3, r4, r5, pc}
 8023bc2:	bf00      	nop
 8023bc4:	20012008 	.word	0x20012008
 8023bc8:	20000000 	.word	0x20000000
 8023bcc:	0801f84f 	.word	0x0801f84f
 8023bd0:	20000068 	.word	0x20000068
 8023bd4:	2001200c 	.word	0x2001200c
 8023bd8:	0801f84d 	.word	0x0801f84d
 8023bdc:	2000006c 	.word	0x2000006c

08023be0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023be0:	b538      	push	{r3, r4, r5, lr}
 8023be2:	4605      	mov	r5, r0
 8023be4:	4c13      	ldr	r4, [pc, #76]	@ (8023c34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 8023be6:	e8d4 3f8f 	ldab	r3, [r4]
 8023bea:	07da      	lsls	r2, r3, #31
 8023bec:	d40b      	bmi.n	8023c06 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8023bee:	4620      	mov	r0, r4
 8023bf0:	f007 ff39 	bl	802ba66 <__cxa_guard_acquire>
 8023bf4:	b138      	cbz	r0, 8023c06 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8023bf6:	4620      	mov	r0, r4
 8023bf8:	f007 ff41 	bl	802ba7e <__cxa_guard_release>
 8023bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8023c38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023bfe:	490f      	ldr	r1, [pc, #60]	@ (8023c3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023c00:	480f      	ldr	r0, [pc, #60]	@ (8023c40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023c02:	f007 ff29 	bl	802ba58 <__aeabi_atexit>
 8023c06:	4c0f      	ldr	r4, [pc, #60]	@ (8023c44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023c08:	e8d4 3f8f 	ldab	r3, [r4]
 8023c0c:	07db      	lsls	r3, r3, #31
 8023c0e:	d40b      	bmi.n	8023c28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8023c10:	4620      	mov	r0, r4
 8023c12:	f007 ff28 	bl	802ba66 <__cxa_guard_acquire>
 8023c16:	b138      	cbz	r0, 8023c28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8023c18:	4620      	mov	r0, r4
 8023c1a:	f007 ff30 	bl	802ba7e <__cxa_guard_release>
 8023c1e:	4a06      	ldr	r2, [pc, #24]	@ (8023c38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023c20:	4909      	ldr	r1, [pc, #36]	@ (8023c48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023c22:	480a      	ldr	r0, [pc, #40]	@ (8023c4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023c24:	f007 ff18 	bl	802ba58 <__aeabi_atexit>
 8023c28:	4b05      	ldr	r3, [pc, #20]	@ (8023c40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023c2a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023c2c:	4b07      	ldr	r3, [pc, #28]	@ (8023c4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023c2e:	662b      	str	r3, [r5, #96]	@ 0x60
 8023c30:	bd38      	pop	{r3, r4, r5, pc}
 8023c32:	bf00      	nop
 8023c34:	20011fe0 	.word	0x20011fe0
 8023c38:	20000000 	.word	0x20000000
 8023c3c:	0801f853 	.word	0x0801f853
 8023c40:	20000040 	.word	0x20000040
 8023c44:	20011fe4 	.word	0x20011fe4
 8023c48:	0801f851 	.word	0x0801f851
 8023c4c:	20000044 	.word	0x20000044

08023c50 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023c50:	b510      	push	{r4, lr}
 8023c52:	4604      	mov	r4, r0
 8023c54:	f7ff ff8c 	bl	8023b70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023c58:	4620      	mov	r0, r4
 8023c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c5e:	f7ff bfbf 	b.w	8023be0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023c64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023c64:	b538      	push	{r3, r4, r5, lr}
 8023c66:	4605      	mov	r5, r0
 8023c68:	4c13      	ldr	r4, [pc, #76]	@ (8023cb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 8023c6a:	e8d4 3f8f 	ldab	r3, [r4]
 8023c6e:	07da      	lsls	r2, r3, #31
 8023c70:	d40b      	bmi.n	8023c8a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8023c72:	4620      	mov	r0, r4
 8023c74:	f007 fef7 	bl	802ba66 <__cxa_guard_acquire>
 8023c78:	b138      	cbz	r0, 8023c8a <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8023c7a:	4620      	mov	r0, r4
 8023c7c:	f007 feff 	bl	802ba7e <__cxa_guard_release>
 8023c80:	4a0e      	ldr	r2, [pc, #56]	@ (8023cbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023c82:	490f      	ldr	r1, [pc, #60]	@ (8023cc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023c84:	480f      	ldr	r0, [pc, #60]	@ (8023cc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023c86:	f007 fee7 	bl	802ba58 <__aeabi_atexit>
 8023c8a:	4c0f      	ldr	r4, [pc, #60]	@ (8023cc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023c8c:	e8d4 3f8f 	ldab	r3, [r4]
 8023c90:	07db      	lsls	r3, r3, #31
 8023c92:	d40b      	bmi.n	8023cac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8023c94:	4620      	mov	r0, r4
 8023c96:	f007 fee6 	bl	802ba66 <__cxa_guard_acquire>
 8023c9a:	b138      	cbz	r0, 8023cac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8023c9c:	4620      	mov	r0, r4
 8023c9e:	f007 feee 	bl	802ba7e <__cxa_guard_release>
 8023ca2:	4a06      	ldr	r2, [pc, #24]	@ (8023cbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023ca4:	4909      	ldr	r1, [pc, #36]	@ (8023ccc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023ca6:	480a      	ldr	r0, [pc, #40]	@ (8023cd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023ca8:	f007 fed6 	bl	802ba58 <__aeabi_atexit>
 8023cac:	4b05      	ldr	r3, [pc, #20]	@ (8023cc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023cae:	676b      	str	r3, [r5, #116]	@ 0x74
 8023cb0:	4b07      	ldr	r3, [pc, #28]	@ (8023cd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023cb2:	67ab      	str	r3, [r5, #120]	@ 0x78
 8023cb4:	bd38      	pop	{r3, r4, r5, pc}
 8023cb6:	bf00      	nop
 8023cb8:	20011fd8 	.word	0x20011fd8
 8023cbc:	20000000 	.word	0x20000000
 8023cc0:	0801f847 	.word	0x0801f847
 8023cc4:	20000038 	.word	0x20000038
 8023cc8:	20011fdc 	.word	0x20011fdc
 8023ccc:	0801f845 	.word	0x0801f845
 8023cd0:	2000003c 	.word	0x2000003c

08023cd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023cd4:	b538      	push	{r3, r4, r5, lr}
 8023cd6:	4605      	mov	r5, r0
 8023cd8:	4c13      	ldr	r4, [pc, #76]	@ (8023d28 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 8023cda:	e8d4 3f8f 	ldab	r3, [r4]
 8023cde:	07da      	lsls	r2, r3, #31
 8023ce0:	d40b      	bmi.n	8023cfa <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8023ce2:	4620      	mov	r0, r4
 8023ce4:	f007 febf 	bl	802ba66 <__cxa_guard_acquire>
 8023ce8:	b138      	cbz	r0, 8023cfa <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8023cea:	4620      	mov	r0, r4
 8023cec:	f007 fec7 	bl	802ba7e <__cxa_guard_release>
 8023cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8023d2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023cf2:	490f      	ldr	r1, [pc, #60]	@ (8023d30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023cf4:	480f      	ldr	r0, [pc, #60]	@ (8023d34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023cf6:	f007 feaf 	bl	802ba58 <__aeabi_atexit>
 8023cfa:	4c0f      	ldr	r4, [pc, #60]	@ (8023d38 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023cfc:	e8d4 3f8f 	ldab	r3, [r4]
 8023d00:	07db      	lsls	r3, r3, #31
 8023d02:	d40b      	bmi.n	8023d1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8023d04:	4620      	mov	r0, r4
 8023d06:	f007 feae 	bl	802ba66 <__cxa_guard_acquire>
 8023d0a:	b138      	cbz	r0, 8023d1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8023d0c:	4620      	mov	r0, r4
 8023d0e:	f007 feb6 	bl	802ba7e <__cxa_guard_release>
 8023d12:	4a06      	ldr	r2, [pc, #24]	@ (8023d2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023d14:	4909      	ldr	r1, [pc, #36]	@ (8023d3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023d16:	480a      	ldr	r0, [pc, #40]	@ (8023d40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023d18:	f007 fe9e 	bl	802ba58 <__aeabi_atexit>
 8023d1c:	4b05      	ldr	r3, [pc, #20]	@ (8023d34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023d1e:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8023d20:	4b07      	ldr	r3, [pc, #28]	@ (8023d40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023d22:	672b      	str	r3, [r5, #112]	@ 0x70
 8023d24:	bd38      	pop	{r3, r4, r5, pc}
 8023d26:	bf00      	nop
 8023d28:	20011fd0 	.word	0x20011fd0
 8023d2c:	20000000 	.word	0x20000000
 8023d30:	0801f84b 	.word	0x0801f84b
 8023d34:	20000030 	.word	0x20000030
 8023d38:	20011fd4 	.word	0x20011fd4
 8023d3c:	0801f849 	.word	0x0801f849
 8023d40:	20000034 	.word	0x20000034

08023d44 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8023d44:	b510      	push	{r4, lr}
 8023d46:	4604      	mov	r4, r0
 8023d48:	f7ff ff8c 	bl	8023c64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023d4c:	4620      	mov	r0, r4
 8023d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d52:	f7ff bfbf 	b.w	8023cd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08023d56 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8023d56:	b510      	push	{r4, lr}
 8023d58:	4604      	mov	r4, r0
 8023d5a:	f7ff fff3 	bl	8023d44 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023d5e:	4620      	mov	r0, r4
 8023d60:	f7ff ff76 	bl	8023c50 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023d64:	4620      	mov	r0, r4
 8023d66:	f7ff fe09 	bl	802397c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023d6a:	4620      	mov	r0, r4
 8023d6c:	f7ff fd12 	bl	8023794 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023d70:	4620      	mov	r0, r4
 8023d72:	f7ff fd89 	bl	8023888 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023d76:	4620      	mov	r0, r4
 8023d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d7c:	f7ff bee8 	b.w	8023b50 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023d80 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8023d80:	b538      	push	{r3, r4, r5, lr}
 8023d82:	4605      	mov	r5, r0
 8023d84:	4c09      	ldr	r4, [pc, #36]	@ (8023dac <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 8023d86:	e8d4 3f8f 	ldab	r3, [r4]
 8023d8a:	07db      	lsls	r3, r3, #31
 8023d8c:	d40b      	bmi.n	8023da6 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8023d8e:	4620      	mov	r0, r4
 8023d90:	f007 fe69 	bl	802ba66 <__cxa_guard_acquire>
 8023d94:	b138      	cbz	r0, 8023da6 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8023d96:	4620      	mov	r0, r4
 8023d98:	f007 fe71 	bl	802ba7e <__cxa_guard_release>
 8023d9c:	4a04      	ldr	r2, [pc, #16]	@ (8023db0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8023d9e:	4905      	ldr	r1, [pc, #20]	@ (8023db4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8023da0:	4805      	ldr	r0, [pc, #20]	@ (8023db8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023da2:	f007 fe59 	bl	802ba58 <__aeabi_atexit>
 8023da6:	4b04      	ldr	r3, [pc, #16]	@ (8023db8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8023da8:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8023daa:	bd38      	pop	{r3, r4, r5, pc}
 8023dac:	20011fc4 	.word	0x20011fc4
 8023db0:	20000000 	.word	0x20000000
 8023db4:	0801f843 	.word	0x0801f843
 8023db8:	20000028 	.word	0x20000028

08023dbc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8023dbc:	b538      	push	{r3, r4, r5, lr}
 8023dbe:	4605      	mov	r5, r0
 8023dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8023dec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8023dc2:	e8d4 3f8f 	ldab	r3, [r4]
 8023dc6:	07db      	lsls	r3, r3, #31
 8023dc8:	d40b      	bmi.n	8023de2 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023dca:	4620      	mov	r0, r4
 8023dcc:	f007 fe4b 	bl	802ba66 <__cxa_guard_acquire>
 8023dd0:	b138      	cbz	r0, 8023de2 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8023dd2:	4620      	mov	r0, r4
 8023dd4:	f007 fe53 	bl	802ba7e <__cxa_guard_release>
 8023dd8:	4a05      	ldr	r2, [pc, #20]	@ (8023df0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8023dda:	4906      	ldr	r1, [pc, #24]	@ (8023df4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8023ddc:	4806      	ldr	r0, [pc, #24]	@ (8023df8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023dde:	f007 fe3b 	bl	802ba58 <__aeabi_atexit>
 8023de2:	4b05      	ldr	r3, [pc, #20]	@ (8023df8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023de4:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8023de8:	bd38      	pop	{r3, r4, r5, pc}
 8023dea:	bf00      	nop
 8023dec:	20011fc8 	.word	0x20011fc8
 8023df0:	20000000 	.word	0x20000000
 8023df4:	0801f841 	.word	0x0801f841
 8023df8:	2000002c 	.word	0x2000002c

08023dfc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8023dfc:	b570      	push	{r4, r5, r6, lr}
 8023dfe:	4606      	mov	r6, r0
 8023e00:	4d0b      	ldr	r5, [pc, #44]	@ (8023e30 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8023e02:	e8d5 3f8f 	ldab	r3, [r5]
 8023e06:	f013 0f01 	tst.w	r3, #1
 8023e0a:	4c0a      	ldr	r4, [pc, #40]	@ (8023e34 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023e0c:	d10d      	bne.n	8023e2a <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023e0e:	4628      	mov	r0, r5
 8023e10:	f007 fe29 	bl	802ba66 <__cxa_guard_acquire>
 8023e14:	b148      	cbz	r0, 8023e2a <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8023e16:	4b08      	ldr	r3, [pc, #32]	@ (8023e38 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023e18:	4628      	mov	r0, r5
 8023e1a:	6023      	str	r3, [r4, #0]
 8023e1c:	f007 fe2f 	bl	802ba7e <__cxa_guard_release>
 8023e20:	4a06      	ldr	r2, [pc, #24]	@ (8023e3c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023e22:	4907      	ldr	r1, [pc, #28]	@ (8023e40 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023e24:	4620      	mov	r0, r4
 8023e26:	f007 fe17 	bl	802ba58 <__aeabi_atexit>
 8023e2a:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8023e2e:	bd70      	pop	{r4, r5, r6, pc}
 8023e30:	20011fcc 	.word	0x20011fcc
 8023e34:	20012144 	.word	0x20012144
 8023e38:	0802faf8 	.word	0x0802faf8
 8023e3c:	20000000 	.word	0x20000000
 8023e40:	0801f83f 	.word	0x0801f83f

08023e44 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8023e44:	b510      	push	{r4, lr}
 8023e46:	4604      	mov	r4, r0
 8023e48:	f7ff ff9a 	bl	8023d80 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8023e4c:	4620      	mov	r0, r4
 8023e4e:	f7ff ffb5 	bl	8023dbc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8023e52:	4620      	mov	r0, r4
 8023e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023e58:	f7ff bfd0 	b.w	8023dfc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08023e5c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8023e5c:	b570      	push	{r4, r5, r6, lr}
 8023e5e:	4606      	mov	r6, r0
 8023e60:	4d0b      	ldr	r5, [pc, #44]	@ (8023e90 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8023e62:	e8d5 3f8f 	ldab	r3, [r5]
 8023e66:	f013 0f01 	tst.w	r3, #1
 8023e6a:	4c0a      	ldr	r4, [pc, #40]	@ (8023e94 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8023e6c:	d10d      	bne.n	8023e8a <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023e6e:	4628      	mov	r0, r5
 8023e70:	f007 fdf9 	bl	802ba66 <__cxa_guard_acquire>
 8023e74:	b148      	cbz	r0, 8023e8a <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8023e76:	4b08      	ldr	r3, [pc, #32]	@ (8023e98 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8023e78:	4628      	mov	r0, r5
 8023e7a:	6023      	str	r3, [r4, #0]
 8023e7c:	f007 fdff 	bl	802ba7e <__cxa_guard_release>
 8023e80:	4a06      	ldr	r2, [pc, #24]	@ (8023e9c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8023e82:	4907      	ldr	r1, [pc, #28]	@ (8023ea0 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8023e84:	4620      	mov	r0, r4
 8023e86:	f007 fde7 	bl	802ba58 <__aeabi_atexit>
 8023e8a:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8023e8e:	bd70      	pop	{r4, r5, r6, pc}
 8023e90:	20011fc0 	.word	0x20011fc0
 8023e94:	20012040 	.word	0x20012040
 8023e98:	0802fb14 	.word	0x0802fb14
 8023e9c:	20000000 	.word	0x20000000
 8023ea0:	0801f83d 	.word	0x0801f83d

08023ea4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ea8:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8023eac:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8023eb0:	fb05 4c0e 	mla	ip, r5, lr, r4
 8023eb4:	2d00      	cmp	r5, #0
 8023eb6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8023eba:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8023ebe:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8023ec2:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8023ec6:	eb02 0a0c 	add.w	sl, r2, ip
 8023eca:	8808      	ldrh	r0, [r1, #0]
 8023ecc:	f2c0 80b0 	blt.w	8024030 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023ed0:	45ab      	cmp	fp, r5
 8023ed2:	f340 80ad 	ble.w	8024030 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8023ed6:	2c00      	cmp	r4, #0
 8023ed8:	f2c0 80a8 	blt.w	802402c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023edc:	45a6      	cmp	lr, r4
 8023ede:	f340 80a5 	ble.w	802402c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8023ee2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023ee6:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8023eea:	1c62      	adds	r2, r4, #1
 8023eec:	f100 80a3 	bmi.w	8024036 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023ef0:	4596      	cmp	lr, r2
 8023ef2:	f340 80a0 	ble.w	8024036 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023ef6:	f1b9 0f00 	cmp.w	r9, #0
 8023efa:	f000 809c 	beq.w	8024036 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8023efe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023f02:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8023f06:	3501      	adds	r5, #1
 8023f08:	f100 8099 	bmi.w	802403e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023f0c:	45ab      	cmp	fp, r5
 8023f0e:	f340 8096 	ble.w	802403e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023f12:	2f00      	cmp	r7, #0
 8023f14:	f000 8093 	beq.w	802403e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8023f18:	2c00      	cmp	r4, #0
 8023f1a:	f2c0 808e 	blt.w	802403a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023f1e:	45a6      	cmp	lr, r4
 8023f20:	f340 808b 	ble.w	802403a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8023f24:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8023f28:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8023f2c:	3401      	adds	r4, #1
 8023f2e:	f100 8089 	bmi.w	8024044 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023f32:	45a6      	cmp	lr, r4
 8023f34:	f340 8086 	ble.w	8024044 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023f38:	f1b9 0f00 	cmp.w	r9, #0
 8023f3c:	f000 8082 	beq.w	8024044 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8023f40:	44d6      	add	lr, sl
 8023f42:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023f46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023f4a:	fb19 fe07 	smulbb	lr, r9, r7
 8023f4e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8023f52:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023f56:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8023f5a:	ea44 0808 	orr.w	r8, r4, r8
 8023f5e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8023f62:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8023f66:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023f6a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8023f6e:	ea44 0c0c 	orr.w	ip, r4, ip
 8023f72:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8023f76:	fb04 f40c 	mul.w	r4, r4, ip
 8023f7a:	f1c7 0210 	rsb	r2, r7, #16
 8023f7e:	eba2 0209 	sub.w	r2, r2, r9
 8023f82:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8023f86:	fb02 4808 	mla	r8, r2, r8, r4
 8023f8a:	b2b4      	uxth	r4, r6
 8023f8c:	43f6      	mvns	r6, r6
 8023f8e:	041a      	lsls	r2, r3, #16
 8023f90:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023f94:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023f98:	4313      	orrs	r3, r2
 8023f9a:	fb0e 8303 	mla	r3, lr, r3, r8
 8023f9e:	042a      	lsls	r2, r5, #16
 8023fa0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023fa4:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8023fa8:	432a      	orrs	r2, r5
 8023faa:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8023fae:	fb07 3202 	mla	r2, r7, r2, r3
 8023fb2:	0d53      	lsrs	r3, r2, #21
 8023fb4:	0952      	lsrs	r2, r2, #5
 8023fb6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023fba:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023fbe:	431a      	orrs	r2, r3
 8023fc0:	b293      	uxth	r3, r2
 8023fc2:	1202      	asrs	r2, r0, #8
 8023fc4:	b2f6      	uxtb	r6, r6
 8023fc6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023fca:	fb12 f206 	smulbb	r2, r2, r6
 8023fce:	10c7      	asrs	r7, r0, #3
 8023fd0:	00c0      	lsls	r0, r0, #3
 8023fd2:	b2c0      	uxtb	r0, r0
 8023fd4:	121d      	asrs	r5, r3, #8
 8023fd6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023fda:	fb10 f006 	smulbb	r0, r0, r6
 8023fde:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023fe2:	fb17 f706 	smulbb	r7, r7, r6
 8023fe6:	fb05 2504 	mla	r5, r5, r4, r2
 8023fea:	10da      	asrs	r2, r3, #3
 8023fec:	00db      	lsls	r3, r3, #3
 8023fee:	b2db      	uxtb	r3, r3
 8023ff0:	fb03 0004 	mla	r0, r3, r4, r0
 8023ff4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023ff8:	fb02 7204 	mla	r2, r2, r4, r7
 8023ffc:	b2ad      	uxth	r5, r5
 8023ffe:	b280      	uxth	r0, r0
 8024000:	1c6b      	adds	r3, r5, #1
 8024002:	b292      	uxth	r2, r2
 8024004:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024008:	1c43      	adds	r3, r0, #1
 802400a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802400e:	1c50      	adds	r0, r2, #1
 8024010:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024014:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024018:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802401c:	0952      	lsrs	r2, r2, #5
 802401e:	432b      	orrs	r3, r5
 8024020:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024024:	4313      	orrs	r3, r2
 8024026:	800b      	strh	r3, [r1, #0]
 8024028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802402c:	4680      	mov	r8, r0
 802402e:	e75c      	b.n	8023eea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8024030:	4684      	mov	ip, r0
 8024032:	4680      	mov	r8, r0
 8024034:	e767      	b.n	8023f06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8024036:	4684      	mov	ip, r0
 8024038:	e765      	b.n	8023f06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802403a:	4605      	mov	r5, r0
 802403c:	e776      	b.n	8023f2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 802403e:	4603      	mov	r3, r0
 8024040:	4605      	mov	r5, r0
 8024042:	e782      	b.n	8023f4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024044:	4603      	mov	r3, r0
 8024046:	e780      	b.n	8023f4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08024048 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802404c:	b099      	sub	sp, #100	@ 0x64
 802404e:	9215      	str	r2, [sp, #84]	@ 0x54
 8024050:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8024052:	9016      	str	r0, [sp, #88]	@ 0x58
 8024054:	9309      	str	r3, [sp, #36]	@ 0x24
 8024056:	6850      	ldr	r0, [r2, #4]
 8024058:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 802405c:	910c      	str	r1, [sp, #48]	@ 0x30
 802405e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024060:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8024064:	fb00 1303 	mla	r3, r0, r3, r1
 8024068:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 802406c:	6812      	ldr	r2, [r2, #0]
 802406e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8024072:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024074:	681b      	ldr	r3, [r3, #0]
 8024076:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024078:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802407a:	685e      	ldr	r6, [r3, #4]
 802407c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802407e:	3604      	adds	r6, #4
 8024080:	43db      	mvns	r3, r3
 8024082:	b2db      	uxtb	r3, r3
 8024084:	930a      	str	r3, [sp, #40]	@ 0x28
 8024086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024088:	2b00      	cmp	r3, #0
 802408a:	dc03      	bgt.n	8024094 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802408c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802408e:	2b00      	cmp	r3, #0
 8024090:	f340 8225 	ble.w	80244de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024094:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024096:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802409a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802409e:	1e48      	subs	r0, r1, #1
 80240a0:	1e57      	subs	r7, r2, #1
 80240a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240a4:	2b00      	cmp	r3, #0
 80240a6:	f340 80e3 	ble.w	8024270 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80240aa:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80240ae:	ea4f 4325 	mov.w	r3, r5, asr #16
 80240b2:	d406      	bmi.n	80240c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80240b4:	4584      	cmp	ip, r0
 80240b6:	da04      	bge.n	80240c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	db02      	blt.n	80240c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80240bc:	42bb      	cmp	r3, r7
 80240be:	f2c0 80d8 	blt.w	8024272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80240c2:	f11c 0c01 	adds.w	ip, ip, #1
 80240c6:	f100 80c9 	bmi.w	802425c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80240ca:	4561      	cmp	r1, ip
 80240cc:	f2c0 80c6 	blt.w	802425c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80240d0:	3301      	adds	r3, #1
 80240d2:	f100 80c3 	bmi.w	802425c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80240d6:	429a      	cmp	r2, r3
 80240d8:	f2c0 80c0 	blt.w	802425c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80240dc:	4647      	mov	r7, r8
 80240de:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80240e2:	f1bb 0f00 	cmp.w	fp, #0
 80240e6:	f340 80e3 	ble.w	80242b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80240ea:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80240ec:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80240ee:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80240f2:	ea5f 422a 	movs.w	r2, sl, asr #16
 80240f6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80240fa:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80240fe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024102:	689b      	ldr	r3, [r3, #8]
 8024104:	f100 8121 	bmi.w	802434a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024108:	f103 39ff 	add.w	r9, r3, #4294967295
 802410c:	454a      	cmp	r2, r9
 802410e:	f280 811c 	bge.w	802434a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024112:	f1bc 0f00 	cmp.w	ip, #0
 8024116:	f2c0 8118 	blt.w	802434a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802411a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802411e:	45cc      	cmp	ip, r9
 8024120:	f280 8113 	bge.w	802434a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024124:	b21b      	sxth	r3, r3
 8024126:	fb0c 2203 	mla	r2, ip, r3, r2
 802412a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802412c:	eb04 0902 	add.w	r9, r4, r2
 8024130:	5ca2      	ldrb	r2, [r4, r2]
 8024132:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024136:	2800      	cmp	r0, #0
 8024138:	f000 80fe 	beq.w	8024338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802413c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024140:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024144:	9211      	str	r2, [sp, #68]	@ 0x44
 8024146:	b151      	cbz	r1, 802415e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024148:	eb09 0203 	add.w	r2, r9, r3
 802414c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024150:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024154:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024156:	7853      	ldrb	r3, [r2, #1]
 8024158:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802415c:	9312      	str	r3, [sp, #72]	@ 0x48
 802415e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024160:	fb10 f201 	smulbb	r2, r0, r1
 8024164:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024168:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802416c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024170:	ea4c 0c03 	orr.w	ip, ip, r3
 8024174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024176:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024178:	041b      	lsls	r3, r3, #16
 802417a:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802417e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024182:	10d2      	asrs	r2, r2, #3
 8024184:	4323      	orrs	r3, r4
 8024186:	4353      	muls	r3, r2
 8024188:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802418c:	fb09 330c 	mla	r3, r9, ip, r3
 8024190:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024194:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024198:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802419c:	ea4c 0e0e 	orr.w	lr, ip, lr
 80241a0:	f1c1 0c10 	rsb	ip, r1, #16
 80241a4:	ebac 0c00 	sub.w	ip, ip, r0
 80241a8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80241ac:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80241b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241b2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80241b6:	0418      	lsls	r0, r3, #16
 80241b8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80241bc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80241c0:	4318      	orrs	r0, r3
 80241c2:	fb02 c200 	mla	r2, r2, r0, ip
 80241c6:	8838      	ldrh	r0, [r7, #0]
 80241c8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80241ca:	0d53      	lsrs	r3, r2, #21
 80241cc:	1201      	asrs	r1, r0, #8
 80241ce:	0952      	lsrs	r2, r2, #5
 80241d0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80241d4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80241d8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80241dc:	431a      	orrs	r2, r3
 80241de:	fb11 f104 	smulbb	r1, r1, r4
 80241e2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80241e6:	00c0      	lsls	r0, r0, #3
 80241e8:	b292      	uxth	r2, r2
 80241ea:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80241ee:	b2c0      	uxtb	r0, r0
 80241f0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80241f4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80241f8:	fb1e fe04 	smulbb	lr, lr, r4
 80241fc:	fb10 f004 	smulbb	r0, r0, r4
 8024200:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8024204:	fb0c 1c03 	mla	ip, ip, r3, r1
 8024208:	10d1      	asrs	r1, r2, #3
 802420a:	00d2      	lsls	r2, r2, #3
 802420c:	b2d2      	uxtb	r2, r2
 802420e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024212:	fb01 e103 	mla	r1, r1, r3, lr
 8024216:	fb02 0303 	mla	r3, r2, r3, r0
 802421a:	fa1f fc8c 	uxth.w	ip, ip
 802421e:	b29a      	uxth	r2, r3
 8024220:	f10c 0301 	add.w	r3, ip, #1
 8024224:	b289      	uxth	r1, r1
 8024226:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802422a:	1c53      	adds	r3, r2, #1
 802422c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024230:	1c4a      	adds	r2, r1, #1
 8024232:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024236:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802423a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802423e:	0949      	lsrs	r1, r1, #5
 8024240:	ea43 030c 	orr.w	r3, r3, ip
 8024244:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024248:	430b      	orrs	r3, r1
 802424a:	803b      	strh	r3, [r7, #0]
 802424c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802424e:	3702      	adds	r7, #2
 8024250:	449a      	add	sl, r3
 8024252:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024254:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024258:	441d      	add	r5, r3
 802425a:	e742      	b.n	80240e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802425c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802425e:	f108 0802 	add.w	r8, r8, #2
 8024262:	449a      	add	sl, r3
 8024264:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024266:	441d      	add	r5, r3
 8024268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802426a:	3b01      	subs	r3, #1
 802426c:	9309      	str	r3, [sp, #36]	@ 0x24
 802426e:	e718      	b.n	80240a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024270:	d023      	beq.n	80242ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8024272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024274:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8024276:	3b01      	subs	r3, #1
 8024278:	fb00 a003 	mla	r0, r0, r3, sl
 802427c:	1400      	asrs	r0, r0, #16
 802427e:	f53f af2d 	bmi.w	80240dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024282:	3901      	subs	r1, #1
 8024284:	4288      	cmp	r0, r1
 8024286:	f6bf af29 	bge.w	80240dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802428a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802428c:	fb01 5303 	mla	r3, r1, r3, r5
 8024290:	141b      	asrs	r3, r3, #16
 8024292:	f53f af23 	bmi.w	80240dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024296:	3a01      	subs	r2, #1
 8024298:	4293      	cmp	r3, r2
 802429a:	f6bf af1f 	bge.w	80240dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802429e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 80242a2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 80242a6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 80242aa:	f1be 0f00 	cmp.w	lr, #0
 80242ae:	dc6c      	bgt.n	802438a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80242b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242b2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80242b6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80242ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242bc:	2b00      	cmp	r3, #0
 80242be:	f340 810e 	ble.w	80244de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80242c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80242c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80242ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80242ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80242d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80242d6:	eef0 6a62 	vmov.f32	s13, s5
 80242da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80242de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80242e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80242e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80242ee:	ee16 aa90 	vmov	sl, s13
 80242f2:	eef0 6a43 	vmov.f32	s13, s6
 80242f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80242fa:	ee12 2a90 	vmov	r2, s5
 80242fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024302:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024304:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024308:	fb92 f3f3 	sdiv	r3, r2, r3
 802430c:	ee13 2a10 	vmov	r2, s6
 8024310:	9325      	str	r3, [sp, #148]	@ 0x94
 8024312:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024314:	ee16 5a90 	vmov	r5, s13
 8024318:	fb92 f3f3 	sdiv	r3, r2, r3
 802431c:	9326      	str	r3, [sp, #152]	@ 0x98
 802431e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024320:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024322:	3b01      	subs	r3, #1
 8024324:	930c      	str	r3, [sp, #48]	@ 0x30
 8024326:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024328:	bf08      	it	eq
 802432a:	4613      	moveq	r3, r2
 802432c:	eeb0 3a67 	vmov.f32	s6, s15
 8024330:	9309      	str	r3, [sp, #36]	@ 0x24
 8024332:	eef0 2a47 	vmov.f32	s5, s14
 8024336:	e6a6      	b.n	8024086 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024338:	2900      	cmp	r1, #0
 802433a:	f43f af10 	beq.w	802415e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802433e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024342:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024346:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024348:	e709      	b.n	802415e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802434a:	f112 0901 	adds.w	r9, r2, #1
 802434e:	f53f af7d 	bmi.w	802424c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024352:	454b      	cmp	r3, r9
 8024354:	f6ff af7a 	blt.w	802424c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024358:	f11c 0901 	adds.w	r9, ip, #1
 802435c:	f53f af76 	bmi.w	802424c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024360:	45ce      	cmp	lr, r9
 8024362:	f6ff af73 	blt.w	802424c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024366:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024368:	9202      	str	r2, [sp, #8]
 802436a:	b21b      	sxth	r3, r3
 802436c:	fa0f f28e 	sxth.w	r2, lr
 8024370:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024374:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024378:	9201      	str	r2, [sp, #4]
 802437a:	9300      	str	r3, [sp, #0]
 802437c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802437e:	4633      	mov	r3, r6
 8024380:	4639      	mov	r1, r7
 8024382:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8024384:	f7ff fd8e 	bl	8023ea4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024388:	e760      	b.n	802424c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802438a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802438c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024390:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024394:	1429      	asrs	r1, r5, #16
 8024396:	fb03 2101 	mla	r1, r3, r1, r2
 802439a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802439c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802439e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80243a2:	440a      	add	r2, r1
 80243a4:	5c61      	ldrb	r1, [r4, r1]
 80243a6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80243aa:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80243ae:	f1bc 0f00 	cmp.w	ip, #0
 80243b2:	f000 808c 	beq.w	80244ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80243b6:	7857      	ldrb	r7, [r2, #1]
 80243b8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80243bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80243be:	b140      	cbz	r0, 80243d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80243c0:	18d7      	adds	r7, r2, r3
 80243c2:	5cd3      	ldrb	r3, [r2, r3]
 80243c4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80243c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80243ca:	787b      	ldrb	r3, [r7, #1]
 80243cc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80243d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80243d2:	fb1c f200 	smulbb	r2, ip, r0
 80243d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80243d8:	10d2      	asrs	r2, r2, #3
 80243da:	041f      	lsls	r7, r3, #16
 80243dc:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 80243e0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80243e4:	431f      	orrs	r7, r3
 80243e6:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80243ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 80243ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80243ee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80243f0:	041b      	lsls	r3, r3, #16
 80243f2:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 80243f6:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80243fa:	ea43 030b 	orr.w	r3, r3, fp
 80243fe:	4353      	muls	r3, r2
 8024400:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024402:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024406:	fb04 3707 	mla	r7, r4, r7, r3
 802440a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802440e:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8024412:	ea43 0b01 	orr.w	fp, r3, r1
 8024416:	f1c0 0110 	rsb	r1, r0, #16
 802441a:	eba1 0c0c 	sub.w	ip, r1, ip
 802441e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024422:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024424:	fb0c 770b 	mla	r7, ip, fp, r7
 8024428:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802442c:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 8024430:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024434:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024438:	ea4c 0c0b 	orr.w	ip, ip, fp
 802443c:	fb02 770c 	mla	r7, r2, ip, r7
 8024440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024442:	0d79      	lsrs	r1, r7, #21
 8024444:	8812      	ldrh	r2, [r2, #0]
 8024446:	097f      	lsrs	r7, r7, #5
 8024448:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802444c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8024450:	430f      	orrs	r7, r1
 8024452:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024454:	1211      	asrs	r1, r2, #8
 8024456:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802445a:	b2bb      	uxth	r3, r7
 802445c:	fb11 f104 	smulbb	r1, r1, r4
 8024460:	10d7      	asrs	r7, r2, #3
 8024462:	00d2      	lsls	r2, r2, #3
 8024464:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024468:	b2d2      	uxtb	r2, r2
 802446a:	1218      	asrs	r0, r3, #8
 802446c:	fb17 f704 	smulbb	r7, r7, r4
 8024470:	fb12 f204 	smulbb	r2, r2, r4
 8024474:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024478:	fb00 1009 	mla	r0, r0, r9, r1
 802447c:	10d9      	asrs	r1, r3, #3
 802447e:	00db      	lsls	r3, r3, #3
 8024480:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024484:	b2db      	uxtb	r3, r3
 8024486:	fb01 7109 	mla	r1, r1, r9, r7
 802448a:	fb03 2309 	mla	r3, r3, r9, r2
 802448e:	b280      	uxth	r0, r0
 8024490:	b29b      	uxth	r3, r3
 8024492:	b289      	uxth	r1, r1
 8024494:	1c42      	adds	r2, r0, #1
 8024496:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802449a:	1c4f      	adds	r7, r1, #1
 802449c:	1c5a      	adds	r2, r3, #1
 802449e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80244a2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80244a6:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80244aa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80244ae:	0949      	lsrs	r1, r1, #5
 80244b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80244b2:	4310      	orrs	r0, r2
 80244b4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80244b8:	4308      	orrs	r0, r1
 80244ba:	f823 0b02 	strh.w	r0, [r3], #2
 80244be:	930e      	str	r3, [sp, #56]	@ 0x38
 80244c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80244c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80244c6:	449a      	add	sl, r3
 80244c8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80244ca:	441d      	add	r5, r3
 80244cc:	e6ed      	b.n	80242aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80244ce:	2800      	cmp	r0, #0
 80244d0:	f43f af7f 	beq.w	80243d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244d4:	5cd3      	ldrb	r3, [r2, r3]
 80244d6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80244da:	9310      	str	r3, [sp, #64]	@ 0x40
 80244dc:	e779      	b.n	80243d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244de:	b019      	add	sp, #100	@ 0x64
 80244e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080244e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80244e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244e8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80244ec:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 80244f0:	fb08 470e 	mla	r7, r8, lr, r4
 80244f4:	f1b8 0f00 	cmp.w	r8, #0
 80244f8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 80244fc:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8024500:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8024504:	eb02 0907 	add.w	r9, r2, r7
 8024508:	8808      	ldrh	r0, [r1, #0]
 802450a:	db67      	blt.n	80245dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 802450c:	45c2      	cmp	sl, r8
 802450e:	dd65      	ble.n	80245dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8024510:	2c00      	cmp	r4, #0
 8024512:	db61      	blt.n	80245d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024514:	45a6      	cmp	lr, r4
 8024516:	dd5f      	ble.n	80245d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8024518:	5dd2      	ldrb	r2, [r2, r7]
 802451a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802451e:	1c62      	adds	r2, r4, #1
 8024520:	d45f      	bmi.n	80245e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8024522:	4596      	cmp	lr, r2
 8024524:	dd5d      	ble.n	80245e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8024526:	2d00      	cmp	r5, #0
 8024528:	d05b      	beq.n	80245e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802452a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802452e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024532:	f118 0801 	adds.w	r8, r8, #1
 8024536:	d458      	bmi.n	80245ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024538:	45c2      	cmp	sl, r8
 802453a:	dd56      	ble.n	80245ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802453c:	2e00      	cmp	r6, #0
 802453e:	d054      	beq.n	80245ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8024540:	2c00      	cmp	r4, #0
 8024542:	db50      	blt.n	80245e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8024544:	45a6      	cmp	lr, r4
 8024546:	dd4e      	ble.n	80245e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8024548:	f819 200e 	ldrb.w	r2, [r9, lr]
 802454c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024550:	3401      	adds	r4, #1
 8024552:	d407      	bmi.n	8024564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024554:	45a6      	cmp	lr, r4
 8024556:	dd05      	ble.n	8024564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024558:	b125      	cbz	r5, 8024564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802455a:	44ce      	add	lr, r9
 802455c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024560:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024564:	fb15 f406 	smulbb	r4, r5, r6
 8024568:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802456c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024570:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8024574:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024578:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802457c:	ea43 0c0c 	orr.w	ip, r3, ip
 8024580:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8024584:	f1c6 0310 	rsb	r3, r6, #16
 8024588:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802458c:	1b5b      	subs	r3, r3, r5
 802458e:	ea4e 0707 	orr.w	r7, lr, r7
 8024592:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8024596:	437d      	muls	r5, r7
 8024598:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802459c:	fb03 5c0c 	mla	ip, r3, ip, r5
 80245a0:	0403      	lsls	r3, r0, #16
 80245a2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80245a6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80245aa:	4318      	orrs	r0, r3
 80245ac:	fb04 c000 	mla	r0, r4, r0, ip
 80245b0:	0413      	lsls	r3, r2, #16
 80245b2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80245b6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80245ba:	4313      	orrs	r3, r2
 80245bc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80245c0:	fb06 0003 	mla	r0, r6, r3, r0
 80245c4:	0d43      	lsrs	r3, r0, #21
 80245c6:	0940      	lsrs	r0, r0, #5
 80245c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80245cc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80245d0:	4318      	orrs	r0, r3
 80245d2:	8008      	strh	r0, [r1, #0]
 80245d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80245d8:	4684      	mov	ip, r0
 80245da:	e7a0      	b.n	802451e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80245dc:	4607      	mov	r7, r0
 80245de:	4684      	mov	ip, r0
 80245e0:	e7a7      	b.n	8024532 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80245e2:	4607      	mov	r7, r0
 80245e4:	e7a5      	b.n	8024532 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80245e6:	4602      	mov	r2, r0
 80245e8:	e7b2      	b.n	8024550 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80245ea:	4602      	mov	r2, r0
 80245ec:	e7ba      	b.n	8024564 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080245ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80245ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80245f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245f6:	b093      	sub	sp, #76	@ 0x4c
 80245f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80245fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80245fc:	9010      	str	r0, [sp, #64]	@ 0x40
 80245fe:	6850      	ldr	r0, [r2, #4]
 8024600:	9108      	str	r1, [sp, #32]
 8024602:	9306      	str	r3, [sp, #24]
 8024604:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8024608:	fb00 1303 	mla	r3, r0, r3, r1
 802460c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8024610:	6812      	ldr	r2, [r2, #0]
 8024612:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024616:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024618:	681b      	ldr	r3, [r3, #0]
 802461a:	9307      	str	r3, [sp, #28]
 802461c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802461e:	685f      	ldr	r7, [r3, #4]
 8024620:	3704      	adds	r7, #4
 8024622:	9b08      	ldr	r3, [sp, #32]
 8024624:	2b00      	cmp	r3, #0
 8024626:	dc03      	bgt.n	8024630 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802462a:	2b00      	cmp	r3, #0
 802462c:	f340 81b2 	ble.w	8024994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8024630:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024632:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024636:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802463a:	1e48      	subs	r0, r1, #1
 802463c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024640:	9b06      	ldr	r3, [sp, #24]
 8024642:	2b00      	cmp	r3, #0
 8024644:	f340 80a9 	ble.w	802479a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8024648:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802464c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024650:	d406      	bmi.n	8024660 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024652:	4586      	cmp	lr, r0
 8024654:	da04      	bge.n	8024660 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024656:	2b00      	cmp	r3, #0
 8024658:	db02      	blt.n	8024660 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802465a:	4563      	cmp	r3, ip
 802465c:	f2c0 809e 	blt.w	802479c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8024660:	f11e 0e01 	adds.w	lr, lr, #1
 8024664:	f100 808f 	bmi.w	8024786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024668:	4571      	cmp	r1, lr
 802466a:	f2c0 808c 	blt.w	8024786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802466e:	3301      	adds	r3, #1
 8024670:	f100 8089 	bmi.w	8024786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024674:	429a      	cmp	r2, r3
 8024676:	f2c0 8086 	blt.w	8024786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802467a:	46c8      	mov	r8, r9
 802467c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024680:	f1bb 0f00 	cmp.w	fp, #0
 8024684:	f340 80a6 	ble.w	80247d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024688:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802468a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802468c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024690:	1422      	asrs	r2, r4, #16
 8024692:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024696:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802469a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802469e:	689b      	ldr	r3, [r3, #8]
 80246a0:	f100 80e3 	bmi.w	802486a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80246a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80246a8:	4552      	cmp	r2, sl
 80246aa:	f280 80de 	bge.w	802486a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80246ae:	f1bc 0f00 	cmp.w	ip, #0
 80246b2:	f2c0 80da 	blt.w	802486a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80246b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80246ba:	45d4      	cmp	ip, sl
 80246bc:	f280 80d5 	bge.w	802486a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80246c0:	b21b      	sxth	r3, r3
 80246c2:	fb0c 2203 	mla	r2, ip, r3, r2
 80246c6:	9d07      	ldr	r5, [sp, #28]
 80246c8:	eb05 0a02 	add.w	sl, r5, r2
 80246cc:	5caa      	ldrb	r2, [r5, r2]
 80246ce:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80246d2:	2800      	cmp	r0, #0
 80246d4:	f000 80c0 	beq.w	8024858 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80246d8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80246dc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80246e0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80246e2:	b151      	cbz	r1, 80246fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80246e4:	eb0a 0203 	add.w	r2, sl, r3
 80246e8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80246ec:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80246f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80246f2:	7853      	ldrb	r3, [r2, #1]
 80246f4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80246f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80246fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80246fc:	fb10 f201 	smulbb	r2, r0, r1
 8024700:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024704:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024708:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802470c:	ea4c 0c03 	orr.w	ip, ip, r3
 8024710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024712:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024714:	041b      	lsls	r3, r3, #16
 8024716:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802471a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802471e:	10d2      	asrs	r2, r2, #3
 8024720:	432b      	orrs	r3, r5
 8024722:	4353      	muls	r3, r2
 8024724:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8024728:	fb0a 330c 	mla	r3, sl, ip, r3
 802472c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024730:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024734:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024738:	ea4c 0e0e 	orr.w	lr, ip, lr
 802473c:	f1c1 0c10 	rsb	ip, r1, #16
 8024740:	ebac 0c00 	sub.w	ip, ip, r0
 8024744:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024748:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802474c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802474e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024752:	0418      	lsls	r0, r3, #16
 8024754:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8024758:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802475c:	4318      	orrs	r0, r3
 802475e:	fb02 c200 	mla	r2, r2, r0, ip
 8024762:	0d53      	lsrs	r3, r2, #21
 8024764:	0952      	lsrs	r2, r2, #5
 8024766:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802476a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802476e:	431a      	orrs	r2, r3
 8024770:	f8a8 2000 	strh.w	r2, [r8]
 8024774:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024776:	f108 0802 	add.w	r8, r8, #2
 802477a:	441c      	add	r4, r3
 802477c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802477e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024782:	441e      	add	r6, r3
 8024784:	e77c      	b.n	8024680 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024786:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024788:	f109 0902 	add.w	r9, r9, #2
 802478c:	441c      	add	r4, r3
 802478e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024790:	441e      	add	r6, r3
 8024792:	9b06      	ldr	r3, [sp, #24]
 8024794:	3b01      	subs	r3, #1
 8024796:	9306      	str	r3, [sp, #24]
 8024798:	e752      	b.n	8024640 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802479a:	d020      	beq.n	80247de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802479c:	9b06      	ldr	r3, [sp, #24]
 802479e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80247a0:	3b01      	subs	r3, #1
 80247a2:	fb00 4003 	mla	r0, r0, r3, r4
 80247a6:	1400      	asrs	r0, r0, #16
 80247a8:	f53f af67 	bmi.w	802467a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80247ac:	3901      	subs	r1, #1
 80247ae:	4288      	cmp	r0, r1
 80247b0:	f6bf af63 	bge.w	802467a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80247b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80247b6:	fb01 6303 	mla	r3, r1, r3, r6
 80247ba:	141b      	asrs	r3, r3, #16
 80247bc:	f53f af5d 	bmi.w	802467a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80247c0:	3a01      	subs	r2, #1
 80247c2:	4293      	cmp	r3, r2
 80247c4:	f6bf af59 	bge.w	802467a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80247c8:	46ca      	mov	sl, r9
 80247ca:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80247ce:	f1b8 0f00 	cmp.w	r8, #0
 80247d2:	dc67      	bgt.n	80248a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80247d4:	9b06      	ldr	r3, [sp, #24]
 80247d6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80247da:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80247de:	9b08      	ldr	r3, [sp, #32]
 80247e0:	2b00      	cmp	r3, #0
 80247e2:	f340 80d7 	ble.w	8024994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80247e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80247ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80247ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80247f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80247f6:	eeb0 6a62 	vmov.f32	s12, s5
 80247fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80247fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024802:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024806:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802480a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802480e:	ee16 4a10 	vmov	r4, s12
 8024812:	eeb0 6a43 	vmov.f32	s12, s6
 8024816:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802481a:	ee12 2a90 	vmov	r2, s5
 802481e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024822:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024824:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024828:	fb92 f3f3 	sdiv	r3, r2, r3
 802482c:	ee13 2a10 	vmov	r2, s6
 8024830:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024832:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024834:	ee16 6a10 	vmov	r6, s12
 8024838:	fb92 f3f3 	sdiv	r3, r2, r3
 802483c:	9320      	str	r3, [sp, #128]	@ 0x80
 802483e:	9b08      	ldr	r3, [sp, #32]
 8024840:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024842:	3b01      	subs	r3, #1
 8024844:	9308      	str	r3, [sp, #32]
 8024846:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024848:	bf08      	it	eq
 802484a:	4613      	moveq	r3, r2
 802484c:	eeb0 3a67 	vmov.f32	s6, s15
 8024850:	9306      	str	r3, [sp, #24]
 8024852:	eef0 2a47 	vmov.f32	s5, s14
 8024856:	e6e4      	b.n	8024622 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024858:	2900      	cmp	r1, #0
 802485a:	f43f af4e 	beq.w	80246fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802485e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024862:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024866:	9309      	str	r3, [sp, #36]	@ 0x24
 8024868:	e747      	b.n	80246fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802486a:	f112 0a01 	adds.w	sl, r2, #1
 802486e:	d481      	bmi.n	8024774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024870:	4553      	cmp	r3, sl
 8024872:	f6ff af7f 	blt.w	8024774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024876:	f11c 0a01 	adds.w	sl, ip, #1
 802487a:	f53f af7b 	bmi.w	8024774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802487e:	45d6      	cmp	lr, sl
 8024880:	f6ff af78 	blt.w	8024774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8024884:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8024888:	b21b      	sxth	r3, r3
 802488a:	fa0f f28e 	sxth.w	r2, lr
 802488e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024892:	9201      	str	r2, [sp, #4]
 8024894:	9300      	str	r3, [sp, #0]
 8024896:	9a07      	ldr	r2, [sp, #28]
 8024898:	463b      	mov	r3, r7
 802489a:	4641      	mov	r1, r8
 802489c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802489e:	f7ff fe21 	bl	80244e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80248a2:	e767      	b.n	8024774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80248a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80248a6:	1422      	asrs	r2, r4, #16
 80248a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80248ac:	1431      	asrs	r1, r6, #16
 80248ae:	fb03 2101 	mla	r1, r3, r1, r2
 80248b2:	9d07      	ldr	r5, [sp, #28]
 80248b4:	9a07      	ldr	r2, [sp, #28]
 80248b6:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80248ba:	440a      	add	r2, r1
 80248bc:	5c69      	ldrb	r1, [r5, r1]
 80248be:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80248c2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80248c6:	f1be 0f00 	cmp.w	lr, #0
 80248ca:	d05c      	beq.n	8024986 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80248cc:	f892 c001 	ldrb.w	ip, [r2, #1]
 80248d0:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80248d4:	950d      	str	r5, [sp, #52]	@ 0x34
 80248d6:	b150      	cbz	r0, 80248ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80248d8:	eb02 0c03 	add.w	ip, r2, r3
 80248dc:	5cd3      	ldrb	r3, [r2, r3]
 80248de:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80248e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80248e4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80248e8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80248ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80248ee:	fb1e f200 	smulbb	r2, lr, r0
 80248f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80248f4:	10d2      	asrs	r2, r2, #3
 80248f6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80248fa:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80248fe:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024902:	ea4c 0c03 	orr.w	ip, ip, r3
 8024906:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802490a:	9311      	str	r3, [sp, #68]	@ 0x44
 802490c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802490e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024910:	041b      	lsls	r3, r3, #16
 8024912:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8024916:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802491a:	ea43 030b 	orr.w	r3, r3, fp
 802491e:	4353      	muls	r3, r2
 8024920:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8024922:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024926:	fb05 3c0c 	mla	ip, r5, ip, r3
 802492a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802492e:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8024932:	ea43 0b01 	orr.w	fp, r3, r1
 8024936:	f1c0 0110 	rsb	r1, r0, #16
 802493a:	eba1 0e0e 	sub.w	lr, r1, lr
 802493e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8024942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024944:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024948:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802494c:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 8024950:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024954:	ea4b 0e0e 	orr.w	lr, fp, lr
 8024958:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802495c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024960:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8024964:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024968:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802496c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024970:	ea43 0c0c 	orr.w	ip, r3, ip
 8024974:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024976:	f82a cb02 	strh.w	ip, [sl], #2
 802497a:	441c      	add	r4, r3
 802497c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802497e:	f108 38ff 	add.w	r8, r8, #4294967295
 8024982:	441e      	add	r6, r3
 8024984:	e723      	b.n	80247ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8024986:	2800      	cmp	r0, #0
 8024988:	d0b1      	beq.n	80248ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802498a:	5cd3      	ldrb	r3, [r2, r3]
 802498c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024990:	930a      	str	r3, [sp, #40]	@ 0x28
 8024992:	e7ac      	b.n	80248ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8024994:	b013      	add	sp, #76	@ 0x4c
 8024996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802499a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802499a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802499e:	880d      	ldrh	r5, [r1, #0]
 80249a0:	b087      	sub	sp, #28
 80249a2:	10ef      	asrs	r7, r5, #3
 80249a4:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80249a8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80249ac:	00ed      	lsls	r5, r5, #3
 80249ae:	9701      	str	r7, [sp, #4]
 80249b0:	b2ed      	uxtb	r5, r5
 80249b2:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 80249b6:	9502      	str	r5, [sp, #8]
 80249b8:	9d01      	ldr	r5, [sp, #4]
 80249ba:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 80249be:	fb06 0709 	mla	r7, r6, r9, r0
 80249c2:	9103      	str	r1, [sp, #12]
 80249c4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 80249c8:	022d      	lsls	r5, r5, #8
 80249ca:	9902      	ldr	r1, [sp, #8]
 80249cc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80249d0:	430d      	orrs	r5, r1
 80249d2:	2e00      	cmp	r6, #0
 80249d4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80249d8:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80249dc:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 80249e0:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 80249e4:	eb02 0c07 	add.w	ip, r2, r7
 80249e8:	9505      	str	r5, [sp, #20]
 80249ea:	f2c0 80b6 	blt.w	8024b5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80249ee:	45b3      	cmp	fp, r6
 80249f0:	f340 80b3 	ble.w	8024b5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80249f4:	2800      	cmp	r0, #0
 80249f6:	f2c0 80ae 	blt.w	8024b56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80249fa:	4581      	cmp	r9, r0
 80249fc:	f340 80ab 	ble.w	8024b56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8024a00:	5dd7      	ldrb	r7, [r2, r7]
 8024a02:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024a06:	441f      	add	r7, r3
 8024a08:	1c42      	adds	r2, r0, #1
 8024a0a:	f100 80a9 	bmi.w	8024b60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024a0e:	4591      	cmp	r9, r2
 8024a10:	f340 80a6 	ble.w	8024b60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024a14:	2c00      	cmp	r4, #0
 8024a16:	f000 80a3 	beq.w	8024b60 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8024a1a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024a1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024a22:	441d      	add	r5, r3
 8024a24:	3601      	adds	r6, #1
 8024a26:	f100 809f 	bmi.w	8024b68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024a2a:	45b3      	cmp	fp, r6
 8024a2c:	f340 809c 	ble.w	8024b68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024a30:	f1be 0f00 	cmp.w	lr, #0
 8024a34:	f000 8098 	beq.w	8024b68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8024a38:	2800      	cmp	r0, #0
 8024a3a:	f2c0 8093 	blt.w	8024b64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024a3e:	4581      	cmp	r9, r0
 8024a40:	f340 8090 	ble.w	8024b64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8024a44:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8024a48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024a4c:	441e      	add	r6, r3
 8024a4e:	3001      	adds	r0, #1
 8024a50:	f100 808d 	bmi.w	8024b6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024a54:	4581      	cmp	r9, r0
 8024a56:	f340 808a 	ble.w	8024b6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024a5a:	2c00      	cmp	r4, #0
 8024a5c:	f000 8087 	beq.w	8024b6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8024a60:	44e1      	add	r9, ip
 8024a62:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024a66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024a6a:	4413      	add	r3, r2
 8024a6c:	b2a4      	uxth	r4, r4
 8024a6e:	fa1f fe8e 	uxth.w	lr, lr
 8024a72:	fb04 fb0e 	mul.w	fp, r4, lr
 8024a76:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8024a7a:	fa1f f08e 	uxth.w	r0, lr
 8024a7e:	fa1f fe88 	uxth.w	lr, r8
 8024a82:	ea6f 0808 	mvn.w	r8, r8
 8024a86:	0124      	lsls	r4, r4, #4
 8024a88:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8024a8c:	eba4 040b 	sub.w	r4, r4, fp
 8024a90:	b2a2      	uxth	r2, r4
 8024a92:	78ac      	ldrb	r4, [r5, #2]
 8024a94:	f897 c002 	ldrb.w	ip, [r7, #2]
 8024a98:	4354      	muls	r4, r2
 8024a9a:	eba9 0900 	sub.w	r9, r9, r0
 8024a9e:	fa1f f989 	uxth.w	r9, r9
 8024aa2:	fb09 440c 	mla	r4, r9, ip, r4
 8024aa6:	f896 c002 	ldrb.w	ip, [r6, #2]
 8024aaa:	fa5f f888 	uxtb.w	r8, r8
 8024aae:	fb00 440c 	mla	r4, r0, ip, r4
 8024ab2:	f893 c002 	ldrb.w	ip, [r3, #2]
 8024ab6:	fb1a fa08 	smulbb	sl, sl, r8
 8024aba:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024abe:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024ac2:	fb0c ac0e 	mla	ip, ip, lr, sl
 8024ac6:	f895 a001 	ldrb.w	sl, [r5, #1]
 8024aca:	782d      	ldrb	r5, [r5, #0]
 8024acc:	fb02 fa0a 	mul.w	sl, r2, sl
 8024ad0:	436a      	muls	r2, r5
 8024ad2:	787c      	ldrb	r4, [r7, #1]
 8024ad4:	783f      	ldrb	r7, [r7, #0]
 8024ad6:	fb09 aa04 	mla	sl, r9, r4, sl
 8024ada:	fb09 2207 	mla	r2, r9, r7, r2
 8024ade:	7874      	ldrb	r4, [r6, #1]
 8024ae0:	7835      	ldrb	r5, [r6, #0]
 8024ae2:	fb00 aa04 	mla	sl, r0, r4, sl
 8024ae6:	fb00 2005 	mla	r0, r0, r5, r2
 8024aea:	785c      	ldrb	r4, [r3, #1]
 8024aec:	781b      	ldrb	r3, [r3, #0]
 8024aee:	fb0b a404 	mla	r4, fp, r4, sl
 8024af2:	9901      	ldr	r1, [sp, #4]
 8024af4:	fb0b 0b03 	mla	fp, fp, r3, r0
 8024af8:	9b02      	ldr	r3, [sp, #8]
 8024afa:	fb11 fa08 	smulbb	sl, r1, r8
 8024afe:	fb13 f808 	smulbb	r8, r3, r8
 8024b02:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8024b06:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024b0a:	fb04 a40e 	mla	r4, r4, lr, sl
 8024b0e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8024b12:	fa1f fc8c 	uxth.w	ip, ip
 8024b16:	f10c 0301 	add.w	r3, ip, #1
 8024b1a:	fa1f fe8e 	uxth.w	lr, lr
 8024b1e:	b2a4      	uxth	r4, r4
 8024b20:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024b24:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 8024b28:	f104 0a01 	add.w	sl, r4, #1
 8024b2c:	f10e 0c01 	add.w	ip, lr, #1
 8024b30:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024b34:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024b38:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024b3c:	0964      	lsrs	r4, r4, #5
 8024b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8024b42:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8024b46:	9b03      	ldr	r3, [sp, #12]
 8024b48:	ea4c 0c04 	orr.w	ip, ip, r4
 8024b4c:	f8a3 c000 	strh.w	ip, [r3]
 8024b50:	b007      	add	sp, #28
 8024b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b56:	af05      	add	r7, sp, #20
 8024b58:	e756      	b.n	8024a08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8024b5a:	ad05      	add	r5, sp, #20
 8024b5c:	462f      	mov	r7, r5
 8024b5e:	e761      	b.n	8024a24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024b60:	ad05      	add	r5, sp, #20
 8024b62:	e75f      	b.n	8024a24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8024b64:	ae05      	add	r6, sp, #20
 8024b66:	e772      	b.n	8024a4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8024b68:	ab05      	add	r3, sp, #20
 8024b6a:	461e      	mov	r6, r3
 8024b6c:	e77e      	b.n	8024a6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8024b6e:	ab05      	add	r3, sp, #20
 8024b70:	e77c      	b.n	8024a6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08024b72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b76:	b095      	sub	sp, #84	@ 0x54
 8024b78:	9212      	str	r2, [sp, #72]	@ 0x48
 8024b7a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024b7c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b80:	6850      	ldr	r0, [r2, #4]
 8024b82:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8024b86:	910e      	str	r1, [sp, #56]	@ 0x38
 8024b88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024b8a:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8024b8e:	fb00 1303 	mla	r3, r0, r3, r1
 8024b92:	6812      	ldr	r2, [r2, #0]
 8024b94:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b9a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024b9c:	681b      	ldr	r3, [r3, #0]
 8024b9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024ba0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024ba2:	685c      	ldr	r4, [r3, #4]
 8024ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024ba6:	3404      	adds	r4, #4
 8024ba8:	43db      	mvns	r3, r3
 8024baa:	b2db      	uxtb	r3, r3
 8024bac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024bb0:	2b00      	cmp	r3, #0
 8024bb2:	dc03      	bgt.n	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024bb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024bb6:	2b00      	cmp	r3, #0
 8024bb8:	f340 8255 	ble.w	8025066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024bbc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024bbe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024bc2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024bc6:	1e48      	subs	r0, r1, #1
 8024bc8:	1e55      	subs	r5, r2, #1
 8024bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	f340 80f9 	ble.w	8024dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8024bd2:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8024bd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024bd6:	1436      	asrs	r6, r6, #16
 8024bd8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024bdc:	d406      	bmi.n	8024bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024bde:	4286      	cmp	r6, r0
 8024be0:	da04      	bge.n	8024bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024be2:	2b00      	cmp	r3, #0
 8024be4:	db02      	blt.n	8024bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024be6:	42ab      	cmp	r3, r5
 8024be8:	f2c0 80ed 	blt.w	8024dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024bec:	3601      	adds	r6, #1
 8024bee:	f100 80da 	bmi.w	8024da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024bf2:	42b1      	cmp	r1, r6
 8024bf4:	f2c0 80d7 	blt.w	8024da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024bf8:	3301      	adds	r3, #1
 8024bfa:	f100 80d4 	bmi.w	8024da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024bfe:	429a      	cmp	r2, r3
 8024c00:	f2c0 80d1 	blt.w	8024da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8024c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c06:	9311      	str	r3, [sp, #68]	@ 0x44
 8024c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024c0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8024c0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024c0e:	2b00      	cmp	r3, #0
 8024c10:	f340 80fa 	ble.w	8024e08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024c14:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8024c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024c18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024c1a:	68c6      	ldr	r6, [r0, #12]
 8024c1c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024c1e:	141d      	asrs	r5, r3, #16
 8024c20:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024c24:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024c26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024c28:	1400      	asrs	r0, r0, #16
 8024c2a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024c2e:	6892      	ldr	r2, [r2, #8]
 8024c30:	f100 813e 	bmi.w	8024eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c34:	1e57      	subs	r7, r2, #1
 8024c36:	42b8      	cmp	r0, r7
 8024c38:	f280 813a 	bge.w	8024eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c3c:	2d00      	cmp	r5, #0
 8024c3e:	f2c0 8137 	blt.w	8024eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c42:	1e77      	subs	r7, r6, #1
 8024c44:	42bd      	cmp	r5, r7
 8024c46:	f280 8133 	bge.w	8024eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024c4a:	b212      	sxth	r2, r2
 8024c4c:	fb05 0002 	mla	r0, r5, r2, r0
 8024c50:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024c52:	f815 a000 	ldrb.w	sl, [r5, r0]
 8024c56:	182e      	adds	r6, r5, r0
 8024c58:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024c5c:	eb04 050a 	add.w	r5, r4, sl
 8024c60:	2b00      	cmp	r3, #0
 8024c62:	f000 8117 	beq.w	8024e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024c66:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024c6a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024c6e:	44a4      	add	ip, r4
 8024c70:	2900      	cmp	r1, #0
 8024c72:	f000 8117 	beq.w	8024ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8024c76:	18b0      	adds	r0, r6, r2
 8024c78:	7840      	ldrb	r0, [r0, #1]
 8024c7a:	5cb2      	ldrb	r2, [r6, r2]
 8024c7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024c80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024c84:	4422      	add	r2, r4
 8024c86:	4420      	add	r0, r4
 8024c88:	b29b      	uxth	r3, r3
 8024c8a:	b289      	uxth	r1, r1
 8024c8c:	fb03 f901 	mul.w	r9, r3, r1
 8024c90:	011b      	lsls	r3, r3, #4
 8024c92:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024c96:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8024c9a:	eba3 0309 	sub.w	r3, r3, r9
 8024c9e:	b29b      	uxth	r3, r3
 8024ca0:	435f      	muls	r7, r3
 8024ca2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024ca6:	b289      	uxth	r1, r1
 8024ca8:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024cac:	eba8 0801 	sub.w	r8, r8, r1
 8024cb0:	fa1f f888 	uxth.w	r8, r8
 8024cb4:	fb08 770b 	mla	r7, r8, fp, r7
 8024cb8:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024cbc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024cbe:	fb01 770b 	mla	r7, r1, fp, r7
 8024cc2:	f8b6 e000 	ldrh.w	lr, [r6]
 8024cc6:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024cca:	9310      	str	r3, [sp, #64]	@ 0x40
 8024ccc:	fb09 770b 	mla	r7, r9, fp, r7
 8024cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024cd2:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024cd6:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024cda:	fb1b fb03 	smulbb	fp, fp, r3
 8024cde:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8024ce2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024ce6:	fb07 b706 	mla	r7, r7, r6, fp
 8024cea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024cec:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024cf0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024cf4:	f89c c000 	ldrb.w	ip, [ip]
 8024cf8:	435d      	muls	r5, r3
 8024cfa:	fb08 550b 	mla	r5, r8, fp, r5
 8024cfe:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d04:	fb01 550b 	mla	r5, r1, fp, r5
 8024d08:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024d0c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024d10:	fb09 550b 	mla	r5, r9, fp, r5
 8024d14:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024d18:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024d1c:	fb1b fb03 	smulbb	fp, fp, r3
 8024d20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024d22:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024d26:	fb03 f30c 	mul.w	r3, r3, ip
 8024d2a:	fb08 330a 	mla	r3, r8, sl, r3
 8024d2e:	f892 c000 	ldrb.w	ip, [r2]
 8024d32:	fa5f fe8e 	uxtb.w	lr, lr
 8024d36:	fb01 330c 	mla	r3, r1, ip, r3
 8024d3a:	f890 c000 	ldrb.w	ip, [r0]
 8024d3e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024d42:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d48:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024d4c:	fb1e fe03 	smulbb	lr, lr, r3
 8024d50:	fb05 b506 	mla	r5, r5, r6, fp
 8024d54:	fb0c e606 	mla	r6, ip, r6, lr
 8024d58:	b2bf      	uxth	r7, r7
 8024d5a:	1c7b      	adds	r3, r7, #1
 8024d5c:	b2ad      	uxth	r5, r5
 8024d5e:	b2b6      	uxth	r6, r6
 8024d60:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024d64:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8024d68:	f105 0b01 	add.w	fp, r5, #1
 8024d6c:	1c77      	adds	r7, r6, #1
 8024d6e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024d72:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024d76:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024d7a:	096d      	lsrs	r5, r5, #5
 8024d7c:	431f      	orrs	r7, r3
 8024d7e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024d82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d84:	433d      	orrs	r5, r7
 8024d86:	801d      	strh	r5, [r3, #0]
 8024d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024d8c:	3302      	adds	r3, #2
 8024d8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d90:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024d92:	4413      	add	r3, r2
 8024d94:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024d96:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024d98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024d9a:	4413      	add	r3, r2
 8024d9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8024d9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024da0:	3b01      	subs	r3, #1
 8024da2:	9311      	str	r3, [sp, #68]	@ 0x44
 8024da4:	e732      	b.n	8024c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024da6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024da8:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8024daa:	4433      	add	r3, r6
 8024dac:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024dae:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8024db0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024db2:	4433      	add	r3, r6
 8024db4:	9320      	str	r3, [sp, #128]	@ 0x80
 8024db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024db8:	3b01      	subs	r3, #1
 8024dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8024dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024dbe:	3302      	adds	r3, #2
 8024dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8024dc2:	e702      	b.n	8024bca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024dc4:	d027      	beq.n	8024e16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024dc8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8024dca:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024dcc:	3b01      	subs	r3, #1
 8024dce:	fb00 5003 	mla	r0, r0, r3, r5
 8024dd2:	1400      	asrs	r0, r0, #16
 8024dd4:	f53f af16 	bmi.w	8024c04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024dd8:	3901      	subs	r1, #1
 8024dda:	4288      	cmp	r0, r1
 8024ddc:	f6bf af12 	bge.w	8024c04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024de0:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8024de2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024de4:	fb01 0303 	mla	r3, r1, r3, r0
 8024de8:	141b      	asrs	r3, r3, #16
 8024dea:	f53f af0b 	bmi.w	8024c04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024dee:	3a01      	subs	r2, #1
 8024df0:	4293      	cmp	r3, r2
 8024df2:	f6bf af07 	bge.w	8024c04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024df8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8024dfc:	9311      	str	r3, [sp, #68]	@ 0x44
 8024dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024e00:	930c      	str	r3, [sp, #48]	@ 0x30
 8024e02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024e04:	2b00      	cmp	r3, #0
 8024e06:	dc70      	bgt.n	8024eea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024e0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024e10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8024e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024e18:	2b00      	cmp	r3, #0
 8024e1a:	f340 8124 	ble.w	8025066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8024e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024e22:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024e26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024e2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024e2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024e32:	eef0 6a62 	vmov.f32	s13, s5
 8024e36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024e3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024e3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024e42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024e4a:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8024e4e:	eef0 6a43 	vmov.f32	s13, s6
 8024e52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024e56:	ee12 2a90 	vmov	r2, s5
 8024e5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024e5e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024e60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e68:	ee13 2a10 	vmov	r2, s6
 8024e6c:	9321      	str	r3, [sp, #132]	@ 0x84
 8024e6e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024e70:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8024e74:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e78:	9322      	str	r3, [sp, #136]	@ 0x88
 8024e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024e7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024e7e:	3b01      	subs	r3, #1
 8024e80:	930e      	str	r3, [sp, #56]	@ 0x38
 8024e82:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024e84:	bf08      	it	eq
 8024e86:	4613      	moveq	r3, r2
 8024e88:	eeb0 3a67 	vmov.f32	s6, s15
 8024e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e8e:	eef0 2a47 	vmov.f32	s5, s14
 8024e92:	e68c      	b.n	8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024e94:	b149      	cbz	r1, 8024eaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024e96:	4628      	mov	r0, r5
 8024e98:	5cb2      	ldrb	r2, [r6, r2]
 8024e9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e9e:	4422      	add	r2, r4
 8024ea0:	46ac      	mov	ip, r5
 8024ea2:	e6f1      	b.n	8024c88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024ea4:	4628      	mov	r0, r5
 8024ea6:	462a      	mov	r2, r5
 8024ea8:	e6ee      	b.n	8024c88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024eaa:	4628      	mov	r0, r5
 8024eac:	462a      	mov	r2, r5
 8024eae:	e7f7      	b.n	8024ea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8024eb0:	1c47      	adds	r7, r0, #1
 8024eb2:	f53f af69 	bmi.w	8024d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024eb6:	42ba      	cmp	r2, r7
 8024eb8:	f6ff af66 	blt.w	8024d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024ebc:	1c6f      	adds	r7, r5, #1
 8024ebe:	f53f af63 	bmi.w	8024d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024ec2:	42be      	cmp	r6, r7
 8024ec4:	f6ff af60 	blt.w	8024d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024ec8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8024eca:	b236      	sxth	r6, r6
 8024ecc:	b212      	sxth	r2, r2
 8024ece:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024ed2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024ed6:	9002      	str	r0, [sp, #8]
 8024ed8:	9200      	str	r2, [sp, #0]
 8024eda:	9601      	str	r6, [sp, #4]
 8024edc:	4623      	mov	r3, r4
 8024ede:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8024ee2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024ee4:	f7ff fd59 	bl	802499a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024ee8:	e74e      	b.n	8024d88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8024eea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024eec:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8024eee:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024ef2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024ef4:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8024ef6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024efa:	142d      	asrs	r5, r5, #16
 8024efc:	1400      	asrs	r0, r0, #16
 8024efe:	fb02 5000 	mla	r0, r2, r0, r5
 8024f02:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024f04:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024f06:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024f0a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024f0e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024f12:	182e      	adds	r6, r5, r0
 8024f14:	eb04 0509 	add.w	r5, r4, r9
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	f000 8096 	beq.w	802504a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024f1e:	7877      	ldrb	r7, [r6, #1]
 8024f20:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024f24:	4427      	add	r7, r4
 8024f26:	2900      	cmp	r1, #0
 8024f28:	f000 8097 	beq.w	802505a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8024f2c:	18b0      	adds	r0, r6, r2
 8024f2e:	7840      	ldrb	r0, [r0, #1]
 8024f30:	5cb2      	ldrb	r2, [r6, r2]
 8024f32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f3a:	4422      	add	r2, r4
 8024f3c:	4420      	add	r0, r4
 8024f3e:	b29b      	uxth	r3, r3
 8024f40:	b289      	uxth	r1, r1
 8024f42:	fb03 f801 	mul.w	r8, r3, r1
 8024f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024f48:	011b      	lsls	r3, r3, #4
 8024f4a:	f8b6 c000 	ldrh.w	ip, [r6]
 8024f4e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024f52:	78be      	ldrb	r6, [r7, #2]
 8024f54:	eba3 0308 	sub.w	r3, r3, r8
 8024f58:	b29b      	uxth	r3, r3
 8024f5a:	435e      	muls	r6, r3
 8024f5c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024f60:	b289      	uxth	r1, r1
 8024f62:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024f66:	ebae 0e01 	sub.w	lr, lr, r1
 8024f6a:	fa1f fe8e 	uxth.w	lr, lr
 8024f6e:	fb0e 660b 	mla	r6, lr, fp, r6
 8024f72:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024f76:	9310      	str	r3, [sp, #64]	@ 0x40
 8024f78:	fb01 660b 	mla	r6, r1, fp, r6
 8024f7c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024f82:	fb08 660b 	mla	r6, r8, fp, r6
 8024f86:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024f8a:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024f8e:	fb1b fb03 	smulbb	fp, fp, r3
 8024f92:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024f96:	fb06 b60a 	mla	r6, r6, sl, fp
 8024f9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024f9c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024fa0:	787d      	ldrb	r5, [r7, #1]
 8024fa2:	783f      	ldrb	r7, [r7, #0]
 8024fa4:	435d      	muls	r5, r3
 8024fa6:	fb0e 550b 	mla	r5, lr, fp, r5
 8024faa:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024fb0:	fb01 550b 	mla	r5, r1, fp, r5
 8024fb4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024fb8:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024fbc:	fb08 550b 	mla	r5, r8, fp, r5
 8024fc0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024fc4:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024fc8:	fb1b fb03 	smulbb	fp, fp, r3
 8024fcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024fce:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024fd2:	437b      	muls	r3, r7
 8024fd4:	fb0e 3309 	mla	r3, lr, r9, r3
 8024fd8:	7817      	ldrb	r7, [r2, #0]
 8024fda:	fa5f fc8c 	uxtb.w	ip, ip
 8024fde:	fb01 3307 	mla	r3, r1, r7, r3
 8024fe2:	7807      	ldrb	r7, [r0, #0]
 8024fe4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024fe8:	fb08 3707 	mla	r7, r8, r7, r3
 8024fec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024fee:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024ff2:	fb1c fc03 	smulbb	ip, ip, r3
 8024ff6:	fb05 b50a 	mla	r5, r5, sl, fp
 8024ffa:	fb07 c70a 	mla	r7, r7, sl, ip
 8024ffe:	b2b6      	uxth	r6, r6
 8025000:	b2ad      	uxth	r5, r5
 8025002:	b2bf      	uxth	r7, r7
 8025004:	1c73      	adds	r3, r6, #1
 8025006:	1c7a      	adds	r2, r7, #1
 8025008:	f105 0b01 	add.w	fp, r5, #1
 802500c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025010:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025014:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025018:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802501c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8025020:	096d      	lsrs	r5, r5, #5
 8025022:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025024:	4316      	orrs	r6, r2
 8025026:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802502a:	432e      	orrs	r6, r5
 802502c:	f823 6b02 	strh.w	r6, [r3], #2
 8025030:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025032:	930c      	str	r3, [sp, #48]	@ 0x30
 8025034:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025036:	4413      	add	r3, r2
 8025038:	931f      	str	r3, [sp, #124]	@ 0x7c
 802503a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802503c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802503e:	4413      	add	r3, r2
 8025040:	9320      	str	r3, [sp, #128]	@ 0x80
 8025042:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025044:	3b01      	subs	r3, #1
 8025046:	9311      	str	r3, [sp, #68]	@ 0x44
 8025048:	e6db      	b.n	8024e02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802504a:	b149      	cbz	r1, 8025060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802504c:	4628      	mov	r0, r5
 802504e:	5cb2      	ldrb	r2, [r6, r2]
 8025050:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025054:	4422      	add	r2, r4
 8025056:	462f      	mov	r7, r5
 8025058:	e771      	b.n	8024f3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802505a:	4628      	mov	r0, r5
 802505c:	462a      	mov	r2, r5
 802505e:	e76e      	b.n	8024f3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025060:	4628      	mov	r0, r5
 8025062:	462a      	mov	r2, r5
 8025064:	e7f7      	b.n	8025056 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025066:	b015      	add	sp, #84	@ 0x54
 8025068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802506c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802506c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025070:	880f      	ldrh	r7, [r1, #0]
 8025072:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8025076:	023c      	lsls	r4, r7, #8
 8025078:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 802507c:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8025080:	fb05 ca0e 	mla	sl, r5, lr, ip
 8025084:	017c      	lsls	r4, r7, #5
 8025086:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 802508a:	00ff      	lsls	r7, r7, #3
 802508c:	ea4b 0404 	orr.w	r4, fp, r4
 8025090:	b2ff      	uxtb	r7, r7
 8025092:	4327      	orrs	r7, r4
 8025094:	2d00      	cmp	r5, #0
 8025096:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802509a:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 802509e:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80250a2:	eb02 080a 	add.w	r8, r2, sl
 80250a6:	9701      	str	r7, [sp, #4]
 80250a8:	db7e      	blt.n	80251a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80250aa:	45a9      	cmp	r9, r5
 80250ac:	dd7c      	ble.n	80251a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80250ae:	f1bc 0f00 	cmp.w	ip, #0
 80250b2:	db77      	blt.n	80251a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80250b4:	45e6      	cmp	lr, ip
 80250b6:	dd75      	ble.n	80251a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80250b8:	f812 700a 	ldrb.w	r7, [r2, sl]
 80250bc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80250c0:	441f      	add	r7, r3
 80250c2:	f11c 0201 	adds.w	r2, ip, #1
 80250c6:	d472      	bmi.n	80251ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80250c8:	4596      	cmp	lr, r2
 80250ca:	dd70      	ble.n	80251ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80250cc:	2800      	cmp	r0, #0
 80250ce:	d06e      	beq.n	80251ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80250d0:	f898 4001 	ldrb.w	r4, [r8, #1]
 80250d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80250d8:	441c      	add	r4, r3
 80250da:	3501      	adds	r5, #1
 80250dc:	d46b      	bmi.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80250de:	45a9      	cmp	r9, r5
 80250e0:	dd69      	ble.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80250e2:	2e00      	cmp	r6, #0
 80250e4:	d067      	beq.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80250e6:	f1bc 0f00 	cmp.w	ip, #0
 80250ea:	db62      	blt.n	80251b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80250ec:	45e6      	cmp	lr, ip
 80250ee:	dd60      	ble.n	80251b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80250f0:	f818 500e 	ldrb.w	r5, [r8, lr]
 80250f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80250f8:	441d      	add	r5, r3
 80250fa:	f11c 0201 	adds.w	r2, ip, #1
 80250fe:	d45d      	bmi.n	80251bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025100:	4596      	cmp	lr, r2
 8025102:	dd5b      	ble.n	80251bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025104:	2800      	cmp	r0, #0
 8025106:	d059      	beq.n	80251bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025108:	44c6      	add	lr, r8
 802510a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802510e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025112:	4413      	add	r3, r2
 8025114:	b280      	uxth	r0, r0
 8025116:	b2b2      	uxth	r2, r6
 8025118:	fb00 f602 	mul.w	r6, r0, r2
 802511c:	0100      	lsls	r0, r0, #4
 802511e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025122:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8025126:	1b80      	subs	r0, r0, r6
 8025128:	fa1f fc82 	uxth.w	ip, r2
 802512c:	b282      	uxth	r2, r0
 802512e:	78a0      	ldrb	r0, [r4, #2]
 8025130:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025134:	4350      	muls	r0, r2
 8025136:	eba8 080c 	sub.w	r8, r8, ip
 802513a:	fa1f f888 	uxth.w	r8, r8
 802513e:	fb08 0e0e 	mla	lr, r8, lr, r0
 8025142:	78a8      	ldrb	r0, [r5, #2]
 8025144:	f897 9000 	ldrb.w	r9, [r7]
 8025148:	fb0c e000 	mla	r0, ip, r0, lr
 802514c:	f893 e002 	ldrb.w	lr, [r3, #2]
 8025150:	787f      	ldrb	r7, [r7, #1]
 8025152:	fb06 0e0e 	mla	lr, r6, lr, r0
 8025156:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 802515a:	f894 e000 	ldrb.w	lr, [r4]
 802515e:	fb02 fe0e 	mul.w	lr, r2, lr
 8025162:	fb08 e909 	mla	r9, r8, r9, lr
 8025166:	f895 e000 	ldrb.w	lr, [r5]
 802516a:	fb0c 990e 	mla	r9, ip, lr, r9
 802516e:	f893 e000 	ldrb.w	lr, [r3]
 8025172:	785b      	ldrb	r3, [r3, #1]
 8025174:	fb06 9e0e 	mla	lr, r6, lr, r9
 8025178:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802517c:	ea4e 0e00 	orr.w	lr, lr, r0
 8025180:	7860      	ldrb	r0, [r4, #1]
 8025182:	4350      	muls	r0, r2
 8025184:	fb08 0007 	mla	r0, r8, r7, r0
 8025188:	786a      	ldrb	r2, [r5, #1]
 802518a:	fb0c 0202 	mla	r2, ip, r2, r0
 802518e:	fb06 2303 	mla	r3, r6, r3, r2
 8025192:	095b      	lsrs	r3, r3, #5
 8025194:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025198:	ea4e 0303 	orr.w	r3, lr, r3
 802519c:	800b      	strh	r3, [r1, #0]
 802519e:	b003      	add	sp, #12
 80251a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251a4:	af01      	add	r7, sp, #4
 80251a6:	e78c      	b.n	80250c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80251a8:	ac01      	add	r4, sp, #4
 80251aa:	4627      	mov	r7, r4
 80251ac:	e795      	b.n	80250da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80251ae:	ac01      	add	r4, sp, #4
 80251b0:	e793      	b.n	80250da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80251b2:	ad01      	add	r5, sp, #4
 80251b4:	e7a1      	b.n	80250fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80251b6:	ab01      	add	r3, sp, #4
 80251b8:	461d      	mov	r5, r3
 80251ba:	e7ab      	b.n	8025114 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 80251bc:	ab01      	add	r3, sp, #4
 80251be:	e7a9      	b.n	8025114 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

080251c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80251c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251c4:	b08f      	sub	sp, #60	@ 0x3c
 80251c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80251c8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80251ca:	900d      	str	r0, [sp, #52]	@ 0x34
 80251cc:	6850      	ldr	r0, [r2, #4]
 80251ce:	910a      	str	r1, [sp, #40]	@ 0x28
 80251d0:	9306      	str	r3, [sp, #24]
 80251d2:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 80251d6:	fb00 1303 	mla	r3, r0, r3, r1
 80251da:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 80251de:	6812      	ldr	r2, [r2, #0]
 80251e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80251e4:	9307      	str	r3, [sp, #28]
 80251e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80251e8:	681b      	ldr	r3, [r3, #0]
 80251ea:	9308      	str	r3, [sp, #32]
 80251ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80251ee:	685c      	ldr	r4, [r3, #4]
 80251f0:	3404      	adds	r4, #4
 80251f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80251f4:	2b00      	cmp	r3, #0
 80251f6:	dc03      	bgt.n	8025200 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80251f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80251fa:	2b00      	cmp	r3, #0
 80251fc:	f340 81d6 	ble.w	80255ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8025200:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025202:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025206:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802520a:	1e48      	subs	r0, r1, #1
 802520c:	1e56      	subs	r6, r2, #1
 802520e:	9b06      	ldr	r3, [sp, #24]
 8025210:	2b00      	cmp	r3, #0
 8025212:	f340 80b7 	ble.w	8025384 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8025216:	ea5f 472b 	movs.w	r7, fp, asr #16
 802521a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802521e:	d406      	bmi.n	802522e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025220:	4287      	cmp	r7, r0
 8025222:	da04      	bge.n	802522e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025224:	2b00      	cmp	r3, #0
 8025226:	db02      	blt.n	802522e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025228:	42b3      	cmp	r3, r6
 802522a:	f2c0 80ac 	blt.w	8025386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802522e:	3701      	adds	r7, #1
 8025230:	f100 809d 	bmi.w	802536e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025234:	42b9      	cmp	r1, r7
 8025236:	f2c0 809a 	blt.w	802536e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802523a:	3301      	adds	r3, #1
 802523c:	f100 8097 	bmi.w	802536e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025240:	429a      	cmp	r2, r3
 8025242:	f2c0 8094 	blt.w	802536e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025246:	9b06      	ldr	r3, [sp, #24]
 8025248:	930b      	str	r3, [sp, #44]	@ 0x2c
 802524a:	9b07      	ldr	r3, [sp, #28]
 802524c:	9309      	str	r3, [sp, #36]	@ 0x24
 802524e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025250:	2b00      	cmp	r3, #0
 8025252:	f340 80b5 	ble.w	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025256:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8025258:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802525a:	68c7      	ldr	r7, [r0, #12]
 802525c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025260:	ea4f 4625 	mov.w	r6, r5, asr #16
 8025264:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025268:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802526c:	6892      	ldr	r2, [r2, #8]
 802526e:	f100 80fb 	bmi.w	8025468 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025272:	f102 3cff 	add.w	ip, r2, #4294967295
 8025276:	4560      	cmp	r0, ip
 8025278:	f280 80f6 	bge.w	8025468 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802527c:	2e00      	cmp	r6, #0
 802527e:	f2c0 80f3 	blt.w	8025468 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025282:	f107 3cff 	add.w	ip, r7, #4294967295
 8025286:	4566      	cmp	r6, ip
 8025288:	f280 80ee 	bge.w	8025468 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802528c:	b212      	sxth	r2, r2
 802528e:	fb06 0002 	mla	r0, r6, r2, r0
 8025292:	9e08      	ldr	r6, [sp, #32]
 8025294:	1837      	adds	r7, r6, r0
 8025296:	5c30      	ldrb	r0, [r6, r0]
 8025298:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802529c:	eb04 0c08 	add.w	ip, r4, r8
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	f000 80d3 	beq.w	802544c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80252a6:	787e      	ldrb	r6, [r7, #1]
 80252a8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80252ac:	4426      	add	r6, r4
 80252ae:	2900      	cmp	r1, #0
 80252b0:	f000 80d4 	beq.w	802545c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80252b4:	18b8      	adds	r0, r7, r2
 80252b6:	7840      	ldrb	r0, [r0, #1]
 80252b8:	5cba      	ldrb	r2, [r7, r2]
 80252ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80252be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80252c2:	4422      	add	r2, r4
 80252c4:	4420      	add	r0, r4
 80252c6:	b29b      	uxth	r3, r3
 80252c8:	b289      	uxth	r1, r1
 80252ca:	fb03 f901 	mul.w	r9, r3, r1
 80252ce:	011b      	lsls	r3, r3, #4
 80252d0:	78b7      	ldrb	r7, [r6, #2]
 80252d2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80252d6:	eba3 0309 	sub.w	r3, r3, r9
 80252da:	b29b      	uxth	r3, r3
 80252dc:	435f      	muls	r7, r3
 80252de:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80252e2:	b289      	uxth	r1, r1
 80252e4:	f89c a002 	ldrb.w	sl, [ip, #2]
 80252e8:	ebae 0e01 	sub.w	lr, lr, r1
 80252ec:	fa1f fe8e 	uxth.w	lr, lr
 80252f0:	fb0e 770a 	mla	r7, lr, sl, r7
 80252f4:	f892 a002 	ldrb.w	sl, [r2, #2]
 80252f8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80252fc:	fb01 770a 	mla	r7, r1, sl, r7
 8025300:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025304:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025308:	f814 7008 	ldrb.w	r7, [r4, r8]
 802530c:	f896 8000 	ldrb.w	r8, [r6]
 8025310:	7876      	ldrb	r6, [r6, #1]
 8025312:	fb03 f808 	mul.w	r8, r3, r8
 8025316:	fb0e 8807 	mla	r8, lr, r7, r8
 802531a:	7817      	ldrb	r7, [r2, #0]
 802531c:	4373      	muls	r3, r6
 802531e:	fb01 8807 	mla	r8, r1, r7, r8
 8025322:	7807      	ldrb	r7, [r0, #0]
 8025324:	fb0e 330c 	mla	r3, lr, ip, r3
 8025328:	fb09 8707 	mla	r7, r9, r7, r8
 802532c:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8025330:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025334:	ea47 070a 	orr.w	r7, r7, sl
 8025338:	f892 a001 	ldrb.w	sl, [r2, #1]
 802533c:	fb01 310a 	mla	r1, r1, sl, r3
 8025340:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025346:	fb09 1a0a 	mla	sl, r9, sl, r1
 802534a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802534e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8025352:	ea47 070a 	orr.w	r7, r7, sl
 8025356:	801f      	strh	r7, [r3, #0]
 8025358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802535a:	3302      	adds	r3, #2
 802535c:	9309      	str	r3, [sp, #36]	@ 0x24
 802535e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025360:	449b      	add	fp, r3
 8025362:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025364:	441d      	add	r5, r3
 8025366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025368:	3b01      	subs	r3, #1
 802536a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802536c:	e76f      	b.n	802524e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802536e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025370:	449b      	add	fp, r3
 8025372:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025374:	441d      	add	r5, r3
 8025376:	9b06      	ldr	r3, [sp, #24]
 8025378:	3b01      	subs	r3, #1
 802537a:	9306      	str	r3, [sp, #24]
 802537c:	9b07      	ldr	r3, [sp, #28]
 802537e:	3302      	adds	r3, #2
 8025380:	9307      	str	r3, [sp, #28]
 8025382:	e744      	b.n	802520e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8025384:	d023      	beq.n	80253ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025386:	9b06      	ldr	r3, [sp, #24]
 8025388:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802538a:	3b01      	subs	r3, #1
 802538c:	fb00 b003 	mla	r0, r0, r3, fp
 8025390:	1400      	asrs	r0, r0, #16
 8025392:	f53f af58 	bmi.w	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025396:	3901      	subs	r1, #1
 8025398:	4288      	cmp	r0, r1
 802539a:	f6bf af54 	bge.w	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802539e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80253a0:	fb01 5303 	mla	r3, r1, r3, r5
 80253a4:	141b      	asrs	r3, r3, #16
 80253a6:	f53f af4e 	bmi.w	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80253aa:	3a01      	subs	r2, #1
 80253ac:	4293      	cmp	r3, r2
 80253ae:	f6bf af4a 	bge.w	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80253b2:	9b06      	ldr	r3, [sp, #24]
 80253b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80253b6:	9b07      	ldr	r3, [sp, #28]
 80253b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80253ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253bc:	2b00      	cmp	r3, #0
 80253be:	dc70      	bgt.n	80254a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80253c0:	9b06      	ldr	r3, [sp, #24]
 80253c2:	9a07      	ldr	r2, [sp, #28]
 80253c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80253c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80253cc:	9307      	str	r3, [sp, #28]
 80253ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80253d0:	2b00      	cmp	r3, #0
 80253d2:	f340 80eb 	ble.w	80255ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80253d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80253da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80253de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80253e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80253e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80253ea:	eef0 6a62 	vmov.f32	s13, s5
 80253ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80253f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80253f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80253fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025402:	ee16 ba90 	vmov	fp, s13
 8025406:	eef0 6a43 	vmov.f32	s13, s6
 802540a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802540e:	ee12 2a90 	vmov	r2, s5
 8025412:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025416:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025418:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802541c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025420:	ee13 2a10 	vmov	r2, s6
 8025424:	931b      	str	r3, [sp, #108]	@ 0x6c
 8025426:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025428:	ee16 5a90 	vmov	r5, s13
 802542c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025430:	931c      	str	r3, [sp, #112]	@ 0x70
 8025432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025434:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025436:	3b01      	subs	r3, #1
 8025438:	930a      	str	r3, [sp, #40]	@ 0x28
 802543a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802543c:	bf08      	it	eq
 802543e:	4613      	moveq	r3, r2
 8025440:	eeb0 3a67 	vmov.f32	s6, s15
 8025444:	9306      	str	r3, [sp, #24]
 8025446:	eef0 2a47 	vmov.f32	s5, s14
 802544a:	e6d2      	b.n	80251f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802544c:	b149      	cbz	r1, 8025462 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802544e:	4660      	mov	r0, ip
 8025450:	5cba      	ldrb	r2, [r7, r2]
 8025452:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025456:	4422      	add	r2, r4
 8025458:	4666      	mov	r6, ip
 802545a:	e734      	b.n	80252c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802545c:	4660      	mov	r0, ip
 802545e:	4662      	mov	r2, ip
 8025460:	e731      	b.n	80252c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8025462:	4660      	mov	r0, ip
 8025464:	4662      	mov	r2, ip
 8025466:	e7f7      	b.n	8025458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8025468:	f110 0c01 	adds.w	ip, r0, #1
 802546c:	f53f af74 	bmi.w	8025358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025470:	4562      	cmp	r2, ip
 8025472:	f6ff af71 	blt.w	8025358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025476:	f116 0c01 	adds.w	ip, r6, #1
 802547a:	f53f af6d 	bmi.w	8025358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802547e:	4567      	cmp	r7, ip
 8025480:	f6ff af6a 	blt.w	8025358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025484:	b23f      	sxth	r7, r7
 8025486:	b212      	sxth	r2, r2
 8025488:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802548c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025490:	9200      	str	r2, [sp, #0]
 8025492:	9701      	str	r7, [sp, #4]
 8025494:	4623      	mov	r3, r4
 8025496:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802549a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802549c:	f7ff fde6 	bl	802506c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80254a0:	e75a      	b.n	8025358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80254a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80254a4:	ea4f 462b 	mov.w	r6, fp, asr #16
 80254a8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80254ac:	1428      	asrs	r0, r5, #16
 80254ae:	fb02 6000 	mla	r0, r2, r0, r6
 80254b2:	9e08      	ldr	r6, [sp, #32]
 80254b4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80254b8:	f816 8000 	ldrb.w	r8, [r6, r0]
 80254bc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80254c0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80254c4:	1837      	adds	r7, r6, r0
 80254c6:	eb04 0c08 	add.w	ip, r4, r8
 80254ca:	2b00      	cmp	r3, #0
 80254cc:	d060      	beq.n	8025590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 80254ce:	787e      	ldrb	r6, [r7, #1]
 80254d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80254d4:	4426      	add	r6, r4
 80254d6:	2900      	cmp	r1, #0
 80254d8:	d062      	beq.n	80255a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 80254da:	18b8      	adds	r0, r7, r2
 80254dc:	7840      	ldrb	r0, [r0, #1]
 80254de:	5cba      	ldrb	r2, [r7, r2]
 80254e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80254e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80254e8:	4422      	add	r2, r4
 80254ea:	4420      	add	r0, r4
 80254ec:	b29b      	uxth	r3, r3
 80254ee:	b289      	uxth	r1, r1
 80254f0:	fb03 f901 	mul.w	r9, r3, r1
 80254f4:	011b      	lsls	r3, r3, #4
 80254f6:	78b7      	ldrb	r7, [r6, #2]
 80254f8:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80254fc:	eba3 0309 	sub.w	r3, r3, r9
 8025500:	b29b      	uxth	r3, r3
 8025502:	435f      	muls	r7, r3
 8025504:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025508:	b289      	uxth	r1, r1
 802550a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802550e:	ebae 0e01 	sub.w	lr, lr, r1
 8025512:	fa1f fe8e 	uxth.w	lr, lr
 8025516:	fb0e 770a 	mla	r7, lr, sl, r7
 802551a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802551e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025522:	fb01 770a 	mla	r7, r1, sl, r7
 8025526:	f890 a002 	ldrb.w	sl, [r0, #2]
 802552a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802552e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025532:	f896 8000 	ldrb.w	r8, [r6]
 8025536:	7876      	ldrb	r6, [r6, #1]
 8025538:	fb03 f808 	mul.w	r8, r3, r8
 802553c:	fb0e 8807 	mla	r8, lr, r7, r8
 8025540:	7817      	ldrb	r7, [r2, #0]
 8025542:	4373      	muls	r3, r6
 8025544:	fb01 8807 	mla	r8, r1, r7, r8
 8025548:	7807      	ldrb	r7, [r0, #0]
 802554a:	fb0e 330c 	mla	r3, lr, ip, r3
 802554e:	fb09 8707 	mla	r7, r9, r7, r8
 8025552:	7856      	ldrb	r6, [r2, #1]
 8025554:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8025558:	fb01 3306 	mla	r3, r1, r6, r3
 802555c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025560:	ea47 070a 	orr.w	r7, r7, sl
 8025564:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025568:	fb09 3a0a 	mla	sl, r9, sl, r3
 802556c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025572:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8025576:	ea47 070a 	orr.w	r7, r7, sl
 802557a:	f823 7b02 	strh.w	r7, [r3], #2
 802557e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025580:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025582:	449b      	add	fp, r3
 8025584:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025586:	441d      	add	r5, r3
 8025588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802558a:	3b01      	subs	r3, #1
 802558c:	9309      	str	r3, [sp, #36]	@ 0x24
 802558e:	e714      	b.n	80253ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025590:	b149      	cbz	r1, 80255a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025592:	4660      	mov	r0, ip
 8025594:	5cba      	ldrb	r2, [r7, r2]
 8025596:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802559a:	4422      	add	r2, r4
 802559c:	4666      	mov	r6, ip
 802559e:	e7a5      	b.n	80254ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80255a0:	4660      	mov	r0, ip
 80255a2:	4662      	mov	r2, ip
 80255a4:	e7a2      	b.n	80254ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80255a6:	4660      	mov	r0, ip
 80255a8:	4662      	mov	r2, ip
 80255aa:	e7f7      	b.n	802559c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 80255ac:	b00f      	add	sp, #60	@ 0x3c
 80255ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080255b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80255b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255b6:	b085      	sub	sp, #20
 80255b8:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 80255bc:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 80255c0:	9102      	str	r1, [sp, #8]
 80255c2:	fb04 710c 	mla	r1, r4, ip, r7
 80255c6:	2c00      	cmp	r4, #0
 80255c8:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 80255cc:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80255d0:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80255d4:	eb02 0e01 	add.w	lr, r2, r1
 80255d8:	f2c0 8122 	blt.w	8025820 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80255dc:	45a0      	cmp	r8, r4
 80255de:	f340 811f 	ble.w	8025820 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80255e2:	2f00      	cmp	r7, #0
 80255e4:	f2c0 811a 	blt.w	802581c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80255e8:	45bc      	cmp	ip, r7
 80255ea:	f340 8117 	ble.w	802581c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80255ee:	5c52      	ldrb	r2, [r2, r1]
 80255f0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80255f4:	1c7a      	adds	r2, r7, #1
 80255f6:	f100 8116 	bmi.w	8025826 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80255fa:	4594      	cmp	ip, r2
 80255fc:	f340 8113 	ble.w	8025826 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8025600:	2e00      	cmp	r6, #0
 8025602:	f000 8112 	beq.w	802582a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8025606:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802560a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802560e:	3401      	adds	r4, #1
 8025610:	f100 810f 	bmi.w	8025832 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8025614:	45a0      	cmp	r8, r4
 8025616:	f340 810c 	ble.w	8025832 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802561a:	2800      	cmp	r0, #0
 802561c:	f000 810c 	beq.w	8025838 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8025620:	2f00      	cmp	r7, #0
 8025622:	f2c0 8104 	blt.w	802582e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8025626:	45bc      	cmp	ip, r7
 8025628:	f340 8101 	ble.w	802582e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802562c:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8025630:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025634:	3701      	adds	r7, #1
 8025636:	f100 8102 	bmi.w	802583e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802563a:	45bc      	cmp	ip, r7
 802563c:	f340 80ff 	ble.w	802583e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8025640:	2e00      	cmp	r6, #0
 8025642:	f000 80fe 	beq.w	8025842 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8025646:	44f4      	add	ip, lr
 8025648:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802564c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025650:	b2b6      	uxth	r6, r6
 8025652:	b280      	uxth	r0, r0
 8025654:	fb00 fe06 	mul.w	lr, r0, r6
 8025658:	0136      	lsls	r6, r6, #4
 802565a:	eba6 070e 	sub.w	r7, r6, lr
 802565e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8025662:	b2bf      	uxth	r7, r7
 8025664:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8025668:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802566c:	fb0a f607 	mul.w	r6, sl, r7
 8025670:	b280      	uxth	r0, r0
 8025672:	1a1b      	subs	r3, r3, r0
 8025674:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8025678:	b29b      	uxth	r3, r3
 802567a:	fb0b 6603 	mla	r6, fp, r3, r6
 802567e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025682:	fb00 6609 	mla	r6, r0, r9, r6
 8025686:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802568a:	fb0e 6608 	mla	r6, lr, r8, r6
 802568e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025692:	9600      	str	r6, [sp, #0]
 8025694:	2e00      	cmp	r6, #0
 8025696:	f000 80be 	beq.w	8025816 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802569a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802569e:	fb0b fc0c 	mul.w	ip, fp, ip
 80256a2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80256a6:	fb0b f505 	mul.w	r5, fp, r5
 80256aa:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80256ae:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80256b2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80256b6:	44dc      	add	ip, fp
 80256b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256bc:	9501      	str	r5, [sp, #4]
 80256be:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80256c2:	9503      	str	r5, [sp, #12]
 80256c4:	9d01      	ldr	r5, [sp, #4]
 80256c6:	9e02      	ldr	r6, [sp, #8]
 80256c8:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80256cc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80256d0:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80256d4:	fb0a fc0c 	mul.w	ip, sl, ip
 80256d8:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80256dc:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80256e0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80256e4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80256e8:	4465      	add	r5, ip
 80256ea:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80256ee:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80256f2:	fb09 fc0c 	mul.w	ip, r9, ip
 80256f6:	fb09 f904 	mul.w	r9, r9, r4
 80256fa:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80256fe:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8025702:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8025706:	fb08 f404 	mul.w	r4, r8, r4
 802570a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802570e:	fb08 f802 	mul.w	r8, r8, r2
 8025712:	0a2d      	lsrs	r5, r5, #8
 8025714:	0a22      	lsrs	r2, r4, #8
 8025716:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802571a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802571e:	437d      	muls	r5, r7
 8025720:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8025724:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8025728:	4414      	add	r4, r2
 802572a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802572e:	fb0a fa01 	mul.w	sl, sl, r1
 8025732:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025736:	9a03      	ldr	r2, [sp, #12]
 8025738:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802573c:	fb02 5503 	mla	r5, r2, r3, r5
 8025740:	0a24      	lsrs	r4, r4, #8
 8025742:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8025746:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802574a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802574e:	fb04 540e 	mla	r4, r4, lr, r5
 8025752:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8025756:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802575a:	4461      	add	r1, ip
 802575c:	0a09      	lsrs	r1, r1, #8
 802575e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8025762:	fb01 4100 	mla	r1, r1, r0, r4
 8025766:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802576a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802576e:	fb07 f70a 	mul.w	r7, r7, sl
 8025772:	0a09      	lsrs	r1, r1, #8
 8025774:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8025778:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802577c:	fb03 7101 	mla	r1, r3, r1, r7
 8025780:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025784:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8025788:	fb0e 1e08 	mla	lr, lr, r8, r1
 802578c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025790:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8025794:	fb00 e101 	mla	r1, r0, r1, lr
 8025798:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 802579c:	9a00      	ldr	r2, [sp, #0]
 802579e:	b287      	uxth	r7, r0
 80257a0:	437a      	muls	r2, r7
 80257a2:	1c53      	adds	r3, r2, #1
 80257a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80257a8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80257ac:	0a09      	lsrs	r1, r1, #8
 80257ae:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80257b2:	4321      	orrs	r1, r4
 80257b4:	0c0a      	lsrs	r2, r1, #16
 80257b6:	8836      	ldrh	r6, [r6, #0]
 80257b8:	fb12 f207 	smulbb	r2, r2, r7
 80257bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80257c0:	b2c8      	uxtb	r0, r1
 80257c2:	1235      	asrs	r5, r6, #8
 80257c4:	fb14 f407 	smulbb	r4, r4, r7
 80257c8:	fb10 f007 	smulbb	r0, r0, r7
 80257cc:	b2db      	uxtb	r3, r3
 80257ce:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80257d2:	fb05 2503 	mla	r5, r5, r3, r2
 80257d6:	10f2      	asrs	r2, r6, #3
 80257d8:	00f6      	lsls	r6, r6, #3
 80257da:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80257de:	b2f6      	uxtb	r6, r6
 80257e0:	fb02 4203 	mla	r2, r2, r3, r4
 80257e4:	fb06 0303 	mla	r3, r6, r3, r0
 80257e8:	b2ad      	uxth	r5, r5
 80257ea:	b299      	uxth	r1, r3
 80257ec:	b294      	uxth	r4, r2
 80257ee:	1c6b      	adds	r3, r5, #1
 80257f0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80257f4:	1c62      	adds	r2, r4, #1
 80257f6:	1c4b      	adds	r3, r1, #1
 80257f8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80257fc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8025800:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025804:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025808:	0952      	lsrs	r2, r2, #5
 802580a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802580e:	432b      	orrs	r3, r5
 8025810:	4313      	orrs	r3, r2
 8025812:	9a02      	ldr	r2, [sp, #8]
 8025814:	8013      	strh	r3, [r2, #0]
 8025816:	b005      	add	sp, #20
 8025818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802581c:	2500      	movs	r5, #0
 802581e:	e6e9      	b.n	80255f4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8025820:	2100      	movs	r1, #0
 8025822:	460d      	mov	r5, r1
 8025824:	e6f3      	b.n	802560e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025826:	2100      	movs	r1, #0
 8025828:	e6f1      	b.n	802560e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802582a:	4631      	mov	r1, r6
 802582c:	e6ef      	b.n	802560e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802582e:	2400      	movs	r4, #0
 8025830:	e700      	b.n	8025634 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8025832:	2200      	movs	r2, #0
 8025834:	4614      	mov	r4, r2
 8025836:	e70b      	b.n	8025650 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025838:	4602      	mov	r2, r0
 802583a:	4604      	mov	r4, r0
 802583c:	e708      	b.n	8025650 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802583e:	2200      	movs	r2, #0
 8025840:	e706      	b.n	8025650 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8025842:	4632      	mov	r2, r6
 8025844:	e704      	b.n	8025650 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802584a:	b09f      	sub	sp, #124	@ 0x7c
 802584c:	921b      	str	r2, [sp, #108]	@ 0x6c
 802584e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8025850:	901d      	str	r0, [sp, #116]	@ 0x74
 8025852:	9309      	str	r3, [sp, #36]	@ 0x24
 8025854:	6850      	ldr	r0, [r2, #4]
 8025856:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802585a:	9119      	str	r1, [sp, #100]	@ 0x64
 802585c:	931c      	str	r3, [sp, #112]	@ 0x70
 802585e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8025862:	fb00 1303 	mla	r3, r0, r3, r1
 8025866:	6812      	ldr	r2, [r2, #0]
 8025868:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 802586a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802586e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025870:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025872:	681b      	ldr	r3, [r3, #0]
 8025874:	9312      	str	r3, [sp, #72]	@ 0x48
 8025876:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025878:	685e      	ldr	r6, [r3, #4]
 802587a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802587e:	3604      	adds	r6, #4
 8025880:	930d      	str	r3, [sp, #52]	@ 0x34
 8025882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025884:	2b00      	cmp	r3, #0
 8025886:	dc03      	bgt.n	8025890 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025888:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802588a:	2b00      	cmp	r3, #0
 802588c:	f340 8387 	ble.w	8025f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025890:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025892:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025896:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802589a:	1e48      	subs	r0, r1, #1
 802589c:	1e57      	subs	r7, r2, #1
 802589e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258a0:	2b00      	cmp	r3, #0
 80258a2:	f340 8194 	ble.w	8025bce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80258a6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80258a8:	142b      	asrs	r3, r5, #16
 80258aa:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80258ae:	d406      	bmi.n	80258be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80258b0:	4584      	cmp	ip, r0
 80258b2:	da04      	bge.n	80258be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80258b4:	2b00      	cmp	r3, #0
 80258b6:	db02      	blt.n	80258be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80258b8:	42bb      	cmp	r3, r7
 80258ba:	f2c0 8189 	blt.w	8025bd0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80258be:	f11c 0c01 	adds.w	ip, ip, #1
 80258c2:	f100 8177 	bmi.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80258c6:	4561      	cmp	r1, ip
 80258c8:	f2c0 8174 	blt.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80258cc:	3301      	adds	r3, #1
 80258ce:	f100 8171 	bmi.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80258d2:	429a      	cmp	r2, r3
 80258d4:	f2c0 816e 	blt.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80258d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258da:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80258dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80258de:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80258e0:	2b00      	cmp	r3, #0
 80258e2:	f340 8193 	ble.w	8025c0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80258e6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80258e8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80258ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80258f0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80258f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80258f6:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80258fa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80258fc:	141b      	asrs	r3, r3, #16
 80258fe:	f100 81d6 	bmi.w	8025cae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025902:	f100 38ff 	add.w	r8, r0, #4294967295
 8025906:	4543      	cmp	r3, r8
 8025908:	f280 81d1 	bge.w	8025cae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802590c:	f1bc 0f00 	cmp.w	ip, #0
 8025910:	f2c0 81cd 	blt.w	8025cae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8025914:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025918:	45c4      	cmp	ip, r8
 802591a:	f280 81c8 	bge.w	8025cae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802591e:	b200      	sxth	r0, r0
 8025920:	fb0c 3300 	mla	r3, ip, r0, r3
 8025924:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025926:	eb04 0803 	add.w	r8, r4, r3
 802592a:	5ce3      	ldrb	r3, [r4, r3]
 802592c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025930:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025934:	2a00      	cmp	r2, #0
 8025936:	f000 81af 	beq.w	8025c98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802593a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802593e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025942:	940e      	str	r4, [sp, #56]	@ 0x38
 8025944:	0e24      	lsrs	r4, r4, #24
 8025946:	9415      	str	r4, [sp, #84]	@ 0x54
 8025948:	b179      	cbz	r1, 802596a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802594a:	eb08 0c00 	add.w	ip, r8, r0
 802594e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025952:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025956:	900a      	str	r0, [sp, #40]	@ 0x28
 8025958:	0e00      	lsrs	r0, r0, #24
 802595a:	9013      	str	r0, [sp, #76]	@ 0x4c
 802595c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025960:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025964:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025966:	0e00      	lsrs	r0, r0, #24
 8025968:	9016      	str	r0, [sp, #88]	@ 0x58
 802596a:	b292      	uxth	r2, r2
 802596c:	b289      	uxth	r1, r1
 802596e:	fb02 f901 	mul.w	r9, r2, r1
 8025972:	0112      	lsls	r2, r2, #4
 8025974:	eba2 0809 	sub.w	r8, r2, r9
 8025978:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802597a:	fa1f f888 	uxth.w	r8, r8
 802597e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025982:	fb08 f000 	mul.w	r0, r8, r0
 8025986:	b289      	uxth	r1, r1
 8025988:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802598c:	1a52      	subs	r2, r2, r1
 802598e:	b292      	uxth	r2, r2
 8025990:	fb02 000e 	mla	r0, r2, lr, r0
 8025994:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025996:	fb01 0004 	mla	r0, r1, r4, r0
 802599a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802599c:	fb09 0004 	mla	r0, r9, r4, r0
 80259a0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80259a4:	2800      	cmp	r0, #0
 80259a6:	f000 80fa 	beq.w	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80259aa:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80259ae:	d01b      	beq.n	80259e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80259b0:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80259b4:	fb0e fa0a 	mul.w	sl, lr, sl
 80259b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80259bc:	fb0e fe03 	mul.w	lr, lr, r3
 80259c0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80259c4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80259c8:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80259cc:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80259d0:	4453      	add	r3, sl
 80259d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80259d6:	0a1b      	lsrs	r3, r3, #8
 80259d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259dc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80259e0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80259e4:	ea43 030c 	orr.w	r3, r3, ip
 80259e8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80259ea:	2cff      	cmp	r4, #255	@ 0xff
 80259ec:	d021      	beq.n	8025a32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80259ee:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80259f0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80259f4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80259f6:	fb04 fb0b 	mul.w	fp, r4, fp
 80259fa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80259fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025a00:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a04:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025a06:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a0a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a0e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025a12:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025a16:	44de      	add	lr, fp
 8025a18:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025a1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a28:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025a2c:	ea4e 040a 	orr.w	r4, lr, sl
 8025a30:	940e      	str	r4, [sp, #56]	@ 0x38
 8025a32:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025a34:	2cff      	cmp	r4, #255	@ 0xff
 8025a36:	d021      	beq.n	8025a7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8025a38:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a3a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025a3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025a40:	fb04 fb0b 	mul.w	fp, r4, fp
 8025a44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a46:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025a4a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a4e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025a50:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a54:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a58:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025a5c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025a60:	44de      	add	lr, fp
 8025a62:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025a66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a6e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a72:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025a76:	ea4e 040a 	orr.w	r4, lr, sl
 8025a7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8025a7c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025a7e:	2cff      	cmp	r4, #255	@ 0xff
 8025a80:	d021      	beq.n	8025ac6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8025a82:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025a84:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025a88:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025a8a:	fb04 fb0b 	mul.w	fp, r4, fp
 8025a8e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025a90:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025a94:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025a98:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025a9a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a9e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025aa2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025aa6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025aaa:	44de      	add	lr, fp
 8025aac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025ab0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ab4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ab8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025abc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025ac0:	ea4e 040a 	orr.w	r4, lr, sl
 8025ac4:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025ac6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025ac8:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025acc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025ad0:	fb08 fc0c 	mul.w	ip, r8, ip
 8025ad4:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025ad8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025ada:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025ade:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025ae2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025ae6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025ae8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025aec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025aee:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025af2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025af6:	fb08 f80e 	mul.w	r8, r8, lr
 8025afa:	fb02 8303 	mla	r3, r2, r3, r8
 8025afe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025b00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b04:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025b08:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025b0a:	fb01 330a 	mla	r3, r1, sl, r3
 8025b0e:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8025b12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b14:	fb09 3901 	mla	r9, r9, r1, r3
 8025b18:	4342      	muls	r2, r0
 8025b1a:	1c50      	adds	r0, r2, #1
 8025b1c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025b20:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025b24:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025b28:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025b2c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025b30:	ea4c 0c09 	orr.w	ip, ip, r9
 8025b34:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b36:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025b3a:	883b      	ldrh	r3, [r7, #0]
 8025b3c:	fb12 f204 	smulbb	r2, r2, r4
 8025b40:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025b44:	fa5f fc8c 	uxtb.w	ip, ip
 8025b48:	1219      	asrs	r1, r3, #8
 8025b4a:	fb1c fc04 	smulbb	ip, ip, r4
 8025b4e:	b2c0      	uxtb	r0, r0
 8025b50:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025b54:	fb01 2100 	mla	r1, r1, r0, r2
 8025b58:	10da      	asrs	r2, r3, #3
 8025b5a:	00db      	lsls	r3, r3, #3
 8025b5c:	fb1e fe04 	smulbb	lr, lr, r4
 8025b60:	b2db      	uxtb	r3, r3
 8025b62:	fb03 c300 	mla	r3, r3, r0, ip
 8025b66:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025b6a:	b289      	uxth	r1, r1
 8025b6c:	fb02 e200 	mla	r2, r2, r0, lr
 8025b70:	fa1f fc83 	uxth.w	ip, r3
 8025b74:	1c4b      	adds	r3, r1, #1
 8025b76:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025b7a:	f10c 0301 	add.w	r3, ip, #1
 8025b7e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025b82:	b292      	uxth	r2, r2
 8025b84:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8025b88:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025b8c:	430b      	orrs	r3, r1
 8025b8e:	1c51      	adds	r1, r2, #1
 8025b90:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025b94:	0952      	lsrs	r2, r2, #5
 8025b96:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025b9a:	4313      	orrs	r3, r2
 8025b9c:	803b      	strh	r3, [r7, #0]
 8025b9e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025ba0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025ba2:	3702      	adds	r7, #2
 8025ba4:	441a      	add	r2, r3
 8025ba6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025ba8:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025baa:	441d      	add	r5, r3
 8025bac:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025bae:	3b01      	subs	r3, #1
 8025bb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8025bb2:	e694      	b.n	80258de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025bb4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025bb6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025bb8:	441c      	add	r4, r3
 8025bba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025bbc:	9429      	str	r4, [sp, #164]	@ 0xa4
 8025bbe:	441d      	add	r5, r3
 8025bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025bc2:	3b01      	subs	r3, #1
 8025bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8025bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bc8:	3302      	adds	r3, #2
 8025bca:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bcc:	e667      	b.n	802589e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025bce:	d024      	beq.n	8025c1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025bd2:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8025bd4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025bd6:	3b01      	subs	r3, #1
 8025bd8:	fb00 4003 	mla	r0, r0, r3, r4
 8025bdc:	1400      	asrs	r0, r0, #16
 8025bde:	f53f ae7b 	bmi.w	80258d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025be2:	3901      	subs	r1, #1
 8025be4:	4288      	cmp	r0, r1
 8025be6:	f6bf ae77 	bge.w	80258d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025bea:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025bec:	fb01 5303 	mla	r3, r1, r3, r5
 8025bf0:	141b      	asrs	r3, r3, #16
 8025bf2:	f53f ae71 	bmi.w	80258d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025bf6:	3a01      	subs	r2, #1
 8025bf8:	4293      	cmp	r3, r2
 8025bfa:	f6bf ae6d 	bge.w	80258d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025bfe:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025c02:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8025c06:	f1bb 0f00 	cmp.w	fp, #0
 8025c0a:	dc70      	bgt.n	8025cee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c0e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025c12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c14:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025c18:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025c1c:	2b00      	cmp	r3, #0
 8025c1e:	f340 81be 	ble.w	8025f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8025c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025c26:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025c2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025c2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025c32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025c36:	eef0 6a62 	vmov.f32	s13, s5
 8025c3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025c3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025c42:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025c46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025c4e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8025c52:	eef0 6a43 	vmov.f32	s13, s6
 8025c56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025c5a:	ee12 2a90 	vmov	r2, s5
 8025c5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025c62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c68:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c6c:	ee13 2a10 	vmov	r2, s6
 8025c70:	932b      	str	r3, [sp, #172]	@ 0xac
 8025c72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c74:	ee16 5a90 	vmov	r5, s13
 8025c78:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c7c:	932c      	str	r3, [sp, #176]	@ 0xb0
 8025c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025c80:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8025c82:	3b01      	subs	r3, #1
 8025c84:	9319      	str	r3, [sp, #100]	@ 0x64
 8025c86:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c88:	bf08      	it	eq
 8025c8a:	4613      	moveq	r3, r2
 8025c8c:	eeb0 3a67 	vmov.f32	s6, s15
 8025c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c92:	eef0 2a47 	vmov.f32	s5, s14
 8025c96:	e5f4      	b.n	8025882 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025c98:	2900      	cmp	r1, #0
 8025c9a:	f43f ae66 	beq.w	802596a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025c9e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025ca2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025ca6:	900a      	str	r0, [sp, #40]	@ 0x28
 8025ca8:	0e00      	lsrs	r0, r0, #24
 8025caa:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025cac:	e65d      	b.n	802596a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8025cae:	f113 0801 	adds.w	r8, r3, #1
 8025cb2:	f53f af74 	bmi.w	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025cb6:	4540      	cmp	r0, r8
 8025cb8:	f6ff af71 	blt.w	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025cbc:	f11c 0801 	adds.w	r8, ip, #1
 8025cc0:	f53f af6d 	bmi.w	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025cc4:	45c6      	cmp	lr, r8
 8025cc6:	f6ff af6a 	blt.w	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025cca:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025ccc:	9302      	str	r3, [sp, #8]
 8025cce:	b200      	sxth	r0, r0
 8025cd0:	fa0f f38e 	sxth.w	r3, lr
 8025cd4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025cd8:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025cdc:	9301      	str	r3, [sp, #4]
 8025cde:	9000      	str	r0, [sp, #0]
 8025ce0:	4633      	mov	r3, r6
 8025ce2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025ce4:	4639      	mov	r1, r7
 8025ce6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025ce8:	f7ff fc63 	bl	80255b2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025cec:	e757      	b.n	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8025cee:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025cf0:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8025cf2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025cf6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025cf8:	1427      	asrs	r7, r4, #16
 8025cfa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025cfe:	142b      	asrs	r3, r5, #16
 8025d00:	fb01 7303 	mla	r3, r1, r3, r7
 8025d04:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025d06:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025d0a:	18e7      	adds	r7, r4, r3
 8025d0c:	5ce3      	ldrb	r3, [r4, r3]
 8025d0e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025d12:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025d16:	2a00      	cmp	r2, #0
 8025d18:	f000 8137 	beq.w	8025f8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8025d1c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025d20:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025d24:	9410      	str	r4, [sp, #64]	@ 0x40
 8025d26:	0e24      	lsrs	r4, r4, #24
 8025d28:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025d2a:	b170      	cbz	r0, 8025d4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025d2c:	eb07 0e01 	add.w	lr, r7, r1
 8025d30:	5c79      	ldrb	r1, [r7, r1]
 8025d32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025d36:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d38:	0e09      	lsrs	r1, r1, #24
 8025d3a:	9114      	str	r1, [sp, #80]	@ 0x50
 8025d3c:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025d40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025d44:	9111      	str	r1, [sp, #68]	@ 0x44
 8025d46:	0e09      	lsrs	r1, r1, #24
 8025d48:	9118      	str	r1, [sp, #96]	@ 0x60
 8025d4a:	b292      	uxth	r2, r2
 8025d4c:	b280      	uxth	r0, r0
 8025d4e:	fb02 f800 	mul.w	r8, r2, r0
 8025d52:	0112      	lsls	r2, r2, #4
 8025d54:	eba2 0e08 	sub.w	lr, r2, r8
 8025d58:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025d5a:	fa1f fe8e 	uxth.w	lr, lr
 8025d5e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025d62:	fb0e f101 	mul.w	r1, lr, r1
 8025d66:	b280      	uxth	r0, r0
 8025d68:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025d6c:	1a12      	subs	r2, r2, r0
 8025d6e:	b292      	uxth	r2, r2
 8025d70:	fb02 110c 	mla	r1, r2, ip, r1
 8025d74:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025d76:	fb00 1104 	mla	r1, r0, r4, r1
 8025d7a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025d7c:	fb08 1104 	mla	r1, r8, r4, r1
 8025d80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025d84:	2900      	cmp	r1, #0
 8025d86:	f000 80f5 	beq.w	8025f74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025d8a:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025d8e:	d019      	beq.n	8025dc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8025d90:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025d94:	fb0c fa0a 	mul.w	sl, ip, sl
 8025d98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025d9c:	fb0c fc03 	mul.w	ip, ip, r3
 8025da0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025da4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025da8:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025dac:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025db0:	4453      	add	r3, sl
 8025db2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025db6:	0a1b      	lsrs	r3, r3, #8
 8025db8:	0a3f      	lsrs	r7, r7, #8
 8025dba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025dbe:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025dc2:	433b      	orrs	r3, r7
 8025dc4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025dc6:	2cff      	cmp	r4, #255	@ 0xff
 8025dc8:	d020      	beq.n	8025e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8025dca:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025dcc:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025dd0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025dd2:	4367      	muls	r7, r4
 8025dd4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025dd6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025dda:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025dde:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025de0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025de4:	fb04 fa0a 	mul.w	sl, r4, sl
 8025de8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025dec:	44bc      	add	ip, r7
 8025dee:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025df2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025df6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025dfa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025dfe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e02:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025e06:	ea4c 040a 	orr.w	r4, ip, sl
 8025e0a:	9410      	str	r4, [sp, #64]	@ 0x40
 8025e0c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025e0e:	2cff      	cmp	r4, #255	@ 0xff
 8025e10:	d020      	beq.n	8025e54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8025e12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e14:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025e18:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025e1a:	4367      	muls	r7, r4
 8025e1c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025e22:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025e26:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025e28:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025e2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e34:	44bc      	add	ip, r7
 8025e36:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025e3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025e3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e4a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025e4e:	ea4c 040a 	orr.w	r4, ip, sl
 8025e52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025e54:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025e56:	2cff      	cmp	r4, #255	@ 0xff
 8025e58:	d020      	beq.n	8025e9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8025e5a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025e5c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025e60:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025e62:	4367      	muls	r7, r4
 8025e64:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025e66:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025e6a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025e6e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025e70:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025e74:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e78:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e7c:	44bc      	add	ip, r7
 8025e7e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025e82:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025e86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e8e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e92:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025e96:	ea4c 040a 	orr.w	r4, ip, sl
 8025e9a:	9411      	str	r4, [sp, #68]	@ 0x44
 8025e9c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025e9e:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025ea2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025ea6:	fb0e f707 	mul.w	r7, lr, r7
 8025eaa:	fb02 770c 	mla	r7, r2, ip, r7
 8025eae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025eb0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025eb4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025eb8:	fb00 770c 	mla	r7, r0, ip, r7
 8025ebc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025ebe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025ec2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025ec4:	fb08 770c 	mla	r7, r8, ip, r7
 8025ec8:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025ecc:	fb0e fe0c 	mul.w	lr, lr, ip
 8025ed0:	fb02 e303 	mla	r3, r2, r3, lr
 8025ed4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025ed6:	0a3f      	lsrs	r7, r7, #8
 8025ed8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025edc:	fb00 330a 	mla	r3, r0, sl, r3
 8025ee0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025ee2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025ee6:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025eea:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025ef0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ef4:	434b      	muls	r3, r1
 8025ef6:	1c59      	adds	r1, r3, #1
 8025ef8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025efc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025f00:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025f04:	ea47 070c 	orr.w	r7, r7, ip
 8025f08:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025f0a:	0c3b      	lsrs	r3, r7, #16
 8025f0c:	f8b9 0000 	ldrh.w	r0, [r9]
 8025f10:	fb13 f304 	smulbb	r3, r3, r4
 8025f14:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025f18:	b2ff      	uxtb	r7, r7
 8025f1a:	1202      	asrs	r2, r0, #8
 8025f1c:	fb17 f704 	smulbb	r7, r7, r4
 8025f20:	b2c9      	uxtb	r1, r1
 8025f22:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025f26:	fb02 3201 	mla	r2, r2, r1, r3
 8025f2a:	10c3      	asrs	r3, r0, #3
 8025f2c:	00c0      	lsls	r0, r0, #3
 8025f2e:	fb1c fc04 	smulbb	ip, ip, r4
 8025f32:	b2c0      	uxtb	r0, r0
 8025f34:	fb00 7001 	mla	r0, r0, r1, r7
 8025f38:	b292      	uxth	r2, r2
 8025f3a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025f3e:	fb03 c301 	mla	r3, r3, r1, ip
 8025f42:	f102 0c01 	add.w	ip, r2, #1
 8025f46:	b280      	uxth	r0, r0
 8025f48:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025f4c:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8025f50:	1c42      	adds	r2, r0, #1
 8025f52:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025f56:	b29b      	uxth	r3, r3
 8025f58:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025f5c:	ea42 020c 	orr.w	r2, r2, ip
 8025f60:	f103 0c01 	add.w	ip, r3, #1
 8025f64:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025f68:	095b      	lsrs	r3, r3, #5
 8025f6a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025f6e:	431a      	orrs	r2, r3
 8025f70:	f8a9 2000 	strh.w	r2, [r9]
 8025f74:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8025f76:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025f78:	f109 0902 	add.w	r9, r9, #2
 8025f7c:	441a      	add	r2, r3
 8025f7e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025f80:	9229      	str	r2, [sp, #164]	@ 0xa4
 8025f82:	441d      	add	r5, r3
 8025f84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025f88:	e63d      	b.n	8025c06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025f8a:	2800      	cmp	r0, #0
 8025f8c:	f43f aedd 	beq.w	8025d4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025f90:	5c79      	ldrb	r1, [r7, r1]
 8025f92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025f96:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025f98:	0e09      	lsrs	r1, r1, #24
 8025f9a:	9114      	str	r1, [sp, #80]	@ 0x50
 8025f9c:	e6d5      	b.n	8025d4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025f9e:	b01f      	add	sp, #124	@ 0x7c
 8025fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025fa4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fa8:	b089      	sub	sp, #36	@ 0x24
 8025faa:	9101      	str	r1, [sp, #4]
 8025fac:	9801      	ldr	r0, [sp, #4]
 8025fae:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8025fb2:	8800      	ldrh	r0, [r0, #0]
 8025fb4:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8025fb8:	1206      	asrs	r6, r0, #8
 8025fba:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8025fbe:	9602      	str	r6, [sp, #8]
 8025fc0:	10c6      	asrs	r6, r0, #3
 8025fc2:	00c0      	lsls	r0, r0, #3
 8025fc4:	b2c0      	uxtb	r0, r0
 8025fc6:	9004      	str	r0, [sp, #16]
 8025fc8:	fb07 100c 	mla	r0, r7, ip, r1
 8025fcc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8025fd0:	2f00      	cmp	r7, #0
 8025fd2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8025fd6:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8025fda:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8025fde:	9603      	str	r6, [sp, #12]
 8025fe0:	eb02 0e00 	add.w	lr, r2, r0
 8025fe4:	f2c0 810a 	blt.w	80261fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025fe8:	45b8      	cmp	r8, r7
 8025fea:	f340 8107 	ble.w	80261fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8025fee:	2900      	cmp	r1, #0
 8025ff0:	f2c0 8102 	blt.w	80261f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025ff4:	458c      	cmp	ip, r1
 8025ff6:	f340 80ff 	ble.w	80261f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8025ffa:	5c12      	ldrb	r2, [r2, r0]
 8025ffc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026000:	1c4a      	adds	r2, r1, #1
 8026002:	f100 80fe 	bmi.w	8026202 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026006:	4594      	cmp	ip, r2
 8026008:	f340 80fb 	ble.w	8026202 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802600c:	2d00      	cmp	r5, #0
 802600e:	f000 80fa 	beq.w	8026206 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8026012:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026016:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802601a:	3701      	adds	r7, #1
 802601c:	f100 80f7 	bmi.w	802620e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026020:	45b8      	cmp	r8, r7
 8026022:	f340 80f4 	ble.w	802620e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026026:	2c00      	cmp	r4, #0
 8026028:	f000 80f4 	beq.w	8026214 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802602c:	2900      	cmp	r1, #0
 802602e:	eb0e 020c 	add.w	r2, lr, ip
 8026032:	f2c0 80ea 	blt.w	802620a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026036:	458c      	cmp	ip, r1
 8026038:	f340 80e7 	ble.w	802620a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802603c:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8026040:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8026044:	3101      	adds	r1, #1
 8026046:	f100 80e8 	bmi.w	802621a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802604a:	458c      	cmp	ip, r1
 802604c:	f340 80e5 	ble.w	802621a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026050:	2d00      	cmp	r5, #0
 8026052:	f000 80e4 	beq.w	802621e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8026056:	7852      	ldrb	r2, [r2, #1]
 8026058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802605c:	0e0b      	lsrs	r3, r1, #24
 802605e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8026062:	9300      	str	r3, [sp, #0]
 8026064:	b2a4      	uxth	r4, r4
 8026066:	b2ab      	uxth	r3, r5
 8026068:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802606c:	fb03 f904 	mul.w	r9, r3, r4
 8026070:	fb0a f505 	mul.w	r5, sl, r5
 8026074:	011b      	lsls	r3, r3, #4
 8026076:	eba3 0e09 	sub.w	lr, r3, r9
 802607a:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 802607e:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8026082:	0a28      	lsrs	r0, r5, #8
 8026084:	fb0a f303 	mul.w	r3, sl, r3
 8026088:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802608c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8026090:	4405      	add	r5, r0
 8026092:	0a2d      	lsrs	r5, r5, #8
 8026094:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8026098:	9005      	str	r0, [sp, #20]
 802609a:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 802609e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80260a2:	0a1b      	lsrs	r3, r3, #8
 80260a4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80260a8:	9306      	str	r3, [sp, #24]
 80260aa:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 80260ae:	fb0b f303 	mul.w	r3, fp, r3
 80260b2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80260b6:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80260ba:	fb0b f606 	mul.w	r6, fp, r6
 80260be:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 80260c2:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80260c6:	fb08 f707 	mul.w	r7, r8, r7
 80260ca:	0a1d      	lsrs	r5, r3, #8
 80260cc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80260d0:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80260d4:	441d      	add	r5, r3
 80260d6:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 80260da:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80260de:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80260e2:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80260e6:	fb08 fc0c 	mul.w	ip, r8, ip
 80260ea:	0a1b      	lsrs	r3, r3, #8
 80260ec:	9307      	str	r3, [sp, #28]
 80260ee:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 80260f2:	0e0b      	lsrs	r3, r1, #24
 80260f4:	0a2d      	lsrs	r5, r5, #8
 80260f6:	fa1f fe8e 	uxth.w	lr, lr
 80260fa:	435f      	muls	r7, r3
 80260fc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026100:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8026104:	fb05 f50e 	mul.w	r5, r5, lr
 8026108:	b2a4      	uxth	r4, r4
 802610a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802610e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026112:	4359      	muls	r1, r3
 8026114:	1b12      	subs	r2, r2, r4
 8026116:	9b05      	ldr	r3, [sp, #20]
 8026118:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802611c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026120:	b292      	uxth	r2, r2
 8026122:	4460      	add	r0, ip
 8026124:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026128:	fb03 5502 	mla	r5, r3, r2, r5
 802612c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026130:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026134:	44bc      	add	ip, r7
 8026136:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802613a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802613e:	0a36      	lsrs	r6, r6, #8
 8026140:	fb0c 5509 	mla	r5, ip, r9, r5
 8026144:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026148:	fb0e f606 	mul.w	r6, lr, r6
 802614c:	9b06      	ldr	r3, [sp, #24]
 802614e:	0a00      	lsrs	r0, r0, #8
 8026150:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026154:	fb00 5504 	mla	r5, r0, r4, r5
 8026158:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 802615c:	fb02 6000 	mla	r0, r2, r0, r6
 8026160:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8026164:	fb0e fe0b 	mul.w	lr, lr, fp
 8026168:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802616c:	0a09      	lsrs	r1, r1, #8
 802616e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026172:	fb09 0001 	mla	r0, r9, r1, r0
 8026176:	fb02 e20a 	mla	r2, r2, sl, lr
 802617a:	9b07      	ldr	r3, [sp, #28]
 802617c:	0a2d      	lsrs	r5, r5, #8
 802617e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026182:	fb04 0003 	mla	r0, r4, r3, r0
 8026186:	fb04 2408 	mla	r4, r4, r8, r2
 802618a:	9b00      	ldr	r3, [sp, #0]
 802618c:	9a04      	ldr	r2, [sp, #16]
 802618e:	fb09 4903 	mla	r9, r9, r3, r4
 8026192:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8026196:	9b02      	ldr	r3, [sp, #8]
 8026198:	fa5f f989 	uxtb.w	r9, r9
 802619c:	fb03 f109 	mul.w	r1, r3, r9
 80261a0:	9b03      	ldr	r3, [sp, #12]
 80261a2:	0a00      	lsrs	r0, r0, #8
 80261a4:	fb03 f309 	mul.w	r3, r3, r9
 80261a8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80261ac:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80261b0:	4305      	orrs	r5, r0
 80261b2:	fb02 f909 	mul.w	r9, r2, r9
 80261b6:	1c58      	adds	r0, r3, #1
 80261b8:	1c4a      	adds	r2, r1, #1
 80261ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80261be:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80261c2:	0a2b      	lsrs	r3, r5, #8
 80261c4:	0c2a      	lsrs	r2, r5, #16
 80261c6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80261ca:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80261ce:	00db      	lsls	r3, r3, #3
 80261d0:	0212      	lsls	r2, r2, #8
 80261d2:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 80261d6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80261da:	4313      	orrs	r3, r2
 80261dc:	f109 0201 	add.w	r2, r9, #1
 80261e0:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80261e4:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80261e8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80261ec:	431d      	orrs	r5, r3
 80261ee:	9b01      	ldr	r3, [sp, #4]
 80261f0:	801d      	strh	r5, [r3, #0]
 80261f2:	b009      	add	sp, #36	@ 0x24
 80261f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261f8:	2000      	movs	r0, #0
 80261fa:	e701      	b.n	8026000 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80261fc:	2600      	movs	r6, #0
 80261fe:	4630      	mov	r0, r6
 8026200:	e70b      	b.n	802601a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026202:	2600      	movs	r6, #0
 8026204:	e709      	b.n	802601a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026206:	462e      	mov	r6, r5
 8026208:	e707      	b.n	802601a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802620a:	2700      	movs	r7, #0
 802620c:	e71a      	b.n	8026044 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 802620e:	2100      	movs	r1, #0
 8026210:	460f      	mov	r7, r1
 8026212:	e723      	b.n	802605c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026214:	4621      	mov	r1, r4
 8026216:	4627      	mov	r7, r4
 8026218:	e720      	b.n	802605c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802621a:	2100      	movs	r1, #0
 802621c:	e71e      	b.n	802605c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802621e:	4629      	mov	r1, r5
 8026220:	e71c      	b.n	802605c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08026224 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026228:	b09b      	sub	sp, #108	@ 0x6c
 802622a:	9218      	str	r2, [sp, #96]	@ 0x60
 802622c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802622e:	9019      	str	r0, [sp, #100]	@ 0x64
 8026230:	6850      	ldr	r0, [r2, #4]
 8026232:	9116      	str	r1, [sp, #88]	@ 0x58
 8026234:	9307      	str	r3, [sp, #28]
 8026236:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802623a:	fb00 1303 	mla	r3, r0, r3, r1
 802623e:	6812      	ldr	r2, [r2, #0]
 8026240:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8026242:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026246:	930a      	str	r3, [sp, #40]	@ 0x28
 8026248:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802624a:	681b      	ldr	r3, [r3, #0]
 802624c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802624e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026250:	685e      	ldr	r6, [r3, #4]
 8026252:	3604      	adds	r6, #4
 8026254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026256:	2b00      	cmp	r3, #0
 8026258:	dc03      	bgt.n	8026262 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802625a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802625c:	2b00      	cmp	r3, #0
 802625e:	f340 8373 	ble.w	8026948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8026262:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026264:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026268:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802626c:	1e48      	subs	r0, r1, #1
 802626e:	1e57      	subs	r7, r2, #1
 8026270:	9b07      	ldr	r3, [sp, #28]
 8026272:	2b00      	cmp	r3, #0
 8026274:	f340 818f 	ble.w	8026596 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026278:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802627a:	142b      	asrs	r3, r5, #16
 802627c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026280:	d406      	bmi.n	8026290 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026282:	4584      	cmp	ip, r0
 8026284:	da04      	bge.n	8026290 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026286:	2b00      	cmp	r3, #0
 8026288:	db02      	blt.n	8026290 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802628a:	42bb      	cmp	r3, r7
 802628c:	f2c0 8184 	blt.w	8026598 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026290:	f11c 0c01 	adds.w	ip, ip, #1
 8026294:	f100 8172 	bmi.w	802657c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026298:	4561      	cmp	r1, ip
 802629a:	f2c0 816f 	blt.w	802657c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802629e:	3301      	adds	r3, #1
 80262a0:	f100 816c 	bmi.w	802657c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80262a4:	429a      	cmp	r2, r3
 80262a6:	f2c0 8169 	blt.w	802657c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80262aa:	9b07      	ldr	r3, [sp, #28]
 80262ac:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80262ae:	9317      	str	r3, [sp, #92]	@ 0x5c
 80262b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80262b2:	2b00      	cmp	r3, #0
 80262b4:	f340 818e 	ble.w	80265d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80262b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80262ba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80262be:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80262c2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80262c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80262c8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80262cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80262ce:	141b      	asrs	r3, r3, #16
 80262d0:	f100 81d1 	bmi.w	8026676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80262d4:	f101 38ff 	add.w	r8, r1, #4294967295
 80262d8:	4543      	cmp	r3, r8
 80262da:	f280 81cc 	bge.w	8026676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80262de:	f1bc 0f00 	cmp.w	ip, #0
 80262e2:	f2c0 81c8 	blt.w	8026676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80262e6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80262ea:	45c4      	cmp	ip, r8
 80262ec:	f280 81c3 	bge.w	8026676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80262f0:	b209      	sxth	r1, r1
 80262f2:	fb0c 3301 	mla	r3, ip, r1, r3
 80262f6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80262f8:	eb04 0803 	add.w	r8, r4, r3
 80262fc:	5ce3      	ldrb	r3, [r4, r3]
 80262fe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026302:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026306:	2a00      	cmp	r2, #0
 8026308:	f000 81aa 	beq.w	8026660 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802630c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026310:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026314:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026316:	0e24      	lsrs	r4, r4, #24
 8026318:	9412      	str	r4, [sp, #72]	@ 0x48
 802631a:	b178      	cbz	r0, 802633c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802631c:	eb08 0c01 	add.w	ip, r8, r1
 8026320:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026324:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026328:	9108      	str	r1, [sp, #32]
 802632a:	0e09      	lsrs	r1, r1, #24
 802632c:	9110      	str	r1, [sp, #64]	@ 0x40
 802632e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026332:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026336:	910c      	str	r1, [sp, #48]	@ 0x30
 8026338:	0e09      	lsrs	r1, r1, #24
 802633a:	9113      	str	r1, [sp, #76]	@ 0x4c
 802633c:	b292      	uxth	r2, r2
 802633e:	b280      	uxth	r0, r0
 8026340:	fb02 f900 	mul.w	r9, r2, r0
 8026344:	0112      	lsls	r2, r2, #4
 8026346:	eba2 0809 	sub.w	r8, r2, r9
 802634a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802634c:	fa1f f888 	uxth.w	r8, r8
 8026350:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026354:	fb08 f101 	mul.w	r1, r8, r1
 8026358:	b280      	uxth	r0, r0
 802635a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802635e:	1a12      	subs	r2, r2, r0
 8026360:	b292      	uxth	r2, r2
 8026362:	fb02 110e 	mla	r1, r2, lr, r1
 8026366:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026368:	fb00 1104 	mla	r1, r0, r4, r1
 802636c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802636e:	fb09 1104 	mla	r1, r9, r4, r1
 8026372:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026376:	2900      	cmp	r1, #0
 8026378:	f000 80f5 	beq.w	8026566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802637c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026380:	d01b      	beq.n	80263ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026382:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026386:	fb0e fa0a 	mul.w	sl, lr, sl
 802638a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802638e:	fb0e fe03 	mul.w	lr, lr, r3
 8026392:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026396:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802639a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802639e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80263a2:	4453      	add	r3, sl
 80263a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80263a8:	0a1b      	lsrs	r3, r3, #8
 80263aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80263b2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80263b6:	ea43 030c 	orr.w	r3, r3, ip
 80263ba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80263bc:	2cff      	cmp	r4, #255	@ 0xff
 80263be:	d021      	beq.n	8026404 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80263c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80263c2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80263c6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80263c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80263cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80263ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80263d2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80263d6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80263d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80263dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80263e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80263e4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80263e8:	44de      	add	lr, fp
 80263ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80263ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80263fa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80263fe:	ea4e 040a 	orr.w	r4, lr, sl
 8026402:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026404:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026406:	2cff      	cmp	r4, #255	@ 0xff
 8026408:	d021      	beq.n	802644e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802640a:	9c08      	ldr	r4, [sp, #32]
 802640c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026410:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026412:	fb04 fb0b 	mul.w	fp, r4, fp
 8026416:	9c08      	ldr	r4, [sp, #32]
 8026418:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802641c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026420:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026422:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026426:	fb04 fa0a 	mul.w	sl, r4, sl
 802642a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802642e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026432:	44de      	add	lr, fp
 8026434:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026438:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802643c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026440:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026444:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026448:	ea4e 040a 	orr.w	r4, lr, sl
 802644c:	9408      	str	r4, [sp, #32]
 802644e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026450:	2cff      	cmp	r4, #255	@ 0xff
 8026452:	d021      	beq.n	8026498 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026454:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026456:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802645a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802645c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026460:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026462:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026466:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802646a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802646c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026470:	fb04 fa0a 	mul.w	sl, r4, sl
 8026474:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026478:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802647c:	44de      	add	lr, fp
 802647e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026482:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026486:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802648a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802648e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026492:	ea4e 040a 	orr.w	r4, lr, sl
 8026496:	940c      	str	r4, [sp, #48]	@ 0x30
 8026498:	43c9      	mvns	r1, r1
 802649a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802649c:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80264a0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80264a4:	fb08 fc0c 	mul.w	ip, r8, ip
 80264a8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80264ac:	9c08      	ldr	r4, [sp, #32]
 80264ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80264b2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80264b6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80264ba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80264bc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80264c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80264c2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80264c6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80264ca:	fb08 f80e 	mul.w	r8, r8, lr
 80264ce:	fb02 8303 	mla	r3, r2, r3, r8
 80264d2:	9a08      	ldr	r2, [sp, #32]
 80264d4:	f8b7 8000 	ldrh.w	r8, [r7]
 80264d8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80264dc:	fb00 330a 	mla	r3, r0, sl, r3
 80264e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80264e2:	fa5f fe81 	uxtb.w	lr, r1
 80264e6:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80264ea:	fb09 3900 	mla	r9, r9, r0, r3
 80264ee:	ea4f 2228 	mov.w	r2, r8, asr #8
 80264f2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80264f6:	fb02 f20e 	mul.w	r2, r2, lr
 80264fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026502:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026506:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802650a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802650e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026512:	ea4c 0c09 	orr.w	ip, ip, r9
 8026516:	fb00 f00e 	mul.w	r0, r0, lr
 802651a:	1c53      	adds	r3, r2, #1
 802651c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026520:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8026524:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026528:	4a62      	ldr	r2, [pc, #392]	@ (80266b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802652a:	b2db      	uxtb	r3, r3
 802652c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8026530:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8026534:	b2c9      	uxtb	r1, r1
 8026536:	1c43      	adds	r3, r0, #1
 8026538:	fb01 f10e 	mul.w	r1, r1, lr
 802653c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026540:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026544:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026548:	00db      	lsls	r3, r3, #3
 802654a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802654e:	4313      	orrs	r3, r2
 8026550:	1c4a      	adds	r2, r1, #1
 8026552:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026556:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802655a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802655e:	ea4c 0c03 	orr.w	ip, ip, r3
 8026562:	f8a7 c000 	strh.w	ip, [r7]
 8026566:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026568:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802656a:	3702      	adds	r7, #2
 802656c:	441a      	add	r2, r3
 802656e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026570:	9225      	str	r2, [sp, #148]	@ 0x94
 8026572:	441d      	add	r5, r3
 8026574:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026576:	3b01      	subs	r3, #1
 8026578:	9317      	str	r3, [sp, #92]	@ 0x5c
 802657a:	e699      	b.n	80262b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802657c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802657e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026580:	441c      	add	r4, r3
 8026582:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026584:	9425      	str	r4, [sp, #148]	@ 0x94
 8026586:	441d      	add	r5, r3
 8026588:	9b07      	ldr	r3, [sp, #28]
 802658a:	3b01      	subs	r3, #1
 802658c:	9307      	str	r3, [sp, #28]
 802658e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026590:	3302      	adds	r3, #2
 8026592:	930a      	str	r3, [sp, #40]	@ 0x28
 8026594:	e66c      	b.n	8026270 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026596:	d024      	beq.n	80265e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8026598:	9b07      	ldr	r3, [sp, #28]
 802659a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802659c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802659e:	3b01      	subs	r3, #1
 80265a0:	fb00 4003 	mla	r0, r0, r3, r4
 80265a4:	1400      	asrs	r0, r0, #16
 80265a6:	f53f ae80 	bmi.w	80262aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80265aa:	3901      	subs	r1, #1
 80265ac:	4288      	cmp	r0, r1
 80265ae:	f6bf ae7c 	bge.w	80262aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80265b2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80265b4:	fb01 5303 	mla	r3, r1, r3, r5
 80265b8:	141b      	asrs	r3, r3, #16
 80265ba:	f53f ae76 	bmi.w	80262aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80265be:	3a01      	subs	r2, #1
 80265c0:	4293      	cmp	r3, r2
 80265c2:	f6bf ae72 	bge.w	80262aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80265c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80265ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80265ce:	f1bb 0f00 	cmp.w	fp, #0
 80265d2:	dc71      	bgt.n	80266b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80265d4:	9b07      	ldr	r3, [sp, #28]
 80265d6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80265da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80265dc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80265e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80265e2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80265e4:	2b00      	cmp	r3, #0
 80265e6:	f340 81af 	ble.w	8026948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80265ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80265ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80265f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80265f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80265fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80265fe:	eef0 6a62 	vmov.f32	s13, s5
 8026602:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026606:	ee77 2a62 	vsub.f32	s5, s14, s5
 802660a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802660e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026612:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026616:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 802661a:	eef0 6a43 	vmov.f32	s13, s6
 802661e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026622:	ee12 2a90 	vmov	r2, s5
 8026626:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802662a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802662c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026630:	fb92 f3f3 	sdiv	r3, r2, r3
 8026634:	ee13 2a10 	vmov	r2, s6
 8026638:	9327      	str	r3, [sp, #156]	@ 0x9c
 802663a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802663c:	ee16 5a90 	vmov	r5, s13
 8026640:	fb92 f3f3 	sdiv	r3, r2, r3
 8026644:	9328      	str	r3, [sp, #160]	@ 0xa0
 8026646:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026648:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802664a:	3b01      	subs	r3, #1
 802664c:	9316      	str	r3, [sp, #88]	@ 0x58
 802664e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026650:	bf08      	it	eq
 8026652:	4613      	moveq	r3, r2
 8026654:	eeb0 3a67 	vmov.f32	s6, s15
 8026658:	9307      	str	r3, [sp, #28]
 802665a:	eef0 2a47 	vmov.f32	s5, s14
 802665e:	e5f9      	b.n	8026254 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8026660:	2800      	cmp	r0, #0
 8026662:	f43f ae6b 	beq.w	802633c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026666:	f818 1001 	ldrb.w	r1, [r8, r1]
 802666a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802666e:	9108      	str	r1, [sp, #32]
 8026670:	0e09      	lsrs	r1, r1, #24
 8026672:	9110      	str	r1, [sp, #64]	@ 0x40
 8026674:	e662      	b.n	802633c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026676:	f113 0801 	adds.w	r8, r3, #1
 802667a:	f53f af74 	bmi.w	8026566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802667e:	4541      	cmp	r1, r8
 8026680:	f6ff af71 	blt.w	8026566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026684:	f11c 0801 	adds.w	r8, ip, #1
 8026688:	f53f af6d 	bmi.w	8026566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802668c:	45c6      	cmp	lr, r8
 802668e:	f6ff af6a 	blt.w	8026566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026692:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026696:	b209      	sxth	r1, r1
 8026698:	fa0f f38e 	sxth.w	r3, lr
 802669c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80266a0:	9301      	str	r3, [sp, #4]
 80266a2:	9100      	str	r1, [sp, #0]
 80266a4:	4633      	mov	r3, r6
 80266a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80266a8:	4639      	mov	r1, r7
 80266aa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80266ac:	f7ff fc7a 	bl	8025fa4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80266b0:	e759      	b.n	8026566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80266b2:	bf00      	nop
 80266b4:	fffff800 	.word	0xfffff800
 80266b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80266ba:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80266bc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80266c0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80266c2:	1427      	asrs	r7, r4, #16
 80266c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266c8:	142b      	asrs	r3, r5, #16
 80266ca:	fb01 7303 	mla	r3, r1, r3, r7
 80266ce:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80266d0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80266d4:	18e7      	adds	r7, r4, r3
 80266d6:	5ce3      	ldrb	r3, [r4, r3]
 80266d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80266dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80266e0:	2a00      	cmp	r2, #0
 80266e2:	f000 8127 	beq.w	8026934 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80266e6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80266ea:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80266ee:	940d      	str	r4, [sp, #52]	@ 0x34
 80266f0:	0e24      	lsrs	r4, r4, #24
 80266f2:	9414      	str	r4, [sp, #80]	@ 0x50
 80266f4:	b170      	cbz	r0, 8026714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80266f6:	eb07 0e01 	add.w	lr, r7, r1
 80266fa:	5c79      	ldrb	r1, [r7, r1]
 80266fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026700:	9109      	str	r1, [sp, #36]	@ 0x24
 8026702:	0e09      	lsrs	r1, r1, #24
 8026704:	9111      	str	r1, [sp, #68]	@ 0x44
 8026706:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802670a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802670e:	910e      	str	r1, [sp, #56]	@ 0x38
 8026710:	0e09      	lsrs	r1, r1, #24
 8026712:	9115      	str	r1, [sp, #84]	@ 0x54
 8026714:	b292      	uxth	r2, r2
 8026716:	b280      	uxth	r0, r0
 8026718:	fb02 f800 	mul.w	r8, r2, r0
 802671c:	0112      	lsls	r2, r2, #4
 802671e:	eba2 0e08 	sub.w	lr, r2, r8
 8026722:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8026726:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026728:	fa1f fe8e 	uxth.w	lr, lr
 802672c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026730:	fb0e f202 	mul.w	r2, lr, r2
 8026734:	b280      	uxth	r0, r0
 8026736:	1a09      	subs	r1, r1, r0
 8026738:	b289      	uxth	r1, r1
 802673a:	fb01 220c 	mla	r2, r1, ip, r2
 802673e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026740:	fb00 2204 	mla	r2, r0, r4, r2
 8026744:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026746:	fb08 2204 	mla	r2, r8, r4, r2
 802674a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802674e:	2a00      	cmp	r2, #0
 8026750:	f000 80e5 	beq.w	802691e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8026754:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026758:	d019      	beq.n	802678e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802675a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802675e:	fb0c fa0a 	mul.w	sl, ip, sl
 8026762:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026766:	fb0c fc03 	mul.w	ip, ip, r3
 802676a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802676e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026772:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026776:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802677a:	4453      	add	r3, sl
 802677c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026780:	0a1b      	lsrs	r3, r3, #8
 8026782:	0a3f      	lsrs	r7, r7, #8
 8026784:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026788:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802678c:	433b      	orrs	r3, r7
 802678e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026790:	2cff      	cmp	r4, #255	@ 0xff
 8026792:	d020      	beq.n	80267d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8026794:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026796:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802679a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802679c:	4367      	muls	r7, r4
 802679e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80267a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267a4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80267a8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80267aa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80267ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80267b2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80267b6:	44bc      	add	ip, r7
 80267b8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80267bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80267c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267c8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80267cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80267d0:	ea4c 040a 	orr.w	r4, ip, sl
 80267d4:	940d      	str	r4, [sp, #52]	@ 0x34
 80267d6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80267d8:	2cff      	cmp	r4, #255	@ 0xff
 80267da:	d020      	beq.n	802681e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80267dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80267de:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80267e2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80267e4:	4367      	muls	r7, r4
 80267e6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80267e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80267f0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80267f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80267f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80267fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80267fe:	44bc      	add	ip, r7
 8026800:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026804:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026808:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802680c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026810:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026814:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026818:	ea4c 040a 	orr.w	r4, ip, sl
 802681c:	9409      	str	r4, [sp, #36]	@ 0x24
 802681e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026820:	2cff      	cmp	r4, #255	@ 0xff
 8026822:	d020      	beq.n	8026866 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8026824:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026826:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802682a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802682c:	4367      	muls	r7, r4
 802682e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026830:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026834:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026838:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802683a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802683e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026842:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026846:	44bc      	add	ip, r7
 8026848:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802684c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026850:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026854:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026858:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802685c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026860:	ea4c 040a 	orr.w	r4, ip, sl
 8026864:	940e      	str	r4, [sp, #56]	@ 0x38
 8026866:	43d2      	mvns	r2, r2
 8026868:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802686a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802686e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026872:	fb0e f707 	mul.w	r7, lr, r7
 8026876:	fb01 770c 	mla	r7, r1, ip, r7
 802687a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802687c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026880:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026884:	fb00 770c 	mla	r7, r0, ip, r7
 8026888:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802688a:	b2d2      	uxtb	r2, r2
 802688c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026890:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026892:	fb08 770c 	mla	r7, r8, ip, r7
 8026896:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802689a:	fb0e fe0c 	mul.w	lr, lr, ip
 802689e:	fb01 e303 	mla	r3, r1, r3, lr
 80268a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80268a4:	0a3f      	lsrs	r7, r7, #8
 80268a6:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80268aa:	fb00 330a 	mla	r3, r0, sl, r3
 80268ae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80268b0:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80268b4:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80268b8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80268bc:	f8b9 3000 	ldrh.w	r3, [r9]
 80268c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268c4:	1218      	asrs	r0, r3, #8
 80268c6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80268ca:	4350      	muls	r0, r2
 80268cc:	10d9      	asrs	r1, r3, #3
 80268ce:	00db      	lsls	r3, r3, #3
 80268d0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80268d4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80268d8:	b2db      	uxtb	r3, r3
 80268da:	ea47 070c 	orr.w	r7, r7, ip
 80268de:	4351      	muls	r1, r2
 80268e0:	4353      	muls	r3, r2
 80268e2:	1c42      	adds	r2, r0, #1
 80268e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80268e8:	0c3a      	lsrs	r2, r7, #16
 80268ea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80268ee:	4a18      	ldr	r2, [pc, #96]	@ (8026950 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80268f0:	b2c0      	uxtb	r0, r0
 80268f2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80268f6:	1c4a      	adds	r2, r1, #1
 80268f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80268fc:	0a3a      	lsrs	r2, r7, #8
 80268fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026902:	00c9      	lsls	r1, r1, #3
 8026904:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026908:	4301      	orrs	r1, r0
 802690a:	1c58      	adds	r0, r3, #1
 802690c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026910:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026914:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026918:	4308      	orrs	r0, r1
 802691a:	f8a9 0000 	strh.w	r0, [r9]
 802691e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8026920:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8026922:	f109 0902 	add.w	r9, r9, #2
 8026926:	441a      	add	r2, r3
 8026928:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802692a:	9225      	str	r2, [sp, #148]	@ 0x94
 802692c:	441d      	add	r5, r3
 802692e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026932:	e64c      	b.n	80265ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026934:	2800      	cmp	r0, #0
 8026936:	f43f aeed 	beq.w	8026714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802693a:	5c79      	ldrb	r1, [r7, r1]
 802693c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026940:	9109      	str	r1, [sp, #36]	@ 0x24
 8026942:	0e09      	lsrs	r1, r1, #24
 8026944:	9111      	str	r1, [sp, #68]	@ 0x44
 8026946:	e6e5      	b.n	8026714 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026948:	b01b      	add	sp, #108	@ 0x6c
 802694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802694e:	bf00      	nop
 8026950:	fffff800 	.word	0xfffff800

08026954 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8026954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026958:	b085      	sub	sp, #20
 802695a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802695e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8026962:	fb00 7406 	mla	r4, r0, r6, r7
 8026966:	2800      	cmp	r0, #0
 8026968:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 802696c:	9103      	str	r1, [sp, #12]
 802696e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8026972:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8026976:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802697a:	9501      	str	r5, [sp, #4]
 802697c:	eb03 0904 	add.w	r9, r3, r4
 8026980:	f2c0 8150 	blt.w	8026c24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8026984:	4583      	cmp	fp, r0
 8026986:	f340 814d 	ble.w	8026c24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802698a:	2f00      	cmp	r7, #0
 802698c:	f2c0 8146 	blt.w	8026c1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026990:	42be      	cmp	r6, r7
 8026992:	f340 8143 	ble.w	8026c1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8026996:	f813 c004 	ldrb.w	ip, [r3, r4]
 802699a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802699e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80269a2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80269a6:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 80269aa:	4355      	muls	r5, r2
 80269ac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80269b0:	fb0c f203 	mul.w	r2, ip, r3
 80269b4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80269b8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 80269bc:	441d      	add	r5, r3
 80269be:	f102 0320 	add.w	r3, r2, #32
 80269c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80269c6:	0a1b      	lsrs	r3, r3, #8
 80269c8:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80269cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80269d0:	431c      	orrs	r4, r3
 80269d2:	1c7b      	adds	r3, r7, #1
 80269d4:	f100 812b 	bmi.w	8026c2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80269d8:	429e      	cmp	r6, r3
 80269da:	f340 8128 	ble.w	8026c2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80269de:	2900      	cmp	r1, #0
 80269e0:	f000 8128 	beq.w	8026c34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80269e4:	9a01      	ldr	r2, [sp, #4]
 80269e6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80269ea:	8855      	ldrh	r5, [r2, #2]
 80269ec:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80269f0:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 80269f4:	fb08 f802 	mul.w	r8, r8, r2
 80269f8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80269fc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026a00:	435d      	muls	r5, r3
 8026a02:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026a06:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026a0a:	44d0      	add	r8, sl
 8026a0c:	f105 0a20 	add.w	sl, r5, #32
 8026a10:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026a14:	0a2d      	lsrs	r5, r5, #8
 8026a16:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026a1a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026a1e:	432a      	orrs	r2, r5
 8026a20:	3001      	adds	r0, #1
 8026a22:	f100 810d 	bmi.w	8026c40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026a26:	4583      	cmp	fp, r0
 8026a28:	f340 810a 	ble.w	8026c40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8026a2c:	f1be 0f00 	cmp.w	lr, #0
 8026a30:	f000 810b 	beq.w	8026c4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8026a34:	2f00      	cmp	r7, #0
 8026a36:	f2c0 8100 	blt.w	8026c3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026a3a:	42be      	cmp	r6, r7
 8026a3c:	f340 80fd 	ble.w	8026c3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8026a40:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8026a44:	9801      	ldr	r0, [sp, #4]
 8026a46:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026a4a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8026a4e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8026a52:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8026a56:	fb0a fa00 	mul.w	sl, sl, r0
 8026a5a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8026a5e:	fb05 f808 	mul.w	r8, r5, r8
 8026a62:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8026a66:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8026a6a:	4482      	add	sl, r0
 8026a6c:	f108 0020 	add.w	r0, r8, #32
 8026a70:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026a74:	0a00      	lsrs	r0, r0, #8
 8026a76:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8026a7a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026a7e:	ea4b 0b00 	orr.w	fp, fp, r0
 8026a82:	3701      	adds	r7, #1
 8026a84:	f100 80e6 	bmi.w	8026c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026a88:	42be      	cmp	r6, r7
 8026a8a:	f340 80e3 	ble.w	8026c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8026a8e:	2900      	cmp	r1, #0
 8026a90:	f000 80e3 	beq.w	8026c5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8026a94:	9801      	ldr	r0, [sp, #4]
 8026a96:	3601      	adds	r6, #1
 8026a98:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026a9c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026aa0:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8026aa4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026aa8:	fb07 f800 	mul.w	r8, r7, r0
 8026aac:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8026ab0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8026ab4:	fb09 f906 	mul.w	r9, r9, r6
 8026ab8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026abc:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8026ac0:	44d1      	add	r9, sl
 8026ac2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8026ac6:	f108 0020 	add.w	r0, r8, #32
 8026aca:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026ace:	0a00      	lsrs	r0, r0, #8
 8026ad0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026ad4:	4330      	orrs	r0, r6
 8026ad6:	b28e      	uxth	r6, r1
 8026ad8:	fa1f f98e 	uxth.w	r9, lr
 8026adc:	fb06 f809 	mul.w	r8, r6, r9
 8026ae0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026ae4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026ae8:	0136      	lsls	r6, r6, #4
 8026aea:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026aee:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8026af2:	9601      	str	r6, [sp, #4]
 8026af4:	ea4a 0404 	orr.w	r4, sl, r4
 8026af8:	fa1f f689 	uxth.w	r6, r9
 8026afc:	9602      	str	r6, [sp, #8]
 8026afe:	4626      	mov	r6, r4
 8026b00:	fb11 f90e 	smulbb	r9, r1, lr
 8026b04:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026b08:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026b0c:	f1ce 0410 	rsb	r4, lr, #16
 8026b10:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b14:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026b18:	1a64      	subs	r4, r4, r1
 8026b1a:	ea4a 0202 	orr.w	r2, sl, r2
 8026b1e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026b22:	434a      	muls	r2, r1
 8026b24:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026b28:	fb04 2406 	mla	r4, r4, r6, r2
 8026b2c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026b30:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b34:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026b38:	ea4a 0000 	orr.w	r0, sl, r0
 8026b3c:	fb09 4200 	mla	r2, r9, r0, r4
 8026b40:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8026b44:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8026b48:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8026b4c:	ea44 0b0b 	orr.w	fp, r4, fp
 8026b50:	9c01      	ldr	r4, [sp, #4]
 8026b52:	9e02      	ldr	r6, [sp, #8]
 8026b54:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8026b58:	1ba4      	subs	r4, r4, r6
 8026b5a:	9e01      	ldr	r6, [sp, #4]
 8026b5c:	b2a4      	uxth	r4, r4
 8026b5e:	eba6 0608 	sub.w	r6, r6, r8
 8026b62:	b2b6      	uxth	r6, r6
 8026b64:	4373      	muls	r3, r6
 8026b66:	fb0c 3304 	mla	r3, ip, r4, r3
 8026b6a:	9c02      	ldr	r4, [sp, #8]
 8026b6c:	9903      	ldr	r1, [sp, #12]
 8026b6e:	fb04 3505 	mla	r5, r4, r5, r3
 8026b72:	fb08 5707 	mla	r7, r8, r7, r5
 8026b76:	8808      	ldrh	r0, [r1, #0]
 8026b78:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 8026b7c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026b80:	b289      	uxth	r1, r1
 8026b82:	434f      	muls	r7, r1
 8026b84:	1c7b      	adds	r3, r7, #1
 8026b86:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8026b8a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8026b8e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026b92:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8026b96:	1203      	asrs	r3, r0, #8
 8026b98:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026b9c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026ba0:	b2ff      	uxtb	r7, r7
 8026ba2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026ba6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026baa:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026bae:	fb13 f307 	smulbb	r3, r3, r7
 8026bb2:	ea42 0e0e 	orr.w	lr, r2, lr
 8026bb6:	fa1f f28e 	uxth.w	r2, lr
 8026bba:	1215      	asrs	r5, r2, #8
 8026bbc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026bc0:	fb05 3501 	mla	r5, r5, r1, r3
 8026bc4:	10c3      	asrs	r3, r0, #3
 8026bc6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026bca:	fb13 f307 	smulbb	r3, r3, r7
 8026bce:	10d4      	asrs	r4, r2, #3
 8026bd0:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8026bd4:	fb04 3401 	mla	r4, r4, r1, r3
 8026bd8:	00c3      	lsls	r3, r0, #3
 8026bda:	b2db      	uxtb	r3, r3
 8026bdc:	fb13 f307 	smulbb	r3, r3, r7
 8026be0:	00d2      	lsls	r2, r2, #3
 8026be2:	b2d2      	uxtb	r2, r2
 8026be4:	fb02 3101 	mla	r1, r2, r1, r3
 8026be8:	b2ad      	uxth	r5, r5
 8026bea:	b289      	uxth	r1, r1
 8026bec:	b2a4      	uxth	r4, r4
 8026bee:	1c6b      	adds	r3, r5, #1
 8026bf0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026bf4:	1c62      	adds	r2, r4, #1
 8026bf6:	1c4b      	adds	r3, r1, #1
 8026bf8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026bfc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026c00:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026c04:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c08:	0964      	lsrs	r4, r4, #5
 8026c0a:	432b      	orrs	r3, r5
 8026c0c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8026c10:	9a03      	ldr	r2, [sp, #12]
 8026c12:	4323      	orrs	r3, r4
 8026c14:	8013      	strh	r3, [r2, #0]
 8026c16:	b005      	add	sp, #20
 8026c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c1c:	f04f 0c00 	mov.w	ip, #0
 8026c20:	4664      	mov	r4, ip
 8026c22:	e6d6      	b.n	80269d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8026c24:	2300      	movs	r3, #0
 8026c26:	469c      	mov	ip, r3
 8026c28:	461a      	mov	r2, r3
 8026c2a:	461c      	mov	r4, r3
 8026c2c:	e6f8      	b.n	8026a20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026c2e:	2300      	movs	r3, #0
 8026c30:	461a      	mov	r2, r3
 8026c32:	e6f5      	b.n	8026a20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026c34:	460b      	mov	r3, r1
 8026c36:	460a      	mov	r2, r1
 8026c38:	e6f2      	b.n	8026a20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8026c3a:	2500      	movs	r5, #0
 8026c3c:	46ab      	mov	fp, r5
 8026c3e:	e720      	b.n	8026a82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8026c40:	2700      	movs	r7, #0
 8026c42:	463d      	mov	r5, r7
 8026c44:	4638      	mov	r0, r7
 8026c46:	46bb      	mov	fp, r7
 8026c48:	e745      	b.n	8026ad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026c4a:	4677      	mov	r7, lr
 8026c4c:	4675      	mov	r5, lr
 8026c4e:	4670      	mov	r0, lr
 8026c50:	46f3      	mov	fp, lr
 8026c52:	e740      	b.n	8026ad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026c54:	2700      	movs	r7, #0
 8026c56:	4638      	mov	r0, r7
 8026c58:	e73d      	b.n	8026ad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8026c5a:	460f      	mov	r7, r1
 8026c5c:	4608      	mov	r0, r1
 8026c5e:	e73a      	b.n	8026ad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08026c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c64:	b097      	sub	sp, #92	@ 0x5c
 8026c66:	9214      	str	r2, [sp, #80]	@ 0x50
 8026c68:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8026c6a:	9015      	str	r0, [sp, #84]	@ 0x54
 8026c6c:	9308      	str	r3, [sp, #32]
 8026c6e:	6850      	ldr	r0, [r2, #4]
 8026c70:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8026c74:	9111      	str	r1, [sp, #68]	@ 0x44
 8026c76:	9312      	str	r3, [sp, #72]	@ 0x48
 8026c78:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8026c7c:	fb00 1303 	mla	r3, r0, r3, r1
 8026c80:	6812      	ldr	r2, [r2, #0]
 8026c82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026c8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026c90:	685b      	ldr	r3, [r3, #4]
 8026c92:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c94:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8026c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8026c9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c9c:	2b00      	cmp	r3, #0
 8026c9e:	dc03      	bgt.n	8026ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026ca0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026ca2:	2b00      	cmp	r3, #0
 8026ca4:	f340 83cb 	ble.w	802743e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026ca8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026caa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026cae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026cb2:	1e48      	subs	r0, r1, #1
 8026cb4:	1e55      	subs	r5, r2, #1
 8026cb6:	9b08      	ldr	r3, [sp, #32]
 8026cb8:	2b00      	cmp	r3, #0
 8026cba:	f340 81a3 	ble.w	8027004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8026cbe:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8026cc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026cc2:	1436      	asrs	r6, r6, #16
 8026cc4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026cc8:	d406      	bmi.n	8026cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026cca:	4286      	cmp	r6, r0
 8026ccc:	da04      	bge.n	8026cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026cce:	2b00      	cmp	r3, #0
 8026cd0:	db02      	blt.n	8026cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026cd2:	42ab      	cmp	r3, r5
 8026cd4:	f2c0 8197 	blt.w	8027006 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8026cd8:	3601      	adds	r6, #1
 8026cda:	f100 8184 	bmi.w	8026fe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026cde:	42b1      	cmp	r1, r6
 8026ce0:	f2c0 8181 	blt.w	8026fe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026ce4:	3301      	adds	r3, #1
 8026ce6:	f100 817e 	bmi.w	8026fe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026cea:	429a      	cmp	r2, r3
 8026cec:	f2c0 817b 	blt.w	8026fe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026cf0:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026cf4:	9b08      	ldr	r3, [sp, #32]
 8026cf6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026cf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026cfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026cfc:	2b00      	cmp	r3, #0
 8026cfe:	f340 81a4 	ble.w	802704a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8026d02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026d04:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8026d06:	1418      	asrs	r0, r3, #16
 8026d08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026d0a:	142d      	asrs	r5, r5, #16
 8026d0c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026d10:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026d12:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026d16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026d18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026d1c:	f100 81f8 	bmi.w	8027110 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026d20:	f102 3eff 	add.w	lr, r2, #4294967295
 8026d24:	4575      	cmp	r5, lr
 8026d26:	f280 81f3 	bge.w	8027110 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026d2a:	2800      	cmp	r0, #0
 8026d2c:	f2c0 81f0 	blt.w	8027110 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026d30:	f103 3eff 	add.w	lr, r3, #4294967295
 8026d34:	4570      	cmp	r0, lr
 8026d36:	f280 81eb 	bge.w	8027110 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8026d3a:	b212      	sxth	r2, r2
 8026d3c:	fb00 5002 	mla	r0, r0, r2, r5
 8026d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026d42:	fa1f fe81 	uxth.w	lr, r1
 8026d46:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026d4a:	eb03 0a00 	add.w	sl, r3, r0
 8026d4e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026d52:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8026d56:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026d5a:	b29b      	uxth	r3, r3
 8026d5c:	f1bc 0f00 	cmp.w	ip, #0
 8026d60:	f000 81b9 	beq.w	80270d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026d64:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026d68:	eb0a 0b02 	add.w	fp, sl, r2
 8026d6c:	fa1f fa8c 	uxth.w	sl, ip
 8026d70:	fb0a fe0e 	mul.w	lr, sl, lr
 8026d74:	eba5 050e 	sub.w	r5, r5, lr
 8026d78:	b2ad      	uxth	r5, r5
 8026d7a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026d7e:	fb08 f505 	mul.w	r5, r8, r5
 8026d82:	fa1f fa8a 	uxth.w	sl, sl
 8026d86:	eba3 030a 	sub.w	r3, r3, sl
 8026d8a:	b29b      	uxth	r3, r3
 8026d8c:	940d      	str	r4, [sp, #52]	@ 0x34
 8026d8e:	fb09 5303 	mla	r3, r9, r3, r5
 8026d92:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026d96:	940e      	str	r4, [sp, #56]	@ 0x38
 8026d98:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026d9a:	fb0a 3304 	mla	r3, sl, r4, r3
 8026d9e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026da0:	fb0e 3304 	mla	r3, lr, r4, r3
 8026da4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026da8:	2b00      	cmp	r3, #0
 8026daa:	f000 810f 	beq.w	8026fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026dae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026db0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026db4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026db8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026dbc:	f000 8190 	beq.w	80270e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026dc0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026dc4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026dc8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026dcc:	fb09 f000 	mul.w	r0, r9, r0
 8026dd0:	fb0a fe0e 	mul.w	lr, sl, lr
 8026dd4:	f100 0b20 	add.w	fp, r0, #32
 8026dd8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026ddc:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026de0:	44ce      	add	lr, r9
 8026de2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026de6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026dea:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026dee:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026df2:	ea4e 0909 	orr.w	r9, lr, r9
 8026df6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026dfa:	8868      	ldrh	r0, [r5, #2]
 8026dfc:	d019      	beq.n	8026e32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8026dfe:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026e02:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026e06:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026e0a:	fb08 f800 	mul.w	r8, r8, r0
 8026e0e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e12:	f108 0b20 	add.w	fp, r8, #32
 8026e16:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026e1a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026e1e:	4486      	add	lr, r0
 8026e20:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026e24:	0a00      	lsrs	r0, r0, #8
 8026e26:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026e2a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026e2e:	ea4e 0000 	orr.w	r0, lr, r0
 8026e32:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026e36:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026e3a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026e3e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026e42:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026e46:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026e4a:	ea4e 0909 	orr.w	r9, lr, r9
 8026e4e:	ea4a 0000 	orr.w	r0, sl, r0
 8026e52:	f1bc 0f00 	cmp.w	ip, #0
 8026e56:	f000 8145 	beq.w	80270e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8026e5a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8026e5e:	3a01      	subs	r2, #1
 8026e60:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026e62:	0052      	lsls	r2, r2, #1
 8026e64:	3202      	adds	r2, #2
 8026e66:	2cff      	cmp	r4, #255	@ 0xff
 8026e68:	eb05 0e02 	add.w	lr, r5, r2
 8026e6c:	5aaa      	ldrh	r2, [r5, r2]
 8026e6e:	d018      	beq.n	8026ea2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026e70:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026e74:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026e78:	fb04 fa02 	mul.w	sl, r4, r2
 8026e7c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026e80:	fb08 f805 	mul.w	r8, r8, r5
 8026e84:	f10a 0520 	add.w	r5, sl, #32
 8026e88:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026e8c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026e90:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026e94:	4442      	add	r2, r8
 8026e96:	0a2d      	lsrs	r5, r5, #8
 8026e98:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026e9c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026ea0:	432a      	orrs	r2, r5
 8026ea2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026ea4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026ea8:	2cff      	cmp	r4, #255	@ 0xff
 8026eaa:	d01a      	beq.n	8026ee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8026eac:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8026eb0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026eb4:	fb04 fa05 	mul.w	sl, r4, r5
 8026eb8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026ebc:	fb08 f80e 	mul.w	r8, r8, lr
 8026ec0:	f10a 0e20 	add.w	lr, sl, #32
 8026ec4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026ec8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026ecc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026ed0:	4445      	add	r5, r8
 8026ed2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ed6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026eda:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8026ede:	ea45 050e 	orr.w	r5, r5, lr
 8026ee2:	fb1c fe01 	smulbb	lr, ip, r1
 8026ee6:	f1cc 0810 	rsb	r8, ip, #16
 8026eea:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026eee:	eba8 0801 	sub.w	r8, r8, r1
 8026ef2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026ef6:	4341      	muls	r1, r0
 8026ef8:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026efc:	fb09 1108 	mla	r1, r9, r8, r1
 8026f00:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026f04:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026f08:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026f0c:	ea4a 0202 	orr.w	r2, sl, r2
 8026f10:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026f14:	fb0c 1102 	mla	r1, ip, r2, r1
 8026f18:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026f1c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026f20:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026f24:	ea4b 0505 	orr.w	r5, fp, r5
 8026f28:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026f2c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026f30:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026f34:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026f38:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026f3c:	ea42 0e0e 	orr.w	lr, r2, lr
 8026f40:	fa1f f28e 	uxth.w	r2, lr
 8026f44:	2bff      	cmp	r3, #255	@ 0xff
 8026f46:	d103      	bne.n	8026f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8026f48:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026f4a:	29ff      	cmp	r1, #255	@ 0xff
 8026f4c:	f000 80de 	beq.w	802710c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026f50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026f52:	8838      	ldrh	r0, [r7, #0]
 8026f54:	434b      	muls	r3, r1
 8026f56:	f103 0c01 	add.w	ip, r3, #1
 8026f5a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026f5e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026f62:	fa5f fc83 	uxtb.w	ip, r3
 8026f66:	1203      	asrs	r3, r0, #8
 8026f68:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026f6c:	fb13 f30c 	smulbb	r3, r3, ip
 8026f70:	1215      	asrs	r5, r2, #8
 8026f72:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026f76:	fb05 3501 	mla	r5, r5, r1, r3
 8026f7a:	10c3      	asrs	r3, r0, #3
 8026f7c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026f80:	fb13 f30c 	smulbb	r3, r3, ip
 8026f84:	10d1      	asrs	r1, r2, #3
 8026f86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026f88:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026f8c:	fb01 3104 	mla	r1, r1, r4, r3
 8026f90:	00c3      	lsls	r3, r0, #3
 8026f92:	b2db      	uxtb	r3, r3
 8026f94:	fb13 f30c 	smulbb	r3, r3, ip
 8026f98:	00d2      	lsls	r2, r2, #3
 8026f9a:	b2d2      	uxtb	r2, r2
 8026f9c:	fb02 3304 	mla	r3, r2, r4, r3
 8026fa0:	b2ad      	uxth	r5, r5
 8026fa2:	b29a      	uxth	r2, r3
 8026fa4:	1c6b      	adds	r3, r5, #1
 8026fa6:	b289      	uxth	r1, r1
 8026fa8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026fac:	1c53      	adds	r3, r2, #1
 8026fae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026fb2:	1c4a      	adds	r2, r1, #1
 8026fb4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026fb8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026fbc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026fc0:	0949      	lsrs	r1, r1, #5
 8026fc2:	432b      	orrs	r3, r5
 8026fc4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026fc8:	430b      	orrs	r3, r1
 8026fca:	803b      	strh	r3, [r7, #0]
 8026fcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026fce:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026fd0:	3702      	adds	r7, #2
 8026fd2:	4413      	add	r3, r2
 8026fd4:	9321      	str	r3, [sp, #132]	@ 0x84
 8026fd6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026fd8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026fda:	441a      	add	r2, r3
 8026fdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026fde:	9222      	str	r2, [sp, #136]	@ 0x88
 8026fe0:	3b01      	subs	r3, #1
 8026fe2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026fe4:	e689      	b.n	8026cfa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026fe6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026fe8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8026fea:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8026fec:	4433      	add	r3, r6
 8026fee:	9321      	str	r3, [sp, #132]	@ 0x84
 8026ff0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026ff2:	441c      	add	r4, r3
 8026ff4:	9b08      	ldr	r3, [sp, #32]
 8026ff6:	9422      	str	r4, [sp, #136]	@ 0x88
 8026ff8:	3b01      	subs	r3, #1
 8026ffa:	9308      	str	r3, [sp, #32]
 8026ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ffe:	3302      	adds	r3, #2
 8027000:	9309      	str	r3, [sp, #36]	@ 0x24
 8027002:	e658      	b.n	8026cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027004:	d028      	beq.n	8027058 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027006:	9b08      	ldr	r3, [sp, #32]
 8027008:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802700a:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 802700c:	3b01      	subs	r3, #1
 802700e:	fb00 5003 	mla	r0, r0, r3, r5
 8027012:	1400      	asrs	r0, r0, #16
 8027014:	f53f ae6c 	bmi.w	8026cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027018:	3901      	subs	r1, #1
 802701a:	4288      	cmp	r0, r1
 802701c:	f6bf ae68 	bge.w	8026cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027020:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027022:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8027024:	fb01 0303 	mla	r3, r1, r3, r0
 8027028:	141b      	asrs	r3, r3, #16
 802702a:	f53f ae61 	bmi.w	8026cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802702e:	3a01      	subs	r2, #1
 8027030:	4293      	cmp	r3, r2
 8027032:	f6bf ae5d 	bge.w	8026cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027036:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802703a:	9b08      	ldr	r3, [sp, #32]
 802703c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8027040:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027042:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027044:	2b00      	cmp	r3, #0
 8027046:	f300 8082 	bgt.w	802714e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802704a:	9b08      	ldr	r3, [sp, #32]
 802704c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027052:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027056:	9309      	str	r3, [sp, #36]	@ 0x24
 8027058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802705a:	2b00      	cmp	r3, #0
 802705c:	f340 81ef 	ble.w	802743e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027060:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027064:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027068:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802706c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027070:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027074:	eef0 6a62 	vmov.f32	s13, s5
 8027078:	ee31 1a05 	vadd.f32	s2, s2, s10
 802707c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027080:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027088:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802708c:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8027090:	eef0 6a43 	vmov.f32	s13, s6
 8027094:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027098:	ee12 2a90 	vmov	r2, s5
 802709c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80270a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80270a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80270aa:	ee13 2a10 	vmov	r2, s6
 80270ae:	9323      	str	r3, [sp, #140]	@ 0x8c
 80270b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80270b2:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 80270b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80270ba:	9324      	str	r3, [sp, #144]	@ 0x90
 80270bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80270be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80270c0:	3b01      	subs	r3, #1
 80270c2:	9311      	str	r3, [sp, #68]	@ 0x44
 80270c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80270c6:	bf08      	it	eq
 80270c8:	4613      	moveq	r3, r2
 80270ca:	eeb0 3a67 	vmov.f32	s6, s15
 80270ce:	9308      	str	r3, [sp, #32]
 80270d0:	eef0 2a47 	vmov.f32	s5, s14
 80270d4:	e5e1      	b.n	8026c9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80270d6:	fb08 f505 	mul.w	r5, r8, r5
 80270da:	fb09 5303 	mla	r3, r9, r3, r5
 80270de:	e661      	b.n	8026da4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80270e0:	4681      	mov	r9, r0
 80270e2:	e688      	b.n	8026df6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80270e4:	f1c1 0210 	rsb	r2, r1, #16
 80270e8:	4341      	muls	r1, r0
 80270ea:	fb09 1902 	mla	r9, r9, r2, r1
 80270ee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80270f2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80270f6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80270fa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80270fe:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027102:	ea42 0909 	orr.w	r9, r2, r9
 8027106:	fa1f f289 	uxth.w	r2, r9
 802710a:	e71b      	b.n	8026f44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802710c:	803a      	strh	r2, [r7, #0]
 802710e:	e75d      	b.n	8026fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027110:	f115 0e01 	adds.w	lr, r5, #1
 8027114:	f53f af5a 	bmi.w	8026fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027118:	4572      	cmp	r2, lr
 802711a:	f6ff af57 	blt.w	8026fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802711e:	f110 0e01 	adds.w	lr, r0, #1
 8027122:	f53f af53 	bmi.w	8026fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027126:	4573      	cmp	r3, lr
 8027128:	f6ff af50 	blt.w	8026fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802712c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802712e:	b21b      	sxth	r3, r3
 8027130:	b212      	sxth	r2, r2
 8027132:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027136:	9301      	str	r3, [sp, #4]
 8027138:	9200      	str	r2, [sp, #0]
 802713a:	e9cd c405 	strd	ip, r4, [sp, #20]
 802713e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8027142:	9502      	str	r5, [sp, #8]
 8027144:	4639      	mov	r1, r7
 8027146:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027148:	f7ff fc04 	bl	8026954 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802714c:	e73e      	b.n	8026fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802714e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027150:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027154:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027156:	fa1f fc82 	uxth.w	ip, r2
 802715a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802715e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027160:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027164:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027168:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802716a:	141f      	asrs	r7, r3, #16
 802716c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802716e:	141b      	asrs	r3, r3, #16
 8027170:	fb01 3707 	mla	r7, r1, r7, r3
 8027174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027176:	eb03 0a07 	add.w	sl, r3, r7
 802717a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802717e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8027182:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027186:	b29b      	uxth	r3, r3
 8027188:	2d00      	cmp	r5, #0
 802718a:	f000 813d 	beq.w	8027408 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802718e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027192:	eb0a 0b01 	add.w	fp, sl, r1
 8027196:	fa1f fa85 	uxth.w	sl, r5
 802719a:	fb0a fc0c 	mul.w	ip, sl, ip
 802719e:	eba0 000c 	sub.w	r0, r0, ip
 80271a2:	b280      	uxth	r0, r0
 80271a4:	fb08 f000 	mul.w	r0, r8, r0
 80271a8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80271ac:	fa1f fa8a 	uxth.w	sl, sl
 80271b0:	eba3 030a 	sub.w	r3, r3, sl
 80271b4:	b29b      	uxth	r3, r3
 80271b6:	fb09 0303 	mla	r3, r9, r3, r0
 80271ba:	940f      	str	r4, [sp, #60]	@ 0x3c
 80271bc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80271be:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80271c2:	fb0a 3300 	mla	r3, sl, r0, r3
 80271c6:	fb0c 3304 	mla	r3, ip, r4, r3
 80271ca:	9410      	str	r4, [sp, #64]	@ 0x40
 80271cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80271d0:	2b00      	cmp	r3, #0
 80271d2:	f000 810b 	beq.w	80273ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80271d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80271d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80271da:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80271de:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80271e2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80271e6:	f000 8114 	beq.w	8027412 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 80271ea:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80271ee:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80271f2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80271f6:	fb09 f707 	mul.w	r7, r9, r7
 80271fa:	fb0a fc0c 	mul.w	ip, sl, ip
 80271fe:	f107 0b20 	add.w	fp, r7, #32
 8027202:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027206:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802720a:	44cc      	add	ip, r9
 802720c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027210:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027214:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027218:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802721c:	ea4c 0909 	orr.w	r9, ip, r9
 8027220:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027224:	8847      	ldrh	r7, [r0, #2]
 8027226:	d019      	beq.n	802725c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8027228:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802722c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027230:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027234:	fb08 f807 	mul.w	r8, r8, r7
 8027238:	fb0a fc0c 	mul.w	ip, sl, ip
 802723c:	f108 0b20 	add.w	fp, r8, #32
 8027240:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027244:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027248:	44bc      	add	ip, r7
 802724a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802724e:	0a3f      	lsrs	r7, r7, #8
 8027250:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027254:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027258:	ea4c 0707 	orr.w	r7, ip, r7
 802725c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027260:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027264:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027268:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802726c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027270:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027274:	ea4c 0909 	orr.w	r9, ip, r9
 8027278:	ea4a 0707 	orr.w	r7, sl, r7
 802727c:	2d00      	cmp	r5, #0
 802727e:	f000 80ca 	beq.w	8027416 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8027282:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027286:	3901      	subs	r1, #1
 8027288:	0049      	lsls	r1, r1, #1
 802728a:	3102      	adds	r1, #2
 802728c:	eb00 0c01 	add.w	ip, r0, r1
 8027290:	5a41      	ldrh	r1, [r0, r1]
 8027292:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027294:	28ff      	cmp	r0, #255	@ 0xff
 8027296:	d019      	beq.n	80272cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8027298:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802729a:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802729e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80272a2:	fb04 fa01 	mul.w	sl, r4, r1
 80272a6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80272aa:	fb08 f800 	mul.w	r8, r8, r0
 80272ae:	f10a 0020 	add.w	r0, sl, #32
 80272b2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80272b6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80272ba:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80272be:	4441      	add	r1, r8
 80272c0:	0a00      	lsrs	r0, r0, #8
 80272c2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80272c6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80272ca:	4301      	orrs	r1, r0
 80272cc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80272ce:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80272d2:	2cff      	cmp	r4, #255	@ 0xff
 80272d4:	d01a      	beq.n	802730c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 80272d6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80272da:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80272de:	fb04 fa00 	mul.w	sl, r4, r0
 80272e2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80272e6:	fb08 f80c 	mul.w	r8, r8, ip
 80272ea:	f10a 0c20 	add.w	ip, sl, #32
 80272ee:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80272f2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80272f6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80272fa:	4440      	add	r0, r8
 80272fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027300:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027304:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027308:	ea40 000c 	orr.w	r0, r0, ip
 802730c:	fb15 fc02 	smulbb	ip, r5, r2
 8027310:	f1c5 0810 	rsb	r8, r5, #16
 8027314:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027318:	eba8 0802 	sub.w	r8, r8, r2
 802731c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027320:	437a      	muls	r2, r7
 8027322:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027326:	fb09 2208 	mla	r2, r9, r8, r2
 802732a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802732e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027332:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027336:	ea4a 0101 	orr.w	r1, sl, r1
 802733a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802733e:	fb05 2201 	mla	r2, r5, r1, r2
 8027342:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027346:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802734a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802734e:	ea4b 0000 	orr.w	r0, fp, r0
 8027352:	fb0c 2200 	mla	r2, ip, r0, r2
 8027356:	0d57      	lsrs	r7, r2, #21
 8027358:	0952      	lsrs	r2, r2, #5
 802735a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802735e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027362:	433a      	orrs	r2, r7
 8027364:	2bff      	cmp	r3, #255	@ 0xff
 8027366:	b292      	uxth	r2, r2
 8027368:	d102      	bne.n	8027370 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802736a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802736c:	29ff      	cmp	r1, #255	@ 0xff
 802736e:	d063      	beq.n	8027438 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8027370:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027372:	f8be 1000 	ldrh.w	r1, [lr]
 8027376:	4343      	muls	r3, r0
 8027378:	1c58      	adds	r0, r3, #1
 802737a:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802737e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027382:	1208      	asrs	r0, r1, #8
 8027384:	b2db      	uxtb	r3, r3
 8027386:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802738a:	fb10 f003 	smulbb	r0, r0, r3
 802738e:	10cf      	asrs	r7, r1, #3
 8027390:	00c9      	lsls	r1, r1, #3
 8027392:	b2c9      	uxtb	r1, r1
 8027394:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027396:	1215      	asrs	r5, r2, #8
 8027398:	fb11 f103 	smulbb	r1, r1, r3
 802739c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80273a0:	fb05 0504 	mla	r5, r5, r4, r0
 80273a4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80273a8:	10d0      	asrs	r0, r2, #3
 80273aa:	00d2      	lsls	r2, r2, #3
 80273ac:	fb17 f703 	smulbb	r7, r7, r3
 80273b0:	b2d2      	uxtb	r2, r2
 80273b2:	fb02 1204 	mla	r2, r2, r4, r1
 80273b6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80273ba:	fb00 7004 	mla	r0, r0, r4, r7
 80273be:	b2ad      	uxth	r5, r5
 80273c0:	b292      	uxth	r2, r2
 80273c2:	1c6b      	adds	r3, r5, #1
 80273c4:	1c57      	adds	r7, r2, #1
 80273c6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80273ca:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80273ce:	b280      	uxth	r0, r0
 80273d0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80273d4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80273d8:	433d      	orrs	r5, r7
 80273da:	1c47      	adds	r7, r0, #1
 80273dc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80273e0:	097f      	lsrs	r7, r7, #5
 80273e2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80273e6:	433d      	orrs	r5, r7
 80273e8:	f8ae 5000 	strh.w	r5, [lr]
 80273ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80273ee:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80273f0:	f10e 0e02 	add.w	lr, lr, #2
 80273f4:	4413      	add	r3, r2
 80273f6:	9321      	str	r3, [sp, #132]	@ 0x84
 80273f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80273fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80273fc:	441a      	add	r2, r3
 80273fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027400:	9222      	str	r2, [sp, #136]	@ 0x88
 8027402:	3b01      	subs	r3, #1
 8027404:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027406:	e61c      	b.n	8027042 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027408:	fb08 f000 	mul.w	r0, r8, r0
 802740c:	fb09 0303 	mla	r3, r9, r3, r0
 8027410:	e6dc      	b.n	80271cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8027412:	46b9      	mov	r9, r7
 8027414:	e704      	b.n	8027220 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8027416:	f1c2 0110 	rsb	r1, r2, #16
 802741a:	437a      	muls	r2, r7
 802741c:	fb09 2901 	mla	r9, r9, r1, r2
 8027420:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027424:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027428:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802742c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027430:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027434:	4302      	orrs	r2, r0
 8027436:	e795      	b.n	8027364 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027438:	f8ae 2000 	strh.w	r2, [lr]
 802743c:	e7d6      	b.n	80273ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802743e:	b017      	add	sp, #92	@ 0x5c
 8027440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027448:	b085      	sub	sp, #20
 802744a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802744e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8027452:	fb00 7406 	mla	r4, r0, r6, r7
 8027456:	2800      	cmp	r0, #0
 8027458:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802745c:	9103      	str	r1, [sp, #12]
 802745e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8027462:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8027466:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802746a:	9501      	str	r5, [sp, #4]
 802746c:	eb02 0904 	add.w	r9, r2, r4
 8027470:	f2c0 8141 	blt.w	80276f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8027474:	4583      	cmp	fp, r0
 8027476:	f340 813e 	ble.w	80276f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802747a:	2f00      	cmp	r7, #0
 802747c:	f2c0 8137 	blt.w	80276ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027480:	42be      	cmp	r6, r7
 8027482:	f340 8134 	ble.w	80276ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8027486:	f812 c004 	ldrb.w	ip, [r2, r4]
 802748a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802748e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8027492:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027496:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802749a:	4355      	muls	r5, r2
 802749c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80274a0:	fb0c f203 	mul.w	r2, ip, r3
 80274a4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80274a8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 80274ac:	441d      	add	r5, r3
 80274ae:	f102 0320 	add.w	r3, r2, #32
 80274b2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80274b6:	0a1b      	lsrs	r3, r3, #8
 80274b8:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80274bc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80274c0:	431c      	orrs	r4, r3
 80274c2:	1c7b      	adds	r3, r7, #1
 80274c4:	f100 811c 	bmi.w	8027700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80274c8:	429e      	cmp	r6, r3
 80274ca:	f340 8119 	ble.w	8027700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80274ce:	2900      	cmp	r1, #0
 80274d0:	f000 8119 	beq.w	8027706 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80274d4:	9a01      	ldr	r2, [sp, #4]
 80274d6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80274da:	8855      	ldrh	r5, [r2, #2]
 80274dc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80274e0:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 80274e4:	fb08 f802 	mul.w	r8, r8, r2
 80274e8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80274ec:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80274f0:	435d      	muls	r5, r3
 80274f2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80274f6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80274fa:	44d0      	add	r8, sl
 80274fc:	f105 0a20 	add.w	sl, r5, #32
 8027500:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027504:	0a2d      	lsrs	r5, r5, #8
 8027506:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802750a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802750e:	432a      	orrs	r2, r5
 8027510:	3001      	adds	r0, #1
 8027512:	f100 80fe 	bmi.w	8027712 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8027516:	4583      	cmp	fp, r0
 8027518:	f340 80fb 	ble.w	8027712 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802751c:	f1be 0f00 	cmp.w	lr, #0
 8027520:	f000 80fc 	beq.w	802771c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8027524:	2f00      	cmp	r7, #0
 8027526:	f2c0 80f1 	blt.w	802770c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802752a:	42be      	cmp	r6, r7
 802752c:	f340 80ee 	ble.w	802770c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8027530:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8027534:	9801      	ldr	r0, [sp, #4]
 8027536:	f819 5006 	ldrb.w	r5, [r9, r6]
 802753a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802753e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027542:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8027546:	fb0a fa00 	mul.w	sl, sl, r0
 802754a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802754e:	fb05 f808 	mul.w	r8, r5, r8
 8027552:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8027556:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802755a:	4482      	add	sl, r0
 802755c:	f108 0020 	add.w	r0, r8, #32
 8027560:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027564:	0a00      	lsrs	r0, r0, #8
 8027566:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802756a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802756e:	ea4b 0b00 	orr.w	fp, fp, r0
 8027572:	3701      	adds	r7, #1
 8027574:	f100 80d7 	bmi.w	8027726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8027578:	42be      	cmp	r6, r7
 802757a:	f340 80d4 	ble.w	8027726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802757e:	2900      	cmp	r1, #0
 8027580:	f000 80d4 	beq.w	802772c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8027584:	9801      	ldr	r0, [sp, #4]
 8027586:	3601      	adds	r6, #1
 8027588:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802758c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027590:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8027594:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027598:	fb07 f800 	mul.w	r8, r7, r0
 802759c:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80275a0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80275a4:	fb09 f906 	mul.w	r9, r9, r6
 80275a8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80275ac:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80275b0:	44d1      	add	r9, sl
 80275b2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80275b6:	f108 0020 	add.w	r0, r8, #32
 80275ba:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80275be:	0a00      	lsrs	r0, r0, #8
 80275c0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80275c4:	4330      	orrs	r0, r6
 80275c6:	b28e      	uxth	r6, r1
 80275c8:	fa1f f98e 	uxth.w	r9, lr
 80275cc:	fb06 f809 	mul.w	r8, r6, r9
 80275d0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80275d4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80275d8:	0136      	lsls	r6, r6, #4
 80275da:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80275de:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80275e2:	9601      	str	r6, [sp, #4]
 80275e4:	ea4a 0404 	orr.w	r4, sl, r4
 80275e8:	fa1f f689 	uxth.w	r6, r9
 80275ec:	9602      	str	r6, [sp, #8]
 80275ee:	4626      	mov	r6, r4
 80275f0:	fb11 f90e 	smulbb	r9, r1, lr
 80275f4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80275f8:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80275fc:	f1ce 0410 	rsb	r4, lr, #16
 8027600:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027604:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027608:	1a64      	subs	r4, r4, r1
 802760a:	ea4a 0202 	orr.w	r2, sl, r2
 802760e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8027612:	434a      	muls	r2, r1
 8027614:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027618:	fb04 2406 	mla	r4, r4, r6, r2
 802761c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027620:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027624:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027628:	ea4a 0000 	orr.w	r0, sl, r0
 802762c:	fb09 4200 	mla	r2, r9, r0, r4
 8027630:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8027634:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027638:	9801      	ldr	r0, [sp, #4]
 802763a:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802763e:	ea44 0b0b 	orr.w	fp, r4, fp
 8027642:	9c02      	ldr	r4, [sp, #8]
 8027644:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8027648:	1b00      	subs	r0, r0, r4
 802764a:	9c01      	ldr	r4, [sp, #4]
 802764c:	b280      	uxth	r0, r0
 802764e:	eba4 0608 	sub.w	r6, r4, r8
 8027652:	b2b6      	uxth	r6, r6
 8027654:	4373      	muls	r3, r6
 8027656:	fb0c 3300 	mla	r3, ip, r0, r3
 802765a:	9802      	ldr	r0, [sp, #8]
 802765c:	9903      	ldr	r1, [sp, #12]
 802765e:	fb00 3505 	mla	r5, r0, r5, r3
 8027662:	fb08 5707 	mla	r7, r8, r7, r5
 8027666:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802766a:	8809      	ldrh	r1, [r1, #0]
 802766c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027670:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8027674:	120b      	asrs	r3, r1, #8
 8027676:	b2ff      	uxtb	r7, r7
 8027678:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802767c:	437b      	muls	r3, r7
 802767e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027682:	10c8      	asrs	r0, r1, #3
 8027684:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027688:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802768c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027690:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027694:	00c9      	lsls	r1, r1, #3
 8027696:	4378      	muls	r0, r7
 8027698:	ea42 0e0e 	orr.w	lr, r2, lr
 802769c:	b2c9      	uxtb	r1, r1
 802769e:	fa1f f28e 	uxth.w	r2, lr
 80276a2:	434f      	muls	r7, r1
 80276a4:	1c59      	adds	r1, r3, #1
 80276a6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80276aa:	1213      	asrs	r3, r2, #8
 80276ac:	f023 0307 	bic.w	r3, r3, #7
 80276b0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80276b4:	1c41      	adds	r1, r0, #1
 80276b6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80276ba:	10d1      	asrs	r1, r2, #3
 80276bc:	f021 0103 	bic.w	r1, r1, #3
 80276c0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80276c4:	021b      	lsls	r3, r3, #8
 80276c6:	00c9      	lsls	r1, r1, #3
 80276c8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80276cc:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80276d0:	430b      	orrs	r3, r1
 80276d2:	1c79      	adds	r1, r7, #1
 80276d4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80276d8:	00d2      	lsls	r2, r2, #3
 80276da:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80276de:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80276e2:	431a      	orrs	r2, r3
 80276e4:	9b03      	ldr	r3, [sp, #12]
 80276e6:	801a      	strh	r2, [r3, #0]
 80276e8:	b005      	add	sp, #20
 80276ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276ee:	f04f 0c00 	mov.w	ip, #0
 80276f2:	4664      	mov	r4, ip
 80276f4:	e6e5      	b.n	80274c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80276f6:	2300      	movs	r3, #0
 80276f8:	469c      	mov	ip, r3
 80276fa:	461a      	mov	r2, r3
 80276fc:	461c      	mov	r4, r3
 80276fe:	e707      	b.n	8027510 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027700:	2300      	movs	r3, #0
 8027702:	461a      	mov	r2, r3
 8027704:	e704      	b.n	8027510 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8027706:	460b      	mov	r3, r1
 8027708:	460a      	mov	r2, r1
 802770a:	e701      	b.n	8027510 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802770c:	2500      	movs	r5, #0
 802770e:	46ab      	mov	fp, r5
 8027710:	e72f      	b.n	8027572 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8027712:	2700      	movs	r7, #0
 8027714:	463d      	mov	r5, r7
 8027716:	4638      	mov	r0, r7
 8027718:	46bb      	mov	fp, r7
 802771a:	e754      	b.n	80275c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802771c:	4677      	mov	r7, lr
 802771e:	4675      	mov	r5, lr
 8027720:	4670      	mov	r0, lr
 8027722:	46f3      	mov	fp, lr
 8027724:	e74f      	b.n	80275c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8027726:	2700      	movs	r7, #0
 8027728:	4638      	mov	r0, r7
 802772a:	e74c      	b.n	80275c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802772c:	460f      	mov	r7, r1
 802772e:	4608      	mov	r0, r1
 8027730:	e749      	b.n	80275c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08027734 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027738:	b093      	sub	sp, #76	@ 0x4c
 802773a:	9210      	str	r2, [sp, #64]	@ 0x40
 802773c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802773e:	9011      	str	r0, [sp, #68]	@ 0x44
 8027740:	6850      	ldr	r0, [r2, #4]
 8027742:	910e      	str	r1, [sp, #56]	@ 0x38
 8027744:	9306      	str	r3, [sp, #24]
 8027746:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802774a:	fb00 1303 	mla	r3, r0, r3, r1
 802774e:	6812      	ldr	r2, [r2, #0]
 8027750:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027754:	9307      	str	r3, [sp, #28]
 8027756:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027758:	681b      	ldr	r3, [r3, #0]
 802775a:	9308      	str	r3, [sp, #32]
 802775c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802775e:	685b      	ldr	r3, [r3, #4]
 8027760:	9309      	str	r3, [sp, #36]	@ 0x24
 8027762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027764:	2b00      	cmp	r3, #0
 8027766:	dc03      	bgt.n	8027770 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802776a:	2b00      	cmp	r3, #0
 802776c:	f340 83b4 	ble.w	8027ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027770:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027772:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027776:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802777a:	1e48      	subs	r0, r1, #1
 802777c:	1e55      	subs	r5, r2, #1
 802777e:	9b06      	ldr	r3, [sp, #24]
 8027780:	2b00      	cmp	r3, #0
 8027782:	f340 8163 	ble.w	8027a4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8027786:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8027788:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802778a:	1436      	asrs	r6, r6, #16
 802778c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027790:	d406      	bmi.n	80277a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027792:	4286      	cmp	r6, r0
 8027794:	da04      	bge.n	80277a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027796:	2b00      	cmp	r3, #0
 8027798:	db02      	blt.n	80277a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802779a:	42ab      	cmp	r3, r5
 802779c:	f2c0 8157 	blt.w	8027a4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80277a0:	3601      	adds	r6, #1
 80277a2:	f100 8144 	bmi.w	8027a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80277a6:	42b1      	cmp	r1, r6
 80277a8:	f2c0 8141 	blt.w	8027a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80277ac:	3301      	adds	r3, #1
 80277ae:	f100 813e 	bmi.w	8027a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80277b2:	429a      	cmp	r2, r3
 80277b4:	f2c0 813b 	blt.w	8027a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80277b8:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80277bc:	9b06      	ldr	r3, [sp, #24]
 80277be:	9f07      	ldr	r7, [sp, #28]
 80277c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80277c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80277c4:	2b00      	cmp	r3, #0
 80277c6:	f340 8164 	ble.w	8027a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80277ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80277cc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80277ce:	1418      	asrs	r0, r3, #16
 80277d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80277d2:	142d      	asrs	r5, r5, #16
 80277d4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80277d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80277da:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80277de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80277e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80277e4:	f100 81ee 	bmi.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80277e8:	f102 3eff 	add.w	lr, r2, #4294967295
 80277ec:	4575      	cmp	r5, lr
 80277ee:	f280 81e9 	bge.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80277f2:	2800      	cmp	r0, #0
 80277f4:	f2c0 81e6 	blt.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80277f8:	f103 3eff 	add.w	lr, r3, #4294967295
 80277fc:	4570      	cmp	r0, lr
 80277fe:	f280 81e1 	bge.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027802:	b212      	sxth	r2, r2
 8027804:	fb00 5002 	mla	r0, r0, r2, r5
 8027808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802780a:	fa1f fe81 	uxth.w	lr, r1
 802780e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027812:	eb03 0a00 	add.w	sl, r3, r0
 8027816:	f813 9000 	ldrb.w	r9, [r3, r0]
 802781a:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802781e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027822:	b29b      	uxth	r3, r3
 8027824:	f1bc 0f00 	cmp.w	ip, #0
 8027828:	f000 8179 	beq.w	8027b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802782c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027830:	eb0a 0b02 	add.w	fp, sl, r2
 8027834:	fa1f fa8c 	uxth.w	sl, ip
 8027838:	fb0a fe0e 	mul.w	lr, sl, lr
 802783c:	eba5 050e 	sub.w	r5, r5, lr
 8027840:	b2ad      	uxth	r5, r5
 8027842:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027846:	fb08 f505 	mul.w	r5, r8, r5
 802784a:	fa1f fa8a 	uxth.w	sl, sl
 802784e:	eba3 030a 	sub.w	r3, r3, sl
 8027852:	b29b      	uxth	r3, r3
 8027854:	940a      	str	r4, [sp, #40]	@ 0x28
 8027856:	fb09 5303 	mla	r3, r9, r3, r5
 802785a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802785e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027860:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027862:	fb0a 3304 	mla	r3, sl, r4, r3
 8027866:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027868:	fb0e 3304 	mla	r3, lr, r4, r3
 802786c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027870:	2b00      	cmp	r3, #0
 8027872:	f000 80cf 	beq.w	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027876:	9c08      	ldr	r4, [sp, #32]
 8027878:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802787c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027880:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027884:	f000 8150 	beq.w	8027b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8027888:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802788c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027890:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027894:	fb09 f000 	mul.w	r0, r9, r0
 8027898:	fb0a fe0e 	mul.w	lr, sl, lr
 802789c:	f100 0b20 	add.w	fp, r0, #32
 80278a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80278a4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80278a8:	44ce      	add	lr, r9
 80278aa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80278ae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80278b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80278b6:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80278ba:	ea4e 0909 	orr.w	r9, lr, r9
 80278be:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80278c2:	8868      	ldrh	r0, [r5, #2]
 80278c4:	d019      	beq.n	80278fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80278c6:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80278ca:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80278ce:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80278d2:	fb08 f800 	mul.w	r8, r8, r0
 80278d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80278da:	f108 0b20 	add.w	fp, r8, #32
 80278de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80278e2:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80278e6:	4486      	add	lr, r0
 80278e8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80278ec:	0a00      	lsrs	r0, r0, #8
 80278ee:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80278f2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80278f6:	ea4e 0000 	orr.w	r0, lr, r0
 80278fa:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80278fe:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027902:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027906:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802790a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802790e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027912:	ea4e 0909 	orr.w	r9, lr, r9
 8027916:	ea4a 0000 	orr.w	r0, sl, r0
 802791a:	f1bc 0f00 	cmp.w	ip, #0
 802791e:	f000 8105 	beq.w	8027b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027922:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8027926:	3a01      	subs	r2, #1
 8027928:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802792a:	0052      	lsls	r2, r2, #1
 802792c:	3202      	adds	r2, #2
 802792e:	2cff      	cmp	r4, #255	@ 0xff
 8027930:	eb05 0e02 	add.w	lr, r5, r2
 8027934:	5aaa      	ldrh	r2, [r5, r2]
 8027936:	d018      	beq.n	802796a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027938:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 802793c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027940:	fb04 fa02 	mul.w	sl, r4, r2
 8027944:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027948:	fb08 f805 	mul.w	r8, r8, r5
 802794c:	f10a 0520 	add.w	r5, sl, #32
 8027950:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027954:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027958:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802795c:	4442      	add	r2, r8
 802795e:	0a2d      	lsrs	r5, r5, #8
 8027960:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027964:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027968:	432a      	orrs	r2, r5
 802796a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802796c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027970:	2cff      	cmp	r4, #255	@ 0xff
 8027972:	d01a      	beq.n	80279aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8027974:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8027978:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802797c:	fb04 fa05 	mul.w	sl, r4, r5
 8027980:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027984:	fb08 f80e 	mul.w	r8, r8, lr
 8027988:	f10a 0e20 	add.w	lr, sl, #32
 802798c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027990:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027994:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027998:	4445      	add	r5, r8
 802799a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802799e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80279a2:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80279a6:	ea45 050e 	orr.w	r5, r5, lr
 80279aa:	fb1c fe01 	smulbb	lr, ip, r1
 80279ae:	f1cc 0810 	rsb	r8, ip, #16
 80279b2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80279b6:	eba8 0801 	sub.w	r8, r8, r1
 80279ba:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80279be:	4341      	muls	r1, r0
 80279c0:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80279c4:	fb09 1108 	mla	r1, r9, r8, r1
 80279c8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80279cc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80279d0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80279d4:	ea4a 0202 	orr.w	r2, sl, r2
 80279d8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80279dc:	fb0c 1102 	mla	r1, ip, r2, r1
 80279e0:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80279e4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80279e8:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80279ec:	ea4b 0505 	orr.w	r5, fp, r5
 80279f0:	fb0e 1e05 	mla	lr, lr, r5, r1
 80279f4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80279f8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80279fc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027a00:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027a04:	ea42 0e0e 	orr.w	lr, r2, lr
 8027a08:	fa1f f28e 	uxth.w	r2, lr
 8027a0c:	2bff      	cmp	r3, #255	@ 0xff
 8027a0e:	f040 80a1 	bne.w	8027b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027a12:	803a      	strh	r2, [r7, #0]
 8027a14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027a16:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8027a18:	3702      	adds	r7, #2
 8027a1a:	4413      	add	r3, r2
 8027a1c:	931d      	str	r3, [sp, #116]	@ 0x74
 8027a1e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8027a20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a22:	441a      	add	r2, r3
 8027a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a26:	921e      	str	r2, [sp, #120]	@ 0x78
 8027a28:	3b01      	subs	r3, #1
 8027a2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027a2c:	e6c9      	b.n	80277c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027a2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027a30:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8027a32:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8027a34:	4433      	add	r3, r6
 8027a36:	931d      	str	r3, [sp, #116]	@ 0x74
 8027a38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027a3a:	441c      	add	r4, r3
 8027a3c:	9b06      	ldr	r3, [sp, #24]
 8027a3e:	941e      	str	r4, [sp, #120]	@ 0x78
 8027a40:	3b01      	subs	r3, #1
 8027a42:	9306      	str	r3, [sp, #24]
 8027a44:	9b07      	ldr	r3, [sp, #28]
 8027a46:	3302      	adds	r3, #2
 8027a48:	9307      	str	r3, [sp, #28]
 8027a4a:	e698      	b.n	802777e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027a4c:	d028      	beq.n	8027aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027a4e:	9b06      	ldr	r3, [sp, #24]
 8027a50:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8027a52:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8027a54:	3b01      	subs	r3, #1
 8027a56:	fb00 5003 	mla	r0, r0, r3, r5
 8027a5a:	1400      	asrs	r0, r0, #16
 8027a5c:	f53f aeac 	bmi.w	80277b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027a60:	3901      	subs	r1, #1
 8027a62:	4288      	cmp	r0, r1
 8027a64:	f6bf aea8 	bge.w	80277b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027a68:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8027a6a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8027a6c:	fb01 0303 	mla	r3, r1, r3, r0
 8027a70:	141b      	asrs	r3, r3, #16
 8027a72:	f53f aea1 	bmi.w	80277b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027a76:	3a01      	subs	r2, #1
 8027a78:	4293      	cmp	r3, r2
 8027a7a:	f6bf ae9d 	bge.w	80277b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8027a7e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027a82:	9b06      	ldr	r3, [sp, #24]
 8027a84:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027a88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027a8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a8c:	2b00      	cmp	r3, #0
 8027a8e:	f300 80b6 	bgt.w	8027bfe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8027a92:	9b06      	ldr	r3, [sp, #24]
 8027a94:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027a98:	9b07      	ldr	r3, [sp, #28]
 8027a9a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027a9e:	9307      	str	r3, [sp, #28]
 8027aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027aa2:	2b00      	cmp	r3, #0
 8027aa4:	f340 8218 	ble.w	8027ed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8027aa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027aac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027ab0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027ab4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ab8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027abc:	eef0 6a62 	vmov.f32	s13, s5
 8027ac0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027ac4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027ac8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027acc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ad0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027ad4:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8027ad8:	eef0 6a43 	vmov.f32	s13, s6
 8027adc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027ae0:	ee12 2a90 	vmov	r2, s5
 8027ae4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027ae8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027aea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027aee:	fb92 f3f3 	sdiv	r3, r2, r3
 8027af2:	ee13 2a10 	vmov	r2, s6
 8027af6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027af8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027afa:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8027afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b02:	9320      	str	r3, [sp, #128]	@ 0x80
 8027b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027b06:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027b08:	3b01      	subs	r3, #1
 8027b0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8027b0c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027b0e:	bf08      	it	eq
 8027b10:	4613      	moveq	r3, r2
 8027b12:	eeb0 3a67 	vmov.f32	s6, s15
 8027b16:	9306      	str	r3, [sp, #24]
 8027b18:	eef0 2a47 	vmov.f32	s5, s14
 8027b1c:	e621      	b.n	8027762 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8027b1e:	fb08 f505 	mul.w	r5, r8, r5
 8027b22:	fb09 5303 	mla	r3, r9, r3, r5
 8027b26:	e6a1      	b.n	802786c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8027b28:	4681      	mov	r9, r0
 8027b2a:	e6c8      	b.n	80278be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027b2c:	f1c1 0210 	rsb	r2, r1, #16
 8027b30:	4341      	muls	r1, r0
 8027b32:	fb09 1902 	mla	r9, r9, r2, r1
 8027b36:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027b3a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027b3e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027b42:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027b46:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027b4a:	ea42 0909 	orr.w	r9, r2, r9
 8027b4e:	fa1f f289 	uxth.w	r2, r9
 8027b52:	e75b      	b.n	8027a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8027b54:	43db      	mvns	r3, r3
 8027b56:	f8b7 c000 	ldrh.w	ip, [r7]
 8027b5a:	fa5f fe83 	uxtb.w	lr, r3
 8027b5e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027b62:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027b66:	fb00 f00e 	mul.w	r0, r0, lr
 8027b6a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027b6e:	1c41      	adds	r1, r0, #1
 8027b70:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027b74:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027b78:	fb05 f50e 	mul.w	r5, r5, lr
 8027b7c:	1211      	asrs	r1, r2, #8
 8027b7e:	f021 0107 	bic.w	r1, r1, #7
 8027b82:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027b86:	48d6      	ldr	r0, [pc, #856]	@ (8027ee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8027b88:	b2c9      	uxtb	r1, r1
 8027b8a:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027b8e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027b92:	1c69      	adds	r1, r5, #1
 8027b94:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027b98:	b2db      	uxtb	r3, r3
 8027b9a:	10d1      	asrs	r1, r2, #3
 8027b9c:	fb03 f30e 	mul.w	r3, r3, lr
 8027ba0:	f021 0103 	bic.w	r1, r1, #3
 8027ba4:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027ba8:	00c9      	lsls	r1, r1, #3
 8027baa:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027bae:	4301      	orrs	r1, r0
 8027bb0:	1c58      	adds	r0, r3, #1
 8027bb2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027bb6:	00d2      	lsls	r2, r2, #3
 8027bb8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027bbc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027bc0:	430a      	orrs	r2, r1
 8027bc2:	e726      	b.n	8027a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8027bc4:	f115 0e01 	adds.w	lr, r5, #1
 8027bc8:	f53f af24 	bmi.w	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027bcc:	4572      	cmp	r2, lr
 8027bce:	f6ff af21 	blt.w	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027bd2:	f110 0e01 	adds.w	lr, r0, #1
 8027bd6:	f53f af1d 	bmi.w	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027bda:	4573      	cmp	r3, lr
 8027bdc:	f6ff af1a 	blt.w	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027be0:	b21b      	sxth	r3, r3
 8027be2:	b212      	sxth	r2, r2
 8027be4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027be8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027bec:	9301      	str	r3, [sp, #4]
 8027bee:	9200      	str	r2, [sp, #0]
 8027bf0:	4639      	mov	r1, r7
 8027bf2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8027bf6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027bf8:	f7ff fc24 	bl	8027444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027bfc:	e70a      	b.n	8027a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8027bfe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027c00:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027c04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027c06:	fa1f fc82 	uxth.w	ip, r2
 8027c0a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027c0e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027c10:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027c14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c18:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8027c1a:	141f      	asrs	r7, r3, #16
 8027c1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027c1e:	141b      	asrs	r3, r3, #16
 8027c20:	fb01 3707 	mla	r7, r1, r7, r3
 8027c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c26:	eb03 0a07 	add.w	sl, r3, r7
 8027c2a:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027c2e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8027c32:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027c36:	b29b      	uxth	r3, r3
 8027c38:	2d00      	cmp	r5, #0
 8027c3a:	f000 80fe 	beq.w	8027e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8027c3e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027c42:	eb0a 0b01 	add.w	fp, sl, r1
 8027c46:	fa1f fa85 	uxth.w	sl, r5
 8027c4a:	fb0a fc0c 	mul.w	ip, sl, ip
 8027c4e:	eba0 000c 	sub.w	r0, r0, ip
 8027c52:	b280      	uxth	r0, r0
 8027c54:	fb08 f000 	mul.w	r0, r8, r0
 8027c58:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027c5c:	fa1f fa8a 	uxth.w	sl, sl
 8027c60:	eba3 030a 	sub.w	r3, r3, sl
 8027c64:	b29b      	uxth	r3, r3
 8027c66:	fb09 0303 	mla	r3, r9, r3, r0
 8027c6a:	940c      	str	r4, [sp, #48]	@ 0x30
 8027c6c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027c6e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027c72:	fb0a 3300 	mla	r3, sl, r0, r3
 8027c76:	fb0c 3304 	mla	r3, ip, r4, r3
 8027c7a:	940d      	str	r4, [sp, #52]	@ 0x34
 8027c7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c80:	2b00      	cmp	r3, #0
 8027c82:	f000 80cc 	beq.w	8027e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8027c86:	9808      	ldr	r0, [sp, #32]
 8027c88:	9c08      	ldr	r4, [sp, #32]
 8027c8a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027c8e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027c92:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027c96:	f000 80d5 	beq.w	8027e44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027c9a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027c9e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027ca2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027ca6:	fb09 f707 	mul.w	r7, r9, r7
 8027caa:	fb0a fc0c 	mul.w	ip, sl, ip
 8027cae:	f107 0b20 	add.w	fp, r7, #32
 8027cb2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027cb6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027cba:	44cc      	add	ip, r9
 8027cbc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027cc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027cc4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027cc8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027ccc:	ea4c 0909 	orr.w	r9, ip, r9
 8027cd0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027cd4:	8847      	ldrh	r7, [r0, #2]
 8027cd6:	d019      	beq.n	8027d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8027cd8:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027cdc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027ce0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027ce4:	fb08 f807 	mul.w	r8, r8, r7
 8027ce8:	fb0a fc0c 	mul.w	ip, sl, ip
 8027cec:	f108 0b20 	add.w	fp, r8, #32
 8027cf0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027cf4:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027cf8:	44bc      	add	ip, r7
 8027cfa:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027cfe:	0a3f      	lsrs	r7, r7, #8
 8027d00:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027d04:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027d08:	ea4c 0707 	orr.w	r7, ip, r7
 8027d0c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027d10:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027d14:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027d18:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027d1c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027d20:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027d24:	ea4c 0909 	orr.w	r9, ip, r9
 8027d28:	ea4a 0707 	orr.w	r7, sl, r7
 8027d2c:	2d00      	cmp	r5, #0
 8027d2e:	f000 808b 	beq.w	8027e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8027d32:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027d36:	3901      	subs	r1, #1
 8027d38:	0049      	lsls	r1, r1, #1
 8027d3a:	3102      	adds	r1, #2
 8027d3c:	eb00 0c01 	add.w	ip, r0, r1
 8027d40:	5a41      	ldrh	r1, [r0, r1]
 8027d42:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027d44:	28ff      	cmp	r0, #255	@ 0xff
 8027d46:	d019      	beq.n	8027d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8027d48:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027d4a:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8027d4e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027d52:	fb04 fa01 	mul.w	sl, r4, r1
 8027d56:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d5a:	fb08 f800 	mul.w	r8, r8, r0
 8027d5e:	f10a 0020 	add.w	r0, sl, #32
 8027d62:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027d66:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027d6a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027d6e:	4441      	add	r1, r8
 8027d70:	0a00      	lsrs	r0, r0, #8
 8027d72:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027d76:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027d7a:	4301      	orrs	r1, r0
 8027d7c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027d7e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027d82:	2cff      	cmp	r4, #255	@ 0xff
 8027d84:	d01a      	beq.n	8027dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8027d86:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8027d8a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027d8e:	fb04 fa00 	mul.w	sl, r4, r0
 8027d92:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d96:	fb08 f80c 	mul.w	r8, r8, ip
 8027d9a:	f10a 0c20 	add.w	ip, sl, #32
 8027d9e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027da2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027da6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027daa:	4440      	add	r0, r8
 8027dac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027db0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027db4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027db8:	ea40 000c 	orr.w	r0, r0, ip
 8027dbc:	fb15 fc02 	smulbb	ip, r5, r2
 8027dc0:	f1c5 0810 	rsb	r8, r5, #16
 8027dc4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027dc8:	eba8 0802 	sub.w	r8, r8, r2
 8027dcc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027dd0:	437a      	muls	r2, r7
 8027dd2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027dd6:	fb09 2208 	mla	r2, r9, r8, r2
 8027dda:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027dde:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027de2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027de6:	ea4a 0101 	orr.w	r1, sl, r1
 8027dea:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027dee:	fb05 2201 	mla	r2, r5, r1, r2
 8027df2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027df6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027dfa:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027dfe:	ea4b 0000 	orr.w	r0, fp, r0
 8027e02:	fb0c 2200 	mla	r2, ip, r0, r2
 8027e06:	0d57      	lsrs	r7, r2, #21
 8027e08:	0952      	lsrs	r2, r2, #5
 8027e0a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027e0e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027e12:	433a      	orrs	r2, r7
 8027e14:	2bff      	cmp	r3, #255	@ 0xff
 8027e16:	b292      	uxth	r2, r2
 8027e18:	d127      	bne.n	8027e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8027e1a:	f8ae 2000 	strh.w	r2, [lr]
 8027e1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027e20:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8027e22:	f10e 0e02 	add.w	lr, lr, #2
 8027e26:	4413      	add	r3, r2
 8027e28:	931d      	str	r3, [sp, #116]	@ 0x74
 8027e2a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8027e2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027e2e:	441a      	add	r2, r3
 8027e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027e32:	921e      	str	r2, [sp, #120]	@ 0x78
 8027e34:	3b01      	subs	r3, #1
 8027e36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027e38:	e627      	b.n	8027a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8027e3a:	fb08 f000 	mul.w	r0, r8, r0
 8027e3e:	fb09 0303 	mla	r3, r9, r3, r0
 8027e42:	e71b      	b.n	8027c7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8027e44:	46b9      	mov	r9, r7
 8027e46:	e743      	b.n	8027cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8027e48:	f1c2 0110 	rsb	r1, r2, #16
 8027e4c:	437a      	muls	r2, r7
 8027e4e:	fb09 2901 	mla	r9, r9, r1, r2
 8027e52:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027e56:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027e5a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027e5e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027e62:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027e66:	4302      	orrs	r2, r0
 8027e68:	e7d4      	b.n	8027e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8027e6a:	43db      	mvns	r3, r3
 8027e6c:	f8be 7000 	ldrh.w	r7, [lr]
 8027e70:	fa5f fc83 	uxtb.w	ip, r3
 8027e74:	1238      	asrs	r0, r7, #8
 8027e76:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027e7a:	fb00 f00c 	mul.w	r0, r0, ip
 8027e7e:	10fd      	asrs	r5, r7, #3
 8027e80:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027e84:	fb05 f10c 	mul.w	r1, r5, ip
 8027e88:	1c45      	adds	r5, r0, #1
 8027e8a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027e8e:	1215      	asrs	r5, r2, #8
 8027e90:	f025 0507 	bic.w	r5, r5, #7
 8027e94:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027e98:	00fb      	lsls	r3, r7, #3
 8027e9a:	1c4d      	adds	r5, r1, #1
 8027e9c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027ea0:	b2db      	uxtb	r3, r3
 8027ea2:	10d1      	asrs	r1, r2, #3
 8027ea4:	fb03 f30c 	mul.w	r3, r3, ip
 8027ea8:	f021 0103 	bic.w	r1, r1, #3
 8027eac:	4c0c      	ldr	r4, [pc, #48]	@ (8027ee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8027eae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027eb2:	b2c0      	uxtb	r0, r0
 8027eb4:	00c9      	lsls	r1, r1, #3
 8027eb6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027eba:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027ebe:	4308      	orrs	r0, r1
 8027ec0:	1c59      	adds	r1, r3, #1
 8027ec2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027ec6:	00d2      	lsls	r2, r2, #3
 8027ec8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027ecc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027ed0:	4318      	orrs	r0, r3
 8027ed2:	f8ae 0000 	strh.w	r0, [lr]
 8027ed6:	e7a2      	b.n	8027e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8027ed8:	b013      	add	sp, #76	@ 0x4c
 8027eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ede:	bf00      	nop
 8027ee0:	fffff800 	.word	0xfffff800

08027ee4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027ee8:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8027eec:	fb05 4c03 	mla	ip, r5, r3, r4
 8027ef0:	2d00      	cmp	r5, #0
 8027ef2:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027ef6:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8027efa:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027efe:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8027f02:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027f06:	8808      	ldrh	r0, [r1, #0]
 8027f08:	f2c0 80a7 	blt.w	802805a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027f0c:	45aa      	cmp	sl, r5
 8027f0e:	f340 80a4 	ble.w	802805a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8027f12:	2c00      	cmp	r4, #0
 8027f14:	f2c0 809f 	blt.w	8028056 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027f18:	42a3      	cmp	r3, r4
 8027f1a:	f340 809c 	ble.w	8028056 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8027f1e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8027f22:	1c62      	adds	r2, r4, #1
 8027f24:	f100 809c 	bmi.w	8028060 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027f28:	4293      	cmp	r3, r2
 8027f2a:	f340 8099 	ble.w	8028060 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027f2e:	f1b9 0f00 	cmp.w	r9, #0
 8027f32:	f000 8095 	beq.w	8028060 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8027f36:	f8be c002 	ldrh.w	ip, [lr, #2]
 8027f3a:	3501      	adds	r5, #1
 8027f3c:	f100 8094 	bmi.w	8028068 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027f40:	45aa      	cmp	sl, r5
 8027f42:	f340 8091 	ble.w	8028068 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027f46:	2f00      	cmp	r7, #0
 8027f48:	f000 808e 	beq.w	8028068 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8027f4c:	2c00      	cmp	r4, #0
 8027f4e:	f2c0 8089 	blt.w	8028064 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027f52:	42a3      	cmp	r3, r4
 8027f54:	f340 8086 	ble.w	8028064 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8027f58:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8027f5c:	3401      	adds	r4, #1
 8027f5e:	f100 8086 	bmi.w	802806e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027f62:	42a3      	cmp	r3, r4
 8027f64:	f340 8083 	ble.w	802806e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027f68:	f1b9 0f00 	cmp.w	r9, #0
 8027f6c:	d07f      	beq.n	802806e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8027f6e:	3301      	adds	r3, #1
 8027f70:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8027f74:	fb19 fe07 	smulbb	lr, r9, r7
 8027f78:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8027f7c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027f80:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8027f84:	ea44 0808 	orr.w	r8, r4, r8
 8027f88:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8027f8c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8027f90:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027f94:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027f98:	ea44 0c0c 	orr.w	ip, r4, ip
 8027f9c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8027fa0:	fb04 f40c 	mul.w	r4, r4, ip
 8027fa4:	f1c7 0210 	rsb	r2, r7, #16
 8027fa8:	eba2 0209 	sub.w	r2, r2, r9
 8027fac:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8027fb0:	fb02 4808 	mla	r8, r2, r8, r4
 8027fb4:	b2b4      	uxth	r4, r6
 8027fb6:	43f6      	mvns	r6, r6
 8027fb8:	041a      	lsls	r2, r3, #16
 8027fba:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027fbe:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027fc2:	4313      	orrs	r3, r2
 8027fc4:	fb0e 8303 	mla	r3, lr, r3, r8
 8027fc8:	042a      	lsls	r2, r5, #16
 8027fca:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8027fce:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027fd2:	432a      	orrs	r2, r5
 8027fd4:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8027fd8:	fb07 3202 	mla	r2, r7, r2, r3
 8027fdc:	0d53      	lsrs	r3, r2, #21
 8027fde:	0952      	lsrs	r2, r2, #5
 8027fe0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027fe4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027fe8:	431a      	orrs	r2, r3
 8027fea:	b293      	uxth	r3, r2
 8027fec:	1202      	asrs	r2, r0, #8
 8027fee:	b2f6      	uxtb	r6, r6
 8027ff0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027ff4:	fb12 f206 	smulbb	r2, r2, r6
 8027ff8:	10c7      	asrs	r7, r0, #3
 8027ffa:	00c0      	lsls	r0, r0, #3
 8027ffc:	b2c0      	uxtb	r0, r0
 8027ffe:	121d      	asrs	r5, r3, #8
 8028000:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8028004:	fb10 f006 	smulbb	r0, r0, r6
 8028008:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802800c:	fb17 f706 	smulbb	r7, r7, r6
 8028010:	fb05 2504 	mla	r5, r5, r4, r2
 8028014:	10da      	asrs	r2, r3, #3
 8028016:	00db      	lsls	r3, r3, #3
 8028018:	b2db      	uxtb	r3, r3
 802801a:	fb03 0004 	mla	r0, r3, r4, r0
 802801e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028022:	fb02 7204 	mla	r2, r2, r4, r7
 8028026:	b2ad      	uxth	r5, r5
 8028028:	b280      	uxth	r0, r0
 802802a:	1c6b      	adds	r3, r5, #1
 802802c:	b292      	uxth	r2, r2
 802802e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028032:	1c43      	adds	r3, r0, #1
 8028034:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028038:	1c50      	adds	r0, r2, #1
 802803a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802803e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028042:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028046:	0952      	lsrs	r2, r2, #5
 8028048:	432b      	orrs	r3, r5
 802804a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802804e:	4313      	orrs	r3, r2
 8028050:	800b      	strh	r3, [r1, #0]
 8028052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028056:	4680      	mov	r8, r0
 8028058:	e763      	b.n	8027f22 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802805a:	4684      	mov	ip, r0
 802805c:	4680      	mov	r8, r0
 802805e:	e76c      	b.n	8027f3a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028060:	4684      	mov	ip, r0
 8028062:	e76a      	b.n	8027f3a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028064:	4605      	mov	r5, r0
 8028066:	e779      	b.n	8027f5c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8028068:	4603      	mov	r3, r0
 802806a:	4605      	mov	r5, r0
 802806c:	e782      	b.n	8027f74 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802806e:	4603      	mov	r3, r0
 8028070:	e780      	b.n	8027f74 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08028072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028076:	b093      	sub	sp, #76	@ 0x4c
 8028078:	461d      	mov	r5, r3
 802807a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802807e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028080:	910a      	str	r1, [sp, #40]	@ 0x28
 8028082:	9210      	str	r2, [sp, #64]	@ 0x40
 8028084:	6859      	ldr	r1, [r3, #4]
 8028086:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 802808a:	681b      	ldr	r3, [r3, #0]
 802808c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802808e:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8028092:	fb01 2707 	mla	r7, r1, r7, r2
 8028096:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802809a:	9307      	str	r3, [sp, #28]
 802809c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802809e:	9011      	str	r0, [sp, #68]	@ 0x44
 80280a0:	681b      	ldr	r3, [r3, #0]
 80280a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80280a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80280a6:	43db      	mvns	r3, r3
 80280a8:	b2db      	uxtb	r3, r3
 80280aa:	9308      	str	r3, [sp, #32]
 80280ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80280ae:	2b00      	cmp	r3, #0
 80280b0:	dc03      	bgt.n	80280ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80280b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80280b4:	2b00      	cmp	r3, #0
 80280b6:	f340 8203 	ble.w	80284c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80280ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80280bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80280c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80280c4:	1e48      	subs	r0, r1, #1
 80280c6:	f102 3cff 	add.w	ip, r2, #4294967295
 80280ca:	2d00      	cmp	r5, #0
 80280cc:	f340 80da 	ble.w	8028284 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80280d0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80280d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80280d8:	d406      	bmi.n	80280e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80280da:	4586      	cmp	lr, r0
 80280dc:	da04      	bge.n	80280e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80280de:	2b00      	cmp	r3, #0
 80280e0:	db02      	blt.n	80280e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80280e2:	4563      	cmp	r3, ip
 80280e4:	f2c0 80cf 	blt.w	8028286 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80280e8:	f11e 0e01 	adds.w	lr, lr, #1
 80280ec:	f100 80c1 	bmi.w	8028272 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80280f0:	4571      	cmp	r1, lr
 80280f2:	f2c0 80be 	blt.w	8028272 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80280f6:	3301      	adds	r3, #1
 80280f8:	f100 80bb 	bmi.w	8028272 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80280fc:	429a      	cmp	r2, r3
 80280fe:	f2c0 80b8 	blt.w	8028272 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028102:	46a9      	mov	r9, r5
 8028104:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028108:	f1b9 0f00 	cmp.w	r9, #0
 802810c:	f340 80d8 	ble.w	80282c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8028110:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028112:	1421      	asrs	r1, r4, #16
 8028114:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028118:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802811c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028120:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028124:	f100 8111 	bmi.w	802834a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028128:	f10e 3aff 	add.w	sl, lr, #4294967295
 802812c:	4551      	cmp	r1, sl
 802812e:	f280 810c 	bge.w	802834a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028132:	2800      	cmp	r0, #0
 8028134:	f2c0 8109 	blt.w	802834a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028138:	f103 3aff 	add.w	sl, r3, #4294967295
 802813c:	4550      	cmp	r0, sl
 802813e:	f280 8104 	bge.w	802834a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028142:	fa0f f38e 	sxth.w	r3, lr
 8028146:	fb00 1103 	mla	r1, r0, r3, r1
 802814a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802814c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028150:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028154:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028158:	f1bc 0f00 	cmp.w	ip, #0
 802815c:	d007      	beq.n	802816e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802815e:	005b      	lsls	r3, r3, #1
 8028160:	eb0a 0003 	add.w	r0, sl, r3
 8028164:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028168:	930c      	str	r3, [sp, #48]	@ 0x30
 802816a:	8843      	ldrh	r3, [r0, #2]
 802816c:	930d      	str	r3, [sp, #52]	@ 0x34
 802816e:	fb12 f30c 	smulbb	r3, r2, ip
 8028172:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028176:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802817a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802817e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028182:	10db      	asrs	r3, r3, #3
 8028184:	ea40 000e 	orr.w	r0, r0, lr
 8028188:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802818c:	f1cc 0e10 	rsb	lr, ip, #16
 8028190:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028194:	ebae 0e02 	sub.w	lr, lr, r2
 8028198:	ea4a 0101 	orr.w	r1, sl, r1
 802819c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80281a0:	4351      	muls	r1, r2
 80281a2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80281a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80281a8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80281ac:	0410      	lsls	r0, r2, #16
 80281ae:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80281b2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80281b6:	4310      	orrs	r0, r2
 80281b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80281ba:	fb03 e000 	mla	r0, r3, r0, lr
 80281be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80281c0:	0412      	lsls	r2, r2, #16
 80281c2:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80281c6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80281ca:	ea42 020e 	orr.w	r2, r2, lr
 80281ce:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80281d2:	fb03 0302 	mla	r3, r3, r2, r0
 80281d6:	f8b8 0000 	ldrh.w	r0, [r8]
 80281da:	9f08      	ldr	r7, [sp, #32]
 80281dc:	0d5a      	lsrs	r2, r3, #21
 80281de:	1201      	asrs	r1, r0, #8
 80281e0:	095b      	lsrs	r3, r3, #5
 80281e2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80281e6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80281ea:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80281ee:	4313      	orrs	r3, r2
 80281f0:	fb11 f107 	smulbb	r1, r1, r7
 80281f4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80281f8:	00c0      	lsls	r0, r0, #3
 80281fa:	b29b      	uxth	r3, r3
 80281fc:	b2c0      	uxtb	r0, r0
 80281fe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8028202:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028206:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802820a:	fb10 f007 	smulbb	r0, r0, r7
 802820e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8028212:	fb1e fe07 	smulbb	lr, lr, r7
 8028216:	fb0c 1c02 	mla	ip, ip, r2, r1
 802821a:	10d9      	asrs	r1, r3, #3
 802821c:	00db      	lsls	r3, r3, #3
 802821e:	b2db      	uxtb	r3, r3
 8028220:	fb03 0302 	mla	r3, r3, r2, r0
 8028224:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028228:	fb01 e102 	mla	r1, r1, r2, lr
 802822c:	fa1f fc8c 	uxth.w	ip, ip
 8028230:	b29a      	uxth	r2, r3
 8028232:	f10c 0301 	add.w	r3, ip, #1
 8028236:	b289      	uxth	r1, r1
 8028238:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802823c:	1c53      	adds	r3, r2, #1
 802823e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028242:	1c4a      	adds	r2, r1, #1
 8028244:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028248:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802824c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028250:	0949      	lsrs	r1, r1, #5
 8028252:	ea43 030c 	orr.w	r3, r3, ip
 8028256:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802825a:	430b      	orrs	r3, r1
 802825c:	f8a8 3000 	strh.w	r3, [r8]
 8028260:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028262:	f108 0802 	add.w	r8, r8, #2
 8028266:	441c      	add	r4, r3
 8028268:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802826a:	f109 39ff 	add.w	r9, r9, #4294967295
 802826e:	441e      	add	r6, r3
 8028270:	e74a      	b.n	8028108 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028272:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028274:	3d01      	subs	r5, #1
 8028276:	441c      	add	r4, r3
 8028278:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802827a:	441e      	add	r6, r3
 802827c:	9b07      	ldr	r3, [sp, #28]
 802827e:	3302      	adds	r3, #2
 8028280:	9307      	str	r3, [sp, #28]
 8028282:	e722      	b.n	80280ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028284:	d022      	beq.n	80282cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028286:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028288:	1e6b      	subs	r3, r5, #1
 802828a:	fb00 4003 	mla	r0, r0, r3, r4
 802828e:	1400      	asrs	r0, r0, #16
 8028290:	f53f af37 	bmi.w	8028102 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028294:	3901      	subs	r1, #1
 8028296:	4288      	cmp	r0, r1
 8028298:	f6bf af33 	bge.w	8028102 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802829c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802829e:	fb01 6303 	mla	r3, r1, r3, r6
 80282a2:	141b      	asrs	r3, r3, #16
 80282a4:	f53f af2d 	bmi.w	8028102 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80282a8:	3a01      	subs	r2, #1
 80282aa:	4293      	cmp	r3, r2
 80282ac:	f6bf af29 	bge.w	8028102 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80282b0:	46a8      	mov	r8, r5
 80282b2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80282b6:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 80282ba:	f1b8 0f00 	cmp.w	r8, #0
 80282be:	dc5e      	bgt.n	802837e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80282c0:	9b07      	ldr	r3, [sp, #28]
 80282c2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80282c6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80282ca:	9307      	str	r3, [sp, #28]
 80282cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	f340 80f6 	ble.w	80284c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80282d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80282d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80282dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80282e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80282e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80282e8:	eef0 6a62 	vmov.f32	s13, s5
 80282ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80282f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80282f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80282f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80282fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028300:	ee16 4a90 	vmov	r4, s13
 8028304:	eef0 6a43 	vmov.f32	s13, s6
 8028308:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802830c:	ee12 2a90 	vmov	r2, s5
 8028310:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028314:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028316:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802831a:	fb92 f3f3 	sdiv	r3, r2, r3
 802831e:	ee13 2a10 	vmov	r2, s6
 8028322:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028324:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028326:	ee16 6a90 	vmov	r6, s13
 802832a:	fb92 f3f3 	sdiv	r3, r2, r3
 802832e:	9320      	str	r3, [sp, #128]	@ 0x80
 8028330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028332:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028334:	3b01      	subs	r3, #1
 8028336:	930a      	str	r3, [sp, #40]	@ 0x28
 8028338:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802833a:	bf0c      	ite	eq
 802833c:	4615      	moveq	r5, r2
 802833e:	461d      	movne	r5, r3
 8028340:	eeb0 3a67 	vmov.f32	s6, s15
 8028344:	eef0 2a47 	vmov.f32	s5, s14
 8028348:	e6b0      	b.n	80280ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802834a:	f111 0a01 	adds.w	sl, r1, #1
 802834e:	d487      	bmi.n	8028260 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028350:	45d6      	cmp	lr, sl
 8028352:	db85      	blt.n	8028260 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028354:	f110 0a01 	adds.w	sl, r0, #1
 8028358:	d482      	bmi.n	8028260 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802835a:	4553      	cmp	r3, sl
 802835c:	db80      	blt.n	8028260 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802835e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8028360:	b21b      	sxth	r3, r3
 8028362:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028366:	9101      	str	r1, [sp, #4]
 8028368:	9300      	str	r3, [sp, #0]
 802836a:	e9cd c704 	strd	ip, r7, [sp, #16]
 802836e:	fa0f f38e 	sxth.w	r3, lr
 8028372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028374:	4641      	mov	r1, r8
 8028376:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028378:	f7ff fdb4 	bl	8027ee4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802837c:	e770      	b.n	8028260 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802837e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028380:	1430      	asrs	r0, r6, #16
 8028382:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028386:	1423      	asrs	r3, r4, #16
 8028388:	fb01 3000 	mla	r0, r1, r0, r3
 802838c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802838e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028390:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028394:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028398:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802839c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80283a0:	8858      	ldrh	r0, [r3, #2]
 80283a2:	f1be 0f00 	cmp.w	lr, #0
 80283a6:	d00b      	beq.n	80283c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80283a8:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80283ac:	3901      	subs	r1, #1
 80283ae:	0049      	lsls	r1, r1, #1
 80283b0:	3102      	adds	r1, #2
 80283b2:	eb03 0b01 	add.w	fp, r3, r1
 80283b6:	5a5b      	ldrh	r3, [r3, r1]
 80283b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80283ba:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80283be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80283c0:	fb12 f30e 	smulbb	r3, r2, lr
 80283c4:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80283c8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80283cc:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80283d0:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 80283d4:	10db      	asrs	r3, r3, #3
 80283d6:	ea41 010c 	orr.w	r1, r1, ip
 80283da:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80283de:	f1ce 0c10 	rsb	ip, lr, #16
 80283e2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80283e6:	ebac 0c02 	sub.w	ip, ip, r2
 80283ea:	ea4b 0000 	orr.w	r0, fp, r0
 80283ee:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80283f2:	4350      	muls	r0, r2
 80283f4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80283f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80283fa:	fb0c 0c01 	mla	ip, ip, r1, r0
 80283fe:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028402:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028406:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 802840a:	ea4b 0101 	orr.w	r1, fp, r1
 802840e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028410:	fb03 c101 	mla	r1, r3, r1, ip
 8028414:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028416:	0412      	lsls	r2, r2, #16
 8028418:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802841c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028420:	4302      	orrs	r2, r0
 8028422:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028426:	fb03 1202 	mla	r2, r3, r2, r1
 802842a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802842e:	0952      	lsrs	r2, r2, #5
 8028430:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8028434:	f8b9 2000 	ldrh.w	r2, [r9]
 8028438:	9f08      	ldr	r7, [sp, #32]
 802843a:	1211      	asrs	r1, r2, #8
 802843c:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8028440:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028444:	fb11 f107 	smulbb	r1, r1, r7
 8028448:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802844c:	ea4b 0303 	orr.w	r3, fp, r3
 8028450:	00d2      	lsls	r2, r2, #3
 8028452:	b29b      	uxth	r3, r3
 8028454:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8028458:	b2d2      	uxtb	r2, r2
 802845a:	1218      	asrs	r0, r3, #8
 802845c:	fb1c fc07 	smulbb	ip, ip, r7
 8028460:	fb12 f207 	smulbb	r2, r2, r7
 8028464:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028468:	fb00 100a 	mla	r0, r0, sl, r1
 802846c:	10d9      	asrs	r1, r3, #3
 802846e:	00db      	lsls	r3, r3, #3
 8028470:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028474:	b2db      	uxtb	r3, r3
 8028476:	fb01 c10a 	mla	r1, r1, sl, ip
 802847a:	fb03 230a 	mla	r3, r3, sl, r2
 802847e:	b280      	uxth	r0, r0
 8028480:	b29b      	uxth	r3, r3
 8028482:	b289      	uxth	r1, r1
 8028484:	1c42      	adds	r2, r0, #1
 8028486:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802848a:	f101 0c01 	add.w	ip, r1, #1
 802848e:	1c5a      	adds	r2, r3, #1
 8028490:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028494:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028498:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802849a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802849e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80284a2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80284a6:	4310      	orrs	r0, r2
 80284a8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80284ac:	441c      	add	r4, r3
 80284ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80284b0:	ea40 000c 	orr.w	r0, r0, ip
 80284b4:	f829 0b02 	strh.w	r0, [r9], #2
 80284b8:	441e      	add	r6, r3
 80284ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80284be:	e6fc      	b.n	80282ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80284c0:	b013      	add	sp, #76	@ 0x4c
 80284c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080284c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80284c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80284ca:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80284ce:	fb0e 4703 	mla	r7, lr, r3, r4
 80284d2:	f1be 0f00 	cmp.w	lr, #0
 80284d6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80284da:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 80284de:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 80284e2:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80284e6:	8808      	ldrh	r0, [r1, #0]
 80284e8:	db60      	blt.n	80285ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80284ea:	45f1      	cmp	r9, lr
 80284ec:	dd5e      	ble.n	80285ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80284ee:	2c00      	cmp	r4, #0
 80284f0:	db5a      	blt.n	80285a8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80284f2:	42a3      	cmp	r3, r4
 80284f4:	dd58      	ble.n	80285a8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80284f6:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80284fa:	1c62      	adds	r2, r4, #1
 80284fc:	d459      	bmi.n	80285b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80284fe:	4293      	cmp	r3, r2
 8028500:	dd57      	ble.n	80285b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028502:	2d00      	cmp	r5, #0
 8028504:	d055      	beq.n	80285b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8028506:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802850a:	f11e 0e01 	adds.w	lr, lr, #1
 802850e:	d454      	bmi.n	80285ba <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028510:	45f1      	cmp	r9, lr
 8028512:	dd52      	ble.n	80285ba <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028514:	2e00      	cmp	r6, #0
 8028516:	d050      	beq.n	80285ba <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8028518:	2c00      	cmp	r4, #0
 802851a:	db4c      	blt.n	80285b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802851c:	42a3      	cmp	r3, r4
 802851e:	dd4a      	ble.n	80285b6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8028520:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8028524:	3401      	adds	r4, #1
 8028526:	d405      	bmi.n	8028534 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028528:	42a3      	cmp	r3, r4
 802852a:	dd03      	ble.n	8028534 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802852c:	b115      	cbz	r5, 8028534 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802852e:	3301      	adds	r3, #1
 8028530:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8028534:	fb15 f406 	smulbb	r4, r5, r6
 8028538:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802853c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8028540:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8028544:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028548:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802854c:	ea43 0c0c 	orr.w	ip, r3, ip
 8028550:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8028554:	f1c6 0310 	rsb	r3, r6, #16
 8028558:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802855c:	1b5b      	subs	r3, r3, r5
 802855e:	ea4e 0707 	orr.w	r7, lr, r7
 8028562:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8028566:	437d      	muls	r5, r7
 8028568:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802856c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8028570:	0403      	lsls	r3, r0, #16
 8028572:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8028576:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802857a:	4318      	orrs	r0, r3
 802857c:	fb04 c000 	mla	r0, r4, r0, ip
 8028580:	0413      	lsls	r3, r2, #16
 8028582:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8028586:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802858a:	4313      	orrs	r3, r2
 802858c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8028590:	fb06 0003 	mla	r0, r6, r3, r0
 8028594:	0d43      	lsrs	r3, r0, #21
 8028596:	0940      	lsrs	r0, r0, #5
 8028598:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802859c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80285a0:	4318      	orrs	r0, r3
 80285a2:	8008      	strh	r0, [r1, #0]
 80285a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80285a8:	4684      	mov	ip, r0
 80285aa:	e7a6      	b.n	80284fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80285ac:	4607      	mov	r7, r0
 80285ae:	4684      	mov	ip, r0
 80285b0:	e7ab      	b.n	802850a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80285b2:	4607      	mov	r7, r0
 80285b4:	e7a9      	b.n	802850a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80285b6:	4602      	mov	r2, r0
 80285b8:	e7b4      	b.n	8028524 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80285ba:	4602      	mov	r2, r0
 80285bc:	e7ba      	b.n	8028534 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080285be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80285be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285c2:	b08f      	sub	sp, #60	@ 0x3c
 80285c4:	461d      	mov	r5, r3
 80285c6:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 80285ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80285cc:	9107      	str	r1, [sp, #28]
 80285ce:	6859      	ldr	r1, [r3, #4]
 80285d0:	920c      	str	r2, [sp, #48]	@ 0x30
 80285d2:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 80285d6:	fb01 2707 	mla	r7, r1, r7, r2
 80285da:	681b      	ldr	r3, [r3, #0]
 80285dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80285de:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80285e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80285e4:	f8d3 8000 	ldr.w	r8, [r3]
 80285e8:	9b07      	ldr	r3, [sp, #28]
 80285ea:	2b00      	cmp	r3, #0
 80285ec:	dc03      	bgt.n	80285f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80285ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80285f0:	2b00      	cmp	r3, #0
 80285f2:	f340 8181 	ble.w	80288f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80285f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80285f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80285fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028600:	1e48      	subs	r0, r1, #1
 8028602:	f102 3cff 	add.w	ip, r2, #4294967295
 8028606:	2d00      	cmp	r5, #0
 8028608:	f340 809b 	ble.w	8028742 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802860c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028610:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028614:	d406      	bmi.n	8028624 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028616:	4586      	cmp	lr, r0
 8028618:	da04      	bge.n	8028624 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802861a:	2b00      	cmp	r3, #0
 802861c:	db02      	blt.n	8028624 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802861e:	4563      	cmp	r3, ip
 8028620:	f2c0 8090 	blt.w	8028744 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028624:	f11e 0e01 	adds.w	lr, lr, #1
 8028628:	f100 8084 	bmi.w	8028734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802862c:	4571      	cmp	r1, lr
 802862e:	f2c0 8081 	blt.w	8028734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028632:	3301      	adds	r3, #1
 8028634:	d47e      	bmi.n	8028734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8028636:	429a      	cmp	r2, r3
 8028638:	db7c      	blt.n	8028734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802863a:	46aa      	mov	sl, r5
 802863c:	46b9      	mov	r9, r7
 802863e:	f1ba 0f00 	cmp.w	sl, #0
 8028642:	f340 8099 	ble.w	8028778 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8028646:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028648:	1421      	asrs	r1, r4, #16
 802864a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802864e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028652:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028656:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802865a:	f100 80d0 	bmi.w	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802865e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028662:	4559      	cmp	r1, fp
 8028664:	f280 80cb 	bge.w	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028668:	2800      	cmp	r0, #0
 802866a:	f2c0 80c8 	blt.w	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802866e:	f103 3bff 	add.w	fp, r3, #4294967295
 8028672:	4558      	cmp	r0, fp
 8028674:	f280 80c3 	bge.w	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8028678:	fa0f fe8e 	sxth.w	lr, lr
 802867c:	fb00 110e 	mla	r1, r0, lr, r1
 8028680:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028684:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028688:	8841      	ldrh	r1, [r0, #2]
 802868a:	f1bc 0f00 	cmp.w	ip, #0
 802868e:	d00b      	beq.n	80286a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8028690:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8028694:	3b01      	subs	r3, #1
 8028696:	005b      	lsls	r3, r3, #1
 8028698:	3302      	adds	r3, #2
 802869a:	eb00 0e03 	add.w	lr, r0, r3
 802869e:	5ac3      	ldrh	r3, [r0, r3]
 80286a0:	9308      	str	r3, [sp, #32]
 80286a2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80286a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80286a8:	fb12 f30c 	smulbb	r3, r2, ip
 80286ac:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80286b0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80286b4:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80286b8:	ea40 000b 	orr.w	r0, r0, fp
 80286bc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80286c0:	10db      	asrs	r3, r3, #3
 80286c2:	f1cc 0e10 	rsb	lr, ip, #16
 80286c6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80286ca:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80286ce:	ebae 0e02 	sub.w	lr, lr, r2
 80286d2:	ea4b 0101 	orr.w	r1, fp, r1
 80286d6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80286da:	4351      	muls	r1, r2
 80286dc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80286e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80286e2:	fb0e 1e00 	mla	lr, lr, r0, r1
 80286e6:	0410      	lsls	r0, r2, #16
 80286e8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80286ec:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80286f0:	4310      	orrs	r0, r2
 80286f2:	9a08      	ldr	r2, [sp, #32]
 80286f4:	fb03 e000 	mla	r0, r3, r0, lr
 80286f8:	9908      	ldr	r1, [sp, #32]
 80286fa:	0412      	lsls	r2, r2, #16
 80286fc:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028700:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8028704:	ea42 020e 	orr.w	r2, r2, lr
 8028708:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802870c:	fb03 0302 	mla	r3, r3, r2, r0
 8028710:	0d5a      	lsrs	r2, r3, #21
 8028712:	095b      	lsrs	r3, r3, #5
 8028714:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028718:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802871c:	4313      	orrs	r3, r2
 802871e:	f8a9 3000 	strh.w	r3, [r9]
 8028722:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8028724:	f109 0902 	add.w	r9, r9, #2
 8028728:	441c      	add	r4, r3
 802872a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802872c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028730:	441e      	add	r6, r3
 8028732:	e784      	b.n	802863e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8028734:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8028736:	3d01      	subs	r5, #1
 8028738:	441c      	add	r4, r3
 802873a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802873c:	3702      	adds	r7, #2
 802873e:	441e      	add	r6, r3
 8028740:	e761      	b.n	8028606 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028742:	d01d      	beq.n	8028780 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028744:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8028746:	1e6b      	subs	r3, r5, #1
 8028748:	fb00 4003 	mla	r0, r0, r3, r4
 802874c:	1400      	asrs	r0, r0, #16
 802874e:	f53f af74 	bmi.w	802863a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028752:	3901      	subs	r1, #1
 8028754:	4288      	cmp	r0, r1
 8028756:	f6bf af70 	bge.w	802863a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802875a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802875c:	fb01 6303 	mla	r3, r1, r3, r6
 8028760:	141b      	asrs	r3, r3, #16
 8028762:	f53f af6a 	bmi.w	802863a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028766:	3a01      	subs	r2, #1
 8028768:	4293      	cmp	r3, r2
 802876a:	f6bf af66 	bge.w	802863a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802876e:	46a9      	mov	r9, r5
 8028770:	46ba      	mov	sl, r7
 8028772:	f1b9 0f00 	cmp.w	r9, #0
 8028776:	dc5a      	bgt.n	802882e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8028778:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802877c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8028780:	9b07      	ldr	r3, [sp, #28]
 8028782:	2b00      	cmp	r3, #0
 8028784:	f340 80b8 	ble.w	80288f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8028788:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802878c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028790:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028794:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028798:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802879c:	eef0 6a62 	vmov.f32	s13, s5
 80287a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80287a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80287a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80287ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80287b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80287b4:	ee16 4a90 	vmov	r4, s13
 80287b8:	eef0 6a43 	vmov.f32	s13, s6
 80287bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80287c0:	ee12 2a90 	vmov	r2, s5
 80287c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80287c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80287ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80287ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80287d2:	ee13 2a10 	vmov	r2, s6
 80287d6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80287d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80287da:	ee16 6a90 	vmov	r6, s13
 80287de:	fb92 f3f3 	sdiv	r3, r2, r3
 80287e2:	931c      	str	r3, [sp, #112]	@ 0x70
 80287e4:	9b07      	ldr	r3, [sp, #28]
 80287e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80287e8:	3b01      	subs	r3, #1
 80287ea:	9307      	str	r3, [sp, #28]
 80287ec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80287ee:	bf0c      	ite	eq
 80287f0:	4615      	moveq	r5, r2
 80287f2:	461d      	movne	r5, r3
 80287f4:	eeb0 3a67 	vmov.f32	s6, s15
 80287f8:	eef0 2a47 	vmov.f32	s5, s14
 80287fc:	e6f4      	b.n	80285e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80287fe:	f111 0b01 	adds.w	fp, r1, #1
 8028802:	d48e      	bmi.n	8028722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028804:	45de      	cmp	lr, fp
 8028806:	db8c      	blt.n	8028722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028808:	f110 0b01 	adds.w	fp, r0, #1
 802880c:	d489      	bmi.n	8028722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802880e:	455b      	cmp	r3, fp
 8028810:	db87      	blt.n	8028722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8028812:	b21b      	sxth	r3, r3
 8028814:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028818:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802881c:	9300      	str	r3, [sp, #0]
 802881e:	4642      	mov	r2, r8
 8028820:	fa0f f38e 	sxth.w	r3, lr
 8028824:	4649      	mov	r1, r9
 8028826:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028828:	f7ff fe4d 	bl	80284c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802882c:	e779      	b.n	8028722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802882e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028830:	1420      	asrs	r0, r4, #16
 8028832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028836:	1431      	asrs	r1, r6, #16
 8028838:	fb03 0101 	mla	r1, r3, r1, r0
 802883c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028840:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028844:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8028848:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802884c:	8841      	ldrh	r1, [r0, #2]
 802884e:	f1be 0f00 	cmp.w	lr, #0
 8028852:	d00b      	beq.n	802886c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8028854:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8028858:	3b01      	subs	r3, #1
 802885a:	005b      	lsls	r3, r3, #1
 802885c:	3302      	adds	r3, #2
 802885e:	eb00 0b03 	add.w	fp, r0, r3
 8028862:	5ac3      	ldrh	r3, [r0, r3]
 8028864:	930a      	str	r3, [sp, #40]	@ 0x28
 8028866:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802886a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802886c:	fb12 f30e 	smulbb	r3, r2, lr
 8028870:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8028874:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028878:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802887c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028880:	10db      	asrs	r3, r3, #3
 8028882:	ea40 000c 	orr.w	r0, r0, ip
 8028886:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802888a:	f1ce 0c10 	rsb	ip, lr, #16
 802888e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028892:	ebac 0c02 	sub.w	ip, ip, r2
 8028896:	ea4b 0101 	orr.w	r1, fp, r1
 802889a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802889e:	4351      	muls	r1, r2
 80288a0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80288a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80288a6:	fb0c 1c00 	mla	ip, ip, r0, r1
 80288aa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80288ae:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80288b2:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 80288b6:	ea4b 0000 	orr.w	r0, fp, r0
 80288ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80288bc:	fb03 c000 	mla	r0, r3, r0, ip
 80288c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80288c2:	0412      	lsls	r2, r2, #16
 80288c4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80288c8:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 80288cc:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80288d0:	ea42 0b0b 	orr.w	fp, r2, fp
 80288d4:	fb03 000b 	mla	r0, r3, fp, r0
 80288d8:	0d43      	lsrs	r3, r0, #21
 80288da:	0940      	lsrs	r0, r0, #5
 80288dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80288e0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80288e4:	4318      	orrs	r0, r3
 80288e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80288e8:	f82a 0b02 	strh.w	r0, [sl], #2
 80288ec:	441c      	add	r4, r3
 80288ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80288f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80288f4:	441e      	add	r6, r3
 80288f6:	e73c      	b.n	8028772 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80288f8:	b00f      	add	sp, #60	@ 0x3c
 80288fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080288fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80288fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028902:	b085      	sub	sp, #20
 8028904:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8028908:	9102      	str	r1, [sp, #8]
 802890a:	fb04 7103 	mla	r1, r4, r3, r7
 802890e:	2c00      	cmp	r4, #0
 8028910:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8028914:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8028918:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802891c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8028920:	f2c0 811b 	blt.w	8028b5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8028924:	45a6      	cmp	lr, r4
 8028926:	f340 8118 	ble.w	8028b5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802892a:	2f00      	cmp	r7, #0
 802892c:	f2c0 8113 	blt.w	8028b56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028930:	42bb      	cmp	r3, r7
 8028932:	f340 8110 	ble.w	8028b56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8028936:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802893a:	1c7a      	adds	r2, r7, #1
 802893c:	f100 8110 	bmi.w	8028b60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028940:	4293      	cmp	r3, r2
 8028942:	f340 810d 	ble.w	8028b60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8028946:	2e00      	cmp	r6, #0
 8028948:	f000 810c 	beq.w	8028b64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802894c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8028950:	3401      	adds	r4, #1
 8028952:	f100 810b 	bmi.w	8028b6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8028956:	45a6      	cmp	lr, r4
 8028958:	f340 8108 	ble.w	8028b6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802895c:	2800      	cmp	r0, #0
 802895e:	f000 8108 	beq.w	8028b72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8028962:	2f00      	cmp	r7, #0
 8028964:	f2c0 8100 	blt.w	8028b68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8028968:	42bb      	cmp	r3, r7
 802896a:	f340 80fd 	ble.w	8028b68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802896e:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028972:	3701      	adds	r7, #1
 8028974:	f100 8100 	bmi.w	8028b78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8028978:	42bb      	cmp	r3, r7
 802897a:	f340 80fd 	ble.w	8028b78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802897e:	2e00      	cmp	r6, #0
 8028980:	f000 80fc 	beq.w	8028b7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8028984:	3301      	adds	r3, #1
 8028986:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802898a:	b2b6      	uxth	r6, r6
 802898c:	b280      	uxth	r0, r0
 802898e:	fb00 fe06 	mul.w	lr, r0, r6
 8028992:	0136      	lsls	r6, r6, #4
 8028994:	eba6 070e 	sub.w	r7, r6, lr
 8028998:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802899c:	b2bf      	uxth	r7, r7
 802899e:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80289a2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80289a6:	fb0a f607 	mul.w	r6, sl, r7
 80289aa:	b280      	uxth	r0, r0
 80289ac:	1a1b      	subs	r3, r3, r0
 80289ae:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80289b2:	b29b      	uxth	r3, r3
 80289b4:	fb0b 6603 	mla	r6, fp, r3, r6
 80289b8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80289bc:	fb00 6609 	mla	r6, r0, r9, r6
 80289c0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80289c4:	fb0e 6608 	mla	r6, lr, r8, r6
 80289c8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80289cc:	9600      	str	r6, [sp, #0]
 80289ce:	2e00      	cmp	r6, #0
 80289d0:	f000 80be 	beq.w	8028b50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80289d4:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80289d8:	fb0b fc0c 	mul.w	ip, fp, ip
 80289dc:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80289e0:	fb0b f505 	mul.w	r5, fp, r5
 80289e4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80289e8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80289ec:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80289f0:	44dc      	add	ip, fp
 80289f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80289f6:	9501      	str	r5, [sp, #4]
 80289f8:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80289fc:	9503      	str	r5, [sp, #12]
 80289fe:	9d01      	ldr	r5, [sp, #4]
 8028a00:	9e02      	ldr	r6, [sp, #8]
 8028a02:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8028a06:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8028a0a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8028a0e:	fb0a fc0c 	mul.w	ip, sl, ip
 8028a12:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028a16:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028a1a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8028a1e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028a22:	4465      	add	r5, ip
 8028a24:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8028a28:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8028a2c:	fb09 fc0c 	mul.w	ip, r9, ip
 8028a30:	fb09 f904 	mul.w	r9, r9, r4
 8028a34:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8028a38:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028a3c:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8028a40:	fb08 f404 	mul.w	r4, r8, r4
 8028a44:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028a48:	fb08 f802 	mul.w	r8, r8, r2
 8028a4c:	0a2d      	lsrs	r5, r5, #8
 8028a4e:	0a22      	lsrs	r2, r4, #8
 8028a50:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8028a54:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028a58:	437d      	muls	r5, r7
 8028a5a:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8028a5e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8028a62:	4414      	add	r4, r2
 8028a64:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8028a68:	fb0a fa01 	mul.w	sl, sl, r1
 8028a6c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8028a70:	9a03      	ldr	r2, [sp, #12]
 8028a72:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8028a76:	fb02 5503 	mla	r5, r2, r3, r5
 8028a7a:	0a24      	lsrs	r4, r4, #8
 8028a7c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028a80:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028a84:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028a88:	fb04 540e 	mla	r4, r4, lr, r5
 8028a8c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028a90:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028a94:	4461      	add	r1, ip
 8028a96:	0a09      	lsrs	r1, r1, #8
 8028a98:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028a9c:	fb01 4100 	mla	r1, r1, r0, r4
 8028aa0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028aa4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028aa8:	fb07 f70a 	mul.w	r7, r7, sl
 8028aac:	0a09      	lsrs	r1, r1, #8
 8028aae:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8028ab2:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8028ab6:	fb03 7101 	mla	r1, r3, r1, r7
 8028aba:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028abe:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8028ac2:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028ac6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028aca:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8028ace:	fb00 e101 	mla	r1, r0, r1, lr
 8028ad2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8028ad6:	9a00      	ldr	r2, [sp, #0]
 8028ad8:	b287      	uxth	r7, r0
 8028ada:	437a      	muls	r2, r7
 8028adc:	1c53      	adds	r3, r2, #1
 8028ade:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028ae2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8028ae6:	0a09      	lsrs	r1, r1, #8
 8028ae8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8028aec:	4321      	orrs	r1, r4
 8028aee:	0c0a      	lsrs	r2, r1, #16
 8028af0:	8836      	ldrh	r6, [r6, #0]
 8028af2:	fb12 f207 	smulbb	r2, r2, r7
 8028af6:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8028afa:	b2c8      	uxtb	r0, r1
 8028afc:	1235      	asrs	r5, r6, #8
 8028afe:	fb14 f407 	smulbb	r4, r4, r7
 8028b02:	fb10 f007 	smulbb	r0, r0, r7
 8028b06:	b2db      	uxtb	r3, r3
 8028b08:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8028b0c:	fb05 2503 	mla	r5, r5, r3, r2
 8028b10:	10f2      	asrs	r2, r6, #3
 8028b12:	00f6      	lsls	r6, r6, #3
 8028b14:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028b18:	b2f6      	uxtb	r6, r6
 8028b1a:	fb02 4203 	mla	r2, r2, r3, r4
 8028b1e:	fb06 0303 	mla	r3, r6, r3, r0
 8028b22:	b2ad      	uxth	r5, r5
 8028b24:	b299      	uxth	r1, r3
 8028b26:	b294      	uxth	r4, r2
 8028b28:	1c6b      	adds	r3, r5, #1
 8028b2a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028b2e:	1c62      	adds	r2, r4, #1
 8028b30:	1c4b      	adds	r3, r1, #1
 8028b32:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028b36:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028b3a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028b3e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028b42:	0952      	lsrs	r2, r2, #5
 8028b44:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028b48:	432b      	orrs	r3, r5
 8028b4a:	4313      	orrs	r3, r2
 8028b4c:	9a02      	ldr	r2, [sp, #8]
 8028b4e:	8013      	strh	r3, [r2, #0]
 8028b50:	b005      	add	sp, #20
 8028b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b56:	2500      	movs	r5, #0
 8028b58:	e6ef      	b.n	802893a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8028b5a:	2100      	movs	r1, #0
 8028b5c:	460d      	mov	r5, r1
 8028b5e:	e6f7      	b.n	8028950 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028b60:	2100      	movs	r1, #0
 8028b62:	e6f5      	b.n	8028950 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028b64:	4631      	mov	r1, r6
 8028b66:	e6f3      	b.n	8028950 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8028b68:	2400      	movs	r4, #0
 8028b6a:	e702      	b.n	8028972 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8028b6c:	2200      	movs	r2, #0
 8028b6e:	4614      	mov	r4, r2
 8028b70:	e70b      	b.n	802898a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028b72:	4602      	mov	r2, r0
 8028b74:	4604      	mov	r4, r0
 8028b76:	e708      	b.n	802898a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028b78:	2200      	movs	r2, #0
 8028b7a:	e706      	b.n	802898a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8028b7c:	4632      	mov	r2, r6
 8028b7e:	e704      	b.n	802898a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08028b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b84:	b09d      	sub	sp, #116	@ 0x74
 8028b86:	9219      	str	r2, [sp, #100]	@ 0x64
 8028b88:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8028b8a:	901b      	str	r0, [sp, #108]	@ 0x6c
 8028b8c:	9307      	str	r3, [sp, #28]
 8028b8e:	6850      	ldr	r0, [r2, #4]
 8028b90:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8028b94:	9117      	str	r1, [sp, #92]	@ 0x5c
 8028b96:	931a      	str	r3, [sp, #104]	@ 0x68
 8028b98:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8028b9c:	fb00 1303 	mla	r3, r0, r3, r1
 8028ba0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8028ba4:	6812      	ldr	r2, [r2, #0]
 8028ba6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8028bac:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028bae:	681b      	ldr	r3, [r3, #0]
 8028bb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8028bb2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8028bb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028bb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028bba:	2b00      	cmp	r3, #0
 8028bbc:	dc03      	bgt.n	8028bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8028bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028bc0:	2b00      	cmp	r3, #0
 8028bc2:	f340 8375 	ble.w	80292b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028bc6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028bc8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028bcc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028bd0:	1e48      	subs	r0, r1, #1
 8028bd2:	1e57      	subs	r7, r2, #1
 8028bd4:	9b07      	ldr	r3, [sp, #28]
 8028bd6:	2b00      	cmp	r3, #0
 8028bd8:	f340 818e 	ble.w	8028ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8028bdc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028be0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028be4:	d406      	bmi.n	8028bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028be6:	4584      	cmp	ip, r0
 8028be8:	da04      	bge.n	8028bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028bea:	2b00      	cmp	r3, #0
 8028bec:	db02      	blt.n	8028bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028bee:	42bb      	cmp	r3, r7
 8028bf0:	f2c0 8183 	blt.w	8028efa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028bf4:	f11c 0c01 	adds.w	ip, ip, #1
 8028bf8:	f100 8173 	bmi.w	8028ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028bfc:	4561      	cmp	r1, ip
 8028bfe:	f2c0 8170 	blt.w	8028ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028c02:	3301      	adds	r3, #1
 8028c04:	f100 816d 	bmi.w	8028ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028c08:	429a      	cmp	r2, r3
 8028c0a:	f2c0 816a 	blt.w	8028ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8028c0e:	9b07      	ldr	r3, [sp, #28]
 8028c10:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8028c12:	9318      	str	r3, [sp, #96]	@ 0x60
 8028c14:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028c16:	2b00      	cmp	r3, #0
 8028c18:	f340 818c 	ble.w	8028f34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8028c1c:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8028c1e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028c20:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028c24:	1422      	asrs	r2, r4, #16
 8028c26:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028c2a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028c2e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028c32:	689b      	ldr	r3, [r3, #8]
 8028c34:	f100 81cd 	bmi.w	8028fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028c38:	f103 38ff 	add.w	r8, r3, #4294967295
 8028c3c:	4542      	cmp	r2, r8
 8028c3e:	f280 81c8 	bge.w	8028fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028c42:	f1bc 0f00 	cmp.w	ip, #0
 8028c46:	f2c0 81c4 	blt.w	8028fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028c4a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028c4e:	45c4      	cmp	ip, r8
 8028c50:	f280 81bf 	bge.w	8028fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8028c54:	b21b      	sxth	r3, r3
 8028c56:	fb0c 2203 	mla	r2, ip, r3, r2
 8028c5a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028c5c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028c60:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028c64:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028c68:	2800      	cmp	r0, #0
 8028c6a:	f000 81a9 	beq.w	8028fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028c6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028c72:	950c      	str	r5, [sp, #48]	@ 0x30
 8028c74:	0e2d      	lsrs	r5, r5, #24
 8028c76:	9513      	str	r5, [sp, #76]	@ 0x4c
 8028c78:	b181      	cbz	r1, 8028c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028c7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8028c7e:	3b01      	subs	r3, #1
 8028c80:	009b      	lsls	r3, r3, #2
 8028c82:	3304      	adds	r3, #4
 8028c84:	eb08 0c03 	add.w	ip, r8, r3
 8028c88:	f858 3003 	ldr.w	r3, [r8, r3]
 8028c8c:	9308      	str	r3, [sp, #32]
 8028c8e:	0e1b      	lsrs	r3, r3, #24
 8028c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8028c92:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028c96:	930d      	str	r3, [sp, #52]	@ 0x34
 8028c98:	0e1b      	lsrs	r3, r3, #24
 8028c9a:	9314      	str	r3, [sp, #80]	@ 0x50
 8028c9c:	b280      	uxth	r0, r0
 8028c9e:	b289      	uxth	r1, r1
 8028ca0:	fb00 f901 	mul.w	r9, r0, r1
 8028ca4:	0100      	lsls	r0, r0, #4
 8028ca6:	eba0 0809 	sub.w	r8, r0, r9
 8028caa:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028cae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028cb0:	fa1f f888 	uxth.w	r8, r8
 8028cb4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028cb8:	fb08 f000 	mul.w	r0, r8, r0
 8028cbc:	b289      	uxth	r1, r1
 8028cbe:	1a5b      	subs	r3, r3, r1
 8028cc0:	b29b      	uxth	r3, r3
 8028cc2:	fb03 000e 	mla	r0, r3, lr, r0
 8028cc6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028cc8:	fb01 0005 	mla	r0, r1, r5, r0
 8028ccc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028cce:	fb09 0005 	mla	r0, r9, r5, r0
 8028cd2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028cd6:	2800      	cmp	r0, #0
 8028cd8:	f000 80fa 	beq.w	8028ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028cdc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028ce0:	d01b      	beq.n	8028d1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028ce2:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8028ce6:	fb0e fa0a 	mul.w	sl, lr, sl
 8028cea:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028cee:	fb0e fe02 	mul.w	lr, lr, r2
 8028cf2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028cf6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028cfa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028cfe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8028d02:	4452      	add	r2, sl
 8028d04:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028d08:	0a12      	lsrs	r2, r2, #8
 8028d0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d0e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028d12:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028d16:	ea42 020c 	orr.w	r2, r2, ip
 8028d1a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028d1c:	2dff      	cmp	r5, #255	@ 0xff
 8028d1e:	d021      	beq.n	8028d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8028d20:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028d22:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028d26:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028d28:	fb05 fb0b 	mul.w	fp, r5, fp
 8028d2c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028d2e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028d32:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028d36:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028d38:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028d3c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028d40:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028d44:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028d48:	44de      	add	lr, fp
 8028d4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028d4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028d52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028d56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028d5a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028d5e:	ea4e 050a 	orr.w	r5, lr, sl
 8028d62:	950c      	str	r5, [sp, #48]	@ 0x30
 8028d64:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028d66:	2dff      	cmp	r5, #255	@ 0xff
 8028d68:	d021      	beq.n	8028dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8028d6a:	9d08      	ldr	r5, [sp, #32]
 8028d6c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028d70:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028d72:	fb05 fb0b 	mul.w	fp, r5, fp
 8028d76:	9d08      	ldr	r5, [sp, #32]
 8028d78:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028d7c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028d80:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028d82:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028d86:	fb05 fa0a 	mul.w	sl, r5, sl
 8028d8a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028d8e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028d92:	44de      	add	lr, fp
 8028d94:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028d98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028d9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028da0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028da4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028da8:	ea4e 050a 	orr.w	r5, lr, sl
 8028dac:	9508      	str	r5, [sp, #32]
 8028dae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028db0:	2dff      	cmp	r5, #255	@ 0xff
 8028db2:	d021      	beq.n	8028df8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8028db4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028db6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028dba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028dbc:	fb05 fb0b 	mul.w	fp, r5, fp
 8028dc0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028dc2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028dc6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028dca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028dcc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028dd0:	fb05 fa0a 	mul.w	sl, r5, sl
 8028dd4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028dd8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028ddc:	44de      	add	lr, fp
 8028dde:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028de2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028de6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028dea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028dee:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028df2:	ea4e 050a 	orr.w	r5, lr, sl
 8028df6:	950d      	str	r5, [sp, #52]	@ 0x34
 8028df8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028dfa:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028dfe:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028e02:	fb08 fc0c 	mul.w	ip, r8, ip
 8028e06:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028e0a:	9d08      	ldr	r5, [sp, #32]
 8028e0c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028e10:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028e14:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028e18:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028e1a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028e1e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028e20:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028e24:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028e28:	fb08 f80e 	mul.w	r8, r8, lr
 8028e2c:	fb03 8202 	mla	r2, r3, r2, r8
 8028e30:	9b08      	ldr	r3, [sp, #32]
 8028e32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e36:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028e3a:	fb01 220a 	mla	r2, r1, sl, r2
 8028e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028e40:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028e44:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8028e48:	fb09 2901 	mla	r9, r9, r1, r2
 8028e4c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028e4e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028e52:	4342      	muls	r2, r0
 8028e54:	1c50      	adds	r0, r2, #1
 8028e56:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028e5a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028e5e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028e62:	ea4c 0c09 	orr.w	ip, ip, r9
 8028e66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028e68:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028e6c:	883b      	ldrh	r3, [r7, #0]
 8028e6e:	fb12 f205 	smulbb	r2, r2, r5
 8028e72:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028e76:	fa5f fc8c 	uxtb.w	ip, ip
 8028e7a:	1219      	asrs	r1, r3, #8
 8028e7c:	fb1c fc05 	smulbb	ip, ip, r5
 8028e80:	b2c0      	uxtb	r0, r0
 8028e82:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028e86:	fb01 2100 	mla	r1, r1, r0, r2
 8028e8a:	10da      	asrs	r2, r3, #3
 8028e8c:	00db      	lsls	r3, r3, #3
 8028e8e:	fb1e fe05 	smulbb	lr, lr, r5
 8028e92:	b2db      	uxtb	r3, r3
 8028e94:	fb03 c300 	mla	r3, r3, r0, ip
 8028e98:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028e9c:	b289      	uxth	r1, r1
 8028e9e:	fb02 e200 	mla	r2, r2, r0, lr
 8028ea2:	fa1f fc83 	uxth.w	ip, r3
 8028ea6:	1c4b      	adds	r3, r1, #1
 8028ea8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028eac:	f10c 0301 	add.w	r3, ip, #1
 8028eb0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028eb4:	b292      	uxth	r2, r2
 8028eb6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8028eba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028ebe:	430b      	orrs	r3, r1
 8028ec0:	1c51      	adds	r1, r2, #1
 8028ec2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028ec6:	0952      	lsrs	r2, r2, #5
 8028ec8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028ecc:	4313      	orrs	r3, r2
 8028ece:	803b      	strh	r3, [r7, #0]
 8028ed0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028ed2:	3702      	adds	r7, #2
 8028ed4:	441c      	add	r4, r3
 8028ed6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028ed8:	441e      	add	r6, r3
 8028eda:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028edc:	3b01      	subs	r3, #1
 8028ede:	9318      	str	r3, [sp, #96]	@ 0x60
 8028ee0:	e698      	b.n	8028c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028ee2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8028ee4:	441c      	add	r4, r3
 8028ee6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028ee8:	441e      	add	r6, r3
 8028eea:	9b07      	ldr	r3, [sp, #28]
 8028eec:	3b01      	subs	r3, #1
 8028eee:	9307      	str	r3, [sp, #28]
 8028ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028ef2:	3302      	adds	r3, #2
 8028ef4:	930a      	str	r3, [sp, #40]	@ 0x28
 8028ef6:	e66d      	b.n	8028bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8028ef8:	d023      	beq.n	8028f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028efa:	9b07      	ldr	r3, [sp, #28]
 8028efc:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8028efe:	3b01      	subs	r3, #1
 8028f00:	fb00 4003 	mla	r0, r0, r3, r4
 8028f04:	1400      	asrs	r0, r0, #16
 8028f06:	f53f ae82 	bmi.w	8028c0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f0a:	3901      	subs	r1, #1
 8028f0c:	4288      	cmp	r0, r1
 8028f0e:	f6bf ae7e 	bge.w	8028c0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f12:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8028f14:	fb01 6303 	mla	r3, r1, r3, r6
 8028f18:	141b      	asrs	r3, r3, #16
 8028f1a:	f53f ae78 	bmi.w	8028c0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f1e:	3a01      	subs	r2, #1
 8028f20:	4293      	cmp	r3, r2
 8028f22:	f6bf ae74 	bge.w	8028c0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f26:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028f2a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8028f2e:	f1bb 0f00 	cmp.w	fp, #0
 8028f32:	dc6c      	bgt.n	802900e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8028f34:	9b07      	ldr	r3, [sp, #28]
 8028f36:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028f3c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028f40:	930a      	str	r3, [sp, #40]	@ 0x28
 8028f42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028f44:	2b00      	cmp	r3, #0
 8028f46:	f340 81b3 	ble.w	80292b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028f4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028f52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028f56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028f5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028f5e:	eef0 6a62 	vmov.f32	s13, s5
 8028f62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028f66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028f6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028f6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028f76:	ee16 4a90 	vmov	r4, s13
 8028f7a:	eef0 6a43 	vmov.f32	s13, s6
 8028f7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028f82:	ee12 2a90 	vmov	r2, s5
 8028f86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028f8a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028f8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f90:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f94:	ee13 2a10 	vmov	r2, s6
 8028f98:	9329      	str	r3, [sp, #164]	@ 0xa4
 8028f9a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028f9c:	ee16 6a90 	vmov	r6, s13
 8028fa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fa4:	932a      	str	r3, [sp, #168]	@ 0xa8
 8028fa6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028fa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8028faa:	3b01      	subs	r3, #1
 8028fac:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028fae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028fb0:	bf08      	it	eq
 8028fb2:	4613      	moveq	r3, r2
 8028fb4:	eeb0 3a67 	vmov.f32	s6, s15
 8028fb8:	9307      	str	r3, [sp, #28]
 8028fba:	eef0 2a47 	vmov.f32	s5, s14
 8028fbe:	e5fb      	b.n	8028bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028fc0:	2900      	cmp	r1, #0
 8028fc2:	f43f ae6b 	beq.w	8028c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028fc6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028fca:	9308      	str	r3, [sp, #32]
 8028fcc:	0e1b      	lsrs	r3, r3, #24
 8028fce:	9311      	str	r3, [sp, #68]	@ 0x44
 8028fd0:	e664      	b.n	8028c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8028fd2:	f112 0801 	adds.w	r8, r2, #1
 8028fd6:	f53f af7b 	bmi.w	8028ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028fda:	4543      	cmp	r3, r8
 8028fdc:	f6ff af78 	blt.w	8028ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028fe0:	f11c 0801 	adds.w	r8, ip, #1
 8028fe4:	f53f af74 	bmi.w	8028ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028fe8:	45c6      	cmp	lr, r8
 8028fea:	f6ff af71 	blt.w	8028ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8028fee:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8028ff0:	9201      	str	r2, [sp, #4]
 8028ff2:	fa0f f28e 	sxth.w	r2, lr
 8028ff6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028ffa:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028ffe:	9200      	str	r2, [sp, #0]
 8029000:	b21b      	sxth	r3, r3
 8029002:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029004:	4639      	mov	r1, r7
 8029006:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029008:	f7ff fc79 	bl	80288fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802900c:	e760      	b.n	8028ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802900e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029010:	1427      	asrs	r7, r4, #16
 8029012:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029016:	1433      	asrs	r3, r6, #16
 8029018:	fb01 7303 	mla	r3, r1, r3, r7
 802901c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802901e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029022:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029026:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802902a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802902e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029032:	2a00      	cmp	r2, #0
 8029034:	f000 8133 	beq.w	802929e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8029038:	687d      	ldr	r5, [r7, #4]
 802903a:	950e      	str	r5, [sp, #56]	@ 0x38
 802903c:	0e2d      	lsrs	r5, r5, #24
 802903e:	9515      	str	r5, [sp, #84]	@ 0x54
 8029040:	b178      	cbz	r0, 8029062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029042:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8029046:	3901      	subs	r1, #1
 8029048:	0089      	lsls	r1, r1, #2
 802904a:	3104      	adds	r1, #4
 802904c:	eb07 0e01 	add.w	lr, r7, r1
 8029050:	5879      	ldr	r1, [r7, r1]
 8029052:	9109      	str	r1, [sp, #36]	@ 0x24
 8029054:	0e09      	lsrs	r1, r1, #24
 8029056:	9112      	str	r1, [sp, #72]	@ 0x48
 8029058:	f8de 1004 	ldr.w	r1, [lr, #4]
 802905c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802905e:	0e09      	lsrs	r1, r1, #24
 8029060:	9116      	str	r1, [sp, #88]	@ 0x58
 8029062:	b292      	uxth	r2, r2
 8029064:	b280      	uxth	r0, r0
 8029066:	fb02 f800 	mul.w	r8, r2, r0
 802906a:	0112      	lsls	r2, r2, #4
 802906c:	eba2 0e08 	sub.w	lr, r2, r8
 8029070:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8029072:	fa1f fe8e 	uxth.w	lr, lr
 8029076:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802907a:	fb0e f101 	mul.w	r1, lr, r1
 802907e:	b280      	uxth	r0, r0
 8029080:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8029084:	1a12      	subs	r2, r2, r0
 8029086:	b292      	uxth	r2, r2
 8029088:	fb02 110c 	mla	r1, r2, ip, r1
 802908c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802908e:	fb00 1105 	mla	r1, r0, r5, r1
 8029092:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029094:	fb08 1105 	mla	r1, r8, r5, r1
 8029098:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802909c:	2900      	cmp	r1, #0
 802909e:	f000 80f5 	beq.w	802928c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80290a2:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80290a6:	d019      	beq.n	80290dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80290a8:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80290ac:	fb0c fa0a 	mul.w	sl, ip, sl
 80290b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80290b4:	fb0c fc03 	mul.w	ip, ip, r3
 80290b8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80290bc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80290c0:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80290c4:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80290c8:	4453      	add	r3, sl
 80290ca:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80290ce:	0a1b      	lsrs	r3, r3, #8
 80290d0:	0a3f      	lsrs	r7, r7, #8
 80290d2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80290d6:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80290da:	433b      	orrs	r3, r7
 80290dc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80290de:	2dff      	cmp	r5, #255	@ 0xff
 80290e0:	d020      	beq.n	8029124 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80290e2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80290e4:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80290e8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80290ea:	436f      	muls	r7, r5
 80290ec:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80290ee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80290f2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80290f6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80290f8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80290fc:	fb05 fa0a 	mul.w	sl, r5, sl
 8029100:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029104:	44bc      	add	ip, r7
 8029106:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802910a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802910e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029112:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029116:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802911a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802911e:	ea4c 050a 	orr.w	r5, ip, sl
 8029122:	950e      	str	r5, [sp, #56]	@ 0x38
 8029124:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029126:	2dff      	cmp	r5, #255	@ 0xff
 8029128:	d020      	beq.n	802916c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802912a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802912c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029130:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029132:	436f      	muls	r7, r5
 8029134:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029136:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802913a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802913e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029140:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029144:	fb05 fa0a 	mul.w	sl, r5, sl
 8029148:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802914c:	44bc      	add	ip, r7
 802914e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029152:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029156:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802915a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802915e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029162:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029166:	ea4c 050a 	orr.w	r5, ip, sl
 802916a:	9509      	str	r5, [sp, #36]	@ 0x24
 802916c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802916e:	2dff      	cmp	r5, #255	@ 0xff
 8029170:	d020      	beq.n	80291b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8029172:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029174:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029178:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802917a:	436f      	muls	r7, r5
 802917c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802917e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029182:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029186:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029188:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802918c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029190:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029194:	44bc      	add	ip, r7
 8029196:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802919a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802919e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80291a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80291a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80291aa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80291ae:	ea4c 050a 	orr.w	r5, ip, sl
 80291b2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80291b4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80291b6:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80291ba:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80291be:	fb0e f707 	mul.w	r7, lr, r7
 80291c2:	fb02 770c 	mla	r7, r2, ip, r7
 80291c6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80291c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80291cc:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80291d0:	fb00 770c 	mla	r7, r0, ip, r7
 80291d4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80291d6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80291da:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80291dc:	fb08 770c 	mla	r7, r8, ip, r7
 80291e0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80291e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80291e8:	fb02 e303 	mla	r3, r2, r3, lr
 80291ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80291ee:	0a3f      	lsrs	r7, r7, #8
 80291f0:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80291f4:	fb00 330a 	mla	r3, r0, sl, r3
 80291f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80291fa:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80291fe:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8029202:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029208:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802920c:	4359      	muls	r1, r3
 802920e:	1c4b      	adds	r3, r1, #1
 8029210:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029214:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029218:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802921c:	ea47 070c 	orr.w	r7, r7, ip
 8029220:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029222:	0c3b      	lsrs	r3, r7, #16
 8029224:	f8b9 0000 	ldrh.w	r0, [r9]
 8029228:	fb13 f305 	smulbb	r3, r3, r5
 802922c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029230:	b2ff      	uxtb	r7, r7
 8029232:	1202      	asrs	r2, r0, #8
 8029234:	fb17 f705 	smulbb	r7, r7, r5
 8029238:	b2c9      	uxtb	r1, r1
 802923a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802923e:	fb02 3201 	mla	r2, r2, r1, r3
 8029242:	10c3      	asrs	r3, r0, #3
 8029244:	00c0      	lsls	r0, r0, #3
 8029246:	fb1c fc05 	smulbb	ip, ip, r5
 802924a:	b2c0      	uxtb	r0, r0
 802924c:	fb00 7001 	mla	r0, r0, r1, r7
 8029250:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029254:	fb03 c301 	mla	r3, r3, r1, ip
 8029258:	b292      	uxth	r2, r2
 802925a:	b280      	uxth	r0, r0
 802925c:	1c51      	adds	r1, r2, #1
 802925e:	f100 0c01 	add.w	ip, r0, #1
 8029262:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029266:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802926a:	b29b      	uxth	r3, r3
 802926c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029270:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8029274:	ea4c 0202 	orr.w	r2, ip, r2
 8029278:	f103 0c01 	add.w	ip, r3, #1
 802927c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029280:	095b      	lsrs	r3, r3, #5
 8029282:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029286:	431a      	orrs	r2, r3
 8029288:	f8a9 2000 	strh.w	r2, [r9]
 802928c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802928e:	f109 0902 	add.w	r9, r9, #2
 8029292:	441c      	add	r4, r3
 8029294:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029296:	f10b 3bff 	add.w	fp, fp, #4294967295
 802929a:	441e      	add	r6, r3
 802929c:	e647      	b.n	8028f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802929e:	2800      	cmp	r0, #0
 80292a0:	f43f aedf 	beq.w	8029062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80292a4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80292a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80292aa:	0e09      	lsrs	r1, r1, #24
 80292ac:	9112      	str	r1, [sp, #72]	@ 0x48
 80292ae:	e6d8      	b.n	8029062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80292b0:	b01d      	add	sp, #116	@ 0x74
 80292b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080292b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80292b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292ba:	b085      	sub	sp, #20
 80292bc:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80292c0:	9102      	str	r1, [sp, #8]
 80292c2:	fb04 7103 	mla	r1, r4, r3, r7
 80292c6:	2c00      	cmp	r4, #0
 80292c8:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80292cc:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80292d0:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80292d4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80292d8:	f2c0 810c 	blt.w	80294f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80292dc:	45a6      	cmp	lr, r4
 80292de:	f340 8109 	ble.w	80294f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80292e2:	2f00      	cmp	r7, #0
 80292e4:	f2c0 8104 	blt.w	80294f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80292e8:	42bb      	cmp	r3, r7
 80292ea:	f340 8101 	ble.w	80294f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80292ee:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80292f2:	1c7a      	adds	r2, r7, #1
 80292f4:	f100 8101 	bmi.w	80294fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80292f8:	4293      	cmp	r3, r2
 80292fa:	f340 80fe 	ble.w	80294fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80292fe:	2e00      	cmp	r6, #0
 8029300:	f000 80fd 	beq.w	80294fe <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8029304:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029308:	3401      	adds	r4, #1
 802930a:	f100 80fc 	bmi.w	8029506 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802930e:	45a6      	cmp	lr, r4
 8029310:	f340 80f9 	ble.w	8029506 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029314:	2800      	cmp	r0, #0
 8029316:	f000 80f9 	beq.w	802950c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802931a:	2f00      	cmp	r7, #0
 802931c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8029320:	f2c0 80ef 	blt.w	8029502 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029324:	42bb      	cmp	r3, r7
 8029326:	f340 80ec 	ble.w	8029502 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802932a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802932e:	3701      	adds	r7, #1
 8029330:	f100 80ef 	bmi.w	8029512 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029334:	42bb      	cmp	r3, r7
 8029336:	f340 80ec 	ble.w	8029512 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802933a:	2e00      	cmp	r6, #0
 802933c:	f000 80eb 	beq.w	8029516 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8029340:	6852      	ldr	r2, [r2, #4]
 8029342:	b2b6      	uxth	r6, r6
 8029344:	b280      	uxth	r0, r0
 8029346:	fb00 fe06 	mul.w	lr, r0, r6
 802934a:	0136      	lsls	r6, r6, #4
 802934c:	eba6 070e 	sub.w	r7, r6, lr
 8029350:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029354:	b2bf      	uxth	r7, r7
 8029356:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802935a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802935e:	fb07 f60a 	mul.w	r6, r7, sl
 8029362:	b280      	uxth	r0, r0
 8029364:	1a1b      	subs	r3, r3, r0
 8029366:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802936a:	b29b      	uxth	r3, r3
 802936c:	fb0b 6603 	mla	r6, fp, r3, r6
 8029370:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029374:	fb00 6609 	mla	r6, r0, r9, r6
 8029378:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802937c:	fb0e 6608 	mla	r6, lr, r8, r6
 8029380:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029384:	9600      	str	r6, [sp, #0]
 8029386:	2e00      	cmp	r6, #0
 8029388:	f000 80af 	beq.w	80294ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802938c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029390:	fb0b fc0c 	mul.w	ip, fp, ip
 8029394:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029398:	fb0b f505 	mul.w	r5, fp, r5
 802939c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80293a0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80293a4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80293a8:	44dc      	add	ip, fp
 80293aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80293ae:	9501      	str	r5, [sp, #4]
 80293b0:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80293b4:	9503      	str	r5, [sp, #12]
 80293b6:	9d01      	ldr	r5, [sp, #4]
 80293b8:	9e02      	ldr	r6, [sp, #8]
 80293ba:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80293be:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80293c2:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80293c6:	fb0a fc0c 	mul.w	ip, sl, ip
 80293ca:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80293ce:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80293d2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80293d6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80293da:	4465      	add	r5, ip
 80293dc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80293e0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80293e4:	fb09 fc0c 	mul.w	ip, r9, ip
 80293e8:	fb09 f904 	mul.w	r9, r9, r4
 80293ec:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80293f0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80293f4:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80293f8:	fb08 f404 	mul.w	r4, r8, r4
 80293fc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029400:	fb08 f802 	mul.w	r8, r8, r2
 8029404:	0a2d      	lsrs	r5, r5, #8
 8029406:	0a22      	lsrs	r2, r4, #8
 8029408:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802940c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029410:	437d      	muls	r5, r7
 8029412:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8029416:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802941a:	4414      	add	r4, r2
 802941c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8029420:	fb0a fa01 	mul.w	sl, sl, r1
 8029424:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8029428:	9a03      	ldr	r2, [sp, #12]
 802942a:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802942e:	fb02 5503 	mla	r5, r2, r3, r5
 8029432:	0a24      	lsrs	r4, r4, #8
 8029434:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8029438:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802943c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8029440:	fb04 540e 	mla	r4, r4, lr, r5
 8029444:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029448:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802944c:	4461      	add	r1, ip
 802944e:	0a09      	lsrs	r1, r1, #8
 8029450:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029454:	fb01 4100 	mla	r1, r1, r0, r4
 8029458:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802945c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029460:	fb07 f70a 	mul.w	r7, r7, sl
 8029464:	0a09      	lsrs	r1, r1, #8
 8029466:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802946a:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802946e:	fb03 7101 	mla	r1, r3, r1, r7
 8029472:	9b00      	ldr	r3, [sp, #0]
 8029474:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029478:	43da      	mvns	r2, r3
 802947a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802947e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8029482:	8836      	ldrh	r6, [r6, #0]
 8029484:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029488:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802948c:	fb00 e101 	mla	r1, r0, r1, lr
 8029490:	1233      	asrs	r3, r6, #8
 8029492:	b2d2      	uxtb	r2, r2
 8029494:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8029498:	4353      	muls	r3, r2
 802949a:	10f0      	asrs	r0, r6, #3
 802949c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80294a0:	4350      	muls	r0, r2
 80294a2:	0a09      	lsrs	r1, r1, #8
 80294a4:	00f6      	lsls	r6, r6, #3
 80294a6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80294aa:	b2f6      	uxtb	r6, r6
 80294ac:	4321      	orrs	r1, r4
 80294ae:	4356      	muls	r6, r2
 80294b0:	1c5a      	adds	r2, r3, #1
 80294b2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80294b6:	0c0b      	lsrs	r3, r1, #16
 80294b8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80294bc:	1c42      	adds	r2, r0, #1
 80294be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80294c2:	0a0a      	lsrs	r2, r1, #8
 80294c4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80294c8:	021b      	lsls	r3, r3, #8
 80294ca:	00d2      	lsls	r2, r2, #3
 80294cc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80294d0:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80294d4:	4313      	orrs	r3, r2
 80294d6:	1c72      	adds	r2, r6, #1
 80294d8:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80294dc:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80294e0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80294e4:	4319      	orrs	r1, r3
 80294e6:	9b02      	ldr	r3, [sp, #8]
 80294e8:	8019      	strh	r1, [r3, #0]
 80294ea:	b005      	add	sp, #20
 80294ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294f0:	2500      	movs	r5, #0
 80294f2:	e6fe      	b.n	80292f2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80294f4:	2100      	movs	r1, #0
 80294f6:	460d      	mov	r5, r1
 80294f8:	e706      	b.n	8029308 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80294fa:	2100      	movs	r1, #0
 80294fc:	e704      	b.n	8029308 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80294fe:	4631      	mov	r1, r6
 8029500:	e702      	b.n	8029308 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8029502:	2400      	movs	r4, #0
 8029504:	e713      	b.n	802932e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8029506:	2200      	movs	r2, #0
 8029508:	4614      	mov	r4, r2
 802950a:	e71a      	b.n	8029342 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802950c:	4602      	mov	r2, r0
 802950e:	4604      	mov	r4, r0
 8029510:	e717      	b.n	8029342 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029512:	2200      	movs	r2, #0
 8029514:	e715      	b.n	8029342 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029516:	4632      	mov	r2, r6
 8029518:	e713      	b.n	8029342 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802951c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029520:	b09b      	sub	sp, #108	@ 0x6c
 8029522:	9218      	str	r2, [sp, #96]	@ 0x60
 8029524:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8029526:	9019      	str	r0, [sp, #100]	@ 0x64
 8029528:	6850      	ldr	r0, [r2, #4]
 802952a:	9116      	str	r1, [sp, #88]	@ 0x58
 802952c:	9307      	str	r3, [sp, #28]
 802952e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8029532:	fb00 1303 	mla	r3, r0, r3, r1
 8029536:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802953a:	6812      	ldr	r2, [r2, #0]
 802953c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029540:	930a      	str	r3, [sp, #40]	@ 0x28
 8029542:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029544:	681b      	ldr	r3, [r3, #0]
 8029546:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029548:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802954a:	2b00      	cmp	r3, #0
 802954c:	dc03      	bgt.n	8029556 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802954e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029550:	2b00      	cmp	r3, #0
 8029552:	f340 8387 	ble.w	8029c64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8029556:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029558:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802955c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029560:	1e48      	subs	r0, r1, #1
 8029562:	1e57      	subs	r7, r2, #1
 8029564:	9b07      	ldr	r3, [sp, #28]
 8029566:	2b00      	cmp	r3, #0
 8029568:	f340 8166 	ble.w	8029838 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802956c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029570:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029574:	d406      	bmi.n	8029584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8029576:	4584      	cmp	ip, r0
 8029578:	da04      	bge.n	8029584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802957a:	2b00      	cmp	r3, #0
 802957c:	db02      	blt.n	8029584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802957e:	42bb      	cmp	r3, r7
 8029580:	f2c0 815b 	blt.w	802983a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8029584:	f11c 0c01 	adds.w	ip, ip, #1
 8029588:	f100 814b 	bmi.w	8029822 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802958c:	4561      	cmp	r1, ip
 802958e:	f2c0 8148 	blt.w	8029822 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029592:	3301      	adds	r3, #1
 8029594:	f100 8145 	bmi.w	8029822 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8029598:	429a      	cmp	r2, r3
 802959a:	f2c0 8142 	blt.w	8029822 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802959e:	9b07      	ldr	r3, [sp, #28]
 80295a0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80295a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80295a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80295a6:	2b00      	cmp	r3, #0
 80295a8:	f340 8165 	ble.w	8029876 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80295ac:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80295ae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80295b0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80295b4:	1422      	asrs	r2, r4, #16
 80295b6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80295ba:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80295be:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80295c2:	689b      	ldr	r3, [r3, #8]
 80295c4:	f100 81d5 	bmi.w	8029972 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80295c8:	f103 38ff 	add.w	r8, r3, #4294967295
 80295cc:	4542      	cmp	r2, r8
 80295ce:	f280 81d0 	bge.w	8029972 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80295d2:	f1bc 0f00 	cmp.w	ip, #0
 80295d6:	f2c0 81cc 	blt.w	8029972 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80295da:	f10e 38ff 	add.w	r8, lr, #4294967295
 80295de:	45c4      	cmp	ip, r8
 80295e0:	f280 81c7 	bge.w	8029972 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80295e4:	b21b      	sxth	r3, r3
 80295e6:	fb0c 2203 	mla	r2, ip, r3, r2
 80295ea:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80295ec:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80295f0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80295f4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80295f8:	2900      	cmp	r1, #0
 80295fa:	f000 8182 	beq.w	8029902 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80295fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029602:	950b      	str	r5, [sp, #44]	@ 0x2c
 8029604:	0e2d      	lsrs	r5, r5, #24
 8029606:	9512      	str	r5, [sp, #72]	@ 0x48
 8029608:	b180      	cbz	r0, 802962c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802960a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802960e:	3b01      	subs	r3, #1
 8029610:	009b      	lsls	r3, r3, #2
 8029612:	3304      	adds	r3, #4
 8029614:	eb08 0c03 	add.w	ip, r8, r3
 8029618:	f858 3003 	ldr.w	r3, [r8, r3]
 802961c:	9308      	str	r3, [sp, #32]
 802961e:	0e1b      	lsrs	r3, r3, #24
 8029620:	9310      	str	r3, [sp, #64]	@ 0x40
 8029622:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029626:	930c      	str	r3, [sp, #48]	@ 0x30
 8029628:	0e1b      	lsrs	r3, r3, #24
 802962a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802962c:	b289      	uxth	r1, r1
 802962e:	b280      	uxth	r0, r0
 8029630:	fb01 f900 	mul.w	r9, r1, r0
 8029634:	0109      	lsls	r1, r1, #4
 8029636:	eba1 0809 	sub.w	r8, r1, r9
 802963a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802963c:	fa1f f888 	uxth.w	r8, r8
 8029640:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029644:	fb08 f303 	mul.w	r3, r8, r3
 8029648:	b280      	uxth	r0, r0
 802964a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802964e:	1a09      	subs	r1, r1, r0
 8029650:	b289      	uxth	r1, r1
 8029652:	fb01 330e 	mla	r3, r1, lr, r3
 8029656:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029658:	fb00 3305 	mla	r3, r0, r5, r3
 802965c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802965e:	fb09 3305 	mla	r3, r9, r5, r3
 8029662:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029666:	2b00      	cmp	r3, #0
 8029668:	f000 80d2 	beq.w	8029810 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802966c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029670:	d01b      	beq.n	80296aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029672:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8029676:	fb0e fa0a 	mul.w	sl, lr, sl
 802967a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802967e:	fb0e fe02 	mul.w	lr, lr, r2
 8029682:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029686:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802968a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802968e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8029692:	4452      	add	r2, sl
 8029694:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029698:	0a12      	lsrs	r2, r2, #8
 802969a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802969e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80296a2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80296a6:	ea42 020c 	orr.w	r2, r2, ip
 80296aa:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80296ac:	2dff      	cmp	r5, #255	@ 0xff
 80296ae:	d021      	beq.n	80296f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80296b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80296b2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80296b6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80296b8:	fb05 fb0b 	mul.w	fp, r5, fp
 80296bc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80296be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80296c2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80296c6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80296c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80296cc:	fb05 fa0a 	mul.w	sl, r5, sl
 80296d0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80296d4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80296d8:	44de      	add	lr, fp
 80296da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80296de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80296e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80296e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80296ea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80296ee:	ea4e 050a 	orr.w	r5, lr, sl
 80296f2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80296f4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80296f6:	2dff      	cmp	r5, #255	@ 0xff
 80296f8:	d021      	beq.n	802973e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80296fa:	9d08      	ldr	r5, [sp, #32]
 80296fc:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029700:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029702:	fb05 fb0b 	mul.w	fp, r5, fp
 8029706:	9d08      	ldr	r5, [sp, #32]
 8029708:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802970c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802970e:	fb05 fa0e 	mul.w	sl, r5, lr
 8029712:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029716:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802971a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802971e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029722:	44de      	add	lr, fp
 8029724:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029728:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802972c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029730:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029734:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029738:	ea4e 050a 	orr.w	r5, lr, sl
 802973c:	9508      	str	r5, [sp, #32]
 802973e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029740:	2dff      	cmp	r5, #255	@ 0xff
 8029742:	d021      	beq.n	8029788 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029744:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029746:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802974a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802974c:	fb05 fb0b 	mul.w	fp, r5, fp
 8029750:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029752:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029756:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802975a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802975c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029760:	fb05 fa0a 	mul.w	sl, r5, sl
 8029764:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029768:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802976c:	44de      	add	lr, fp
 802976e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029772:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029776:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802977a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802977e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029782:	ea4e 050a 	orr.w	r5, lr, sl
 8029786:	950c      	str	r5, [sp, #48]	@ 0x30
 8029788:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802978a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802978e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029792:	fb08 fc0c 	mul.w	ip, r8, ip
 8029796:	fb01 cc0e 	mla	ip, r1, lr, ip
 802979a:	9d08      	ldr	r5, [sp, #32]
 802979c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80297a0:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80297a4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80297a8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80297aa:	2bff      	cmp	r3, #255	@ 0xff
 80297ac:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80297b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80297b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80297b6:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80297ba:	fb08 f80e 	mul.w	r8, r8, lr
 80297be:	fb01 8202 	mla	r2, r1, r2, r8
 80297c2:	9908      	ldr	r1, [sp, #32]
 80297c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80297c8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80297cc:	fb00 220a 	mla	r2, r0, sl, r2
 80297d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80297d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80297d6:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80297da:	fb09 2900 	mla	r9, r9, r0, r2
 80297de:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80297e2:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80297e6:	ea4c 0c09 	orr.w	ip, ip, r9
 80297ea:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80297ee:	f040 8091 	bne.w	8029914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80297f2:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80297f6:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80297fa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80297fe:	f022 0207 	bic.w	r2, r2, #7
 8029802:	431a      	orrs	r2, r3
 8029804:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029808:	ea4c 0c02 	orr.w	ip, ip, r2
 802980c:	f8a7 c000 	strh.w	ip, [r7]
 8029810:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029812:	3702      	adds	r7, #2
 8029814:	441c      	add	r4, r3
 8029816:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029818:	441e      	add	r6, r3
 802981a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802981c:	3b01      	subs	r3, #1
 802981e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029820:	e6c0      	b.n	80295a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8029822:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029824:	441c      	add	r4, r3
 8029826:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029828:	441e      	add	r6, r3
 802982a:	9b07      	ldr	r3, [sp, #28]
 802982c:	3b01      	subs	r3, #1
 802982e:	9307      	str	r3, [sp, #28]
 8029830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029832:	3302      	adds	r3, #2
 8029834:	930a      	str	r3, [sp, #40]	@ 0x28
 8029836:	e695      	b.n	8029564 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029838:	d024      	beq.n	8029884 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802983a:	9b07      	ldr	r3, [sp, #28]
 802983c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802983e:	3b01      	subs	r3, #1
 8029840:	fb00 4003 	mla	r0, r0, r3, r4
 8029844:	1400      	asrs	r0, r0, #16
 8029846:	f53f aeaa 	bmi.w	802959e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802984a:	3901      	subs	r1, #1
 802984c:	4288      	cmp	r0, r1
 802984e:	f6bf aea6 	bge.w	802959e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029852:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8029854:	fb01 6303 	mla	r3, r1, r3, r6
 8029858:	141b      	asrs	r3, r3, #16
 802985a:	f53f aea0 	bmi.w	802959e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802985e:	3a01      	subs	r2, #1
 8029860:	4293      	cmp	r3, r2
 8029862:	f6bf ae9c 	bge.w	802959e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029866:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802986a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802986e:	f1bb 0f00 	cmp.w	fp, #0
 8029872:	f300 809a 	bgt.w	80299aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029876:	9b07      	ldr	r3, [sp, #28]
 8029878:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802987c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802987e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029882:	930a      	str	r3, [sp, #40]	@ 0x28
 8029884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029886:	2b00      	cmp	r3, #0
 8029888:	f340 81ec 	ble.w	8029c64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802988c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029890:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029894:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029898:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802989c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80298a0:	eef0 6a62 	vmov.f32	s13, s5
 80298a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80298a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80298ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80298b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80298b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80298b8:	ee16 4a90 	vmov	r4, s13
 80298bc:	eef0 6a43 	vmov.f32	s13, s6
 80298c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80298c4:	ee12 2a90 	vmov	r2, s5
 80298c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80298cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80298ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80298d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80298d6:	ee13 2a10 	vmov	r2, s6
 80298da:	9327      	str	r3, [sp, #156]	@ 0x9c
 80298dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80298de:	ee16 6a90 	vmov	r6, s13
 80298e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80298e6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80298e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80298ea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80298ec:	3b01      	subs	r3, #1
 80298ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80298f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80298f2:	bf08      	it	eq
 80298f4:	4613      	moveq	r3, r2
 80298f6:	eeb0 3a67 	vmov.f32	s6, s15
 80298fa:	9307      	str	r3, [sp, #28]
 80298fc:	eef0 2a47 	vmov.f32	s5, s14
 8029900:	e622      	b.n	8029548 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8029902:	2800      	cmp	r0, #0
 8029904:	f43f ae92 	beq.w	802962c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029908:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802990c:	9308      	str	r3, [sp, #32]
 802990e:	0e1b      	lsrs	r3, r3, #24
 8029910:	9310      	str	r3, [sp, #64]	@ 0x40
 8029912:	e68b      	b.n	802962c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8029914:	43db      	mvns	r3, r3
 8029916:	8839      	ldrh	r1, [r7, #0]
 8029918:	fa5f f883 	uxtb.w	r8, r3
 802991c:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8029920:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8029924:	fb0e fe08 	mul.w	lr, lr, r8
 8029928:	10c8      	asrs	r0, r1, #3
 802992a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802992e:	fb00 f008 	mul.w	r0, r0, r8
 8029932:	00cb      	lsls	r3, r1, #3
 8029934:	f10e 0101 	add.w	r1, lr, #1
 8029938:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802993c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029940:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029944:	b2db      	uxtb	r3, r3
 8029946:	f100 0e01 	add.w	lr, r0, #1
 802994a:	fb03 f308 	mul.w	r3, r3, r8
 802994e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029952:	4dc6      	ldr	r5, [pc, #792]	@ (8029c6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029954:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029958:	b2c9      	uxtb	r1, r1
 802995a:	00d2      	lsls	r2, r2, #3
 802995c:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8029960:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029964:	430a      	orrs	r2, r1
 8029966:	1c59      	adds	r1, r3, #1
 8029968:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802996c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8029970:	e748      	b.n	8029804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8029972:	f112 0801 	adds.w	r8, r2, #1
 8029976:	f53f af4b 	bmi.w	8029810 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802997a:	4543      	cmp	r3, r8
 802997c:	f6ff af48 	blt.w	8029810 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029980:	f11c 0801 	adds.w	r8, ip, #1
 8029984:	f53f af44 	bmi.w	8029810 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8029988:	45c6      	cmp	lr, r8
 802998a:	f6ff af41 	blt.w	8029810 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802998e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029992:	fa0f f28e 	sxth.w	r2, lr
 8029996:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802999a:	9200      	str	r2, [sp, #0]
 802999c:	b21b      	sxth	r3, r3
 802999e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80299a0:	4639      	mov	r1, r7
 80299a2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80299a4:	f7ff fc87 	bl	80292b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80299a8:	e732      	b.n	8029810 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80299aa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80299ac:	1421      	asrs	r1, r4, #16
 80299ae:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80299b2:	1433      	asrs	r3, r6, #16
 80299b4:	fb07 1303 	mla	r3, r7, r3, r1
 80299b8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80299ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80299bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80299c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80299c4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80299c8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80299cc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80299d0:	2a00      	cmp	r2, #0
 80299d2:	f000 8108 	beq.w	8029be6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80299d6:	684d      	ldr	r5, [r1, #4]
 80299d8:	950d      	str	r5, [sp, #52]	@ 0x34
 80299da:	0e2d      	lsrs	r5, r5, #24
 80299dc:	9514      	str	r5, [sp, #80]	@ 0x50
 80299de:	b178      	cbz	r0, 8029a00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80299e0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80299e4:	3f01      	subs	r7, #1
 80299e6:	00bf      	lsls	r7, r7, #2
 80299e8:	3704      	adds	r7, #4
 80299ea:	eb01 0e07 	add.w	lr, r1, r7
 80299ee:	59c9      	ldr	r1, [r1, r7]
 80299f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80299f2:	0e09      	lsrs	r1, r1, #24
 80299f4:	9111      	str	r1, [sp, #68]	@ 0x44
 80299f6:	f8de 1004 	ldr.w	r1, [lr, #4]
 80299fa:	910e      	str	r1, [sp, #56]	@ 0x38
 80299fc:	0e09      	lsrs	r1, r1, #24
 80299fe:	9115      	str	r1, [sp, #84]	@ 0x54
 8029a00:	b292      	uxth	r2, r2
 8029a02:	b280      	uxth	r0, r0
 8029a04:	fb02 f900 	mul.w	r9, r2, r0
 8029a08:	0112      	lsls	r2, r2, #4
 8029a0a:	eba2 0e09 	sub.w	lr, r2, r9
 8029a0e:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8029a12:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029a14:	fa1f fe8e 	uxth.w	lr, lr
 8029a18:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029a1c:	fb0e f202 	mul.w	r2, lr, r2
 8029a20:	b280      	uxth	r0, r0
 8029a22:	1a09      	subs	r1, r1, r0
 8029a24:	b289      	uxth	r1, r1
 8029a26:	fb01 220c 	mla	r2, r1, ip, r2
 8029a2a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029a2c:	fb00 2205 	mla	r2, r0, r5, r2
 8029a30:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029a32:	fb09 2205 	mla	r2, r9, r5, r2
 8029a36:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029a3a:	2a00      	cmp	r2, #0
 8029a3c:	f000 80ca 	beq.w	8029bd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029a40:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8029a44:	d019      	beq.n	8029a7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8029a46:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029a4a:	fb0c fa0a 	mul.w	sl, ip, sl
 8029a4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029a52:	fb0c fc03 	mul.w	ip, ip, r3
 8029a56:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029a5a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029a5e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029a62:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8029a66:	4453      	add	r3, sl
 8029a68:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029a6c:	0a1b      	lsrs	r3, r3, #8
 8029a6e:	0a3f      	lsrs	r7, r7, #8
 8029a70:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029a74:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029a78:	433b      	orrs	r3, r7
 8029a7a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029a7c:	2dff      	cmp	r5, #255	@ 0xff
 8029a7e:	d020      	beq.n	8029ac2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8029a80:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029a82:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029a86:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029a88:	436f      	muls	r7, r5
 8029a8a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029a8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029a90:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029a94:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029a96:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029a9a:	fb05 fa0a 	mul.w	sl, r5, sl
 8029a9e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029aa2:	44bc      	add	ip, r7
 8029aa4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029aa8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029aac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029ab0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ab4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029ab8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029abc:	ea4c 050a 	orr.w	r5, ip, sl
 8029ac0:	950d      	str	r5, [sp, #52]	@ 0x34
 8029ac2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029ac4:	2dff      	cmp	r5, #255	@ 0xff
 8029ac6:	d020      	beq.n	8029b0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8029ac8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029aca:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029ace:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029ad0:	436f      	muls	r7, r5
 8029ad2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029ad4:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029ad8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029ada:	fb05 fa0c 	mul.w	sl, r5, ip
 8029ade:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029ae2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029ae6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029aea:	44bc      	add	ip, r7
 8029aec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029af0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029af4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029af8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029afc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029b00:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029b04:	ea4c 050a 	orr.w	r5, ip, sl
 8029b08:	9509      	str	r5, [sp, #36]	@ 0x24
 8029b0a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029b0c:	2dff      	cmp	r5, #255	@ 0xff
 8029b0e:	d020      	beq.n	8029b52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8029b10:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029b12:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029b16:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029b18:	436f      	muls	r7, r5
 8029b1a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029b1c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029b20:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029b24:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029b26:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029b2a:	fb05 fa0a 	mul.w	sl, r5, sl
 8029b2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029b32:	44bc      	add	ip, r7
 8029b34:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029b38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029b40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029b44:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029b48:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029b4c:	ea4c 050a 	orr.w	r5, ip, sl
 8029b50:	950e      	str	r5, [sp, #56]	@ 0x38
 8029b52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029b54:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8029b58:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029b5c:	fb0e f707 	mul.w	r7, lr, r7
 8029b60:	fb01 770c 	mla	r7, r1, ip, r7
 8029b64:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029b66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029b6a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029b6e:	fb00 770c 	mla	r7, r0, ip, r7
 8029b72:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029b74:	2aff      	cmp	r2, #255	@ 0xff
 8029b76:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029b7a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029b7c:	fb09 770c 	mla	r7, r9, ip, r7
 8029b80:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029b84:	fb0e fe0c 	mul.w	lr, lr, ip
 8029b88:	fb01 e303 	mla	r3, r1, r3, lr
 8029b8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029b8e:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029b92:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029b96:	fb00 330a 	mla	r3, r0, sl, r3
 8029b9a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029b9c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029ba0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8029ba4:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029ba8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029bac:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029bb0:	ea47 070c 	orr.w	r7, r7, ip
 8029bb4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029bb8:	d11e      	bne.n	8029bf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029bba:	097a      	lsrs	r2, r7, #5
 8029bbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8029bc0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029bc4:	f023 0307 	bic.w	r3, r3, #7
 8029bc8:	4313      	orrs	r3, r2
 8029bca:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029bce:	431f      	orrs	r7, r3
 8029bd0:	f8a8 7000 	strh.w	r7, [r8]
 8029bd4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029bd6:	f108 0802 	add.w	r8, r8, #2
 8029bda:	441c      	add	r4, r3
 8029bdc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029bde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029be2:	441e      	add	r6, r3
 8029be4:	e643      	b.n	802986e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029be6:	2800      	cmp	r0, #0
 8029be8:	f43f af0a 	beq.w	8029a00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029bec:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029bf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8029bf2:	0e09      	lsrs	r1, r1, #24
 8029bf4:	9111      	str	r1, [sp, #68]	@ 0x44
 8029bf6:	e703      	b.n	8029a00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8029bf8:	43d2      	mvns	r2, r2
 8029bfa:	f8b8 1000 	ldrh.w	r1, [r8]
 8029bfe:	fa5f fe82 	uxtb.w	lr, r2
 8029c02:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029c06:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8029c0a:	fb0c fc0e 	mul.w	ip, ip, lr
 8029c0e:	10c8      	asrs	r0, r1, #3
 8029c10:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029c14:	fb00 f00e 	mul.w	r0, r0, lr
 8029c18:	00ca      	lsls	r2, r1, #3
 8029c1a:	f10c 0101 	add.w	r1, ip, #1
 8029c1e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029c22:	b2d2      	uxtb	r2, r2
 8029c24:	0c39      	lsrs	r1, r7, #16
 8029c26:	fb02 f20e 	mul.w	r2, r2, lr
 8029c2a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029c2e:	490f      	ldr	r1, [pc, #60]	@ (8029c6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8029c30:	fa5f fc8c 	uxtb.w	ip, ip
 8029c34:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029c38:	1c41      	adds	r1, r0, #1
 8029c3a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029c3e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029c42:	1c51      	adds	r1, r2, #1
 8029c44:	00c0      	lsls	r0, r0, #3
 8029c46:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029c4a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029c4e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029c52:	ea4c 0c00 	orr.w	ip, ip, r0
 8029c56:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029c5a:	ea47 0c0c 	orr.w	ip, r7, ip
 8029c5e:	f8a8 c000 	strh.w	ip, [r8]
 8029c62:	e7b7      	b.n	8029bd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8029c64:	b01b      	add	sp, #108	@ 0x6c
 8029c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c6a:	bf00      	nop
 8029c6c:	fffff800 	.word	0xfffff800

08029c70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029c74:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8029c78:	2d00      	cmp	r5, #0
 8029c7a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029c7e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029c82:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8029c86:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8029c8a:	fb05 0e03 	mla	lr, r5, r3, r0
 8029c8e:	f2c0 808c 	blt.w	8029daa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029c92:	45a9      	cmp	r9, r5
 8029c94:	f340 8089 	ble.w	8029daa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8029c98:	2800      	cmp	r0, #0
 8029c9a:	f2c0 8084 	blt.w	8029da6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029c9e:	4580      	cmp	r8, r0
 8029ca0:	f340 8081 	ble.w	8029da6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8029ca4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029ca8:	5d16      	ldrb	r6, [r2, r4]
 8029caa:	f01e 0f01 	tst.w	lr, #1
 8029cae:	bf0c      	ite	eq
 8029cb0:	f006 060f 	andeq.w	r6, r6, #15
 8029cb4:	1136      	asrne	r6, r6, #4
 8029cb6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029cba:	b2f6      	uxtb	r6, r6
 8029cbc:	1c44      	adds	r4, r0, #1
 8029cbe:	d477      	bmi.n	8029db0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029cc0:	45a0      	cmp	r8, r4
 8029cc2:	dd75      	ble.n	8029db0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8029cc4:	2f00      	cmp	r7, #0
 8029cc6:	d075      	beq.n	8029db4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8029cc8:	f10e 0a01 	add.w	sl, lr, #1
 8029ccc:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8029cd0:	5d14      	ldrb	r4, [r2, r4]
 8029cd2:	f01a 0f01 	tst.w	sl, #1
 8029cd6:	bf0c      	ite	eq
 8029cd8:	f004 040f 	andeq.w	r4, r4, #15
 8029cdc:	1124      	asrne	r4, r4, #4
 8029cde:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029ce2:	b2e4      	uxtb	r4, r4
 8029ce4:	3501      	adds	r5, #1
 8029ce6:	d469      	bmi.n	8029dbc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029ce8:	45a9      	cmp	r9, r5
 8029cea:	dd67      	ble.n	8029dbc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8029cec:	f1bc 0f00 	cmp.w	ip, #0
 8029cf0:	d067      	beq.n	8029dc2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8029cf2:	2800      	cmp	r0, #0
 8029cf4:	db60      	blt.n	8029db8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029cf6:	4580      	cmp	r8, r0
 8029cf8:	dd5e      	ble.n	8029db8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8029cfa:	eb03 090e 	add.w	r9, r3, lr
 8029cfe:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8029d02:	5d55      	ldrb	r5, [r2, r5]
 8029d04:	f019 0f01 	tst.w	r9, #1
 8029d08:	bf0c      	ite	eq
 8029d0a:	f005 050f 	andeq.w	r5, r5, #15
 8029d0e:	112d      	asrne	r5, r5, #4
 8029d10:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029d14:	b2ed      	uxtb	r5, r5
 8029d16:	3001      	adds	r0, #1
 8029d18:	d456      	bmi.n	8029dc8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029d1a:	4580      	cmp	r8, r0
 8029d1c:	dd54      	ble.n	8029dc8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8029d1e:	2f00      	cmp	r7, #0
 8029d20:	d054      	beq.n	8029dcc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8029d22:	3301      	adds	r3, #1
 8029d24:	449e      	add	lr, r3
 8029d26:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029d2a:	5cd0      	ldrb	r0, [r2, r3]
 8029d2c:	f01e 0f01 	tst.w	lr, #1
 8029d30:	bf0c      	ite	eq
 8029d32:	f000 000f 	andeq.w	r0, r0, #15
 8029d36:	1100      	asrne	r0, r0, #4
 8029d38:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029d3c:	b2c3      	uxtb	r3, r0
 8029d3e:	b2ba      	uxth	r2, r7
 8029d40:	fa1f fc8c 	uxth.w	ip, ip
 8029d44:	fb02 f00c 	mul.w	r0, r2, ip
 8029d48:	0112      	lsls	r2, r2, #4
 8029d4a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8029d4e:	1a12      	subs	r2, r2, r0
 8029d50:	b292      	uxth	r2, r2
 8029d52:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029d56:	4362      	muls	r2, r4
 8029d58:	fa1f fc8c 	uxth.w	ip, ip
 8029d5c:	eba7 070c 	sub.w	r7, r7, ip
 8029d60:	b2bf      	uxth	r7, r7
 8029d62:	fb06 2207 	mla	r2, r6, r7, r2
 8029d66:	fb0c 2505 	mla	r5, ip, r5, r2
 8029d6a:	fb00 5303 	mla	r3, r0, r3, r5
 8029d6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029d72:	b1b3      	cbz	r3, 8029da2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029d74:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8029d78:	435a      	muls	r2, r3
 8029d7a:	1c53      	adds	r3, r2, #1
 8029d7c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029d80:	4a2d      	ldr	r2, [pc, #180]	@ (8029e38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8029d82:	121b      	asrs	r3, r3, #8
 8029d84:	6812      	ldr	r2, [r2, #0]
 8029d86:	2bff      	cmp	r3, #255	@ 0xff
 8029d88:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029d8c:	d120      	bne.n	8029dd0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8029d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8029e3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8029d90:	0950      	lsrs	r0, r2, #5
 8029d92:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029d96:	4033      	ands	r3, r6
 8029d98:	4318      	orrs	r0, r3
 8029d9a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029d9e:	4302      	orrs	r2, r0
 8029da0:	800a      	strh	r2, [r1, #0]
 8029da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029da6:	2600      	movs	r6, #0
 8029da8:	e788      	b.n	8029cbc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8029daa:	2400      	movs	r4, #0
 8029dac:	4626      	mov	r6, r4
 8029dae:	e799      	b.n	8029ce4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029db0:	2400      	movs	r4, #0
 8029db2:	e797      	b.n	8029ce4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029db4:	463c      	mov	r4, r7
 8029db6:	e795      	b.n	8029ce4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8029db8:	2500      	movs	r5, #0
 8029dba:	e7ac      	b.n	8029d16 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8029dbc:	2300      	movs	r3, #0
 8029dbe:	461d      	mov	r5, r3
 8029dc0:	e7bd      	b.n	8029d3e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029dc2:	4663      	mov	r3, ip
 8029dc4:	4665      	mov	r5, ip
 8029dc6:	e7ba      	b.n	8029d3e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029dc8:	2300      	movs	r3, #0
 8029dca:	e7b8      	b.n	8029d3e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029dcc:	463b      	mov	r3, r7
 8029dce:	e7b6      	b.n	8029d3e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8029dd0:	b29f      	uxth	r7, r3
 8029dd2:	43db      	mvns	r3, r3
 8029dd4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029dd8:	880d      	ldrh	r5, [r1, #0]
 8029dda:	fb10 f007 	smulbb	r0, r0, r7
 8029dde:	b2f6      	uxtb	r6, r6
 8029de0:	b2d2      	uxtb	r2, r2
 8029de2:	122c      	asrs	r4, r5, #8
 8029de4:	fb12 f207 	smulbb	r2, r2, r7
 8029de8:	fb16 f607 	smulbb	r6, r6, r7
 8029dec:	b2db      	uxtb	r3, r3
 8029dee:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029df2:	fb04 0403 	mla	r4, r4, r3, r0
 8029df6:	10e8      	asrs	r0, r5, #3
 8029df8:	00ed      	lsls	r5, r5, #3
 8029dfa:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029dfe:	b2ed      	uxtb	r5, r5
 8029e00:	fb00 6603 	mla	r6, r0, r3, r6
 8029e04:	fb05 2303 	mla	r3, r5, r3, r2
 8029e08:	b2a4      	uxth	r4, r4
 8029e0a:	b29a      	uxth	r2, r3
 8029e0c:	1c63      	adds	r3, r4, #1
 8029e0e:	b2b0      	uxth	r0, r6
 8029e10:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029e14:	1c53      	adds	r3, r2, #1
 8029e16:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029e1a:	1c42      	adds	r2, r0, #1
 8029e1c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029e20:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8029e24:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029e28:	0940      	lsrs	r0, r0, #5
 8029e2a:	4323      	orrs	r3, r4
 8029e2c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029e30:	4303      	orrs	r3, r0
 8029e32:	800b      	strh	r3, [r1, #0]
 8029e34:	e7b5      	b.n	8029da2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8029e36:	bf00      	nop
 8029e38:	20011f3c 	.word	0x20011f3c
 8029e3c:	00fff800 	.word	0x00fff800

08029e40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e44:	b097      	sub	sp, #92	@ 0x5c
 8029e46:	9214      	str	r2, [sp, #80]	@ 0x50
 8029e48:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8029e4a:	9015      	str	r0, [sp, #84]	@ 0x54
 8029e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8029e4e:	6850      	ldr	r0, [r2, #4]
 8029e50:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8029e54:	910d      	str	r1, [sp, #52]	@ 0x34
 8029e56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029e58:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8029e5c:	fb00 1303 	mla	r3, r0, r3, r1
 8029e60:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8029e64:	6812      	ldr	r2, [r2, #0]
 8029e66:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029e6a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e6c:	689b      	ldr	r3, [r3, #8]
 8029e6e:	3301      	adds	r3, #1
 8029e70:	f023 0301 	bic.w	r3, r3, #1
 8029e74:	930a      	str	r3, [sp, #40]	@ 0x28
 8029e76:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e78:	681f      	ldr	r7, [r3, #0]
 8029e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029e7c:	2b00      	cmp	r3, #0
 8029e7e:	dc03      	bgt.n	8029e88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029e80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8029e82:	2b00      	cmp	r3, #0
 8029e84:	f340 8287 	ble.w	802a396 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8029e88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029e8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029e92:	1e48      	subs	r0, r1, #1
 8029e94:	f102 3cff 	add.w	ip, r2, #4294967295
 8029e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029e9a:	2b00      	cmp	r3, #0
 8029e9c:	f340 80c3 	ble.w	802a026 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029ea0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029ea4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029ea8:	d406      	bmi.n	8029eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029eaa:	4586      	cmp	lr, r0
 8029eac:	da04      	bge.n	8029eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	db02      	blt.n	8029eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029eb2:	4563      	cmp	r3, ip
 8029eb4:	f2c0 80b8 	blt.w	802a028 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8029eb8:	f11e 0e01 	adds.w	lr, lr, #1
 8029ebc:	f100 80a9 	bmi.w	802a012 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029ec0:	4571      	cmp	r1, lr
 8029ec2:	f2c0 80a6 	blt.w	802a012 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029ec6:	3301      	adds	r3, #1
 8029ec8:	f100 80a3 	bmi.w	802a012 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029ecc:	429a      	cmp	r2, r3
 8029ece:	f2c0 80a0 	blt.w	802a012 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8029ed2:	46c8      	mov	r8, r9
 8029ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ed6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8029eda:	930e      	str	r3, [sp, #56]	@ 0x38
 8029edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029ede:	2b00      	cmp	r3, #0
 8029ee0:	f340 80c2 	ble.w	802a068 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8029ee4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029ee6:	1430      	asrs	r0, r6, #16
 8029ee8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029eec:	1423      	asrs	r3, r4, #16
 8029eee:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029ef2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029ef6:	f100 814d 	bmi.w	802a194 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029efa:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029efe:	455b      	cmp	r3, fp
 8029f00:	f280 8148 	bge.w	802a194 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029f04:	2800      	cmp	r0, #0
 8029f06:	f2c0 8145 	blt.w	802a194 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029f0a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029f0e:	4558      	cmp	r0, fp
 8029f10:	f280 8140 	bge.w	802a194 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029f14:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029f16:	fb00 3305 	mla	r3, r0, r5, r3
 8029f1a:	0858      	lsrs	r0, r3, #1
 8029f1c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029f20:	07dd      	lsls	r5, r3, #31
 8029f22:	bf54      	ite	pl
 8029f24:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029f28:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029f2c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029f30:	fa5f fc8c 	uxtb.w	ip, ip
 8029f34:	2a00      	cmp	r2, #0
 8029f36:	f000 80db 	beq.w	802a0f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029f3a:	1c58      	adds	r0, r3, #1
 8029f3c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029f40:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029f44:	07c0      	lsls	r0, r0, #31
 8029f46:	bf54      	ite	pl
 8029f48:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029f4c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029f50:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029f54:	fa5f f08e 	uxtb.w	r0, lr
 8029f58:	9010      	str	r0, [sp, #64]	@ 0x40
 8029f5a:	b1c9      	cbz	r1, 8029f90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8029f5c:	4453      	add	r3, sl
 8029f5e:	0858      	lsrs	r0, r3, #1
 8029f60:	5c38      	ldrb	r0, [r7, r0]
 8029f62:	07dd      	lsls	r5, r3, #31
 8029f64:	bf54      	ite	pl
 8029f66:	f000 000f 	andpl.w	r0, r0, #15
 8029f6a:	1100      	asrmi	r0, r0, #4
 8029f6c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029f70:	3301      	adds	r3, #1
 8029f72:	b2c0      	uxtb	r0, r0
 8029f74:	900b      	str	r0, [sp, #44]	@ 0x2c
 8029f76:	0858      	lsrs	r0, r3, #1
 8029f78:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029f7c:	07dd      	lsls	r5, r3, #31
 8029f7e:	bf54      	ite	pl
 8029f80:	f00e 030f 	andpl.w	r3, lr, #15
 8029f84:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029f88:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029f8c:	b2db      	uxtb	r3, r3
 8029f8e:	9311      	str	r3, [sp, #68]	@ 0x44
 8029f90:	b292      	uxth	r2, r2
 8029f92:	b289      	uxth	r1, r1
 8029f94:	fb02 f301 	mul.w	r3, r2, r1
 8029f98:	0112      	lsls	r2, r2, #4
 8029f9a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8029f9e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029fa0:	1ad2      	subs	r2, r2, r3
 8029fa2:	b292      	uxth	r2, r2
 8029fa4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029fa8:	436a      	muls	r2, r5
 8029faa:	b289      	uxth	r1, r1
 8029fac:	1a40      	subs	r0, r0, r1
 8029fae:	b280      	uxth	r0, r0
 8029fb0:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029fb4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029fb6:	fb01 c102 	mla	r1, r1, r2, ip
 8029fba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029fbc:	fb03 1302 	mla	r3, r3, r2, r1
 8029fc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029fc4:	b1db      	cbz	r3, 8029ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029fc6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029fc8:	4353      	muls	r3, r2
 8029fca:	1c5a      	adds	r2, r3, #1
 8029fcc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029fd0:	4ac6      	ldr	r2, [pc, #792]	@ (802a2ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029fd2:	121b      	asrs	r3, r3, #8
 8029fd4:	6812      	ldr	r2, [r2, #0]
 8029fd6:	2bff      	cmp	r3, #255	@ 0xff
 8029fd8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029fdc:	f040 8099 	bne.w	802a112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029fe0:	0953      	lsrs	r3, r2, #5
 8029fe2:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8029fe6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029fea:	f02c 0c07 	bic.w	ip, ip, #7
 8029fee:	ea43 0c0c 	orr.w	ip, r3, ip
 8029ff2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029ff6:	ea4c 0202 	orr.w	r2, ip, r2
 8029ffa:	f8a8 2000 	strh.w	r2, [r8]
 8029ffe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802a000:	f108 0802 	add.w	r8, r8, #2
 802a004:	441c      	add	r4, r3
 802a006:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a008:	441e      	add	r6, r3
 802a00a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a00c:	3b01      	subs	r3, #1
 802a00e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a010:	e764      	b.n	8029edc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802a014:	f109 0902 	add.w	r9, r9, #2
 802a018:	441c      	add	r4, r3
 802a01a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a01c:	441e      	add	r6, r3
 802a01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a020:	3b01      	subs	r3, #1
 802a022:	9309      	str	r3, [sp, #36]	@ 0x24
 802a024:	e738      	b.n	8029e98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a026:	d024      	beq.n	802a072 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802a028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a02a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802a02c:	3b01      	subs	r3, #1
 802a02e:	fb00 4003 	mla	r0, r0, r3, r4
 802a032:	1400      	asrs	r0, r0, #16
 802a034:	f53f af4d 	bmi.w	8029ed2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a038:	3901      	subs	r1, #1
 802a03a:	4288      	cmp	r0, r1
 802a03c:	f6bf af49 	bge.w	8029ed2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a040:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802a042:	fb01 6303 	mla	r3, r1, r3, r6
 802a046:	141b      	asrs	r3, r3, #16
 802a048:	f53f af43 	bmi.w	8029ed2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a04c:	3a01      	subs	r2, #1
 802a04e:	4293      	cmp	r3, r2
 802a050:	f6bf af3f 	bge.w	8029ed2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a054:	46c8      	mov	r8, r9
 802a056:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 802a05a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802a05e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a060:	f1bb 0f00 	cmp.w	fp, #0
 802a064:	f300 80b7 	bgt.w	802a1d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 802a068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a06a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a06e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a074:	2b00      	cmp	r3, #0
 802a076:	f340 818e 	ble.w	802a396 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802a07a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a07e:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a082:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a086:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a08a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a08e:	eef0 6a62 	vmov.f32	s13, s5
 802a092:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a096:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a09a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a09e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a0a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a0a6:	ee16 4a90 	vmov	r4, s13
 802a0aa:	eef0 6a43 	vmov.f32	s13, s6
 802a0ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a0b2:	ee12 2a90 	vmov	r2, s5
 802a0b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a0ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a0bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a0c0:	fb92 f3f3 	sdiv	r3, r2, r3
 802a0c4:	ee13 2a10 	vmov	r2, s6
 802a0c8:	9323      	str	r3, [sp, #140]	@ 0x8c
 802a0ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a0cc:	ee16 6a90 	vmov	r6, s13
 802a0d0:	fb92 f3f3 	sdiv	r3, r2, r3
 802a0d4:	9324      	str	r3, [sp, #144]	@ 0x90
 802a0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a0d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a0da:	3b01      	subs	r3, #1
 802a0dc:	930d      	str	r3, [sp, #52]	@ 0x34
 802a0de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a0e0:	bf08      	it	eq
 802a0e2:	4613      	moveq	r3, r2
 802a0e4:	eeb0 3a67 	vmov.f32	s6, s15
 802a0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 802a0ea:	eef0 2a47 	vmov.f32	s5, s14
 802a0ee:	e6c4      	b.n	8029e7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a0f0:	2900      	cmp	r1, #0
 802a0f2:	f43f af4d 	beq.w	8029f90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802a0f6:	eb0a 0003 	add.w	r0, sl, r3
 802a0fa:	0843      	lsrs	r3, r0, #1
 802a0fc:	5cfb      	ldrb	r3, [r7, r3]
 802a0fe:	07c0      	lsls	r0, r0, #31
 802a100:	bf54      	ite	pl
 802a102:	f003 030f 	andpl.w	r3, r3, #15
 802a106:	111b      	asrmi	r3, r3, #4
 802a108:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a10c:	b2db      	uxtb	r3, r3
 802a10e:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a110:	e73e      	b.n	8029f90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802a112:	fa1f fb83 	uxth.w	fp, r3
 802a116:	43db      	mvns	r3, r3
 802a118:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a11c:	f8b8 e000 	ldrh.w	lr, [r8]
 802a120:	fb11 f10b 	smulbb	r1, r1, fp
 802a124:	fa5f fc8c 	uxtb.w	ip, ip
 802a128:	b2d2      	uxtb	r2, r2
 802a12a:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a12e:	fb1c fc0b 	smulbb	ip, ip, fp
 802a132:	fb12 fb0b 	smulbb	fp, r2, fp
 802a136:	b2db      	uxtb	r3, r3
 802a138:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a13c:	fb00 1003 	mla	r0, r0, r3, r1
 802a140:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a144:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a148:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a14c:	fa5f fe8e 	uxtb.w	lr, lr
 802a150:	fb01 cc03 	mla	ip, r1, r3, ip
 802a154:	fb0e bb03 	mla	fp, lr, r3, fp
 802a158:	b280      	uxth	r0, r0
 802a15a:	1c43      	adds	r3, r0, #1
 802a15c:	fa1f fc8c 	uxth.w	ip, ip
 802a160:	fa1f fb8b 	uxth.w	fp, fp
 802a164:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a168:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802a16c:	f10c 0101 	add.w	r1, ip, #1
 802a170:	f10b 0001 	add.w	r0, fp, #1
 802a174:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a178:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a17c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a180:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a184:	4318      	orrs	r0, r3
 802a186:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a18a:	ea40 000c 	orr.w	r0, r0, ip
 802a18e:	f8a8 0000 	strh.w	r0, [r8]
 802a192:	e734      	b.n	8029ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802a194:	f113 0b01 	adds.w	fp, r3, #1
 802a198:	f53f af31 	bmi.w	8029ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802a19c:	45dc      	cmp	ip, fp
 802a19e:	f6ff af2e 	blt.w	8029ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802a1a2:	f110 0b01 	adds.w	fp, r0, #1
 802a1a6:	f53f af2a 	bmi.w	8029ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802a1aa:	45de      	cmp	lr, fp
 802a1ac:	f6ff af27 	blt.w	8029ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802a1b0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a1b2:	9302      	str	r3, [sp, #8]
 802a1b4:	fa0f f38e 	sxth.w	r3, lr
 802a1b8:	9301      	str	r3, [sp, #4]
 802a1ba:	fa0f f38c 	sxth.w	r3, ip
 802a1be:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a1c2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802a1c6:	9300      	str	r3, [sp, #0]
 802a1c8:	463a      	mov	r2, r7
 802a1ca:	4653      	mov	r3, sl
 802a1cc:	4641      	mov	r1, r8
 802a1ce:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802a1d0:	f7ff fd4e 	bl	8029c70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802a1d4:	e713      	b.n	8029ffe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802a1d6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802a1d8:	1422      	asrs	r2, r4, #16
 802a1da:	1433      	asrs	r3, r6, #16
 802a1dc:	fb05 2303 	mla	r3, r5, r3, r2
 802a1e0:	085a      	lsrs	r2, r3, #1
 802a1e2:	5cba      	ldrb	r2, [r7, r2]
 802a1e4:	07dd      	lsls	r5, r3, #31
 802a1e6:	bf54      	ite	pl
 802a1e8:	f002 020f 	andpl.w	r2, r2, #15
 802a1ec:	1112      	asrmi	r2, r2, #4
 802a1ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a1f2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a1f6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a1fa:	b2d2      	uxtb	r2, r2
 802a1fc:	2900      	cmp	r1, #0
 802a1fe:	d077      	beq.n	802a2f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802a200:	f103 0e01 	add.w	lr, r3, #1
 802a204:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802a208:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a20c:	f01e 0f01 	tst.w	lr, #1
 802a210:	bf0c      	ite	eq
 802a212:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a216:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a21a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a21e:	fa5f f58c 	uxtb.w	r5, ip
 802a222:	9512      	str	r5, [sp, #72]	@ 0x48
 802a224:	b300      	cbz	r0, 802a268 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802a226:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a228:	442b      	add	r3, r5
 802a22a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a22e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a232:	07dd      	lsls	r5, r3, #31
 802a234:	bf54      	ite	pl
 802a236:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a23a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a23e:	3301      	adds	r3, #1
 802a240:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a244:	fa5f f58c 	uxtb.w	r5, ip
 802a248:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a24c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a250:	950c      	str	r5, [sp, #48]	@ 0x30
 802a252:	07dd      	lsls	r5, r3, #31
 802a254:	bf54      	ite	pl
 802a256:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a25a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a25e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a262:	fa5f f38c 	uxtb.w	r3, ip
 802a266:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a268:	b289      	uxth	r1, r1
 802a26a:	b280      	uxth	r0, r0
 802a26c:	fb01 f300 	mul.w	r3, r1, r0
 802a270:	0109      	lsls	r1, r1, #4
 802a272:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802a276:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a278:	1ac9      	subs	r1, r1, r3
 802a27a:	b289      	uxth	r1, r1
 802a27c:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a280:	4369      	muls	r1, r5
 802a282:	b280      	uxth	r0, r0
 802a284:	ebac 0c00 	sub.w	ip, ip, r0
 802a288:	fa1f fc8c 	uxth.w	ip, ip
 802a28c:	fb02 120c 	mla	r2, r2, ip, r1
 802a290:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a292:	fb00 2001 	mla	r0, r0, r1, r2
 802a296:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a298:	fb03 0302 	mla	r3, r3, r2, r0
 802a29c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a2a0:	b1d3      	cbz	r3, 802a2d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802a2a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a2a4:	4353      	muls	r3, r2
 802a2a6:	1c5a      	adds	r2, r3, #1
 802a2a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a2ac:	4a0f      	ldr	r2, [pc, #60]	@ (802a2ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a2ae:	121b      	asrs	r3, r3, #8
 802a2b0:	6812      	ldr	r2, [r2, #0]
 802a2b2:	2bff      	cmp	r3, #255	@ 0xff
 802a2b4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a2b8:	d12e      	bne.n	802a318 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802a2ba:	0953      	lsrs	r3, r2, #5
 802a2bc:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802a2c0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a2c4:	f02c 0c07 	bic.w	ip, ip, #7
 802a2c8:	ea43 0c0c 	orr.w	ip, r3, ip
 802a2cc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a2d0:	ea4c 0202 	orr.w	r2, ip, r2
 802a2d4:	f8a8 2000 	strh.w	r2, [r8]
 802a2d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802a2da:	f108 0802 	add.w	r8, r8, #2
 802a2de:	441c      	add	r4, r3
 802a2e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a2e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a2e6:	441e      	add	r6, r3
 802a2e8:	e6ba      	b.n	802a060 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802a2ea:	bf00      	nop
 802a2ec:	20011f3c 	.word	0x20011f3c
 802a2f0:	2800      	cmp	r0, #0
 802a2f2:	d0b9      	beq.n	802a268 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802a2f4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a2f6:	442b      	add	r3, r5
 802a2f8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a2fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a300:	07db      	lsls	r3, r3, #31
 802a302:	bf54      	ite	pl
 802a304:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a308:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a30c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a310:	fa5f f38c 	uxtb.w	r3, ip
 802a314:	930c      	str	r3, [sp, #48]	@ 0x30
 802a316:	e7a7      	b.n	802a268 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802a318:	fa1f fa83 	uxth.w	sl, r3
 802a31c:	43db      	mvns	r3, r3
 802a31e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a322:	f8b8 e000 	ldrh.w	lr, [r8]
 802a326:	fb11 f10a 	smulbb	r1, r1, sl
 802a32a:	b2d2      	uxtb	r2, r2
 802a32c:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a330:	fb12 f20a 	smulbb	r2, r2, sl
 802a334:	b2db      	uxtb	r3, r3
 802a336:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a33a:	fb00 1003 	mla	r0, r0, r3, r1
 802a33e:	fa5f fc8c 	uxtb.w	ip, ip
 802a342:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a346:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a34a:	fb1c fc0a 	smulbb	ip, ip, sl
 802a34e:	fa5f fe8e 	uxtb.w	lr, lr
 802a352:	fb0e 2203 	mla	r2, lr, r3, r2
 802a356:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a35a:	fb01 cc03 	mla	ip, r1, r3, ip
 802a35e:	b280      	uxth	r0, r0
 802a360:	b292      	uxth	r2, r2
 802a362:	1c43      	adds	r3, r0, #1
 802a364:	1c51      	adds	r1, r2, #1
 802a366:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a36a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a36e:	fa1f fc8c 	uxth.w	ip, ip
 802a372:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a376:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802a37a:	4308      	orrs	r0, r1
 802a37c:	f10c 0101 	add.w	r1, ip, #1
 802a380:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a384:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a388:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a38c:	ea40 000c 	orr.w	r0, r0, ip
 802a390:	f8a8 0000 	strh.w	r0, [r8]
 802a394:	e7a0      	b.n	802a2d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802a396:	b017      	add	sp, #92	@ 0x5c
 802a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a39c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a3a0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802a3a4:	2d00      	cmp	r5, #0
 802a3a6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a3aa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a3ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802a3b2:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802a3b6:	fb05 0e03 	mla	lr, r5, r3, r0
 802a3ba:	f2c0 80b0 	blt.w	802a51e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a3be:	45a9      	cmp	r9, r5
 802a3c0:	f340 80ad 	ble.w	802a51e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802a3c4:	2800      	cmp	r0, #0
 802a3c6:	f2c0 80a8 	blt.w	802a51a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a3ca:	4580      	cmp	r8, r0
 802a3cc:	f340 80a5 	ble.w	802a51a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802a3d0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a3d4:	5d16      	ldrb	r6, [r2, r4]
 802a3d6:	f01e 0f01 	tst.w	lr, #1
 802a3da:	bf0c      	ite	eq
 802a3dc:	f006 060f 	andeq.w	r6, r6, #15
 802a3e0:	1136      	asrne	r6, r6, #4
 802a3e2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a3e6:	b2f6      	uxtb	r6, r6
 802a3e8:	1c44      	adds	r4, r0, #1
 802a3ea:	f100 809b 	bmi.w	802a524 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a3ee:	45a0      	cmp	r8, r4
 802a3f0:	f340 8098 	ble.w	802a524 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802a3f4:	2f00      	cmp	r7, #0
 802a3f6:	f000 8097 	beq.w	802a528 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802a3fa:	f10e 0a01 	add.w	sl, lr, #1
 802a3fe:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a402:	5d14      	ldrb	r4, [r2, r4]
 802a404:	f01a 0f01 	tst.w	sl, #1
 802a408:	bf0c      	ite	eq
 802a40a:	f004 040f 	andeq.w	r4, r4, #15
 802a40e:	1124      	asrne	r4, r4, #4
 802a410:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a414:	b2e4      	uxtb	r4, r4
 802a416:	3501      	adds	r5, #1
 802a418:	f100 808a 	bmi.w	802a530 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a41c:	45a9      	cmp	r9, r5
 802a41e:	f340 8087 	ble.w	802a530 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802a422:	f1bc 0f00 	cmp.w	ip, #0
 802a426:	f000 8086 	beq.w	802a536 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802a42a:	2800      	cmp	r0, #0
 802a42c:	db7e      	blt.n	802a52c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a42e:	4580      	cmp	r8, r0
 802a430:	dd7c      	ble.n	802a52c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802a432:	eb03 090e 	add.w	r9, r3, lr
 802a436:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a43a:	5d55      	ldrb	r5, [r2, r5]
 802a43c:	f019 0f01 	tst.w	r9, #1
 802a440:	bf0c      	ite	eq
 802a442:	f005 050f 	andeq.w	r5, r5, #15
 802a446:	112d      	asrne	r5, r5, #4
 802a448:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a44c:	b2ed      	uxtb	r5, r5
 802a44e:	3001      	adds	r0, #1
 802a450:	d474      	bmi.n	802a53c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a452:	4580      	cmp	r8, r0
 802a454:	dd72      	ble.n	802a53c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a456:	2f00      	cmp	r7, #0
 802a458:	d072      	beq.n	802a540 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a45a:	3301      	adds	r3, #1
 802a45c:	449e      	add	lr, r3
 802a45e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a462:	5cd0      	ldrb	r0, [r2, r3]
 802a464:	f01e 0f01 	tst.w	lr, #1
 802a468:	bf0c      	ite	eq
 802a46a:	f000 000f 	andeq.w	r0, r0, #15
 802a46e:	1100      	asrne	r0, r0, #4
 802a470:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a474:	b2c3      	uxtb	r3, r0
 802a476:	b2ba      	uxth	r2, r7
 802a478:	fa1f fc8c 	uxth.w	ip, ip
 802a47c:	fb02 f00c 	mul.w	r0, r2, ip
 802a480:	0112      	lsls	r2, r2, #4
 802a482:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802a486:	1a12      	subs	r2, r2, r0
 802a488:	b292      	uxth	r2, r2
 802a48a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a48e:	4362      	muls	r2, r4
 802a490:	fa1f fc8c 	uxth.w	ip, ip
 802a494:	eba7 070c 	sub.w	r7, r7, ip
 802a498:	b2bf      	uxth	r7, r7
 802a49a:	fb06 2207 	mla	r2, r6, r7, r2
 802a49e:	fb0c 2505 	mla	r5, ip, r5, r2
 802a4a2:	fb00 5303 	mla	r3, r0, r3, r5
 802a4a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a4aa:	b3a3      	cbz	r3, 802a516 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802a4ac:	4a25      	ldr	r2, [pc, #148]	@ (802a544 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802a4ae:	880e      	ldrh	r6, [r1, #0]
 802a4b0:	6815      	ldr	r5, [r2, #0]
 802a4b2:	b29a      	uxth	r2, r3
 802a4b4:	43db      	mvns	r3, r3
 802a4b6:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a4ba:	fb10 f002 	smulbb	r0, r0, r2
 802a4be:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a4c2:	b2ed      	uxtb	r5, r5
 802a4c4:	1234      	asrs	r4, r6, #8
 802a4c6:	fb17 f702 	smulbb	r7, r7, r2
 802a4ca:	fb15 f202 	smulbb	r2, r5, r2
 802a4ce:	b2db      	uxtb	r3, r3
 802a4d0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a4d4:	fb04 0403 	mla	r4, r4, r3, r0
 802a4d8:	10f0      	asrs	r0, r6, #3
 802a4da:	00f6      	lsls	r6, r6, #3
 802a4dc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a4e0:	b2f6      	uxtb	r6, r6
 802a4e2:	fb00 7003 	mla	r0, r0, r3, r7
 802a4e6:	fb06 2303 	mla	r3, r6, r3, r2
 802a4ea:	b2a4      	uxth	r4, r4
 802a4ec:	b29a      	uxth	r2, r3
 802a4ee:	1c63      	adds	r3, r4, #1
 802a4f0:	b280      	uxth	r0, r0
 802a4f2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a4f6:	1c53      	adds	r3, r2, #1
 802a4f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a4fc:	1c42      	adds	r2, r0, #1
 802a4fe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a502:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a506:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a50a:	0940      	lsrs	r0, r0, #5
 802a50c:	4323      	orrs	r3, r4
 802a50e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a512:	4303      	orrs	r3, r0
 802a514:	800b      	strh	r3, [r1, #0]
 802a516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a51a:	2600      	movs	r6, #0
 802a51c:	e764      	b.n	802a3e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802a51e:	2400      	movs	r4, #0
 802a520:	4626      	mov	r6, r4
 802a522:	e778      	b.n	802a416 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a524:	2400      	movs	r4, #0
 802a526:	e776      	b.n	802a416 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a528:	463c      	mov	r4, r7
 802a52a:	e774      	b.n	802a416 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802a52c:	2500      	movs	r5, #0
 802a52e:	e78e      	b.n	802a44e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802a530:	2300      	movs	r3, #0
 802a532:	461d      	mov	r5, r3
 802a534:	e79f      	b.n	802a476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a536:	4663      	mov	r3, ip
 802a538:	4665      	mov	r5, ip
 802a53a:	e79c      	b.n	802a476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a53c:	2300      	movs	r3, #0
 802a53e:	e79a      	b.n	802a476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a540:	463b      	mov	r3, r7
 802a542:	e798      	b.n	802a476 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802a544:	20011f3c 	.word	0x20011f3c

0802a548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a54c:	b093      	sub	sp, #76	@ 0x4c
 802a54e:	920c      	str	r2, [sp, #48]	@ 0x30
 802a550:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802a552:	9011      	str	r0, [sp, #68]	@ 0x44
 802a554:	6850      	ldr	r0, [r2, #4]
 802a556:	9107      	str	r1, [sp, #28]
 802a558:	461d      	mov	r5, r3
 802a55a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802a55e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802a562:	fb00 1303 	mla	r3, r0, r3, r1
 802a566:	6812      	ldr	r2, [r2, #0]
 802a568:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a56c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a56e:	689b      	ldr	r3, [r3, #8]
 802a570:	3301      	adds	r3, #1
 802a572:	f023 0301 	bic.w	r3, r3, #1
 802a576:	9306      	str	r3, [sp, #24]
 802a578:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a57a:	681f      	ldr	r7, [r3, #0]
 802a57c:	9b07      	ldr	r3, [sp, #28]
 802a57e:	2b00      	cmp	r3, #0
 802a580:	dc03      	bgt.n	802a58a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802a582:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a584:	2b00      	cmp	r3, #0
 802a586:	f340 8265 	ble.w	802aa54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a58a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a58c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a590:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a594:	1e48      	subs	r0, r1, #1
 802a596:	f102 3cff 	add.w	ip, r2, #4294967295
 802a59a:	2d00      	cmp	r5, #0
 802a59c:	f340 80b7 	ble.w	802a70e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a5a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a5a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a5a8:	d406      	bmi.n	802a5b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a5aa:	4586      	cmp	lr, r0
 802a5ac:	da04      	bge.n	802a5b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a5ae:	2b00      	cmp	r3, #0
 802a5b0:	db02      	blt.n	802a5b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a5b2:	4563      	cmp	r3, ip
 802a5b4:	f2c0 80ac 	blt.w	802a710 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802a5b8:	f11e 0e01 	adds.w	lr, lr, #1
 802a5bc:	f100 809f 	bmi.w	802a6fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a5c0:	4571      	cmp	r1, lr
 802a5c2:	f2c0 809c 	blt.w	802a6fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a5c6:	3301      	adds	r3, #1
 802a5c8:	f100 8099 	bmi.w	802a6fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a5cc:	429a      	cmp	r2, r3
 802a5ce:	f2c0 8096 	blt.w	802a6fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802a5d2:	46c8      	mov	r8, r9
 802a5d4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a5d8:	9509      	str	r5, [sp, #36]	@ 0x24
 802a5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a5dc:	2b00      	cmp	r3, #0
 802a5de:	f340 80b5 	ble.w	802a74c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802a5e2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a5e6:	9308      	str	r3, [sp, #32]
 802a5e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a5ea:	1430      	asrs	r0, r6, #16
 802a5ec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a5f0:	1423      	asrs	r3, r4, #16
 802a5f2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a5f6:	f100 813e 	bmi.w	802a876 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a5fa:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a5fe:	455b      	cmp	r3, fp
 802a600:	f280 8139 	bge.w	802a876 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a604:	2800      	cmp	r0, #0
 802a606:	f2c0 8136 	blt.w	802a876 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a60a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a60e:	4558      	cmp	r0, fp
 802a610:	f280 8131 	bge.w	802a876 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a614:	9a06      	ldr	r2, [sp, #24]
 802a616:	fb00 3302 	mla	r3, r0, r2, r3
 802a61a:	0858      	lsrs	r0, r3, #1
 802a61c:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a620:	07da      	lsls	r2, r3, #31
 802a622:	bf54      	ite	pl
 802a624:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a628:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a62c:	9a08      	ldr	r2, [sp, #32]
 802a62e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a632:	fa5f fc8c 	uxtb.w	ip, ip
 802a636:	2a00      	cmp	r2, #0
 802a638:	f000 80cb 	beq.w	802a7d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802a63c:	1c58      	adds	r0, r3, #1
 802a63e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a642:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a646:	07c0      	lsls	r0, r0, #31
 802a648:	bf54      	ite	pl
 802a64a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a64e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a652:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a656:	fa5f fe8e 	uxtb.w	lr, lr
 802a65a:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a65e:	b1b9      	cbz	r1, 802a690 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a660:	4453      	add	r3, sl
 802a662:	0858      	lsrs	r0, r3, #1
 802a664:	5c38      	ldrb	r0, [r7, r0]
 802a666:	07da      	lsls	r2, r3, #31
 802a668:	bf54      	ite	pl
 802a66a:	f000 000f 	andpl.w	r0, r0, #15
 802a66e:	1100      	asrmi	r0, r0, #4
 802a670:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a674:	b2c0      	uxtb	r0, r0
 802a676:	900a      	str	r0, [sp, #40]	@ 0x28
 802a678:	1c58      	adds	r0, r3, #1
 802a67a:	0843      	lsrs	r3, r0, #1
 802a67c:	5cfb      	ldrb	r3, [r7, r3]
 802a67e:	07c2      	lsls	r2, r0, #31
 802a680:	bf54      	ite	pl
 802a682:	f003 030f 	andpl.w	r3, r3, #15
 802a686:	111b      	asrmi	r3, r3, #4
 802a688:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a68c:	b2db      	uxtb	r3, r3
 802a68e:	930e      	str	r3, [sp, #56]	@ 0x38
 802a690:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a694:	b289      	uxth	r1, r1
 802a696:	fb02 f301 	mul.w	r3, r2, r1
 802a69a:	0112      	lsls	r2, r2, #4
 802a69c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a6a0:	b289      	uxth	r1, r1
 802a6a2:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a6a6:	1a40      	subs	r0, r0, r1
 802a6a8:	fa1f fe80 	uxth.w	lr, r0
 802a6ac:	1ad2      	subs	r2, r2, r3
 802a6ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a6b0:	b292      	uxth	r2, r2
 802a6b2:	4342      	muls	r2, r0
 802a6b4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a6b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a6ba:	fb01 c102 	mla	r1, r1, r2, ip
 802a6be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a6c0:	fb03 1302 	mla	r3, r3, r2, r1
 802a6c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a6c8:	2bff      	cmp	r3, #255	@ 0xff
 802a6ca:	f040 8093 	bne.w	802a7f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802a6ce:	4bbe      	ldr	r3, [pc, #760]	@ (802a9c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a6d0:	681a      	ldr	r2, [r3, #0]
 802a6d2:	4bbe      	ldr	r3, [pc, #760]	@ (802a9cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a6d4:	0951      	lsrs	r1, r2, #5
 802a6d6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a6da:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a6de:	430b      	orrs	r3, r1
 802a6e0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a6e4:	4313      	orrs	r3, r2
 802a6e6:	f8a8 3000 	strh.w	r3, [r8]
 802a6ea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a6ec:	f108 0802 	add.w	r8, r8, #2
 802a6f0:	441c      	add	r4, r3
 802a6f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a6f4:	441e      	add	r6, r3
 802a6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a6f8:	3b01      	subs	r3, #1
 802a6fa:	9309      	str	r3, [sp, #36]	@ 0x24
 802a6fc:	e76d      	b.n	802a5da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a6fe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a700:	3d01      	subs	r5, #1
 802a702:	441c      	add	r4, r3
 802a704:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a706:	f109 0902 	add.w	r9, r9, #2
 802a70a:	441e      	add	r6, r3
 802a70c:	e745      	b.n	802a59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802a70e:	d021      	beq.n	802a754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802a710:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802a712:	1e6b      	subs	r3, r5, #1
 802a714:	fb00 4003 	mla	r0, r0, r3, r4
 802a718:	1400      	asrs	r0, r0, #16
 802a71a:	f53f af5a 	bmi.w	802a5d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a71e:	3901      	subs	r1, #1
 802a720:	4288      	cmp	r0, r1
 802a722:	f6bf af56 	bge.w	802a5d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a726:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a728:	fb01 6303 	mla	r3, r1, r3, r6
 802a72c:	141b      	asrs	r3, r3, #16
 802a72e:	f53f af50 	bmi.w	802a5d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a732:	3a01      	subs	r2, #1
 802a734:	4293      	cmp	r3, r2
 802a736:	f6bf af4c 	bge.w	802a5d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802a73a:	46a8      	mov	r8, r5
 802a73c:	46ce      	mov	lr, r9
 802a73e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a742:	9308      	str	r3, [sp, #32]
 802a744:	f1b8 0f00 	cmp.w	r8, #0
 802a748:	f300 80b5 	bgt.w	802a8b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802a74c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a750:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a754:	9b07      	ldr	r3, [sp, #28]
 802a756:	2b00      	cmp	r3, #0
 802a758:	f340 817c 	ble.w	802aa54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802a75c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a760:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a764:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a768:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a76c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a770:	eef0 6a62 	vmov.f32	s13, s5
 802a774:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a778:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a77c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a780:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a784:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a788:	ee16 4a90 	vmov	r4, s13
 802a78c:	eef0 6a43 	vmov.f32	s13, s6
 802a790:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a794:	ee12 2a90 	vmov	r2, s5
 802a798:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a79c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a79e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a7a2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a7a6:	ee13 2a10 	vmov	r2, s6
 802a7aa:	931f      	str	r3, [sp, #124]	@ 0x7c
 802a7ac:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a7ae:	ee16 6a90 	vmov	r6, s13
 802a7b2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a7b6:	9320      	str	r3, [sp, #128]	@ 0x80
 802a7b8:	9b07      	ldr	r3, [sp, #28]
 802a7ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a7bc:	3b01      	subs	r3, #1
 802a7be:	9307      	str	r3, [sp, #28]
 802a7c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a7c2:	bf0c      	ite	eq
 802a7c4:	4615      	moveq	r5, r2
 802a7c6:	461d      	movne	r5, r3
 802a7c8:	eeb0 3a67 	vmov.f32	s6, s15
 802a7cc:	eef0 2a47 	vmov.f32	s5, s14
 802a7d0:	e6d4      	b.n	802a57c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802a7d2:	2900      	cmp	r1, #0
 802a7d4:	f43f af5c 	beq.w	802a690 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a7d8:	eb0a 0003 	add.w	r0, sl, r3
 802a7dc:	0843      	lsrs	r3, r0, #1
 802a7de:	5cfb      	ldrb	r3, [r7, r3]
 802a7e0:	07c0      	lsls	r0, r0, #31
 802a7e2:	bf54      	ite	pl
 802a7e4:	f003 030f 	andpl.w	r3, r3, #15
 802a7e8:	111b      	asrmi	r3, r3, #4
 802a7ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a7ee:	b2db      	uxtb	r3, r3
 802a7f0:	930a      	str	r3, [sp, #40]	@ 0x28
 802a7f2:	e74d      	b.n	802a690 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802a7f4:	2b00      	cmp	r3, #0
 802a7f6:	f43f af78 	beq.w	802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a7fa:	fa1f fe83 	uxth.w	lr, r3
 802a7fe:	43db      	mvns	r3, r3
 802a800:	4a71      	ldr	r2, [pc, #452]	@ (802a9c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a802:	f8b8 c000 	ldrh.w	ip, [r8]
 802a806:	6810      	ldr	r0, [r2, #0]
 802a808:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a80c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a810:	fb12 f20e 	smulbb	r2, r2, lr
 802a814:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a818:	b2c0      	uxtb	r0, r0
 802a81a:	fb1b fb0e 	smulbb	fp, fp, lr
 802a81e:	fb10 fe0e 	smulbb	lr, r0, lr
 802a822:	b2db      	uxtb	r3, r3
 802a824:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a828:	fb01 2103 	mla	r1, r1, r3, r2
 802a82c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a830:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a834:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802a838:	fa5f fc8c 	uxtb.w	ip, ip
 802a83c:	fb02 b203 	mla	r2, r2, r3, fp
 802a840:	fb0c e303 	mla	r3, ip, r3, lr
 802a844:	b289      	uxth	r1, r1
 802a846:	1c48      	adds	r0, r1, #1
 802a848:	b292      	uxth	r2, r2
 802a84a:	b29b      	uxth	r3, r3
 802a84c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a850:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802a854:	f102 0b01 	add.w	fp, r2, #1
 802a858:	1c59      	adds	r1, r3, #1
 802a85a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a85e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a862:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a866:	0952      	lsrs	r2, r2, #5
 802a868:	4301      	orrs	r1, r0
 802a86a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a86e:	4311      	orrs	r1, r2
 802a870:	f8a8 1000 	strh.w	r1, [r8]
 802a874:	e739      	b.n	802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a876:	f113 0b01 	adds.w	fp, r3, #1
 802a87a:	f53f af36 	bmi.w	802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a87e:	45dc      	cmp	ip, fp
 802a880:	f6ff af33 	blt.w	802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a884:	f110 0b01 	adds.w	fp, r0, #1
 802a888:	f53f af2f 	bmi.w	802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a88c:	45de      	cmp	lr, fp
 802a88e:	f6ff af2c 	blt.w	802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a892:	9a08      	ldr	r2, [sp, #32]
 802a894:	9302      	str	r3, [sp, #8]
 802a896:	fa0f f38e 	sxth.w	r3, lr
 802a89a:	9301      	str	r3, [sp, #4]
 802a89c:	fa0f f38c 	sxth.w	r3, ip
 802a8a0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a8a4:	9105      	str	r1, [sp, #20]
 802a8a6:	9300      	str	r3, [sp, #0]
 802a8a8:	463a      	mov	r2, r7
 802a8aa:	4653      	mov	r3, sl
 802a8ac:	4641      	mov	r1, r8
 802a8ae:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a8b0:	f7ff fd74 	bl	802a39c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a8b4:	e719      	b.n	802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802a8b6:	9906      	ldr	r1, [sp, #24]
 802a8b8:	1422      	asrs	r2, r4, #16
 802a8ba:	1433      	asrs	r3, r6, #16
 802a8bc:	fb01 2303 	mla	r3, r1, r3, r2
 802a8c0:	085a      	lsrs	r2, r3, #1
 802a8c2:	5cba      	ldrb	r2, [r7, r2]
 802a8c4:	07d9      	lsls	r1, r3, #31
 802a8c6:	bf54      	ite	pl
 802a8c8:	f002 020f 	andpl.w	r2, r2, #15
 802a8cc:	1112      	asrmi	r2, r2, #4
 802a8ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a8d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a8d6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a8da:	b2d2      	uxtb	r2, r2
 802a8dc:	2800      	cmp	r0, #0
 802a8de:	d062      	beq.n	802a9a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802a8e0:	f103 0a01 	add.w	sl, r3, #1
 802a8e4:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a8e8:	5c79      	ldrb	r1, [r7, r1]
 802a8ea:	f01a 0f01 	tst.w	sl, #1
 802a8ee:	bf0c      	ite	eq
 802a8f0:	f001 010f 	andeq.w	r1, r1, #15
 802a8f4:	1109      	asrne	r1, r1, #4
 802a8f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a8fa:	b2c9      	uxtb	r1, r1
 802a8fc:	910f      	str	r1, [sp, #60]	@ 0x3c
 802a8fe:	f1bc 0f00 	cmp.w	ip, #0
 802a902:	d019      	beq.n	802a938 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a904:	9908      	ldr	r1, [sp, #32]
 802a906:	440b      	add	r3, r1
 802a908:	0859      	lsrs	r1, r3, #1
 802a90a:	5c79      	ldrb	r1, [r7, r1]
 802a90c:	f013 0f01 	tst.w	r3, #1
 802a910:	bf0c      	ite	eq
 802a912:	f001 010f 	andeq.w	r1, r1, #15
 802a916:	1109      	asrne	r1, r1, #4
 802a918:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a91c:	b2c9      	uxtb	r1, r1
 802a91e:	3301      	adds	r3, #1
 802a920:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a922:	0859      	lsrs	r1, r3, #1
 802a924:	5c79      	ldrb	r1, [r7, r1]
 802a926:	07db      	lsls	r3, r3, #31
 802a928:	bf54      	ite	pl
 802a92a:	f001 010f 	andpl.w	r1, r1, #15
 802a92e:	1109      	asrmi	r1, r1, #4
 802a930:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a934:	b2c9      	uxtb	r1, r1
 802a936:	9110      	str	r1, [sp, #64]	@ 0x40
 802a938:	b280      	uxth	r0, r0
 802a93a:	fa1f fc8c 	uxth.w	ip, ip
 802a93e:	fb00 f30c 	mul.w	r3, r0, ip
 802a942:	0100      	lsls	r0, r0, #4
 802a944:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a948:	fa1f fc8c 	uxth.w	ip, ip
 802a94c:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802a950:	eba1 010c 	sub.w	r1, r1, ip
 802a954:	fa1f fa81 	uxth.w	sl, r1
 802a958:	1ac0      	subs	r0, r0, r3
 802a95a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a95c:	b280      	uxth	r0, r0
 802a95e:	4348      	muls	r0, r1
 802a960:	fb02 020a 	mla	r2, r2, sl, r0
 802a964:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a966:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a96a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802a96c:	fb03 c302 	mla	r3, r3, r2, ip
 802a970:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a974:	2bff      	cmp	r3, #255	@ 0xff
 802a976:	d12b      	bne.n	802a9d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802a978:	4b13      	ldr	r3, [pc, #76]	@ (802a9c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802a97a:	681a      	ldr	r2, [r3, #0]
 802a97c:	4b13      	ldr	r3, [pc, #76]	@ (802a9cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802a97e:	0951      	lsrs	r1, r2, #5
 802a980:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a984:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a988:	430b      	orrs	r3, r1
 802a98a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a98e:	4313      	orrs	r3, r2
 802a990:	f8ae 3000 	strh.w	r3, [lr]
 802a994:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802a996:	f10e 0e02 	add.w	lr, lr, #2
 802a99a:	441c      	add	r4, r3
 802a99c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a99e:	f108 38ff 	add.w	r8, r8, #4294967295
 802a9a2:	441e      	add	r6, r3
 802a9a4:	e6ce      	b.n	802a744 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a9a6:	f1bc 0f00 	cmp.w	ip, #0
 802a9aa:	d0c5      	beq.n	802a938 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a9ac:	9908      	ldr	r1, [sp, #32]
 802a9ae:	440b      	add	r3, r1
 802a9b0:	0859      	lsrs	r1, r3, #1
 802a9b2:	5c79      	ldrb	r1, [r7, r1]
 802a9b4:	07db      	lsls	r3, r3, #31
 802a9b6:	bf54      	ite	pl
 802a9b8:	f001 010f 	andpl.w	r1, r1, #15
 802a9bc:	1109      	asrmi	r1, r1, #4
 802a9be:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a9c2:	b2c9      	uxtb	r1, r1
 802a9c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 802a9c6:	e7b7      	b.n	802a938 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802a9c8:	20011f3c 	.word	0x20011f3c
 802a9cc:	fffff800 	.word	0xfffff800
 802a9d0:	2b00      	cmp	r3, #0
 802a9d2:	d0df      	beq.n	802a994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802a9d4:	fa1f fa83 	uxth.w	sl, r3
 802a9d8:	43db      	mvns	r3, r3
 802a9da:	4a20      	ldr	r2, [pc, #128]	@ (802aa5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802a9dc:	f8be c000 	ldrh.w	ip, [lr]
 802a9e0:	6810      	ldr	r0, [r2, #0]
 802a9e2:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a9e6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a9ea:	fb12 f20a 	smulbb	r2, r2, sl
 802a9ee:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a9f2:	b2c0      	uxtb	r0, r0
 802a9f4:	fb10 f00a 	smulbb	r0, r0, sl
 802a9f8:	b2db      	uxtb	r3, r3
 802a9fa:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802a9fe:	fb01 2103 	mla	r1, r1, r3, r2
 802aa02:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802aa06:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802aa0a:	fb1b fb0a 	smulbb	fp, fp, sl
 802aa0e:	fa5f fc8c 	uxtb.w	ip, ip
 802aa12:	fb0c 0003 	mla	r0, ip, r3, r0
 802aa16:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802aa1a:	fb02 b203 	mla	r2, r2, r3, fp
 802aa1e:	b289      	uxth	r1, r1
 802aa20:	b280      	uxth	r0, r0
 802aa22:	1c4b      	adds	r3, r1, #1
 802aa24:	f100 0b01 	add.w	fp, r0, #1
 802aa28:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802aa2c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802aa30:	b292      	uxth	r2, r2
 802aa32:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802aa36:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802aa3a:	ea4b 0101 	orr.w	r1, fp, r1
 802aa3e:	f102 0b01 	add.w	fp, r2, #1
 802aa42:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802aa46:	0952      	lsrs	r2, r2, #5
 802aa48:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802aa4c:	4311      	orrs	r1, r2
 802aa4e:	f8ae 1000 	strh.w	r1, [lr]
 802aa52:	e79f      	b.n	802a994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802aa54:	b013      	add	sp, #76	@ 0x4c
 802aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa5a:	bf00      	nop
 802aa5c:	20011f3c 	.word	0x20011f3c

0802aa60 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802aa60:	b570      	push	{r4, r5, r6, lr}
 802aa62:	1208      	asrs	r0, r1, #8
 802aa64:	b29e      	uxth	r6, r3
 802aa66:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802aa6a:	1213      	asrs	r3, r2, #8
 802aa6c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802aa70:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802aa74:	fb13 f305 	smulbb	r3, r3, r5
 802aa78:	fb10 f006 	smulbb	r0, r0, r6
 802aa7c:	10cc      	asrs	r4, r1, #3
 802aa7e:	4418      	add	r0, r3
 802aa80:	10d3      	asrs	r3, r2, #3
 802aa82:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802aa86:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802aa8a:	fb13 f305 	smulbb	r3, r3, r5
 802aa8e:	fb14 f406 	smulbb	r4, r4, r6
 802aa92:	00c9      	lsls	r1, r1, #3
 802aa94:	00d2      	lsls	r2, r2, #3
 802aa96:	441c      	add	r4, r3
 802aa98:	b2d2      	uxtb	r2, r2
 802aa9a:	b2cb      	uxtb	r3, r1
 802aa9c:	fb12 f205 	smulbb	r2, r2, r5
 802aaa0:	fb13 f306 	smulbb	r3, r3, r6
 802aaa4:	b280      	uxth	r0, r0
 802aaa6:	4413      	add	r3, r2
 802aaa8:	1c42      	adds	r2, r0, #1
 802aaaa:	b29b      	uxth	r3, r3
 802aaac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aab0:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802aab4:	1c58      	adds	r0, r3, #1
 802aab6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802aaba:	b2a4      	uxth	r4, r4
 802aabc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802aac0:	4310      	orrs	r0, r2
 802aac2:	1c62      	adds	r2, r4, #1
 802aac4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802aac8:	0964      	lsrs	r4, r4, #5
 802aaca:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802aace:	4320      	orrs	r0, r4
 802aad0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802aad4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aad8:	b08f      	sub	sp, #60	@ 0x3c
 802aada:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802aade:	461c      	mov	r4, r3
 802aae0:	9004      	str	r0, [sp, #16]
 802aae2:	460d      	mov	r5, r1
 802aae4:	4616      	mov	r6, r2
 802aae6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802aae8:	2f00      	cmp	r7, #0
 802aaea:	f000 80f5 	beq.w	802acd8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802aaee:	f04f 0802 	mov.w	r8, #2
 802aaf2:	6820      	ldr	r0, [r4, #0]
 802aaf4:	6861      	ldr	r1, [r4, #4]
 802aaf6:	aa0a      	add	r2, sp, #40	@ 0x28
 802aaf8:	c203      	stmia	r2!, {r0, r1}
 802aafa:	6818      	ldr	r0, [r3, #0]
 802aafc:	6859      	ldr	r1, [r3, #4]
 802aafe:	aa0c      	add	r2, sp, #48	@ 0x30
 802ab00:	c203      	stmia	r2!, {r0, r1}
 802ab02:	a80a      	add	r0, sp, #40	@ 0x28
 802ab04:	f7ee ff74 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ab08:	4621      	mov	r1, r4
 802ab0a:	a80c      	add	r0, sp, #48	@ 0x30
 802ab0c:	f7ee ff98 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ab10:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802ab14:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802ab18:	f002 0301 	and.w	r3, r2, #1
 802ab1c:	9306      	str	r3, [sp, #24]
 802ab1e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ab22:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802ab26:	f003 0101 	and.w	r1, r3, #1
 802ab2a:	9105      	str	r1, [sp, #20]
 802ab2c:	9805      	ldr	r0, [sp, #20]
 802ab2e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802ab32:	4403      	add	r3, r0
 802ab34:	fb01 2303 	mla	r3, r1, r3, r2
 802ab38:	fb93 f3f8 	sdiv	r3, r3, r8
 802ab3c:	441d      	add	r5, r3
 802ab3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802ab42:	3604      	adds	r6, #4
 802ab44:	441a      	add	r2, r3
 802ab46:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802ab4a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802ab4e:	4419      	add	r1, r3
 802ab50:	4b63      	ldr	r3, [pc, #396]	@ (802ace0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802ab52:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802ab56:	6818      	ldr	r0, [r3, #0]
 802ab58:	6803      	ldr	r3, [r0, #0]
 802ab5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ab5c:	4798      	blx	r3
 802ab5e:	4a61      	ldr	r2, [pc, #388]	@ (802ace4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802ab60:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802ab64:	8813      	ldrh	r3, [r2, #0]
 802ab66:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802ab6a:	2fff      	cmp	r7, #255	@ 0xff
 802ab6c:	fb03 a404 	mla	r4, r3, r4, sl
 802ab70:	4611      	mov	r1, r2
 802ab72:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ab76:	fb03 fb0b 	mul.w	fp, r3, fp
 802ab7a:	d06b      	beq.n	802ac54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802ab7c:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802ab80:	9303      	str	r3, [sp, #12]
 802ab82:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802ab86:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802ab8a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802ab8e:	9b07      	ldr	r3, [sp, #28]
 802ab90:	42a3      	cmp	r3, r4
 802ab92:	f240 809c 	bls.w	802acce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802ab96:	9b06      	ldr	r3, [sp, #24]
 802ab98:	2b00      	cmp	r3, #0
 802ab9a:	d039      	beq.n	802ac10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802ab9c:	782b      	ldrb	r3, [r5, #0]
 802ab9e:	8822      	ldrh	r2, [r4, #0]
 802aba0:	f003 030f 	and.w	r3, r3, #15
 802aba4:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802aba8:	9b03      	ldr	r3, [sp, #12]
 802abaa:	9804      	ldr	r0, [sp, #16]
 802abac:	9300      	str	r3, [sp, #0]
 802abae:	463b      	mov	r3, r7
 802abb0:	f7ff ff56 	bl	802aa60 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802abb4:	f105 0801 	add.w	r8, r5, #1
 802abb8:	f824 0b02 	strh.w	r0, [r4], #2
 802abbc:	f109 3bff 	add.w	fp, r9, #4294967295
 802abc0:	f1bb 0f01 	cmp.w	fp, #1
 802abc4:	46a2      	mov	sl, r4
 802abc6:	f104 0404 	add.w	r4, r4, #4
 802abca:	dd24      	ble.n	802ac16 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802abcc:	f898 3000 	ldrb.w	r3, [r8]
 802abd0:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802abd4:	091b      	lsrs	r3, r3, #4
 802abd6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802abda:	9b03      	ldr	r3, [sp, #12]
 802abdc:	9804      	ldr	r0, [sp, #16]
 802abde:	9300      	str	r3, [sp, #0]
 802abe0:	463b      	mov	r3, r7
 802abe2:	f7ff ff3d 	bl	802aa60 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802abe6:	f824 0c04 	strh.w	r0, [r4, #-4]
 802abea:	f818 3b01 	ldrb.w	r3, [r8], #1
 802abee:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802abf2:	f003 030f 	and.w	r3, r3, #15
 802abf6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802abfa:	9b03      	ldr	r3, [sp, #12]
 802abfc:	9804      	ldr	r0, [sp, #16]
 802abfe:	9300      	str	r3, [sp, #0]
 802ac00:	463b      	mov	r3, r7
 802ac02:	f7ff ff2d 	bl	802aa60 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ac06:	f1ab 0b02 	sub.w	fp, fp, #2
 802ac0a:	f824 0c02 	strh.w	r0, [r4, #-2]
 802ac0e:	e7d7      	b.n	802abc0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802ac10:	46a8      	mov	r8, r5
 802ac12:	46cb      	mov	fp, r9
 802ac14:	e7d4      	b.n	802abc0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802ac16:	d10e      	bne.n	802ac36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802ac18:	f898 3000 	ldrb.w	r3, [r8]
 802ac1c:	f8ba 2000 	ldrh.w	r2, [sl]
 802ac20:	091b      	lsrs	r3, r3, #4
 802ac22:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ac26:	9b03      	ldr	r3, [sp, #12]
 802ac28:	9804      	ldr	r0, [sp, #16]
 802ac2a:	9300      	str	r3, [sp, #0]
 802ac2c:	463b      	mov	r3, r7
 802ac2e:	f7ff ff17 	bl	802aa60 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ac32:	f82a 0b02 	strh.w	r0, [sl], #2
 802ac36:	9b08      	ldr	r3, [sp, #32]
 802ac38:	9a05      	ldr	r2, [sp, #20]
 802ac3a:	881c      	ldrh	r4, [r3, #0]
 802ac3c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802ac40:	eba4 0409 	sub.w	r4, r4, r9
 802ac44:	4413      	add	r3, r2
 802ac46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ac48:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802ac4c:	fb93 f3f2 	sdiv	r3, r3, r2
 802ac50:	441d      	add	r5, r3
 802ac52:	e79c      	b.n	802ab8e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802ac54:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802ac58:	45a3      	cmp	fp, r4
 802ac5a:	d938      	bls.n	802acce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802ac5c:	9b06      	ldr	r3, [sp, #24]
 802ac5e:	b1f3      	cbz	r3, 802ac9e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 802ac60:	782b      	ldrb	r3, [r5, #0]
 802ac62:	1c6a      	adds	r2, r5, #1
 802ac64:	f003 030f 	and.w	r3, r3, #15
 802ac68:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802ac6c:	f109 30ff 	add.w	r0, r9, #4294967295
 802ac70:	8023      	strh	r3, [r4, #0]
 802ac72:	3402      	adds	r4, #2
 802ac74:	2801      	cmp	r0, #1
 802ac76:	4623      	mov	r3, r4
 802ac78:	f104 0404 	add.w	r4, r4, #4
 802ac7c:	dd12      	ble.n	802aca4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 802ac7e:	7813      	ldrb	r3, [r2, #0]
 802ac80:	3802      	subs	r0, #2
 802ac82:	091b      	lsrs	r3, r3, #4
 802ac84:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802ac88:	f824 3c04 	strh.w	r3, [r4, #-4]
 802ac8c:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ac90:	f003 030f 	and.w	r3, r3, #15
 802ac94:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802ac98:	f824 3c02 	strh.w	r3, [r4, #-2]
 802ac9c:	e7ea      	b.n	802ac74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802ac9e:	462a      	mov	r2, r5
 802aca0:	4648      	mov	r0, r9
 802aca2:	e7e7      	b.n	802ac74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802aca4:	d106      	bne.n	802acb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802aca6:	7812      	ldrb	r2, [r2, #0]
 802aca8:	3302      	adds	r3, #2
 802acaa:	0912      	lsrs	r2, r2, #4
 802acac:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802acb0:	f823 2c02 	strh.w	r2, [r3, #-2]
 802acb4:	880c      	ldrh	r4, [r1, #0]
 802acb6:	9a05      	ldr	r2, [sp, #20]
 802acb8:	eba4 0409 	sub.w	r4, r4, r9
 802acbc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802acc0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802acc4:	4413      	add	r3, r2
 802acc6:	fb93 f3f8 	sdiv	r3, r3, r8
 802acca:	441d      	add	r5, r3
 802accc:	e7c4      	b.n	802ac58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802acce:	4b04      	ldr	r3, [pc, #16]	@ (802ace0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802acd0:	6818      	ldr	r0, [r3, #0]
 802acd2:	6803      	ldr	r3, [r0, #0]
 802acd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802acd6:	4798      	blx	r3
 802acd8:	b00f      	add	sp, #60	@ 0x3c
 802acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acde:	bf00      	nop
 802ace0:	20011f2c 	.word	0x20011f2c
 802ace4:	20011f26 	.word	0x20011f26

0802ace8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802ace8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802acea:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802acee:	0a0f      	lsrs	r7, r1, #8
 802acf0:	2dff      	cmp	r5, #255	@ 0xff
 802acf2:	d10c      	bne.n	802ad0e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802acf4:	2bff      	cmp	r3, #255	@ 0xff
 802acf6:	d10a      	bne.n	802ad0e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802acf8:	4b25      	ldr	r3, [pc, #148]	@ (802ad90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802acfa:	0948      	lsrs	r0, r1, #5
 802acfc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802ad00:	403b      	ands	r3, r7
 802ad02:	4318      	orrs	r0, r3
 802ad04:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802ad08:	4308      	orrs	r0, r1
 802ad0a:	b280      	uxth	r0, r0
 802ad0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ad0e:	fb15 f503 	smulbb	r5, r5, r3
 802ad12:	b2ab      	uxth	r3, r5
 802ad14:	1c5d      	adds	r5, r3, #1
 802ad16:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802ad1a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802ad1e:	fa1f fc85 	uxth.w	ip, r5
 802ad22:	43ed      	mvns	r5, r5
 802ad24:	1214      	asrs	r4, r2, #8
 802ad26:	10d6      	asrs	r6, r2, #3
 802ad28:	00d0      	lsls	r0, r2, #3
 802ad2a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802ad2e:	fb12 f20c 	smulbb	r2, r2, ip
 802ad32:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802ad36:	b2eb      	uxtb	r3, r5
 802ad38:	b2c0      	uxtb	r0, r0
 802ad3a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802ad3e:	fb04 2403 	mla	r4, r4, r3, r2
 802ad42:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802ad46:	b2c8      	uxtb	r0, r1
 802ad48:	b2fd      	uxtb	r5, r7
 802ad4a:	fb10 f00c 	smulbb	r0, r0, ip
 802ad4e:	fb15 f50c 	smulbb	r5, r5, ip
 802ad52:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802ad56:	fb02 0003 	mla	r0, r2, r3, r0
 802ad5a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802ad5e:	fb06 5503 	mla	r5, r6, r3, r5
 802ad62:	b2a4      	uxth	r4, r4
 802ad64:	b283      	uxth	r3, r0
 802ad66:	1c60      	adds	r0, r4, #1
 802ad68:	b2ad      	uxth	r5, r5
 802ad6a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802ad6e:	1c58      	adds	r0, r3, #1
 802ad70:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802ad74:	1c6b      	adds	r3, r5, #1
 802ad76:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802ad7a:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802ad7e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ad82:	096d      	lsrs	r5, r5, #5
 802ad84:	4320      	orrs	r0, r4
 802ad86:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802ad8a:	4328      	orrs	r0, r5
 802ad8c:	e7be      	b.n	802ad0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802ad8e:	bf00      	nop
 802ad90:	00fff800 	.word	0x00fff800

0802ad94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad98:	461c      	mov	r4, r3
 802ad9a:	f04f 0a02 	mov.w	sl, #2
 802ad9e:	b08d      	sub	sp, #52	@ 0x34
 802ada0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ada2:	460d      	mov	r5, r1
 802ada4:	4680      	mov	r8, r0
 802ada6:	6861      	ldr	r1, [r4, #4]
 802ada8:	6820      	ldr	r0, [r4, #0]
 802adaa:	4616      	mov	r6, r2
 802adac:	aa08      	add	r2, sp, #32
 802adae:	c203      	stmia	r2!, {r0, r1}
 802adb0:	6818      	ldr	r0, [r3, #0]
 802adb2:	6859      	ldr	r1, [r3, #4]
 802adb4:	aa0a      	add	r2, sp, #40	@ 0x28
 802adb6:	c203      	stmia	r2!, {r0, r1}
 802adb8:	a808      	add	r0, sp, #32
 802adba:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802adbe:	f7ee fe17 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802adc2:	4621      	mov	r1, r4
 802adc4:	a80a      	add	r0, sp, #40	@ 0x28
 802adc6:	f7ee fe3b 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802adca:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802adce:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802add2:	f002 0301 	and.w	r3, r2, #1
 802add6:	9303      	str	r3, [sp, #12]
 802add8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802addc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802ade0:	f003 0101 	and.w	r1, r3, #1
 802ade4:	9102      	str	r1, [sp, #8]
 802ade6:	9802      	ldr	r0, [sp, #8]
 802ade8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802adec:	4403      	add	r3, r0
 802adee:	fb01 2303 	mla	r3, r1, r3, r2
 802adf2:	fb93 f3fa 	sdiv	r3, r3, sl
 802adf6:	441d      	add	r5, r3
 802adf8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802adfc:	3604      	adds	r6, #4
 802adfe:	441a      	add	r2, r3
 802ae00:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802ae04:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802ae08:	4a3e      	ldr	r2, [pc, #248]	@ (802af04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802ae0a:	4419      	add	r1, r3
 802ae0c:	6810      	ldr	r0, [r2, #0]
 802ae0e:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 802ae12:	6803      	ldr	r3, [r0, #0]
 802ae14:	9205      	str	r2, [sp, #20]
 802ae16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ae18:	4798      	blx	r3
 802ae1a:	4b3b      	ldr	r3, [pc, #236]	@ (802af08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802ae1c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802ae20:	8819      	ldrh	r1, [r3, #0]
 802ae22:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802ae26:	434f      	muls	r7, r1
 802ae28:	fb01 c404 	mla	r4, r1, r4, ip
 802ae2c:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802ae30:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ae34:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802ae38:	9204      	str	r2, [sp, #16]
 802ae3a:	9b04      	ldr	r3, [sp, #16]
 802ae3c:	429c      	cmp	r4, r3
 802ae3e:	d258      	bcs.n	802aef2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802ae40:	9b03      	ldr	r3, [sp, #12]
 802ae42:	2b00      	cmp	r3, #0
 802ae44:	d034      	beq.n	802aeb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802ae46:	782b      	ldrb	r3, [r5, #0]
 802ae48:	1c6f      	adds	r7, r5, #1
 802ae4a:	f003 030f 	and.w	r3, r3, #15
 802ae4e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ae52:	0e0b      	lsrs	r3, r1, #24
 802ae54:	d006      	beq.n	802ae64 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802ae56:	8822      	ldrh	r2, [r4, #0]
 802ae58:	4640      	mov	r0, r8
 802ae5a:	9300      	str	r3, [sp, #0]
 802ae5c:	464b      	mov	r3, r9
 802ae5e:	f7ff ff43 	bl	802ace8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ae62:	8020      	strh	r0, [r4, #0]
 802ae64:	3402      	adds	r4, #2
 802ae66:	f10b 3aff 	add.w	sl, fp, #4294967295
 802ae6a:	f1ba 0f01 	cmp.w	sl, #1
 802ae6e:	dd22      	ble.n	802aeb6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802ae70:	783b      	ldrb	r3, [r7, #0]
 802ae72:	091b      	lsrs	r3, r3, #4
 802ae74:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ae78:	0e0b      	lsrs	r3, r1, #24
 802ae7a:	d006      	beq.n	802ae8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802ae7c:	8822      	ldrh	r2, [r4, #0]
 802ae7e:	4640      	mov	r0, r8
 802ae80:	9300      	str	r3, [sp, #0]
 802ae82:	464b      	mov	r3, r9
 802ae84:	f7ff ff30 	bl	802ace8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ae88:	8020      	strh	r0, [r4, #0]
 802ae8a:	f817 3b01 	ldrb.w	r3, [r7], #1
 802ae8e:	f003 030f 	and.w	r3, r3, #15
 802ae92:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ae96:	0e0b      	lsrs	r3, r1, #24
 802ae98:	d006      	beq.n	802aea8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802ae9a:	8862      	ldrh	r2, [r4, #2]
 802ae9c:	4640      	mov	r0, r8
 802ae9e:	9300      	str	r3, [sp, #0]
 802aea0:	464b      	mov	r3, r9
 802aea2:	f7ff ff21 	bl	802ace8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802aea6:	8060      	strh	r0, [r4, #2]
 802aea8:	3404      	adds	r4, #4
 802aeaa:	f1aa 0a02 	sub.w	sl, sl, #2
 802aeae:	e7dc      	b.n	802ae6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802aeb0:	462f      	mov	r7, r5
 802aeb2:	46da      	mov	sl, fp
 802aeb4:	e7d9      	b.n	802ae6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802aeb6:	d10d      	bne.n	802aed4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802aeb8:	783b      	ldrb	r3, [r7, #0]
 802aeba:	091b      	lsrs	r3, r3, #4
 802aebc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802aec0:	0e0b      	lsrs	r3, r1, #24
 802aec2:	d006      	beq.n	802aed2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802aec4:	8822      	ldrh	r2, [r4, #0]
 802aec6:	4640      	mov	r0, r8
 802aec8:	9300      	str	r3, [sp, #0]
 802aeca:	464b      	mov	r3, r9
 802aecc:	f7ff ff0c 	bl	802ace8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802aed0:	8020      	strh	r0, [r4, #0]
 802aed2:	3402      	adds	r4, #2
 802aed4:	9b06      	ldr	r3, [sp, #24]
 802aed6:	9a02      	ldr	r2, [sp, #8]
 802aed8:	881b      	ldrh	r3, [r3, #0]
 802aeda:	eba3 030b 	sub.w	r3, r3, fp
 802aede:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802aee2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802aee6:	4413      	add	r3, r2
 802aee8:	9a07      	ldr	r2, [sp, #28]
 802aeea:	fb93 f3f2 	sdiv	r3, r3, r2
 802aeee:	441d      	add	r5, r3
 802aef0:	e7a3      	b.n	802ae3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802aef2:	9b05      	ldr	r3, [sp, #20]
 802aef4:	6818      	ldr	r0, [r3, #0]
 802aef6:	6803      	ldr	r3, [r0, #0]
 802aef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802aefa:	4798      	blx	r3
 802aefc:	b00d      	add	sp, #52	@ 0x34
 802aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af02:	bf00      	nop
 802af04:	20011f2c 	.word	0x20011f2c
 802af08:	20011f26 	.word	0x20011f26

0802af0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802af0c:	b570      	push	{r4, r5, r6, lr}
 802af0e:	788d      	ldrb	r5, [r1, #2]
 802af10:	1214      	asrs	r4, r2, #8
 802af12:	fb15 f503 	smulbb	r5, r5, r3
 802af16:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802af1a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802af1e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802af22:	fb04 5506 	mla	r5, r4, r6, r5
 802af26:	784c      	ldrb	r4, [r1, #1]
 802af28:	7809      	ldrb	r1, [r1, #0]
 802af2a:	fb14 f403 	smulbb	r4, r4, r3
 802af2e:	fb11 f303 	smulbb	r3, r1, r3
 802af32:	10d0      	asrs	r0, r2, #3
 802af34:	00d2      	lsls	r2, r2, #3
 802af36:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802af3a:	b2d2      	uxtb	r2, r2
 802af3c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802af40:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802af44:	fb00 4406 	mla	r4, r0, r6, r4
 802af48:	fb02 3306 	mla	r3, r2, r6, r3
 802af4c:	b2ad      	uxth	r5, r5
 802af4e:	b29b      	uxth	r3, r3
 802af50:	b2a4      	uxth	r4, r4
 802af52:	1c68      	adds	r0, r5, #1
 802af54:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802af58:	1c62      	adds	r2, r4, #1
 802af5a:	1c58      	adds	r0, r3, #1
 802af5c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802af60:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802af64:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802af68:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802af6c:	0964      	lsrs	r4, r4, #5
 802af6e:	4328      	orrs	r0, r5
 802af70:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802af74:	4320      	orrs	r0, r4
 802af76:	bd70      	pop	{r4, r5, r6, pc}

0802af78 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802af78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af7c:	b08f      	sub	sp, #60	@ 0x3c
 802af7e:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802af82:	461c      	mov	r4, r3
 802af84:	4682      	mov	sl, r0
 802af86:	460e      	mov	r6, r1
 802af88:	4615      	mov	r5, r2
 802af8a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802af8c:	2f00      	cmp	r7, #0
 802af8e:	f000 8141 	beq.w	802b214 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802af92:	f04f 0802 	mov.w	r8, #2
 802af96:	6820      	ldr	r0, [r4, #0]
 802af98:	6861      	ldr	r1, [r4, #4]
 802af9a:	aa0a      	add	r2, sp, #40	@ 0x28
 802af9c:	c203      	stmia	r2!, {r0, r1}
 802af9e:	6818      	ldr	r0, [r3, #0]
 802afa0:	6859      	ldr	r1, [r3, #4]
 802afa2:	aa0c      	add	r2, sp, #48	@ 0x30
 802afa4:	c203      	stmia	r2!, {r0, r1}
 802afa6:	a80a      	add	r0, sp, #40	@ 0x28
 802afa8:	f7ee fd22 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802afac:	4621      	mov	r1, r4
 802afae:	a80c      	add	r0, sp, #48	@ 0x30
 802afb0:	f7ee fd46 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802afb4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802afb8:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802afbc:	f002 0301 	and.w	r3, r2, #1
 802afc0:	9306      	str	r3, [sp, #24]
 802afc2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802afc6:	3504      	adds	r5, #4
 802afc8:	f003 0101 	and.w	r1, r3, #1
 802afcc:	9105      	str	r1, [sp, #20]
 802afce:	9805      	ldr	r0, [sp, #20]
 802afd0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802afd4:	4403      	add	r3, r0
 802afd6:	fb01 2303 	mla	r3, r1, r3, r2
 802afda:	fb93 f3f8 	sdiv	r3, r3, r8
 802afde:	441e      	add	r6, r3
 802afe0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802afe4:	441a      	add	r2, r3
 802afe6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802afea:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802afee:	4419      	add	r1, r3
 802aff0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802aff4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802aff8:	9303      	str	r3, [sp, #12]
 802affa:	4b88      	ldr	r3, [pc, #544]	@ (802b21c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802affc:	6818      	ldr	r0, [r3, #0]
 802affe:	6803      	ldr	r3, [r0, #0]
 802b000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802b002:	4798      	blx	r3
 802b004:	4a86      	ldr	r2, [pc, #536]	@ (802b220 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802b006:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802b00a:	8813      	ldrh	r3, [r2, #0]
 802b00c:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802b010:	2fff      	cmp	r7, #255	@ 0xff
 802b012:	fb03 9404 	mla	r4, r3, r4, r9
 802b016:	4694      	mov	ip, r2
 802b018:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b01c:	fb03 f30b 	mul.w	r3, r3, fp
 802b020:	d071      	beq.n	802b106 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802b022:	43f9      	mvns	r1, r7
 802b024:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802b028:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802b02c:	b2c9      	uxtb	r1, r1
 802b02e:	9104      	str	r1, [sp, #16]
 802b030:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802b034:	9b07      	ldr	r3, [sp, #28]
 802b036:	42a3      	cmp	r3, r4
 802b038:	f240 80e7 	bls.w	802b20a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802b03c:	9b06      	ldr	r3, [sp, #24]
 802b03e:	2b00      	cmp	r3, #0
 802b040:	d03d      	beq.n	802b0be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802b042:	7831      	ldrb	r1, [r6, #0]
 802b044:	9b04      	ldr	r3, [sp, #16]
 802b046:	f001 010f 	and.w	r1, r1, #15
 802b04a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b04e:	8822      	ldrh	r2, [r4, #0]
 802b050:	4429      	add	r1, r5
 802b052:	9300      	str	r3, [sp, #0]
 802b054:	4650      	mov	r0, sl
 802b056:	463b      	mov	r3, r7
 802b058:	f7ff ff58 	bl	802af0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b05c:	9b03      	ldr	r3, [sp, #12]
 802b05e:	f106 0801 	add.w	r8, r6, #1
 802b062:	f824 0b02 	strh.w	r0, [r4], #2
 802b066:	f103 3bff 	add.w	fp, r3, #4294967295
 802b06a:	f1bb 0f01 	cmp.w	fp, #1
 802b06e:	46a1      	mov	r9, r4
 802b070:	f104 0404 	add.w	r4, r4, #4
 802b074:	dd27      	ble.n	802b0c6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802b076:	f898 1000 	ldrb.w	r1, [r8]
 802b07a:	9b04      	ldr	r3, [sp, #16]
 802b07c:	0909      	lsrs	r1, r1, #4
 802b07e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b082:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802b086:	4429      	add	r1, r5
 802b088:	9300      	str	r3, [sp, #0]
 802b08a:	4650      	mov	r0, sl
 802b08c:	463b      	mov	r3, r7
 802b08e:	f7ff ff3d 	bl	802af0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b092:	f824 0c04 	strh.w	r0, [r4, #-4]
 802b096:	f818 1b01 	ldrb.w	r1, [r8], #1
 802b09a:	9b04      	ldr	r3, [sp, #16]
 802b09c:	f001 010f 	and.w	r1, r1, #15
 802b0a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b0a4:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802b0a8:	4429      	add	r1, r5
 802b0aa:	9300      	str	r3, [sp, #0]
 802b0ac:	4650      	mov	r0, sl
 802b0ae:	463b      	mov	r3, r7
 802b0b0:	f7ff ff2c 	bl	802af0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b0b4:	f1ab 0b02 	sub.w	fp, fp, #2
 802b0b8:	f824 0c02 	strh.w	r0, [r4, #-2]
 802b0bc:	e7d5      	b.n	802b06a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802b0be:	46b0      	mov	r8, r6
 802b0c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802b0c4:	e7d1      	b.n	802b06a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802b0c6:	d10f      	bne.n	802b0e8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802b0c8:	f898 1000 	ldrb.w	r1, [r8]
 802b0cc:	9b04      	ldr	r3, [sp, #16]
 802b0ce:	0909      	lsrs	r1, r1, #4
 802b0d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b0d4:	f8b9 2000 	ldrh.w	r2, [r9]
 802b0d8:	4429      	add	r1, r5
 802b0da:	9300      	str	r3, [sp, #0]
 802b0dc:	4650      	mov	r0, sl
 802b0de:	463b      	mov	r3, r7
 802b0e0:	f7ff ff14 	bl	802af0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802b0e4:	f829 0b02 	strh.w	r0, [r9], #2
 802b0e8:	9b08      	ldr	r3, [sp, #32]
 802b0ea:	9a05      	ldr	r2, [sp, #20]
 802b0ec:	881c      	ldrh	r4, [r3, #0]
 802b0ee:	9b03      	ldr	r3, [sp, #12]
 802b0f0:	1ae4      	subs	r4, r4, r3
 802b0f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802b0f6:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802b0fa:	4413      	add	r3, r2
 802b0fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b0fe:	fb93 f3f2 	sdiv	r3, r3, r2
 802b102:	441e      	add	r6, r3
 802b104:	e796      	b.n	802b034 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802b106:	4f47      	ldr	r7, [pc, #284]	@ (802b224 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802b108:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802b10c:	42a3      	cmp	r3, r4
 802b10e:	d97c      	bls.n	802b20a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802b110:	9a06      	ldr	r2, [sp, #24]
 802b112:	2a00      	cmp	r2, #0
 802b114:	d054      	beq.n	802b1c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802b116:	7830      	ldrb	r0, [r6, #0]
 802b118:	1c71      	adds	r1, r6, #1
 802b11a:	f000 000f 	and.w	r0, r0, #15
 802b11e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b122:	eb05 0e00 	add.w	lr, r5, r0
 802b126:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802b12a:	f89e e001 	ldrb.w	lr, [lr, #1]
 802b12e:	5c28      	ldrb	r0, [r5, r0]
 802b130:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b134:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802b138:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802b13c:	ea42 020e 	orr.w	r2, r2, lr
 802b140:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802b144:	f824 2b02 	strh.w	r2, [r4], #2
 802b148:	9a03      	ldr	r2, [sp, #12]
 802b14a:	f102 3eff 	add.w	lr, r2, #4294967295
 802b14e:	f1be 0f01 	cmp.w	lr, #1
 802b152:	4620      	mov	r0, r4
 802b154:	f104 0404 	add.w	r4, r4, #4
 802b158:	dd36      	ble.n	802b1c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802b15a:	7808      	ldrb	r0, [r1, #0]
 802b15c:	f1ae 0e02 	sub.w	lr, lr, #2
 802b160:	0900      	lsrs	r0, r0, #4
 802b162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b166:	eb05 0a00 	add.w	sl, r5, r0
 802b16a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802b16e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802b172:	00d2      	lsls	r2, r2, #3
 802b174:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802b178:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b17c:	ea49 0202 	orr.w	r2, r9, r2
 802b180:	f815 9000 	ldrb.w	r9, [r5, r0]
 802b184:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802b188:	f824 2c04 	strh.w	r2, [r4, #-4]
 802b18c:	f811 0b01 	ldrb.w	r0, [r1], #1
 802b190:	f000 000f 	and.w	r0, r0, #15
 802b194:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802b198:	eb05 0a00 	add.w	sl, r5, r0
 802b19c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802b1a0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802b1a4:	00d2      	lsls	r2, r2, #3
 802b1a6:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802b1aa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b1ae:	ea49 0202 	orr.w	r2, r9, r2
 802b1b2:	f815 9000 	ldrb.w	r9, [r5, r0]
 802b1b6:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802b1ba:	f824 2c02 	strh.w	r2, [r4, #-2]
 802b1be:	e7c6      	b.n	802b14e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802b1c0:	4631      	mov	r1, r6
 802b1c2:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802b1c6:	e7c2      	b.n	802b14e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802b1c8:	d111      	bne.n	802b1ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802b1ca:	7809      	ldrb	r1, [r1, #0]
 802b1cc:	0909      	lsrs	r1, r1, #4
 802b1ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802b1d2:	186c      	adds	r4, r5, r1
 802b1d4:	78a2      	ldrb	r2, [r4, #2]
 802b1d6:	7864      	ldrb	r4, [r4, #1]
 802b1d8:	5c69      	ldrb	r1, [r5, r1]
 802b1da:	00e4      	lsls	r4, r4, #3
 802b1dc:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802b1e0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802b1e4:	4322      	orrs	r2, r4
 802b1e6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802b1ea:	f820 2b02 	strh.w	r2, [r0], #2
 802b1ee:	9a03      	ldr	r2, [sp, #12]
 802b1f0:	f8bc 4000 	ldrh.w	r4, [ip]
 802b1f4:	9905      	ldr	r1, [sp, #20]
 802b1f6:	1aa4      	subs	r4, r4, r2
 802b1f8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802b1fc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b200:	440a      	add	r2, r1
 802b202:	fb92 f2f8 	sdiv	r2, r2, r8
 802b206:	4416      	add	r6, r2
 802b208:	e780      	b.n	802b10c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802b20a:	4b04      	ldr	r3, [pc, #16]	@ (802b21c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802b20c:	6818      	ldr	r0, [r3, #0]
 802b20e:	6803      	ldr	r3, [r0, #0]
 802b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b212:	4798      	blx	r3
 802b214:	b00f      	add	sp, #60	@ 0x3c
 802b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b21a:	bf00      	nop
 802b21c:	20011f2c 	.word	0x20011f2c
 802b220:	20011f26 	.word	0x20011f26
 802b224:	fffff800 	.word	0xfffff800

0802b228 <CRC_Lock>:
 802b228:	b530      	push	{r4, r5, lr}
 802b22a:	4a2d      	ldr	r2, [pc, #180]	@ (802b2e0 <CRC_Lock+0xb8>)
 802b22c:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802b230:	6813      	ldr	r3, [r2, #0]
 802b232:	f023 0301 	bic.w	r3, r3, #1
 802b236:	6013      	str	r3, [r2, #0]
 802b238:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802b23c:	4b29      	ldr	r3, [pc, #164]	@ (802b2e4 <CRC_Lock+0xbc>)
 802b23e:	681c      	ldr	r4, [r3, #0]
 802b240:	4014      	ands	r4, r2
 802b242:	42ac      	cmp	r4, r5
 802b244:	d005      	beq.n	802b252 <CRC_Lock+0x2a>
 802b246:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802b24a:	681c      	ldr	r4, [r3, #0]
 802b24c:	4014      	ands	r4, r2
 802b24e:	42ac      	cmp	r4, r5
 802b250:	d125      	bne.n	802b29e <CRC_Lock+0x76>
 802b252:	4b25      	ldr	r3, [pc, #148]	@ (802b2e8 <CRC_Lock+0xc0>)
 802b254:	681b      	ldr	r3, [r3, #0]
 802b256:	2b00      	cmp	r3, #0
 802b258:	d139      	bne.n	802b2ce <CRC_Lock+0xa6>
 802b25a:	4b24      	ldr	r3, [pc, #144]	@ (802b2ec <CRC_Lock+0xc4>)
 802b25c:	681a      	ldr	r2, [r3, #0]
 802b25e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b262:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802b266:	d00d      	beq.n	802b284 <CRC_Lock+0x5c>
 802b268:	f240 4483 	movw	r4, #1155	@ 0x483
 802b26c:	681a      	ldr	r2, [r3, #0]
 802b26e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b272:	42a2      	cmp	r2, r4
 802b274:	d006      	beq.n	802b284 <CRC_Lock+0x5c>
 802b276:	f240 4285 	movw	r2, #1157	@ 0x485
 802b27a:	681b      	ldr	r3, [r3, #0]
 802b27c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b280:	4293      	cmp	r3, r2
 802b282:	d124      	bne.n	802b2ce <CRC_Lock+0xa6>
 802b284:	2201      	movs	r2, #1
 802b286:	4b1a      	ldr	r3, [pc, #104]	@ (802b2f0 <CRC_Lock+0xc8>)
 802b288:	601a      	str	r2, [r3, #0]
 802b28a:	681a      	ldr	r2, [r3, #0]
 802b28c:	2a00      	cmp	r2, #0
 802b28e:	d1fc      	bne.n	802b28a <CRC_Lock+0x62>
 802b290:	4b18      	ldr	r3, [pc, #96]	@ (802b2f4 <CRC_Lock+0xcc>)
 802b292:	6018      	str	r0, [r3, #0]
 802b294:	6818      	ldr	r0, [r3, #0]
 802b296:	1a43      	subs	r3, r0, r1
 802b298:	4258      	negs	r0, r3
 802b29a:	4158      	adcs	r0, r3
 802b29c:	e00e      	b.n	802b2bc <CRC_Lock+0x94>
 802b29e:	681b      	ldr	r3, [r3, #0]
 802b2a0:	4013      	ands	r3, r2
 802b2a2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802b2a6:	4293      	cmp	r3, r2
 802b2a8:	d111      	bne.n	802b2ce <CRC_Lock+0xa6>
 802b2aa:	f240 4286 	movw	r2, #1158	@ 0x486
 802b2ae:	4b12      	ldr	r3, [pc, #72]	@ (802b2f8 <CRC_Lock+0xd0>)
 802b2b0:	681b      	ldr	r3, [r3, #0]
 802b2b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b2b6:	4293      	cmp	r3, r2
 802b2b8:	d001      	beq.n	802b2be <CRC_Lock+0x96>
 802b2ba:	2000      	movs	r0, #0
 802b2bc:	bd30      	pop	{r4, r5, pc}
 802b2be:	2201      	movs	r2, #1
 802b2c0:	4b0e      	ldr	r3, [pc, #56]	@ (802b2fc <CRC_Lock+0xd4>)
 802b2c2:	601a      	str	r2, [r3, #0]
 802b2c4:	681a      	ldr	r2, [r3, #0]
 802b2c6:	2a00      	cmp	r2, #0
 802b2c8:	d1fc      	bne.n	802b2c4 <CRC_Lock+0x9c>
 802b2ca:	4b0d      	ldr	r3, [pc, #52]	@ (802b300 <CRC_Lock+0xd8>)
 802b2cc:	e7e1      	b.n	802b292 <CRC_Lock+0x6a>
 802b2ce:	2201      	movs	r2, #1
 802b2d0:	4b0c      	ldr	r3, [pc, #48]	@ (802b304 <CRC_Lock+0xdc>)
 802b2d2:	601a      	str	r2, [r3, #0]
 802b2d4:	681a      	ldr	r2, [r3, #0]
 802b2d6:	2a00      	cmp	r2, #0
 802b2d8:	d1fc      	bne.n	802b2d4 <CRC_Lock+0xac>
 802b2da:	4b0b      	ldr	r3, [pc, #44]	@ (802b308 <CRC_Lock+0xe0>)
 802b2dc:	e7d9      	b.n	802b292 <CRC_Lock+0x6a>
 802b2de:	bf00      	nop
 802b2e0:	e0002000 	.word	0xe0002000
 802b2e4:	e000ed00 	.word	0xe000ed00
 802b2e8:	e0042000 	.word	0xe0042000
 802b2ec:	5c001000 	.word	0x5c001000
 802b2f0:	58024c08 	.word	0x58024c08
 802b2f4:	58024c00 	.word	0x58024c00
 802b2f8:	46008ff0 	.word	0x46008ff0
 802b2fc:	46024c08 	.word	0x46024c08
 802b300:	46024c00 	.word	0x46024c00
 802b304:	40023008 	.word	0x40023008
 802b308:	40023000 	.word	0x40023000

0802b30c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b30c:	6101      	str	r1, [r0, #16]
 802b30e:	4770      	bx	lr

0802b310 <_ZN8touchgfx8Gestures4tickEv>:
 802b310:	7b83      	ldrb	r3, [r0, #14]
 802b312:	b14b      	cbz	r3, 802b328 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b314:	8903      	ldrh	r3, [r0, #8]
 802b316:	3301      	adds	r3, #1
 802b318:	b29b      	uxth	r3, r3
 802b31a:	2b07      	cmp	r3, #7
 802b31c:	8103      	strh	r3, [r0, #8]
 802b31e:	bf81      	itttt	hi
 802b320:	2300      	movhi	r3, #0
 802b322:	8143      	strhhi	r3, [r0, #10]
 802b324:	8183      	strhhi	r3, [r0, #12]
 802b326:	7383      	strbhi	r3, [r0, #14]
 802b328:	4770      	bx	lr
	...

0802b32c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b32c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b330:	4698      	mov	r8, r3
 802b332:	4604      	mov	r4, r0
 802b334:	8883      	ldrh	r3, [r0, #4]
 802b336:	460e      	mov	r6, r1
 802b338:	88c1      	ldrh	r1, [r0, #6]
 802b33a:	2000      	movs	r0, #0
 802b33c:	f8ad 3006 	strh.w	r3, [sp, #6]
 802b340:	eba8 0303 	sub.w	r3, r8, r3
 802b344:	b21b      	sxth	r3, r3
 802b346:	4617      	mov	r7, r2
 802b348:	4a17      	ldr	r2, [pc, #92]	@ (802b3a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802b34a:	2b00      	cmp	r3, #0
 802b34c:	bfb8      	it	lt
 802b34e:	425b      	neglt	r3, r3
 802b350:	9200      	str	r2, [sp, #0]
 802b352:	8aa2      	ldrh	r2, [r4, #20]
 802b354:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802b358:	b21b      	sxth	r3, r3
 802b35a:	4293      	cmp	r3, r2
 802b35c:	f88d 0004 	strb.w	r0, [sp, #4]
 802b360:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b364:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b368:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b36c:	dc07      	bgt.n	802b37e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802b36e:	1a69      	subs	r1, r5, r1
 802b370:	b209      	sxth	r1, r1
 802b372:	2900      	cmp	r1, #0
 802b374:	bfb8      	it	lt
 802b376:	4249      	neglt	r1, r1
 802b378:	b209      	sxth	r1, r1
 802b37a:	428a      	cmp	r2, r1
 802b37c:	da10      	bge.n	802b3a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802b37e:	6920      	ldr	r0, [r4, #16]
 802b380:	4669      	mov	r1, sp
 802b382:	6803      	ldr	r3, [r0, #0]
 802b384:	eba8 0606 	sub.w	r6, r8, r6
 802b388:	685b      	ldr	r3, [r3, #4]
 802b38a:	4798      	blx	r3
 802b38c:	2300      	movs	r3, #0
 802b38e:	2001      	movs	r0, #1
 802b390:	1bef      	subs	r7, r5, r7
 802b392:	8123      	strh	r3, [r4, #8]
 802b394:	8166      	strh	r6, [r4, #10]
 802b396:	81a7      	strh	r7, [r4, #12]
 802b398:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b39c:	80e5      	strh	r5, [r4, #6]
 802b39e:	73a0      	strb	r0, [r4, #14]
 802b3a0:	b004      	add	sp, #16
 802b3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b3a6:	bf00      	nop
 802b3a8:	0802fa64 	.word	0x0802fa64

0802b3ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b3ae:	461e      	mov	r6, r3
 802b3b0:	1e4b      	subs	r3, r1, #1
 802b3b2:	2b01      	cmp	r3, #1
 802b3b4:	b085      	sub	sp, #20
 802b3b6:	4604      	mov	r4, r0
 802b3b8:	460d      	mov	r5, r1
 802b3ba:	4617      	mov	r7, r2
 802b3bc:	d84b      	bhi.n	802b456 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b3be:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b3c2:	1cd3      	adds	r3, r2, #3
 802b3c4:	b29b      	uxth	r3, r3
 802b3c6:	2b06      	cmp	r3, #6
 802b3c8:	d916      	bls.n	802b3f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b3ca:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802b46c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b3ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b3d2:	f8cd c004 	str.w	ip, [sp, #4]
 802b3d6:	f04f 0c00 	mov.w	ip, #0
 802b3da:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b3de:	6900      	ldr	r0, [r0, #16]
 802b3e0:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b3e4:	f88d c008 	strb.w	ip, [sp, #8]
 802b3e8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b3ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b3f0:	6803      	ldr	r3, [r0, #0]
 802b3f2:	a901      	add	r1, sp, #4
 802b3f4:	689b      	ldr	r3, [r3, #8]
 802b3f6:	4798      	blx	r3
 802b3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b3fc:	1cd3      	adds	r3, r2, #3
 802b3fe:	b29b      	uxth	r3, r3
 802b400:	2b06      	cmp	r3, #6
 802b402:	d916      	bls.n	802b432 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b404:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802b46c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b408:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b40c:	f8cd c004 	str.w	ip, [sp, #4]
 802b410:	f04f 0c01 	mov.w	ip, #1
 802b414:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b418:	6920      	ldr	r0, [r4, #16]
 802b41a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b41e:	f88d c008 	strb.w	ip, [sp, #8]
 802b422:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b426:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b42a:	6803      	ldr	r3, [r0, #0]
 802b42c:	a901      	add	r1, sp, #4
 802b42e:	689b      	ldr	r3, [r3, #8]
 802b430:	4798      	blx	r3
 802b432:	4b0d      	ldr	r3, [pc, #52]	@ (802b468 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b434:	6920      	ldr	r0, [r4, #16]
 802b436:	9301      	str	r3, [sp, #4]
 802b438:	2300      	movs	r3, #0
 802b43a:	f88d 5008 	strb.w	r5, [sp, #8]
 802b43e:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b442:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b446:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b44a:	6803      	ldr	r3, [r0, #0]
 802b44c:	a901      	add	r1, sp, #4
 802b44e:	681b      	ldr	r3, [r3, #0]
 802b450:	4798      	blx	r3
 802b452:	b005      	add	sp, #20
 802b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b456:	2900      	cmp	r1, #0
 802b458:	d1eb      	bne.n	802b432 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b45a:	80a2      	strh	r2, [r4, #4]
 802b45c:	80c6      	strh	r6, [r0, #6]
 802b45e:	60a1      	str	r1, [r4, #8]
 802b460:	81a1      	strh	r1, [r4, #12]
 802b462:	73a1      	strb	r1, [r4, #14]
 802b464:	e7e5      	b.n	802b432 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b466:	bf00      	nop
 802b468:	0802fa50 	.word	0x0802fa50
 802b46c:	0802fa78 	.word	0x0802fa78

0802b470 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802b470:	10c9      	asrs	r1, r1, #3
 802b472:	2900      	cmp	r1, #0
 802b474:	bfb8      	it	lt
 802b476:	4249      	neglt	r1, r1
 802b478:	2801      	cmp	r0, #1
 802b47a:	d108      	bne.n	802b48e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b47c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b480:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802b484:	4601      	mov	r1, r0
 802b486:	dd02      	ble.n	802b48e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802b488:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802b48c:	4770      	bx	lr
 802b48e:	29ff      	cmp	r1, #255	@ 0xff
 802b490:	bfa8      	it	ge
 802b492:	21ff      	movge	r1, #255	@ 0xff
 802b494:	4608      	mov	r0, r1
 802b496:	4770      	bx	lr

0802b498 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b498:	b410      	push	{r4}
 802b49a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802b49e:	429c      	cmp	r4, r3
 802b4a0:	d803      	bhi.n	802b4aa <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802b4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b4a6:	f7ec bd99 	b.w	8017fdc <_ZN8touchgfx7Outline6lineToEii>
 802b4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b4ae:	4770      	bx	lr

0802b4b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4b4:	b08b      	sub	sp, #44	@ 0x2c
 802b4b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b4ba:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802b4be:	4606      	mov	r6, r0
 802b4c0:	9308      	str	r3, [sp, #32]
 802b4c2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802b4c6:	468a      	mov	sl, r1
 802b4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 802b4ca:	f7ec fef3 	bl	80182b4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802b4ce:	68b5      	ldr	r5, [r6, #8]
 802b4d0:	4604      	mov	r4, r0
 802b4d2:	2d00      	cmp	r5, #0
 802b4d4:	d044      	beq.n	802b560 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b4d6:	6873      	ldr	r3, [r6, #4]
 802b4d8:	42ab      	cmp	r3, r5
 802b4da:	d33d      	bcc.n	802b558 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802b4dc:	f04f 0800 	mov.w	r8, #0
 802b4e0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802b4e4:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802b4e8:	eb02 0b03 	add.w	fp, r2, r3
 802b4ec:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802b4f0:	fb02 1203 	mla	r2, r2, r3, r1
 802b4f4:	9205      	str	r2, [sp, #20]
 802b4f6:	1e6a      	subs	r2, r5, #1
 802b4f8:	9204      	str	r2, [sp, #16]
 802b4fa:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802b4fe:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b502:	454b      	cmp	r3, r9
 802b504:	463a      	mov	r2, r7
 802b506:	d008      	beq.n	802b51a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802b508:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802b50c:	eb03 0b09 	add.w	fp, r3, r9
 802b510:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802b514:	fb03 1309 	mla	r3, r3, r9, r1
 802b518:	9305      	str	r3, [sp, #20]
 802b51a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802b51e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802b522:	4498      	add	r8, r3
 802b524:	9b04      	ldr	r3, [sp, #16]
 802b526:	3b01      	subs	r3, #1
 802b528:	9304      	str	r3, [sp, #16]
 802b52a:	9b04      	ldr	r3, [sp, #16]
 802b52c:	3301      	adds	r3, #1
 802b52e:	d015      	beq.n	802b55c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802b530:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802b534:	42bb      	cmp	r3, r7
 802b536:	d117      	bne.n	802b568 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802b538:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802b53c:	9b04      	ldr	r3, [sp, #16]
 802b53e:	4548      	cmp	r0, r9
 802b540:	f103 33ff 	add.w	r3, r3, #4294967295
 802b544:	d17d      	bne.n	802b642 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802b546:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802b54a:	4401      	add	r1, r0
 802b54c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802b550:	4480      	add	r8, r0
 802b552:	e7e9      	b.n	802b528 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802b554:	461f      	mov	r7, r3
 802b556:	e042      	b.n	802b5de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802b558:	2000      	movs	r0, #0
 802b55a:	e002      	b.n	802b562 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802b55c:	2900      	cmp	r1, #0
 802b55e:	d16d      	bne.n	802b63c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802b560:	2001      	movs	r0, #1
 802b562:	b00b      	add	sp, #44	@ 0x2c
 802b564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b568:	b379      	cbz	r1, 802b5ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802b56a:	2f00      	cmp	r7, #0
 802b56c:	db29      	blt.n	802b5c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b56e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b572:	42bb      	cmp	r3, r7
 802b574:	dd25      	ble.n	802b5c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b576:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802b57a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b57e:	f7ff ff77 	bl	802b470 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b584:	fb10 f003 	smulbb	r0, r0, r3
 802b588:	b280      	uxth	r0, r0
 802b58a:	1c41      	adds	r1, r0, #1
 802b58c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b590:	1209      	asrs	r1, r1, #8
 802b592:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b596:	d014      	beq.n	802b5c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802b598:	b2c9      	uxtb	r1, r1
 802b59a:	9102      	str	r1, [sp, #8]
 802b59c:	2101      	movs	r1, #1
 802b59e:	9808      	ldr	r0, [sp, #32]
 802b5a0:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b5a2:	b2ba      	uxth	r2, r7
 802b5a4:	4413      	add	r3, r2
 802b5a6:	9101      	str	r1, [sp, #4]
 802b5a8:	4402      	add	r2, r0
 802b5aa:	fa0f f18b 	sxth.w	r1, fp
 802b5ae:	f8da 0000 	ldr.w	r0, [sl]
 802b5b2:	9100      	str	r1, [sp, #0]
 802b5b4:	6941      	ldr	r1, [r0, #20]
 802b5b6:	b21b      	sxth	r3, r3
 802b5b8:	460d      	mov	r5, r1
 802b5ba:	b212      	sxth	r2, r2
 802b5bc:	9905      	ldr	r1, [sp, #20]
 802b5be:	4650      	mov	r0, sl
 802b5c0:	47a8      	blx	r5
 802b5c2:	9b04      	ldr	r3, [sp, #16]
 802b5c4:	1c7a      	adds	r2, r7, #1
 802b5c6:	3301      	adds	r3, #1
 802b5c8:	d0ca      	beq.n	802b560 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b5ca:	f9b4 7000 	ldrsh.w	r7, [r4]
 802b5ce:	1abb      	subs	r3, r7, r2
 802b5d0:	2b00      	cmp	r3, #0
 802b5d2:	dd31      	ble.n	802b638 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b5d4:	2a00      	cmp	r2, #0
 802b5d6:	dabd      	bge.n	802b554 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802b5d8:	2f00      	cmp	r7, #0
 802b5da:	dd2d      	ble.n	802b638 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b5dc:	2200      	movs	r2, #0
 802b5de:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802b5e2:	19d1      	adds	r1, r2, r7
 802b5e4:	4299      	cmp	r1, r3
 802b5e6:	db02      	blt.n	802b5ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802b5e8:	1a9f      	subs	r7, r3, r2
 802b5ea:	2f00      	cmp	r7, #0
 802b5ec:	dd24      	ble.n	802b638 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b5ee:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802b5f2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802b5f6:	f7ff ff3b 	bl	802b470 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802b5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b5fc:	fb10 f003 	smulbb	r0, r0, r3
 802b600:	b280      	uxth	r0, r0
 802b602:	1c41      	adds	r1, r0, #1
 802b604:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802b608:	1209      	asrs	r1, r1, #8
 802b60a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802b60e:	d013      	beq.n	802b638 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b610:	9808      	ldr	r0, [sp, #32]
 802b612:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802b614:	b292      	uxth	r2, r2
 802b616:	b2c9      	uxtb	r1, r1
 802b618:	4413      	add	r3, r2
 802b61a:	9102      	str	r1, [sp, #8]
 802b61c:	4402      	add	r2, r0
 802b61e:	b23f      	sxth	r7, r7
 802b620:	f8da 0000 	ldr.w	r0, [sl]
 802b624:	fa0f f18b 	sxth.w	r1, fp
 802b628:	9100      	str	r1, [sp, #0]
 802b62a:	9701      	str	r7, [sp, #4]
 802b62c:	6947      	ldr	r7, [r0, #20]
 802b62e:	b21b      	sxth	r3, r3
 802b630:	b212      	sxth	r2, r2
 802b632:	9905      	ldr	r1, [sp, #20]
 802b634:	4650      	mov	r0, sl
 802b636:	47b8      	blx	r7
 802b638:	464b      	mov	r3, r9
 802b63a:	e75e      	b.n	802b4fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802b63c:	2f00      	cmp	r7, #0
 802b63e:	da96      	bge.n	802b56e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802b640:	e78e      	b.n	802b560 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802b642:	2900      	cmp	r1, #0
 802b644:	d0f8      	beq.n	802b638 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802b646:	e790      	b.n	802b56a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802b648 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802b648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b64c:	2500      	movs	r5, #0
 802b64e:	461e      	mov	r6, r3
 802b650:	4b35      	ldr	r3, [pc, #212]	@ (802b728 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802b652:	4604      	mov	r4, r0
 802b654:	e9c0 3100 	strd	r3, r1, [r0]
 802b658:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802b65c:	f100 0814 	add.w	r8, r0, #20
 802b660:	8103      	strh	r3, [r0, #8]
 802b662:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802b666:	8185      	strh	r5, [r0, #12]
 802b668:	7283      	strb	r3, [r0, #10]
 802b66a:	81c5      	strh	r5, [r0, #14]
 802b66c:	8205      	strh	r5, [r0, #16]
 802b66e:	8245      	strh	r5, [r0, #18]
 802b670:	4640      	mov	r0, r8
 802b672:	4617      	mov	r7, r2
 802b674:	f7eb ffea 	bl	801764c <_ZN8touchgfx7OutlineC1Ev>
 802b678:	466b      	mov	r3, sp
 802b67a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802b67e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802b682:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802b686:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802b68a:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802b68e:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802b692:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802b696:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802b69a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802b69e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802b6a2:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802b6a6:	6830      	ldr	r0, [r6, #0]
 802b6a8:	6871      	ldr	r1, [r6, #4]
 802b6aa:	8872      	ldrh	r2, [r6, #2]
 802b6ac:	c303      	stmia	r3!, {r0, r1}
 802b6ae:	887b      	ldrh	r3, [r7, #2]
 802b6b0:	8835      	ldrh	r5, [r6, #0]
 802b6b2:	4413      	add	r3, r2
 802b6b4:	883a      	ldrh	r2, [r7, #0]
 802b6b6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802b6ba:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802b6be:	442a      	add	r2, r5
 802b6c0:	81a2      	strh	r2, [r4, #12]
 802b6c2:	81e3      	strh	r3, [r4, #14]
 802b6c4:	8220      	strh	r0, [r4, #16]
 802b6c6:	8261      	strh	r1, [r4, #18]
 802b6c8:	4668      	mov	r0, sp
 802b6ca:	4639      	mov	r1, r7
 802b6cc:	f7ee f9b8 	bl	8019a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b6d0:	f104 000c 	add.w	r0, r4, #12
 802b6d4:	f7ee f98c 	bl	80199f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b6d8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b6dc:	f8bd 2000 	ldrh.w	r2, [sp]
 802b6e0:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802b6e4:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802b6e8:	4640      	mov	r0, r8
 802b6ea:	f7eb ff93 	bl	8017614 <_ZN8touchgfx7Outline5resetEv>
 802b6ee:	4620      	mov	r0, r4
 802b6f0:	f9bd 3000 	ldrsh.w	r3, [sp]
 802b6f4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802b6f8:	015b      	lsls	r3, r3, #5
 802b6fa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802b6fc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802b700:	015b      	lsls	r3, r3, #5
 802b702:	6523      	str	r3, [r4, #80]	@ 0x50
 802b704:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802b708:	015b      	lsls	r3, r3, #5
 802b70a:	6563      	str	r3, [r4, #84]	@ 0x54
 802b70c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802b710:	015b      	lsls	r3, r3, #5
 802b712:	65a3      	str	r3, [r4, #88]	@ 0x58
 802b714:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802b718:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802b71c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802b720:	b002      	add	sp, #8
 802b722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b726:	bf00      	nop
 802b728:	0802fdb4 	.word	0x0802fdb4

0802b72c <_ZN8touchgfx6Canvas5closeEv>:
 802b72c:	b538      	push	{r3, r4, r5, lr}
 802b72e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b732:	4604      	mov	r4, r0
 802b734:	b193      	cbz	r3, 802b75c <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b736:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802b73a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802b73e:	4213      	tst	r3, r2
 802b740:	d10c      	bne.n	802b75c <_ZN8touchgfx6Canvas5closeEv+0x30>
 802b742:	f100 0514 	add.w	r5, r0, #20
 802b746:	b123      	cbz	r3, 802b752 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802b748:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802b74c:	4628      	mov	r0, r5
 802b74e:	f7ff fea3 	bl	802b498 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b752:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802b756:	4628      	mov	r0, r5
 802b758:	f7ff fe9e 	bl	802b498 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b75c:	2300      	movs	r3, #0
 802b75e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b762:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802b766:	4298      	cmp	r0, r3
 802b768:	bf34      	ite	cc
 802b76a:	2000      	movcc	r0, #0
 802b76c:	2001      	movcs	r0, #1
 802b76e:	bd38      	pop	{r3, r4, r5, pc}

0802b770 <_ZN8touchgfx6Canvas6renderEh>:
 802b770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b774:	7a85      	ldrb	r5, [r0, #10]
 802b776:	4604      	mov	r4, r0
 802b778:	4369      	muls	r1, r5
 802b77a:	1c4d      	adds	r5, r1, #1
 802b77c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802b780:	122d      	asrs	r5, r5, #8
 802b782:	f000 8098 	beq.w	802b8b6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b786:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	f000 8093 	beq.w	802b8b6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802b790:	f7ff ffcc 	bl	802b72c <_ZN8touchgfx6Canvas5closeEv>
 802b794:	4607      	mov	r7, r0
 802b796:	2800      	cmp	r0, #0
 802b798:	d045      	beq.n	802b826 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b79a:	6860      	ldr	r0, [r4, #4]
 802b79c:	4e47      	ldr	r6, [pc, #284]	@ (802b8bc <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802b79e:	6803      	ldr	r3, [r0, #0]
 802b7a0:	6837      	ldr	r7, [r6, #0]
 802b7a2:	689b      	ldr	r3, [r3, #8]
 802b7a4:	4798      	blx	r3
 802b7a6:	4601      	mov	r1, r0
 802b7a8:	4638      	mov	r0, r7
 802b7aa:	f7e9 ff27 	bl	80155fc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802b7ae:	4607      	mov	r7, r0
 802b7b0:	f7e2 f8b8 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 802b7b4:	6803      	ldr	r3, [r0, #0]
 802b7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802b7b8:	4798      	blx	r3
 802b7ba:	4680      	mov	r8, r0
 802b7bc:	f7e2 f8b2 	bl	800d924 <_ZN8touchgfx3HAL3lcdEv>
 802b7c0:	6803      	ldr	r3, [r0, #0]
 802b7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b7c4:	4798      	blx	r3
 802b7c6:	280b      	cmp	r0, #11
 802b7c8:	d85a      	bhi.n	802b880 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802b7ca:	e8df f000 	tbb	[pc, r0]
 802b7ce:	5b50      	.short	0x5b50
 802b7d0:	3059066b 	.word	0x3059066b
 802b7d4:	64646440 	.word	0x64646440
 802b7d8:	6464      	.short	0x6464
 802b7da:	2208      	movs	r2, #8
 802b7dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b7e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b7e4:	fb91 f2f2 	sdiv	r2, r1, r2
 802b7e8:	fb08 2303 	mla	r3, r8, r3, r2
 802b7ec:	441f      	add	r7, r3
 802b7ee:	424b      	negs	r3, r1
 802b7f0:	f003 0307 	and.w	r3, r3, #7
 802b7f4:	f001 0107 	and.w	r1, r1, #7
 802b7f8:	bf58      	it	pl
 802b7fa:	4259      	negpl	r1, r3
 802b7fc:	b2c9      	uxtb	r1, r1
 802b7fe:	b2ed      	uxtb	r5, r5
 802b800:	463a      	mov	r2, r7
 802b802:	e9cd 1500 	strd	r1, r5, [sp]
 802b806:	fa0f f388 	sxth.w	r3, r8
 802b80a:	6861      	ldr	r1, [r4, #4]
 802b80c:	f104 0014 	add.w	r0, r4, #20
 802b810:	f7ff fe4e 	bl	802b4b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802b814:	4607      	mov	r7, r0
 802b816:	6860      	ldr	r0, [r4, #4]
 802b818:	6803      	ldr	r3, [r0, #0]
 802b81a:	691b      	ldr	r3, [r3, #16]
 802b81c:	4798      	blx	r3
 802b81e:	6830      	ldr	r0, [r6, #0]
 802b820:	6803      	ldr	r3, [r0, #0]
 802b822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b824:	4798      	blx	r3
 802b826:	4638      	mov	r0, r7
 802b828:	b002      	add	sp, #8
 802b82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b82e:	2204      	movs	r2, #4
 802b830:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b834:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b838:	fb91 f2f2 	sdiv	r2, r1, r2
 802b83c:	fb08 2303 	mla	r3, r8, r3, r2
 802b840:	441f      	add	r7, r3
 802b842:	424b      	negs	r3, r1
 802b844:	f003 0303 	and.w	r3, r3, #3
 802b848:	f001 0103 	and.w	r1, r1, #3
 802b84c:	e7d4      	b.n	802b7f8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802b84e:	2202      	movs	r2, #2
 802b850:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802b854:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b858:	fb91 f2f2 	sdiv	r2, r1, r2
 802b85c:	fb08 2303 	mla	r3, r8, r3, r2
 802b860:	2900      	cmp	r1, #0
 802b862:	f001 0101 	and.w	r1, r1, #1
 802b866:	441f      	add	r7, r3
 802b868:	bfb8      	it	lt
 802b86a:	4249      	neglt	r1, r1
 802b86c:	e7c6      	b.n	802b7fc <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802b86e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b872:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b876:	fb08 f303 	mul.w	r3, r8, r3
 802b87a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802b87e:	441f      	add	r7, r3
 802b880:	2100      	movs	r1, #0
 802b882:	e7bc      	b.n	802b7fe <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802b884:	2103      	movs	r1, #3
 802b886:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b88a:	fb08 f203 	mul.w	r2, r8, r3
 802b88e:	89a3      	ldrh	r3, [r4, #12]
 802b890:	fb13 2301 	smlabb	r3, r3, r1, r2
 802b894:	e7f3      	b.n	802b87e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b896:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b89a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b89e:	fb08 2303 	mla	r3, r8, r3, r2
 802b8a2:	e7ec      	b.n	802b87e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b8a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802b8a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b8ac:	fb08 f303 	mul.w	r3, r8, r3
 802b8b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802b8b4:	e7e3      	b.n	802b87e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802b8b6:	2701      	movs	r7, #1
 802b8b8:	e7b5      	b.n	802b826 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802b8ba:	bf00      	nop
 802b8bc:	20011f2c 	.word	0x20011f2c

0802b8c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802b8c0:	b510      	push	{r4, lr}
 802b8c2:	4b06      	ldr	r3, [pc, #24]	@ (802b8dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802b8c4:	781b      	ldrb	r3, [r3, #0]
 802b8c6:	2b01      	cmp	r3, #1
 802b8c8:	d107      	bne.n	802b8da <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802b8ca:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802b8ce:	680b      	ldr	r3, [r1, #0]
 802b8d0:	6814      	ldr	r4, [r2, #0]
 802b8d2:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802b8d6:	6013      	str	r3, [r2, #0]
 802b8d8:	600c      	str	r4, [r1, #0]
 802b8da:	bd10      	pop	{r4, pc}
 802b8dc:	20011f24 	.word	0x20011f24

0802b8e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802b8e0:	b513      	push	{r0, r1, r4, lr}
 802b8e2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802b8e6:	4604      	mov	r4, r0
 802b8e8:	e9cd 2100 	strd	r2, r1, [sp]
 802b8ec:	b9a3      	cbnz	r3, 802b918 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802b8ee:	466a      	mov	r2, sp
 802b8f0:	a901      	add	r1, sp, #4
 802b8f2:	4620      	mov	r0, r4
 802b8f4:	f7ff ffe4 	bl	802b8c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b8f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b8fa:	9901      	ldr	r1, [sp, #4]
 802b8fc:	9a00      	ldr	r2, [sp, #0]
 802b8fe:	1ac9      	subs	r1, r1, r3
 802b900:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b902:	9101      	str	r1, [sp, #4]
 802b904:	1ad2      	subs	r2, r2, r3
 802b906:	2a00      	cmp	r2, #0
 802b908:	9200      	str	r2, [sp, #0]
 802b90a:	da0b      	bge.n	802b924 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802b90c:	2301      	movs	r3, #1
 802b90e:	2900      	cmp	r1, #0
 802b910:	da0e      	bge.n	802b930 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802b912:	f043 0304 	orr.w	r3, r3, #4
 802b916:	e013      	b.n	802b940 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802b918:	f7ff ff08 	bl	802b72c <_ZN8touchgfx6Canvas5closeEv>
 802b91c:	2800      	cmp	r0, #0
 802b91e:	d1e6      	bne.n	802b8ee <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802b920:	b002      	add	sp, #8
 802b922:	bd10      	pop	{r4, pc}
 802b924:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b926:	429a      	cmp	r2, r3
 802b928:	bfac      	ite	ge
 802b92a:	2302      	movge	r3, #2
 802b92c:	2300      	movlt	r3, #0
 802b92e:	e7ee      	b.n	802b90e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802b930:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802b932:	4281      	cmp	r1, r0
 802b934:	bfac      	ite	ge
 802b936:	2008      	movge	r0, #8
 802b938:	2000      	movlt	r0, #0
 802b93a:	4318      	orrs	r0, r3
 802b93c:	b2c3      	uxtb	r3, r0
 802b93e:	b158      	cbz	r0, 802b958 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802b940:	2200      	movs	r2, #0
 802b942:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802b946:	9901      	ldr	r1, [sp, #4]
 802b948:	9a00      	ldr	r2, [sp, #0]
 802b94a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802b94c:	6722      	str	r2, [r4, #112]	@ 0x70
 802b94e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802b952:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802b956:	e7e3      	b.n	802b920 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802b958:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b95c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802b960:	4298      	cmp	r0, r3
 802b962:	d803      	bhi.n	802b96c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802b964:	f104 0014 	add.w	r0, r4, #20
 802b968:	f7ec fb52 	bl	8018010 <_ZN8touchgfx7Outline6moveToEii>
 802b96c:	2301      	movs	r3, #1
 802b96e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802b972:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802b976:	2300      	movs	r3, #0
 802b978:	e7e5      	b.n	802b946 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802b97a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802b97a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b97c:	4604      	mov	r4, r0
 802b97e:	ab02      	add	r3, sp, #8
 802b980:	f843 2d08 	str.w	r2, [r3, #-8]!
 802b984:	461a      	mov	r2, r3
 802b986:	9101      	str	r1, [sp, #4]
 802b988:	a901      	add	r1, sp, #4
 802b98a:	f7ff ff99 	bl	802b8c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802b98e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802b990:	9901      	ldr	r1, [sp, #4]
 802b992:	9a00      	ldr	r2, [sp, #0]
 802b994:	1ac9      	subs	r1, r1, r3
 802b996:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802b998:	9101      	str	r1, [sp, #4]
 802b99a:	1ad2      	subs	r2, r2, r3
 802b99c:	2a00      	cmp	r2, #0
 802b99e:	9200      	str	r2, [sp, #0]
 802b9a0:	db1c      	blt.n	802b9dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802b9a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802b9a4:	429a      	cmp	r2, r3
 802b9a6:	bfac      	ite	ge
 802b9a8:	2002      	movge	r0, #2
 802b9aa:	2000      	movlt	r0, #0
 802b9ac:	2900      	cmp	r1, #0
 802b9ae:	db17      	blt.n	802b9e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802b9b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802b9b2:	4299      	cmp	r1, r3
 802b9b4:	bfac      	ite	ge
 802b9b6:	2308      	movge	r3, #8
 802b9b8:	2300      	movlt	r3, #0
 802b9ba:	4303      	orrs	r3, r0
 802b9bc:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802b9c0:	b2dd      	uxtb	r5, r3
 802b9c2:	b978      	cbnz	r0, 802b9e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802b9c4:	f104 0014 	add.w	r0, r4, #20
 802b9c8:	f7ff fd66 	bl	802b498 <_ZN8touchgfx10Rasterizer6lineToEii>
 802b9cc:	9b01      	ldr	r3, [sp, #4]
 802b9ce:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802b9d2:	6623      	str	r3, [r4, #96]	@ 0x60
 802b9d4:	9b00      	ldr	r3, [sp, #0]
 802b9d6:	6663      	str	r3, [r4, #100]	@ 0x64
 802b9d8:	b002      	add	sp, #8
 802b9da:	bd70      	pop	{r4, r5, r6, pc}
 802b9dc:	2001      	movs	r0, #1
 802b9de:	e7e5      	b.n	802b9ac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802b9e0:	2304      	movs	r3, #4
 802b9e2:	e7ea      	b.n	802b9ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802b9e4:	b113      	cbz	r3, 802b9ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802b9e6:	ea10 0305 	ands.w	r3, r0, r5
 802b9ea:	d11c      	bne.n	802ba26 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802b9ec:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802b9f0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802b9f4:	f104 0614 	add.w	r6, r4, #20
 802b9f8:	b98b      	cbnz	r3, 802ba1e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802b9fa:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802b9fe:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802ba02:	4298      	cmp	r0, r3
 802ba04:	d802      	bhi.n	802ba0c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802ba06:	4630      	mov	r0, r6
 802ba08:	f7ec fb02 	bl	8018010 <_ZN8touchgfx7Outline6moveToEii>
 802ba0c:	2301      	movs	r3, #1
 802ba0e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802ba12:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802ba16:	e9dd 2100 	ldrd	r2, r1, [sp]
 802ba1a:	4630      	mov	r0, r6
 802ba1c:	e7d4      	b.n	802b9c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802ba1e:	4630      	mov	r0, r6
 802ba20:	f7ff fd3a 	bl	802b498 <_ZN8touchgfx10Rasterizer6lineToEii>
 802ba24:	e7f7      	b.n	802ba16 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802ba26:	461d      	mov	r5, r3
 802ba28:	e7d0      	b.n	802b9cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802ba2c <_ZN8touchgfx6CanvasD1Ev>:
 802ba2c:	b510      	push	{r4, lr}
 802ba2e:	4604      	mov	r4, r0
 802ba30:	4b03      	ldr	r3, [pc, #12]	@ (802ba40 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802ba32:	f840 3b14 	str.w	r3, [r0], #20
 802ba36:	f7eb fde5 	bl	8017604 <_ZN8touchgfx7OutlineD1Ev>
 802ba3a:	4620      	mov	r0, r4
 802ba3c:	bd10      	pop	{r4, pc}
 802ba3e:	bf00      	nop
 802ba40:	0802fdb4 	.word	0x0802fdb4

0802ba44 <_ZN8touchgfx6CanvasD0Ev>:
 802ba44:	b510      	push	{r4, lr}
 802ba46:	4604      	mov	r4, r0
 802ba48:	f7ff fff0 	bl	802ba2c <_ZN8touchgfx6CanvasD1Ev>
 802ba4c:	4620      	mov	r0, r4
 802ba4e:	2174      	movs	r1, #116	@ 0x74
 802ba50:	f000 f807 	bl	802ba62 <_ZdlPvj>
 802ba54:	4620      	mov	r0, r4
 802ba56:	bd10      	pop	{r4, pc}

0802ba58 <__aeabi_atexit>:
 802ba58:	460b      	mov	r3, r1
 802ba5a:	4601      	mov	r1, r0
 802ba5c:	4618      	mov	r0, r3
 802ba5e:	f000 b90f 	b.w	802bc80 <__cxa_atexit>

0802ba62 <_ZdlPvj>:
 802ba62:	f000 b812 	b.w	802ba8a <_ZdlPv>

0802ba66 <__cxa_guard_acquire>:
 802ba66:	6802      	ldr	r2, [r0, #0]
 802ba68:	4603      	mov	r3, r0
 802ba6a:	07d2      	lsls	r2, r2, #31
 802ba6c:	d405      	bmi.n	802ba7a <__cxa_guard_acquire+0x14>
 802ba6e:	7842      	ldrb	r2, [r0, #1]
 802ba70:	b102      	cbz	r2, 802ba74 <__cxa_guard_acquire+0xe>
 802ba72:	deff      	udf	#255	@ 0xff
 802ba74:	2001      	movs	r0, #1
 802ba76:	7058      	strb	r0, [r3, #1]
 802ba78:	4770      	bx	lr
 802ba7a:	2000      	movs	r0, #0
 802ba7c:	4770      	bx	lr

0802ba7e <__cxa_guard_release>:
 802ba7e:	2301      	movs	r3, #1
 802ba80:	6003      	str	r3, [r0, #0]
 802ba82:	4770      	bx	lr

0802ba84 <__cxa_pure_virtual>:
 802ba84:	b508      	push	{r3, lr}
 802ba86:	f000 f80d 	bl	802baa4 <_ZSt9terminatev>

0802ba8a <_ZdlPv>:
 802ba8a:	f000 b843 	b.w	802bb14 <free>

0802ba8e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802ba8e:	b508      	push	{r3, lr}
 802ba90:	4780      	blx	r0
 802ba92:	f000 f80c 	bl	802baae <abort>
	...

0802ba98 <_ZSt13get_terminatev>:
 802ba98:	4b01      	ldr	r3, [pc, #4]	@ (802baa0 <_ZSt13get_terminatev+0x8>)
 802ba9a:	e8d3 0faf 	lda	r0, [r3]
 802ba9e:	4770      	bx	lr
 802baa0:	200000a0 	.word	0x200000a0

0802baa4 <_ZSt9terminatev>:
 802baa4:	b508      	push	{r3, lr}
 802baa6:	f7ff fff7 	bl	802ba98 <_ZSt13get_terminatev>
 802baaa:	f7ff fff0 	bl	802ba8e <_ZN10__cxxabiv111__terminateEPFvvE>

0802baae <abort>:
 802baae:	2006      	movs	r0, #6
 802bab0:	b508      	push	{r3, lr}
 802bab2:	f000 fa3b 	bl	802bf2c <raise>
 802bab6:	2001      	movs	r0, #1
 802bab8:	f7d5 fa46 	bl	8000f48 <_exit>

0802babc <__assert_func>:
 802babc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802babe:	4614      	mov	r4, r2
 802bac0:	461a      	mov	r2, r3
 802bac2:	4b09      	ldr	r3, [pc, #36]	@ (802bae8 <__assert_func+0x2c>)
 802bac4:	4605      	mov	r5, r0
 802bac6:	681b      	ldr	r3, [r3, #0]
 802bac8:	68d8      	ldr	r0, [r3, #12]
 802baca:	b954      	cbnz	r4, 802bae2 <__assert_func+0x26>
 802bacc:	4b07      	ldr	r3, [pc, #28]	@ (802baec <__assert_func+0x30>)
 802bace:	461c      	mov	r4, r3
 802bad0:	9100      	str	r1, [sp, #0]
 802bad2:	4907      	ldr	r1, [pc, #28]	@ (802baf0 <__assert_func+0x34>)
 802bad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802bad8:	462b      	mov	r3, r5
 802bada:	f000 f983 	bl	802bde4 <fiprintf>
 802bade:	f7ff ffe6 	bl	802baae <abort>
 802bae2:	4b04      	ldr	r3, [pc, #16]	@ (802baf4 <__assert_func+0x38>)
 802bae4:	e7f4      	b.n	802bad0 <__assert_func+0x14>
 802bae6:	bf00      	nop
 802bae8:	200000b0 	.word	0x200000b0
 802baec:	0802fdfb 	.word	0x0802fdfb
 802baf0:	0802fdcd 	.word	0x0802fdcd
 802baf4:	0802fdc0 	.word	0x0802fdc0

0802baf8 <atexit>:
 802baf8:	2300      	movs	r3, #0
 802bafa:	4601      	mov	r1, r0
 802bafc:	461a      	mov	r2, r3
 802bafe:	4618      	mov	r0, r3
 802bb00:	f000 bb16 	b.w	802c130 <__register_exitproc>

0802bb04 <malloc>:
 802bb04:	4b02      	ldr	r3, [pc, #8]	@ (802bb10 <malloc+0xc>)
 802bb06:	4601      	mov	r1, r0
 802bb08:	6818      	ldr	r0, [r3, #0]
 802bb0a:	f000 b82d 	b.w	802bb68 <_malloc_r>
 802bb0e:	bf00      	nop
 802bb10:	200000b0 	.word	0x200000b0

0802bb14 <free>:
 802bb14:	4b02      	ldr	r3, [pc, #8]	@ (802bb20 <free+0xc>)
 802bb16:	4601      	mov	r1, r0
 802bb18:	6818      	ldr	r0, [r3, #0]
 802bb1a:	f000 bb67 	b.w	802c1ec <_free_r>
 802bb1e:	bf00      	nop
 802bb20:	200000b0 	.word	0x200000b0

0802bb24 <sbrk_aligned>:
 802bb24:	b570      	push	{r4, r5, r6, lr}
 802bb26:	4e0f      	ldr	r6, [pc, #60]	@ (802bb64 <sbrk_aligned+0x40>)
 802bb28:	460c      	mov	r4, r1
 802bb2a:	4605      	mov	r5, r0
 802bb2c:	6831      	ldr	r1, [r6, #0]
 802bb2e:	b911      	cbnz	r1, 802bb36 <sbrk_aligned+0x12>
 802bb30:	f000 faa2 	bl	802c078 <_sbrk_r>
 802bb34:	6030      	str	r0, [r6, #0]
 802bb36:	4621      	mov	r1, r4
 802bb38:	4628      	mov	r0, r5
 802bb3a:	f000 fa9d 	bl	802c078 <_sbrk_r>
 802bb3e:	1c43      	adds	r3, r0, #1
 802bb40:	d103      	bne.n	802bb4a <sbrk_aligned+0x26>
 802bb42:	f04f 34ff 	mov.w	r4, #4294967295
 802bb46:	4620      	mov	r0, r4
 802bb48:	bd70      	pop	{r4, r5, r6, pc}
 802bb4a:	1cc4      	adds	r4, r0, #3
 802bb4c:	f024 0403 	bic.w	r4, r4, #3
 802bb50:	42a0      	cmp	r0, r4
 802bb52:	d0f8      	beq.n	802bb46 <sbrk_aligned+0x22>
 802bb54:	1a21      	subs	r1, r4, r0
 802bb56:	4628      	mov	r0, r5
 802bb58:	f000 fa8e 	bl	802c078 <_sbrk_r>
 802bb5c:	3001      	adds	r0, #1
 802bb5e:	d1f2      	bne.n	802bb46 <sbrk_aligned+0x22>
 802bb60:	e7ef      	b.n	802bb42 <sbrk_aligned+0x1e>
 802bb62:	bf00      	nop
 802bb64:	20012988 	.word	0x20012988

0802bb68 <_malloc_r>:
 802bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bb6c:	1ccd      	adds	r5, r1, #3
 802bb6e:	4606      	mov	r6, r0
 802bb70:	f025 0503 	bic.w	r5, r5, #3
 802bb74:	3508      	adds	r5, #8
 802bb76:	2d0c      	cmp	r5, #12
 802bb78:	bf38      	it	cc
 802bb7a:	250c      	movcc	r5, #12
 802bb7c:	2d00      	cmp	r5, #0
 802bb7e:	db01      	blt.n	802bb84 <_malloc_r+0x1c>
 802bb80:	42a9      	cmp	r1, r5
 802bb82:	d904      	bls.n	802bb8e <_malloc_r+0x26>
 802bb84:	230c      	movs	r3, #12
 802bb86:	6033      	str	r3, [r6, #0]
 802bb88:	2000      	movs	r0, #0
 802bb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bb8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802bc64 <_malloc_r+0xfc>
 802bb92:	f000 f869 	bl	802bc68 <__malloc_lock>
 802bb96:	f8d8 3000 	ldr.w	r3, [r8]
 802bb9a:	461c      	mov	r4, r3
 802bb9c:	bb44      	cbnz	r4, 802bbf0 <_malloc_r+0x88>
 802bb9e:	4629      	mov	r1, r5
 802bba0:	4630      	mov	r0, r6
 802bba2:	f7ff ffbf 	bl	802bb24 <sbrk_aligned>
 802bba6:	1c43      	adds	r3, r0, #1
 802bba8:	4604      	mov	r4, r0
 802bbaa:	d158      	bne.n	802bc5e <_malloc_r+0xf6>
 802bbac:	f8d8 4000 	ldr.w	r4, [r8]
 802bbb0:	4627      	mov	r7, r4
 802bbb2:	2f00      	cmp	r7, #0
 802bbb4:	d143      	bne.n	802bc3e <_malloc_r+0xd6>
 802bbb6:	2c00      	cmp	r4, #0
 802bbb8:	d04b      	beq.n	802bc52 <_malloc_r+0xea>
 802bbba:	6823      	ldr	r3, [r4, #0]
 802bbbc:	4639      	mov	r1, r7
 802bbbe:	4630      	mov	r0, r6
 802bbc0:	eb04 0903 	add.w	r9, r4, r3
 802bbc4:	f000 fa58 	bl	802c078 <_sbrk_r>
 802bbc8:	4581      	cmp	r9, r0
 802bbca:	d142      	bne.n	802bc52 <_malloc_r+0xea>
 802bbcc:	6821      	ldr	r1, [r4, #0]
 802bbce:	4630      	mov	r0, r6
 802bbd0:	1a6d      	subs	r5, r5, r1
 802bbd2:	4629      	mov	r1, r5
 802bbd4:	f7ff ffa6 	bl	802bb24 <sbrk_aligned>
 802bbd8:	3001      	adds	r0, #1
 802bbda:	d03a      	beq.n	802bc52 <_malloc_r+0xea>
 802bbdc:	6823      	ldr	r3, [r4, #0]
 802bbde:	442b      	add	r3, r5
 802bbe0:	6023      	str	r3, [r4, #0]
 802bbe2:	f8d8 3000 	ldr.w	r3, [r8]
 802bbe6:	685a      	ldr	r2, [r3, #4]
 802bbe8:	bb62      	cbnz	r2, 802bc44 <_malloc_r+0xdc>
 802bbea:	f8c8 7000 	str.w	r7, [r8]
 802bbee:	e00f      	b.n	802bc10 <_malloc_r+0xa8>
 802bbf0:	6822      	ldr	r2, [r4, #0]
 802bbf2:	1b52      	subs	r2, r2, r5
 802bbf4:	d420      	bmi.n	802bc38 <_malloc_r+0xd0>
 802bbf6:	2a0b      	cmp	r2, #11
 802bbf8:	d917      	bls.n	802bc2a <_malloc_r+0xc2>
 802bbfa:	1961      	adds	r1, r4, r5
 802bbfc:	42a3      	cmp	r3, r4
 802bbfe:	6025      	str	r5, [r4, #0]
 802bc00:	bf18      	it	ne
 802bc02:	6059      	strne	r1, [r3, #4]
 802bc04:	6863      	ldr	r3, [r4, #4]
 802bc06:	bf08      	it	eq
 802bc08:	f8c8 1000 	streq.w	r1, [r8]
 802bc0c:	5162      	str	r2, [r4, r5]
 802bc0e:	604b      	str	r3, [r1, #4]
 802bc10:	4630      	mov	r0, r6
 802bc12:	f000 f82f 	bl	802bc74 <__malloc_unlock>
 802bc16:	f104 000b 	add.w	r0, r4, #11
 802bc1a:	1d23      	adds	r3, r4, #4
 802bc1c:	f020 0007 	bic.w	r0, r0, #7
 802bc20:	1ac2      	subs	r2, r0, r3
 802bc22:	bf1c      	itt	ne
 802bc24:	1a1b      	subne	r3, r3, r0
 802bc26:	50a3      	strne	r3, [r4, r2]
 802bc28:	e7af      	b.n	802bb8a <_malloc_r+0x22>
 802bc2a:	6862      	ldr	r2, [r4, #4]
 802bc2c:	42a3      	cmp	r3, r4
 802bc2e:	bf0c      	ite	eq
 802bc30:	f8c8 2000 	streq.w	r2, [r8]
 802bc34:	605a      	strne	r2, [r3, #4]
 802bc36:	e7eb      	b.n	802bc10 <_malloc_r+0xa8>
 802bc38:	4623      	mov	r3, r4
 802bc3a:	6864      	ldr	r4, [r4, #4]
 802bc3c:	e7ae      	b.n	802bb9c <_malloc_r+0x34>
 802bc3e:	463c      	mov	r4, r7
 802bc40:	687f      	ldr	r7, [r7, #4]
 802bc42:	e7b6      	b.n	802bbb2 <_malloc_r+0x4a>
 802bc44:	461a      	mov	r2, r3
 802bc46:	685b      	ldr	r3, [r3, #4]
 802bc48:	42a3      	cmp	r3, r4
 802bc4a:	d1fb      	bne.n	802bc44 <_malloc_r+0xdc>
 802bc4c:	2300      	movs	r3, #0
 802bc4e:	6053      	str	r3, [r2, #4]
 802bc50:	e7de      	b.n	802bc10 <_malloc_r+0xa8>
 802bc52:	230c      	movs	r3, #12
 802bc54:	4630      	mov	r0, r6
 802bc56:	6033      	str	r3, [r6, #0]
 802bc58:	f000 f80c 	bl	802bc74 <__malloc_unlock>
 802bc5c:	e794      	b.n	802bb88 <_malloc_r+0x20>
 802bc5e:	6005      	str	r5, [r0, #0]
 802bc60:	e7d6      	b.n	802bc10 <_malloc_r+0xa8>
 802bc62:	bf00      	nop
 802bc64:	2001298c 	.word	0x2001298c

0802bc68 <__malloc_lock>:
 802bc68:	4801      	ldr	r0, [pc, #4]	@ (802bc70 <__malloc_lock+0x8>)
 802bc6a:	f000 ba52 	b.w	802c112 <__retarget_lock_acquire_recursive>
 802bc6e:	bf00      	nop
 802bc70:	20012ad0 	.word	0x20012ad0

0802bc74 <__malloc_unlock>:
 802bc74:	4801      	ldr	r0, [pc, #4]	@ (802bc7c <__malloc_unlock+0x8>)
 802bc76:	f000 ba4d 	b.w	802c114 <__retarget_lock_release_recursive>
 802bc7a:	bf00      	nop
 802bc7c:	20012ad0 	.word	0x20012ad0

0802bc80 <__cxa_atexit>:
 802bc80:	b510      	push	{r4, lr}
 802bc82:	4604      	mov	r4, r0
 802bc84:	4804      	ldr	r0, [pc, #16]	@ (802bc98 <__cxa_atexit+0x18>)
 802bc86:	4613      	mov	r3, r2
 802bc88:	b120      	cbz	r0, 802bc94 <__cxa_atexit+0x14>
 802bc8a:	460a      	mov	r2, r1
 802bc8c:	2002      	movs	r0, #2
 802bc8e:	4621      	mov	r1, r4
 802bc90:	f000 fa4e 	bl	802c130 <__register_exitproc>
 802bc94:	bd10      	pop	{r4, pc}
 802bc96:	bf00      	nop
 802bc98:	0802c131 	.word	0x0802c131

0802bc9c <std>:
 802bc9c:	2300      	movs	r3, #0
 802bc9e:	b510      	push	{r4, lr}
 802bca0:	4604      	mov	r4, r0
 802bca2:	6083      	str	r3, [r0, #8]
 802bca4:	8181      	strh	r1, [r0, #12]
 802bca6:	4619      	mov	r1, r3
 802bca8:	6643      	str	r3, [r0, #100]	@ 0x64
 802bcaa:	81c2      	strh	r2, [r0, #14]
 802bcac:	2208      	movs	r2, #8
 802bcae:	6183      	str	r3, [r0, #24]
 802bcb0:	e9c0 3300 	strd	r3, r3, [r0]
 802bcb4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bcb8:	305c      	adds	r0, #92	@ 0x5c
 802bcba:	f000 f906 	bl	802beca <memset>
 802bcbe:	4b0d      	ldr	r3, [pc, #52]	@ (802bcf4 <std+0x58>)
 802bcc0:	6224      	str	r4, [r4, #32]
 802bcc2:	6263      	str	r3, [r4, #36]	@ 0x24
 802bcc4:	4b0c      	ldr	r3, [pc, #48]	@ (802bcf8 <std+0x5c>)
 802bcc6:	62a3      	str	r3, [r4, #40]	@ 0x28
 802bcc8:	4b0c      	ldr	r3, [pc, #48]	@ (802bcfc <std+0x60>)
 802bcca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802bccc:	4b0c      	ldr	r3, [pc, #48]	@ (802bd00 <std+0x64>)
 802bcce:	6323      	str	r3, [r4, #48]	@ 0x30
 802bcd0:	4b0c      	ldr	r3, [pc, #48]	@ (802bd04 <std+0x68>)
 802bcd2:	429c      	cmp	r4, r3
 802bcd4:	d006      	beq.n	802bce4 <std+0x48>
 802bcd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802bcda:	4294      	cmp	r4, r2
 802bcdc:	d002      	beq.n	802bce4 <std+0x48>
 802bcde:	33d0      	adds	r3, #208	@ 0xd0
 802bce0:	429c      	cmp	r4, r3
 802bce2:	d105      	bne.n	802bcf0 <std+0x54>
 802bce4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802bce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bcec:	f000 ba10 	b.w	802c110 <__retarget_lock_init_recursive>
 802bcf0:	bd10      	pop	{r4, pc}
 802bcf2:	bf00      	nop
 802bcf4:	0802be45 	.word	0x0802be45
 802bcf8:	0802be67 	.word	0x0802be67
 802bcfc:	0802be9f 	.word	0x0802be9f
 802bd00:	0802bec3 	.word	0x0802bec3
 802bd04:	20012990 	.word	0x20012990

0802bd08 <stdio_exit_handler>:
 802bd08:	4a02      	ldr	r2, [pc, #8]	@ (802bd14 <stdio_exit_handler+0xc>)
 802bd0a:	4903      	ldr	r1, [pc, #12]	@ (802bd18 <stdio_exit_handler+0x10>)
 802bd0c:	4803      	ldr	r0, [pc, #12]	@ (802bd1c <stdio_exit_handler+0x14>)
 802bd0e:	f000 b87b 	b.w	802be08 <_fwalk_sglue>
 802bd12:	bf00      	nop
 802bd14:	200000a4 	.word	0x200000a4
 802bd18:	0802c931 	.word	0x0802c931
 802bd1c:	200000b4 	.word	0x200000b4

0802bd20 <cleanup_stdio>:
 802bd20:	6841      	ldr	r1, [r0, #4]
 802bd22:	4b0c      	ldr	r3, [pc, #48]	@ (802bd54 <cleanup_stdio+0x34>)
 802bd24:	4299      	cmp	r1, r3
 802bd26:	b510      	push	{r4, lr}
 802bd28:	4604      	mov	r4, r0
 802bd2a:	d001      	beq.n	802bd30 <cleanup_stdio+0x10>
 802bd2c:	f000 fe00 	bl	802c930 <_fflush_r>
 802bd30:	68a1      	ldr	r1, [r4, #8]
 802bd32:	4b09      	ldr	r3, [pc, #36]	@ (802bd58 <cleanup_stdio+0x38>)
 802bd34:	4299      	cmp	r1, r3
 802bd36:	d002      	beq.n	802bd3e <cleanup_stdio+0x1e>
 802bd38:	4620      	mov	r0, r4
 802bd3a:	f000 fdf9 	bl	802c930 <_fflush_r>
 802bd3e:	68e1      	ldr	r1, [r4, #12]
 802bd40:	4b06      	ldr	r3, [pc, #24]	@ (802bd5c <cleanup_stdio+0x3c>)
 802bd42:	4299      	cmp	r1, r3
 802bd44:	d004      	beq.n	802bd50 <cleanup_stdio+0x30>
 802bd46:	4620      	mov	r0, r4
 802bd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bd4c:	f000 bdf0 	b.w	802c930 <_fflush_r>
 802bd50:	bd10      	pop	{r4, pc}
 802bd52:	bf00      	nop
 802bd54:	20012990 	.word	0x20012990
 802bd58:	200129f8 	.word	0x200129f8
 802bd5c:	20012a60 	.word	0x20012a60

0802bd60 <global_stdio_init.part.0>:
 802bd60:	b510      	push	{r4, lr}
 802bd62:	4b0b      	ldr	r3, [pc, #44]	@ (802bd90 <global_stdio_init.part.0+0x30>)
 802bd64:	2104      	movs	r1, #4
 802bd66:	4c0b      	ldr	r4, [pc, #44]	@ (802bd94 <global_stdio_init.part.0+0x34>)
 802bd68:	4a0b      	ldr	r2, [pc, #44]	@ (802bd98 <global_stdio_init.part.0+0x38>)
 802bd6a:	4620      	mov	r0, r4
 802bd6c:	601a      	str	r2, [r3, #0]
 802bd6e:	2200      	movs	r2, #0
 802bd70:	f7ff ff94 	bl	802bc9c <std>
 802bd74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802bd78:	2201      	movs	r2, #1
 802bd7a:	2109      	movs	r1, #9
 802bd7c:	f7ff ff8e 	bl	802bc9c <std>
 802bd80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802bd84:	2202      	movs	r2, #2
 802bd86:	2112      	movs	r1, #18
 802bd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bd8c:	f7ff bf86 	b.w	802bc9c <std>
 802bd90:	20012ac8 	.word	0x20012ac8
 802bd94:	20012990 	.word	0x20012990
 802bd98:	0802bd09 	.word	0x0802bd09

0802bd9c <__sfp_lock_acquire>:
 802bd9c:	4801      	ldr	r0, [pc, #4]	@ (802bda4 <__sfp_lock_acquire+0x8>)
 802bd9e:	f000 b9b8 	b.w	802c112 <__retarget_lock_acquire_recursive>
 802bda2:	bf00      	nop
 802bda4:	20012ad2 	.word	0x20012ad2

0802bda8 <__sfp_lock_release>:
 802bda8:	4801      	ldr	r0, [pc, #4]	@ (802bdb0 <__sfp_lock_release+0x8>)
 802bdaa:	f000 b9b3 	b.w	802c114 <__retarget_lock_release_recursive>
 802bdae:	bf00      	nop
 802bdb0:	20012ad2 	.word	0x20012ad2

0802bdb4 <__sinit>:
 802bdb4:	b510      	push	{r4, lr}
 802bdb6:	4604      	mov	r4, r0
 802bdb8:	f7ff fff0 	bl	802bd9c <__sfp_lock_acquire>
 802bdbc:	6a23      	ldr	r3, [r4, #32]
 802bdbe:	b11b      	cbz	r3, 802bdc8 <__sinit+0x14>
 802bdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bdc4:	f7ff bff0 	b.w	802bda8 <__sfp_lock_release>
 802bdc8:	4b04      	ldr	r3, [pc, #16]	@ (802bddc <__sinit+0x28>)
 802bdca:	6223      	str	r3, [r4, #32]
 802bdcc:	4b04      	ldr	r3, [pc, #16]	@ (802bde0 <__sinit+0x2c>)
 802bdce:	681b      	ldr	r3, [r3, #0]
 802bdd0:	2b00      	cmp	r3, #0
 802bdd2:	d1f5      	bne.n	802bdc0 <__sinit+0xc>
 802bdd4:	f7ff ffc4 	bl	802bd60 <global_stdio_init.part.0>
 802bdd8:	e7f2      	b.n	802bdc0 <__sinit+0xc>
 802bdda:	bf00      	nop
 802bddc:	0802bd21 	.word	0x0802bd21
 802bde0:	20012ac8 	.word	0x20012ac8

0802bde4 <fiprintf>:
 802bde4:	b40e      	push	{r1, r2, r3}
 802bde6:	b503      	push	{r0, r1, lr}
 802bde8:	ab03      	add	r3, sp, #12
 802bdea:	4601      	mov	r1, r0
 802bdec:	4805      	ldr	r0, [pc, #20]	@ (802be04 <fiprintf+0x20>)
 802bdee:	f853 2b04 	ldr.w	r2, [r3], #4
 802bdf2:	6800      	ldr	r0, [r0, #0]
 802bdf4:	9301      	str	r3, [sp, #4]
 802bdf6:	f000 fa6d 	bl	802c2d4 <_vfiprintf_r>
 802bdfa:	b002      	add	sp, #8
 802bdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 802be00:	b003      	add	sp, #12
 802be02:	4770      	bx	lr
 802be04:	200000b0 	.word	0x200000b0

0802be08 <_fwalk_sglue>:
 802be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802be0c:	4607      	mov	r7, r0
 802be0e:	4688      	mov	r8, r1
 802be10:	4614      	mov	r4, r2
 802be12:	2600      	movs	r6, #0
 802be14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802be18:	f1b9 0901 	subs.w	r9, r9, #1
 802be1c:	d505      	bpl.n	802be2a <_fwalk_sglue+0x22>
 802be1e:	6824      	ldr	r4, [r4, #0]
 802be20:	2c00      	cmp	r4, #0
 802be22:	d1f7      	bne.n	802be14 <_fwalk_sglue+0xc>
 802be24:	4630      	mov	r0, r6
 802be26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802be2a:	89ab      	ldrh	r3, [r5, #12]
 802be2c:	2b01      	cmp	r3, #1
 802be2e:	d907      	bls.n	802be40 <_fwalk_sglue+0x38>
 802be30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802be34:	3301      	adds	r3, #1
 802be36:	d003      	beq.n	802be40 <_fwalk_sglue+0x38>
 802be38:	4629      	mov	r1, r5
 802be3a:	4638      	mov	r0, r7
 802be3c:	47c0      	blx	r8
 802be3e:	4306      	orrs	r6, r0
 802be40:	3568      	adds	r5, #104	@ 0x68
 802be42:	e7e9      	b.n	802be18 <_fwalk_sglue+0x10>

0802be44 <__sread>:
 802be44:	b510      	push	{r4, lr}
 802be46:	460c      	mov	r4, r1
 802be48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be4c:	f000 f8ee 	bl	802c02c <_read_r>
 802be50:	2800      	cmp	r0, #0
 802be52:	bfab      	itete	ge
 802be54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802be56:	89a3      	ldrhlt	r3, [r4, #12]
 802be58:	181b      	addge	r3, r3, r0
 802be5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802be5e:	bfac      	ite	ge
 802be60:	6563      	strge	r3, [r4, #84]	@ 0x54
 802be62:	81a3      	strhlt	r3, [r4, #12]
 802be64:	bd10      	pop	{r4, pc}

0802be66 <__swrite>:
 802be66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802be6a:	461f      	mov	r7, r3
 802be6c:	898b      	ldrh	r3, [r1, #12]
 802be6e:	4605      	mov	r5, r0
 802be70:	460c      	mov	r4, r1
 802be72:	05db      	lsls	r3, r3, #23
 802be74:	4616      	mov	r6, r2
 802be76:	d505      	bpl.n	802be84 <__swrite+0x1e>
 802be78:	2302      	movs	r3, #2
 802be7a:	2200      	movs	r2, #0
 802be7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be80:	f000 f8c2 	bl	802c008 <_lseek_r>
 802be84:	89a3      	ldrh	r3, [r4, #12]
 802be86:	4632      	mov	r2, r6
 802be88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802be8c:	4628      	mov	r0, r5
 802be8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802be92:	81a3      	strh	r3, [r4, #12]
 802be94:	463b      	mov	r3, r7
 802be96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802be9a:	f000 b8fd 	b.w	802c098 <_write_r>

0802be9e <__sseek>:
 802be9e:	b510      	push	{r4, lr}
 802bea0:	460c      	mov	r4, r1
 802bea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bea6:	f000 f8af 	bl	802c008 <_lseek_r>
 802beaa:	1c43      	adds	r3, r0, #1
 802beac:	89a3      	ldrh	r3, [r4, #12]
 802beae:	bf15      	itete	ne
 802beb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 802beb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802beb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802beba:	81a3      	strheq	r3, [r4, #12]
 802bebc:	bf18      	it	ne
 802bebe:	81a3      	strhne	r3, [r4, #12]
 802bec0:	bd10      	pop	{r4, pc}

0802bec2 <__sclose>:
 802bec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bec6:	f000 b839 	b.w	802bf3c <_close_r>

0802beca <memset>:
 802beca:	4402      	add	r2, r0
 802becc:	4603      	mov	r3, r0
 802bece:	4293      	cmp	r3, r2
 802bed0:	d100      	bne.n	802bed4 <memset+0xa>
 802bed2:	4770      	bx	lr
 802bed4:	f803 1b01 	strb.w	r1, [r3], #1
 802bed8:	e7f9      	b.n	802bece <memset+0x4>

0802beda <_raise_r>:
 802beda:	291f      	cmp	r1, #31
 802bedc:	b538      	push	{r3, r4, r5, lr}
 802bede:	4605      	mov	r5, r0
 802bee0:	460c      	mov	r4, r1
 802bee2:	d904      	bls.n	802beee <_raise_r+0x14>
 802bee4:	2316      	movs	r3, #22
 802bee6:	6003      	str	r3, [r0, #0]
 802bee8:	f04f 30ff 	mov.w	r0, #4294967295
 802beec:	bd38      	pop	{r3, r4, r5, pc}
 802beee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802bef0:	b112      	cbz	r2, 802bef8 <_raise_r+0x1e>
 802bef2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bef6:	b94b      	cbnz	r3, 802bf0c <_raise_r+0x32>
 802bef8:	4628      	mov	r0, r5
 802befa:	f000 f8bb 	bl	802c074 <_getpid_r>
 802befe:	4622      	mov	r2, r4
 802bf00:	4601      	mov	r1, r0
 802bf02:	4628      	mov	r0, r5
 802bf04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bf08:	f000 b8a2 	b.w	802c050 <_kill_r>
 802bf0c:	2b01      	cmp	r3, #1
 802bf0e:	d00a      	beq.n	802bf26 <_raise_r+0x4c>
 802bf10:	1c59      	adds	r1, r3, #1
 802bf12:	d103      	bne.n	802bf1c <_raise_r+0x42>
 802bf14:	2316      	movs	r3, #22
 802bf16:	6003      	str	r3, [r0, #0]
 802bf18:	2001      	movs	r0, #1
 802bf1a:	e7e7      	b.n	802beec <_raise_r+0x12>
 802bf1c:	2100      	movs	r1, #0
 802bf1e:	4620      	mov	r0, r4
 802bf20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802bf24:	4798      	blx	r3
 802bf26:	2000      	movs	r0, #0
 802bf28:	e7e0      	b.n	802beec <_raise_r+0x12>
	...

0802bf2c <raise>:
 802bf2c:	4b02      	ldr	r3, [pc, #8]	@ (802bf38 <raise+0xc>)
 802bf2e:	4601      	mov	r1, r0
 802bf30:	6818      	ldr	r0, [r3, #0]
 802bf32:	f7ff bfd2 	b.w	802beda <_raise_r>
 802bf36:	bf00      	nop
 802bf38:	200000b0 	.word	0x200000b0

0802bf3c <_close_r>:
 802bf3c:	b538      	push	{r3, r4, r5, lr}
 802bf3e:	2300      	movs	r3, #0
 802bf40:	4d05      	ldr	r5, [pc, #20]	@ (802bf58 <_close_r+0x1c>)
 802bf42:	4604      	mov	r4, r0
 802bf44:	4608      	mov	r0, r1
 802bf46:	602b      	str	r3, [r5, #0]
 802bf48:	f7d5 f842 	bl	8000fd0 <_close>
 802bf4c:	1c43      	adds	r3, r0, #1
 802bf4e:	d102      	bne.n	802bf56 <_close_r+0x1a>
 802bf50:	682b      	ldr	r3, [r5, #0]
 802bf52:	b103      	cbz	r3, 802bf56 <_close_r+0x1a>
 802bf54:	6023      	str	r3, [r4, #0]
 802bf56:	bd38      	pop	{r3, r4, r5, pc}
 802bf58:	20012acc 	.word	0x20012acc

0802bf5c <_reclaim_reent>:
 802bf5c:	4b29      	ldr	r3, [pc, #164]	@ (802c004 <_reclaim_reent+0xa8>)
 802bf5e:	681b      	ldr	r3, [r3, #0]
 802bf60:	4283      	cmp	r3, r0
 802bf62:	b570      	push	{r4, r5, r6, lr}
 802bf64:	4604      	mov	r4, r0
 802bf66:	d04b      	beq.n	802c000 <_reclaim_reent+0xa4>
 802bf68:	69c3      	ldr	r3, [r0, #28]
 802bf6a:	b1ab      	cbz	r3, 802bf98 <_reclaim_reent+0x3c>
 802bf6c:	68db      	ldr	r3, [r3, #12]
 802bf6e:	b16b      	cbz	r3, 802bf8c <_reclaim_reent+0x30>
 802bf70:	2500      	movs	r5, #0
 802bf72:	69e3      	ldr	r3, [r4, #28]
 802bf74:	68db      	ldr	r3, [r3, #12]
 802bf76:	5959      	ldr	r1, [r3, r5]
 802bf78:	2900      	cmp	r1, #0
 802bf7a:	d13b      	bne.n	802bff4 <_reclaim_reent+0x98>
 802bf7c:	3504      	adds	r5, #4
 802bf7e:	2d80      	cmp	r5, #128	@ 0x80
 802bf80:	d1f7      	bne.n	802bf72 <_reclaim_reent+0x16>
 802bf82:	69e3      	ldr	r3, [r4, #28]
 802bf84:	4620      	mov	r0, r4
 802bf86:	68d9      	ldr	r1, [r3, #12]
 802bf88:	f000 f930 	bl	802c1ec <_free_r>
 802bf8c:	69e3      	ldr	r3, [r4, #28]
 802bf8e:	6819      	ldr	r1, [r3, #0]
 802bf90:	b111      	cbz	r1, 802bf98 <_reclaim_reent+0x3c>
 802bf92:	4620      	mov	r0, r4
 802bf94:	f000 f92a 	bl	802c1ec <_free_r>
 802bf98:	6961      	ldr	r1, [r4, #20]
 802bf9a:	b111      	cbz	r1, 802bfa2 <_reclaim_reent+0x46>
 802bf9c:	4620      	mov	r0, r4
 802bf9e:	f000 f925 	bl	802c1ec <_free_r>
 802bfa2:	69e1      	ldr	r1, [r4, #28]
 802bfa4:	b111      	cbz	r1, 802bfac <_reclaim_reent+0x50>
 802bfa6:	4620      	mov	r0, r4
 802bfa8:	f000 f920 	bl	802c1ec <_free_r>
 802bfac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802bfae:	b111      	cbz	r1, 802bfb6 <_reclaim_reent+0x5a>
 802bfb0:	4620      	mov	r0, r4
 802bfb2:	f000 f91b 	bl	802c1ec <_free_r>
 802bfb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bfb8:	b111      	cbz	r1, 802bfc0 <_reclaim_reent+0x64>
 802bfba:	4620      	mov	r0, r4
 802bfbc:	f000 f916 	bl	802c1ec <_free_r>
 802bfc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802bfc2:	b111      	cbz	r1, 802bfca <_reclaim_reent+0x6e>
 802bfc4:	4620      	mov	r0, r4
 802bfc6:	f000 f911 	bl	802c1ec <_free_r>
 802bfca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802bfcc:	b111      	cbz	r1, 802bfd4 <_reclaim_reent+0x78>
 802bfce:	4620      	mov	r0, r4
 802bfd0:	f000 f90c 	bl	802c1ec <_free_r>
 802bfd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802bfd6:	b111      	cbz	r1, 802bfde <_reclaim_reent+0x82>
 802bfd8:	4620      	mov	r0, r4
 802bfda:	f000 f907 	bl	802c1ec <_free_r>
 802bfde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802bfe0:	b111      	cbz	r1, 802bfe8 <_reclaim_reent+0x8c>
 802bfe2:	4620      	mov	r0, r4
 802bfe4:	f000 f902 	bl	802c1ec <_free_r>
 802bfe8:	6a23      	ldr	r3, [r4, #32]
 802bfea:	b14b      	cbz	r3, 802c000 <_reclaim_reent+0xa4>
 802bfec:	4620      	mov	r0, r4
 802bfee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802bff2:	4718      	bx	r3
 802bff4:	680e      	ldr	r6, [r1, #0]
 802bff6:	4620      	mov	r0, r4
 802bff8:	f000 f8f8 	bl	802c1ec <_free_r>
 802bffc:	4631      	mov	r1, r6
 802bffe:	e7bb      	b.n	802bf78 <_reclaim_reent+0x1c>
 802c000:	bd70      	pop	{r4, r5, r6, pc}
 802c002:	bf00      	nop
 802c004:	200000b0 	.word	0x200000b0

0802c008 <_lseek_r>:
 802c008:	b538      	push	{r3, r4, r5, lr}
 802c00a:	4604      	mov	r4, r0
 802c00c:	4d06      	ldr	r5, [pc, #24]	@ (802c028 <_lseek_r+0x20>)
 802c00e:	4608      	mov	r0, r1
 802c010:	4611      	mov	r1, r2
 802c012:	2200      	movs	r2, #0
 802c014:	602a      	str	r2, [r5, #0]
 802c016:	461a      	mov	r2, r3
 802c018:	f7d5 f801 	bl	800101e <_lseek>
 802c01c:	1c43      	adds	r3, r0, #1
 802c01e:	d102      	bne.n	802c026 <_lseek_r+0x1e>
 802c020:	682b      	ldr	r3, [r5, #0]
 802c022:	b103      	cbz	r3, 802c026 <_lseek_r+0x1e>
 802c024:	6023      	str	r3, [r4, #0]
 802c026:	bd38      	pop	{r3, r4, r5, pc}
 802c028:	20012acc 	.word	0x20012acc

0802c02c <_read_r>:
 802c02c:	b538      	push	{r3, r4, r5, lr}
 802c02e:	4604      	mov	r4, r0
 802c030:	4d06      	ldr	r5, [pc, #24]	@ (802c04c <_read_r+0x20>)
 802c032:	4608      	mov	r0, r1
 802c034:	4611      	mov	r1, r2
 802c036:	2200      	movs	r2, #0
 802c038:	602a      	str	r2, [r5, #0]
 802c03a:	461a      	mov	r2, r3
 802c03c:	f7d4 ff8f 	bl	8000f5e <_read>
 802c040:	1c43      	adds	r3, r0, #1
 802c042:	d102      	bne.n	802c04a <_read_r+0x1e>
 802c044:	682b      	ldr	r3, [r5, #0]
 802c046:	b103      	cbz	r3, 802c04a <_read_r+0x1e>
 802c048:	6023      	str	r3, [r4, #0]
 802c04a:	bd38      	pop	{r3, r4, r5, pc}
 802c04c:	20012acc 	.word	0x20012acc

0802c050 <_kill_r>:
 802c050:	b538      	push	{r3, r4, r5, lr}
 802c052:	2300      	movs	r3, #0
 802c054:	4d06      	ldr	r5, [pc, #24]	@ (802c070 <_kill_r+0x20>)
 802c056:	4604      	mov	r4, r0
 802c058:	4608      	mov	r0, r1
 802c05a:	4611      	mov	r1, r2
 802c05c:	602b      	str	r3, [r5, #0]
 802c05e:	f7d4 ff63 	bl	8000f28 <_kill>
 802c062:	1c43      	adds	r3, r0, #1
 802c064:	d102      	bne.n	802c06c <_kill_r+0x1c>
 802c066:	682b      	ldr	r3, [r5, #0]
 802c068:	b103      	cbz	r3, 802c06c <_kill_r+0x1c>
 802c06a:	6023      	str	r3, [r4, #0]
 802c06c:	bd38      	pop	{r3, r4, r5, pc}
 802c06e:	bf00      	nop
 802c070:	20012acc 	.word	0x20012acc

0802c074 <_getpid_r>:
 802c074:	f7d4 bf50 	b.w	8000f18 <_getpid>

0802c078 <_sbrk_r>:
 802c078:	b538      	push	{r3, r4, r5, lr}
 802c07a:	2300      	movs	r3, #0
 802c07c:	4d05      	ldr	r5, [pc, #20]	@ (802c094 <_sbrk_r+0x1c>)
 802c07e:	4604      	mov	r4, r0
 802c080:	4608      	mov	r0, r1
 802c082:	602b      	str	r3, [r5, #0]
 802c084:	f7d4 ffd8 	bl	8001038 <_sbrk>
 802c088:	1c43      	adds	r3, r0, #1
 802c08a:	d102      	bne.n	802c092 <_sbrk_r+0x1a>
 802c08c:	682b      	ldr	r3, [r5, #0]
 802c08e:	b103      	cbz	r3, 802c092 <_sbrk_r+0x1a>
 802c090:	6023      	str	r3, [r4, #0]
 802c092:	bd38      	pop	{r3, r4, r5, pc}
 802c094:	20012acc 	.word	0x20012acc

0802c098 <_write_r>:
 802c098:	b538      	push	{r3, r4, r5, lr}
 802c09a:	4604      	mov	r4, r0
 802c09c:	4d06      	ldr	r5, [pc, #24]	@ (802c0b8 <_write_r+0x20>)
 802c09e:	4608      	mov	r0, r1
 802c0a0:	4611      	mov	r1, r2
 802c0a2:	2200      	movs	r2, #0
 802c0a4:	602a      	str	r2, [r5, #0]
 802c0a6:	461a      	mov	r2, r3
 802c0a8:	f7d4 ff76 	bl	8000f98 <_write>
 802c0ac:	1c43      	adds	r3, r0, #1
 802c0ae:	d102      	bne.n	802c0b6 <_write_r+0x1e>
 802c0b0:	682b      	ldr	r3, [r5, #0]
 802c0b2:	b103      	cbz	r3, 802c0b6 <_write_r+0x1e>
 802c0b4:	6023      	str	r3, [r4, #0]
 802c0b6:	bd38      	pop	{r3, r4, r5, pc}
 802c0b8:	20012acc 	.word	0x20012acc

0802c0bc <__errno>:
 802c0bc:	4b01      	ldr	r3, [pc, #4]	@ (802c0c4 <__errno+0x8>)
 802c0be:	6818      	ldr	r0, [r3, #0]
 802c0c0:	4770      	bx	lr
 802c0c2:	bf00      	nop
 802c0c4:	200000b0 	.word	0x200000b0

0802c0c8 <__libc_init_array>:
 802c0c8:	b570      	push	{r4, r5, r6, lr}
 802c0ca:	4d0d      	ldr	r5, [pc, #52]	@ (802c100 <__libc_init_array+0x38>)
 802c0cc:	2600      	movs	r6, #0
 802c0ce:	4c0d      	ldr	r4, [pc, #52]	@ (802c104 <__libc_init_array+0x3c>)
 802c0d0:	1b64      	subs	r4, r4, r5
 802c0d2:	10a4      	asrs	r4, r4, #2
 802c0d4:	42a6      	cmp	r6, r4
 802c0d6:	d109      	bne.n	802c0ec <__libc_init_array+0x24>
 802c0d8:	4d0b      	ldr	r5, [pc, #44]	@ (802c108 <__libc_init_array+0x40>)
 802c0da:	2600      	movs	r6, #0
 802c0dc:	4c0b      	ldr	r4, [pc, #44]	@ (802c10c <__libc_init_array+0x44>)
 802c0de:	f000 fd75 	bl	802cbcc <_init>
 802c0e2:	1b64      	subs	r4, r4, r5
 802c0e4:	10a4      	asrs	r4, r4, #2
 802c0e6:	42a6      	cmp	r6, r4
 802c0e8:	d105      	bne.n	802c0f6 <__libc_init_array+0x2e>
 802c0ea:	bd70      	pop	{r4, r5, r6, pc}
 802c0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 802c0f0:	3601      	adds	r6, #1
 802c0f2:	4798      	blx	r3
 802c0f4:	e7ee      	b.n	802c0d4 <__libc_init_array+0xc>
 802c0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 802c0fa:	3601      	adds	r6, #1
 802c0fc:	4798      	blx	r3
 802c0fe:	e7f2      	b.n	802c0e6 <__libc_init_array+0x1e>
 802c100:	0803a0e8 	.word	0x0803a0e8
 802c104:	0803a0e8 	.word	0x0803a0e8
 802c108:	0803a0e8 	.word	0x0803a0e8
 802c10c:	0803a100 	.word	0x0803a100

0802c110 <__retarget_lock_init_recursive>:
 802c110:	4770      	bx	lr

0802c112 <__retarget_lock_acquire_recursive>:
 802c112:	4770      	bx	lr

0802c114 <__retarget_lock_release_recursive>:
 802c114:	4770      	bx	lr

0802c116 <memcpy>:
 802c116:	440a      	add	r2, r1
 802c118:	1e43      	subs	r3, r0, #1
 802c11a:	4291      	cmp	r1, r2
 802c11c:	d100      	bne.n	802c120 <memcpy+0xa>
 802c11e:	4770      	bx	lr
 802c120:	b510      	push	{r4, lr}
 802c122:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c126:	4291      	cmp	r1, r2
 802c128:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c12c:	d1f9      	bne.n	802c122 <memcpy+0xc>
 802c12e:	bd10      	pop	{r4, pc}

0802c130 <__register_exitproc>:
 802c130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c134:	4d28      	ldr	r5, [pc, #160]	@ (802c1d8 <__register_exitproc+0xa8>)
 802c136:	4607      	mov	r7, r0
 802c138:	4691      	mov	r9, r2
 802c13a:	460e      	mov	r6, r1
 802c13c:	6828      	ldr	r0, [r5, #0]
 802c13e:	4698      	mov	r8, r3
 802c140:	f7ff ffe7 	bl	802c112 <__retarget_lock_acquire_recursive>
 802c144:	4a25      	ldr	r2, [pc, #148]	@ (802c1dc <__register_exitproc+0xac>)
 802c146:	6814      	ldr	r4, [r2, #0]
 802c148:	b93c      	cbnz	r4, 802c15a <__register_exitproc+0x2a>
 802c14a:	4b25      	ldr	r3, [pc, #148]	@ (802c1e0 <__register_exitproc+0xb0>)
 802c14c:	6013      	str	r3, [r2, #0]
 802c14e:	4a25      	ldr	r2, [pc, #148]	@ (802c1e4 <__register_exitproc+0xb4>)
 802c150:	b112      	cbz	r2, 802c158 <__register_exitproc+0x28>
 802c152:	6812      	ldr	r2, [r2, #0]
 802c154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802c158:	4c21      	ldr	r4, [pc, #132]	@ (802c1e0 <__register_exitproc+0xb0>)
 802c15a:	6863      	ldr	r3, [r4, #4]
 802c15c:	2b1f      	cmp	r3, #31
 802c15e:	dd06      	ble.n	802c16e <__register_exitproc+0x3e>
 802c160:	6828      	ldr	r0, [r5, #0]
 802c162:	f7ff ffd7 	bl	802c114 <__retarget_lock_release_recursive>
 802c166:	f04f 30ff 	mov.w	r0, #4294967295
 802c16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c16e:	b33f      	cbz	r7, 802c1c0 <__register_exitproc+0x90>
 802c170:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802c174:	b968      	cbnz	r0, 802c192 <__register_exitproc+0x62>
 802c176:	4b1c      	ldr	r3, [pc, #112]	@ (802c1e8 <__register_exitproc+0xb8>)
 802c178:	2b00      	cmp	r3, #0
 802c17a:	d0f1      	beq.n	802c160 <__register_exitproc+0x30>
 802c17c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802c180:	f7ff fcc0 	bl	802bb04 <malloc>
 802c184:	2800      	cmp	r0, #0
 802c186:	d0eb      	beq.n	802c160 <__register_exitproc+0x30>
 802c188:	2300      	movs	r3, #0
 802c18a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802c18e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802c192:	6863      	ldr	r3, [r4, #4]
 802c194:	2201      	movs	r2, #1
 802c196:	2f02      	cmp	r7, #2
 802c198:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c19c:	fa02 f203 	lsl.w	r2, r2, r3
 802c1a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c1a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802c1a8:	ea43 0302 	orr.w	r3, r3, r2
 802c1ac:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802c1b0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802c1b4:	bf02      	ittt	eq
 802c1b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802c1ba:	4313      	orreq	r3, r2
 802c1bc:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802c1c0:	6863      	ldr	r3, [r4, #4]
 802c1c2:	6828      	ldr	r0, [r5, #0]
 802c1c4:	1c5a      	adds	r2, r3, #1
 802c1c6:	3302      	adds	r3, #2
 802c1c8:	6062      	str	r2, [r4, #4]
 802c1ca:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802c1ce:	f7ff ffa1 	bl	802c114 <__retarget_lock_release_recursive>
 802c1d2:	2000      	movs	r0, #0
 802c1d4:	e7c9      	b.n	802c16a <__register_exitproc+0x3a>
 802c1d6:	bf00      	nop
 802c1d8:	20000100 	.word	0x20000100
 802c1dc:	20012b60 	.word	0x20012b60
 802c1e0:	20012ad4 	.word	0x20012ad4
 802c1e4:	0802fdfc 	.word	0x0802fdfc
 802c1e8:	0802bb05 	.word	0x0802bb05

0802c1ec <_free_r>:
 802c1ec:	b538      	push	{r3, r4, r5, lr}
 802c1ee:	4605      	mov	r5, r0
 802c1f0:	2900      	cmp	r1, #0
 802c1f2:	d041      	beq.n	802c278 <_free_r+0x8c>
 802c1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c1f8:	1f0c      	subs	r4, r1, #4
 802c1fa:	2b00      	cmp	r3, #0
 802c1fc:	bfb8      	it	lt
 802c1fe:	18e4      	addlt	r4, r4, r3
 802c200:	f7ff fd32 	bl	802bc68 <__malloc_lock>
 802c204:	4a1d      	ldr	r2, [pc, #116]	@ (802c27c <_free_r+0x90>)
 802c206:	6813      	ldr	r3, [r2, #0]
 802c208:	b933      	cbnz	r3, 802c218 <_free_r+0x2c>
 802c20a:	6063      	str	r3, [r4, #4]
 802c20c:	6014      	str	r4, [r2, #0]
 802c20e:	4628      	mov	r0, r5
 802c210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c214:	f7ff bd2e 	b.w	802bc74 <__malloc_unlock>
 802c218:	42a3      	cmp	r3, r4
 802c21a:	d908      	bls.n	802c22e <_free_r+0x42>
 802c21c:	6820      	ldr	r0, [r4, #0]
 802c21e:	1821      	adds	r1, r4, r0
 802c220:	428b      	cmp	r3, r1
 802c222:	bf01      	itttt	eq
 802c224:	6819      	ldreq	r1, [r3, #0]
 802c226:	685b      	ldreq	r3, [r3, #4]
 802c228:	1809      	addeq	r1, r1, r0
 802c22a:	6021      	streq	r1, [r4, #0]
 802c22c:	e7ed      	b.n	802c20a <_free_r+0x1e>
 802c22e:	461a      	mov	r2, r3
 802c230:	685b      	ldr	r3, [r3, #4]
 802c232:	b10b      	cbz	r3, 802c238 <_free_r+0x4c>
 802c234:	42a3      	cmp	r3, r4
 802c236:	d9fa      	bls.n	802c22e <_free_r+0x42>
 802c238:	6811      	ldr	r1, [r2, #0]
 802c23a:	1850      	adds	r0, r2, r1
 802c23c:	42a0      	cmp	r0, r4
 802c23e:	d10b      	bne.n	802c258 <_free_r+0x6c>
 802c240:	6820      	ldr	r0, [r4, #0]
 802c242:	4401      	add	r1, r0
 802c244:	1850      	adds	r0, r2, r1
 802c246:	6011      	str	r1, [r2, #0]
 802c248:	4283      	cmp	r3, r0
 802c24a:	d1e0      	bne.n	802c20e <_free_r+0x22>
 802c24c:	6818      	ldr	r0, [r3, #0]
 802c24e:	685b      	ldr	r3, [r3, #4]
 802c250:	4408      	add	r0, r1
 802c252:	6053      	str	r3, [r2, #4]
 802c254:	6010      	str	r0, [r2, #0]
 802c256:	e7da      	b.n	802c20e <_free_r+0x22>
 802c258:	d902      	bls.n	802c260 <_free_r+0x74>
 802c25a:	230c      	movs	r3, #12
 802c25c:	602b      	str	r3, [r5, #0]
 802c25e:	e7d6      	b.n	802c20e <_free_r+0x22>
 802c260:	6820      	ldr	r0, [r4, #0]
 802c262:	1821      	adds	r1, r4, r0
 802c264:	428b      	cmp	r3, r1
 802c266:	bf02      	ittt	eq
 802c268:	6819      	ldreq	r1, [r3, #0]
 802c26a:	685b      	ldreq	r3, [r3, #4]
 802c26c:	1809      	addeq	r1, r1, r0
 802c26e:	6063      	str	r3, [r4, #4]
 802c270:	bf08      	it	eq
 802c272:	6021      	streq	r1, [r4, #0]
 802c274:	6054      	str	r4, [r2, #4]
 802c276:	e7ca      	b.n	802c20e <_free_r+0x22>
 802c278:	bd38      	pop	{r3, r4, r5, pc}
 802c27a:	bf00      	nop
 802c27c:	2001298c 	.word	0x2001298c

0802c280 <__sfputc_r>:
 802c280:	6893      	ldr	r3, [r2, #8]
 802c282:	3b01      	subs	r3, #1
 802c284:	2b00      	cmp	r3, #0
 802c286:	6093      	str	r3, [r2, #8]
 802c288:	b410      	push	{r4}
 802c28a:	da08      	bge.n	802c29e <__sfputc_r+0x1e>
 802c28c:	6994      	ldr	r4, [r2, #24]
 802c28e:	42a3      	cmp	r3, r4
 802c290:	db01      	blt.n	802c296 <__sfputc_r+0x16>
 802c292:	290a      	cmp	r1, #10
 802c294:	d103      	bne.n	802c29e <__sfputc_r+0x1e>
 802c296:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c29a:	f000 bb71 	b.w	802c980 <__swbuf_r>
 802c29e:	6813      	ldr	r3, [r2, #0]
 802c2a0:	1c58      	adds	r0, r3, #1
 802c2a2:	6010      	str	r0, [r2, #0]
 802c2a4:	4608      	mov	r0, r1
 802c2a6:	7019      	strb	r1, [r3, #0]
 802c2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c2ac:	4770      	bx	lr

0802c2ae <__sfputs_r>:
 802c2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c2b0:	4606      	mov	r6, r0
 802c2b2:	460f      	mov	r7, r1
 802c2b4:	4614      	mov	r4, r2
 802c2b6:	18d5      	adds	r5, r2, r3
 802c2b8:	42ac      	cmp	r4, r5
 802c2ba:	d101      	bne.n	802c2c0 <__sfputs_r+0x12>
 802c2bc:	2000      	movs	r0, #0
 802c2be:	e007      	b.n	802c2d0 <__sfputs_r+0x22>
 802c2c0:	463a      	mov	r2, r7
 802c2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c2c6:	4630      	mov	r0, r6
 802c2c8:	f7ff ffda 	bl	802c280 <__sfputc_r>
 802c2cc:	1c43      	adds	r3, r0, #1
 802c2ce:	d1f3      	bne.n	802c2b8 <__sfputs_r+0xa>
 802c2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c2d4 <_vfiprintf_r>:
 802c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c2d8:	460d      	mov	r5, r1
 802c2da:	b09d      	sub	sp, #116	@ 0x74
 802c2dc:	4614      	mov	r4, r2
 802c2de:	4698      	mov	r8, r3
 802c2e0:	4606      	mov	r6, r0
 802c2e2:	b118      	cbz	r0, 802c2ec <_vfiprintf_r+0x18>
 802c2e4:	6a03      	ldr	r3, [r0, #32]
 802c2e6:	b90b      	cbnz	r3, 802c2ec <_vfiprintf_r+0x18>
 802c2e8:	f7ff fd64 	bl	802bdb4 <__sinit>
 802c2ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c2ee:	07d9      	lsls	r1, r3, #31
 802c2f0:	d405      	bmi.n	802c2fe <_vfiprintf_r+0x2a>
 802c2f2:	89ab      	ldrh	r3, [r5, #12]
 802c2f4:	059a      	lsls	r2, r3, #22
 802c2f6:	d402      	bmi.n	802c2fe <_vfiprintf_r+0x2a>
 802c2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c2fa:	f7ff ff0a 	bl	802c112 <__retarget_lock_acquire_recursive>
 802c2fe:	89ab      	ldrh	r3, [r5, #12]
 802c300:	071b      	lsls	r3, r3, #28
 802c302:	d501      	bpl.n	802c308 <_vfiprintf_r+0x34>
 802c304:	692b      	ldr	r3, [r5, #16]
 802c306:	b99b      	cbnz	r3, 802c330 <_vfiprintf_r+0x5c>
 802c308:	4629      	mov	r1, r5
 802c30a:	4630      	mov	r0, r6
 802c30c:	f000 fb76 	bl	802c9fc <__swsetup_r>
 802c310:	b170      	cbz	r0, 802c330 <_vfiprintf_r+0x5c>
 802c312:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c314:	07dc      	lsls	r4, r3, #31
 802c316:	d504      	bpl.n	802c322 <_vfiprintf_r+0x4e>
 802c318:	f04f 30ff 	mov.w	r0, #4294967295
 802c31c:	b01d      	add	sp, #116	@ 0x74
 802c31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c322:	89ab      	ldrh	r3, [r5, #12]
 802c324:	0598      	lsls	r0, r3, #22
 802c326:	d4f7      	bmi.n	802c318 <_vfiprintf_r+0x44>
 802c328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c32a:	f7ff fef3 	bl	802c114 <__retarget_lock_release_recursive>
 802c32e:	e7f3      	b.n	802c318 <_vfiprintf_r+0x44>
 802c330:	2300      	movs	r3, #0
 802c332:	f8cd 800c 	str.w	r8, [sp, #12]
 802c336:	f04f 0901 	mov.w	r9, #1
 802c33a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802c4f0 <_vfiprintf_r+0x21c>
 802c33e:	9309      	str	r3, [sp, #36]	@ 0x24
 802c340:	2320      	movs	r3, #32
 802c342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802c346:	2330      	movs	r3, #48	@ 0x30
 802c348:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802c34c:	4623      	mov	r3, r4
 802c34e:	469a      	mov	sl, r3
 802c350:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c354:	b10a      	cbz	r2, 802c35a <_vfiprintf_r+0x86>
 802c356:	2a25      	cmp	r2, #37	@ 0x25
 802c358:	d1f9      	bne.n	802c34e <_vfiprintf_r+0x7a>
 802c35a:	ebba 0b04 	subs.w	fp, sl, r4
 802c35e:	d00b      	beq.n	802c378 <_vfiprintf_r+0xa4>
 802c360:	465b      	mov	r3, fp
 802c362:	4622      	mov	r2, r4
 802c364:	4629      	mov	r1, r5
 802c366:	4630      	mov	r0, r6
 802c368:	f7ff ffa1 	bl	802c2ae <__sfputs_r>
 802c36c:	3001      	adds	r0, #1
 802c36e:	f000 80a7 	beq.w	802c4c0 <_vfiprintf_r+0x1ec>
 802c372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c374:	445a      	add	r2, fp
 802c376:	9209      	str	r2, [sp, #36]	@ 0x24
 802c378:	f89a 3000 	ldrb.w	r3, [sl]
 802c37c:	2b00      	cmp	r3, #0
 802c37e:	f000 809f 	beq.w	802c4c0 <_vfiprintf_r+0x1ec>
 802c382:	2300      	movs	r3, #0
 802c384:	f04f 32ff 	mov.w	r2, #4294967295
 802c388:	f10a 0a01 	add.w	sl, sl, #1
 802c38c:	9304      	str	r3, [sp, #16]
 802c38e:	9307      	str	r3, [sp, #28]
 802c390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802c394:	931a      	str	r3, [sp, #104]	@ 0x68
 802c396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c39a:	4654      	mov	r4, sl
 802c39c:	2205      	movs	r2, #5
 802c39e:	4854      	ldr	r0, [pc, #336]	@ (802c4f0 <_vfiprintf_r+0x21c>)
 802c3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c3a4:	f000 fb80 	bl	802caa8 <memchr>
 802c3a8:	9a04      	ldr	r2, [sp, #16]
 802c3aa:	b9d8      	cbnz	r0, 802c3e4 <_vfiprintf_r+0x110>
 802c3ac:	06d1      	lsls	r1, r2, #27
 802c3ae:	bf44      	itt	mi
 802c3b0:	2320      	movmi	r3, #32
 802c3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c3b6:	0713      	lsls	r3, r2, #28
 802c3b8:	bf44      	itt	mi
 802c3ba:	232b      	movmi	r3, #43	@ 0x2b
 802c3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c3c0:	f89a 3000 	ldrb.w	r3, [sl]
 802c3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 802c3c6:	d015      	beq.n	802c3f4 <_vfiprintf_r+0x120>
 802c3c8:	9a07      	ldr	r2, [sp, #28]
 802c3ca:	4654      	mov	r4, sl
 802c3cc:	2000      	movs	r0, #0
 802c3ce:	f04f 0c0a 	mov.w	ip, #10
 802c3d2:	4621      	mov	r1, r4
 802c3d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c3d8:	3b30      	subs	r3, #48	@ 0x30
 802c3da:	2b09      	cmp	r3, #9
 802c3dc:	d94b      	bls.n	802c476 <_vfiprintf_r+0x1a2>
 802c3de:	b1b0      	cbz	r0, 802c40e <_vfiprintf_r+0x13a>
 802c3e0:	9207      	str	r2, [sp, #28]
 802c3e2:	e014      	b.n	802c40e <_vfiprintf_r+0x13a>
 802c3e4:	eba0 0308 	sub.w	r3, r0, r8
 802c3e8:	46a2      	mov	sl, r4
 802c3ea:	fa09 f303 	lsl.w	r3, r9, r3
 802c3ee:	4313      	orrs	r3, r2
 802c3f0:	9304      	str	r3, [sp, #16]
 802c3f2:	e7d2      	b.n	802c39a <_vfiprintf_r+0xc6>
 802c3f4:	9b03      	ldr	r3, [sp, #12]
 802c3f6:	1d19      	adds	r1, r3, #4
 802c3f8:	681b      	ldr	r3, [r3, #0]
 802c3fa:	2b00      	cmp	r3, #0
 802c3fc:	9103      	str	r1, [sp, #12]
 802c3fe:	bfbb      	ittet	lt
 802c400:	425b      	neglt	r3, r3
 802c402:	f042 0202 	orrlt.w	r2, r2, #2
 802c406:	9307      	strge	r3, [sp, #28]
 802c408:	9307      	strlt	r3, [sp, #28]
 802c40a:	bfb8      	it	lt
 802c40c:	9204      	strlt	r2, [sp, #16]
 802c40e:	7823      	ldrb	r3, [r4, #0]
 802c410:	2b2e      	cmp	r3, #46	@ 0x2e
 802c412:	d10a      	bne.n	802c42a <_vfiprintf_r+0x156>
 802c414:	7863      	ldrb	r3, [r4, #1]
 802c416:	2b2a      	cmp	r3, #42	@ 0x2a
 802c418:	d132      	bne.n	802c480 <_vfiprintf_r+0x1ac>
 802c41a:	9b03      	ldr	r3, [sp, #12]
 802c41c:	3402      	adds	r4, #2
 802c41e:	1d1a      	adds	r2, r3, #4
 802c420:	681b      	ldr	r3, [r3, #0]
 802c422:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c426:	9203      	str	r2, [sp, #12]
 802c428:	9305      	str	r3, [sp, #20]
 802c42a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802c500 <_vfiprintf_r+0x22c>
 802c42e:	2203      	movs	r2, #3
 802c430:	7821      	ldrb	r1, [r4, #0]
 802c432:	4650      	mov	r0, sl
 802c434:	f000 fb38 	bl	802caa8 <memchr>
 802c438:	b138      	cbz	r0, 802c44a <_vfiprintf_r+0x176>
 802c43a:	eba0 000a 	sub.w	r0, r0, sl
 802c43e:	2240      	movs	r2, #64	@ 0x40
 802c440:	9b04      	ldr	r3, [sp, #16]
 802c442:	3401      	adds	r4, #1
 802c444:	4082      	lsls	r2, r0
 802c446:	4313      	orrs	r3, r2
 802c448:	9304      	str	r3, [sp, #16]
 802c44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c44e:	2206      	movs	r2, #6
 802c450:	4828      	ldr	r0, [pc, #160]	@ (802c4f4 <_vfiprintf_r+0x220>)
 802c452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802c456:	f000 fb27 	bl	802caa8 <memchr>
 802c45a:	2800      	cmp	r0, #0
 802c45c:	d03f      	beq.n	802c4de <_vfiprintf_r+0x20a>
 802c45e:	4b26      	ldr	r3, [pc, #152]	@ (802c4f8 <_vfiprintf_r+0x224>)
 802c460:	bb1b      	cbnz	r3, 802c4aa <_vfiprintf_r+0x1d6>
 802c462:	9b03      	ldr	r3, [sp, #12]
 802c464:	3307      	adds	r3, #7
 802c466:	f023 0307 	bic.w	r3, r3, #7
 802c46a:	3308      	adds	r3, #8
 802c46c:	9303      	str	r3, [sp, #12]
 802c46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c470:	443b      	add	r3, r7
 802c472:	9309      	str	r3, [sp, #36]	@ 0x24
 802c474:	e76a      	b.n	802c34c <_vfiprintf_r+0x78>
 802c476:	fb0c 3202 	mla	r2, ip, r2, r3
 802c47a:	460c      	mov	r4, r1
 802c47c:	2001      	movs	r0, #1
 802c47e:	e7a8      	b.n	802c3d2 <_vfiprintf_r+0xfe>
 802c480:	2300      	movs	r3, #0
 802c482:	3401      	adds	r4, #1
 802c484:	f04f 0c0a 	mov.w	ip, #10
 802c488:	4619      	mov	r1, r3
 802c48a:	9305      	str	r3, [sp, #20]
 802c48c:	4620      	mov	r0, r4
 802c48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c492:	3a30      	subs	r2, #48	@ 0x30
 802c494:	2a09      	cmp	r2, #9
 802c496:	d903      	bls.n	802c4a0 <_vfiprintf_r+0x1cc>
 802c498:	2b00      	cmp	r3, #0
 802c49a:	d0c6      	beq.n	802c42a <_vfiprintf_r+0x156>
 802c49c:	9105      	str	r1, [sp, #20]
 802c49e:	e7c4      	b.n	802c42a <_vfiprintf_r+0x156>
 802c4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 802c4a4:	4604      	mov	r4, r0
 802c4a6:	2301      	movs	r3, #1
 802c4a8:	e7f0      	b.n	802c48c <_vfiprintf_r+0x1b8>
 802c4aa:	ab03      	add	r3, sp, #12
 802c4ac:	462a      	mov	r2, r5
 802c4ae:	a904      	add	r1, sp, #16
 802c4b0:	4630      	mov	r0, r6
 802c4b2:	9300      	str	r3, [sp, #0]
 802c4b4:	4b11      	ldr	r3, [pc, #68]	@ (802c4fc <_vfiprintf_r+0x228>)
 802c4b6:	f3af 8000 	nop.w
 802c4ba:	4607      	mov	r7, r0
 802c4bc:	1c78      	adds	r0, r7, #1
 802c4be:	d1d6      	bne.n	802c46e <_vfiprintf_r+0x19a>
 802c4c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c4c2:	07d9      	lsls	r1, r3, #31
 802c4c4:	d405      	bmi.n	802c4d2 <_vfiprintf_r+0x1fe>
 802c4c6:	89ab      	ldrh	r3, [r5, #12]
 802c4c8:	059a      	lsls	r2, r3, #22
 802c4ca:	d402      	bmi.n	802c4d2 <_vfiprintf_r+0x1fe>
 802c4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c4ce:	f7ff fe21 	bl	802c114 <__retarget_lock_release_recursive>
 802c4d2:	89ab      	ldrh	r3, [r5, #12]
 802c4d4:	065b      	lsls	r3, r3, #25
 802c4d6:	f53f af1f 	bmi.w	802c318 <_vfiprintf_r+0x44>
 802c4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c4dc:	e71e      	b.n	802c31c <_vfiprintf_r+0x48>
 802c4de:	ab03      	add	r3, sp, #12
 802c4e0:	462a      	mov	r2, r5
 802c4e2:	a904      	add	r1, sp, #16
 802c4e4:	4630      	mov	r0, r6
 802c4e6:	9300      	str	r3, [sp, #0]
 802c4e8:	4b04      	ldr	r3, [pc, #16]	@ (802c4fc <_vfiprintf_r+0x228>)
 802c4ea:	f000 f87d 	bl	802c5e8 <_printf_i>
 802c4ee:	e7e4      	b.n	802c4ba <_vfiprintf_r+0x1e6>
 802c4f0:	0802fe00 	.word	0x0802fe00
 802c4f4:	0802fe0a 	.word	0x0802fe0a
 802c4f8:	00000000 	.word	0x00000000
 802c4fc:	0802c2af 	.word	0x0802c2af
 802c500:	0802fe06 	.word	0x0802fe06

0802c504 <_printf_common>:
 802c504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c508:	4616      	mov	r6, r2
 802c50a:	4698      	mov	r8, r3
 802c50c:	688a      	ldr	r2, [r1, #8]
 802c50e:	4607      	mov	r7, r0
 802c510:	690b      	ldr	r3, [r1, #16]
 802c512:	460c      	mov	r4, r1
 802c514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802c518:	4293      	cmp	r3, r2
 802c51a:	bfb8      	it	lt
 802c51c:	4613      	movlt	r3, r2
 802c51e:	6033      	str	r3, [r6, #0]
 802c520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802c524:	b10a      	cbz	r2, 802c52a <_printf_common+0x26>
 802c526:	3301      	adds	r3, #1
 802c528:	6033      	str	r3, [r6, #0]
 802c52a:	6823      	ldr	r3, [r4, #0]
 802c52c:	0699      	lsls	r1, r3, #26
 802c52e:	bf42      	ittt	mi
 802c530:	6833      	ldrmi	r3, [r6, #0]
 802c532:	3302      	addmi	r3, #2
 802c534:	6033      	strmi	r3, [r6, #0]
 802c536:	6825      	ldr	r5, [r4, #0]
 802c538:	f015 0506 	ands.w	r5, r5, #6
 802c53c:	d106      	bne.n	802c54c <_printf_common+0x48>
 802c53e:	f104 0a19 	add.w	sl, r4, #25
 802c542:	68e3      	ldr	r3, [r4, #12]
 802c544:	6832      	ldr	r2, [r6, #0]
 802c546:	1a9b      	subs	r3, r3, r2
 802c548:	42ab      	cmp	r3, r5
 802c54a:	dc2b      	bgt.n	802c5a4 <_printf_common+0xa0>
 802c54c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802c550:	6822      	ldr	r2, [r4, #0]
 802c552:	3b00      	subs	r3, #0
 802c554:	bf18      	it	ne
 802c556:	2301      	movne	r3, #1
 802c558:	0692      	lsls	r2, r2, #26
 802c55a:	d430      	bmi.n	802c5be <_printf_common+0xba>
 802c55c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802c560:	4641      	mov	r1, r8
 802c562:	4638      	mov	r0, r7
 802c564:	47c8      	blx	r9
 802c566:	3001      	adds	r0, #1
 802c568:	d023      	beq.n	802c5b2 <_printf_common+0xae>
 802c56a:	6823      	ldr	r3, [r4, #0]
 802c56c:	341a      	adds	r4, #26
 802c56e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802c572:	f003 0306 	and.w	r3, r3, #6
 802c576:	2b04      	cmp	r3, #4
 802c578:	bf0a      	itet	eq
 802c57a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802c57e:	2500      	movne	r5, #0
 802c580:	6833      	ldreq	r3, [r6, #0]
 802c582:	f04f 0600 	mov.w	r6, #0
 802c586:	bf08      	it	eq
 802c588:	1aed      	subeq	r5, r5, r3
 802c58a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802c58e:	bf08      	it	eq
 802c590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c594:	4293      	cmp	r3, r2
 802c596:	bfc4      	itt	gt
 802c598:	1a9b      	subgt	r3, r3, r2
 802c59a:	18ed      	addgt	r5, r5, r3
 802c59c:	42b5      	cmp	r5, r6
 802c59e:	d11a      	bne.n	802c5d6 <_printf_common+0xd2>
 802c5a0:	2000      	movs	r0, #0
 802c5a2:	e008      	b.n	802c5b6 <_printf_common+0xb2>
 802c5a4:	2301      	movs	r3, #1
 802c5a6:	4652      	mov	r2, sl
 802c5a8:	4641      	mov	r1, r8
 802c5aa:	4638      	mov	r0, r7
 802c5ac:	47c8      	blx	r9
 802c5ae:	3001      	adds	r0, #1
 802c5b0:	d103      	bne.n	802c5ba <_printf_common+0xb6>
 802c5b2:	f04f 30ff 	mov.w	r0, #4294967295
 802c5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c5ba:	3501      	adds	r5, #1
 802c5bc:	e7c1      	b.n	802c542 <_printf_common+0x3e>
 802c5be:	18e1      	adds	r1, r4, r3
 802c5c0:	1c5a      	adds	r2, r3, #1
 802c5c2:	2030      	movs	r0, #48	@ 0x30
 802c5c4:	3302      	adds	r3, #2
 802c5c6:	4422      	add	r2, r4
 802c5c8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802c5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802c5d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802c5d4:	e7c2      	b.n	802c55c <_printf_common+0x58>
 802c5d6:	2301      	movs	r3, #1
 802c5d8:	4622      	mov	r2, r4
 802c5da:	4641      	mov	r1, r8
 802c5dc:	4638      	mov	r0, r7
 802c5de:	47c8      	blx	r9
 802c5e0:	3001      	adds	r0, #1
 802c5e2:	d0e6      	beq.n	802c5b2 <_printf_common+0xae>
 802c5e4:	3601      	adds	r6, #1
 802c5e6:	e7d9      	b.n	802c59c <_printf_common+0x98>

0802c5e8 <_printf_i>:
 802c5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c5ec:	7e0f      	ldrb	r7, [r1, #24]
 802c5ee:	4691      	mov	r9, r2
 802c5f0:	4680      	mov	r8, r0
 802c5f2:	460c      	mov	r4, r1
 802c5f4:	2f78      	cmp	r7, #120	@ 0x78
 802c5f6:	469a      	mov	sl, r3
 802c5f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802c5fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802c5fe:	d807      	bhi.n	802c610 <_printf_i+0x28>
 802c600:	2f62      	cmp	r7, #98	@ 0x62
 802c602:	d80a      	bhi.n	802c61a <_printf_i+0x32>
 802c604:	2f00      	cmp	r7, #0
 802c606:	f000 80d2 	beq.w	802c7ae <_printf_i+0x1c6>
 802c60a:	2f58      	cmp	r7, #88	@ 0x58
 802c60c:	f000 80b9 	beq.w	802c782 <_printf_i+0x19a>
 802c610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802c618:	e03a      	b.n	802c690 <_printf_i+0xa8>
 802c61a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802c61e:	2b15      	cmp	r3, #21
 802c620:	d8f6      	bhi.n	802c610 <_printf_i+0x28>
 802c622:	a101      	add	r1, pc, #4	@ (adr r1, 802c628 <_printf_i+0x40>)
 802c624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c628:	0802c681 	.word	0x0802c681
 802c62c:	0802c695 	.word	0x0802c695
 802c630:	0802c611 	.word	0x0802c611
 802c634:	0802c611 	.word	0x0802c611
 802c638:	0802c611 	.word	0x0802c611
 802c63c:	0802c611 	.word	0x0802c611
 802c640:	0802c695 	.word	0x0802c695
 802c644:	0802c611 	.word	0x0802c611
 802c648:	0802c611 	.word	0x0802c611
 802c64c:	0802c611 	.word	0x0802c611
 802c650:	0802c611 	.word	0x0802c611
 802c654:	0802c795 	.word	0x0802c795
 802c658:	0802c6bf 	.word	0x0802c6bf
 802c65c:	0802c74f 	.word	0x0802c74f
 802c660:	0802c611 	.word	0x0802c611
 802c664:	0802c611 	.word	0x0802c611
 802c668:	0802c7b7 	.word	0x0802c7b7
 802c66c:	0802c611 	.word	0x0802c611
 802c670:	0802c6bf 	.word	0x0802c6bf
 802c674:	0802c611 	.word	0x0802c611
 802c678:	0802c611 	.word	0x0802c611
 802c67c:	0802c757 	.word	0x0802c757
 802c680:	6833      	ldr	r3, [r6, #0]
 802c682:	1d1a      	adds	r2, r3, #4
 802c684:	681b      	ldr	r3, [r3, #0]
 802c686:	6032      	str	r2, [r6, #0]
 802c688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c68c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802c690:	2301      	movs	r3, #1
 802c692:	e09d      	b.n	802c7d0 <_printf_i+0x1e8>
 802c694:	6833      	ldr	r3, [r6, #0]
 802c696:	6820      	ldr	r0, [r4, #0]
 802c698:	1d19      	adds	r1, r3, #4
 802c69a:	6031      	str	r1, [r6, #0]
 802c69c:	0606      	lsls	r6, r0, #24
 802c69e:	d501      	bpl.n	802c6a4 <_printf_i+0xbc>
 802c6a0:	681d      	ldr	r5, [r3, #0]
 802c6a2:	e003      	b.n	802c6ac <_printf_i+0xc4>
 802c6a4:	0645      	lsls	r5, r0, #25
 802c6a6:	d5fb      	bpl.n	802c6a0 <_printf_i+0xb8>
 802c6a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 802c6ac:	2d00      	cmp	r5, #0
 802c6ae:	da03      	bge.n	802c6b8 <_printf_i+0xd0>
 802c6b0:	232d      	movs	r3, #45	@ 0x2d
 802c6b2:	426d      	negs	r5, r5
 802c6b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c6b8:	4859      	ldr	r0, [pc, #356]	@ (802c820 <_printf_i+0x238>)
 802c6ba:	230a      	movs	r3, #10
 802c6bc:	e011      	b.n	802c6e2 <_printf_i+0xfa>
 802c6be:	6821      	ldr	r1, [r4, #0]
 802c6c0:	6833      	ldr	r3, [r6, #0]
 802c6c2:	0608      	lsls	r0, r1, #24
 802c6c4:	f853 5b04 	ldr.w	r5, [r3], #4
 802c6c8:	d402      	bmi.n	802c6d0 <_printf_i+0xe8>
 802c6ca:	0649      	lsls	r1, r1, #25
 802c6cc:	bf48      	it	mi
 802c6ce:	b2ad      	uxthmi	r5, r5
 802c6d0:	2f6f      	cmp	r7, #111	@ 0x6f
 802c6d2:	6033      	str	r3, [r6, #0]
 802c6d4:	4852      	ldr	r0, [pc, #328]	@ (802c820 <_printf_i+0x238>)
 802c6d6:	bf14      	ite	ne
 802c6d8:	230a      	movne	r3, #10
 802c6da:	2308      	moveq	r3, #8
 802c6dc:	2100      	movs	r1, #0
 802c6de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802c6e2:	6866      	ldr	r6, [r4, #4]
 802c6e4:	2e00      	cmp	r6, #0
 802c6e6:	60a6      	str	r6, [r4, #8]
 802c6e8:	bfa2      	ittt	ge
 802c6ea:	6821      	ldrge	r1, [r4, #0]
 802c6ec:	f021 0104 	bicge.w	r1, r1, #4
 802c6f0:	6021      	strge	r1, [r4, #0]
 802c6f2:	b90d      	cbnz	r5, 802c6f8 <_printf_i+0x110>
 802c6f4:	2e00      	cmp	r6, #0
 802c6f6:	d04b      	beq.n	802c790 <_printf_i+0x1a8>
 802c6f8:	4616      	mov	r6, r2
 802c6fa:	fbb5 f1f3 	udiv	r1, r5, r3
 802c6fe:	fb03 5711 	mls	r7, r3, r1, r5
 802c702:	5dc7      	ldrb	r7, [r0, r7]
 802c704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802c708:	462f      	mov	r7, r5
 802c70a:	460d      	mov	r5, r1
 802c70c:	42bb      	cmp	r3, r7
 802c70e:	d9f4      	bls.n	802c6fa <_printf_i+0x112>
 802c710:	2b08      	cmp	r3, #8
 802c712:	d10b      	bne.n	802c72c <_printf_i+0x144>
 802c714:	6823      	ldr	r3, [r4, #0]
 802c716:	07df      	lsls	r7, r3, #31
 802c718:	d508      	bpl.n	802c72c <_printf_i+0x144>
 802c71a:	6923      	ldr	r3, [r4, #16]
 802c71c:	6861      	ldr	r1, [r4, #4]
 802c71e:	4299      	cmp	r1, r3
 802c720:	bfde      	ittt	le
 802c722:	2330      	movle	r3, #48	@ 0x30
 802c724:	f806 3c01 	strble.w	r3, [r6, #-1]
 802c728:	f106 36ff 	addle.w	r6, r6, #4294967295
 802c72c:	1b92      	subs	r2, r2, r6
 802c72e:	6122      	str	r2, [r4, #16]
 802c730:	464b      	mov	r3, r9
 802c732:	aa03      	add	r2, sp, #12
 802c734:	4621      	mov	r1, r4
 802c736:	4640      	mov	r0, r8
 802c738:	f8cd a000 	str.w	sl, [sp]
 802c73c:	f7ff fee2 	bl	802c504 <_printf_common>
 802c740:	3001      	adds	r0, #1
 802c742:	d14a      	bne.n	802c7da <_printf_i+0x1f2>
 802c744:	f04f 30ff 	mov.w	r0, #4294967295
 802c748:	b004      	add	sp, #16
 802c74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c74e:	6823      	ldr	r3, [r4, #0]
 802c750:	f043 0320 	orr.w	r3, r3, #32
 802c754:	6023      	str	r3, [r4, #0]
 802c756:	2778      	movs	r7, #120	@ 0x78
 802c758:	4832      	ldr	r0, [pc, #200]	@ (802c824 <_printf_i+0x23c>)
 802c75a:	6823      	ldr	r3, [r4, #0]
 802c75c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802c760:	061f      	lsls	r7, r3, #24
 802c762:	6831      	ldr	r1, [r6, #0]
 802c764:	f851 5b04 	ldr.w	r5, [r1], #4
 802c768:	d402      	bmi.n	802c770 <_printf_i+0x188>
 802c76a:	065f      	lsls	r7, r3, #25
 802c76c:	bf48      	it	mi
 802c76e:	b2ad      	uxthmi	r5, r5
 802c770:	6031      	str	r1, [r6, #0]
 802c772:	07d9      	lsls	r1, r3, #31
 802c774:	bf44      	itt	mi
 802c776:	f043 0320 	orrmi.w	r3, r3, #32
 802c77a:	6023      	strmi	r3, [r4, #0]
 802c77c:	b11d      	cbz	r5, 802c786 <_printf_i+0x19e>
 802c77e:	2310      	movs	r3, #16
 802c780:	e7ac      	b.n	802c6dc <_printf_i+0xf4>
 802c782:	4827      	ldr	r0, [pc, #156]	@ (802c820 <_printf_i+0x238>)
 802c784:	e7e9      	b.n	802c75a <_printf_i+0x172>
 802c786:	6823      	ldr	r3, [r4, #0]
 802c788:	f023 0320 	bic.w	r3, r3, #32
 802c78c:	6023      	str	r3, [r4, #0]
 802c78e:	e7f6      	b.n	802c77e <_printf_i+0x196>
 802c790:	4616      	mov	r6, r2
 802c792:	e7bd      	b.n	802c710 <_printf_i+0x128>
 802c794:	6833      	ldr	r3, [r6, #0]
 802c796:	6825      	ldr	r5, [r4, #0]
 802c798:	1d18      	adds	r0, r3, #4
 802c79a:	6961      	ldr	r1, [r4, #20]
 802c79c:	6030      	str	r0, [r6, #0]
 802c79e:	062e      	lsls	r6, r5, #24
 802c7a0:	681b      	ldr	r3, [r3, #0]
 802c7a2:	d501      	bpl.n	802c7a8 <_printf_i+0x1c0>
 802c7a4:	6019      	str	r1, [r3, #0]
 802c7a6:	e002      	b.n	802c7ae <_printf_i+0x1c6>
 802c7a8:	0668      	lsls	r0, r5, #25
 802c7aa:	d5fb      	bpl.n	802c7a4 <_printf_i+0x1bc>
 802c7ac:	8019      	strh	r1, [r3, #0]
 802c7ae:	2300      	movs	r3, #0
 802c7b0:	4616      	mov	r6, r2
 802c7b2:	6123      	str	r3, [r4, #16]
 802c7b4:	e7bc      	b.n	802c730 <_printf_i+0x148>
 802c7b6:	6833      	ldr	r3, [r6, #0]
 802c7b8:	2100      	movs	r1, #0
 802c7ba:	1d1a      	adds	r2, r3, #4
 802c7bc:	6032      	str	r2, [r6, #0]
 802c7be:	681e      	ldr	r6, [r3, #0]
 802c7c0:	6862      	ldr	r2, [r4, #4]
 802c7c2:	4630      	mov	r0, r6
 802c7c4:	f000 f970 	bl	802caa8 <memchr>
 802c7c8:	b108      	cbz	r0, 802c7ce <_printf_i+0x1e6>
 802c7ca:	1b80      	subs	r0, r0, r6
 802c7cc:	6060      	str	r0, [r4, #4]
 802c7ce:	6863      	ldr	r3, [r4, #4]
 802c7d0:	6123      	str	r3, [r4, #16]
 802c7d2:	2300      	movs	r3, #0
 802c7d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c7d8:	e7aa      	b.n	802c730 <_printf_i+0x148>
 802c7da:	6923      	ldr	r3, [r4, #16]
 802c7dc:	4632      	mov	r2, r6
 802c7de:	4649      	mov	r1, r9
 802c7e0:	4640      	mov	r0, r8
 802c7e2:	47d0      	blx	sl
 802c7e4:	3001      	adds	r0, #1
 802c7e6:	d0ad      	beq.n	802c744 <_printf_i+0x15c>
 802c7e8:	6823      	ldr	r3, [r4, #0]
 802c7ea:	079b      	lsls	r3, r3, #30
 802c7ec:	d413      	bmi.n	802c816 <_printf_i+0x22e>
 802c7ee:	68e0      	ldr	r0, [r4, #12]
 802c7f0:	9b03      	ldr	r3, [sp, #12]
 802c7f2:	4298      	cmp	r0, r3
 802c7f4:	bfb8      	it	lt
 802c7f6:	4618      	movlt	r0, r3
 802c7f8:	e7a6      	b.n	802c748 <_printf_i+0x160>
 802c7fa:	2301      	movs	r3, #1
 802c7fc:	4632      	mov	r2, r6
 802c7fe:	4649      	mov	r1, r9
 802c800:	4640      	mov	r0, r8
 802c802:	47d0      	blx	sl
 802c804:	3001      	adds	r0, #1
 802c806:	d09d      	beq.n	802c744 <_printf_i+0x15c>
 802c808:	3501      	adds	r5, #1
 802c80a:	68e3      	ldr	r3, [r4, #12]
 802c80c:	9903      	ldr	r1, [sp, #12]
 802c80e:	1a5b      	subs	r3, r3, r1
 802c810:	42ab      	cmp	r3, r5
 802c812:	dcf2      	bgt.n	802c7fa <_printf_i+0x212>
 802c814:	e7eb      	b.n	802c7ee <_printf_i+0x206>
 802c816:	2500      	movs	r5, #0
 802c818:	f104 0619 	add.w	r6, r4, #25
 802c81c:	e7f5      	b.n	802c80a <_printf_i+0x222>
 802c81e:	bf00      	nop
 802c820:	0802fe11 	.word	0x0802fe11
 802c824:	0802fe22 	.word	0x0802fe22

0802c828 <__sflush_r>:
 802c828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c830:	0716      	lsls	r6, r2, #28
 802c832:	4605      	mov	r5, r0
 802c834:	460c      	mov	r4, r1
 802c836:	d454      	bmi.n	802c8e2 <__sflush_r+0xba>
 802c838:	684b      	ldr	r3, [r1, #4]
 802c83a:	2b00      	cmp	r3, #0
 802c83c:	dc02      	bgt.n	802c844 <__sflush_r+0x1c>
 802c83e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802c840:	2b00      	cmp	r3, #0
 802c842:	dd48      	ble.n	802c8d6 <__sflush_r+0xae>
 802c844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c846:	2e00      	cmp	r6, #0
 802c848:	d045      	beq.n	802c8d6 <__sflush_r+0xae>
 802c84a:	2300      	movs	r3, #0
 802c84c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802c850:	682f      	ldr	r7, [r5, #0]
 802c852:	6a21      	ldr	r1, [r4, #32]
 802c854:	602b      	str	r3, [r5, #0]
 802c856:	d030      	beq.n	802c8ba <__sflush_r+0x92>
 802c858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802c85a:	89a3      	ldrh	r3, [r4, #12]
 802c85c:	0759      	lsls	r1, r3, #29
 802c85e:	d505      	bpl.n	802c86c <__sflush_r+0x44>
 802c860:	6863      	ldr	r3, [r4, #4]
 802c862:	1ad2      	subs	r2, r2, r3
 802c864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c866:	b10b      	cbz	r3, 802c86c <__sflush_r+0x44>
 802c868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802c86a:	1ad2      	subs	r2, r2, r3
 802c86c:	2300      	movs	r3, #0
 802c86e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c870:	6a21      	ldr	r1, [r4, #32]
 802c872:	4628      	mov	r0, r5
 802c874:	47b0      	blx	r6
 802c876:	1c43      	adds	r3, r0, #1
 802c878:	89a3      	ldrh	r3, [r4, #12]
 802c87a:	d106      	bne.n	802c88a <__sflush_r+0x62>
 802c87c:	6829      	ldr	r1, [r5, #0]
 802c87e:	291d      	cmp	r1, #29
 802c880:	d82b      	bhi.n	802c8da <__sflush_r+0xb2>
 802c882:	4a2a      	ldr	r2, [pc, #168]	@ (802c92c <__sflush_r+0x104>)
 802c884:	410a      	asrs	r2, r1
 802c886:	07d6      	lsls	r6, r2, #31
 802c888:	d427      	bmi.n	802c8da <__sflush_r+0xb2>
 802c88a:	2200      	movs	r2, #0
 802c88c:	04d9      	lsls	r1, r3, #19
 802c88e:	6062      	str	r2, [r4, #4]
 802c890:	6922      	ldr	r2, [r4, #16]
 802c892:	6022      	str	r2, [r4, #0]
 802c894:	d504      	bpl.n	802c8a0 <__sflush_r+0x78>
 802c896:	1c42      	adds	r2, r0, #1
 802c898:	d101      	bne.n	802c89e <__sflush_r+0x76>
 802c89a:	682b      	ldr	r3, [r5, #0]
 802c89c:	b903      	cbnz	r3, 802c8a0 <__sflush_r+0x78>
 802c89e:	6560      	str	r0, [r4, #84]	@ 0x54
 802c8a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c8a2:	602f      	str	r7, [r5, #0]
 802c8a4:	b1b9      	cbz	r1, 802c8d6 <__sflush_r+0xae>
 802c8a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c8aa:	4299      	cmp	r1, r3
 802c8ac:	d002      	beq.n	802c8b4 <__sflush_r+0x8c>
 802c8ae:	4628      	mov	r0, r5
 802c8b0:	f7ff fc9c 	bl	802c1ec <_free_r>
 802c8b4:	2300      	movs	r3, #0
 802c8b6:	6363      	str	r3, [r4, #52]	@ 0x34
 802c8b8:	e00d      	b.n	802c8d6 <__sflush_r+0xae>
 802c8ba:	2301      	movs	r3, #1
 802c8bc:	4628      	mov	r0, r5
 802c8be:	47b0      	blx	r6
 802c8c0:	4602      	mov	r2, r0
 802c8c2:	1c50      	adds	r0, r2, #1
 802c8c4:	d1c9      	bne.n	802c85a <__sflush_r+0x32>
 802c8c6:	682b      	ldr	r3, [r5, #0]
 802c8c8:	2b00      	cmp	r3, #0
 802c8ca:	d0c6      	beq.n	802c85a <__sflush_r+0x32>
 802c8cc:	2b1d      	cmp	r3, #29
 802c8ce:	d001      	beq.n	802c8d4 <__sflush_r+0xac>
 802c8d0:	2b16      	cmp	r3, #22
 802c8d2:	d11d      	bne.n	802c910 <__sflush_r+0xe8>
 802c8d4:	602f      	str	r7, [r5, #0]
 802c8d6:	2000      	movs	r0, #0
 802c8d8:	e021      	b.n	802c91e <__sflush_r+0xf6>
 802c8da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c8de:	b21b      	sxth	r3, r3
 802c8e0:	e01a      	b.n	802c918 <__sflush_r+0xf0>
 802c8e2:	690f      	ldr	r7, [r1, #16]
 802c8e4:	2f00      	cmp	r7, #0
 802c8e6:	d0f6      	beq.n	802c8d6 <__sflush_r+0xae>
 802c8e8:	0793      	lsls	r3, r2, #30
 802c8ea:	680e      	ldr	r6, [r1, #0]
 802c8ec:	600f      	str	r7, [r1, #0]
 802c8ee:	bf0c      	ite	eq
 802c8f0:	694b      	ldreq	r3, [r1, #20]
 802c8f2:	2300      	movne	r3, #0
 802c8f4:	eba6 0807 	sub.w	r8, r6, r7
 802c8f8:	608b      	str	r3, [r1, #8]
 802c8fa:	f1b8 0f00 	cmp.w	r8, #0
 802c8fe:	ddea      	ble.n	802c8d6 <__sflush_r+0xae>
 802c900:	4643      	mov	r3, r8
 802c902:	463a      	mov	r2, r7
 802c904:	6a21      	ldr	r1, [r4, #32]
 802c906:	4628      	mov	r0, r5
 802c908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c90a:	47b0      	blx	r6
 802c90c:	2800      	cmp	r0, #0
 802c90e:	dc08      	bgt.n	802c922 <__sflush_r+0xfa>
 802c910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c918:	f04f 30ff 	mov.w	r0, #4294967295
 802c91c:	81a3      	strh	r3, [r4, #12]
 802c91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c922:	4407      	add	r7, r0
 802c924:	eba8 0800 	sub.w	r8, r8, r0
 802c928:	e7e7      	b.n	802c8fa <__sflush_r+0xd2>
 802c92a:	bf00      	nop
 802c92c:	dfbffffe 	.word	0xdfbffffe

0802c930 <_fflush_r>:
 802c930:	b538      	push	{r3, r4, r5, lr}
 802c932:	690b      	ldr	r3, [r1, #16]
 802c934:	4605      	mov	r5, r0
 802c936:	460c      	mov	r4, r1
 802c938:	b913      	cbnz	r3, 802c940 <_fflush_r+0x10>
 802c93a:	2500      	movs	r5, #0
 802c93c:	4628      	mov	r0, r5
 802c93e:	bd38      	pop	{r3, r4, r5, pc}
 802c940:	b118      	cbz	r0, 802c94a <_fflush_r+0x1a>
 802c942:	6a03      	ldr	r3, [r0, #32]
 802c944:	b90b      	cbnz	r3, 802c94a <_fflush_r+0x1a>
 802c946:	f7ff fa35 	bl	802bdb4 <__sinit>
 802c94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c94e:	2b00      	cmp	r3, #0
 802c950:	d0f3      	beq.n	802c93a <_fflush_r+0xa>
 802c952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c954:	07d0      	lsls	r0, r2, #31
 802c956:	d404      	bmi.n	802c962 <_fflush_r+0x32>
 802c958:	0599      	lsls	r1, r3, #22
 802c95a:	d402      	bmi.n	802c962 <_fflush_r+0x32>
 802c95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c95e:	f7ff fbd8 	bl	802c112 <__retarget_lock_acquire_recursive>
 802c962:	4628      	mov	r0, r5
 802c964:	4621      	mov	r1, r4
 802c966:	f7ff ff5f 	bl	802c828 <__sflush_r>
 802c96a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c96c:	4605      	mov	r5, r0
 802c96e:	07da      	lsls	r2, r3, #31
 802c970:	d4e4      	bmi.n	802c93c <_fflush_r+0xc>
 802c972:	89a3      	ldrh	r3, [r4, #12]
 802c974:	059b      	lsls	r3, r3, #22
 802c976:	d4e1      	bmi.n	802c93c <_fflush_r+0xc>
 802c978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c97a:	f7ff fbcb 	bl	802c114 <__retarget_lock_release_recursive>
 802c97e:	e7dd      	b.n	802c93c <_fflush_r+0xc>

0802c980 <__swbuf_r>:
 802c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c982:	460e      	mov	r6, r1
 802c984:	4614      	mov	r4, r2
 802c986:	4605      	mov	r5, r0
 802c988:	b118      	cbz	r0, 802c992 <__swbuf_r+0x12>
 802c98a:	6a03      	ldr	r3, [r0, #32]
 802c98c:	b90b      	cbnz	r3, 802c992 <__swbuf_r+0x12>
 802c98e:	f7ff fa11 	bl	802bdb4 <__sinit>
 802c992:	69a3      	ldr	r3, [r4, #24]
 802c994:	60a3      	str	r3, [r4, #8]
 802c996:	89a3      	ldrh	r3, [r4, #12]
 802c998:	071a      	lsls	r2, r3, #28
 802c99a:	d501      	bpl.n	802c9a0 <__swbuf_r+0x20>
 802c99c:	6923      	ldr	r3, [r4, #16]
 802c99e:	b943      	cbnz	r3, 802c9b2 <__swbuf_r+0x32>
 802c9a0:	4621      	mov	r1, r4
 802c9a2:	4628      	mov	r0, r5
 802c9a4:	f000 f82a 	bl	802c9fc <__swsetup_r>
 802c9a8:	b118      	cbz	r0, 802c9b2 <__swbuf_r+0x32>
 802c9aa:	f04f 37ff 	mov.w	r7, #4294967295
 802c9ae:	4638      	mov	r0, r7
 802c9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c9b2:	6823      	ldr	r3, [r4, #0]
 802c9b4:	b2f6      	uxtb	r6, r6
 802c9b6:	6922      	ldr	r2, [r4, #16]
 802c9b8:	4637      	mov	r7, r6
 802c9ba:	1a98      	subs	r0, r3, r2
 802c9bc:	6963      	ldr	r3, [r4, #20]
 802c9be:	4283      	cmp	r3, r0
 802c9c0:	dc05      	bgt.n	802c9ce <__swbuf_r+0x4e>
 802c9c2:	4621      	mov	r1, r4
 802c9c4:	4628      	mov	r0, r5
 802c9c6:	f7ff ffb3 	bl	802c930 <_fflush_r>
 802c9ca:	2800      	cmp	r0, #0
 802c9cc:	d1ed      	bne.n	802c9aa <__swbuf_r+0x2a>
 802c9ce:	68a3      	ldr	r3, [r4, #8]
 802c9d0:	3b01      	subs	r3, #1
 802c9d2:	60a3      	str	r3, [r4, #8]
 802c9d4:	6823      	ldr	r3, [r4, #0]
 802c9d6:	1c5a      	adds	r2, r3, #1
 802c9d8:	6022      	str	r2, [r4, #0]
 802c9da:	701e      	strb	r6, [r3, #0]
 802c9dc:	1c43      	adds	r3, r0, #1
 802c9de:	6962      	ldr	r2, [r4, #20]
 802c9e0:	429a      	cmp	r2, r3
 802c9e2:	d004      	beq.n	802c9ee <__swbuf_r+0x6e>
 802c9e4:	89a3      	ldrh	r3, [r4, #12]
 802c9e6:	07db      	lsls	r3, r3, #31
 802c9e8:	d5e1      	bpl.n	802c9ae <__swbuf_r+0x2e>
 802c9ea:	2e0a      	cmp	r6, #10
 802c9ec:	d1df      	bne.n	802c9ae <__swbuf_r+0x2e>
 802c9ee:	4621      	mov	r1, r4
 802c9f0:	4628      	mov	r0, r5
 802c9f2:	f7ff ff9d 	bl	802c930 <_fflush_r>
 802c9f6:	2800      	cmp	r0, #0
 802c9f8:	d0d9      	beq.n	802c9ae <__swbuf_r+0x2e>
 802c9fa:	e7d6      	b.n	802c9aa <__swbuf_r+0x2a>

0802c9fc <__swsetup_r>:
 802c9fc:	b538      	push	{r3, r4, r5, lr}
 802c9fe:	4b29      	ldr	r3, [pc, #164]	@ (802caa4 <__swsetup_r+0xa8>)
 802ca00:	4605      	mov	r5, r0
 802ca02:	460c      	mov	r4, r1
 802ca04:	6818      	ldr	r0, [r3, #0]
 802ca06:	b118      	cbz	r0, 802ca10 <__swsetup_r+0x14>
 802ca08:	6a03      	ldr	r3, [r0, #32]
 802ca0a:	b90b      	cbnz	r3, 802ca10 <__swsetup_r+0x14>
 802ca0c:	f7ff f9d2 	bl	802bdb4 <__sinit>
 802ca10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ca14:	0719      	lsls	r1, r3, #28
 802ca16:	d422      	bmi.n	802ca5e <__swsetup_r+0x62>
 802ca18:	06da      	lsls	r2, r3, #27
 802ca1a:	d407      	bmi.n	802ca2c <__swsetup_r+0x30>
 802ca1c:	2209      	movs	r2, #9
 802ca1e:	602a      	str	r2, [r5, #0]
 802ca20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ca24:	f04f 30ff 	mov.w	r0, #4294967295
 802ca28:	81a3      	strh	r3, [r4, #12]
 802ca2a:	e033      	b.n	802ca94 <__swsetup_r+0x98>
 802ca2c:	0758      	lsls	r0, r3, #29
 802ca2e:	d512      	bpl.n	802ca56 <__swsetup_r+0x5a>
 802ca30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ca32:	b141      	cbz	r1, 802ca46 <__swsetup_r+0x4a>
 802ca34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ca38:	4299      	cmp	r1, r3
 802ca3a:	d002      	beq.n	802ca42 <__swsetup_r+0x46>
 802ca3c:	4628      	mov	r0, r5
 802ca3e:	f7ff fbd5 	bl	802c1ec <_free_r>
 802ca42:	2300      	movs	r3, #0
 802ca44:	6363      	str	r3, [r4, #52]	@ 0x34
 802ca46:	89a3      	ldrh	r3, [r4, #12]
 802ca48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802ca4c:	81a3      	strh	r3, [r4, #12]
 802ca4e:	2300      	movs	r3, #0
 802ca50:	6063      	str	r3, [r4, #4]
 802ca52:	6923      	ldr	r3, [r4, #16]
 802ca54:	6023      	str	r3, [r4, #0]
 802ca56:	89a3      	ldrh	r3, [r4, #12]
 802ca58:	f043 0308 	orr.w	r3, r3, #8
 802ca5c:	81a3      	strh	r3, [r4, #12]
 802ca5e:	6923      	ldr	r3, [r4, #16]
 802ca60:	b94b      	cbnz	r3, 802ca76 <__swsetup_r+0x7a>
 802ca62:	89a3      	ldrh	r3, [r4, #12]
 802ca64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802ca68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802ca6c:	d003      	beq.n	802ca76 <__swsetup_r+0x7a>
 802ca6e:	4621      	mov	r1, r4
 802ca70:	4628      	mov	r0, r5
 802ca72:	f000 f84c 	bl	802cb0e <__smakebuf_r>
 802ca76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ca7a:	f013 0201 	ands.w	r2, r3, #1
 802ca7e:	d00a      	beq.n	802ca96 <__swsetup_r+0x9a>
 802ca80:	2200      	movs	r2, #0
 802ca82:	60a2      	str	r2, [r4, #8]
 802ca84:	6962      	ldr	r2, [r4, #20]
 802ca86:	4252      	negs	r2, r2
 802ca88:	61a2      	str	r2, [r4, #24]
 802ca8a:	6922      	ldr	r2, [r4, #16]
 802ca8c:	b942      	cbnz	r2, 802caa0 <__swsetup_r+0xa4>
 802ca8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802ca92:	d1c5      	bne.n	802ca20 <__swsetup_r+0x24>
 802ca94:	bd38      	pop	{r3, r4, r5, pc}
 802ca96:	0799      	lsls	r1, r3, #30
 802ca98:	bf58      	it	pl
 802ca9a:	6962      	ldrpl	r2, [r4, #20]
 802ca9c:	60a2      	str	r2, [r4, #8]
 802ca9e:	e7f4      	b.n	802ca8a <__swsetup_r+0x8e>
 802caa0:	2000      	movs	r0, #0
 802caa2:	e7f7      	b.n	802ca94 <__swsetup_r+0x98>
 802caa4:	200000b0 	.word	0x200000b0

0802caa8 <memchr>:
 802caa8:	b2c9      	uxtb	r1, r1
 802caaa:	4603      	mov	r3, r0
 802caac:	4402      	add	r2, r0
 802caae:	b510      	push	{r4, lr}
 802cab0:	4293      	cmp	r3, r2
 802cab2:	4618      	mov	r0, r3
 802cab4:	d101      	bne.n	802caba <memchr+0x12>
 802cab6:	2000      	movs	r0, #0
 802cab8:	e003      	b.n	802cac2 <memchr+0x1a>
 802caba:	7804      	ldrb	r4, [r0, #0]
 802cabc:	3301      	adds	r3, #1
 802cabe:	428c      	cmp	r4, r1
 802cac0:	d1f6      	bne.n	802cab0 <memchr+0x8>
 802cac2:	bd10      	pop	{r4, pc}

0802cac4 <__swhatbuf_r>:
 802cac4:	b570      	push	{r4, r5, r6, lr}
 802cac6:	460c      	mov	r4, r1
 802cac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cacc:	b096      	sub	sp, #88	@ 0x58
 802cace:	4615      	mov	r5, r2
 802cad0:	2900      	cmp	r1, #0
 802cad2:	461e      	mov	r6, r3
 802cad4:	da0c      	bge.n	802caf0 <__swhatbuf_r+0x2c>
 802cad6:	89a3      	ldrh	r3, [r4, #12]
 802cad8:	2100      	movs	r1, #0
 802cada:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802cade:	bf14      	ite	ne
 802cae0:	2340      	movne	r3, #64	@ 0x40
 802cae2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802cae6:	2000      	movs	r0, #0
 802cae8:	6031      	str	r1, [r6, #0]
 802caea:	602b      	str	r3, [r5, #0]
 802caec:	b016      	add	sp, #88	@ 0x58
 802caee:	bd70      	pop	{r4, r5, r6, pc}
 802caf0:	466a      	mov	r2, sp
 802caf2:	f000 f849 	bl	802cb88 <_fstat_r>
 802caf6:	2800      	cmp	r0, #0
 802caf8:	dbed      	blt.n	802cad6 <__swhatbuf_r+0x12>
 802cafa:	9901      	ldr	r1, [sp, #4]
 802cafc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802cb00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802cb04:	4259      	negs	r1, r3
 802cb06:	4159      	adcs	r1, r3
 802cb08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802cb0c:	e7eb      	b.n	802cae6 <__swhatbuf_r+0x22>

0802cb0e <__smakebuf_r>:
 802cb0e:	898b      	ldrh	r3, [r1, #12]
 802cb10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802cb12:	079d      	lsls	r5, r3, #30
 802cb14:	4606      	mov	r6, r0
 802cb16:	460c      	mov	r4, r1
 802cb18:	d507      	bpl.n	802cb2a <__smakebuf_r+0x1c>
 802cb1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802cb1e:	6023      	str	r3, [r4, #0]
 802cb20:	6123      	str	r3, [r4, #16]
 802cb22:	2301      	movs	r3, #1
 802cb24:	6163      	str	r3, [r4, #20]
 802cb26:	b003      	add	sp, #12
 802cb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cb2a:	ab01      	add	r3, sp, #4
 802cb2c:	466a      	mov	r2, sp
 802cb2e:	f7ff ffc9 	bl	802cac4 <__swhatbuf_r>
 802cb32:	9f00      	ldr	r7, [sp, #0]
 802cb34:	4605      	mov	r5, r0
 802cb36:	4630      	mov	r0, r6
 802cb38:	4639      	mov	r1, r7
 802cb3a:	f7ff f815 	bl	802bb68 <_malloc_r>
 802cb3e:	b948      	cbnz	r0, 802cb54 <__smakebuf_r+0x46>
 802cb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cb44:	059a      	lsls	r2, r3, #22
 802cb46:	d4ee      	bmi.n	802cb26 <__smakebuf_r+0x18>
 802cb48:	f023 0303 	bic.w	r3, r3, #3
 802cb4c:	f043 0302 	orr.w	r3, r3, #2
 802cb50:	81a3      	strh	r3, [r4, #12]
 802cb52:	e7e2      	b.n	802cb1a <__smakebuf_r+0xc>
 802cb54:	89a3      	ldrh	r3, [r4, #12]
 802cb56:	6020      	str	r0, [r4, #0]
 802cb58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802cb5c:	81a3      	strh	r3, [r4, #12]
 802cb5e:	9b01      	ldr	r3, [sp, #4]
 802cb60:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802cb64:	b15b      	cbz	r3, 802cb7e <__smakebuf_r+0x70>
 802cb66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cb6a:	4630      	mov	r0, r6
 802cb6c:	f000 f81e 	bl	802cbac <_isatty_r>
 802cb70:	b128      	cbz	r0, 802cb7e <__smakebuf_r+0x70>
 802cb72:	89a3      	ldrh	r3, [r4, #12]
 802cb74:	f023 0303 	bic.w	r3, r3, #3
 802cb78:	f043 0301 	orr.w	r3, r3, #1
 802cb7c:	81a3      	strh	r3, [r4, #12]
 802cb7e:	89a3      	ldrh	r3, [r4, #12]
 802cb80:	431d      	orrs	r5, r3
 802cb82:	81a5      	strh	r5, [r4, #12]
 802cb84:	e7cf      	b.n	802cb26 <__smakebuf_r+0x18>
	...

0802cb88 <_fstat_r>:
 802cb88:	b538      	push	{r3, r4, r5, lr}
 802cb8a:	2300      	movs	r3, #0
 802cb8c:	4d06      	ldr	r5, [pc, #24]	@ (802cba8 <_fstat_r+0x20>)
 802cb8e:	4604      	mov	r4, r0
 802cb90:	4608      	mov	r0, r1
 802cb92:	4611      	mov	r1, r2
 802cb94:	602b      	str	r3, [r5, #0]
 802cb96:	f7d4 fa27 	bl	8000fe8 <_fstat>
 802cb9a:	1c43      	adds	r3, r0, #1
 802cb9c:	d102      	bne.n	802cba4 <_fstat_r+0x1c>
 802cb9e:	682b      	ldr	r3, [r5, #0]
 802cba0:	b103      	cbz	r3, 802cba4 <_fstat_r+0x1c>
 802cba2:	6023      	str	r3, [r4, #0]
 802cba4:	bd38      	pop	{r3, r4, r5, pc}
 802cba6:	bf00      	nop
 802cba8:	20012acc 	.word	0x20012acc

0802cbac <_isatty_r>:
 802cbac:	b538      	push	{r3, r4, r5, lr}
 802cbae:	2300      	movs	r3, #0
 802cbb0:	4d05      	ldr	r5, [pc, #20]	@ (802cbc8 <_isatty_r+0x1c>)
 802cbb2:	4604      	mov	r4, r0
 802cbb4:	4608      	mov	r0, r1
 802cbb6:	602b      	str	r3, [r5, #0]
 802cbb8:	f7d4 fa26 	bl	8001008 <_isatty>
 802cbbc:	1c43      	adds	r3, r0, #1
 802cbbe:	d102      	bne.n	802cbc6 <_isatty_r+0x1a>
 802cbc0:	682b      	ldr	r3, [r5, #0]
 802cbc2:	b103      	cbz	r3, 802cbc6 <_isatty_r+0x1a>
 802cbc4:	6023      	str	r3, [r4, #0]
 802cbc6:	bd38      	pop	{r3, r4, r5, pc}
 802cbc8:	20012acc 	.word	0x20012acc

0802cbcc <_init>:
 802cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cbce:	bf00      	nop
 802cbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cbd2:	bc08      	pop	{r3}
 802cbd4:	469e      	mov	lr, r3
 802cbd6:	4770      	bx	lr

0802cbd8 <_fini>:
 802cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cbda:	bf00      	nop
 802cbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cbde:	bc08      	pop	{r3}
 802cbe0:	469e      	mov	lr, r3
 802cbe2:	4770      	bx	lr
